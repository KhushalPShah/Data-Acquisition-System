cscope 15 $HOME/ahgora/ah30/lpc1768/libs/lwip               0001219198
	@arch/cc.h

1 #i‚de‡
__ARCH_CC_H__


2 
	#__ARCH_CC_H__


	)

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<°döt.h
>

7 
	~<°rög.h
>

8 
	~<sys/time.h
>

10 
	#BYTE_ORDER
 
BIG_ENDIAN


	)

12 
uöt8_t
 
	tu8_t
;

13 
öt8_t
 
	ts8_t
;

14 
uöt16_t
 
	tu16_t
;

15 
öt16_t
 
	ts16_t
;

16 
uöt32_t
 
	tu32_t
;

17 
öt32_t
 
	ts32_t
;

19 
uöçå_t
 
	tmem_±r_t
;

21 
	#LWIP_ERR_T
 

	)

24 
	#U16_F
 "hu"

	)

25 
	#S16_F
 "hd"

	)

26 
	#X16_F
 "hx"

	)

27 
	#U32_F
 "u"

	)

28 
	#S32_F
 "d"

	)

29 
	#X32_F
 "x"

	)

32 
	#PACK_STRUCT_FIELD
(
x
Ë
	)
x

33 
	#PACK_STRUCT_STRUCT
 
	`__©åibuã__
((
∑cked
))

	)

34 
	#PACK_STRUCT_BEGIN


	)

35 
	#PACK_STRUCT_END


	)

	@core/def.c

39 
	~"lwù/›t.h
"

40 
	~"lwù/def.h
"

55 #i‡(
LWIP_PLATFORM_BYTESWAP
 =0Ë&& (
BYTE_ORDER
 =
LITTLE_ENDIAN
)

63 
u16_t


64 
	$lwù_ht⁄s
(
u16_t
 
n
)

66  ((
n
 & 0xff) << 8) | ((n & 0xff00) >> 8);

67 
	}
}

75 
u16_t


76 
	$lwù_¡ohs
(
u16_t
 
n
)

78  
	`lwù_ht⁄s
(
n
);

79 
	}
}

87 
u32_t


88 
	$lwù_ht⁄l
(
u32_t
 
n
)

90  ((
n
 & 0xff) << 24) |

91 ((
n
 & 0xff00) << 8) |

92 ((
n
 & 0xff0000UL) >> 8) |

93 ((
n
 & 0xff000000UL) >> 24);

94 
	}
}

102 
u32_t


103 
	$lwù_¡ohl
(
u32_t
 
n
)

105  
	`lwù_ht⁄l
(
n
);

106 
	}
}

	@core/dhcp.c

69 
	~"lwù/›t.h
"

71 #i‡
LWIP_DHCP


73 
	~"lwù/°©s.h
"

74 
	~"lwù/mem.h
"

75 
	~"lwù/udp.h
"

76 
	~"lwù/ù_addr.h
"

77 
	~"lwù/√tif.h
"

78 
	~"lwù/def.h
"

79 
	~"lwù/sys.h
"

80 
	~"lwù/dh˝.h
"

81 
	~"lwù/autoù.h
"

82 
	~"lwù/dns.h
"

83 
	~"√tif/ëh¨p.h
"

85 
	~<°rög.h
>

92 #ifde‡
DHCP_GLOBAL_XID_HEADER


93 #ö˛udê
DHCP_GLOBAL_XID_HEADER


98 
	#DHCP_MAX_MSG_LEN
(
√tif
Ë“ëif->
mtu
)

	)

99 
	#DHCP_MAX_MSG_LEN_MIN_REQUIRED
 576

	)

101 
	#DHCP_MIN_REPLY_LEN
 44

	)

103 
	#REBOOT_TRIES
 2

	)

110 
	#DHCP_OPTION_IDX_OVERLOAD
 0

	)

111 
	#DHCP_OPTION_IDX_MSG_TYPE
 1

	)

112 
	#DHCP_OPTION_IDX_SERVER_ID
 2

	)

113 
	#DHCP_OPTION_IDX_LEASE_TIME
 3

	)

114 
	#DHCP_OPTION_IDX_T1
 4

	)

115 
	#DHCP_OPTION_IDX_T2
 5

	)

116 
	#DHCP_OPTION_IDX_SUBNET_MASK
 6

	)

117 
	#DHCP_OPTION_IDX_ROUTER
 7

	)

118 
	#DHCP_OPTION_IDX_DNS_SERVER
 8

	)

119 
	#DHCP_OPTION_IDX_MAX
 (
DHCP_OPTION_IDX_DNS_SERVER
 + 
DNS_MAX_SERVERS
)

	)

123 
u32_t
 
	gdh˝_rx_›ti⁄s_vÆ
[
DHCP_OPTION_IDX_MAX
];

127 
u8_t
 
	gdh˝_rx_›ti⁄s_giví
[
DHCP_OPTION_IDX_MAX
];

129 
	#dh˝_›ti⁄_giví
(
dh˝
, 
idx
Ë(
dh˝_rx_›ti⁄s_giví
[idx] !0)

	)

130 
	#dh˝_gŸ_›ti⁄
(
dh˝
, 
idx
Ë(
dh˝_rx_›ti⁄s_giví
[idx] = 1)

	)

131 
	#dh˝_˛ór_›ti⁄
(
dh˝
, 
idx
Ë(
dh˝_rx_›ti⁄s_giví
[idx] = 0)

	)

132 
	#dh˝_˛ór_Æl_›ti⁄s
(
dh˝
Ë(
	`mem£t
(
dh˝_rx_›ti⁄s_giví
, 0, (dh˝_rx_›ti⁄s_giví)))

	)

133 
	#dh˝_gë_›ti⁄_vÆue
(
dh˝
, 
idx
Ë(
dh˝_rx_›ti⁄s_vÆ
[idx])

	)

134 
	#dh˝_£t_›ti⁄_vÆue
(
dh˝
, 
idx
, 
vÆ
Ë(
dh˝_rx_›ti⁄s_vÆ
[idx] = (vÆ))

	)

138 
îr_t
 
dh˝_discovî
(
√tif
 *netif);

139 
îr_t
 
dh˝_£À˘
(
√tif
 *netif);

140 
dh˝_böd
(
√tif
 *netif);

141 #i‡
DHCP_DOES_ARP_CHECK


142 
îr_t
 
dh˝_de˛öe
(
√tif
 *netif);

144 
îr_t
 
dh˝_ªböd
(
√tif
 *netif);

145 
îr_t
 
dh˝_ªboŸ
(
√tif
 *netif);

146 
dh˝_£t_°©e
(
dh˝
 *dh˝, 
u8_t
 
√w_°©e
);

149 
dh˝_ªcv
(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr_t
 *
addr
, 
u16_t
 
p‹t
);

152 
dh˝_timeout
(
√tif
 *netif);

153 
dh˝_t1_timeout
(
√tif
 *netif);

154 
dh˝_t2_timeout
(
√tif
 *netif);

158 
îr_t
 
dh˝_¸óã_msg
(
√tif
 *√tif, 
dh˝
 *dh˝, 
u8_t
 
mesßge_ty≥
);

160 
dh˝_dñëe_msg
(
dh˝
 *dhcp);

162 
dh˝_›ti⁄
(
dh˝
 *dh˝, 
u8_t
 
›ti⁄_ty≥
, u8_à
›ti⁄_Àn
);

164 
dh˝_›ti⁄_byã
(
dh˝
 *dh˝, 
u8_t
 
vÆue
);

165 
dh˝_›ti⁄_sh‹t
(
dh˝
 *dh˝, 
u16_t
 
vÆue
);

166 
dh˝_›ti⁄_l⁄g
(
dh˝
 *dh˝, 
u32_t
 
vÆue
);

168 
dh˝_›ti⁄_åaûî
(
dh˝
 *dhcp);

183 
	$dh˝_h™dÀ_«k
(
√tif
 *netif)

185 
dh˝
 *dh˝ = 
√tif
->dhcp;

186 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dh˝_h™dÀ_«k“ëif=%pË%c%c%"
U16_F
"\n",

187 (*)
√tif
,Çëif->
«me
[0],Çëif->«me[1], (
u16_t
Íëif->
num
));

189 
	`√tif_£t_down
(
√tif
);

191 
	`√tif_£t_ùaddr
(
√tif
, 
IP_ADDR_ANY
);

192 
	`√tif_£t_gw
(
√tif
, 
IP_ADDR_ANY
);

193 
	`√tif_£t_√tmask
(
√tif
, 
IP_ADDR_ANY
);

195 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_BACKING_OFF
);

197 
	`dh˝_discovî
(
√tif
);

198 
	}
}

200 #i‡
DHCP_DOES_ARP_CHECK


211 
	$dh˝_check
(
√tif
 *netif)

213 
dh˝
 *dh˝ = 
√tif
->dhcp;

214 
îr_t
 
ªsu…
;

215 
u16_t
 
m£cs
;

216 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dh˝_check“ëif=%pË%c%c\n", (*)
√tif
, (
s16_t
Íëif->
«me
[0],

217 (
s16_t
)
√tif
->
«me
[1]));

218 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_CHECKING
);

221 
ªsu…
 = 
	`ëh¨p_quîy
(
√tif
, &
dh˝
->
of„ªd_ù_addr
, 
NULL
);

222 i‡(
ªsu…
 !
ERR_OK
) {

223 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_LEVEL_WARNING
, ("dhcp_check: couldÇotÖerform ARP query\n"));

225 
dh˝
->
åõs
++;

226 
m£cs
 = 500;

227 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

228 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_check(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

229 
	}
}

238 
	$dh˝_h™dÀ_of„r
(
√tif
 *netif)

240 
dh˝
 *dh˝ = 
√tif
->dhcp;

241 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dh˝_h™dÀ_of„r“ëif=%pË%c%c%"
U16_F
"\n",

242 (*)
√tif
,Çëif->
«me
[0],Çëif->«me[1], (
u16_t
Íëif->
num
));

244 i‡(
	`dh˝_›ti⁄_giví
(
dh˝
, 
DHCP_OPTION_IDX_SERVER_ID
)) {

245 
	`ù4_addr_£t_u32
(&
dh˝
->
£rvî_ù_addr
, 
	`ht⁄l
(
	`dh˝_gë_›ti⁄_vÆue
(dh˝, 
DHCP_OPTION_IDX_SERVER_ID
)));

246 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dh˝_h™dÀ_of„r(): sîvî 0x%08"
X32_F
"\n",

247 
	`ù4_addr_gë_u32
(&
dh˝
->
£rvî_ù_addr
)));

249 
	`ù_addr_c›y
(
dh˝
->
of„ªd_ù_addr
, dh˝->
msg_ö
->
yüddr
);

250 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dh˝_h™dÀ_of„r(): of„∏f‹ 0x%08"
X32_F
"\n",

251 
	`ù4_addr_gë_u32
(&
dh˝
->
of„ªd_ù_addr
)));

253 
	`dh˝_£À˘
(
√tif
);

255 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_LEVEL_SERIOUS
,

256 ("dh˝_h™dÀ_of„r“ëif=%pËdidÇŸ gë sîvî ID!\n", (*)
√tif
));

258 
	}
}

268 
îr_t


269 
	$dh˝_£À˘
(
√tif
 *netif)

271 
dh˝
 *dh˝ = 
√tif
->dhcp;

272 
îr_t
 
ªsu…
;

273 
u16_t
 
m£cs
;

275 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dh˝_£À˘“ëif=%pË%c%c%"
U16_F
"\n", (*)
√tif
,Çëif->
«me
[0],Çëif->«me[1], (
u16_t
Íëif->
num
));

276 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_REQUESTING
);

279 
ªsu…
 = 
	`dh˝_¸óã_msg
(
√tif
, 
dh˝
, 
DHCP_REQUEST
);

280 i‡(
ªsu…
 =
ERR_OK
) {

281 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MAX_MSG_SIZE
, 
DHCP_OPTION_MAX_MSG_SIZE_LEN
);

282 
	`dh˝_›ti⁄_sh‹t
(
dh˝
, 
	`DHCP_MAX_MSG_LEN
(
√tif
));

285 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_REQUESTED_IP
, 4);

286 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(
	`ù4_addr_gë_u32
(&dh˝->
of„ªd_ù_addr
)));

288 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_SERVER_ID
, 4);

289 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(
	`ù4_addr_gë_u32
(&dh˝->
£rvî_ù_addr
)));

291 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_PARAMETER_REQUEST_LIST
, 4 );

292 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_SUBNET_MASK
);

293 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_ROUTER
);

294 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_BROADCAST
);

295 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_DNS_SERVER
);

297 #i‡
LWIP_NETIF_HOSTNAME


298 i‡(
√tif
->
ho°«me
 !
NULL
) {

299 c⁄° *
p
 = (c⁄° *)
√tif
->
ho°«me
;

300 
u8_t
 
«mñí
 = (u8_t)
	`°æí
(
p
);

301 i‡(
«mñí
 > 0) {

302 
	`LWIP_ASSERT
("DHCP: ho°«mêi†toÿl⁄g!", 
«mñí
 < 255);

303 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_HOSTNAME
, 
«mñí
);

304 *
p
) {

305 
	`dh˝_›ti⁄_byã
(
dh˝
, *
p
++);

311 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

313 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

316 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, 
IP_ADDR_BROADCAST
, 
DHCP_SERVER_PORT
, 
√tif
);

317 
	`dh˝_dñëe_msg
(
dh˝
);

318 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_select: REQUESTING\n"));

320 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_LEVEL_WARNING
, ("dhcp_select: couldÇotállocate DHCPÑequest\n"));

322 
dh˝
->
åõs
++;

323 
m£cs
 = (
dh˝
->
åõs
 < 6 ? 1 << dhcp->tries : 60) * 1000;

324 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

325 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dh˝_£À˘(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

326  
ªsu…
;

327 
	}
}

333 
	$dh˝_cﬂr£_tmr
()

335 
√tif
 *√ti‡
√tif_li°
;

336 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_coarse_tmr()\n"));

338 
√tif
 !
NULL
) {

340 i‡(
√tif
->
dh˝
 !
NULL
) {

342 i‡(
√tif
->
dh˝
->
t2_timeout
-- == 1) {

343 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_coarse_tmr():Å2Åimeout\n"));

345 
	`dh˝_t2_timeout
(
√tif
);

347 } i‡(
√tif
->
dh˝
->
t1_timeout
-- == 1) {

348 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_coarse_tmr():Å1Åimeout\n"));

350 
	`dh˝_t1_timeout
(
√tif
);

354 
√tif
 =Çëif->
√xt
;

356 
	}
}

365 
	$dh˝_föe_tmr
()

367 
√tif
 *√ti‡
√tif_li°
;

369 
√tif
 !
NULL
) {

371 i‡(
√tif
->
dh˝
 !
NULL
) {

373 i‡(
√tif
->
dh˝
->
ªque°_timeout
 > 1) {

374 
√tif
->
dh˝
->
ªque°_timeout
--;

376 i‡(
√tif
->
dh˝
->
ªque°_timeout
 == 1) {

377 
√tif
->
dh˝
->
ªque°_timeout
--;

379 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_fine_tmr():ÑequestÅimeout\n"));

381 
	`dh˝_timeout
(
√tif
);

385 
√tif
 =Çëif->
√xt
;

387 
	}
}

398 
	$dh˝_timeout
(
√tif
 *netif)

400 
dh˝
 *dh˝ = 
√tif
->dhcp;

401 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_timeout()\n"));

403 i‡((
dh˝
->
°©e
 =
DHCP_BACKING_OFF
Ë|| (dh˝->°©ê=
DHCP_SELECTING
)) {

404 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_timeout():Ñestarting discovery\n"));

405 
	`dh˝_discovî
(
√tif
);

407 } i‡(
dh˝
->
°©e
 =
DHCP_REQUESTING
) {

408 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_timeout(): REQUESTING, DHCPÑequestÅimed out\n"));

409 i‡(
dh˝
->
åõs
 <= 5) {

410 
	`dh˝_£À˘
(
√tif
);

412 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_timeout(): REQUESTING,Ñeleasing,Ñestarting\n"));

413 
	`dh˝_ªÀa£
(
√tif
);

414 
	`dh˝_discovî
(
√tif
);

416 #i‡
DHCP_DOES_ARP_CHECK


418 } i‡(
dh˝
->
°©e
 =
DHCP_CHECKING
) {

419 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_timeout(): CHECKING, ARPÑequestÅimed out\n"));

420 i‡(
dh˝
->
åõs
 <= 1) {

421 
	`dh˝_check
(
√tif
);

426 
	`dh˝_böd
(
√tif
);

431 i‡(
dh˝
->
°©e
 =
DHCP_RENEWING
) {

432 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_timeout(): RENEWING, DHCPÑequestÅimed out\n"));

435 
	`dh˝_ª√w
(
√tif
);

437 } i‡(
dh˝
->
°©e
 =
DHCP_REBINDING
) {

438 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_timeout(): REBINDING, DHCPÑequestÅimed out\n"));

439 i‡(
dh˝
->
åõs
 <= 8) {

440 
	`dh˝_ªböd
(
√tif
);

442 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_timeout(): RELEASING, DISCOVERING\n"));

443 
	`dh˝_ªÀa£
(
√tif
);

444 
	`dh˝_discovî
(
√tif
);

446 } i‡(
dh˝
->
°©e
 =
DHCP_REBOOTING
) {

447 i‡(
dh˝
->
åõs
 < 
REBOOT_TRIES
) {

448 
	`dh˝_ªboŸ
(
√tif
);

450 
	`dh˝_discovî
(
√tif
);

453 
	}
}

461 
	$dh˝_t1_timeout
(
√tif
 *netif)

463 
dh˝
 *dh˝ = 
√tif
->dhcp;

464 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dhcp_t1_timeout()\n"));

465 i‡((
dh˝
->
°©e
 =
DHCP_REQUESTING
Ë|| (dh˝->°©ê=
DHCP_BOUND
) ||

466 (
dh˝
->
°©e
 =
DHCP_RENEWING
)) {

469 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
,

473 
	`dh˝_ª√w
(
√tif
);

475 
	}
}

483 
	$dh˝_t2_timeout
(
√tif
 *netif)

485 
dh˝
 *dh˝ = 
√tif
->dhcp;

486 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_t2_timeout()\n"));

487 i‡((
dh˝
->
°©e
 =
DHCP_REQUESTING
Ë|| (dh˝->°©ê=
DHCP_BOUND
) ||

488 (
dh˝
->
°©e
 =
DHCP_RENEWING
)) {

490 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
,

494 
	`dh˝_ªböd
(
√tif
);

496 
	}
}

504 
	$dh˝_h™dÀ_ack
(
√tif
 *netif)

506 
dh˝
 *dh˝ = 
√tif
->dhcp;

507 #i‡
LWIP_DNS


508 
u8_t
 
n
;

512 
	`ù_addr_£t_zîo
(&
dh˝
->
of„ªd_¢_mask
);

513 
	`ù_addr_£t_zîo
(&
dh˝
->
of„ªd_gw_addr
);

514 #i‡
LWIP_DHCP_BOOTP_FILE


515 
	`ù_addr_£t_zîo
(&
dh˝
->
of„ªd_si_addr
);

519 i‡(
	`dh˝_›ti⁄_giví
(
dh˝
, 
DHCP_OPTION_IDX_LEASE_TIME
)) {

521 
dh˝
->
of„ªd_t0_Àa£
 = 
	`dh˝_gë_›ti⁄_vÆue
(dh˝, 
DHCP_OPTION_IDX_LEASE_TIME
);

524 i‡(
	`dh˝_›ti⁄_giví
(
dh˝
, 
DHCP_OPTION_IDX_T1
)) {

526 
dh˝
->
of„ªd_t1_ª√w
 = 
	`dh˝_gë_›ti⁄_vÆue
(dh˝, 
DHCP_OPTION_IDX_T1
);

529 
dh˝
->
of„ªd_t1_ª√w
 = dh˝->
of„ªd_t0_Àa£
 / 2;

533 i‡(
	`dh˝_›ti⁄_giví
(
dh˝
, 
DHCP_OPTION_IDX_T2
)) {

535 
dh˝
->
of„ªd_t2_ªböd
 = 
	`dh˝_gë_›ti⁄_vÆue
(dh˝, 
DHCP_OPTION_IDX_T2
);

538 
dh˝
->
of„ªd_t2_ªböd
 = dh˝->
of„ªd_t0_Àa£
;

542 
	`ù_addr_c›y
(
dh˝
->
of„ªd_ù_addr
, dh˝->
msg_ö
->
yüddr
);

544 #i‡
LWIP_DHCP_BOOTP_FILE


547 
	`ù_addr_c›y
(
dh˝
->
of„ªd_si_addr
, dh˝->
msg_ö
->
süddr
);

551 i‡(
	`dh˝_›ti⁄_giví
(
dh˝
, 
DHCP_OPTION_IDX_SUBNET_MASK
)) {

553 
	`ù4_addr_£t_u32
(&
dh˝
->
of„ªd_¢_mask
, 
	`ht⁄l
(
	`dh˝_gë_›ti⁄_vÆue
(dh˝, 
DHCP_OPTION_IDX_SUBNET_MASK
)));

554 
dh˝
->
sub√t_mask_giví
 = 1;

556 
dh˝
->
sub√t_mask_giví
 = 0;

560 i‡(
	`dh˝_›ti⁄_giví
(
dh˝
, 
DHCP_OPTION_IDX_ROUTER
)) {

561 
	`ù4_addr_£t_u32
(&
dh˝
->
of„ªd_gw_addr
, 
	`ht⁄l
(
	`dh˝_gë_›ti⁄_vÆue
(dh˝, 
DHCP_OPTION_IDX_ROUTER
)));

564 #i‡
LWIP_DNS


566 
n
 = 0;

567 
	`dh˝_›ti⁄_giví
(
dh˝
, 
DHCP_OPTION_IDX_DNS_SERVER
 + 
n
Ë&& (¿< 
DNS_MAX_SERVERS
)) {

568 
ù_addr_t
 
dns_addr
;

569 
	`ù4_addr_£t_u32
(&
dns_addr
, 
	`ht⁄l
(
	`dh˝_gë_›ti⁄_vÆue
(
dh˝
, 
DHCP_OPTION_IDX_DNS_SERVER
 + 
n
)));

570 
	`dns_£t£rvî
(
n
, &
dns_addr
);

571 
n
++;

574 
	}
}

583 
	$dh˝_£t_°ru˘
(
√tif
 *√tif, 
dh˝
 *dhcp)

585 
	`LWIP_ASSERT
("√ti‡!NULL", 
√tif
 !
NULL
);

586 
	`LWIP_ASSERT
("dh˝ !NULL", 
dh˝
 !
NULL
);

587 
	`LWIP_ASSERT
("√ti‡Æªady ha†®°ru˘ dh˝ së", 
√tif
->
dh˝
 =
NULL
);

590 
	`mem£t
(
dh˝
, 0, (dhcp));

592 
√tif
->
dh˝
 = dhcp;

593 
	}
}

602 
	$dh˝_˛ónup
(
√tif
 *netif)

604 
	`LWIP_ASSERT
("√ti‡!NULL", 
√tif
 !
NULL
);

606 i‡(
√tif
->
dh˝
 !
NULL
) {

607 
	`mem_‰ì
(
√tif
->
dh˝
);

608 
√tif
->
dh˝
 = 
NULL
;

610 
	}
}

624 
îr_t


625 
	$dh˝_°¨t
(
√tif
 *netif)

627 
dh˝
 *dhcp;

628 
îr_t
 
ªsu…
 = 
ERR_OK
;

630 
	`LWIP_ERROR
("√ti‡!NULL", (
√tif
 !
NULL
),  
ERR_ARG
;);

631 
dh˝
 = 
√tif
->dhcp;

632 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_°¨t“ëif=%pË%c%c%"
U16_F
"\n", (*)
√tif
,Çëif->
«me
[0],Çëif->«me[1], (
u16_t
Íëif->
num
));

635 
√tif
->
Êags
 &~
NETIF_FLAG_DHCP
;

638 i‡((
√tif
->
Êags
 & 
NETIF_FLAG_ETHARP
) == 0) {

639 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_start(): No ETHARPÇetif\n"));

640  
ERR_ARG
;

644 i‡(
√tif
->
mtu
 < 
DHCP_MAX_MSG_LEN_MIN_REQUIRED
) {

645 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_start(): Cannot useÅhisÇetif with DHCP: MTU isÅoo small\n"));

646  
ERR_MEM
;

650 i‡(
dh˝
 =
NULL
) {

651 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_start(): startingÇew DHCP client\n"));

652 
dh˝
 = (dh˝ *)
	`mem_mÆloc
((dhcp));

653 i‡(
dh˝
 =
NULL
) {

654 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_start(): couldÇotállocate dhcp\n"));

655  
ERR_MEM
;

658 
√tif
->
dh˝
 = dhcp;

659 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_start():állocated dhcp"));

662 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_start():Ñestarting DHCP configuration\n"));

663 i‡(
dh˝
->
pcb
 !
NULL
) {

664 
	`udp_ªmove
(
dh˝
->
pcb
);

666 
	`LWIP_ASSERT
("pbu‡p_ouàwa¢'à‰ìd", 
dh˝
->
p_out
 =
NULL
);

667 
	`LWIP_ASSERT
("ª∂y wa¢'à‰ìd", 
dh˝
->
msg_ö
 =
NULL
 );

671 
	`mem£t
(
dh˝
, 0, (dhcp));

674 
dh˝
->
pcb
 = 
	`udp_√w
();

675 i‡(
dh˝
->
pcb
 =
NULL
) {

676 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_start(): couldÇot obtainÖcb\n"));

677  
ERR_MEM
;

679 
dh˝
->
pcb
->
so_›ti⁄s
 |
SOF_BROADCAST
;

681 
	`udp_böd
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_CLIENT_PORT
);

682 
	`udp_c⁄√˘
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_SERVER_PORT
);

684 
	`udp_ªcv
(
dh˝
->
pcb
, 
dh˝_ªcv
, 
√tif
);

685 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_start(): starting DHCP configuration\n"));

687 
ªsu…
 = 
	`dh˝_discovî
(
√tif
);

688 i‡(
ªsu…
 !
ERR_OK
) {

690 
	`dh˝_°›
(
√tif
);

691  
ERR_MEM
;

694 
√tif
->
Êags
 |
NETIF_FLAG_DHCP
;

695  
ªsu…
;

696 
	}
}

708 
	$dh˝_öf‹m
(
√tif
 *netif)

710 
dh˝
 dhcp;

711 
îr_t
 
ªsu…
 = 
ERR_OK
;

712 
udp_pcb
 *
pcb
;

714 
	`LWIP_ERROR
("√ti‡!NULL", (
√tif
 !
NULL
), ;);

716 
	`mem£t
(&
dh˝
, 0, (dhcp));

717 
	`dh˝_£t_°©e
(&
dh˝
, 
DHCP_INFORM
);

719 i‡((
√tif
->
dh˝
 !
NULL
Ë&& (√tif->dh˝->
pcb
 != NULL)) {

721 
pcb
 = 
√tif
->
dh˝
->pcb;

723 
pcb
 = 
	`udp_√w
();

724 i‡(
pcb
 =
NULL
) {

725 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_LEVEL_SERIOUS
, ("dhcp_inform(): couldÇot obtainÖcb"));

728 
dh˝
.
pcb
 =Öcb;

729 
dh˝
.
pcb
->
so_›ti⁄s
 |
SOF_BROADCAST
;

730 
	`udp_böd
(
dh˝
.
pcb
, 
IP_ADDR_ANY
, 
DHCP_CLIENT_PORT
);

731 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_inform(): createdÇew udpÖcb\n"));

734 
ªsu…
 = 
	`dh˝_¸óã_msg
(
√tif
, &
dh˝
, 
DHCP_INFORM
);

735 i‡(
ªsu…
 =
ERR_OK
) {

736 
	`dh˝_›ti⁄
(&
dh˝
, 
DHCP_OPTION_MAX_MSG_SIZE
, 
DHCP_OPTION_MAX_MSG_SIZE_LEN
);

737 
	`dh˝_›ti⁄_sh‹t
(&
dh˝
, 
	`DHCP_MAX_MSG_LEN
(
√tif
));

739 
	`dh˝_›ti⁄_åaûî
(&
dh˝
);

741 
	`pbuf_ªÆloc
(
dh˝
.
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝.
›ti⁄s_out_Àn
);

743 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_inform: INFORMING\n"));

744 
	`udp_£ndto_if
(
pcb
, 
dh˝
.
p_out
, 
IP_ADDR_BROADCAST
, 
DHCP_SERVER_PORT
, 
√tif
);

745 
	`dh˝_dñëe_msg
(&
dh˝
);

747 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_LEVEL_SERIOUS
, ("dhcp_inform: couldÇotállocate DHCPÑequest\n"));

750 i‡(
dh˝
.
pcb
 !
NULL
) {

752 
	`udp_ªmove
(
dh˝
.
pcb
);

754 
	}
}

762 
	$dh˝_√tw‹k_ch™ged
(
√tif
 *netif)

764 
dh˝
 *dh˝ = 
√tif
->dhcp;

765 i‡(!
dh˝
)

767 
dh˝
->
°©e
) {

768 
DHCP_REBINDING
:

769 
DHCP_RENEWING
:

770 
DHCP_BOUND
:

771 
DHCP_REBOOTING
:

772 
	`√tif_£t_down
(
√tif
);

773 
dh˝
->
åõs
 = 0;

774 
	`dh˝_ªboŸ
(
√tif
);

776 
DHCP_OFF
:

780 
dh˝
->
åõs
 = 0;

781 #i‡
LWIP_DHCP_AUTOIP_COOP


782 if(
dh˝
->
autoù_co›_°©e
 =
DHCP_AUTOIP_COOP_STATE_ON
) {

783 
	`autoù_°›
(
√tif
);

784 
dh˝
->
autoù_co›_°©e
 = 
DHCP_AUTOIP_COOP_STATE_OFF
;

787 
	`dh˝_discovî
(
√tif
);

790 
	}
}

792 #i‡
DHCP_DOES_ARP_CHECK


799 
	$dh˝_¨p_ª∂y
(
√tif
 *√tif, 
ù_addr_t
 *
addr
)

801 
	`LWIP_ERROR
("√ti‡!NULL", (
√tif
 !
NULL
), ;);

802 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_arp_reply()\n"));

804 i‡((
√tif
->
dh˝
 !
NULL
Ë&& (√tif->dh˝->
°©e
 =
DHCP_CHECKING
)) {

805 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_¨p_ª∂y(): CHECKING,áΩÑïly f‹ 0x%08"
X32_F
"\n",

806 
	`ù4_addr_gë_u32
(
addr
)));

809 i‡(
	`ù_addr_cmp
(
addr
, &
√tif
->
dh˝
->
of„ªd_ù_addr
)) {

811 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 
LWIP_DBG_LEVEL_WARNING
,

813 
	`dh˝_de˛öe
(
√tif
);

816 
	}
}

827 
îr_t


828 
	$dh˝_de˛öe
(
√tif
 *netif)

830 
dh˝
 *dh˝ = 
√tif
->dhcp;

831 
îr_t
 
ªsu…
 = 
ERR_OK
;

832 
u16_t
 
m£cs
;

833 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_decline()\n"));

834 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_BACKING_OFF
);

836 
ªsu…
 = 
	`dh˝_¸óã_msg
(
√tif
, 
dh˝
, 
DHCP_DECLINE
);

837 i‡(
ªsu…
 =
ERR_OK
) {

838 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_REQUESTED_IP
, 4);

839 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(
	`ù4_addr_gë_u32
(&dh˝->
of„ªd_ù_addr
)));

841 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

843 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

846 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, 
IP_ADDR_BROADCAST
, 
DHCP_SERVER_PORT
, 
√tif
);

847 
	`dh˝_dñëe_msg
(
dh˝
);

848 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_decline: BACKING OFF\n"));

850 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_LEVEL_SERIOUS
,

853 
dh˝
->
åõs
++;

854 
m£cs
 = 10*1000;

855 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

856 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dh˝_de˛öe(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

857  
ªsu…
;

858 
	}
}

867 
îr_t


868 
	$dh˝_discovî
(
√tif
 *netif)

870 
dh˝
 *dh˝ = 
√tif
->dhcp;

871 
îr_t
 
ªsu…
 = 
ERR_OK
;

872 
u16_t
 
m£cs
;

873 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_discover()\n"));

874 
	`ù_addr_£t_™y
(&
dh˝
->
of„ªd_ù_addr
);

875 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_SELECTING
);

877 
ªsu…
 = 
	`dh˝_¸óã_msg
(
√tif
, 
dh˝
, 
DHCP_DISCOVER
);

878 i‡(
ªsu…
 =
ERR_OK
) {

879 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_discover: makingÑequest\n"));

881 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MAX_MSG_SIZE
, 
DHCP_OPTION_MAX_MSG_SIZE_LEN
);

882 
	`dh˝_›ti⁄_sh‹t
(
dh˝
, 
	`DHCP_MAX_MSG_LEN
(
√tif
));

884 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_PARAMETER_REQUEST_LIST
, 4 );

885 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_SUBNET_MASK
);

886 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_ROUTER
);

887 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_BROADCAST
);

888 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_DNS_SERVER
);

890 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

892 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_discover:Ñealloc()ing\n"));

893 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

895 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));

896 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, 
IP_ADDR_BROADCAST
, 
DHCP_SERVER_PORT
, 
√tif
);

897 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_discover: deleting()ing\n"));

898 
	`dh˝_dñëe_msg
(
dh˝
);

899 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_discover: SELECTING\n"));

901 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_LEVEL_SERIOUS
, ("dhcp_discover: couldÇotállocate DHCPÑequest\n"));

903 
dh˝
->
åõs
++;

904 #i‡
LWIP_DHCP_AUTOIP_COOP


905 if(
dh˝
->
åõs
 >
LWIP_DHCP_AUTOIP_COOP_TRIES
 && dh˝->
autoù_co›_°©e
 =
DHCP_AUTOIP_COOP_STATE_OFF
) {

906 
dh˝
->
autoù_co›_°©e
 = 
DHCP_AUTOIP_COOP_STATE_ON
;

907 
	`autoù_°¨t
(
√tif
);

910 
m£cs
 = (
dh˝
->
åõs
 < 6 ? 1 << dhcp->tries : 60) * 1000;

911 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

912 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_discovî(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

913  
ªsu…
;

914 
	}
}

923 
	$dh˝_böd
(
√tif
 *netif)

925 
u32_t
 
timeout
;

926 
dh˝
 *dhcp;

927 
ù_addr_t
 
¢_mask
, 
gw_addr
;

928 
	`LWIP_ERROR
("dh˝_böd:Çëi‡!NULL", (
√tif
 !
NULL
), ;);

929 
dh˝
 = 
√tif
->dhcp;

930 
	`LWIP_ERROR
("dh˝_böd: dh˝ !NULL", (
dh˝
 !
NULL
), ;);

931 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dh˝_böd“ëif=%pË%c%c%"
U16_F
"\n", (*)
√tif
,Çëif->
«me
[0],Çëif->«me[1], (
u16_t
Íëif->
num
));

934 i‡(
dh˝
->
of„ªd_t1_ª√w
 != 0xffffffffUL) {

936 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dh˝_böd():Å1ÑíewÆÅimî %"
U32_F
" secs\n", 
dh˝
->
of„ªd_t1_ª√w
));

937 
timeout
 = (
dh˝
->
of„ªd_t1_ª√w
 + 
DHCP_COARSE_TIMER_SECS
 / 2) / DHCP_COARSE_TIMER_SECS;

938 if(
timeout
 > 0xffff) {

939 
timeout
 = 0xffff;

941 
dh˝
->
t1_timeout
 = (
u16_t
)
timeout
;

942 i‡(
dh˝
->
t1_timeout
 == 0) {

943 
dh˝
->
t1_timeout
 = 1;

945 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_böd(): sëÑeque°Åimeouà%"
U32_F
" m£cs\n", 
dh˝
->
of„ªd_t1_ª√w
*1000));

948 i‡(
dh˝
->
of„ªd_t2_ªböd
 != 0xffffffffUL) {

949 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dh˝_böd():Å2ÑebödÅimî %"
U32_F
" secs\n", 
dh˝
->
of„ªd_t2_ªböd
));

950 
timeout
 = (
dh˝
->
of„ªd_t2_ªböd
 + 
DHCP_COARSE_TIMER_SECS
 / 2) / DHCP_COARSE_TIMER_SECS;

951 if(
timeout
 > 0xffff) {

952 
timeout
 = 0xffff;

954 
dh˝
->
t2_timeout
 = (
u16_t
)
timeout
;

955 i‡(
dh˝
->
t2_timeout
 == 0) {

956 
dh˝
->
t2_timeout
 = 1;

958 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_böd(): sëÑeque°Åimeouà%"
U32_F
" m£cs\n", 
dh˝
->
of„ªd_t2_ªböd
*1000));

961 i‡(
dh˝
->
sub√t_mask_giví
) {

963 
	`ù_addr_c›y
(
¢_mask
, 
dh˝
->
of„ªd_¢_mask
);

966 
u8_t
 
fú°_o˘ë
 = 
	`ù4_addr1
(&
dh˝
->
of„ªd_ù_addr
);

967 i‡(
fú°_o˘ë
 <= 127) {

968 
	`ù4_addr_£t_u32
(&
¢_mask
, 
	`PP_HTONL
(0xff000000UL));

969 } i‡(
fú°_o˘ë
 >= 192) {

970 
	`ù4_addr_£t_u32
(&
¢_mask
, 
	`PP_HTONL
(0xffffff00UL));

972 
	`ù4_addr_£t_u32
(&
¢_mask
, 
	`PP_HTONL
(0xffff0000UL));

976 
	`ù_addr_c›y
(
gw_addr
, 
dh˝
->
of„ªd_gw_addr
);

978 i‡(
	`ù_addr_ißny
(&
gw_addr
)) {

980 
	`ù_addr_gë_√tw‹k
(&
gw_addr
, &
dh˝
->
of„ªd_ù_addr
, &
¢_mask
);

982 
	`ù4_addr_£t_u32
(&
gw_addr
, 
	`ù4_addr_gë_u32
(&gw_addrË| 
	`PP_HTONL
(0x00000001UL));

985 #i‡
LWIP_DHCP_AUTOIP_COOP


986 if(
dh˝
->
autoù_co›_°©e
 =
DHCP_AUTOIP_COOP_STATE_ON
) {

987 
	`autoù_°›
(
√tif
);

988 
dh˝
->
autoù_co›_°©e
 = 
DHCP_AUTOIP_COOP_STATE_OFF
;

992 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dh˝_böd(): IP: 0x%08"
X32_F
"\n",

993 
	`ù4_addr_gë_u32
(&
dh˝
->
of„ªd_ù_addr
)));

994 
	`√tif_£t_ùaddr
(
√tif
, &
dh˝
->
of„ªd_ù_addr
);

995 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dh˝_böd(): SN: 0x%08"
X32_F
"\n",

996 
	`ù4_addr_gë_u32
(&
¢_mask
)));

997 
	`√tif_£t_√tmask
(
√tif
, &
¢_mask
);

998 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dh˝_böd(): GW: 0x%08"
X32_F
"\n",

999 
	`ù4_addr_gë_u32
(&
gw_addr
)));

1000 
	`√tif_£t_gw
(
√tif
, &
gw_addr
);

1002 
	`√tif_£t_up
(
√tif
);

1004 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_BOUND
);

1005 
	}
}

1012 
îr_t


1013 
	$dh˝_ª√w
(
√tif
 *netif)

1015 
dh˝
 *dh˝ = 
√tif
->dhcp;

1016 
îr_t
 
ªsu…
;

1017 
u16_t
 
m£cs
;

1018 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_renew()\n"));

1019 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_RENEWING
);

1022 
ªsu…
 = 
	`dh˝_¸óã_msg
(
√tif
, 
dh˝
, 
DHCP_REQUEST
);

1023 i‡(
ªsu…
 =
ERR_OK
) {

1024 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MAX_MSG_SIZE
, 
DHCP_OPTION_MAX_MSG_SIZE_LEN
);

1025 
	`dh˝_›ti⁄_sh‹t
(
dh˝
, 
	`DHCP_MAX_MSG_LEN
(
√tif
));

1027 #i‡
LWIP_NETIF_HOSTNAME


1028 i‡(
√tif
->
ho°«me
 !
NULL
) {

1029 c⁄° *
p
 = (c⁄° *)
√tif
->
ho°«me
;

1030 
u8_t
 
«mñí
 = (u8_t)
	`°æí
(
p
);

1031 i‡(
«mñí
 > 0) {

1032 
	`LWIP_ASSERT
("DHCP: ho°«mêi†toÿl⁄g!", 
«mñí
 < 255);

1033 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_HOSTNAME
, 
«mñí
);

1034 *
p
) {

1035 
	`dh˝_›ti⁄_byã
(
dh˝
, *
p
++);

1042 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_REQUESTED_IP
, 4);

1043 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(dh˝->
of„ªd_ù_addr
.
addr
));

1047 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_SERVER_ID
, 4);

1048 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(dh˝->
£rvî_ù_addr
.
addr
));

1051 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

1053 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

1055 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, &dh˝->
£rvî_ù_addr
, 
DHCP_SERVER_PORT
, 
√tif
);

1056 
	`dh˝_dñëe_msg
(
dh˝
);

1058 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_renew: RENEWING\n"));

1060 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_LEVEL_SERIOUS
, ("dhcp_renew: couldÇotállocate DHCPÑequest\n"));

1062 
dh˝
->
åõs
++;

1064 
m£cs
 = 
dh˝
->
åõs
 < 10 ? dhcp->tries * 2000 : 20 * 1000;

1065 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

1066 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_ª√w(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

1067  
ªsu…
;

1068 
	}
}

1075 
îr_t


1076 
	$dh˝_ªböd
(
√tif
 *netif)

1078 
dh˝
 *dh˝ = 
√tif
->dhcp;

1079 
îr_t
 
ªsu…
;

1080 
u16_t
 
m£cs
;

1081 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_rebind()\n"));

1082 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_REBINDING
);

1085 
ªsu…
 = 
	`dh˝_¸óã_msg
(
√tif
, 
dh˝
, 
DHCP_REQUEST
);

1086 i‡(
ªsu…
 =
ERR_OK
) {

1087 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MAX_MSG_SIZE
, 
DHCP_OPTION_MAX_MSG_SIZE_LEN
);

1088 
	`dh˝_›ti⁄_sh‹t
(
dh˝
, 
	`DHCP_MAX_MSG_LEN
(
√tif
));

1090 #i‡
LWIP_NETIF_HOSTNAME


1091 i‡(
√tif
->
ho°«me
 !
NULL
) {

1092 c⁄° *
p
 = (c⁄° *)
√tif
->
ho°«me
;

1093 
u8_t
 
«mñí
 = (u8_t)
	`°æí
(
p
);

1094 i‡(
«mñí
 > 0) {

1095 
	`LWIP_ASSERT
("DHCP: ho°«mêi†toÿl⁄g!", 
«mñí
 < 255);

1096 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_HOSTNAME
, 
«mñí
);

1097 *
p
) {

1098 
	`dh˝_›ti⁄_byã
(
dh˝
, *
p
++);

1105 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_REQUESTED_IP
, 4);

1106 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(dh˝->
of„ªd_ù_addr
.
addr
));

1108 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_SERVER_ID
, 4);

1109 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(dh˝->
£rvî_ù_addr
.
addr
));

1112 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

1114 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

1117 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, 
IP_ADDR_BROADCAST
, 
DHCP_SERVER_PORT
, 
√tif
);

1118 
	`dh˝_dñëe_msg
(
dh˝
);

1119 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_rebind: REBINDING\n"));

1121 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_LEVEL_SERIOUS
, ("dhcp_rebind: couldÇotállocate DHCPÑequest\n"));

1123 
dh˝
->
åõs
++;

1124 
m£cs
 = 
dh˝
->
åõs
 < 10 ? dhcp->tries * 1000 : 10 * 1000;

1125 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

1126 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_ªböd(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

1127  
ªsu…
;

1128 
	}
}

1135 
îr_t


1136 
	$dh˝_ªboŸ
(
√tif
 *netif)

1138 
dh˝
 *dh˝ = 
√tif
->dhcp;

1139 
îr_t
 
ªsu…
;

1140 
u16_t
 
m£cs
;

1141 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_reboot()\n"));

1142 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_REBOOTING
);

1145 
ªsu…
 = 
	`dh˝_¸óã_msg
(
√tif
, 
dh˝
, 
DHCP_REQUEST
);

1146 i‡(
ªsu…
 =
ERR_OK
) {

1147 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MAX_MSG_SIZE
, 
DHCP_OPTION_MAX_MSG_SIZE_LEN
);

1148 
	`dh˝_›ti⁄_sh‹t
(
dh˝
, 576);

1150 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_REQUESTED_IP
, 4);

1151 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(
	`ù4_addr_gë_u32
(&dh˝->
of„ªd_ù_addr
)));

1153 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

1155 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

1158 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, 
IP_ADDR_BROADCAST
, 
DHCP_SERVER_PORT
, 
√tif
);

1159 
	`dh˝_dñëe_msg
(
dh˝
);

1160 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_reboot: REBOOTING\n"));

1162 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_LEVEL_SERIOUS
, ("dhcp_reboot: couldÇotállocate DHCPÑequest\n"));

1164 
dh˝
->
åõs
++;

1165 
m£cs
 = 
dh˝
->
åõs
 < 10 ? dhcp->tries * 1000 : 10 * 1000;

1166 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

1167 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_ªboŸ(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

1168  
ªsu…
;

1169 
	}
}

1177 
îr_t


1178 
	$dh˝_ªÀa£
(
√tif
 *netif)

1180 
dh˝
 *dh˝ = 
√tif
->dhcp;

1181 
îr_t
 
ªsu…
;

1182 
u16_t
 
m£cs
;

1183 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_release()\n"));

1186 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_OFF
);

1188 
	`ù_addr_£t_zîo
(&
dh˝
->
£rvî_ù_addr
);

1189 
	`ù_addr_£t_zîo
(&
dh˝
->
of„ªd_ù_addr
);

1190 
	`ù_addr_£t_zîo
(&
dh˝
->
of„ªd_¢_mask
);

1191 
	`ù_addr_£t_zîo
(&
dh˝
->
of„ªd_gw_addr
);

1192 #i‡
LWIP_DHCP_BOOTP_FILE


1193 
	`ù_addr_£t_zîo
(&
dh˝
->
of„ªd_si_addr
);

1195 
dh˝
->
of„ªd_t0_Àa£
 = dh˝->
of„ªd_t1_ª√w
 = dh˝->
of„ªd_t2_ªböd
 = 0;

1198 
ªsu…
 = 
	`dh˝_¸óã_msg
(
√tif
, 
dh˝
, 
DHCP_RELEASE
);

1199 i‡(
ªsu…
 =
ERR_OK
) {

1200 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

1202 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

1204 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, &dh˝->
£rvî_ù_addr
, 
DHCP_SERVER_PORT
, 
√tif
);

1205 
	`dh˝_dñëe_msg
(
dh˝
);

1206 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_release: RELEASED, DHCP_OFF\n"));

1208 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_LEVEL_SERIOUS
, ("dhcp_release: couldÇotállocate DHCPÑequest\n"));

1210 
dh˝
->
åõs
++;

1211 
m£cs
 = 
dh˝
->
åõs
 < 10 ? dhcp->tries * 1000 : 10 * 1000;

1212 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

1213 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_ªÀa£(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

1215 
	`√tif_£t_down
(
√tif
);

1217 
	`√tif_£t_ùaddr
(
√tif
, 
IP_ADDR_ANY
);

1218 
	`√tif_£t_gw
(
√tif
, 
IP_ADDR_ANY
);

1219 
	`√tif_£t_√tmask
(
√tif
, 
IP_ADDR_ANY
);

1221  
ªsu…
;

1222 
	}
}

1230 
	$dh˝_°›
(
√tif
 *netif)

1232 
dh˝
 *dhcp;

1233 
	`LWIP_ERROR
("dh˝_°›:Çëi‡!NULL", (
√tif
 !
NULL
), ;);

1234 
dh˝
 = 
√tif
->dhcp;

1236 
√tif
->
Êags
 &~
NETIF_FLAG_DHCP
;

1238 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_stop()\n"));

1240 i‡(
dh˝
 !
NULL
) {

1241 #i‡
LWIP_DHCP_AUTOIP_COOP


1242 if(
dh˝
->
autoù_co›_°©e
 =
DHCP_AUTOIP_COOP_STATE_ON
) {

1243 
	`autoù_°›
(
√tif
);

1244 
dh˝
->
autoù_co›_°©e
 = 
DHCP_AUTOIP_COOP_STATE_OFF
;

1248 i‡(
dh˝
->
pcb
 !
NULL
) {

1249 
	`udp_ªmove
(
dh˝
->
pcb
);

1250 
dh˝
->
pcb
 = 
NULL
;

1252 
	`LWIP_ASSERT
("ª∂y wa¢'à‰ìd", 
dh˝
->
msg_ö
 =
NULL
);

1253 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_OFF
);

1255 
	}
}

1263 
	$dh˝_£t_°©e
(
dh˝
 *dh˝, 
u8_t
 
√w_°©e
)

1265 i‡(
√w_°©e
 !
dh˝
->
°©e
) {

1266 
dh˝
->
°©e
 = 
√w_°©e
;

1267 
dh˝
->
åõs
 = 0;

1268 
dh˝
->
ªque°_timeout
 = 0;

1270 
	}
}

1278 
	$dh˝_›ti⁄
(
dh˝
 *dh˝, 
u8_t
 
›ti⁄_ty≥
, u8_à
›ti⁄_Àn
)

1280 
	`LWIP_ASSERT
("dh˝_›ti⁄: dh˝->›ti⁄s_out_À¿+ 2 + o±i⁄_À¿<DHCP_OPTIONS_LEN", 
dh˝
->
›ti⁄s_out_Àn
 + 2U + 
›ti⁄_Àn
 <
DHCP_OPTIONS_LEN
);

1281 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = 
›ti⁄_ty≥
;

1282 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = 
›ti⁄_Àn
;

1283 
	}
}

1289 
	$dh˝_›ti⁄_byã
(
dh˝
 *dh˝, 
u8_t
 
vÆue
)

1291 
	`LWIP_ASSERT
("dh˝_›ti⁄_byã: dh˝->›ti⁄s_out_À¿< DHCP_OPTIONS_LEN", 
dh˝
->
›ti⁄s_out_Àn
 < 
DHCP_OPTIONS_LEN
);

1292 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = 
vÆue
;

1293 
	}
}

1296 
	$dh˝_›ti⁄_sh‹t
(
dh˝
 *dh˝, 
u16_t
 
vÆue
)

1298 
	`LWIP_ASSERT
("dh˝_›ti⁄_sh‹t: dh˝->›ti⁄s_out_À¿+ 2 <DHCP_OPTIONS_LEN", 
dh˝
->
›ti⁄s_out_Àn
 + 2U <
DHCP_OPTIONS_LEN
);

1299 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = (
u8_t
)((
vÆue
 & 0xff00U) >> 8);

1300 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = (
u8_t
Ë(
vÆue
 & 0x00ffU);

1301 
	}
}

1304 
	$dh˝_›ti⁄_l⁄g
(
dh˝
 *dh˝, 
u32_t
 
vÆue
)

1306 
	`LWIP_ASSERT
("dh˝_›ti⁄_l⁄g: dh˝->›ti⁄s_out_À¿+ 4 <DHCP_OPTIONS_LEN", 
dh˝
->
›ti⁄s_out_Àn
 + 4U <
DHCP_OPTIONS_LEN
);

1307 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = (
u8_t
)((
vÆue
 & 0xff000000UL) >> 24);

1308 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = (
u8_t
)((
vÆue
 & 0x00ff0000UL) >> 16);

1309 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = (
u8_t
)((
vÆue
 & 0x0000ff00UL) >> 8);

1310 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = (
u8_t
)((
vÆue
 & 0x000000ffUL));

1311 
	}
}

1323 
îr_t


1324 
	$dh˝_∑r£_ª∂y
(
dh˝
 *dh˝, 
pbuf
 *
p
)

1326 
u8_t
 *
›ti⁄s
;

1327 
u16_t
 
off£t
;

1328 
u16_t
 
off£t_max
;

1329 
u16_t
 
›ti⁄s_idx
;

1330 
u16_t
 
›ti⁄s_idx_max
;

1331 
pbuf
 *
q
;

1332 
∑r£_fûe_as_›ti⁄s
 = 0;

1333 
∑r£_¢ame_as_›ti⁄s
 = 0;

1336 
	`dh˝_˛ór_Æl_›ti⁄s
(
dh˝
);

1338 i‡(
p
->
Àn
 < 
DHCP_SNAME_OFS
) {

1339  
ERR_BUF
;

1341 
dh˝
->
msg_ö
 = (
dh˝_msg
 *)
p
->
∑ylﬂd
;

1342 #i‡
LWIP_DHCP_BOOTP_FILE


1344 
dh˝
->
boŸ_fûe_«me
[0] = 0;

1350 
›ti⁄s_idx
 = 
DHCP_OPTIONS_OFS
;

1352 
›ti⁄s_idx_max
 = 
p
->
tŸ_Àn
;

1353 
agaö
:

1354 
q
 = 
p
;

1355 (
q
 !
NULL
Ë&& (
›ti⁄s_idx
 >q->
Àn
)) {

1356 
›ti⁄s_idx
 -
q
->
Àn
;

1357 
›ti⁄s_idx_max
 -
q
->
Àn
;

1358 
q
 = q->
√xt
;

1360 i‡(
q
 =
NULL
) {

1361  
ERR_BUF
;

1363 
off£t
 = 
›ti⁄s_idx
;

1364 
off£t_max
 = 
›ti⁄s_idx_max
;

1365 
›ti⁄s
 = (
u8_t
*)
q
->
∑ylﬂd
;

1367 (
q
 !
NULL
Ë&& (
›ti⁄s
[
off£t
] !
DHCP_OPTION_END
Ë&& (off£à< 
off£t_max
)) {

1368 
u8_t
 
›
 = 
›ti⁄s
[
off£t
];

1369 
u8_t
 
Àn
;

1370 
u8_t
 
decode_Àn
 = 0;

1371 
decode_idx
 = -1;

1372 
u16_t
 
vÆ_off£t
 = 
off£t
 + 2;

1374 i‡(
off£t
 + 1 < 
q
->
Àn
) {

1375 
Àn
 = 
›ti⁄s
[
off£t
 + 1];

1377 
Àn
 = (
q
->
√xt
 !
NULL
 ? ((
u8_t
*)q->√xt->
∑ylﬂd
)[0] : 0);

1380 
decode_Àn
 = 
Àn
;

1381 
›
) {

1383 (
DHCP_OPTION_PAD
):

1385 
decode_Àn
 = 
Àn
 = 0;

1387 
off£t
--;

1389 (
DHCP_OPTION_SUBNET_MASK
):

1390 
	`LWIP_ASSERT
("À¿=4", 
Àn
 == 4);

1391 
decode_idx
 = 
DHCP_OPTION_IDX_SUBNET_MASK
;

1393 (
DHCP_OPTION_ROUTER
):

1394 
decode_Àn
 = 4;

1395 
	`LWIP_ASSERT
("À¿>decode_Àn", 
Àn
 >
decode_Àn
);

1396 
decode_idx
 = 
DHCP_OPTION_IDX_ROUTER
;

1398 (
DHCP_OPTION_DNS_SERVER
):

1400 
	`LWIP_ASSERT
("À¿% 4 =0", 
Àn
 % 4 == 0);

1402 
decode_Àn
 = 
	`LWIP_MIN
(
Àn
, 4 * 
DNS_MAX_SERVERS
);

1403 
	`LWIP_ASSERT
("À¿>decode_Àn", 
Àn
 >
decode_Àn
);

1404 
decode_idx
 = 
DHCP_OPTION_IDX_DNS_SERVER
;

1406 (
DHCP_OPTION_LEASE_TIME
):

1407 
	`LWIP_ASSERT
("À¿=4", 
Àn
 == 4);

1408 
decode_idx
 = 
DHCP_OPTION_IDX_LEASE_TIME
;

1410 (
DHCP_OPTION_OVERLOAD
):

1411 
	`LWIP_ASSERT
("À¿=1", 
Àn
 == 1);

1412 
decode_idx
 = 
DHCP_OPTION_IDX_OVERLOAD
;

1414 (
DHCP_OPTION_MESSAGE_TYPE
):

1415 
	`LWIP_ASSERT
("À¿=1", 
Àn
 == 1);

1416 
decode_idx
 = 
DHCP_OPTION_IDX_MSG_TYPE
;

1418 (
DHCP_OPTION_SERVER_ID
):

1419 
	`LWIP_ASSERT
("À¿=4", 
Àn
 == 4);

1420 
decode_idx
 = 
DHCP_OPTION_IDX_SERVER_ID
;

1422 (
DHCP_OPTION_T1
):

1423 
	`LWIP_ASSERT
("À¿=4", 
Àn
 == 4);

1424 
decode_idx
 = 
DHCP_OPTION_IDX_T1
;

1426 (
DHCP_OPTION_T2
):

1427 
	`LWIP_ASSERT
("À¿=4", 
Àn
 == 4);

1428 
decode_idx
 = 
DHCP_OPTION_IDX_T2
;

1431 
decode_Àn
 = 0;

1432 
	`LWIP_DEBUGF
(
DHCP_DEBUG
, ("skùpög o±i⁄ %"
U16_F
" i¿›ti⁄s\n", 
›
));

1435 
off£t
 +
Àn
 + 2;

1436 i‡(
decode_Àn
 > 0) {

1437 
u32_t
 
vÆue
 = 0;

1438 
u16_t
 
c›y_Àn
;

1439 
decode_√xt
:

1440 
	`LWIP_ASSERT
("check decode_idx", 
decode_idx
 >0 && decode_idx < 
DHCP_OPTION_IDX_MAX
);

1441 
	`LWIP_ASSERT
("›ti⁄áÃódy decoded", !
	`dh˝_›ti⁄_giví
(
dh˝
, 
decode_idx
));

1442 
c›y_Àn
 = 
	`LWIP_MIN
(
decode_Àn
, 4);

1443 
	`pbuf_c›y_∑πül
(
q
, &
vÆue
, 
c›y_Àn
, 
vÆ_off£t
);

1444 i‡(
decode_Àn
 > 4) {

1446 
	`LWIP_ASSERT
("decode_À¿% 4 =0", 
decode_Àn
 % 4 == 0);

1447 
	`dh˝_gŸ_›ti⁄
(
dh˝
, 
decode_idx
);

1448 
	`dh˝_£t_›ti⁄_vÆue
(
dh˝
, 
decode_idx
, 
	`ht⁄l
(
vÆue
));

1449 
decode_Àn
 -= 4;

1450 
vÆ_off£t
 += 4;

1451 
decode_idx
++;

1452 
decode_√xt
;

1453 } i‡(
decode_Àn
 == 4) {

1454 
vÆue
 = 
	`¡ohl
(value);

1456 
	`LWIP_ASSERT
("övÆid decode_Àn", 
decode_Àn
 == 1);

1457 
vÆue
 = ((
u8_t
*)&value)[0];

1459 
	`dh˝_gŸ_›ti⁄
(
dh˝
, 
decode_idx
);

1460 
	`dh˝_£t_›ti⁄_vÆue
(
dh˝
, 
decode_idx
, 
vÆue
);

1462 i‡(
off£t
 >
q
->
Àn
) {

1463 
off£t
 -
q
->
Àn
;

1464 
off£t_max
 -
q
->
Àn
;

1465 
q
 = q->
√xt
;

1466 
›ti⁄s
 = (
u8_t
*)
q
->
∑ylﬂd
;

1470 i‡(
	`dh˝_›ti⁄_giví
(
dh˝
, 
DHCP_OPTION_IDX_OVERLOAD
)) {

1471 
u32_t
 
ovîlﬂd
 = 
	`dh˝_gë_›ti⁄_vÆue
(
dh˝
, 
DHCP_OPTION_IDX_OVERLOAD
);

1472 
	`dh˝_˛ór_›ti⁄
(
dh˝
, 
DHCP_OPTION_IDX_OVERLOAD
);

1473 i‡(
ovîlﬂd
 =
DHCP_OVERLOAD_FILE
) {

1474 
∑r£_fûe_as_›ti⁄s
 = 1;

1475 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("overloaded file field\n"));

1476 } i‡(
ovîlﬂd
 =
DHCP_OVERLOAD_SNAME
) {

1477 
∑r£_¢ame_as_›ti⁄s
 = 1;

1478 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("overloaded sname field\n"));

1479 } i‡(
ovîlﬂd
 =
DHCP_OVERLOAD_SNAME_FILE
) {

1480 
∑r£_¢ame_as_›ti⁄s
 = 1;

1481 
∑r£_fûe_as_›ti⁄s
 = 1;

1482 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("overloaded snameánd file field\n"));

1484 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("övÆid ovîlﬂd o±i⁄: %d\n", ()
ovîlﬂd
));

1486 #i‡
LWIP_DHCP_BOOTP_FILE


1487 i‡(!
∑r£_fûe_as_›ti⁄s
) {

1489 i‡(
	`dh˝_›ti⁄_giví
(
dh˝
, 
DHCP_OPTION_IDX_MSG_TYPE
) &&

1490 (
	`dh˝_gë_›ti⁄_vÆue
(
dh˝
, 
DHCP_OPTION_IDX_MSG_TYPE
Ë=
DHCP_ACK
))

1492 
	`pbuf_c›y_∑πül
(
p
, 
dh˝
->
boŸ_fûe_«me
, 
DHCP_FILE_LEN
-1, 
DHCP_FILE_OFS
);

1494 
dh˝
->
boŸ_fûe_«me
[
DHCP_FILE_LEN
-1] = 0;

1498 i‡(
∑r£_fûe_as_›ti⁄s
) {

1500 
∑r£_fûe_as_›ti⁄s
 = 0;

1501 
›ti⁄s_idx
 = 
DHCP_FILE_OFS
;

1502 
›ti⁄s_idx_max
 = 
DHCP_FILE_OFS
 + 
DHCP_FILE_LEN
;

1503 
agaö
;

1504 } i‡(
∑r£_¢ame_as_›ti⁄s
) {

1505 
∑r£_¢ame_as_›ti⁄s
 = 0;

1506 
›ti⁄s_idx
 = 
DHCP_SNAME_OFS
;

1507 
›ti⁄s_idx_max
 = 
DHCP_SNAME_OFS
 + 
DHCP_SNAME_LEN
;

1508 
agaö
;

1510  
ERR_OK
;

1511 
	}
}

1517 
	$dh˝_ªcv
(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr_t
 *
addr
, 
u16_t
 
p‹t
)

1519 
√tif
 *√ti‡(√ti‡*)
¨g
;

1520 
dh˝
 *dh˝ = 
√tif
->dhcp;

1521 
dh˝_msg
 *
ª∂y_msg
 = (dh˝_msg *)
p
->
∑ylﬂd
;

1522 
u8_t
 
msg_ty≥
;

1523 
u8_t
 
i
;

1524 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dh˝_ªcv’bu‡%pË‰om DHCP sîvî %"
U16_F
".%"U16_F".%"U16_F".%"U16_F"Ö‹à%"U16_F"\n", (*)
p
,

1525 
	`ù4_addr1_16
(
addr
), 
	`ù4_addr2_16
◊ddr), 
	`ù4_addr3_16
◊ddr), 
	`ù4_addr4_16
◊ddr), 
p‹t
));

1526 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("pbuf->À¿%"
U16_F
"\n", 
p
->
Àn
));

1527 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("pbuf->tŸ_À¿%"
U16_F
"\n", 
p
->
tŸ_Àn
));

1529 
	`LWIP_UNUSED_ARG
(
pcb
);

1530 
	`LWIP_UNUSED_ARG
(
addr
);

1531 
	`LWIP_UNUSED_ARG
(
p‹t
);

1533 
	`LWIP_ASSERT
("ª∂y wa¢'à‰ìd", 
dh˝
->
msg_ö
 =
NULL
);

1535 i‡(
p
->
Àn
 < 
DHCP_MIN_REPLY_LEN
) {

1536 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_LEVEL_WARNING
, ("DHCPÑeply message orÖbufÅoo short\n"));

1537 
‰ì_pbuf_™d_ªtu∫
;

1540 i‡(
ª∂y_msg
->
›
 !
DHCP_BOOTREPLY
) {

1541 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_LEVEL_WARNING
, ("nŸá DHCPÑïly mesßge, buàty≥ %"
U16_F
"\n", (
u16_t
)
ª∂y_msg
->
›
));

1542 
‰ì_pbuf_™d_ªtu∫
;

1545 
i
 = 0; i < 
√tif
->
hwaddr_Àn
; i++) {

1546 i‡(
√tif
->
hwaddr
[
i
] !
ª∂y_msg
->
chaddr
[i]) {

1547 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_LEVEL_WARNING
,

1548 ("√tif->hwaddr[%"
U16_F
"]==%02"
X16_F
" !=Ñeply_msg->chaddr[%"U16_F"]==%02"X16_F"\n",

1549 (
u16_t
)
i
, (u16_t)
√tif
->
hwaddr
[i], (u16_t)i, (u16_t)
ª∂y_msg
->
chaddr
[i]));

1550 
‰ì_pbuf_™d_ªtu∫
;

1554 i‡(
	`¡ohl
(
ª∂y_msg
->
xid
Ë!
dh˝
->xid) {

1555 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_LEVEL_WARNING
,

1556 ("å™ß˘i⁄ id mism©chÑïly_msg->xid(%"
X32_F
")!=dh˝->xid(%"X32_F")\n",
	`¡ohl
(
ª∂y_msg
->
xid
),
dh˝
->xid));

1557 
‰ì_pbuf_™d_ªtu∫
;

1560 i‡(
	`dh˝_∑r£_ª∂y
(
dh˝
, 
p
Ë!
ERR_OK
) {

1561 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_LEVEL_SERIOUS
,

1563 
‰ì_pbuf_™d_ªtu∫
;

1566 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));

1568 i‡(!
	`dh˝_›ti⁄_giví
(
dh˝
, 
DHCP_OPTION_IDX_MSG_TYPE
)) {

1569 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_LEVEL_WARNING
, ("DHCP_OPTION_MESSAGE_TYPE optionÇot found\n"));

1570 
‰ì_pbuf_™d_ªtu∫
;

1574 
msg_ty≥
 = (
u8_t
)
	`dh˝_gë_›ti⁄_vÆue
(
dh˝
, 
DHCP_OPTION_IDX_MSG_TYPE
);

1576 i‡(
msg_ty≥
 =
DHCP_ACK
) {

1577 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("DHCP_ACKÑeceived\n"));

1579 i‡(
dh˝
->
°©e
 =
DHCP_REQUESTING
) {

1580 
	`dh˝_h™dÀ_ack
(
√tif
);

1581 #i‡
DHCP_DOES_ARP_CHECK


1583 
	`dh˝_check
(
√tif
);

1586 
	`dh˝_böd
(
√tif
);

1590 i‡((
dh˝
->
°©e
 =
DHCP_REBOOTING
Ë|| (dh˝->°©ê=
DHCP_REBINDING
Ë|| (dh˝->°©ê=
DHCP_RENEWING
)) {

1591 
	`dh˝_böd
(
√tif
);

1595 i‡((
msg_ty≥
 =
DHCP_NAK
) &&

1596 ((
dh˝
->
°©e
 =
DHCP_REBOOTING
Ë|| (dh˝->°©ê=
DHCP_REQUESTING
) ||

1597 (
dh˝
->
°©e
 =
DHCP_REBINDING
Ë|| (dh˝->°©ê=
DHCP_RENEWING
 ))) {

1598 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("DHCP_NAKÑeceived\n"));

1599 
	`dh˝_h™dÀ_«k
(
√tif
);

1602 i‡((
msg_ty≥
 =
DHCP_OFFER
Ë&& (
dh˝
->
°©e
 =
DHCP_SELECTING
)) {

1603 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("DHCP_OFFERÑeceived in DHCP_SELECTING state\n"));

1604 
dh˝
->
ªque°_timeout
 = 0;

1606 
	`dh˝_h™dÀ_of„r
(
√tif
);

1608 
‰ì_pbuf_™d_ªtu∫
:

1609 
dh˝
->
msg_ö
 = 
NULL
;

1610 
	`pbuf_‰ì
(
p
);

1611 
	}
}

1620 
îr_t


1621 
	$dh˝_¸óã_msg
(
√tif
 *√tif, 
dh˝
 *dh˝, 
u8_t
 
mesßge_ty≥
)

1623 
u16_t
 
i
;

1624 #i‚de‡
DHCP_GLOBAL_XID


1629 
u32_t
 
xid
 = 0xABCD0000;

1631 
u32_t
 
xid
;

1632 
u8_t
 
xid_öôüli£d
 = 0;

1633 i‡(!
xid_öôüli£d
) {

1634 
xid
 = 
DHCP_GLOBAL_XID
;

1635 
xid_öôüli£d
 = !xid_initialised;

1638 
	`LWIP_ERROR
("dh˝_¸óã_msg:Çëi‡!NULL", (
√tif
 !
NULL
),  
ERR_ARG
;);

1639 
	`LWIP_ERROR
("dh˝_¸óã_msg: dh˝ !NULL", (
dh˝
 !
NULL
),  
ERR_VAL
;);

1640 
	`LWIP_ASSERT
("dh˝_¸óã_msg: dh˝->p_ouà=NULL", 
dh˝
->
p_out
 =
NULL
);

1641 
	`LWIP_ASSERT
("dh˝_¸óã_msg: dh˝->msg_ouà=NULL", 
dh˝
->
msg_out
 =
NULL
);

1642 
dh˝
->
p_out
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, (
dh˝_msg
), 
PBUF_RAM
);

1643 i‡(
dh˝
->
p_out
 =
NULL
) {

1644 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_LEVEL_SERIOUS
,

1646  
ERR_MEM
;

1648 
	`LWIP_ASSERT
("dhcp_create_msg: checkÅhat firstÖbuf can hold struct dhcp_msg",

1649 (
dh˝
->
p_out
->
Àn
 >(
dh˝_msg
)));

1652 i‡(
dh˝
->
åõs
 == 0) {

1653 
xid
++;

1655 
dh˝
->
xid
 = xid;

1656 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
,

1657 ("å™ß˘i⁄ id xid(%"
X32_F
")\n", 
xid
));

1659 
dh˝
->
msg_out
 = (
dh˝_msg
 *)dh˝->
p_out
->
∑ylﬂd
;

1661 
dh˝
->
msg_out
->
›
 = 
DHCP_BOOTREQUEST
;

1663 
dh˝
->
msg_out
->
hty≥
 = 
DHCP_HTYPE_ETH
;

1664 
dh˝
->
msg_out
->
hÀn
 = 
√tif
->
hwaddr_Àn
;

1665 
dh˝
->
msg_out
->
h›s
 = 0;

1666 
dh˝
->
msg_out
->
xid
 = 
	`ht⁄l
(dhcp->xid);

1667 
dh˝
->
msg_out
->
£cs
 = 0;

1670 
dh˝
->
msg_out
->
Êags
 = 0;

1671 
	`ù_addr_£t_zîo
(&
dh˝
->
msg_out
->
cüddr
);

1673 i‡((
mesßge_ty≥
 =
DHCP_INFORM
Ë|| (mesßge_ty≥ =
DHCP_DECLINE
) ||

1674 ((
mesßge_ty≥
 =
DHCP_REQUEST
) &&

1675 ((
dh˝
->
°©e
==
DHCP_RENEWING
Ë|| dh˝->°©e==
DHCP_REBINDING
))) {

1676 
	`ù_addr_c›y
(
dh˝
->
msg_out
->
cüddr
, 
√tif
->
ù_addr
);

1678 
	`ù_addr_£t_zîo
(&
dh˝
->
msg_out
->
yüddr
);

1679 
	`ù_addr_£t_zîo
(&
dh˝
->
msg_out
->
süddr
);

1680 
	`ù_addr_£t_zîo
(&
dh˝
->
msg_out
->
güddr
);

1681 
i
 = 0; i < 
DHCP_CHADDR_LEN
; i++) {

1683 
dh˝
->
msg_out
->
chaddr
[
i
] = (ò< 
√tif
->
hwaddr_Àn
Ë?Çëif->
hwaddr
[i] : 0 ;

1685 
i
 = 0; i < 
DHCP_SNAME_LEN
; i++) {

1686 
dh˝
->
msg_out
->
¢ame
[
i
] = 0;

1688 
i
 = 0; i < 
DHCP_FILE_LEN
; i++) {

1689 
dh˝
->
msg_out
->
fûe
[
i
] = 0;

1691 
dh˝
->
msg_out
->
cookõ
 = 
	`PP_HTONL
(
DHCP_MAGIC_COOKIE
);

1692 
dh˝
->
›ti⁄s_out_Àn
 = 0;

1694 
i
 = 0; i < 
DHCP_OPTIONS_LEN
; i++) {

1695 
dh˝
->
msg_out
->
›ti⁄s
[
i
] = (
u8_t
)i;

1698 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
, 
DHCP_OPTION_MESSAGE_TYPE_LEN
);

1699 
	`dh˝_›ti⁄_byã
(
dh˝
, 
mesßge_ty≥
);

1700  
ERR_OK
;

1701 
	}
}

1709 
	$dh˝_dñëe_msg
(
dh˝
 *dhcp)

1711 
	`LWIP_ERROR
("dh˝_dñëe_msg: dh˝ !NULL", (
dh˝
 !
NULL
), ;);

1712 
	`LWIP_ASSERT
("dh˝_dñëe_msg: dh˝->p_ouà!NULL", 
dh˝
->
p_out
 !
NULL
);

1713 
	`LWIP_ASSERT
("dh˝_dñëe_msg: dh˝->msg_ouà!NULL", 
dh˝
->
msg_out
 !
NULL
);

1714 i‡(
dh˝
->
p_out
 !
NULL
) {

1715 
	`pbuf_‰ì
(
dh˝
->
p_out
);

1717 
dh˝
->
p_out
 = 
NULL
;

1718 
dh˝
->
msg_out
 = 
NULL
;

1719 
	}
}

1730 
	$dh˝_›ti⁄_åaûî
(
dh˝
 *dhcp)

1732 
	`LWIP_ERROR
("dh˝_›ti⁄_åaûî: dh˝ !NULL", (
dh˝
 !
NULL
), ;);

1733 
	`LWIP_ASSERT
("dh˝_›ti⁄_åaûî: dh˝->msg_ouà!NULL\n", 
dh˝
->
msg_out
 !
NULL
);

1734 
	`LWIP_ASSERT
("dh˝_›ti⁄_åaûî: dh˝->›ti⁄s_out_À¿< DHCP_OPTIONS_LEN\n", 
dh˝
->
›ti⁄s_out_Àn
 < 
DHCP_OPTIONS_LEN
);

1735 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = 
DHCP_OPTION_END
;

1737 (
dh˝
->
›ti⁄s_out_Àn
 < 
DHCP_MIN_OPTIONS_LEN
) || (dhcp->options_out_len & 3)) {

1739 
	`LWIP_ASSERT
("dh˝_›ti⁄_åaûî: dh˝->›ti⁄s_out_À¿< DHCP_OPTIONS_LEN\n", 
dh˝
->
›ti⁄s_out_Àn
 < 
DHCP_OPTIONS_LEN
);

1741 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = 0;

1743 
	}
}

	@core/dns.c

75 
	~"lwù/›t.h
"

77 #i‡
LWIP_DNS


79 
	~"lwù/udp.h
"

80 
	~"lwù/mem.h
"

81 
	~"lwù/memp.h
"

82 
	~"lwù/dns.h
"

84 
	~<°rög.h
>

87 #i‚de‡
DNS_SERVER_ADDRESS


88 
	#DNS_SERVER_ADDRESS
(
ùaddr
Ë(
	`ù4_addr_£t_u32
(ùaddr, 
	`ùaddr_addr
("208.67.222.222"))Ë

	)

92 #i‚de‡
DNS_SERVER_PORT


93 
	#DNS_SERVER_PORT
 53

	)

97 #i‚de‡
DNS_MAX_RETRIES


98 
	#DNS_MAX_RETRIES
 4

	)

102 #i‚de‡
DNS_MAX_TTL


103 
	#DNS_MAX_TTL
 604800

	)

107 
	#DNS_FLAG1_RESPONSE
 0x80

	)

108 
	#DNS_FLAG1_OPCODE_STATUS
 0x10

	)

109 
	#DNS_FLAG1_OPCODE_INVERSE
 0x08

	)

110 
	#DNS_FLAG1_OPCODE_STANDARD
 0x00

	)

111 
	#DNS_FLAG1_AUTHORATIVE
 0x04

	)

112 
	#DNS_FLAG1_TRUNC
 0x02

	)

113 
	#DNS_FLAG1_RD
 0x01

	)

114 
	#DNS_FLAG2_RA
 0x80

	)

115 
	#DNS_FLAG2_ERR_MASK
 0x0f

	)

116 
	#DNS_FLAG2_ERR_NONE
 0x00

	)

117 
	#DNS_FLAG2_ERR_NAME
 0x03

	)

120 
	#DNS_STATE_UNUSED
 0

	)

121 
	#DNS_STATE_NEW
 1

	)

122 
	#DNS_STATE_ASKING
 2

	)

123 
	#DNS_STATE_DONE
 3

	)

125 #ifde‡
PACK_STRUCT_USE_INCLUDES


126 
	~"¨ch/bp°ru˘.h
"

128 
PACK_STRUCT_BEGIN


130 
	sdns_hdr
 {

131 
PACK_STRUCT_FIELD
(
u16_t
 
id
);

132 
PACK_STRUCT_FIELD
(
u8_t
 
Êags1
);

133 
PACK_STRUCT_FIELD
(
u8_t
 
Êags2
);

134 
PACK_STRUCT_FIELD
(
u16_t
 
numque°i⁄s
);

135 
PACK_STRUCT_FIELD
(
u16_t
 
num™swîs
);

136 
PACK_STRUCT_FIELD
(
u16_t
 
numauthº
);

137 
PACK_STRUCT_FIELD
(
u16_t
 
numexå¨r
);

138 } 
	gPACK_STRUCT_STRUCT
;

139 
	gPACK_STRUCT_END


140 #ifde‡
PACK_STRUCT_USE_INCLUDES


141 
	~"¨ch/ï°ru˘.h
"

143 
	#SIZEOF_DNS_HDR
 12

	)

147 
	sdns_quîy
 {

150 
u16_t
 
	mty≥
;

151 
u16_t
 
	m˛s
;

153 
	#SIZEOF_DNS_QUERY
 4

	)

157 
	sdns_™swî
 {

160 
u16_t
 
	mty≥
;

161 
u16_t
 
	m˛s
;

162 
u32_t
 
	mâl
;

163 
u16_t
 
	mÀn
;

165 
	#SIZEOF_DNS_ANSWER
 10

	)

168 
	sdns_èbÀ_íåy
 {

169 
u8_t
 
	m°©e
;

170 
u8_t
 
	mnumdns
;

171 
u8_t
 
	mtmr
;

172 
u8_t
 
	mªåõs
;

173 
u8_t
 
	m£qno
;

174 
u8_t
 
	mîr
;

175 
u32_t
 
	mâl
;

176 
	m«me
[
DNS_MAX_NAME_LENGTH
];

177 
ù_addr_t
 
	mùaddr
;

179 
dns_found_ˇŒback
 
	mfound
;

180 *
	m¨g
;

183 #i‡
DNS_LOCAL_HOSTLIST


185 #i‡
DNS_LOCAL_HOSTLIST_IS_DYNAMIC


188 
loˇl_ho°li°_íåy
 *
	gloˇl_ho°li°_dy«mic
;

193 #i‚de‡
DNS_LOCAL_HOSTLIST_STORAGE_PRE


194 
	#DNS_LOCAL_HOSTLIST_STORAGE_PRE
 

	)

198 #i‚de‡
DNS_LOCAL_HOSTLIST_STORAGE_POST


199 
	#DNS_LOCAL_HOSTLIST_STORAGE_POST


	)

201 
DNS_LOCAL_HOSTLIST_STORAGE_PRE
 
loˇl_ho°li°_íåy
 
	gloˇl_ho°li°_°©ic
[]

202 
	gDNS_LOCAL_HOSTLIST_STORAGE_POST
 = 
DNS_LOCAL_HOSTLIST_INIT
;

206 
dns_öô_loˇl
();

211 
dns_ªcv
(*
s
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr_t
 *
addr
, 
u16_t
 
p‹t
);

212 
dns_check_íåõs
();

219 
udp_pcb
 *
	gdns_pcb
;

220 
u8_t
 
	gdns_£qno
;

221 
dns_èbÀ_íåy
 
	gdns_èbÀ
[
DNS_TABLE_SIZE
];

222 
ù_addr_t
 
	gdns_£rvîs
[
DNS_MAX_SERVERS
];

224 
u8_t
 
	gdns_∑ylﬂd_buf„r
[
LWIP_MEM_ALIGN_BUFFER
(
DNS_MSG_SIZE
)];

225 
u8_t
* 
	gdns_∑ylﬂd
;

232 
	$dns_öô
()

234 
ù_addr_t
 
dns£rvî
;

236 
dns_∑ylﬂd
 = (
u8_t
 *)
	`LWIP_MEM_ALIGN
(
dns_∑ylﬂd_buf„r
);

239 
	`DNS_SERVER_ADDRESS
(&
dns£rvî
);

241 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_init: initializing\n"));

244 i‡(
dns_pcb
 =
NULL
) {

245 
dns_pcb
 = 
	`udp_√w
();

247 i‡(
dns_pcb
 !
NULL
) {

250 
	`LWIP_ASSERT
("For implicit initializationÅo work, DNS_STATE_UNUSEDÇeedsÅo be 0",

251 
DNS_STATE_UNUSED
 == 0);

254 
	`udp_böd
(
dns_pcb
, 
IP_ADDR_ANY
, 0);

255 
	`udp_ªcv
(
dns_pcb
, 
dns_ªcv
, 
NULL
);

258 
	`dns_£t£rvî
(0, &
dns£rvî
);

261 #i‡
DNS_LOCAL_HOSTLIST


262 
	`dns_öô_loˇl
();

264 
	}
}

273 
	$dns_£t£rvî
(
u8_t
 
numdns
, 
ù_addr_t
 *
dns£rvî
)

275 i‡((
numdns
 < 
DNS_MAX_SERVERS
Ë&& (
dns_pcb
 !
NULL
) &&

276 (
dns£rvî
 !
NULL
Ë&& !
	`ù_addr_ißny
(dnsserver)) {

277 
dns_£rvîs
[
numdns
] = (*
dns£rvî
);

279 
	}
}

288 
ù_addr_t


289 
	$dns_gë£rvî
(
u8_t
 
numdns
)

291 i‡(
numdns
 < 
DNS_MAX_SERVERS
) {

292  
dns_£rvîs
[
numdns
];

294  *
IP_ADDR_ANY
;

296 
	}
}

303 
	$dns_tmr
()

305 i‡(
dns_pcb
 !
NULL
) {

306 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_tmr: dns_check_entries\n"));

307 
	`dns_check_íåõs
();

309 
	}
}

311 #i‡
DNS_LOCAL_HOSTLIST


313 
	$dns_öô_loˇl
()

315 #i‡
DNS_LOCAL_HOSTLIST_IS_DYNAMIC
 && 
	`deföed
(
DNS_LOCAL_HOSTLIST_INIT
)

316 
i
;

317 
loˇl_ho°li°_íåy
 *
íåy
;

319 
loˇl_ho°li°_íåy
 
loˇl_ho°li°_öô
[] = 
DNS_LOCAL_HOSTLIST_INIT
;

320 
size_t
 
«mñí
;

321 
i
 = 0; i < (
loˇl_ho°li°_öô
Ë/ (
loˇl_ho°li°_íåy
); i++) {

322 
loˇl_ho°li°_íåy
 *
öô_íåy
 = &
loˇl_ho°li°_öô
[
i
];

323 
	`LWIP_ASSERT
("övÆid ho°Çamê(NULL)", 
öô_íåy
->
«me
 !
NULL
);

324 
«mñí
 = 
	`°æí
(
öô_íåy
->
«me
);

325 
	`LWIP_ASSERT
("«mñí <DNS_LOCAL_HOSTLIST_MAX_NAMELEN", 
«mñí
 <
DNS_LOCAL_HOSTLIST_MAX_NAMELEN
);

326 
íåy
 = (
loˇl_ho°li°_íåy
 *)
	`memp_mÆloc
(
MEMP_LOCALHOSTLIST
);

327 
	`LWIP_ASSERT
("mem-îr‹ i¿dns_öô_loˇl", 
íåy
 !
NULL
);

328 i‡(
íåy
 !
NULL
) {

329 
íåy
->
«me
 = (*Î¡ry + (
loˇl_ho°li°_íåy
);

330 
	`MEMCPY
((*)
íåy
->
«me
, 
öô_íåy
->«me, 
«mñí
);

331 ((*)
íåy
->
«me
)[
«mñí
] = 0;

332 
íåy
->
addr
 = 
öô_íåy
->addr;

333 
íåy
->
√xt
 = 
loˇl_ho°li°_dy«mic
;

334 
loˇl_ho°li°_dy«mic
 = 
íåy
;

338 
	}
}

347 
u32_t


348 
	$dns_lookup_loˇl
(c⁄° *
ho°«me
)

350 #i‡
DNS_LOCAL_HOSTLIST_IS_DYNAMIC


351 
loˇl_ho°li°_íåy
 *
íåy
 = 
loˇl_ho°li°_dy«mic
;

352 
íåy
 !
NULL
) {

353 if(
	`°rcmp
(
íåy
->
«me
, 
ho°«me
) == 0) {

354  
	`ù4_addr_gë_u32
(&
íåy
->
addr
);

356 
íåy
 =É¡ry->
√xt
;

359 
i
;

360 
i
 = 0; i < (
loˇl_ho°li°_°©ic
Ë/ (
loˇl_ho°li°_íåy
); i++) {

361 if(
	`°rcmp
(
loˇl_ho°li°_°©ic
[
i
].
«me
, 
ho°«me
) == 0) {

362  
	`ù4_addr_gë_u32
(&
loˇl_ho°li°_°©ic
[
i
].
addr
);

366  
IPADDR_NONE
;

367 
	}
}

369 #i‡
DNS_LOCAL_HOSTLIST_IS_DYNAMIC


379 
	$dns_loˇl_ªmoveho°
(c⁄° *
ho°«me
, c⁄° 
ù_addr_t
 *
addr
)

381 
ªmoved
 = 0;

382 
loˇl_ho°li°_íåy
 *
íåy
 = 
loˇl_ho°li°_dy«mic
;

383 
loˇl_ho°li°_íåy
 *
œ°_íåy
 = 
NULL
;

384 
íåy
 !
NULL
) {

385 i‡(((
ho°«me
 =
NULL
Ë|| !
	`°rcmp
(
íåy
->
«me
, hostname)) &&

386 ((
addr
 =
NULL
Ë|| 
	`ù_addr_cmp
(&
íåy
->addr,áddr))) {

387 
loˇl_ho°li°_íåy
 *
‰ì_íåy
;

388 i‡(
œ°_íåy
 !
NULL
) {

389 
œ°_íåy
->
√xt
 = 
íåy
->next;

391 
loˇl_ho°li°_dy«mic
 = 
íåy
->
√xt
;

393 
‰ì_íåy
 = 
íåy
;

394 
íåy
 =É¡ry->
√xt
;

395 
	`memp_‰ì
(
MEMP_LOCALHOSTLIST
, 
‰ì_íåy
);

396 
ªmoved
++;

398 
œ°_íåy
 = 
íåy
;

399 
íåy
 =É¡ry->
√xt
;

402  
ªmoved
;

403 
	}
}

413 
îr_t


414 
	$dns_loˇl_addho°
(c⁄° *
ho°«me
, c⁄° 
ù_addr_t
 *
addr
)

416 
loˇl_ho°li°_íåy
 *
íåy
;

417 
size_t
 
«mñí
;

418 
	`LWIP_ASSERT
("övÆid ho°Çamê(NULL)", 
ho°«me
 !
NULL
);

419 
«mñí
 = 
	`°æí
(
ho°«me
);

420 
	`LWIP_ASSERT
("«mñí <DNS_LOCAL_HOSTLIST_MAX_NAMELEN", 
«mñí
 <
DNS_LOCAL_HOSTLIST_MAX_NAMELEN
);

421 
íåy
 = (
loˇl_ho°li°_íåy
 *)
	`memp_mÆloc
(
MEMP_LOCALHOSTLIST
);

422 i‡(
íåy
 =
NULL
) {

423  
ERR_MEM
;

425 
íåy
->
«me
 = (*Î¡ry + (
loˇl_ho°li°_íåy
);

426 
	`MEMCPY
((*)
íåy
->
«me
, 
ho°«me
, 
«mñí
);

427 ((*)
íåy
->
«me
)[
«mñí
] = 0;

428 
	`ù_addr_c›y
(
íåy
->
addr
, *addr);

429 
íåy
->
√xt
 = 
loˇl_ho°li°_dy«mic
;

430 
loˇl_ho°li°_dy«mic
 = 
íåy
;

431  
ERR_OK
;

432 
	}
}

449 
u32_t


450 
	$dns_lookup
(c⁄° *
«me
)

452 
u8_t
 
i
;

453 #i‡
DNS_LOCAL_HOSTLIST
 || 
	`deföed
(
DNS_LOOKUP_LOCAL_EXTERN
)

454 
u32_t
 
addr
;

456 #i‡
DNS_LOCAL_HOSTLIST


457 i‡((
addr
 = 
	`dns_lookup_loˇl
(
«me
)Ë!
IPADDR_NONE
) {

458  
addr
;

461 #ifde‡
DNS_LOOKUP_LOCAL_EXTERN


462 if((
addr
 = 
	`DNS_LOOKUP_LOCAL_EXTERN
(
«me
)Ë!
IPADDR_NONE
) {

463  
addr
;

468 
i
 = 0; i < 
DNS_TABLE_SIZE
; ++i) {

469 i‡((
dns_èbÀ
[
i
].
°©e
 =
DNS_STATE_DONE
) &&

470 (
	`°rcmp
(
«me
, 
dns_èbÀ
[
i
].name) == 0)) {

471 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_lookup: \"%s\": found = ", 
«me
));

472 
	`ù_addr_debug_¥öt
(
DNS_DEBUG
, &(
dns_èbÀ
[
i
].
ùaddr
));

473 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("\n"));

474  
	`ù4_addr_gë_u32
(&
dns_èbÀ
[
i
].
ùaddr
);

478  
IPADDR_NONE
;

479 
	}
}

481 #i‡
DNS_DOES_NAME_CHECK


492 
u8_t


493 
	$dns_com∑ª_«me
(*
quîy
, *
ª•⁄£
)

495 
n
;

498 
n
 = *
ª•⁄£
++;

500 i‡((
n
 & 0xc0) == 0xc0) {

505 
n
 > 0) {

506 i‡((*
quîy
Ë!(*
ª•⁄£
)) {

509 ++
ª•⁄£
;

510 ++
quîy
;

511 --
n
;

513 ++
quîy
;

515 } *
ª•⁄£
 != 0);

518 
	}
}

528 
	$dns_∑r£_«me
(*
quîy
)

530 
n
;

533 
n
 = *
quîy
++;

535 i‡((
n
 & 0xc0) == 0xc0) {

540 
n
 > 0) {

541 ++
quîy
;

542 --
n
;

545 } *
quîy
 != 0);

547  
quîy
 + 1;

548 
	}
}

559 
îr_t


560 
	$dns_£nd
(
u8_t
 
numdns
, c⁄° * 
«me
, u8_à
id
)

562 
îr_t
 
îr
;

563 
dns_hdr
 *
hdr
;

564 
dns_quîy
 
qry
;

565 
pbuf
 *
p
;

566 *
quîy
, *
≈å
;

567 c⁄° *
pHo°«me
;

568 
u8_t
 
n
;

570 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_£nd: dns_£rvîs[%"
U16_F
"] \"%s\":Ñequest\n",

571 (
u16_t
)(
numdns
), 
«me
));

572 
	`LWIP_ASSERT
("dn†£rvî ouào‡¨øy", 
numdns
 < 
DNS_MAX_SERVERS
);

573 
	`LWIP_ASSERT
("dn†£rvî ha†nÿIPáddªs†£t", !
	`ù_addr_ißny
(&
dns_£rvîs
[
numdns
]));

576 
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
SIZEOF_DNS_HDR
 + 
DNS_MAX_NAME_LENGTH
 +

577 
SIZEOF_DNS_QUERY
, 
PBUF_RAM
);

578 i‡(
p
 !
NULL
) {

579 
	`LWIP_ASSERT
("pbu‡mu° bêö o√Öõ˚", 
p
->
√xt
 =
NULL
);

581 
hdr
 = (
dns_hdr
*)
p
->
∑ylﬂd
;

582 
	`mem£t
(
hdr
, 0, 
SIZEOF_DNS_HDR
);

583 
hdr
->
id
 = 
	`ht⁄s
(id);

584 
hdr
->
Êags1
 = 
DNS_FLAG1_RD
;

585 
hdr
->
numque°i⁄s
 = 
	`PP_HTONS
(1);

586 
quîy
 = (*)
hdr
 + 
SIZEOF_DNS_HDR
;

587 
pHo°«me
 = 
«me
;

588 --
pHo°«me
;

592 ++
pHo°«me
;

593 
≈å
 = 
quîy
;

594 ++
quîy
;

595 
n
 = 0; *
pHo°«me
 != '.' && *pHostname != 0; ++pHostname) {

596 *
quîy
 = *
pHo°«me
;

597 ++
quîy
;

598 ++
n
;

600 *
≈å
 = 
n
;

601 } *
pHo°«me
 != 0);

602 *
quîy
++='\0';

605 
qry
.
ty≥
 = 
	`PP_HTONS
(
DNS_RRTYPE_A
);

606 
qry
.
˛s
 = 
	`PP_HTONS
(
DNS_RRCLASS_IN
);

607 
	`SMEMCPY
(
quîy
, &
qry
, 
SIZEOF_DNS_QUERY
);

610 
	`pbuf_ªÆloc
(
p
, (
u16_t
)((
quîy
 + 
SIZEOF_DNS_QUERY
Ë- ((*)’->
∑ylﬂd
))));

613 
	`udp_c⁄√˘
(
dns_pcb
, &
dns_£rvîs
[
numdns
], 
DNS_SERVER_PORT
);

615 
îr
 = 
	`udp_£ndto
(
dns_pcb
, 
p
, &
dns_£rvîs
[
numdns
], 
DNS_SERVER_PORT
);

618 
	`pbuf_‰ì
(
p
);

620 
îr
 = 
ERR_MEM
;

623  
îr
;

624 
	}
}

636 
	$dns_check_íåy
(
u8_t
 
i
)

638 
îr_t
 
îr
;

639 
dns_èbÀ_íåy
 *
pE¡ry
 = &
dns_èbÀ
[
i
];

641 
	`LWIP_ASSERT
("¨øy index ouào‡bounds", 
i
 < 
DNS_TABLE_SIZE
);

643 
pE¡ry
->
°©e
) {

645 
DNS_STATE_NEW
: {

647 
pE¡ry
->
°©e
 = 
DNS_STATE_ASKING
;

648 
pE¡ry
->
numdns
 = 0;

649 
pE¡ry
->
tmr
 = 1;

650 
pE¡ry
->
ªåõs
 = 0;

653 
îr
 = 
	`dns_£nd
(
pE¡ry
->
numdns
,ÖE¡ry->
«me
, 
i
);

654 i‡(
îr
 !
ERR_OK
) {

655 
	`LWIP_DEBUGF
(
DNS_DEBUG
 | 
LWIP_DBG_LEVEL_WARNING
,

656 ("dns_£ndÑëu∫edÉº‹: %s\n", 
	`lwù_°ªº
(
îr
)));

661 
DNS_STATE_ASKING
: {

662 i‡(--
pE¡ry
->
tmr
 == 0) {

663 i‡(++
pE¡ry
->
ªåõs
 =
DNS_MAX_RETRIES
) {

664 i‡((
pE¡ry
->
numdns
+1<
DNS_MAX_SERVERS
Ë&& !
	`ù_addr_ißny
(&
dns_£rvîs
[pEntry->numdns+1])) {

666 
pE¡ry
->
numdns
++;

667 
pE¡ry
->
tmr
 = 1;

668 
pE¡ry
->
ªåõs
 = 0;

671 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_check_íåy: \"%s\":Åimeout\n", 
pE¡ry
->
«me
));

673 i‡(
pE¡ry
->
found
)

674 (*
pE¡ry
->
found
)’E¡ry->
«me
, 
NULL
,ÖE¡ry->
¨g
);

676 
pE¡ry
->
°©e
 = 
DNS_STATE_UNUSED
;

677 
pE¡ry
->
found
 = 
NULL
;

683 
pE¡ry
->
tmr
 =ÖE¡ry->
ªåõs
;

686 
îr
 = 
	`dns_£nd
(
pE¡ry
->
numdns
,ÖE¡ry->
«me
, 
i
);

687 i‡(
îr
 !
ERR_OK
) {

688 
	`LWIP_DEBUGF
(
DNS_DEBUG
 | 
LWIP_DBG_LEVEL_WARNING
,

689 ("dns_£ndÑëu∫edÉº‹: %s\n", 
	`lwù_°ªº
(
îr
)));

695 
DNS_STATE_DONE
: {

697 i‡(--
pE¡ry
->
âl
 == 0) {

698 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_check_íåy: \"%s\": flush\n", 
pE¡ry
->
«me
));

700 
pE¡ry
->
°©e
 = 
DNS_STATE_UNUSED
;

701 
pE¡ry
->
found
 = 
NULL
;

705 
DNS_STATE_UNUSED
:

709 
	`LWIP_ASSERT
("unknown dns_tableÉntry state:", 0);

712 
	}
}

718 
	$dns_check_íåõs
()

720 
u8_t
 
i
;

722 
i
 = 0; i < 
DNS_TABLE_SIZE
; ++i) {

723 
	`dns_check_íåy
(
i
);

725 
	}
}

733 
	$dns_ªcv
(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr_t
 *
addr
, 
u16_t
 
p‹t
)

735 
u16_t
 
i
;

736 *
pHo°«me
;

737 
dns_hdr
 *
hdr
;

738 
dns_™swî
 
™s
;

739 
dns_èbÀ_íåy
 *
pE¡ry
;

740 
u16_t
 
nque°i⁄s
, 
«nswîs
;

742 
	`LWIP_UNUSED_ARG
(
¨g
);

743 
	`LWIP_UNUSED_ARG
(
pcb
);

744 
	`LWIP_UNUSED_ARG
(
addr
);

745 
	`LWIP_UNUSED_ARG
(
p‹t
);

748 i‡(
p
->
tŸ_Àn
 > 
DNS_MSG_SIZE
) {

749 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_recv:ÖbufÅoo big\n"));

751 
memîr
;

755 i‡(
p
->
tŸ_Àn
 < (
SIZEOF_DNS_HDR
 + 
SIZEOF_DNS_QUERY
 + 
SIZEOF_DNS_ANSWER
)) {

756 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_recv:ÖbufÅoo small\n"));

758 
memîr
;

762 i‡(
	`pbuf_c›y_∑πül
(
p
, 
dns_∑ylﬂd
,Ö->
tŸ_Àn
, 0) ==Ö->tot_len) {

764 
hdr
 = (
dns_hdr
*)
dns_∑ylﬂd
;

765 
i
 = 
	`ht⁄s
(
hdr
->
id
);

766 i‡(
i
 < 
DNS_TABLE_SIZE
) {

767 
pE¡ry
 = &
dns_èbÀ
[
i
];

768 if(
pE¡ry
->
°©e
 =
DNS_STATE_ASKING
) {

770 
pE¡ry
->
°©e
 = 
DNS_STATE_DONE
;

771 
pE¡ry
->
îr
 = 
hdr
->
Êags2
 & 
DNS_FLAG2_ERR_MASK
;

775 
nque°i⁄s
 = 
	`ht⁄s
(
hdr
->
numque°i⁄s
);

776 
«nswîs
 = 
	`ht⁄s
(
hdr
->
num™swîs
);

779 i‡(((
hdr
->
Êags1
 & 
DNS_FLAG1_RESPONSE
Ë=0Ë|| (
pE¡ry
->
îr
 !0Ë|| (
nque°i⁄s
 != 1)) {

780 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_ªcv: \"%s\":Éº‹ i¿Êags\n", 
pE¡ry
->
«me
));

782 
ª•⁄£îr
;

785 #i‡
DNS_DOES_NAME_CHECK


787 i‡(
	`dns_com∑ª_«me
((*)(
pE¡ry
->
«me
), (*)
dns_∑ylﬂd
 + 
SIZEOF_DNS_HDR
) != 0) {

788 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_ªcv: \"%s\":Ñe•⁄£ÇŸ m©chÅÿquîy\n", 
pE¡ry
->
«me
));

790 
ª•⁄£îr
;

795 
pHo°«me
 = (*Ë
	`dns_∑r£_«me
((*)
dns_∑ylﬂd
 + 
SIZEOF_DNS_HDR
Ë+ 
SIZEOF_DNS_QUERY
;

797 
«nswîs
 > 0) {

799 
pHo°«me
 = (*Ë
	`dns_∑r£_«me
((*)pHostname);

802 
	`SMEMCPY
(&
™s
, 
pHo°«me
, 
SIZEOF_DNS_ANSWER
);

803 if((
™s
.
ty≥
 =
	`PP_HTONS
(
DNS_RRTYPE_A
)Ë&& (™s.
˛s
 =PP_HTONS(
DNS_RRCLASS_IN
)) &&

804 (
™s
.
Àn
 =
	`PP_HTONS
((
ù_addr_t
))) ) {

806 
pE¡ry
->
âl
 = 
	`¡ohl
(
™s
.ttl);

807 i‡(
pE¡ry
->
âl
 > 
DNS_MAX_TTL
) {

808 
pE¡ry
->
âl
 = 
DNS_MAX_TTL
;

811 
	`SMEMCPY
(&(
pE¡ry
->
ùaddr
), (
pHo°«me
+
SIZEOF_DNS_ANSWER
), (
ù_addr_t
));

812 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_ªcv: \"%s\":Ñe•⁄£ = ", 
pE¡ry
->
«me
));

813 
	`ù_addr_debug_¥öt
(
DNS_DEBUG
, (&(
pE¡ry
->
ùaddr
)));

814 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("\n"));

816 i‡(
pE¡ry
->
found
) {

817 (*
pE¡ry
->
found
)’E¡ry->
«me
, &pE¡ry->
ùaddr
,ÖE¡ry->
¨g
);

820 
memîr
;

822 
pHo°«me
 =ÖHo°«mê+ 
SIZEOF_DNS_ANSWER
 + 
	`ht⁄s
(
™s
.
Àn
);

824 --
«nswîs
;

826 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_ªcv: \"%s\":Éº‹ i¿ª•⁄£\n", 
pE¡ry
->
«me
));

828 
ª•⁄£îr
;

834 
memîr
;

836 
ª•⁄£îr
:

838 i‡(
pE¡ry
->
found
) {

839 (*
pE¡ry
->
found
)’E¡ry->
«me
, 
NULL
,ÖE¡ry->
¨g
);

842 
pE¡ry
->
°©e
 = 
DNS_STATE_UNUSED
;

843 
pE¡ry
->
found
 = 
NULL
;

845 
memîr
:

847 
	`pbuf_‰ì
(
p
);

849 
	}
}

859 
îr_t


860 
	$dns_íqueue
(c⁄° *
«me
, 
dns_found_ˇŒback
 
found
, *
ˇŒback_¨g
)

862 
u8_t
 
i
;

863 
u8_t
 
l£q
, 
l£qi
;

864 
dns_èbÀ_íåy
 *
pE¡ry
 = 
NULL
;

865 
size_t
 
«mñí
;

868 
l£q
 = 
l£qi
 = 0;

869 
i
 = 0; i < 
DNS_TABLE_SIZE
; ++i) {

870 
pE¡ry
 = &
dns_èbÀ
[
i
];

872 i‡(
pE¡ry
->
°©e
 =
DNS_STATE_UNUSED
)

876 i‡(
pE¡ry
->
°©e
 =
DNS_STATE_DONE
) {

877 i‡((
dns_£qno
 - 
pE¡ry
->
£qno
Ë> 
l£q
) {

878 
l£q
 = 
dns_£qno
 - 
pE¡ry
->
£qno
;

879 
l£qi
 = 
i
;

885 i‡(
i
 =
DNS_TABLE_SIZE
) {

886 i‡((
l£qi
 >
DNS_TABLE_SIZE
Ë|| (
dns_èbÀ
[l£qi].
°©e
 !
DNS_STATE_DONE
)) {

888 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_íqueue: \"%s\": DNSÉ¡rõ†èbÀ i†fuŒ\n", 
«me
));

889  
ERR_MEM
;

892 
i
 = 
l£qi
;

893 
pE¡ry
 = &
dns_èbÀ
[
i
];

898 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_íqueue: \"%s\": u£ DNSÉ¡ry %"
U16_F
"\n", 
«me
, (
u16_t
)(
i
)));

901 
pE¡ry
->
°©e
 = 
DNS_STATE_NEW
;

902 
pE¡ry
->
£qno
 = 
dns_£qno
++;

903 
pE¡ry
->
found
 = found;

904 
pE¡ry
->
¨g
 = 
ˇŒback_¨g
;

905 
«mñí
 = 
	`LWIP_MIN
(
	`°æí
(
«me
), 
DNS_MAX_NAME_LENGTH
-1);

906 
	`MEMCPY
(
pE¡ry
->
«me
,Çame, 
«mñí
);

907 
pE¡ry
->
«me
[
«mñí
] = 0;

910 
	`dns_check_íåy
(
i
);

913  
ERR_INPROGRESS
;

914 
	}
}

935 
îr_t


936 
	$dns_gëho°by«me
(c⁄° *
ho°«me
, 
ù_addr_t
 *
addr
, 
dns_found_ˇŒback
 
found
,

937 *
ˇŒback_¨g
)

939 
u32_t
 
ùaddr
;

942 i‡((
dns_pcb
 =
NULL
Ë|| (
addr
 == NULL) ||

943 (!
ho°«me
) || (!hostname[0]) ||

944 (
	`°æí
(
ho°«me
Ë>
DNS_MAX_NAME_LENGTH
)) {

945  
ERR_ARG
;

948 #i‡
LWIP_HAVE_LOOPIF


949 i‡(
	`°rcmp
(
ho°«me
, "localhost")==0) {

950 
	`ù_addr_£t_lo›back
(
addr
);

951  
ERR_OK
;

956 
ùaddr
 = 
	`ùaddr_addr
(
ho°«me
);

957 i‡(
ùaddr
 =
IPADDR_NONE
) {

959 
ùaddr
 = 
	`dns_lookup
(
ho°«me
);

961 i‡(
ùaddr
 !
IPADDR_NONE
) {

962 
	`ù4_addr_£t_u32
(
addr
, 
ùaddr
);

963  
ERR_OK
;

967  
	`dns_íqueue
(
ho°«me
, 
found
, 
ˇŒback_¨g
);

968 
	}
}

	@core/init.c

39 
	~"lwù/›t.h
"

41 
	~"lwù/öô.h
"

42 
	~"lwù/°©s.h
"

43 
	~"lwù/sys.h
"

44 
	~"lwù/mem.h
"

45 
	~"lwù/memp.h
"

46 
	~"lwù/pbuf.h
"

47 
	~"lwù/√tif.h
"

48 
	~"lwù/sockës.h
"

49 
	~"lwù/ù.h
"

50 
	~"lwù/øw.h
"

51 
	~"lwù/udp.h
"

52 
	~"lwù/t˝_im∂.h
"

53 
	~"lwù/¢mp_msg.h
"

54 
	~"lwù/autoù.h
"

55 
	~"lwù/igmp.h
"

56 
	~"lwù/dns.h
"

57 
	~"lwù/timîs.h
"

58 
	~"√tif/ëh¨p.h
"

63 #i‚de‡
BYTE_ORDER


66 #i‡(!
IP_SOF_BROADCAST
 && 
IP_SOF_BROADCAST_RECV
)

69 #i‡(!
LWIP_ARP
 && 
ARP_QUEUEING
)

72 #i‡(!
LWIP_UDP
 && 
LWIP_UDPLITE
)

75 #i‡(!
LWIP_UDP
 && 
LWIP_SNMP
)

78 #i‡(!
LWIP_UDP
 && 
LWIP_DHCP
)

81 #i‡(!
LWIP_UDP
 && 
LWIP_IGMP
)

84 #i‡(!
LWIP_UDP
 && 
LWIP_SNMP
)

87 #i‡(!
LWIP_UDP
 && 
LWIP_DNS
)

90 #i‡(
LWIP_ARP
 && 
ARP_QUEUEING
 && (
MEMP_NUM_ARP_QUEUE
<=0))

93 #i‡(
LWIP_RAW
 && (
MEMP_NUM_RAW_PCB
<=0))

96 #i‡(
LWIP_UDP
 && (
MEMP_NUM_UDP_PCB
<=0))

99 #i‡(
LWIP_TCP
 && (
MEMP_NUM_TCP_PCB
<=0))

102 #i‡(
LWIP_TCP
 && (
TCP_WND
 > 0xffff))

105 #i‡(
LWIP_TCP
 && (
TCP_SND_QUEUELEN
 > 0xffff))

108 #i‡(
LWIP_TCP
 && (
TCP_SND_QUEUELEN
 < 2))

111 #i‡(
LWIP_TCP
 && ((
TCP_MAXRTX
 > 12Ë|| (
TCP_SYNMAXRTX
 > 12)))

114 #i‡(
LWIP_TCP
 && 
TCP_LISTEN_BACKLOG
 && (
TCP_DEFAULT_LISTEN_BACKLOG
 < 0) || (TCP_DEFAULT_LISTEN_BACKLOG > 0xff))

117 #i‡(
LWIP_IGMP
 && (
MEMP_NUM_IGMP_GROUP
<=1))

120 #i‡(
LWIP_NETIF_API
 && (
NO_SYS
==1))

123 #i‡((
LWIP_SOCKET
 || 
LWIP_NETCONN
Ë&& (
NO_SYS
==1))

126 #i‡((
LWIP_NETCONN
 || 
LWIP_SOCKET
Ë&& (
MEMP_NUM_TCPIP_MSG_API
<=0))

129 #i‡(!
LWIP_NETCONN
 && 
LWIP_SOCKET
)

132 #i‡(((!
LWIP_DHCP
Ë|| (!
LWIP_AUTOIP
)Ë&& 
LWIP_DHCP_AUTOIP_COOP
)

135 #i‡(((!
LWIP_DHCP
Ë|| (!
LWIP_ARP
)Ë&& 
DHCP_DOES_ARP_CHECK
)

138 #i‡(!
LWIP_ARP
 && 
LWIP_AUTOIP
)

141 #i‡(
LWIP_SNMP
 && (
SNMP_CONCURRENT_REQUESTS
<=0))

144 #i‡(
LWIP_SNMP
 && (
SNMP_TRAP_DESTINATIONS
<=0))

147 #i‡(
LWIP_TCP
 && ((
LWIP_EVENT_API
 && 
LWIP_CALLBACK_API
) || (!LWIP_EVENT_API && !LWIP_CALLBACK_API)))

151 #i‡
LWIP_TIMERS
 && (
MEMP_NUM_SYS_TIMEOUT
 < (
LWIP_TCP
 + 
IP_REASSEMBLY
 + 
LWIP_ARP
 + (2*
LWIP_DHCP
Ë+ 
LWIP_AUTOIP
 + 
LWIP_IGMP
 + 
LWIP_DNS
 + 
PPP_SUPPORT
))

154 #i‡(
IP_REASSEMBLY
 && (
MEMP_NUM_REASSDATA
 > 
IP_REASS_MAX_PBUFS
))

157 #i‡(
MEM_LIBC_MALLOC
 && 
MEM_USE_POOLS
)

160 #i‡(
MEM_USE_POOLS
 && !
MEMP_USE_CUSTOM_POOLS
)

163 #i‡(
PBUF_POOL_BUFSIZE
 <
MEM_ALIGNMENT
)

166 #i‡(
TCP_QUEUE_OOSEQ
 && !
LWIP_TCP
)

169 #i‡(
DNS_LOCAL_HOSTLIST
 && !
DNS_LOCAL_HOSTLIST_IS_DYNAMIC
 && !(
deföed
(
DNS_LOCAL_HOSTLIST_INIT
)))

172 #i‡
PPP_SUPPORT
 && !
PPPOS_SUPPORT
 & !
PPPOE_SUPPORT


175 #i‡!
LWIP_ETHERNET
 && (
LWIP_ARP
 || 
PPPOE_SUPPORT
)

178 #i‡
LWIP_IGMP
 && !
deföed
(
LWIP_RAND
)

181 #i‡
LWIP_TCPIP_CORE_LOCKING_INPUT
 && !
LWIP_TCPIP_CORE_LOCKING


184 #i‡
LWIP_TCP
 && 
LWIP_NETIF_TX_SINGLE_PBUF
 && !
TCP_OVERSIZE


187 #i‡
IP_FRAG
 && 
IP_FRAG_USES_STATIC_BUF
 && 
LWIP_NETIF_TX_SINGLE_PBUF


194 #ifde‡
MEMP_NUM_TCPIP_MSG


197 #ifde‡
MEMP_NUM_API_MSG


200 #ifde‡
TCP_REXMIT_DEBUG


203 #ifde‡
RAW_STATS


206 #ifde‡
ETHARP_QUEUE_FIRST


209 #ifde‡
ETHARP_ALWAYS_INSERT


213 #ifde‡
LWIP_DEBUG


215 
	$lwù_ßnôy_check
()

218 #i‡
LWIP_NETCONN


219 i‡(
MEMP_NUM_NETCONN
 > (
MEMP_NUM_TCP_PCB
+
MEMP_NUM_TCP_PCB_LISTEN
+
MEMP_NUM_UDP_PCB
+
MEMP_NUM_RAW_PCB
))

220 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: MEMP_NUM_NETCONN should beÜessÅhanÅhe sum of MEMP_NUM_{TCP,RAW,UDP}_PCB+MEMP_NUM_TCP_PCB_LISTEN\n"));

222 #i‡
LWIP_TCP


223 i‡(
MEMP_NUM_TCP_SEG
 < 
TCP_SND_QUEUELEN
)

224 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: MEMP_NUM_TCP_SEG should beátÜeastás bigás TCP_SND_QUEUELEN\n"));

225 i‡(
TCP_SND_BUF
 < 2 * 
TCP_MSS
)

226 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: TCP_SND_BUF must beátÜeastás muchás (2 * TCP_MSS) forÅhingsÅo work smoothly\n"));

227 i‡(
TCP_SND_QUEUELEN
 < (2 * (
TCP_SND_BUF
/
TCP_MSS
)))

228 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: TCP_SND_QUEUELEN must beátÜeastás muchás (2 * TCP_SND_BUF/TCP_MSS) forÅhingsÅo work\n"));

229 i‡(
TCP_SNDLOWAT
 >
TCP_SND_BUF
)

230 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: TCP_SNDLOWAT must beÜessÅhan TCP_SND_BUF.\n"));

231 i‡(
TCP_SNDQUEUELOWAT
 >
TCP_SND_QUEUELEN
)

232 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: TCP_SNDQUEUELOWAT must beÜessÅhan TCP_SND_QUEUELEN.\n"));

233 i‡(
TCP_WND
 > (
PBUF_POOL_SIZE
*
PBUF_POOL_BUFSIZE
))

234 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: TCP_WND isÜargerÅhan spaceÖrovided by PBUF_POOL_SIZE*PBUF_POOL_BUFSIZE\n"));

235 i‡(
TCP_WND
 < 
TCP_MSS
)

236 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: TCP_WND is smallerÅhan MSS\n"));

238 #i‡
LWIP_SOCKET


240 i‡(
SO_ACCEPTCONN
 !
SOF_ACCEPTCONN
)

241 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: SO_ACCEPTCONN != SOF_ACCEPTCONN\n"));

242 i‡(
SO_REUSEADDR
 !
SOF_REUSEADDR
)

243 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: SO_REUSEADDR != SOF_REUSEADDR\n"));

244 i‡(
SO_KEEPALIVE
 !
SOF_KEEPALIVE
)

245 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: SO_KEEPALIVE != SOF_KEEPALIVE\n"));

246 i‡(
SO_BROADCAST
 !
SOF_BROADCAST
)

247 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: SO_BROADCAST != SOF_BROADCAST\n"));

248 i‡(
SO_LINGER
 !
SOF_LINGER
)

249 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: SO_LINGER != SOF_LINGER\n"));

251 
	}
}

253 
	#lwù_ßnôy_check
()

	)

260 
	$lwù_öô
()

263 
	`lwù_ßnôy_check
();

266 
	`°©s_öô
();

267 #i‡!
NO_SYS


268 
	`sys_öô
();

270 
	`mem_öô
();

271 
	`memp_öô
();

272 
	`pbuf_öô
();

273 
	`√tif_öô
();

274 #i‡
LWIP_SOCKET


275 
	`lwù_sockë_öô
();

277 
	`ù_öô
();

278 #i‡
LWIP_ARP


279 
	`ëh¨p_öô
();

281 #i‡
LWIP_RAW


282 
	`øw_öô
();

284 #i‡
LWIP_UDP


285 
	`udp_öô
();

287 #i‡
LWIP_TCP


288 
	`t˝_öô
();

290 #i‡
LWIP_SNMP


291 
	`¢mp_öô
();

293 #i‡
LWIP_AUTOIP


294 
	`autoù_öô
();

296 #i‡
LWIP_IGMP


297 
	`igmp_öô
();

299 #i‡
LWIP_DNS


300 
	`dns_öô
();

303 #i‡
LWIP_TIMERS


304 
	`sys_timeouts_öô
();

306 
	}
}

	@core/ipv4/autoip.c

65 
	~"lwù/›t.h
"

67 #i‡
LWIP_AUTOIP


69 
	~"lwù/mem.h
"

70 
	~"lwù/udp.h
"

71 
	~"lwù/ù_addr.h
"

72 
	~"lwù/√tif.h
"

73 
	~"lwù/autoù.h
"

74 
	~"√tif/ëh¨p.h
"

76 
	~<°dlib.h
>

77 
	~<°rög.h
>

80 
	#AUTOIP_NET
 0xA9FE0000

	)

82 
	#AUTOIP_RANGE_START
 (
AUTOIP_NET
 | 0x0100)

	)

84 
	#AUTOIP_RANGE_END
 (
AUTOIP_NET
 | 0xFEFF)

	)

89 #i‚de‡
LWIP_AUTOIP_RAND


90 
	#LWIP_AUTOIP_RAND
(
√tif
Ë–(((
u32_t
)(“ëif->
hwaddr
[5]) & 0xff) << 24) | \

91 ((
u32_t
)((
√tif
->
hwaddr
[3]) & 0xff) << 16) | \

92 ((
u32_t
)((
√tif
->
hwaddr
[2]) & 0xff) << 8) | \

93 ((
u32_t
)((
√tif
->
hwaddr
[4]) & 0xff))) + \

94 (
√tif
->
autoù
?√tif->autoù->
åõd_Œùaddr
:0))

	)

101 #i‚de‡
LWIP_AUTOIP_CREATE_SEED_ADDR


102 
	#LWIP_AUTOIP_CREATE_SEED_ADDR
(
√tif
) \

103 
	`ht⁄l
(
AUTOIP_RANGE_START
 + ((
u32_t
)(((
u8_t
)(
√tif
->
hwaddr
[4])) | \

104 ((
u32_t
)((
u8_t
)(
√tif
->
hwaddr
[5]))Ë<< 8)))

	)

108 
autoù_h™dÀ_¨p_c⁄Êi˘
(
√tif
 *netif);

111 
autoù_¸óã_addr
(
√tif
 *√tif, 
ù_addr_t
 *
ùaddr
);

114 
îr_t
 
autoù_¨p_¥obe
(
√tif
 *netif);

117 
îr_t
 
autoù_¨p_™noun˚
(
√tif
 *netif);

120 
îr_t
 
autoù_böd
(
√tif
 *netif);

123 
autoù_°¨t_¥obög
(
√tif
 *netif);

129 
	$autoù_öô
()

131 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
, ("autoip_init()\n"));

132 
	}
}

141 
	$autoù_£t_°ru˘
(
√tif
 *√tif, 
autoù
 *autoip)

143 
	`LWIP_ASSERT
("√ti‡!NULL", 
√tif
 !
NULL
);

144 
	`LWIP_ASSERT
("autoù !NULL", 
autoù
 !
NULL
);

145 
	`LWIP_ASSERT
("√ti‡Æªady ha†®°ru˘áutoù së", 
√tif
->
autoù
 =
NULL
);

148 
	`mem£t
(
autoù
, 0, (autoip));

150 
√tif
->
autoù
 =áutoip;

151 
	}
}

158 
	$autoù_ª°¨t
(
√tif
 *netif)

160 
√tif
->
autoù
->
åõd_Œùaddr
++;

161 
	`autoù_°¨t
(
√tif
);

162 
	}
}

168 
	$autoù_h™dÀ_¨p_c⁄Êi˘
(
√tif
 *netif)

171 
de„nd
 = 1;

173 if(
de„nd
) {

174 if(
√tif
->
autoù
->
œ°c⁄Êi˘
 > 0) {

178 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
,

182 
	`autoù_ª°¨t
(
√tif
);

184 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
,

186 
	`autoù_¨p_™noun˚
(
√tif
);

187 
√tif
->
autoù
->
œ°c⁄Êi˘
 = 
DEFEND_INTERVAL
 * 
AUTOIP_TICKS_PER_SECOND
;

190 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
,

193 
	`autoù_ª°¨t
(
√tif
);

195 
	}
}

204 
	$autoù_¸óã_addr
(
√tif
 *√tif, 
ù_addr_t
 *
ùaddr
)

210 
u32_t
 
addr
 = 
	`¡ohl
(
	`LWIP_AUTOIP_CREATE_SEED_ADDR
(
√tif
));

211 
addr
 +
√tif
->
autoù
->
åõd_Œùaddr
;

212 
addr
 = 
AUTOIP_NET
 | (addr & 0xffff);

215 i‡(
addr
 < 
AUTOIP_RANGE_START
) {

216 
addr
 +
AUTOIP_RANGE_END
 - 
AUTOIP_RANGE_START
 + 1;

218 i‡(
addr
 > 
AUTOIP_RANGE_END
) {

219 
addr
 -
AUTOIP_RANGE_END
 - 
AUTOIP_RANGE_START
 + 1;

221 
	`LWIP_ASSERT
("AUTOIPáddªs†nŸ i¿ønge", (
addr
 >
AUTOIP_RANGE_START
) &&

222 (
addr
 <
AUTOIP_RANGE_END
));

223 
	`ù4_addr_£t_u32
(
ùaddr
, 
	`ht⁄l
(
addr
));

225 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
,

226 ("autoù_¸óã_addr():Årõd_Œùaddr=%"
U16_F
", %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",

227 (
u16_t
)(
√tif
->
autoù
->
åõd_Œùaddr
), 
	`ù4_addr1_16
(
ùaddr
), 
	`ù4_addr2_16
(ipaddr),

228 
	`ù4_addr3_16
(
ùaddr
), 
	`ù4_addr4_16
(ipaddr)));

229 
	}
}

236 
îr_t


237 
	$autoù_¨p_¥obe
(
√tif
 *netif)

239  
	`ëh¨p_øw
(
√tif
, (
ëh_addr
 *Íëif->
hwaddr
, &
ëhbrﬂdˇ°
,

240 (
ëh_addr
 *)
√tif
->
hwaddr
, 
IP_ADDR_ANY
, &
ëhzîo
,

241 &
√tif
->
autoù
->
Œùaddr
, 
ARP_REQUEST
);

242 
	}
}

249 
îr_t


250 
	$autoù_¨p_™noun˚
(
√tif
 *netif)

252  
	`ëh¨p_øw
(
√tif
, (
ëh_addr
 *Íëif->
hwaddr
, &
ëhbrﬂdˇ°
,

253 (
ëh_addr
 *)
√tif
->
hwaddr
, &√tif->
autoù
->
Œùaddr
, &
ëhzîo
,

254 &
√tif
->
autoù
->
Œùaddr
, 
ARP_REQUEST
);

255 
	}
}

262 
îr_t


263 
	$autoù_böd
(
√tif
 *netif)

265 
autoù
 *autoù = 
√tif
->autoip;

266 
ù_addr_t
 
¢_mask
, 
gw_addr
;

268 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
,

269 ("autoù_böd“ëif=%pË%c%c%"
U16_F
" %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",

270 (*)
√tif
,Çëif->
«me
[0],Çëif->«me[1], (
u16_t
Íëif->
num
,

271 
	`ù4_addr1_16
(&
autoù
->
Œùaddr
), 
	`ù4_addr2_16
(&autoip->llipaddr),

272 
	`ù4_addr3_16
(&
autoù
->
Œùaddr
), 
	`ù4_addr4_16
(&autoip->llipaddr)));

274 
	`IP4_ADDR
(&
¢_mask
, 255, 255, 0, 0);

275 
	`IP4_ADDR
(&
gw_addr
, 0, 0, 0, 0);

277 
	`√tif_£t_ùaddr
(
√tif
, &
autoù
->
Œùaddr
);

278 
	`√tif_£t_√tmask
(
√tif
, &
¢_mask
);

279 
	`√tif_£t_gw
(
√tif
, &
gw_addr
);

282 
	`√tif_£t_up
(
√tif
);

284  
ERR_OK
;

285 
	}
}

292 
îr_t


293 
	$autoù_°¨t
(
√tif
 *netif)

295 
autoù
 *autoù = 
√tif
->autoip;

296 
îr_t
 
ªsu…
 = 
ERR_OK
;

298 if(
	`√tif_is_up
(
√tif
)) {

299 
	`√tif_£t_down
(
√tif
);

305 
	`ù_addr_£t_zîo
(&
√tif
->
ù_addr
);

306 
	`ù_addr_£t_zîo
(&
√tif
->
√tmask
);

307 
	`ù_addr_£t_zîo
(&
√tif
->
gw
);

309 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
,

310 ("autoù_°¨t“ëif=%pË%c%c%"
U16_F
"\n", (*)
√tif
,Çëif->
«me
[0],

311 
√tif
->
«me
[1], (
u16_t
Íëif->
num
));

312 if(
autoù
 =
NULL
) {

314 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
,

316 
autoù
 = (autoù *)
	`mem_mÆloc
((autoip));

317 if(
autoù
 =
NULL
) {

318 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
,

320  
ERR_MEM
;

322 
	`mem£t
(
autoù
, 0, (autoip));

324 
√tif
->
autoù
 =áutoip;

325 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
, ("autoip_start():állocatedáutoip"));

327 
autoù
->
°©e
 = 
AUTOIP_STATE_OFF
;

328 
autoù
->
âw
 = 0;

329 
autoù
->
£¡_num
 = 0;

330 
	`ù_addr_£t_zîo
(&
autoù
->
Œùaddr
);

331 
autoù
->
œ°c⁄Êi˘
 = 0;

334 
	`autoù_¸óã_addr
(
√tif
, &(
autoù
->
Œùaddr
));

335 
	`autoù_°¨t_¥obög
(
√tif
);

337  
ªsu…
;

338 
	}
}

341 
	$autoù_°¨t_¥obög
(
√tif
 *netif)

343 
autoù
 *autoù = 
√tif
->autoip;

345 
autoù
->
°©e
 = 
AUTOIP_STATE_PROBING
;

346 
autoù
->
£¡_num
 = 0;

347 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
,

348 ("autoù_°¨t_¥obög(): ch™gög sèãÅÿPROBING: %"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

349 
	`ù4_addr1_16
(&
√tif
->
autoù
->
Œùaddr
), 
	`ù4_addr2_16
(&netif->autoip->llipaddr),

350 
	`ù4_addr3_16
(&
√tif
->
autoù
->
Œùaddr
), 
	`ù4_addr4_16
(&netif->autoip->llipaddr)));

356 
autoù
->
âw
 = (
u16_t
)(
	`LWIP_AUTOIP_RAND
(
√tif
Ë% (
PROBE_WAIT
 * 
AUTOIP_TICKS_PER_SECOND
));

363 if(
autoù
->
åõd_Œùaddr
 > 
MAX_CONFLICTS
) {

364 
autoù
->
âw
 = 
RATE_LIMIT_INTERVAL
 * 
AUTOIP_TICKS_PER_SECOND
;

366 
	}
}

375 
	$autoù_√tw‹k_ch™ged
(
√tif
 *netif)

377 i‡(
√tif
->
autoù
 &&Çëif->autoù->
°©e
 !
AUTOIP_STATE_OFF
) {

378 
	`√tif_£t_down
(
√tif
);

379 
	`autoù_°¨t_¥obög
(
√tif
);

381 
	}
}

388 
îr_t


389 
	$autoù_°›
(
√tif
 *netif)

391 
√tif
->
autoù
->
°©e
 = 
AUTOIP_STATE_OFF
;

392 
	`√tif_£t_down
(
√tif
);

393  
ERR_OK
;

394 
	}
}

400 
	$autoù_tmr
()

402 
√tif
 *√ti‡
√tif_li°
;

404 
√tif
 !
NULL
) {

406 i‡(
√tif
->
autoù
 !
NULL
) {

407 if(
√tif
->
autoù
->
œ°c⁄Êi˘
 > 0) {

408 
√tif
->
autoù
->
œ°c⁄Êi˘
--;

411 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
,

412 ("autoù_tmr(ËAutoIP-Sèã: %"
U16_F
",Åtw=%"U16_F"\n",

413 (
u16_t
)(
√tif
->
autoù
->
°©e
),Çëif->autoù->
âw
));

415 
√tif
->
autoù
->
°©e
) {

416 
AUTOIP_STATE_PROBING
:

417 if(
√tif
->
autoù
->
âw
 > 0) {

418 
√tif
->
autoù
->
âw
--;

420 if(
√tif
->
autoù
->
£¡_num
 >
PROBE_NUM
) {

421 
√tif
->
autoù
->
°©e
 = 
AUTOIP_STATE_ANNOUNCING
;

422 
√tif
->
autoù
->
£¡_num
 = 0;

423 
√tif
->
autoù
->
âw
 = 
ANNOUNCE_WAIT
 * 
AUTOIP_TICKS_PER_SECOND
;

424 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
,

425 ("autoù_tmr(): ch™gög sèãÅÿANNOUNCING: %"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

426 
	`ù4_addr1_16
(&
√tif
->
autoù
->
Œùaddr
), 
	`ù4_addr2_16
(&netif->autoip->llipaddr),

427 
	`ù4_addr3_16
(&
√tif
->
autoù
->
Œùaddr
), 
	`ù4_addr4_16
(&netif->autoip->llipaddr)));

429 
	`autoù_¨p_¥obe
(
√tif
);

430 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
,

432 
√tif
->
autoù
->
£¡_num
++;

434 
√tif
->
autoù
->
âw
 = (
u16_t
)((
	`LWIP_AUTOIP_RAND
(netif) %

435 ((
PROBE_MAX
 - 
PROBE_MIN
Ë* 
AUTOIP_TICKS_PER_SECOND
) ) +

436 
PROBE_MIN
 * 
AUTOIP_TICKS_PER_SECOND
);

441 
AUTOIP_STATE_ANNOUNCING
:

442 if(
√tif
->
autoù
->
âw
 > 0) {

443 
√tif
->
autoù
->
âw
--;

445 if(
√tif
->
autoù
->
£¡_num
 == 0) {

452 
	`autoù_böd
(
√tif
);

454 
	`autoù_¨p_™noun˚
(
√tif
);

455 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
,

458 
√tif
->
autoù
->
âw
 = 
ANNOUNCE_INTERVAL
 * 
AUTOIP_TICKS_PER_SECOND
;

459 
√tif
->
autoù
->
£¡_num
++;

461 if(
√tif
->
autoù
->
£¡_num
 >
ANNOUNCE_NUM
) {

462 
√tif
->
autoù
->
°©e
 = 
AUTOIP_STATE_BOUND
;

463 
√tif
->
autoù
->
£¡_num
 = 0;

464 
√tif
->
autoù
->
âw
 = 0;

465 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
,

466 ("autoù_tmr(): ch™gög sèãÅÿBOUND: %"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

467 
	`ù4_addr1_16
(&
√tif
->
autoù
->
Œùaddr
), 
	`ù4_addr2_16
(&netif->autoip->llipaddr),

468 
	`ù4_addr3_16
(&
√tif
->
autoù
->
Œùaddr
), 
	`ù4_addr4_16
(&netif->autoip->llipaddr)));

475 
√tif
 =Çëif->
√xt
;

477 
	}
}

486 
	$autoù_¨p_ª∂y
(
√tif
 *√tif, 
ëh¨p_hdr
 *
hdr
)

488 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
, ("autoip_arp_reply()\n"));

489 i‡((
√tif
->
autoù
 !
NULL
Ë&& (√tif->autoù->
°©e
 !
AUTOIP_STATE_OFF
)) {

495 
ù_addr_t
 
sùaddr
, 
dùaddr
;

496 
ëh_addr
 
√tiÁddr
;

497 
	`ETHADDR16_COPY
(
√tiÁddr
.
addr
, 
√tif
->
hwaddr
);

502 
	`IPADDR2_COPY
(&
sùaddr
, &
hdr
->sipaddr);

503 
	`IPADDR2_COPY
(&
dùaddr
, &
hdr
->dipaddr);

505 i‡((
√tif
->
autoù
->
°©e
 =
AUTOIP_STATE_PROBING
) ||

506 ((
√tif
->
autoù
->
°©e
 =
AUTOIP_STATE_ANNOUNCING
) &&

507 (
√tif
->
autoù
->
£¡_num
 == 0))) {

514 i‡((
	`ù_addr_cmp
(&
sùaddr
, &
√tif
->
autoù
->
Œùaddr
)) ||

515 (
	`ù_addr_cmp
(&
dùaddr
, &
√tif
->
autoù
->
Œùaddr
) &&

516 !
	`ëh_addr_cmp
(&
√tiÁddr
, &
hdr
->
shwaddr
))) {

517 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 
LWIP_DBG_LEVEL_WARNING
,

519 
	`autoù_ª°¨t
(
√tif
);

526 i‡(
	`ù_addr_cmp
(&
sùaddr
, &
√tif
->
autoù
->
Œùaddr
) &&

527 !
	`ëh_addr_cmp
(&
√tiÁddr
, &
hdr
->
shwaddr
)) {

528 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 
LWIP_DBG_LEVEL_WARNING
,

530 
	`autoù_h™dÀ_¨p_c⁄Êi˘
(
√tif
);

534 
	}
}

	@core/ipv4/icmp.c

42 
	~"lwù/›t.h
"

44 #i‡
LWIP_ICMP


46 
	~"lwù/icmp.h
"

47 
	~"lwù/öë_chksum.h
"

48 
	~"lwù/ù.h
"

49 
	~"lwù/def.h
"

50 
	~"lwù/°©s.h
"

51 
	~"lwù/¢mp.h
"

53 
	~<°rög.h
>

58 #i‚de‡
LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN


59 
	#LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
 1

	)

63 
	#ICMP_DEST_UNREACH_DATASIZE
 8

	)

65 
icmp_£nd_ª•⁄£
(
pbuf
 *
p
, 
u8_t
 
ty≥
, u8_à
code
);

77 
	$icmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

79 
u8_t
 
ty≥
;

80 #ifde‡
LWIP_DEBUG


81 
u8_t
 
code
;

83 
icmp_echo_hdr
 *
õcho
;

84 
ù_hdr
 *
ùhdr
;

85 
s16_t
 
hÀn
;

87 
	`ICMP_STATS_INC
(
icmp
.
ªcv
);

88 
	`¢mp_öc_icmpömsgs
();

91 
ùhdr
 = (
ù_hdr
 *)
p
->
∑ylﬂd
;

92 
hÀn
 = 
	`IPH_HL
(
ùhdr
) * 4;

93 i‡(
	`pbuf_hódî
(
p
, -
hÀn
Ë|| (p->
tŸ_Àn
 < (
u16_t
)*2)) {

94 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_öput: sh‹àICMP (%"
U16_F
" byãsËª˚ived\n", 
p
->
tŸ_Àn
));

95 
À√º
;

98 
ty≥
 = *((
u8_t
 *)
p
->
∑ylﬂd
);

99 #ifde‡
LWIP_DEBUG


100 
code
 = *(((
u8_t
 *)
p
->
∑ylﬂd
)+1);

102 
ty≥
) {

103 
ICMP_ER
:

107 
ICMP_ECHO
:

108 #i‡!
LWIP_MULTICAST_PING
 || !
LWIP_BROADCAST_PING


110 
ac˚±ed
 = 1;

111 #i‡!
LWIP_MULTICAST_PING


113 i‡(
	`ù_addr_ismu…iˇ°
(&
cuºít_ùhdr_de°
)) {

114 
ac˚±ed
 = 0;

117 #i‡!
LWIP_BROADCAST_PING


119 i‡(
	`ù_addr_isbrﬂdˇ°
(&
cuºít_ùhdr_de°
, 
öp
)) {

120 
ac˚±ed
 = 0;

124 i‡(!
ac˚±ed
) {

125 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input: NotÉchoingÅo multicast or broadcastÖings\n"));

126 
	`ICMP_STATS_INC
(
icmp
.
îr
);

127 
	`pbuf_‰ì
(
p
);

132 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input:Öing\n"));

133 i‡(
p
->
tŸ_Àn
 < (
icmp_echo_hdr
)) {

134 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input: bad ICMPÉchoÑeceived\n"));

135 
À√º
;

137 i‡(
	`öë_chksum_pbuf
(
p
) != 0) {

138 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input: checksum failed forÑeceived ICMPÉcho\n"));

139 
	`pbuf_‰ì
(
p
);

140 
	`ICMP_STATS_INC
(
icmp
.
chkîr
);

141 
	`¢mp_öc_icmpöîr‹s
();

144 #i‡
LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN


145 i‡(
	`pbuf_hódî
(
p
, (
PBUF_IP_HLEN
 + 
PBUF_LINK_HLEN
))) {

149 
pbuf
 *
r
;

151 i‡(
	`pbuf_hódî
(
p
, 
hÀn
)) {

152 
	`LWIP_ASSERT
("icmp_input: movingÖ->payloadÅo ip header failed\n", 0);

153 
memîr
;

156 
r
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 
p
->
tŸ_Àn
, 
PBUF_RAM
);

157 i‡(
r
 =
NULL
) {

158 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input:állocatingÇewÖbuf failed\n"));

159 
memîr
;

161 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold structÅhe ICMP header",

162 (
r
->
Àn
 >
hÀn
 + (
icmp_echo_hdr
)));

164 i‡(
	`pbuf_c›y
(
r
, 
p
Ë!
ERR_OK
) {

165 
	`LWIP_ASSERT
("icmp_input: copyingÅoÇewÖbuf failed\n", 0);

166 
memîr
;

168 
ùhdr
 = (
ù_hdr
 *)
r
->
∑ylﬂd
;

170 i‡(
	`pbuf_hódî
(
r
, -
hÀn
)) {

171 
	`LWIP_ASSERT
("icmp_input:Ñestoring originalÖ->payload failed\n", 0);

172 
memîr
;

175 
	`pbuf_‰ì
(
p
);

177 
p
 = 
r
;

180 i‡(
	`pbuf_hódî
(
p
, -(
s16_t
)(
PBUF_IP_HLEN
 + 
PBUF_LINK_HLEN
))) {

181 
	`LWIP_ASSERT
("icmp_input:Ñestoring originalÖ->payload failed\n", 0);

182 
memîr
;

189 
õcho
 = (
icmp_echo_hdr
 *)
p
->
∑ylﬂd
;

190 
	`ù_addr_c›y
(
ùhdr
->
§c
, *
	`ù_cuºít_de°_addr
());

191 
	`ù_addr_c›y
(
ùhdr
->
de°
, *
	`ù_cuºít_§c_addr
());

192 
	`ICMPH_TYPE_SET
(
õcho
, 
ICMP_ER
);

194 i‡(
õcho
->
chksum
 >
	`PP_HTONS
(0xffffU - (
ICMP_ECHO
 << 8))) {

195 
õcho
->
chksum
 +
	`PP_HTONS
(
ICMP_ECHO
 << 8) + 1;

197 
õcho
->
chksum
 +
	`PP_HTONS
(
ICMP_ECHO
 << 8);

201 
	`IPH_TTL_SET
(
ùhdr
, 
ICMP_TTL
);

202 
	`IPH_CHKSUM_SET
(
ùhdr
, 0);

203 #i‡
CHECKSUM_GEN_IP


204 
	`IPH_CHKSUM_SET
(
ùhdr
, 
	`öë_chksum
(ùhdr, 
IP_HLEN
));

207 
	`ICMP_STATS_INC
(
icmp
.
xmô
);

209 
	`¢mp_öc_icmpoutmsgs
();

211 
	`¢mp_öc_icmpouãch‹ïs
();

213 if(
	`pbuf_hódî
(
p
, 
hÀn
)) {

214 
	`LWIP_ASSERT
("Can't move over header inÖacket", 0);

216 
îr_t
 
ªt
;

218 
ªt
 = 
	`ù_ouçut_if
(
p
, 
	`ù_cuºít_de°_addr
(), 
IP_HDRINCL
,

219 
ICMP_TTL
, 0, 
IP_PROTO_ICMP
, 
öp
);

220 i‡(
ªt
 !
ERR_OK
) {

221 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_öput: ip_ouçut_i‡ªtu∫edá¿îr‹: %c.\n", 
ªt
));

226 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_öput: ICMPÅy≥ %"
S16_F
" code %"S16_F"Çot supported.\n",

227 (
s16_t
)
ty≥
, (s16_t)
code
));

228 
	`ICMP_STATS_INC
(
icmp
.
¥Ÿîr
);

229 
	`ICMP_STATS_INC
(
icmp
.
dr›
);

231 
	`pbuf_‰ì
(
p
);

233 
À√º
:

234 
	`pbuf_‰ì
(
p
);

235 
	`ICMP_STATS_INC
(
icmp
.
À√º
);

236 
	`¢mp_öc_icmpöîr‹s
();

238 #i‡
LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN


239 
memîr
:

240 
	`pbuf_‰ì
(
p
);

241 
	`ICMP_STATS_INC
(
icmp
.
îr
);

242 
	`¢mp_öc_icmpöîr‹s
();

245 
	}
}

257 
	$icmp_de°_uƒóch
(
pbuf
 *
p
, 
icmp_dur_ty≥
 
t
)

259 
	`icmp_£nd_ª•⁄£
(
p
, 
ICMP_DUR
, 
t
);

260 
	}
}

262 #i‡
IP_FORWARD
 || 
IP_REASSEMBLY


271 
	$icmp_time_ex˚eded
(
pbuf
 *
p
, 
icmp_ã_ty≥
 
t
)

273 
	`icmp_£nd_ª•⁄£
(
p
, 
ICMP_TE
, 
t
);

274 
	}
}

287 
	$icmp_£nd_ª•⁄£
(
pbuf
 *
p
, 
u8_t
 
ty≥
, u8_à
code
)

289 
pbuf
 *
q
;

290 
ù_hdr
 *
ùhdr
;

292 
icmp_echo_hdr
 *
icmphdr
;

293 
ù_addr_t
 
ùhdr_§c
;

296 
q
 = 
	`pbuf_Æloc
(
PBUF_IP
, (
icmp_echo_hdr
Ë+ 
IP_HLEN
 + 
ICMP_DEST_UNREACH_DATASIZE
,

297 
PBUF_RAM
);

298 i‡(
q
 =
NULL
) {

299 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_time_exceeded: failedÅoállocateÖbuf for ICMPÖacket.\n"));

302 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold icmp message",

303 (
q
->
Àn
 >((
icmp_echo_hdr
Ë+ 
IP_HLEN
 + 
ICMP_DEST_UNREACH_DATASIZE
)));

305 
ùhdr
 = (
ù_hdr
 *)
p
->
∑ylﬂd
;

306 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_time_exceeded from "));

307 
	`ù_addr_debug_¥öt
(
ICMP_DEBUG
, &(
ùhdr
->
§c
));

308 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("Åo "));

309 
	`ù_addr_debug_¥öt
(
ICMP_DEBUG
, &(
ùhdr
->
de°
));

310 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("\n"));

312 
icmphdr
 = (
icmp_echo_hdr
 *)
q
->
∑ylﬂd
;

313 
icmphdr
->
ty≥
 =Åype;

314 
icmphdr
->
code
 = code;

315 
icmphdr
->
id
 = 0;

316 
icmphdr
->
£qno
 = 0;

319 
	`SMEMCPY
((
u8_t
 *)
q
->
∑ylﬂd
 + (
icmp_echo_hdr
), (u8_à*)
p
->payload,

320 
IP_HLEN
 + 
ICMP_DEST_UNREACH_DATASIZE
);

323 
icmphdr
->
chksum
 = 0;

324 
icmphdr
->
chksum
 = 
	`öë_chksum
(icmphdr, 
q
->
Àn
);

325 
	`ICMP_STATS_INC
(
icmp
.
xmô
);

327 
	`¢mp_öc_icmpoutmsgs
();

329 
	`¢mp_öc_icmpouâimìxcds
();

330 
	`ù_addr_c›y
(
ùhdr_§c
, 
ùhdr
->
§c
);

331 
	`ù_ouçut
(
q
, 
NULL
, &
ùhdr_§c
, 
ICMP_TTL
, 0, 
IP_PROTO_ICMP
);

332 
	`pbuf_‰ì
(
q
);

333 
	}
}

	@core/ipv4/igmp.c

80 
	~"lwù/›t.h
"

82 #i‡
LWIP_IGMP


84 
	~"lwù/igmp.h
"

85 
	~"lwù/debug.h
"

86 
	~"lwù/def.h
"

87 
	~"lwù/mem.h
"

88 
	~"lwù/ù.h
"

89 
	~"lwù/öë_chksum.h
"

90 
	~"lwù/√tif.h
"

91 
	~"lwù/icmp.h
"

92 
	~"lwù/udp.h
"

93 
	~"lwù/t˝.h
"

94 
	~"lwù/°©s.h
"

96 
	~"°rög.h
"

101 
	#IGMP_TTL
 1

	)

102 
	#IGMP_MINLEN
 8

	)

103 
	#ROUTER_ALERT
 0x9404U

	)

104 
	#ROUTER_ALERTLEN
 4

	)

109 
	#IGMP_MEMB_QUERY
 0x11

	)

110 
	#IGMP_V1_MEMB_REPORT
 0x12

	)

111 
	#IGMP_V2_MEMB_REPORT
 0x16

	)

112 
	#IGMP_LEAVE_GROUP
 0x17

	)

115 
	#IGMP_GROUP_NON_MEMBER
 0

	)

116 
	#IGMP_GROUP_DELAYING_MEMBER
 1

	)

117 
	#IGMP_GROUP_IDLE_MEMBER
 2

	)

122 #ifde‡
PACK_STRUCT_USE_INCLUDES


123 
	~"¨ch/bp°ru˘.h
"

125 
PACK_STRUCT_BEGIN


126 
	sigmp_msg
 {

127 
PACK_STRUCT_FIELD
(
u8_t
 
igmp_msgty≥
);

128 
PACK_STRUCT_FIELD
(
u8_t
 
igmp_maxª•
);

129 
PACK_STRUCT_FIELD
(
u16_t
 
igmp_checksum
);

130 
PACK_STRUCT_FIELD
(
ù_addr_p_t
 
igmp_group_addªss
);

131 } 
	gPACK_STRUCT_STRUCT
;

132 
	gPACK_STRUCT_END


133 #ifde‡
PACK_STRUCT_USE_INCLUDES


134 
	~"¨ch/ï°ru˘.h
"

138 
igmp_group
 *
igmp_lookup_group
(
√tif
 *
iÂ
, 
ù_addr_t
 *
addr
);

139 
îr_t
 
igmp_ªmove_group
(
igmp_group
 *
group
);

140 
igmp_timeout
–
igmp_group
 *
group
);

141 
igmp_°¨t_timî
(
igmp_group
 *
group
, 
u8_t
 
max_time
);

142 
igmp_°›_timî
(
igmp_group
 *
group
);

143 
igmp_dñayög_membî
(
igmp_group
 *
group
, 
u8_t
 
maxª•
);

144 
îr_t
 
igmp_ù_ouçut_if
(
pbuf
 *
p
, 
ù_addr_t
 *
§c
, ip_addr_à*
de°
, 
√tif
 *netif);

145 
igmp_£nd
(
igmp_group
 *
group
, 
u8_t
 
ty≥
);

148 
igmp_group
* 
	gigmp_group_li°
;

149 
ù_addr_t
 
	gÆlsy°ems
;

150 
ù_addr_t
 
	gÆÃouãrs
;

157 
	$igmp_öô
()

159 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_init: initializing\n"));

161 
	`IP4_ADDR
(&
Ælsy°ems
, 224, 0, 0, 1);

162 
	`IP4_ADDR
(&
ÆÃouãrs
, 224, 0, 0, 2);

163 
	}
}

165 #ifde‡
LWIP_DEBUG


170 
	$igmp_dump_group_li°
()

172 
igmp_group
 *
group
 = 
igmp_group_li°
;

174 
group
 !
NULL
) {

175 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_dump_group_li°: [%"
U32_F
"] ", (
u32_t
)(
group
->
group_°©e
)));

176 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &
group
->
group_addªss
);

177 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" o¿i‡%p\n", 
group
->
√tif
));

178 
group
 = group->
√xt
;

180 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("\n"));

181 
	}
}

183 
	#igmp_dump_group_li°
()

	)

191 
îr_t


192 
	$igmp_°¨t
(
√tif
 *netif)

194 
igmp_group
* 
group
;

196 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_°¨t: sèπög IGMPÖro˚ssög o¿i‡%p\n", 
√tif
));

198 
group
 = 
	`igmp_lookup_group
(
√tif
, &
Ælsy°ems
);

200 i‡(
group
 !
NULL
) {

201 
group
->
group_°©e
 = 
IGMP_GROUP_IDLE_MEMBER
;

202 
group
->
u£
++;

205 i‡(
√tif
->
igmp_mac_fûãr
 !
NULL
) {

206 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_start: igmp_mac_filter(ADD "));

207 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &
Ælsy°ems
);

208 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("Ë⁄ i‡%p\n", 
√tif
));

209 
√tif
->
	`igmp_mac_fûãr
“ëif, &
Ælsy°ems
, 
IGMP_ADD_MAC_FILTER
);

212  
ERR_OK
;

215  
ERR_MEM
;

216 
	}
}

223 
îr_t


224 
	$igmp_°›
(
√tif
 *netif)

226 
igmp_group
 *
group
 = 
igmp_group_li°
;

227 
igmp_group
 *
¥ev
 = 
NULL
;

228 
igmp_group
 *
√xt
;

231 
group
 !
NULL
) {

232 
√xt
 = 
group
->next;

234 i‡(
group
->
√tif
 ==Çetif) {

236 i‡(
group
 =
igmp_group_li°
) {

237 
igmp_group_li°
 = 
√xt
;

240 i‡(
¥ev
 !
NULL
) {

241 
¥ev
->
√xt
 =Çext;

244 i‡(
√tif
->
igmp_mac_fûãr
 !
NULL
) {

245 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_stop: igmp_mac_filter(DEL "));

246 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &
group
->
group_addªss
);

247 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("Ë⁄ i‡%p\n", 
√tif
));

248 
√tif
->
	`igmp_mac_fûãr
“ëif, &(
group
->
group_addªss
), 
IGMP_DEL_MAC_FILTER
);

251 
	`memp_‰ì
(
MEMP_IGMP_GROUP
, 
group
);

254 
¥ev
 = 
group
;

257 
group
 = 
√xt
;

259  
ERR_OK
;

260 
	}
}

268 
	$igmp_ªp‹t_groups
(
√tif
 *netif)

270 
igmp_group
 *
group
 = 
igmp_group_li°
;

272 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_ªp‹t_groups: sídög IGMPÑï‹t†⁄ i‡%p\n", 
√tif
));

274 
group
 !
NULL
) {

275 i‡(
group
->
√tif
 ==Çetif) {

276 
	`igmp_dñayög_membî
(
group
, 
IGMP_JOIN_DELAYING_MEMBER_TMR
);

278 
group
 = group->
√xt
;

280 
	}
}

290 
igmp_group
 *

291 
	$igmp_lookf‹_group
(
√tif
 *
iÂ
, 
ù_addr_t
 *
addr
)

293 
igmp_group
 *
group
 = 
igmp_group_li°
;

295 
group
 !
NULL
) {

296 i‡((
group
->
√tif
 =
iÂ
Ë&& (
	`ù_addr_cmp
(&(group->
group_addªss
), 
addr
))) {

297  
group
;

299 
group
 = group->
√xt
;

305  
NULL
;

306 
	}
}

316 
igmp_group
 *

317 
	$igmp_lookup_group
(
√tif
 *
iÂ
, 
ù_addr_t
 *
addr
)

319 
igmp_group
 *
group
 = 
igmp_group_li°
;

322 
group
 = 
	`igmp_lookf‹_group
(
iÂ
, 
addr
);

323 i‡(
group
 !
NULL
) {

325  
group
;

329 
group
 = (
igmp_group
 *)
	`memp_mÆloc
(
MEMP_IGMP_GROUP
);

330 i‡(
group
 !
NULL
) {

331 
group
->
√tif
 = 
iÂ
;

332 
	`ù_addr_£t
(&(
group
->
group_addªss
), 
addr
);

333 
group
->
timî
 = 0;

334 
group
->
group_°©e
 = 
IGMP_GROUP_NON_MEMBER
;

335 
group
->
œ°_ªp‹ãr_Êag
 = 0;

336 
group
->
u£
 = 0;

337 
group
->
√xt
 = 
igmp_group_li°
;

339 
igmp_group_li°
 = 
group
;

342 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_lookup_group: %ßŒoˇãdáÇew grou∞wôháddªs†", (
group
?"":"impossibleÅo ")));

343 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
addr
);

344 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" o¿i‡%p\n", 
iÂ
));

346  
group
;

347 
	}
}

355 
îr_t


356 
	$igmp_ªmove_group
(
igmp_group
 *
group
)

358 
îr_t
 
îr
 = 
ERR_OK
;

361 i‡(
igmp_group_li°
 =
group
) {

362 
igmp_group_li°
 = 
group
->
√xt
;

365 
igmp_group
 *
tmpGroup
;

366 
tmpGroup
 = 
igmp_group_li°
;ÅmpGrou∞!
NULL
;ÅmpGrou∞tmpGroup->
√xt
) {

367 i‡(
tmpGroup
->
√xt
 =
group
) {

368 
tmpGroup
->
√xt
 = 
group
->next;

373 i‡(
tmpGroup
 =
NULL
)

374 
îr
 = 
ERR_ARG
;

377 
	`memp_‰ì
(
MEMP_IGMP_GROUP
, 
group
);

379  
îr
;

380 
	}
}

390 
	$igmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
, 
ù_addr_t
 *
de°
)

392 
ù_hdr
 * 
ùhdr
;

393 
igmp_msg
* 
igmp
;

394 
igmp_group
* 
group
;

395 
igmp_group
* 
grou¥ef
;

397 
	`IGMP_STATS_INC
(
igmp
.
ªcv
);

400 
ùhdr
 = (
ù_hdr
 *)
p
->
∑ylﬂd
;

401 i‡(
	`pbuf_hódî
(
p
, -(
s16_t
)(
	`IPH_HL
(
ùhdr
Ë* 4)Ë|| (p->
Àn
 < 
IGMP_MINLEN
)) {

402 
	`pbuf_‰ì
(
p
);

403 
	`IGMP_STATS_INC
(
igmp
.
À√º
);

404 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input:ÜengthÉrror\n"));

408 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: message from "));

409 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &(
ùhdr
->
§c
));

410 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("Åoáddress "));

411 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &(
ùhdr
->
de°
));

412 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" o¿i‡%p\n", 
öp
));

415 
igmp
 = (
igmp_msg
 *)
p
->
∑ylﬂd
;

416 i‡(
	`öë_chksum
(
igmp
, 
p
->
Àn
)) {

417 
	`pbuf_‰ì
(
p
);

418 
	`IGMP_STATS_INC
(
igmp
.
chkîr
);

419 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: checksumÉrror\n"));

424 
group
 = 
	`igmp_lookf‹_group
(
öp
, 
de°
);

427 i‡(!
group
) {

428 
	`pbuf_‰ì
(
p
);

429 
	`IGMP_STATS_INC
(
igmp
.
dr›
);

430 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: IGMP frameÇot for us\n"));

435 
igmp
->
igmp_msgty≥
) {

436 
IGMP_MEMB_QUERY
: {

438 i‡((
	`ù_addr_cmp
(
de°
, &
Ælsy°ems
)Ë&& 
	`ù_addr_ißny
(&
igmp
->
igmp_group_addªss
)) {

440 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_öput: GíîÆ IGMP_MEMB_QUERY o¿\"ALL SYSTEMS\"áddªs†(224.0.0.1Ë[igmp_maxª•=%i]\n", ()(
igmp
->
igmp_maxª•
)));

442 i‡(
igmp
->
igmp_maxª•
 == 0) {

443 
	`IGMP_STATS_INC
(
igmp
.
rx_v1
);

444 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: gotánáll hosts query withÅime== 0 -Åhis is V1ándÇot implemented -Åreatás v2\n"));

445 
igmp
->
igmp_maxª•
 = 
IGMP_V1_DELAYING_MEMBER_TMR
;

447 
	`IGMP_STATS_INC
(
igmp
.
rx_gíîÆ
);

450 
grou¥ef
 = 
igmp_group_li°
;

451 
grou¥ef
) {

453 i‡((
grou¥ef
->
√tif
 =
öp
Ë&& (!(
	`ù_addr_cmp
(&(grou¥ef->
group_addªss
), &
Ælsy°ems
)))) {

454 
	`igmp_dñayög_membî
(
grou¥ef
, 
igmp
->
igmp_maxª•
);

456 
grou¥ef
 = grou¥ef->
√xt
;

460 i‡(!
	`ù_addr_ißny
(&
igmp
->
igmp_group_addªss
)) {

461 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: IGMP_MEMB_QUERYÅoá specific group "));

462 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &
igmp
->
igmp_group_addªss
);

463 i‡(
	`ù_addr_cmp
(
de°
, &
Ælsy°ems
)) {

464 
ù_addr_t
 
grou∑ddr
;

465 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" usög \"ALL SYSTEMS\"áddªs†(224.0.0.1Ë[igmp_maxª•=%i]\n", ()(
igmp
->
igmp_maxª•
)));

467 
	`ù_addr_c›y
(
grou∑ddr
, 
igmp
->
igmp_group_addªss
);

468 
group
 = 
	`igmp_lookf‹_group
(
öp
, &
grou∑ddr
);

470 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" wôhÅhêgrou∞addªs†a†de°ö©i⁄ [igmp_maxª•=%i]\n", ()(
igmp
->
igmp_maxª•
)));

473 i‡(
group
 !
NULL
) {

474 
	`IGMP_STATS_INC
(
igmp
.
rx_group
);

475 
	`igmp_dñayög_membî
(
group
, 
igmp
->
igmp_maxª•
);

477 
	`IGMP_STATS_INC
(
igmp
.
dr›
);

480 
	`IGMP_STATS_INC
(
igmp
.
¥Ÿîr
);

485 
IGMP_V2_MEMB_REPORT
: {

486 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: IGMP_V2_MEMB_REPORT\n"));

487 
	`IGMP_STATS_INC
(
igmp
.
rx_ªp‹t
);

488 i‡(
group
->
group_°©e
 =
IGMP_GROUP_DELAYING_MEMBER
) {

490 
group
->
timî
 = 0;

491 
group
->
group_°©e
 = 
IGMP_GROUP_IDLE_MEMBER
;

492 
group
->
œ°_ªp‹ãr_Êag
 = 0;

497 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: unexpected msg %d in state %d on group %p on if %p\n",

498 
igmp
->
igmp_msgty≥
, 
group
->
group_°©e
, &group, group->
√tif
));

499 
	`IGMP_STATS_INC
(
igmp
.
¥Ÿîr
);

504 
	`pbuf_‰ì
(
p
);

506 
	}
}

515 
îr_t


516 
	$igmp_joögroup
(
ù_addr_t
 *
iÁddr
, ip_addr_à*
grou∑ddr
)

518 
îr_t
 
îr
 = 
ERR_VAL
;

519 
igmp_group
 *
group
;

520 
√tif
 *netif;

523 
	`LWIP_ERROR
("igmp_joögroup:áâem±ÅÿjoöÇ⁄-mu…iˇ°áddªss", 
	`ù_addr_ismu…iˇ°
(
grou∑ddr
),  
ERR_VAL
;);

524 
	`LWIP_ERROR
("igmp_joögroup:áâem±ÅÿjoöáŒsy°em†addªss", (!
	`ù_addr_cmp
(
grou∑ddr
, &
Ælsy°ems
)),  
ERR_VAL
;);

527 
√tif
 = 
√tif_li°
;

528 
√tif
 !
NULL
) {

530 i‡((
√tif
->
Êags
 & 
NETIF_FLAG_IGMP
Ë&& ((
	`ù_addr_ißny
(
iÁddr
Ë|| 
	`ù_addr_cmp
(&“ëif->
ù_addr
), ifaddr)))) {

532 
group
 = 
	`igmp_lookup_group
(
√tif
, 
grou∑ddr
);

534 i‡(
group
 !
NULL
) {

536 i‡(
group
->
group_°©e
 !
IGMP_GROUP_NON_MEMBER
) {

537 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_joingroup: joinÅo groupÇot in state IGMP_GROUP_NON_MEMBER\n"));

540 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_joingroup: joinÅoÇew group: "));

541 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
grou∑ddr
);

542 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("\n"));

545 i‡((
group
->
u£
==0Ë&& (
√tif
->
igmp_mac_fûãr
 !
NULL
)) {

546 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_joingroup: igmp_mac_filter(ADD "));

547 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
grou∑ddr
);

548 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("Ë⁄ i‡%p\n", 
√tif
));

549 
√tif
->
	`igmp_mac_fûãr
“ëif, 
grou∑ddr
, 
IGMP_ADD_MAC_FILTER
);

552 
	`IGMP_STATS_INC
(
igmp
.
tx_joö
);

553 
	`igmp_£nd
(
group
, 
IGMP_V2_MEMB_REPORT
);

555 
	`igmp_°¨t_timî
(
group
, 
IGMP_JOIN_DELAYING_MEMBER_TMR
);

558 
group
->
group_°©e
 = 
IGMP_GROUP_DELAYING_MEMBER
;

561 
group
->
u£
++;

563 
îr
 = 
ERR_OK
;

567 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_joingroup: NotÉnought memoryÅo joinÅo group\n"));

568  
ERR_MEM
;

572 
√tif
 =Çëif->
√xt
;

575  
îr
;

576 
	}
}

585 
îr_t


586 
	$igmp_Àavegroup
(
ù_addr_t
 *
iÁddr
, ip_addr_à*
grou∑ddr
)

588 
îr_t
 
îr
 = 
ERR_VAL
;

589 
igmp_group
 *
group
;

590 
√tif
 *netif;

593 
	`LWIP_ERROR
("igmp_Àavegroup:áâem±ÅÿÀavên⁄-mu…iˇ°áddªss", 
	`ù_addr_ismu…iˇ°
(
grou∑ddr
),  
ERR_VAL
;);

594 
	`LWIP_ERROR
("igmp_Àavegroup:áâem±ÅÿÀavêÆlsy°em†addªss", (!
	`ù_addr_cmp
(
grou∑ddr
, &
Ælsy°ems
)),  
ERR_VAL
;);

597 
√tif
 = 
√tif_li°
;

598 
√tif
 !
NULL
) {

600 i‡((
√tif
->
Êags
 & 
NETIF_FLAG_IGMP
Ë&& ((
	`ù_addr_ißny
(
iÁddr
Ë|| 
	`ù_addr_cmp
(&“ëif->
ù_addr
), ifaddr)))) {

602 
group
 = 
	`igmp_lookf‹_group
(
√tif
, 
grou∑ddr
);

604 i‡(
group
 !
NULL
) {

606 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_leavegroup: Leaving group: "));

607 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
grou∑ddr
);

608 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("\n"));

611 i‡(
group
->
u£
 <= 1) {

613 i‡(
group
->
œ°_ªp‹ãr_Êag
) {

614 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_leavegroup: sendingÜeaving group\n"));

615 
	`IGMP_STATS_INC
(
igmp
.
tx_Àave
);

616 
	`igmp_£nd
(
group
, 
IGMP_LEAVE_GROUP
);

620 i‡(
√tif
->
igmp_mac_fûãr
 !
NULL
) {

621 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_leavegroup: igmp_mac_filter(DEL "));

622 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
grou∑ddr
);

623 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("Ë⁄ i‡%p\n", 
√tif
));

624 
√tif
->
	`igmp_mac_fûãr
“ëif, 
grou∑ddr
, 
IGMP_DEL_MAC_FILTER
);

627 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_leavegroup:Ñemove group: "));

628 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
grou∑ddr
);

629 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("\n"));

632 
	`igmp_ªmove_group
(
group
);

635 
group
->
u£
--;

638 
îr
 = 
ERR_OK
;

641 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_leavegroup:Çot member of group\n"));

645 
√tif
 =Çëif->
√xt
;

648  
îr
;

649 
	}
}

656 
	$igmp_tmr
()

658 
igmp_group
 *
group
 = 
igmp_group_li°
;

660 
group
 !
NULL
) {

661 i‡(
group
->
timî
 > 0) {

662 
group
->
timî
--;

663 i‡(
group
->
timî
 == 0) {

664 
	`igmp_timeout
(
group
);

667 
group
 = group->
√xt
;

669 
	}
}

678 
	$igmp_timeout
(
igmp_group
 *
group
)

681 i‡(
group
->
group_°©e
 =
IGMP_GROUP_DELAYING_MEMBER
) {

682 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_timeout:Ñeport membership for group witháddress "));

683 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &(
group
->
group_addªss
));

684 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" o¿i‡%p\n", 
group
->
√tif
));

686 
	`IGMP_STATS_INC
(
igmp
.
tx_ªp‹t
);

687 
	`igmp_£nd
(
group
, 
IGMP_V2_MEMB_REPORT
);

689 
	}
}

699 
	$igmp_°¨t_timî
(
igmp_group
 *
group
, 
u8_t
 
max_time
)

702 i‡(
max_time
 == 0) {

703 
max_time
 = 1;

706 
group
->
timî
 = (
	`LWIP_RAND
(Ë% (
max_time
 - 1)) + 1;

707 
	}
}

715 
	$igmp_°›_timî
(
igmp_group
 *
group
)

717 
group
->
timî
 = 0;

718 
	}
}

727 
	$igmp_dñayög_membî
(
igmp_group
 *
group
, 
u8_t
 
maxª•
)

729 i‡((
group
->
group_°©e
 =
IGMP_GROUP_IDLE_MEMBER
) ||

730 ((
group
->
group_°©e
 =
IGMP_GROUP_DELAYING_MEMBER
) &&

731 ((
group
->
timî
 =0Ë|| (
maxª•
 < group->timer)))) {

732 
	`igmp_°¨t_timî
(
group
, 
maxª•
);

733 
group
->
group_°©e
 = 
IGMP_GROUP_DELAYING_MEMBER
;

735 
	}
}

756 
îr_t


757 
	$igmp_ù_ouçut_if
(
pbuf
 *
p
, 
ù_addr_t
 *
§c
, ip_addr_à*
de°
, 
√tif
 *netif)

760 
u16_t
 
ø
[2];

761 
ø
[0] = 
	`PP_HTONS
(
ROUTER_ALERT
);

762 
ø
[1] = 0x0000;

763 
	`IGMP_STATS_INC
(
igmp
.
xmô
);

764  
	`ù_ouçut_if_›t
(
p
, 
§c
, 
de°
, 
IGMP_TTL
, 0, 
IP_PROTO_IGMP
, 
√tif
, 
ø
, 
ROUTER_ALERTLEN
);

765 
	}
}

774 
	$igmp_£nd
(
igmp_group
 *
group
, 
u8_t
 
ty≥
)

776 
pbuf
* 
p
 = 
NULL
;

777 
igmp_msg
* 
igmp
 = 
NULL
;

778 
ù_addr_t
 
§c
 = *
IP_ADDR_ANY
;

779 
ù_addr_t
* 
de°
 = 
NULL
;

782 
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
IGMP_MINLEN
, 
PBUF_RAM
);

784 i‡(
p
) {

785 
igmp
 = (
igmp_msg
 *)
p
->
∑ylﬂd
;

786 
	`LWIP_ASSERT
("igmp_send: checkÅhat firstÖbuf can hold struct igmp_msg",

787 (
p
->
Àn
 >(
igmp_msg
)));

788 
	`ù_addr_c›y
(
§c
, 
group
->
√tif
->
ù_addr
);

790 i‡(
ty≥
 =
IGMP_V2_MEMB_REPORT
) {

791 
de°
 = &(
group
->
group_addªss
);

792 
	`ù_addr_c›y
(
igmp
->
igmp_group_addªss
, 
group
->
group_addªss
);

793 
group
->
œ°_ªp‹ãr_Êag
 = 1;

795 i‡(
ty≥
 =
IGMP_LEAVE_GROUP
) {

796 
de°
 = &
ÆÃouãrs
;

797 
	`ù_addr_c›y
(
igmp
->
igmp_group_addªss
, 
group
->
group_addªss
);

801 i‡((
ty≥
 =
IGMP_V2_MEMB_REPORT
Ë|| (ty≥ =
IGMP_LEAVE_GROUP
)) {

802 
igmp
->
igmp_msgty≥
 = 
ty≥
;

803 
igmp
->
igmp_maxª•
 = 0;

804 
igmp
->
igmp_checksum
 = 0;

805 
igmp
->
igmp_checksum
 = 
	`öë_chksum
(igmp, 
IGMP_MINLEN
);

807 
	`igmp_ù_ouçut_if
(
p
, &
§c
, 
de°
, 
group
->
√tif
);

810 
	`pbuf_‰ì
(
p
);

812 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_send:ÇotÉnough memory for igmp_send\n"));

813 
	`IGMP_STATS_INC
(
igmp
.
memîr
);

815 
	}
}

	@core/ipv4/inet.c

39 
	~"lwù/›t.h
"

41 
	~"lwù/öë.h
"

	@core/ipv4/inet_chksum.c

39 
	~"lwù/›t.h
"

41 
	~"lwù/öë_chksum.h
"

42 
	~"lwù/def.h
"

44 
	~<°ddef.h
>

45 
	~<°rög.h
>

58 #i‚de‡
LWIP_CHKSUM


59 
	#LWIP_CHKSUM
 
lwù_°™d¨d_chksum


	)

60 #i‚de‡
LWIP_CHKSUM_ALGORITHM


61 
	#LWIP_CHKSUM_ALGORITHM
 2

	)

65 #i‚de‡
LWIP_CHKSUM_ALGORITHM


66 
	#LWIP_CHKSUM_ALGORITHM
 0

	)

69 #i‡(
LWIP_CHKSUM_ALGORITHM
 == 1)

80 
u16_t


81 
	$lwù_°™d¨d_chksum
(*
d©≠å
, 
u16_t
 
Àn
)

83 
u32_t
 
acc
;

84 
u16_t
 
§c
;

85 
u8_t
 *
o˘ë±r
;

87 
acc
 = 0;

89 
o˘ë±r
 = (
u8_t
*)
d©≠å
;

90 
Àn
 > 1) {

93 
§c
 = (*
o˘ë±r
) << 8;

94 
o˘ë±r
++;

96 
§c
 |(*
o˘ë±r
);

97 
o˘ë±r
++;

98 
acc
 +
§c
;

99 
Àn
 -= 2;

101 i‡(
Àn
 > 0) {

103 
§c
 = (*
o˘ë±r
) << 8;

104 
acc
 +
§c
;

107 
acc
 = (acc >> 16) + (acc & 0x0000ffffUL);

108 i‡((
acc
 & 0xffff0000UL) != 0) {

109 
acc
 = (acc >> 16) + (acc & 0x0000ffffUL);

114  
	`ht⁄s
((
u16_t
)
acc
);

115 
	}
}

118 #i‡(
LWIP_CHKSUM_ALGORITHM
 == 2)

134 
u16_t


135 
	$lwù_°™d¨d_chksum
(*
d©≠å
, 
Àn
)

137 
u8_t
 *
pb
 = (u8_à*)
d©≠å
;

138 
u16_t
 *
ps
, 
t
 = 0;

139 
u32_t
 
sum
 = 0;

140 
odd
 = ((
mem_±r_t
)
pb
 & 1);

143 i‡(
odd
 && 
Àn
 > 0) {

144 ((
u8_t
 *)&
t
)[1] = *
pb
++;

145 
Àn
--;

149 
ps
 = (
u16_t
 *)(*)
pb
;

150 
Àn
 > 1) {

151 
sum
 +*
ps
++;

152 
Àn
 -= 2;

156 i‡(
Àn
 > 0) {

157 ((
u8_t
 *)&
t
)[0] = *(u8_à*)
ps
;

161 
sum
 +
t
;

165 
sum
 = 
	`FOLD_U32T
(sum);

166 
sum
 = 
	`FOLD_U32T
(sum);

169 i‡(
odd
) {

170 
sum
 = 
	`SWAP_BYTES_IN_WORD
(sum);

173  (
u16_t
)
sum
;

174 
	}
}

177 #i‡(
LWIP_CHKSUM_ALGORITHM
 == 3)

190 
u16_t


191 
	$lwù_°™d¨d_chksum
(*
d©≠å
, 
Àn
)

193 
u8_t
 *
pb
 = (u8_à*)
d©≠å
;

194 
u16_t
 *
ps
, 
t
 = 0;

195 
u32_t
 *
∂
;

196 
u32_t
 
sum
 = 0, 
tmp
;

198 
odd
 = ((
mem_±r_t
)
pb
 & 1);

200 i‡(
odd
 && 
Àn
 > 0) {

201 ((
u8_t
 *)&
t
)[1] = *
pb
++;

202 
Àn
--;

205 
ps
 = (
u16_t
 *)
pb
;

207 i‡(((
mem_±r_t
)
ps
 & 3Ë&& 
Àn
 > 1) {

208 
sum
 +*
ps
++;

209 
Àn
 -= 2;

212 
∂
 = (
u32_t
 *)
ps
;

214 
Àn
 > 7) {

215 
tmp
 = 
sum
 + *
∂
++;

216 i‡(
tmp
 < 
sum
) {

217 
tmp
++;

220 
sum
 = 
tmp
 + *
∂
++;

221 i‡(
sum
 < 
tmp
) {

222 
sum
++;

225 
Àn
 -= 8;

229 
sum
 = 
	`FOLD_U32T
(sum);

231 
ps
 = (
u16_t
 *)
∂
;

234 
Àn
 > 1) {

235 
sum
 +*
ps
++;

236 
Àn
 -= 2;

240 i‡(
Àn
 > 0) {

241 ((
u8_t
 *)&
t
)[0] = *(u8_à*)
ps
;

244 
sum
 +
t
;

248 
sum
 = 
	`FOLD_U32T
(sum);

249 
sum
 = 
	`FOLD_U32T
(sum);

251 i‡(
odd
) {

252 
sum
 = 
	`SWAP_BYTES_IN_WORD
(sum);

255  (
u16_t
)
sum
;

256 
	}
}

271 
u16_t


272 
	$öë_chksum_p£udo
(
pbuf
 *
p
,

273 
ù_addr_t
 *
§c
, ip_addr_à*
de°
,

274 
u8_t
 
¥Ÿo
, 
u16_t
 
¥Ÿo_Àn
)

276 
u32_t
 
acc
;

277 
u32_t
 
addr
;

278 
pbuf
 *
q
;

279 
u8_t
 
sw≠≥d
;

281 
acc
 = 0;

282 
sw≠≥d
 = 0;

284 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

285 
	`LWIP_DEBUGF
(
INET_DEBUG
, ("inet_chksum_pseudo(): checksummingÖbuf %p (hasÇext %p) \n",

286 (*)
q
, (*)q->
√xt
));

287 
acc
 +
	`LWIP_CHKSUM
(
q
->
∑ylﬂd
, q->
Àn
);

291 
acc
 = 
	`FOLD_U32T
(acc);

292 i‡(
q
->
Àn
 % 2 != 0) {

293 
sw≠≥d
 = 1 - swapped;

294 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

299 i‡(
sw≠≥d
) {

300 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

302 
addr
 = 
	`ù4_addr_gë_u32
(
§c
);

303 
acc
 +(
addr
 & 0xffffUL);

304 
acc
 +((
addr
 >> 16) & 0xffffUL);

305 
addr
 = 
	`ù4_addr_gë_u32
(
de°
);

306 
acc
 +(
addr
 & 0xffffUL);

307 
acc
 +((
addr
 >> 16) & 0xffffUL);

308 
acc
 +(
u32_t
)
	`ht⁄s
((
u16_t
)
¥Ÿo
);

309 
acc
 +(
u32_t
)
	`ht⁄s
(
¥Ÿo_Àn
);

313 
acc
 = 
	`FOLD_U32T
(acc);

314 
acc
 = 
	`FOLD_U32T
(acc);

315 
	`LWIP_DEBUGF
(
INET_DEBUG
, ("öë_chksum_p£udo():Öbu‡chaöÜwù_chksum()=%"
X32_F
"\n", 
acc
));

316  (
u16_t
)~(
acc
 & 0xffffUL);

317 
	}
}

331 
u16_t


332 
	$öë_chksum_p£udo_∑πül
(
pbuf
 *
p
,

333 
ù_addr_t
 *
§c
, ip_addr_à*
de°
,

334 
u8_t
 
¥Ÿo
, 
u16_t
 
¥Ÿo_Àn
, u16_à
chksum_Àn
)

336 
u32_t
 
acc
;

337 
u32_t
 
addr
;

338 
pbuf
 *
q
;

339 
u8_t
 
sw≠≥d
;

340 
u16_t
 
chkÀn
;

342 
acc
 = 0;

343 
sw≠≥d
 = 0;

345 
q
 = 
p
; (q !
NULL
Ë&& (
chksum_Àn
 > 0); q = q->
√xt
) {

346 
	`LWIP_DEBUGF
(
INET_DEBUG
, ("inet_chksum_pseudo(): checksummingÖbuf %p (hasÇext %p) \n",

347 (*)
q
, (*)q->
√xt
));

348 
chkÀn
 = 
q
->
Àn
;

349 i‡(
chkÀn
 > 
chksum_Àn
) {

350 
chkÀn
 = 
chksum_Àn
;

352 
acc
 +
	`LWIP_CHKSUM
(
q
->
∑ylﬂd
, 
chkÀn
);

353 
chksum_Àn
 -
chkÀn
;

354 
	`LWIP_ASSERT
("dñëême", 
chksum_Àn
 < 0x7fff);

357 
acc
 = 
	`FOLD_U32T
(acc);

358 i‡(
q
->
Àn
 % 2 != 0) {

359 
sw≠≥d
 = 1 - swapped;

360 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

365 i‡(
sw≠≥d
) {

366 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

368 
addr
 = 
	`ù4_addr_gë_u32
(
§c
);

369 
acc
 +(
addr
 & 0xffffUL);

370 
acc
 +((
addr
 >> 16) & 0xffffUL);

371 
addr
 = 
	`ù4_addr_gë_u32
(
de°
);

372 
acc
 +(
addr
 & 0xffffUL);

373 
acc
 +((
addr
 >> 16) & 0xffffUL);

374 
acc
 +(
u32_t
)
	`ht⁄s
((
u16_t
)
¥Ÿo
);

375 
acc
 +(
u32_t
)
	`ht⁄s
(
¥Ÿo_Àn
);

379 
acc
 = 
	`FOLD_U32T
(acc);

380 
acc
 = 
	`FOLD_U32T
(acc);

381 
	`LWIP_DEBUGF
(
INET_DEBUG
, ("öë_chksum_p£udo():Öbu‡chaöÜwù_chksum()=%"
X32_F
"\n", 
acc
));

382  (
u16_t
)~(
acc
 & 0xffffUL);

383 
	}
}

395 
u16_t


396 
	$öë_chksum
(*
d©≠å
, 
u16_t
 
Àn
)

398  ~
	`LWIP_CHKSUM
(
d©≠å
, 
Àn
);

399 
	}
}

408 
u16_t


409 
	$öë_chksum_pbuf
(
pbuf
 *
p
)

411 
u32_t
 
acc
;

412 
pbuf
 *
q
;

413 
u8_t
 
sw≠≥d
;

415 
acc
 = 0;

416 
sw≠≥d
 = 0;

417 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

418 
acc
 +
	`LWIP_CHKSUM
(
q
->
∑ylﬂd
, q->
Àn
);

419 
acc
 = 
	`FOLD_U32T
(acc);

420 i‡(
q
->
Àn
 % 2 != 0) {

421 
sw≠≥d
 = 1 - swapped;

422 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

426 i‡(
sw≠≥d
) {

427 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

429  (
u16_t
)~(
acc
 & 0xffffUL);

430 
	}
}

439 #i‡(
LWIP_CHKSUM_COPY_ALGORITHM
 == 1)

444 
u16_t


445 
	$lwù_chksum_c›y
(*
d°
, c⁄° *
§c
, 
u16_t
 
Àn
)

447 
	`MEMCPY
(
d°
, 
§c
, 
Àn
);

448  
	`LWIP_CHKSUM
(
d°
, 
Àn
);

449 
	}
}

	@core/ipv4/ip.c

41 
	~"lwù/›t.h
"

42 
	~"lwù/ù.h
"

43 
	~"lwù/def.h
"

44 
	~"lwù/mem.h
"

45 
	~"lwù/ù_‰ag.h
"

46 
	~"lwù/öë_chksum.h
"

47 
	~"lwù/√tif.h
"

48 
	~"lwù/icmp.h
"

49 
	~"lwù/igmp.h
"

50 
	~"lwù/øw.h
"

51 
	~"lwù/udp.h
"

52 
	~"lwù/t˝_im∂.h
"

53 
	~"lwù/¢mp.h
"

54 
	~"lwù/dh˝.h
"

55 
	~"lwù/autoù.h
"

56 
	~"lwù/°©s.h
"

57 
	~"¨ch/≥rf.h
"

59 
	~<°rög.h
>

63 #i‚de‡
LWIP_INLINE_IP_CHKSUM


64 
	#LWIP_INLINE_IP_CHKSUM
 1

	)

66 #i‡
LWIP_INLINE_IP_CHKSUM
 && 
CHECKSUM_GEN_IP


67 
	#CHECKSUM_GEN_IP_INLINE
 1

	)

69 
	#CHECKSUM_GEN_IP_INLINE
 0

	)

72 #i‡
LWIP_DHCP
 || 
deföed
(
LWIP_IP_ACCEPT_UDP_PORT
)

73 
	#IP_ACCEPT_LINK_LAYER_ADDRESSING
 1

	)

80 #i‡
LWIP_DHCP
 && 
deföed
(
LWIP_IP_ACCEPT_UDP_PORT
)

82 
	#IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT
(
p‹t
Ë((’‹tË=
	`PP_NTOHS
(
DHCP_CLIENT_PORT
)) \

83 || (
	`LWIP_IP_ACCEPT_UDP_PORT
(
p‹t
)))

	)

84 #ñi‡
deföed
(
LWIP_IP_ACCEPT_UDP_PORT
)

86 
	#IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT
(
p‹t
Ë(
	`LWIP_IP_ACCEPT_UDP_PORT
(
d°_p‹t
))

	)

89 
	#IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT
(
p‹t
Ë(’‹tË=
	`PP_NTOHS
(
DHCP_CLIENT_PORT
))

	)

93 
	#IP_ACCEPT_LINK_LAYER_ADDRESSING
 0

	)

100 
√tif
 *
	gcuºít_√tif
;

105 c⁄° 
ù_hdr
 *
	gcuºít_hódî
;

107 
ù_addr_t
 
	gcuºít_ùhdr_§c
;

109 
ù_addr_t
 
	gcuºít_ùhdr_de°
;

112 
u16_t
 
	gù_id
;

123 
√tif
 *

124 
	$ù_rouã
(
ù_addr_t
 *
de°
)

126 
√tif
 *netif;

129 
√tif
 = 
√tif_li°
;Çëi‡!
NULL
;Çëi‡√tif->
√xt
) {

131 i‡(
	`√tif_is_up
(
√tif
)) {

132 i‡(
	`ù_addr_√tcmp
(
de°
, &(
√tif
->
ù_addr
), &“ëif->
√tmask
))) {

134  
√tif
;

138 i‡((
√tif_deÁu…
 =
NULL
Ë|| (!
	`√tif_is_up
(netif_default))) {

139 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_LEVEL_SERIOUS
, ("ù_rouã: NÿrouãÅÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

140 
	`ù4_addr1_16
(
de°
), 
	`ù4_addr2_16
(de°), 
	`ù4_addr3_16
(de°), 
	`ù4_addr4_16
(dest)));

141 
	`IP_STATS_INC
(
ù
.
πîr
);

142 
	`¢mp_öc_ùouä‹ouãs
();

143  
NULL
;

146  
√tif_deÁu…
;

147 
	}
}

149 #i‡
IP_FORWARD


160 
	$ù_f‹w¨d
(
pbuf
 *
p
, 
ù_hdr
 *
ùhdr
, 
√tif
 *
öp
)

162 
√tif
 *netif;

164 
PERF_START
;

167 i‡(
	`ù_addr_i¶ökloˇl
(&
cuºít_ùhdr_de°
)) {

168 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_f‹w¨d:ÇŸ f‹w¨dög LLA %"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

169 
	`ù4_addr1_16
(&
cuºít_ùhdr_de°
), 
	`ù4_addr2_16
(&current_iphdr_dest),

170 
	`ù4_addr3_16
(&
cuºít_ùhdr_de°
), 
	`ù4_addr4_16
(&current_iphdr_dest)));

171 
ªtu∫_n‹ouã
;

175 
√tif
 = 
	`ù_rouã
(&
cuºít_ùhdr_de°
);

176 i‡(
√tif
 =
NULL
) {

177 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_f‹w¨d:Çÿf‹w¨dögÑouã f‹ %"
U16_F
".%"U16_F".%"U16_F".%"U16_F" found\n",

178 
	`ù4_addr1_16
(&
cuºít_ùhdr_de°
), 
	`ù4_addr2_16
(&current_iphdr_dest),

179 
	`ù4_addr3_16
(&
cuºít_ùhdr_de°
), 
	`ù4_addr4_16
(&current_iphdr_dest)));

180 
ªtu∫_n‹ouã
;

184 i‡(
√tif
 =
öp
) {

185 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_forward:Çot bouncingÖackets back on incoming interface.\n"));

186 
ªtu∫_n‹ouã
;

190 
	`IPH_TTL_SET
(
ùhdr
, 
	`IPH_TTL
(iphdr) - 1);

192 i‡(
	`IPH_TTL
(
ùhdr
) == 0) {

193 
	`¢mp_öc_ùöhdªº‹s
();

194 #i‡
LWIP_ICMP


196 i‡(
	`IPH_PROTO
(
ùhdr
Ë!
IP_PROTO_ICMP
) {

197 
	`icmp_time_ex˚eded
(
p
, 
ICMP_TE_TTL
);

204 i‡(
	`IPH_CHKSUM
(
ùhdr
Ë>
	`PP_HTONS
(0xffffU - 0x100)) {

205 
	`IPH_CHKSUM_SET
(
ùhdr
, 
	`IPH_CHKSUM
(ùhdrË+ 
	`PP_HTONS
(0x100) + 1);

207 
	`IPH_CHKSUM_SET
(
ùhdr
, 
	`IPH_CHKSUM
(ùhdrË+ 
	`PP_HTONS
(0x100));

210 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_f‹w¨d: f‹w¨dögÖackëÅÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

211 
	`ù4_addr1_16
(&
cuºít_ùhdr_de°
), 
	`ù4_addr2_16
(&current_iphdr_dest),

212 
	`ù4_addr3_16
(&
cuºít_ùhdr_de°
), 
	`ù4_addr4_16
(&current_iphdr_dest)));

214 
	`IP_STATS_INC
(
ù
.
fw
);

215 
	`IP_STATS_INC
(
ù
.
xmô
);

216 
	`¢mp_öc_ùf‹wd©agøms
();

218 
	`PERF_STOP
("ip_forward");

220 
√tif
->
	`ouçut
“ëif, 
p
, &
cuºít_ùhdr_de°
);

222 
ªtu∫_n‹ouã
:

223 
	`¢mp_öc_ùouä‹ouãs
();

224 
	}
}

241 
îr_t


242 
	$ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

244 
ù_hdr
 *
ùhdr
;

245 
√tif
 *netif;

246 
u16_t
 
ùhdr_hÀn
;

247 
u16_t
 
ùhdr_Àn
;

248 #i‡
IP_ACCEPT_LINK_LAYER_ADDRESSING


249 
check_ù_§c
=1;

252 
	`IP_STATS_INC
(
ù
.
ªcv
);

253 
	`¢mp_öc_ùöª˚ives
();

256 
ùhdr
 = (
ù_hdr
 *)
p
->
∑ylﬂd
;

257 i‡(
	`IPH_V
(
ùhdr
) != 4) {

258 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_LEVEL_WARNING
, ("IPÖackë dr›≥d duêtÿbad vîsi⁄Çumbî %"
U16_F
"\n", 
	`IPH_V
(
ùhdr
)));

259 
	`ù_debug_¥öt
(
p
);

260 
	`pbuf_‰ì
(
p
);

261 
	`IP_STATS_INC
(
ù
.
îr
);

262 
	`IP_STATS_INC
(
ù
.
dr›
);

263 
	`¢mp_öc_ùöhdªº‹s
();

264  
ERR_OK
;

268 
ùhdr_hÀn
 = 
	`IPH_HL
(
ùhdr
);

270 
ùhdr_hÀn
 *= 4;

272 
ùhdr_Àn
 = 
	`¡ohs
(
	`IPH_LEN
(
ùhdr
));

275 i‡((
ùhdr_hÀn
 > 
p
->
Àn
Ë|| (
ùhdr_Àn
 >Ö->
tŸ_Àn
)) {

276 i‡(
ùhdr_hÀn
 > 
p
->
Àn
) {

277 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_LEVEL_SERIOUS
,

278 ("IP hódî (À¿%"
U16_F
") doesÇot fit in firstÖbuf (len %"U16_F"), IPÖacket dropped.\n",

279 
ùhdr_hÀn
, 
p
->
Àn
));

281 i‡(
ùhdr_Àn
 > 
p
->
tŸ_Àn
) {

282 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_LEVEL_SERIOUS
,

283 ("IP (À¿%"
U16_F
") isÜongerÅhanÖbuf (len %"U16_F"), IPÖacket dropped.\n",

284 
ùhdr_Àn
, 
p
->
tŸ_Àn
));

287 
	`pbuf_‰ì
(
p
);

288 
	`IP_STATS_INC
(
ù
.
À√º
);

289 
	`IP_STATS_INC
(
ù
.
dr›
);

290 
	`¢mp_öc_ùödisˇrds
();

291  
ERR_OK
;

295 #i‡
CHECKSUM_CHECK_IP


296 i‡(
	`öë_chksum
(
ùhdr
, 
ùhdr_hÀn
) != 0) {

298 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_LEVEL_SERIOUS
,

299 ("Checksum (0x%"
X16_F
"ËÁûed, IPÖackë dr›≥d.\n", 
	`öë_chksum
(
ùhdr
, 
ùhdr_hÀn
)));

300 
	`ù_debug_¥öt
(
p
);

301 
	`pbuf_‰ì
(
p
);

302 
	`IP_STATS_INC
(
ù
.
chkîr
);

303 
	`IP_STATS_INC
(
ù
.
dr›
);

304 
	`¢mp_öc_ùöhdªº‹s
();

305  
ERR_OK
;

311 
	`pbuf_ªÆloc
(
p
, 
ùhdr_Àn
);

314 
	`ù_addr_c›y
(
cuºít_ùhdr_de°
, 
ùhdr
->
de°
);

315 
	`ù_addr_c›y
(
cuºít_ùhdr_§c
, 
ùhdr
->
§c
);

318 #i‡
LWIP_IGMP


319 i‡(
	`ù_addr_ismu…iˇ°
(&
cuºít_ùhdr_de°
)) {

320 i‡((
öp
->
Êags
 & 
NETIF_FLAG_IGMP
Ë&& (
	`igmp_lookf‹_group
(öp, &
cuºít_ùhdr_de°
))) {

321 
√tif
 = 
öp
;

323 
√tif
 = 
NULL
;

331 
fú°
 = 1;

332 
√tif
 = 
öp
;

334 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_öput: iphdr->de° 0x%"
X32_F
"Çetif->ip_addr 0x%"X32_F" (0x%"X32_F", 0x%"X32_F", 0x%"X32_F")\n",

335 
	`ù4_addr_gë_u32
(&
ùhdr
->
de°
), ip4_addr_gë_u32(&
√tif
->
ù_addr
),

336 
	`ù4_addr_gë_u32
(&
ùhdr
->
de°
Ë& ip4_addr_gë_u32(&
√tif
->
√tmask
),

337 
	`ù4_addr_gë_u32
(&
√tif
->
ù_addr
Ë& ip4_addr_gë_u32(&√tif->
√tmask
),

338 
	`ù4_addr_gë_u32
(&
ùhdr
->
de°
Ë& ~ù4_addr_gë_u32(&
√tif
->
√tmask
)));

341 i‡((
	`√tif_is_up
(
√tif
)Ë&& (!
	`ù_addr_ißny
(&“ëif->
ù_addr
)))) {

343 i‡(
	`ù_addr_cmp
(&
cuºít_ùhdr_de°
, &(
√tif
->
ù_addr
)) ||

345 
	`ù_addr_isbrﬂdˇ°
(&
cuºít_ùhdr_de°
, 
√tif
)) {

346 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_input:Öacketáccepted on interface %c%c\n",

347 
√tif
->
«me
[0],Çetif->name[1]));

351 #i‡
LWIP_AUTOIP


354 i‡((
√tif
->
autoù
 !
NULL
) &&

355 
	`ù_addr_cmp
(&
cuºít_ùhdr_de°
, &(
√tif
->
autoù
->
Œùaddr
))) {

356 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_input: LLAÖacketáccepted on interface %c%c\n",

357 
√tif
->
«me
[0],Çetif->name[1]));

363 i‡(
fú°
) {

364 
fú°
 = 0;

365 
√tif
 = 
√tif_li°
;

367 
√tif
 =Çëif->
√xt
;

369 i‡(
√tif
 =
öp
) {

370 
√tif
 =Çëif->
√xt
;

372 } 
√tif
 !
NULL
);

375 #i‡
IP_ACCEPT_LINK_LAYER_ADDRESSING


385 i‡(
√tif
 =
NULL
) {

387 i‡(
	`IPH_PROTO
(
ùhdr
Ë=
IP_PROTO_UDP
) {

388 
udp_hdr
 *
udphdr
 = (udp_hd∏*)((
u8_t
 *)
ùhdr
 + 
ùhdr_hÀn
);

389 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ù_öput: UDPÖackëÅÿDHCP clõ¡Ö‹à%"
U16_F
"\n",

390 
	`¡ohs
(
udphdr
->
de°
)));

391 i‡(
	`IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT
(
udphdr
->
de°
)) {

392 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ip_input: DHCPÖacketáccepted.\n"));

393 
√tif
 = 
öp
;

394 
check_ù_§c
 = 0;

401 #i‡
IP_ACCEPT_LINK_LAYER_ADDRESSING


403 i‡(
check_ù_§c
 && !
	`ù_addr_ißny
(&
cuºít_ùhdr_§c
))

405 { i‡((
	`ù_addr_isbrﬂdˇ°
(&
cuºít_ùhdr_§c
, 
öp
)) ||

406 (
	`ù_addr_ismu…iˇ°
(&
cuºít_ùhdr_§c
))) {

408 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_LEVEL_WARNING
, ("ip_input:Öacket source isÇot valid.\n"));

410 
	`pbuf_‰ì
(
p
);

411 
	`IP_STATS_INC
(
ù
.
dr›
);

412 
	`¢mp_öc_ùöaddªº‹s
();

413 
	`¢mp_öc_ùödisˇrds
();

414  
ERR_OK
;

419 i‡(
√tif
 =
NULL
) {

421 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ip_input:ÖacketÇot for us.\n"));

422 #i‡
IP_FORWARD


424 i‡(!
	`ù_addr_isbrﬂdˇ°
(&
cuºít_ùhdr_de°
, 
öp
)) {

426 
	`ù_f‹w¨d
(
p
, 
ùhdr
, 
öp
);

430 
	`¢mp_öc_ùöaddªº‹s
();

431 
	`¢mp_öc_ùödisˇrds
();

433 
	`pbuf_‰ì
(
p
);

434  
ERR_OK
;

437 i‡((
	`IPH_OFFSET
(
ùhdr
Ë& 
	`PP_HTONS
(
IP_OFFMASK
 | 
IP_MF
)) != 0) {

438 #i‡
IP_REASSEMBLY


439 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("IPÖackë i†®‰agmíà(id=0x%04"
X16_F
"ÅŸ_Àn=%"
U16_F
"Üen=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip_reass()\n",

440 
	`¡ohs
(
	`IPH_ID
(
ùhdr
)), 
p
->
tŸ_Àn
,Çtohs(
	`IPH_LEN
(ùhdr)), !!(
	`IPH_OFFSET
(ùhdrË& 
	`PP_HTONS
(
IP_MF
)), (¡ohs(IPH_OFFSET(ùhdr)Ë& 
IP_OFFMASK
)*8));

442 
p
 = 
	`ù_ªass
(p);

444 i‡(
p
 =
NULL
) {

445  
ERR_OK
;

447 
ùhdr
 = (
ù_hdr
 *)
p
->
∑ylﬂd
;

449 
	`pbuf_‰ì
(
p
);

450 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_LEVEL_SERIOUS
, ("IPÖackë dr›≥d sö˚ iàwa†‰agmíãd (0x%"
X16_F
") (while IP_REASSEMBLY == 0).\n",

451 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
))));

452 
	`IP_STATS_INC
(
ù
.
›ãº
);

453 
	`IP_STATS_INC
(
ù
.
dr›
);

455 
	`¢mp_öc_ùöunknow≈rŸos
();

456  
ERR_OK
;

460 #i‡
IP_OPTIONS_ALLOWED
 == 0

462 #i‡
LWIP_IGMP


464 if((
ùhdr_hÀn
 > 
IP_HLEN
Ë&& (
	`IPH_PROTO
(
ùhdr
Ë!
IP_PROTO_IGMP
)) {

466 i‡(
ùhdr_hÀn
 > 
IP_HLEN
) {

468 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_LEVEL_SERIOUS
, ("IPÖacket dropped sinceÅhere were IP options (while IP_OPTIONS_ALLOWED == 0).\n"));

469 
	`pbuf_‰ì
(
p
);

470 
	`IP_STATS_INC
(
ù
.
›ãº
);

471 
	`IP_STATS_INC
(
ù
.
dr›
);

473 
	`¢mp_öc_ùöunknow≈rŸos
();

474  
ERR_OK
;

479 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_input: \n"));

480 
	`ù_debug_¥öt
(
p
);

481 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_öput:Ö->À¿%"
U16_F
"Ö->tŸ_À¿%"U16_F"\n", 
p
->
Àn
,Ö->
tŸ_Àn
));

483 
cuºít_√tif
 = 
öp
;

484 
cuºít_hódî
 = 
ùhdr
;

486 #i‡
LWIP_RAW


488 i‡(
	`øw_öput
(
p
, 
öp
) == 0)

492 
	`IPH_PROTO
(
ùhdr
)) {

493 #i‡
LWIP_UDP


494 
IP_PROTO_UDP
:

495 #i‡
LWIP_UDPLITE


496 
IP_PROTO_UDPLITE
:

498 
	`¢mp_öc_ùödñivîs
();

499 
	`udp_öput
(
p
, 
öp
);

502 #i‡
LWIP_TCP


503 
IP_PROTO_TCP
:

504 
	`¢mp_öc_ùödñivîs
();

505 
	`t˝_öput
(
p
, 
öp
);

508 #i‡
LWIP_ICMP


509 
IP_PROTO_ICMP
:

510 
	`¢mp_öc_ùödñivîs
();

511 
	`icmp_öput
(
p
, 
öp
);

514 #i‡
LWIP_IGMP


515 
IP_PROTO_IGMP
:

516 
	`igmp_öput
(
p
, 
öp
, &
cuºít_ùhdr_de°
);

520 #i‡
LWIP_ICMP


522 i‡(!
	`ù_addr_isbrﬂdˇ°
(&
cuºít_ùhdr_de°
, 
öp
) &&

523 !
	`ù_addr_ismu…iˇ°
(&
cuºít_ùhdr_de°
)) {

524 
p
->
∑ylﬂd
 = 
ùhdr
;

525 
	`icmp_de°_uƒóch
(
p
, 
ICMP_DUR_PROTO
);

528 
	`pbuf_‰ì
(
p
);

530 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_LEVEL_SERIOUS
, ("Unsuµ‹ãdÅøn•‹à¥Ÿocﬁ %"
U16_F
"\n", 
	`IPH_PROTO
(
ùhdr
)));

532 
	`IP_STATS_INC
(
ù
.
¥Ÿîr
);

533 
	`IP_STATS_INC
(
ù
.
dr›
);

534 
	`¢mp_öc_ùöunknow≈rŸos
();

538 
cuºít_√tif
 = 
NULL
;

539 
cuºít_hódî
 = 
NULL
;

540 
	`ù_addr_£t_™y
(&
cuºít_ùhdr_§c
);

541 
	`ù_addr_£t_™y
(&
cuºít_ùhdr_de°
);

543  
ERR_OK
;

544 
	}
}

571 
îr_t


572 
	$ù_ouçut_if
(
pbuf
 *
p
, 
ù_addr_t
 *
§c
, ip_addr_à*
de°
,

573 
u8_t
 
âl
, u8_à
tos
,

574 
u8_t
 
¥Ÿo
, 
√tif
 *netif)

576 #i‡
IP_OPTIONS_SEND


577  
	`ù_ouçut_if_›t
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
, 
√tif
, 
NULL
, 0);

578 
	}
}

586 
îr_t
 
	$ù_ouçut_if_›t
(
pbuf
 *
p
, 
ù_addr_t
 *
§c
, ip_addr_à*
de°
,

587 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
, 
√tif
 *√tif, *
ù_›ti⁄s
,

588 
u16_t
 
›éí
)

591 
ù_hdr
 *
ùhdr
;

592 
ù_addr_t
 
de°_addr
;

593 #i‡
CHECKSUM_GEN_IP_INLINE


594 
u32_t
 
chk_sum
 = 0;

599 
	`LWIP_ASSERT
("p->ª‡=1", 
p
->
ªf
 == 1);

601 
	`¢mp_öc_ùouåeque°s
();

604 i‡(
de°
 !
IP_HDRINCL
) {

605 
u16_t
 
ù_hÀn
 = 
IP_HLEN
;

606 #i‡
IP_OPTIONS_SEND


607 
u16_t
 
›éí_Æig√d
 = 0;

608 i‡(
›éí
 != 0) {

609 #i‡
CHECKSUM_GEN_IP_INLINE


610 
i
;

613 
›éí_Æig√d
 = ((
›éí
 + 3) & ~3);

614 
ù_hÀn
 +
›éí_Æig√d
;

616 i‡(
	`pbuf_hódî
(
p
, 
›éí_Æig√d
)) {

617 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_LEVEL_SERIOUS
, ("ip_output_if_opt:ÇotÉnoughÑoom for IP options inÖbuf\n"));

618 
	`IP_STATS_INC
(
ù
.
îr
);

619 
	`¢mp_öc_ùoutdisˇrds
();

620  
ERR_BUF
;

622 
	`MEMCPY
(
p
->
∑ylﬂd
, 
ù_›ti⁄s
, 
›éí
);

623 i‡(
›éí
 < 
›éí_Æig√d
) {

625 
	`mem£t
(((*)
p
->
∑ylﬂd
Ë+ 
›éí
, 0, 
›éí_Æig√d
 - optlen);

627 #i‡
CHECKSUM_GEN_IP_INLINE


628 
i
 = 0; i < 
›éí_Æig√d
/2; i++) {

629 
chk_sum
 +((
u16_t
*)
p
->
∑ylﬂd
)[
i
];

635 i‡(
	`pbuf_hódî
(
p
, 
IP_HLEN
)) {

636 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_LEVEL_SERIOUS
, ("ip_output:ÇotÉnoughÑoom for IP header inÖbuf\n"));

638 
	`IP_STATS_INC
(
ù
.
îr
);

639 
	`¢mp_öc_ùoutdisˇrds
();

640  
ERR_BUF
;

643 
ùhdr
 = (
ù_hdr
 *)
p
->
∑ylﬂd
;

644 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold struct ip_hdr",

645 (
p
->
Àn
 >(
ù_hdr
)));

647 
	`IPH_TTL_SET
(
ùhdr
, 
âl
);

648 
	`IPH_PROTO_SET
(
ùhdr
, 
¥Ÿo
);

649 #i‡
CHECKSUM_GEN_IP_INLINE


650 
chk_sum
 +
	`LWIP_MAKE_U16
(
¥Ÿo
, 
âl
);

654 
	`ù_addr_c›y
(
ùhdr
->
de°
, *dest);

655 #i‡
CHECKSUM_GEN_IP_INLINE


656 
chk_sum
 +
	`ù4_addr_gë_u32
(&
ùhdr
->
de°
) & 0xFFFF;

657 
chk_sum
 +
	`ù4_addr_gë_u32
(&
ùhdr
->
de°
) >> 16;

660 
	`IPH_VHLTOS_SET
(
ùhdr
, 4, 
ù_hÀn
 / 4, 
tos
);

661 #i‡
CHECKSUM_GEN_IP_INLINE


662 
chk_sum
 +
ùhdr
->
_v_hl_tos
;

664 
	`IPH_LEN_SET
(
ùhdr
, 
	`ht⁄s
(
p
->
tŸ_Àn
));

665 #i‡
CHECKSUM_GEN_IP_INLINE


666 
chk_sum
 +
ùhdr
->
_Àn
;

668 
	`IPH_OFFSET_SET
(
ùhdr
, 0);

669 
	`IPH_ID_SET
(
ùhdr
, 
	`ht⁄s
(
ù_id
));

670 #i‡
CHECKSUM_GEN_IP_INLINE


671 
chk_sum
 +
ùhdr
->
_id
;

673 ++
ù_id
;

675 i‡(
	`ù_addr_ißny
(
§c
)) {

676 
	`ù_addr_c›y
(
ùhdr
->
§c
, 
√tif
->
ù_addr
);

679 
	`ù_addr_c›y
(
ùhdr
->
§c
, *src);

682 #i‡
CHECKSUM_GEN_IP_INLINE


683 
chk_sum
 +
	`ù4_addr_gë_u32
(&
ùhdr
->
§c
) & 0xFFFF;

684 
chk_sum
 +
	`ù4_addr_gë_u32
(&
ùhdr
->
§c
) >> 16;

685 
chk_sum
 = (chk_sum >> 16) + (chk_sum & 0xFFFF);

686 
chk_sum
 = (chk_sum >> 16) + chk_sum;

687 
chk_sum
 = ~chk_sum;

688 
ùhdr
->
_chksum
 = 
chk_sum
;

690 
	`IPH_CHKSUM_SET
(
ùhdr
, 0);

691 #i‡
CHECKSUM_GEN_IP


692 
	`IPH_CHKSUM_SET
(
ùhdr
, 
	`öë_chksum
(ùhdr, 
ù_hÀn
));

697 
ùhdr
 = (
ù_hdr
 *)
p
->
∑ylﬂd
;

698 
	`ù_addr_c›y
(
de°_addr
, 
ùhdr
->
de°
);

699 
de°
 = &
de°_addr
;

702 
	`IP_STATS_INC
(
ù
.
xmô
);

704 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_ouçut_if: %c%c%"
U16_F
"\n", 
√tif
->
«me
[0],Çëif->«me[1],Çëif->
num
));

705 
	`ù_debug_¥öt
(
p
);

707 #i‡
ENABLE_LOOPBACK


708 i‡(
	`ù_addr_cmp
(
de°
, &
√tif
->
ù_addr
)) {

710 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("netif_loop_output()"));

711  
	`√tif_lo›_ouçut
(
√tif
, 
p
, 
de°
);

713 #i‡
LWIP_IGMP


714 i‡((
p
->
Êags
 & 
PBUF_FLAG_MCASTLOOP
) != 0) {

715 
	`√tif_lo›_ouçut
(
√tif
, 
p
, 
de°
);

719 #i‡
IP_FRAG


721 i‡(
√tif
->
mtu
 && (
p
->
tŸ_Àn
 >Çetif->mtu)) {

722  
	`ù_‰ag
(
p
, 
√tif
, 
de°
);

726 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("netif->output()"));

727  
√tif
->
	`ouçut
“ëif, 
p
, 
de°
);

728 
	}
}

747 
îr_t


748 
	$ù_ouçut
(
pbuf
 *
p
, 
ù_addr_t
 *
§c
, ip_addr_à*
de°
,

749 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
)

751 
√tif
 *netif;

755 
	`LWIP_ASSERT
("p->ª‡=1", 
p
->
ªf
 == 1);

757 i‡((
√tif
 = 
	`ù_rouã
(
de°
)Ë=
NULL
) {

758 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_ouçut: NÿrouãÅÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

759 
	`ù4_addr1_16
(
de°
), 
	`ù4_addr2_16
(de°), 
	`ù4_addr3_16
(de°), 
	`ù4_addr4_16
(dest)));

760 
	`IP_STATS_INC
(
ù
.
πîr
);

761  
ERR_RTE
;

764  
	`ù_ouçut_if
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
, 
√tif
);

765 
	}
}

767 #i‡
LWIP_NETIF_HWADDRHINT


786 
îr_t


787 
	$ù_ouçut_höãd
(
pbuf
 *
p
, 
ù_addr_t
 *
§c
, ip_addr_à*
de°
,

788 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
, u8_à*
addr_höt
)

790 
√tif
 *netif;

791 
îr_t
 
îr
;

795 
	`LWIP_ASSERT
("p->ª‡=1", 
p
->
ªf
 == 1);

797 i‡((
√tif
 = 
	`ù_rouã
(
de°
)Ë=
NULL
) {

798 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_ouçut: NÿrouãÅÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

799 
	`ù4_addr1_16
(
de°
), 
	`ù4_addr2_16
(de°), 
	`ù4_addr3_16
(de°), 
	`ù4_addr4_16
(dest)));

800 
	`IP_STATS_INC
(
ù
.
πîr
);

801  
ERR_RTE
;

804 
√tif
->
addr_höt
 =áddr_hint;

805 
îr
 = 
	`ù_ouçut_if
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
, 
√tif
);

806 
√tif
->
addr_höt
 = 
NULL
;

808  
îr
;

809 
	}
}

812 #i‡
IP_DEBUG


817 
	$ù_debug_¥öt
(
pbuf
 *
p
)

819 
ù_hdr
 *
ùhdr
 = (ù_hd∏*)
p
->
∑ylﬂd
;

820 
u8_t
 *
∑ylﬂd
;

822 
∑ylﬂd
 = (
u8_t
 *)
ùhdr
 + 
IP_HLEN
;

824 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("IP header:\n"));

825 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

826 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("|%2"
S16_F
" |%2"S16_F" | 0x%02"
X16_F
" | %5"
U16_F
" | (v, hl,Åos,Üen)\n",

827 
	`IPH_V
(
ùhdr
),

828 
	`IPH_HL
(
ùhdr
),

829 
	`IPH_TOS
(
ùhdr
),

830 
	`¡ohs
(
	`IPH_LEN
(
ùhdr
))));

831 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

832 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %5"
U16_F
" |%"U16_F"%"U16_F"%"U16_F"| %4"U16_F" | (id, flags, offset)\n",

833 
	`¡ohs
(
	`IPH_ID
(
ùhdr
)),

834 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
)) >> 15 & 1,

835 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
)) >> 14 & 1,

836 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
)) >> 13 & 1,

837 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
)Ë& 
IP_OFFMASK
));

838 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

839 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %3"
U16_F
" | %3"U16_F" | 0x%04"
X16_F
" | (ttl,Öroto, chksum)\n",

840 
	`IPH_TTL
(
ùhdr
),

841 
	`IPH_PROTO
(
ùhdr
),

842 
	`¡ohs
(
	`IPH_CHKSUM
(
ùhdr
))));

843 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

844 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %3"
U16_F
" | %3"U16_F" | %3"U16_F" | %3"U16_F" | (src)\n",

845 
	`ù4_addr1_16
(&
ùhdr
->
§c
),

846 
	`ù4_addr2_16
(&
ùhdr
->
§c
),

847 
	`ù4_addr3_16
(&
ùhdr
->
§c
),

848 
	`ù4_addr4_16
(&
ùhdr
->
§c
)));

849 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

850 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %3"
U16_F
" | %3"U16_F" | %3"U16_F" | %3"U16_F" | (dest)\n",

851 
	`ù4_addr1_16
(&
ùhdr
->
de°
),

852 
	`ù4_addr2_16
(&
ùhdr
->
de°
),

853 
	`ù4_addr3_16
(&
ùhdr
->
de°
),

854 
	`ù4_addr4_16
(&
ùhdr
->
de°
)));

855 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

856 
	}
}

	@core/ipv4/ip_addr.c

39 
	~"lwù/›t.h
"

40 
	~"lwù/ù_addr.h
"

41 
	~"lwù/√tif.h
"

44 c⁄° 
ù_addr_t
 
	gù_addr_™y
 = { 
IPADDR_ANY
 };

45 c⁄° 
ù_addr_t
 
	gù_addr_brﬂdˇ°
 = { 
IPADDR_BROADCAST
 };

54 
u8_t


55 
	$ù4_addr_isbrﬂdˇ°
(
u32_t
 
addr
, c⁄° 
√tif
 *netif)

57 
ù_addr_t
 
ùaddr
;

58 
	`ù4_addr_£t_u32
(&
ùaddr
, 
addr
);

61 i‡((~
addr
 =
IPADDR_ANY
) ||

62 (
addr
 =
IPADDR_ANY
)) {

65 } i‡((
√tif
->
Êags
 & 
NETIF_FLAG_BROADCAST
) == 0) {

70 } i‡(
addr
 =
	`ù4_addr_gë_u32
(&
√tif
->
ù_addr
)) {

73 } i‡(
	`ù_addr_√tcmp
(&
ùaddr
, &(
√tif
->
ù_addr
), &“ëif->
√tmask
))

75 && ((
addr
 & ~
	`ù4_addr_gë_u32
(&
√tif
->
√tmask
)) ==

76 (
IPADDR_BROADCAST
 & ~
	`ù4_addr_gë_u32
(&
√tif
->
√tmask
)))) {

82 
	}
}

89 
u8_t


90 
	$ù4_addr_√tmask_vÆid
(
u32_t
 
√tmask
)

92 
u32_t
 
mask
;

93 
u32_t
 
nm_ho°‹dî
 = 
	`lwù_ht⁄l
(
√tmask
);

96 
mask
 = 1UL << 31 ; mask != 0; mask >>= 1) {

97 i‡((
nm_ho°‹dî
 & 
mask
) == 0) {

102 ; 
mask
 != 0; mask >>= 1) {

103 i‡((
nm_ho°‹dî
 & 
mask
) != 0) {

110 
	}
}

113 #i‚de‡
i•röt


114 
	#ö_ønge
(
c
, 
lo
, 
up
Ë((
u8_t
)¯>lÿ&& (u8_t)¯<up)

	)

115 
	#i•röt
(
c
Ë
	`ö_ønge
(c, 0x20, 0x7f)

	)

116 
	#isdigô
(
c
Ë
	`ö_ønge
(c, '0', '9')

	)

117 
	#isxdigô
(
c
Ë(
	`isdigô
(cË|| 
	`ö_ønge
(c, 'a', 'f'Ë|| in_ønge(c, 'A', 'F'))

	)

118 
	#i¶owî
(
c
Ë
	`ö_ønge
(c, 'a', 'z')

	)

119 
	#is•a˚
(
c
Ë(¯=' ' || c ='\f' || c ='\n' || c ='\r' || c ='\t' || c ='\v')

	)

129 
u32_t


130 
	$ùaddr_addr
(c⁄° *
˝
)

132 
ù_addr_t
 
vÆ
;

134 i‡(
	`ùaddr_©⁄
(
˝
, &
vÆ
)) {

135  
	`ù4_addr_gë_u32
(&
vÆ
);

137  (
IPADDR_NONE
);

138 
	}
}

152 
	$ùaddr_©⁄
(c⁄° *
˝
, 
ù_addr_t
 *
addr
)

154 
u32_t
 
vÆ
;

155 
u8_t
 
ba£
;

156 
c
;

157 
u32_t
 
∑πs
[4];

158 
u32_t
 *
µ
 = 
∑πs
;

160 
c
 = *
˝
;

167 i‡(!
	`isdigô
(
c
))

169 
vÆ
 = 0;

170 
ba£
 = 10;

171 i‡(
c
 == '0') {

172 
c
 = *++
˝
;

173 i‡(
c
 == 'x' || c == 'X') {

174 
ba£
 = 16;

175 
c
 = *++
˝
;

177 
ba£
 = 8;

180 i‡(
	`isdigô
(
c
)) {

181 
vÆ
 = (vÆ * 
ba£
Ë+ ()(
c
 - '0');

182 
c
 = *++
˝
;

183 } i‡(
ba£
 =16 && 
	`isxdigô
(
c
)) {

184 
vÆ
 = (vÆ << 4Ë| ()(
c
 + 10 - (
	`i¶owî
(c) ? 'a' : 'A'));

185 
c
 = *++
˝
;

189 i‡(
c
 == '.') {

196 i‡(
µ
 >
∑πs
 + 3) {

199 *
µ
++ = 
vÆ
;

200 
c
 = *++
˝
;

207 i‡(
c
 !'\0' && !
	`is•a˚
(c)) {

214 
µ
 - 
∑πs
 + 1) {

223 i‡(
vÆ
 > 0xffffffUL) {

226 
vÆ
 |
∑πs
[0] << 24;

230 i‡(
vÆ
 > 0xffff) {

233 
vÆ
 |(
∑πs
[0] << 24) | (parts[1] << 16);

237 i‡(
vÆ
 > 0xff) {

240 
vÆ
 |(
∑πs
[0] << 24) | (parts[1] << 16) | (parts[2] << 8);

243 
	`LWIP_ASSERT
("unhandled", 0);

246 i‡(
addr
) {

247 
	`ù4_addr_£t_u32
(
addr
, 
	`ht⁄l
(
vÆ
));

250 
	}
}

261 
	$ùaddr_¡ﬂ
(c⁄° 
ù_addr_t
 *
addr
)

263 
°r
[16];

264  
	`ùaddr_¡ﬂ_r
(
addr
, 
°r
, 16);

265 
	}
}

276 *
	$ùaddr_¡ﬂ_r
(c⁄° 
ù_addr_t
 *
addr
, *
buf
, 
buÊí
)

278 
u32_t
 
s_addr
;

279 
öv
[3];

280 *
Ω
;

281 
u8_t
 *
≠
;

282 
u8_t
 
ªm
;

283 
u8_t
 
n
;

284 
u8_t
 
i
;

285 
Àn
 = 0;

287 
s_addr
 = 
	`ù4_addr_gë_u32
(
addr
);

289 
Ω
 = 
buf
;

290 
≠
 = (
u8_t
 *)&
s_addr
;

291 
n
 = 0;Ç < 4;Ç++) {

292 
i
 = 0;

294 
ªm
 = *
≠
 % (
u8_t
)10;

295 *
≠
 /(
u8_t
)10;

296 
öv
[
i
++] = '0' + 
ªm
;

297 } *
≠
);

298 
i
--) {

299 i‡(
Àn
++ >
buÊí
) {

300  
NULL
;

302 *
Ω
++ = 
öv
[
i
];

304 i‡(
Àn
++ >
buÊí
) {

305  
NULL
;

307 *
Ω
++ = '.';

308 
≠
++;

310 *--
Ω
 = 0;

311  
buf
;

312 
	}
}

	@core/ipv4/ip_frag.c

41 
	~"lwù/›t.h
"

42 
	~"lwù/ù_‰ag.h
"

43 
	~"lwù/def.h
"

44 
	~"lwù/öë_chksum.h
"

45 
	~"lwù/√tif.h
"

46 
	~"lwù/¢mp.h
"

47 
	~"lwù/°©s.h
"

48 
	~"lwù/icmp.h
"

50 
	~<°rög.h
>

52 #i‡
IP_REASSEMBLY


66 #i‚de‡
IP_REASS_CHECK_OVERLAP


67 
	#IP_REASS_CHECK_OVERLAP
 1

	)

74 #i‚de‡
IP_REASS_FREE_OLDEST


75 
	#IP_REASS_FREE_OLDEST
 1

	)

78 
	#IP_REASS_FLAG_LASTFRAG
 0x01

	)

88 #ifde‡
PACK_STRUCT_USE_INCLUDES


89 
	~"¨ch/bp°ru˘.h
"

91 
PACK_STRUCT_BEGIN


92 
	sù_ªass_hñ≥r
 {

93 
PACK_STRUCT_FIELD
(
pbuf
 *
√xt_pbuf
);

94 
PACK_STRUCT_FIELD
(
u16_t
 
°¨t
);

95 
PACK_STRUCT_FIELD
(
u16_t
 
íd
);

96 } 
	gPACK_STRUCT_STRUCT
;

97 
	gPACK_STRUCT_END


98 #ifde‡
PACK_STRUCT_USE_INCLUDES


99 
	~"¨ch/ï°ru˘.h
"

102 
	#IP_ADDRESSES_AND_ID_MATCH
(
ùhdrA
, 
ùhdrB
) \

103 (
	`ù_addr_cmp
(&(
ùhdrA
)->
§c
, &(
ùhdrB
)->src) && \

104 
	`ù_addr_cmp
(&(
ùhdrA
)->
de°
, &(
ùhdrB
)->dest) && \

105 
	`IPH_ID
(
ùhdrA
Ë=IPH_ID(
ùhdrB
)Ë? 1 : 0

	)

108 
ù_ªassd©a
 *
	gªassd©agøms
;

109 
u16_t
 
	gù_ªass_pbufcou¡
;

112 
ù_ªass_dequeue_d©agøm
(
ù_ªassd©a
 *
ùr
, ù_ªassd©®*
¥ev
);

113 
ù_ªass_‰ì_com∂ëe_d©agøm
(
ù_ªassd©a
 *
ùr
, ù_ªassd©®*
¥ev
);

122 
	$ù_ªass_tmr
()

124 
ù_ªassd©a
 *
r
, *
¥ev
 = 
NULL
;

126 
r
 = 
ªassd©agøms
;

127 
r
 !
NULL
) {

130 i‡(
r
->
timî
 > 0) {

131 
r
->
timî
--;

132 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
, ("ù_ªass_tmr:Åimî de¯%"
U16_F
"\n",(
u16_t
)
r
->
timî
));

133 
¥ev
 = 
r
;

134 
r
 =Ñ->
√xt
;

137 
ù_ªassd©a
 *
tmp
;

138 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
, ("ip_reass_tmr:ÅimerÅimed out\n"));

139 
tmp
 = 
r
;

141 
r
 =Ñ->
√xt
;

143 
	`ù_ªass_‰ì_com∂ëe_d©agøm
(
tmp
, 
¥ev
);

146 
	}
}

158 
	$ù_ªass_‰ì_com∂ëe_d©agøm
(
ù_ªassd©a
 *
ùr
, ù_ªassd©®*
¥ev
)

160 
u16_t
 
pbufs_‰ìd
 = 0;

161 
u8_t
 
˛í
;

162 
pbuf
 *
p
;

163 
ù_ªass_hñ≥r
 *
ùrh
;

165 
	`LWIP_ASSERT
("¥ev !ùr", 
¥ev
 !
ùr
);

166 i‡(
¥ev
 !
NULL
) {

167 
	`LWIP_ASSERT
("¥ev->√xà=ùr", 
¥ev
->
√xt
 =
ùr
);

170 
	`¢mp_öc_ùªasmÁûs
();

171 #i‡
LWIP_ICMP


172 
ùrh
 = (
ù_ªass_hñ≥r
 *)
ùr
->
p
->
∑ylﬂd
;

173 i‡(
ùrh
->
°¨t
 == 0) {

176 
p
 = 
ùr
->p;

177 
ùr
->
p
 = 
ùrh
->
√xt_pbuf
;

179 
	`SMEMCPY
(
p
->
∑ylﬂd
, &
ùr
->
ùhdr
, 
IP_HLEN
);

180 
	`icmp_time_ex˚eded
(
p
, 
ICMP_TE_FRAG
);

181 
˛í
 = 
	`pbuf_˛í
(
p
);

182 
	`LWIP_ASSERT
("pbufs_‰ìd + cÀ¿<0xffff", 
pbufs_‰ìd
 + 
˛í
 <= 0xffff);

183 
pbufs_‰ìd
 +
˛í
;

184 
	`pbuf_‰ì
(
p
);

190 
p
 = 
ùr
->p;

191 
p
 !
NULL
) {

192 
pbuf
 *
pcur
;

193 
ùrh
 = (
ù_ªass_hñ≥r
 *)
p
->
∑ylﬂd
;

194 
pcur
 = 
p
;

196 
p
 = 
ùrh
->
√xt_pbuf
;

197 
˛í
 = 
	`pbuf_˛í
(
pcur
);

198 
	`LWIP_ASSERT
("pbufs_‰ìd + cÀ¿<0xffff", 
pbufs_‰ìd
 + 
˛í
 <= 0xffff);

199 
pbufs_‰ìd
 +
˛í
;

200 
	`pbuf_‰ì
(
pcur
);

203 
	`ù_ªass_dequeue_d©agøm
(
ùr
, 
¥ev
);

204 
	`LWIP_ASSERT
("ù_ªass_pbufcou¡ >˛í", 
ù_ªass_pbufcou¡
 >
pbufs_‰ìd
);

205 
ù_ªass_pbufcou¡
 -
pbufs_‰ìd
;

207  
pbufs_‰ìd
;

208 
	}
}

210 #i‡
IP_REASS_FREE_OLDEST


221 
	$ù_ªass_ªmove_ﬁde°_d©agøm
(
ù_hdr
 *
‰aghdr
, 
pbufs_√eded
)

226 
ù_ªassd©a
 *
r
, *
ﬁde°
, *
¥ev
;

227 
pbufs_‰ìd
 = 0, 
pbufs_‰ìd_cuºít
;

228 
Ÿhî_d©agøms
;

233 
ﬁde°
 = 
NULL
;

234 
¥ev
 = 
NULL
;

235 
Ÿhî_d©agøms
 = 0;

236 
r
 = 
ªassd©agøms
;

237 
r
 !
NULL
) {

238 i‡(!
	`IP_ADDRESSES_AND_ID_MATCH
(&
r
->
ùhdr
, 
‰aghdr
)) {

240 
Ÿhî_d©agøms
++;

241 i‡(
ﬁde°
 =
NULL
) {

242 
ﬁde°
 = 
r
;

243 } i‡(
r
->
timî
 <
ﬁde°
->timer) {

245 
ﬁde°
 = 
r
;

248 i‡(
r
->
√xt
 !
NULL
) {

249 
¥ev
 = 
r
;

251 
r
 =Ñ->
√xt
;

253 i‡(
ﬁde°
 !
NULL
) {

254 
pbufs_‰ìd_cuºít
 = 
	`ù_ªass_‰ì_com∂ëe_d©agøm
(
ﬁde°
, 
¥ev
);

255 
pbufs_‰ìd
 +
pbufs_‰ìd_cuºít
;

257 } (
pbufs_‰ìd
 < 
pbufs_√eded
Ë&& (
Ÿhî_d©agøms
 > 1));

258  
pbufs_‰ìd
;

259 
	}
}

268 
ù_ªassd©a
*

269 
	$ù_ªass_íqueue_√w_d©agøm
(
ù_hdr
 *
‰aghdr
, 
˛í
)

271 
ù_ªassd©a
* 
ùr
;

273 
ùr
 = (
ù_ªassd©a
 *)
	`memp_mÆloc
(
MEMP_REASSDATA
);

274 i‡(
ùr
 =
NULL
) {

275 #i‡
IP_REASS_FREE_OLDEST


276 i‡(
	`ù_ªass_ªmove_ﬁde°_d©agøm
(
‰aghdr
, 
˛í
) >= clen) {

277 
ùr
 = (
ù_ªassd©a
 *)
	`memp_mÆloc
(
MEMP_REASSDATA
);

279 i‡(
ùr
 =
NULL
)

282 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
memîr
);

283 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,("FailedÅoállocÑeassdata struct\n"));

284  
NULL
;

287 
	`mem£t
(
ùr
, 0, (
ù_ªassd©a
));

288 
ùr
->
timî
 = 
IP_REASS_MAXAGE
;

291 
ùr
->
√xt
 = 
ªassd©agøms
;

292 
ªassd©agøms
 = 
ùr
;

295 
	`SMEMCPY
(&(
ùr
->
ùhdr
), 
‰aghdr
, 
IP_HLEN
);

296  
ùr
;

297 
	}
}

304 
	$ù_ªass_dequeue_d©agøm
(
ù_ªassd©a
 *
ùr
, ù_ªassd©®*
¥ev
)

308 i‡(
ªassd©agøms
 =
ùr
) {

310 
ªassd©agøms
 = 
ùr
->
√xt
;

313 
	`LWIP_ASSERT
("ßnôy checkÜökedÜi°", 
¥ev
 !
NULL
);

314 
¥ev
->
√xt
 = 
ùr
->next;

318 
	`memp_‰ì
(
MEMP_REASSDATA
, 
ùr
);

319 
	}
}

331 
	$ù_ªass_chaö_‰ag_öto_d©agøm_™d_vÆid©e
(
ù_ªassd©a
 *
ùr
, 
pbuf
 *
√w_p
)

333 
ù_ªass_hñ≥r
 *
ùrh
, *
ùrh_tmp
, *
ùrh_¥ev
=
NULL
;

334 
pbuf
 *
q
;

335 
u16_t
 
off£t
,
Àn
;

336 
ù_hdr
 *
‰aghdr
;

337 
vÆid
 = 1;

340 
‰aghdr
 = (
ù_hdr
*)
√w_p
->
∑ylﬂd
;

341 
Àn
 = 
	`¡ohs
(
	`IPH_LEN
(
‰aghdr
)Ë- 
	`IPH_HL
(fraghdr) * 4;

342 
off£t
 = (
	`¡ohs
(
	`IPH_OFFSET
(
‰aghdr
)Ë& 
IP_OFFMASK
) * 8;

347 
	`LWIP_ASSERT
("sizeof(struct ip_reass_helper) <= IP_HLEN",

348 (
ù_ªass_hñ≥r
Ë<
IP_HLEN
);

349 
ùrh
 = (
ù_ªass_hñ≥r
*)
√w_p
->
∑ylﬂd
;

350 
ùrh
->
√xt_pbuf
 = 
NULL
;

351 
ùrh
->
°¨t
 = 
off£t
;

352 
ùrh
->
íd
 = 
off£t
 + 
Àn
;

356 
q
 = 
ùr
->
p
; q !
NULL
;) {

357 
ùrh_tmp
 = (
ù_ªass_hñ≥r
*)
q
->
∑ylﬂd
;

358 i‡(
ùrh
->
°¨t
 < 
ùrh_tmp
->start) {

360 
ùrh
->
√xt_pbuf
 = 
q
;

361 i‡(
ùrh_¥ev
 !
NULL
) {

363 #i‡
IP_REASS_CHECK_OVERLAP


364 i‡((
ùrh
->
°¨t
 < 
ùrh_¥ev
->
íd
Ë|| (ùrh->íd > 
ùrh_tmp
->start)) {

366 
‰ìpbuf
;

369 
ùrh_¥ev
->
√xt_pbuf
 = 
√w_p
;

372 
ùr
->
p
 = 
√w_p
;

375 } if(
ùrh
->
°¨t
 =
ùrh_tmp
->start) {

377 
‰ìpbuf
;

378 #i‡
IP_REASS_CHECK_OVERLAP


379 } if(
ùrh
->
°¨t
 < 
ùrh_tmp
->
íd
) {

381 
‰ìpbuf
;

385 i‡(
ùrh_¥ev
 !
NULL
) {

386 i‡(
ùrh_¥ev
->
íd
 !
ùrh_tmp
->
°¨t
) {

389 
vÆid
 = 0;

393 
q
 = 
ùrh_tmp
->
√xt_pbuf
;

394 
ùrh_¥ev
 = 
ùrh_tmp
;

398 i‡(
q
 =
NULL
) {

399 i‡(
ùrh_¥ev
 !
NULL
) {

402 #i‡
IP_REASS_CHECK_OVERLAP


403 
	`LWIP_ASSERT
("check føgmít†d⁄'àovîœp", 
ùrh_¥ev
->
íd
 <
ùrh
->
°¨t
);

405 
ùrh_¥ev
->
√xt_pbuf
 = 
√w_p
;

406 i‡(
ùrh_¥ev
->
íd
 !
ùrh
->
°¨t
) {

407 
vÆid
 = 0;

410 #i‡
IP_REASS_CHECK_OVERLAP


411 
	`LWIP_ASSERT
("noÖrevious fragment,Åhis must beÅhe first fragment!",

412 
ùr
->
p
 =
NULL
);

415 
ùr
->
p
 = 
√w_p
;

421 i‡((
ùr
->
Êags
 & 
IP_REASS_FLAG_LASTFRAG
) != 0) {

423 i‡(
vÆid
) {

426 i‡(((
ù_ªass_hñ≥r
*)
ùr
->
p
->
∑ylﬂd
)->
°¨t
 != 0) {

427 
vÆid
 = 0;

430 
ùrh_¥ev
 = 
ùrh
;

431 
q
 = 
ùrh
->
√xt_pbuf
;

432 
q
 !
NULL
) {

433 
ùrh
 = (
ù_ªass_hñ≥r
*)
q
->
∑ylﬂd
;

434 i‡(
ùrh_¥ev
->
íd
 !
ùrh
->
°¨t
) {

435 
vÆid
 = 0;

438 
ùrh_¥ev
 = 
ùrh
;

439 
q
 = 
ùrh
->
√xt_pbuf
;

443 i‡(
vÆid
) {

444 
	`LWIP_ASSERT
("ßnôy check", 
ùr
->
p
 !
NULL
);

445 
	`LWIP_ASSERT
("sanity check",

446 ((
ù_ªass_hñ≥r
*)
ùr
->
p
->
∑ylﬂd
Ë!
ùrh
);

447 
	`LWIP_ASSERT
("validate_datagram:next_pbuf!=NULL",

448 
ùrh
->
√xt_pbuf
 =
NULL
);

449 
	`LWIP_ASSERT
("validate_datagram:datagramÉnd!=datagramÜen",

450 
ùrh
->
íd
 =
ùr
->
d©agøm_Àn
);

457  
vÆid
;

461 #i‡
IP_REASS_CHECK_OVERLAP


462 
‰ìpbuf
:

463 
ù_ªass_pbufcou¡
 -
	`pbuf_˛í
(
√w_p
);

464 
	`pbuf_‰ì
(
√w_p
);

467 
	}
}

475 
pbuf
 *

476 
	$ù_ªass
(
pbuf
 *
p
)

478 
pbuf
 *
r
;

479 
ù_hdr
 *
‰aghdr
;

480 
ù_ªassd©a
 *
ùr
;

481 
ù_ªass_hñ≥r
 *
ùrh
;

482 
u16_t
 
off£t
, 
Àn
;

483 
u8_t
 
˛í
;

484 
ù_ªassd©a
 *
ùr_¥ev
 = 
NULL
;

486 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
ªcv
);

487 
	`¢mp_öc_ùªasmªqds
();

489 
‰aghdr
 = (
ù_hdr
*)
p
->
∑ylﬂd
;

491 i‡((
	`IPH_HL
(
‰aghdr
Ë* 4Ë!
IP_HLEN
) {

492 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,("ip_reass: IP options currentlyÇot supported!\n"));

493 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
îr
);

494 
nuŒªtu∫
;

497 
off£t
 = (
	`¡ohs
(
	`IPH_OFFSET
(
‰aghdr
)Ë& 
IP_OFFMASK
) * 8;

498 
Àn
 = 
	`¡ohs
(
	`IPH_LEN
(
‰aghdr
)Ë- 
	`IPH_HL
(fraghdr) * 4;

501 
˛í
 = 
	`pbuf_˛í
(
p
);

502 i‡((
ù_ªass_pbufcou¡
 + 
˛í
Ë> 
IP_REASS_MAX_PBUFS
) {

503 #i‡
IP_REASS_FREE_OLDEST


504 i‡(!
	`ù_ªass_ªmove_ﬁde°_d©agøm
(
‰aghdr
, 
˛í
) ||

505 ((
ù_ªass_pbufcou¡
 + 
˛í
Ë> 
IP_REASS_MAX_PBUFS
))

509 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,("ip_reass: Overflow condition:Öbufct=%d, clen=%d, MAX=%d\n",

510 
ù_ªass_pbufcou¡
, 
˛í
, 
IP_REASS_MAX_PBUFS
));

511 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
memîr
);

514 
nuŒªtu∫
;

520 
ùr
 = 
ªassd©agøms
; i¥ !
NULL
; i¥ = i¥->
√xt
) {

524 i‡(
	`IP_ADDRESSES_AND_ID_MATCH
(&
ùr
->
ùhdr
, 
‰aghdr
)) {

525 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
, ("ù_ªass: m©chögÖªviou†‰agmíàID=%"
X16_F
"\n",

526 
	`¡ohs
(
	`IPH_ID
(
‰aghdr
))));

527 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
ˇchehô
);

530 
ùr_¥ev
 = 
ùr
;

533 i‡(
ùr
 =
NULL
) {

535 
ùr
 = 
	`ù_ªass_íqueue_√w_d©agøm
(
‰aghdr
, 
˛í
);

537 if(
ùr
 =
NULL
) {

538 
nuŒªtu∫
;

541 i‡(((
	`¡ohs
(
	`IPH_OFFSET
(
‰aghdr
)Ë& 
IP_OFFMASK
) == 0) &&

542 ((
	`¡ohs
(
	`IPH_OFFSET
(&
ùr
->
ùhdr
)Ë& 
IP_OFFMASK
) != 0)) {

547 
	`SMEMCPY
(&
ùr
->
ùhdr
, 
‰aghdr
, 
IP_HLEN
);

552 
ù_ªass_pbufcou¡
 +
˛í
;

558 i‡((
	`IPH_OFFSET
(
‰aghdr
Ë& 
	`PP_NTOHS
(
IP_MF
)) == 0) {

559 
ùr
->
Êags
 |
IP_REASS_FLAG_LASTFRAG
;

560 
ùr
->
d©agøm_Àn
 = 
off£t
 + 
Àn
;

561 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,

562 ("ù_ªass:Üa° føgmíà£í,ÅŸÆÜí %"
S16_F
"\n",

563 
ùr
->
d©agøm_Àn
));

567 i‡(
	`ù_ªass_chaö_‰ag_öto_d©agøm_™d_vÆid©e
(
ùr
, 
p
)) {

570 
ùr
->
d©agøm_Àn
 +
IP_HLEN
;

573 
r
 = ((
ù_ªass_hñ≥r
*)
ùr
->
p
->
∑ylﬂd
)->
√xt_pbuf
;

576 
‰aghdr
 = (
ù_hdr
*)(
ùr
->
p
->
∑ylﬂd
);

577 
	`SMEMCPY
(
‰aghdr
, &
ùr
->
ùhdr
, 
IP_HLEN
);

578 
	`IPH_LEN_SET
(
‰aghdr
, 
	`ht⁄s
(
ùr
->
d©agøm_Àn
));

579 
	`IPH_OFFSET_SET
(
‰aghdr
, 0);

580 
	`IPH_CHKSUM_SET
(
‰aghdr
, 0);

582 
	`IPH_CHKSUM_SET
(
‰aghdr
, 
	`öë_chksum
(‰aghdr, 
IP_HLEN
));

584 
p
 = 
ùr
->p;

587 
r
 !
NULL
) {

588 
ùrh
 = (
ù_ªass_hñ≥r
*)
r
->
∑ylﬂd
;

591 
	`pbuf_hódî
(
r
, -
IP_HLEN
);

592 
	`pbuf_ˇt
(
p
, 
r
);

593 
r
 = 
ùrh
->
√xt_pbuf
;

596 
	`ù_ªass_dequeue_d©agøm
(
ùr
, 
ùr_¥ev
);

599 
ù_ªass_pbufcou¡
 -
	`pbuf_˛í
(
p
);

602  
p
;

605 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,("ù_ªass_pbufcou¡: %d out\n", 
ù_ªass_pbufcou¡
));

606  
NULL
;

608 
nuŒªtu∫
:

609 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,("ip_reass:Çullreturn\n"));

610 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
dr›
);

611 
	`pbuf_‰ì
(
p
);

612  
NULL
;

613 
	}
}

616 #i‡
IP_FRAG


617 #i‡
IP_FRAG_USES_STATIC_BUF


618 
u8_t
 
	gbuf
[
LWIP_MEM_ALIGN_SIZE
(
IP_FRAG_MAX_MTU
 + 
MEM_ALIGNMENT
 - 1)];

621 #i‡!
LWIP_NETIF_TX_SINGLE_PBUF


623 
pbuf_cu°om_ªf
*

624 
	$ù_‰ag_Æloc_pbuf_cu°om_ªf
()

626  (
pbuf_cu°om_ªf
*)
	`memp_mÆloc
(
MEMP_FRAG_PBUF
);

627 
	}
}

631 
	$ù_‰ag_‰ì_pbuf_cu°om_ªf
(
pbuf_cu°om_ªf
* 
p
)

633 
	`LWIP_ASSERT
("∞!NULL", 
p
 !
NULL
);

634 
	`memp_‰ì
(
MEMP_FRAG_PBUF
, 
p
);

635 
	}
}

640 
	$ù‰ag_‰ì_pbuf_cu°om
(
pbuf
 *
p
)

642 
pbuf_cu°om_ªf
 *
p¸
 = (pbuf_cu°om_ªf*)
p
;

643 
	`LWIP_ASSERT
("p¸ !NULL", 
p¸
 !
NULL
);

644 
	`LWIP_ASSERT
("p¸ =p", (*)
p¸
 =(*)
p
);

645 i‡(
p¸
->
‹igöÆ
 !
NULL
) {

646 
	`pbuf_‰ì
(
p¸
->
‹igöÆ
);

648 
	`ù_‰ag_‰ì_pbuf_cu°om_ªf
(
p¸
);

649 
	}
}

666 
îr_t


667 
	$ù_‰ag
(
pbuf
 *
p
, 
√tif
 *√tif, 
ù_addr_t
 *
de°
)

669 
pbuf
 *
ømbuf
;

670 #i‡
IP_FRAG_USES_STATIC_BUF


671 
pbuf
 *
hódî
;

673 #i‡!
LWIP_NETIF_TX_SINGLE_PBUF


674 
pbuf
 *
√wpbuf
;

676 
ù_hdr
 *
‹igöÆ_ùhdr
;

678 
ù_hdr
 *
ùhdr
;

679 
u16_t
 
nfb
;

680 
u16_t
 
À·
, 
c›
;

681 
u16_t
 
mtu
 = 
√tif
->mtu;

682 
u16_t
 
ofo
, 
omf
;

683 
u16_t
 
œ°
;

684 
u16_t
 
poff
 = 
IP_HLEN
;

685 
u16_t
 
tmp
;

686 #i‡!
IP_FRAG_USES_STATIC_BUF
 && !
LWIP_NETIF_TX_SINGLE_PBUF


687 
u16_t
 
√wpbuÊí
 = 0;

688 
u16_t
 
À·_to_c›y
;

692 #i‡
IP_FRAG_USES_STATIC_BUF


697 
ømbuf
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 0, 
PBUF_REF
);

698 i‡(
ømbuf
 =
NULL
) {

699 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
, ("ip_frag:Öbuf_alloc(PBUF_LINK, 0, PBUF_REF) failed\n"));

700  
ERR_MEM
;

702 
ømbuf
->
tŸ_Àn
 =Ñambuf->
Àn
 = 
mtu
;

703 
ømbuf
->
∑ylﬂd
 = 
	`LWIP_MEM_ALIGN
((*)
buf
);

706 
ùhdr
 = (
ù_hdr
 *)
ømbuf
->
∑ylﬂd
;

707 
	`SMEMCPY
(
ùhdr
, 
p
->
∑ylﬂd
, 
IP_HLEN
);

709 
‹igöÆ_ùhdr
 = (
ù_hdr
 *)
p
->
∑ylﬂd
;

710 
ùhdr
 = 
‹igöÆ_ùhdr
;

714 
tmp
 = 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
));

715 
ofo
 = 
tmp
 & 
IP_OFFMASK
;

716 
omf
 = 
tmp
 & 
IP_MF
;

718 
À·
 = 
p
->
tŸ_Àn
 - 
IP_HLEN
;

720 
nfb
 = (
mtu
 - 
IP_HLEN
) / 8;

722 
À·
) {

723 
œ°
 = (
À·
 <
mtu
 - 
IP_HLEN
);

726 
tmp
 = 
omf
 | (
IP_OFFMASK
 & (
ofo
));

727 i‡(!
œ°
) {

728 
tmp
 =Åm∞| 
IP_MF
;

732 
c›
 = 
œ°
 ? 
À·
 : 
nfb
 * 8;

734 #i‡
IP_FRAG_USES_STATIC_BUF


735 
poff
 +
	`pbuf_c›y_∑πül
(
p
, (
u8_t
*)
ùhdr
 + 
IP_HLEN
, 
c›
,Öoff);

737 #i‡
LWIP_NETIF_TX_SINGLE_PBUF


738 
ømbuf
 = 
	`pbuf_Æloc
(
PBUF_IP
, 
c›
, 
PBUF_RAM
);

739 i‡(
ømbuf
 =
NULL
) {

740  
ERR_MEM
;

742 
	`LWIP_ASSERT
("thisÇeedsáÖbuf in oneÖiece!",

743 (
ømbuf
->
Àn
 =ømbuf->
tŸ_Àn
Ë&& (ømbuf->
√xt
 =
NULL
));

744 
poff
 +
	`pbuf_c›y_∑πül
(
p
, 
ømbuf
->
∑ylﬂd
, 
c›
,Öoff);

746 if(
	`pbuf_hódî
(
ømbuf
, 
IP_HLEN
)) {

747 
	`pbuf_‰ì
(
ømbuf
);

748  
ERR_MEM
;

751 
	`SMEMCPY
(
ømbuf
->
∑ylﬂd
, 
‹igöÆ_ùhdr
, 
IP_HLEN
);

752 
ùhdr
 = 
ømbuf
->
∑ylﬂd
;

759 
ømbuf
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 
IP_HLEN
, 
PBUF_RAM
);

760 i‡(
ømbuf
 =
NULL
) {

761  
ERR_MEM
;

763 
	`LWIP_ASSERT
("thisÇeedsáÖbuf in oneÖiece!",

764 (
p
->
Àn
 >(
IP_HLEN
)));

765 
	`SMEMCPY
(
ømbuf
->
∑ylﬂd
, 
‹igöÆ_ùhdr
, 
IP_HLEN
);

766 
ùhdr
 = (
ù_hdr
 *)
ømbuf
->
∑ylﬂd
;

769 
p
->
∑ylﬂd
 = (
u8_t
 *Ì->∑ylﬂd + 
poff
;

770 
p
->
Àn
 -
poff
;

772 
À·_to_c›y
 = 
c›
;

773 
À·_to_c›y
) {

774 
pbuf_cu°om_ªf
 *
p¸
;

775 
√wpbuÊí
 = (
À·_to_c›y
 < 
p
->
Àn
) ?Üeft_to_copy :Ö->len;

777 i‡(!
√wpbuÊí
) {

778 
p
 =Ö->
√xt
;

781 
p¸
 = 
	`ù_‰ag_Æloc_pbuf_cu°om_ªf
();

782 i‡(
p¸
 =
NULL
) {

783 
	`pbuf_‰ì
(
ømbuf
);

784  
ERR_MEM
;

787 
√wpbuf
 = 
	`pbuf_Ælo˚d_cu°om
(
PBUF_RAW
, 
√wpbuÊí
, 
PBUF_REF
, &
p¸
->
pc
, 
p
->
∑ylﬂd
,Çewpbuflen);

788 i‡(
√wpbuf
 =
NULL
) {

789 
	`ù_‰ag_‰ì_pbuf_cu°om_ªf
(
p¸
);

790 
	`pbuf_‰ì
(
ømbuf
);

791  
ERR_MEM
;

793 
	`pbuf_ªf
(
p
);

794 
p¸
->
‹igöÆ
 = 
p
;

795 
p¸
->
pc
.
cu°om_‰ì_fun˘i⁄
 = 
ù‰ag_‰ì_pbuf_cu°om
;

800 
	`pbuf_ˇt
(
ømbuf
, 
√wpbuf
);

801 
À·_to_c›y
 -
√wpbuÊí
;

802 i‡(
À·_to_c›y
) {

803 
p
 =Ö->
√xt
;

806 
poff
 = 
√wpbuÊí
;

811 
	`IPH_OFFSET_SET
(
ùhdr
, 
	`ht⁄s
(
tmp
));

812 
	`IPH_LEN_SET
(
ùhdr
, 
	`ht⁄s
(
c›
 + 
IP_HLEN
));

813 
	`IPH_CHKSUM_SET
(
ùhdr
, 0);

814 
	`IPH_CHKSUM_SET
(
ùhdr
, 
	`öë_chksum
(ùhdr, 
IP_HLEN
));

816 #i‡
IP_FRAG_USES_STATIC_BUF


817 i‡(
œ°
) {

818 
	`pbuf_ªÆloc
(
ømbuf
, 
À·
 + 
IP_HLEN
);

826 
hódî
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 0, 
PBUF_RAM
);

827 i‡(
hódî
 !
NULL
) {

828 
	`pbuf_chaö
(
hódî
, 
ømbuf
);

829 
√tif
->
	`ouçut
“ëif, 
hódî
, 
de°
);

830 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
xmô
);

831 
	`¢mp_öc_ù‰ag¸óãs
();

832 
	`pbuf_‰ì
(
hódî
);

834 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
, ("ip_frag:Öbuf_alloc() for header failed\n"));

835 
	`pbuf_‰ì
(
ømbuf
);

836  
ERR_MEM
;

842 
√tif
->
	`ouçut
“ëif, 
ømbuf
, 
de°
);

843 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
xmô
);

852 
	`pbuf_‰ì
(
ømbuf
);

854 
À·
 -
c›
;

855 
ofo
 +
nfb
;

857 #i‡
IP_FRAG_USES_STATIC_BUF


858 
	`pbuf_‰ì
(
ømbuf
);

860 
	`¢mp_öc_ù‰agoks
();

861  
ERR_OK
;

862 
	}
}

	@core/ipv6/icmp6.c

36 
	~"lwù/›t.h
"

38 #i‡
LWIP_ICMP


40 
	~"lwù/icmp.h
"

41 
	~"lwù/öë.h
"

42 
	~"lwù/ù.h
"

43 
	~"lwù/def.h
"

44 
	~"lwù/°©s.h
"

47 
	$icmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

49 
u8_t
 
ty≥
;

50 
icmp_echo_hdr
 *
õcho
;

51 
ù_hdr
 *
ùhdr
;

52 
ù_addr
 
tm∑ddr
;

54 
	`ICMP_STATS_INC
(
icmp
.
ªcv
);

58 
ty≥
 = ((
u8_t
 *)
p
->
∑ylﬂd
)[0];

60 
ty≥
) {

61 
ICMP6_ECHO
:

62 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input:Öing\n"));

64 i‡(
p
->
tŸ_Àn
 < (
icmp_echo_hdr
)) {

65 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input: bad ICMPÉchoÑeceived\n"));

67 
	`pbuf_‰ì
(
p
);

68 
	`ICMP_STATS_INC
(
icmp
.
À√º
);

71 
õcho
 = 
p
->
∑ylﬂd
;

72 
ùhdr
 = (
ù_hdr
 *)((
u8_t
 *)
p
->
∑ylﬂd
 - 
IP_HLEN
);

73 i‡(
	`öë_chksum_pbuf
(
p
) != 0) {

74 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_öput: checksum faûed f‹Ñe˚ived ICMPÉchÿ(%"
X16_F
")\n", 
	`öë_chksum_p£udo
(
p
, &(
ùhdr
->
§c
), &(ùhdr->
de°
), 
IP_PROTO_ICMP
,Ö->
tŸ_Àn
)));

75 
	`ICMP_STATS_INC
(
icmp
.
chkîr
);

78 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp:Ö->À¿%"
S16_F
"Ö->tŸ_À¿%"S16_F"\n", 
p
->
Àn
,Ö->
tŸ_Àn
));

79 
	`ù_addr_£t
(&
tm∑ddr
, &(
ùhdr
->
§c
));

80 
	`ù_addr_£t
(&(
ùhdr
->
§c
), &(ùhdr->
de°
));

81 
	`ù_addr_£t
(&(
ùhdr
->
de°
), &
tm∑ddr
);

82 
õcho
->
ty≥
 = 
ICMP6_ER
;

84 i‡(
õcho
->
chksum
 >
	`ht⁄s
(0xfff‡- (
ICMP6_ECHO
 << 8))) {

85 
õcho
->
chksum
 +
	`ht⁄s
(
ICMP6_ECHO
 << 8) + 1;

87 
õcho
->
chksum
 +
	`ht⁄s
(
ICMP6_ECHO
 << 8);

89 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_öput: checksum faûed f‹Ñe˚ived ICMPÉchÿ(%"
X16_F
")\n", 
	`öë_chksum_p£udo
(
p
, &(
ùhdr
->
§c
), &(ùhdr->
de°
), 
IP_PROTO_ICMP
,Ö->
tŸ_Àn
)));

90 
	`ICMP_STATS_INC
(
icmp
.
xmô
);

93 
	`ù_ouçut_if
 (
p
, &(
ùhdr
->
§c
), 
IP_HDRINCL
,

94 
ùhdr
->
h›lim
, 
IP_PROTO_ICMP
, 
öp
);

97 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_öput: ICMPÅy≥ %"
S16_F
"ÇŸ suµ‹ãd.\n", (
s16_t
)
ty≥
));

98 
	`ICMP_STATS_INC
(
icmp
.
¥Ÿîr
);

99 
	`ICMP_STATS_INC
(
icmp
.
dr›
);

102 
	`pbuf_‰ì
(
p
);

103 
	}
}

106 
	$icmp_de°_uƒóch
(
pbuf
 *
p
, 
icmp_dur_ty≥
 
t
)

108 
pbuf
 *
q
;

109 
ù_hdr
 *
ùhdr
;

110 
icmp_dur_hdr
 *
idur
;

113 
q
 = 
	`pbuf_Æloc
(
PBUF_IP
, 8 + 
IP_HLEN
 + 8, 
PBUF_RAM
);

115 i‡(
q
 =
NULL
) {

116 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_dest_unreach: failedÅoállocateÖbuf for ICMPÖacket.\n"));

117 
	`pbuf_‰ì
(
p
);

120 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold icmp message",

121 (
q
->
Àn
 >(8 + 
IP_HLEN
 + 8)));

123 
ùhdr
 = 
p
->
∑ylﬂd
;

125 
idur
 = 
q
->
∑ylﬂd
;

126 
idur
->
ty≥
 = (
u8_t
)
ICMP6_DUR
;

127 
idur
->
icode
 = (
u8_t
)
t
;

129 
	`SMEMCPY
((
u8_t
 *)
q
->
∑ylﬂd
 + 8, 
p
->∑ylﬂd, 
IP_HLEN
 + 8);

132 
idur
->
chksum
 = 0;

133 
idur
->
chksum
 = 
	`öë_chksum
(idur, 
q
->
Àn
);

134 
	`ICMP_STATS_INC
(
icmp
.
xmô
);

136 
	`ù_ouçut
(
q
, 
NULL
,

137 (
ù_addr
 *)&(
ùhdr
->
§c
), 
ICMP_TTL
, 
IP_PROTO_ICMP
);

138 
	`pbuf_‰ì
(
q
);

139 
	}
}

142 
	$icmp_time_ex˚eded
(
pbuf
 *
p
, 
icmp_ã_ty≥
 
t
)

144 
pbuf
 *
q
;

145 
ù_hdr
 *
ùhdr
;

146 
icmp_ã_hdr
 *
ãhdr
;

148 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_time_exceeded\n"));

151 
q
 = 
	`pbuf_Æloc
(
PBUF_IP
, 8 + 
IP_HLEN
 + 8, 
PBUF_RAM
);

153 i‡(
q
 =
NULL
) {

154 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_dest_unreach: failedÅoállocateÖbuf for ICMPÖacket.\n"));

155 
	`pbuf_‰ì
(
p
);

158 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold icmp message",

159 (
q
->
Àn
 >(8 + 
IP_HLEN
 + 8)));

161 
ùhdr
 = 
p
->
∑ylﬂd
;

163 
ãhdr
 = 
q
->
∑ylﬂd
;

164 
ãhdr
->
ty≥
 = (
u8_t
)
ICMP6_TE
;

165 
ãhdr
->
icode
 = (
u8_t
)
t
;

168 
	`SMEMCPY
((
u8_t
 *)
q
->
∑ylﬂd
 + 8, (u8_à*)
p
->∑ylﬂd, 
IP_HLEN
 + 8);

171 
ãhdr
->
chksum
 = 0;

172 
ãhdr
->
chksum
 = 
	`öë_chksum
—ehdr, 
q
->
Àn
);

173 
	`ICMP_STATS_INC
(
icmp
.
xmô
);

174 
	`ù_ouçut
(
q
, 
NULL
,

175 (
ù_addr
 *)&(
ùhdr
->
§c
), 
ICMP_TTL
, 
IP_PROTO_ICMP
);

176 
	`pbuf_‰ì
(
q
);

177 
	}
}

	@core/ipv6/inet6.c

40 
	~"lwù/›t.h
"

42 
	~"lwù/def.h
"

43 
	~"lwù/öë.h
"

54 
u32_t


55 
	$chksum
(*
d©≠å
, 
u16_t
 
Àn
)

57 
u16_t
 *
sd©≠å
 = 
d©≠å
;

58 
u32_t
 
acc
;

61 
acc
 = 0; 
Àn
 > 1;Üen -= 2) {

62 
acc
 +*
sd©≠å
++;

66 i‡(
Àn
 == 1) {

67 
acc
 +
	`ht⁄s
((
u16_t
)(*(
u8_t
 *)
d©≠å
) << 8);

70  
acc
;

72 
	}
}

79 
u16_t


80 
	$öë_chksum_p£udo
(
pbuf
 *
p
,

81 
ù_addr
 *
§c
, ù_add∏*
de°
,

82 
u8_t
 
¥Ÿo
, 
u32_t
 
¥Ÿo_Àn
)

84 
u32_t
 
acc
;

85 
pbuf
 *
q
;

86 
u8_t
 
sw≠≥d
, 
i
;

88 
acc
 = 0;

89 
sw≠≥d
 = 0;

90 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

91 
acc
 +
	`chksum
(
q
->
∑ylﬂd
, q->
Àn
);

92 
acc
 >> 16) {

93 
acc
 = (acc & 0xffff) + (acc >> 16);

95 i‡(
q
->
Àn
 % 2 != 0) {

96 
sw≠≥d
 = 1 - swapped;

97 
acc
 = ((acc & 0xff) << 8) | ((acc & 0xff00) >> 8);

101 i‡(
sw≠≥d
) {

102 
acc
 = ((acc & 0xff) << 8) | ((acc & 0xff00) >> 8);

105 
i
 = 0; i < 8; i++) {

106 
acc
 +((
u16_t
 *)
§c
->
addr
)[
i
] & 0xffff;

107 
acc
 +((
u16_t
 *)
de°
->
addr
)[
i
] & 0xffff;

108 
acc
 >> 16) {

109 
acc
 = (acc & 0xffff) + (acc >> 16);

112 
acc
 +(
u16_t
)
	`ht⁄s
((u16_t)
¥Ÿo
);

113 
acc
 +((
u16_t
 *)&
¥Ÿo_Àn
)[0] & 0xffff;

114 
acc
 +((
u16_t
 *)&
¥Ÿo_Àn
)[1] & 0xffff;

116 
acc
 >> 16) {

117 
acc
 = (acc & 0xffff) + (acc >> 16);

119  ~(
acc
 & 0xffff);

120 
	}
}

128 
u16_t


129 
	$öë_chksum
(*
d©≠å
, 
u16_t
 
Àn
)

131 
u32_t
 
acc
, 
sum
;

133 
acc
 = 
	`chksum
(
d©≠å
, 
Àn
);

134 
sum
 = (
acc
 & 0xffff) + (acc >> 16);

135 
sum
 += (sum >> 16);

136  ~(
sum
 & 0xffff);

137 
	}
}

139 
u16_t


140 
	$öë_chksum_pbuf
(
pbuf
 *
p
)

142 
u32_t
 
acc
;

143 
pbuf
 *
q
;

144 
u8_t
 
sw≠≥d
;

146 
acc
 = 0;

147 
sw≠≥d
 = 0;

148 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

149 
acc
 +
	`chksum
(
q
->
∑ylﬂd
, q->
Àn
);

150 
acc
 >> 16) {

151 
acc
 = (acc & 0xffff) + (acc >> 16);

153 i‡(
q
->
Àn
 % 2 != 0) {

154 
sw≠≥d
 = 1 - swapped;

155 
acc
 = (acc & 0xff << 8) | (acc & 0xff00 >> 8);

159 i‡(
sw≠≥d
) {

160 
acc
 = ((acc & 0xff) << 8) | ((acc & 0xff00) >> 8);

162  ~(
acc
 & 0xffff);

163 
	}
}

	@core/ipv6/ip6.c

42 
	~"lwù/›t.h
"

44 
	~"lwù/def.h
"

45 
	~"lwù/mem.h
"

46 
	~"lwù/ù.h
"

47 
	~"lwù/öë.h
"

48 
	~"lwù/√tif.h
"

49 
	~"lwù/icmp.h
"

50 
	~"lwù/udp.h
"

51 
	~"lwù/t˝_im∂.h
"

53 
	~"lwù/°©s.h
"

55 
	~"¨ch/≥rf.h
"

63 
	$ù_öô
()

65 
	}
}

74 
√tif
 *

75 
	$ù_rouã
(
ù_addr
 *
de°
)

77 
√tif
 *netif;

79 
√tif
 = 
√tif_li°
;Çëi‡!
NULL
;Çëi‡√tif->
√xt
) {

80 i‡(
	`ù_addr_√tcmp
(
de°
, &(
√tif
->
ù_addr
), &“ëif->
√tmask
))) {

81  
√tif
;

85  
√tif_deÁu…
;

86 
	}
}

96 
	$ù_f‹w¨d
(
pbuf
 *
p
, 
ù_hdr
 *
ùhdr
)

98 
√tif
 *netif;

100 
PERF_START
;

102 i‡((
√tif
 = 
	`ù_rouã
((
ù_addr
 *)&(
ùhdr
->
de°
))Ë=
NULL
) {

104 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_input:Ço forwardingÑoute found for "));

105 #i‡
IP_DEBUG


106 
	`ù_addr_debug_¥öt
(
IP_DEBUG
, ((
ù_addr
 *)&(
ùhdr
->
de°
)));

108 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("\n"));

109 
	`pbuf_‰ì
(
p
);

113 i‡(--
ùhdr
->
h›lim
 == 0) {

114 #i‡
LWIP_ICMP


116 i‡(
ùhdr
->
√xthdr
 !
IP_PROTO_ICMP
) {

117 
	`icmp_time_ex˚eded
(
p
, 
ICMP_TE_TTL
);

120 
	`pbuf_‰ì
(
p
);

132 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_forward: forwardingÖacketÅo "));

133 #i‡
IP_DEBUG


134 
	`ù_addr_debug_¥öt
(
IP_DEBUG
, ((
ù_addr
 *)&(
ùhdr
->
de°
)));

136 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("\n"));

138 
	`IP_STATS_INC
(
ù
.
fw
);

139 
	`IP_STATS_INC
(
ù
.
xmô
);

141 
	`PERF_STOP
("ip_forward");

143 
√tif
->
	`ouçut
“ëif, 
p
, (
ù_addr
 *)&(
ùhdr
->
de°
));

144 
	}
}

157 
	$ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
) {

158 
ù_hdr
 *
ùhdr
;

159 
√tif
 *netif;

162 
PERF_START
;

164 #i‡
IP_DEBUG


165 
	`ù_debug_¥öt
(
p
);

169 
	`IP_STATS_INC
(
ù
.
ªcv
);

172 
ùhdr
 = 
p
->
∑ylﬂd
;

175 i‡(
ùhdr
->
v
 != 6) {

176 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("IPÖacket dropped dueÅo bad versionÇumber\n"));

177 #i‡
IP_DEBUG


178 
	`ù_debug_¥öt
(
p
);

180 
	`pbuf_‰ì
(
p
);

181 
	`IP_STATS_INC
(
ù
.
îr
);

182 
	`IP_STATS_INC
(
ù
.
dr›
);

187 
√tif
 = 
√tif_li°
;Çëi‡!
NULL
;Çëi‡√tif->
√xt
) {

188 #i‡
IP_DEBUG


189 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_input: iphdr->dest "));

190 
	`ù_addr_debug_¥öt
(
IP_DEBUG
, ((
ù_addr
 *)&(
ùhdr
->
de°
)));

191 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("netif->ip_addr "));

192 
	`ù_addr_debug_¥öt
(
IP_DEBUG
, ((
ù_addr
 *)&(
ùhdr
->
de°
)));

193 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("\n"));

195 i‡(
	`ù_addr_cmp
(&(
ùhdr
->
de°
), &(
√tif
->
ù_addr
))) {

201 i‡(
√tif
 =
NULL
) {

203 #i‡
IP_FORWARD


204 
	`ù_f‹w¨d
(
p
, 
ùhdr
);

206 
	`pbuf_‰ì
(
p
);

210 
	`pbuf_ªÆloc
(
p
, 
IP_HLEN
 + 
	`¡ohs
(
ùhdr
->
Àn
));

213 #i‡
IP_DEBUG


219 if(
	`pbuf_hódî
(
p
, -
IP_HLEN
)) {

220 
	`LWIP_ASSERT
("Can't move over header inÖacket", 0);

224 
ùhdr
->
√xthdr
) {

225 
IP_PROTO_UDP
:

226 
	`udp_öput
(
p
, 
öp
);

228 
IP_PROTO_TCP
:

229 
	`t˝_öput
(
p
, 
öp
);

231 #i‡
LWIP_ICMP


232 
IP_PROTO_ICMP
:

233 
	`icmp_öput
(
p
, 
öp
);

237 #i‡
LWIP_ICMP


239 
	`icmp_de°_uƒóch
(
p
, 
ICMP_DUR_PROTO
);

241 
	`pbuf_‰ì
(
p
);

242 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("Unsuµ‹ãdÅøn•‹à¥Ÿocﬁ %"
U16_F
"\n",

243 
ùhdr
->
√xthdr
));

245 
	`IP_STATS_INC
(
ù
.
¥Ÿîr
);

246 
	`IP_STATS_INC
(
ù
.
dr›
);

248 
	`PERF_STOP
("ip_input");

249 
	}
}

259 
îr_t


260 
	$ù_ouçut_if
 (
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

261 
u8_t
 
âl
,

262 
u8_t
 
¥Ÿo
, 
√tif
 *netif)

264 
ù_hdr
 *
ùhdr
;

266 
PERF_START
;

268 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("À¿%"
U16_F
"ÅŸ_À¿%"U16_F"\n", 
p
->
Àn
,Ö->
tŸ_Àn
));

269 i‡(
	`pbuf_hódî
(
p
, 
IP_HLEN
)) {

270 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_output:ÇotÉnoughÑoom for IP header inÖbuf\n"));

271 
	`IP_STATS_INC
(
ù
.
îr
);

273  
ERR_BUF
;

275 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("À¿%"
U16_F
"ÅŸ_À¿%"U16_F"\n", 
p
->
Àn
,Ö->
tŸ_Àn
));

277 
ùhdr
 = 
p
->
∑ylﬂd
;

280 i‡(
de°
 !
IP_HDRINCL
) {

281 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("!IP_HDRLINCL\n"));

282 
ùhdr
->
h›lim
 = 
âl
;

283 
ùhdr
->
√xthdr
 = 
¥Ÿo
;

284 
ùhdr
->
Àn
 = 
	`ht⁄s
(
p
->
tŸ_Àn
 - 
IP_HLEN
);

285 
	`ù_addr_£t
(&(
ùhdr
->
de°
), dest);

287 
ùhdr
->
v
 = 6;

289 i‡(
	`ù_addr_ißny
(
§c
)) {

290 
	`ù_addr_£t
(&(
ùhdr
->
§c
), &(
√tif
->
ù_addr
));

292 
	`ù_addr_£t
(&(
ùhdr
->
§c
), src);

296 
de°
 = &(
ùhdr
->dest);

299 
	`IP_STATS_INC
(
ù
.
xmô
);

301 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_ouçut_if: %c%¯÷í %"
U16_F
")\n", 
√tif
->
«me
[0],Çëif->«me[1], 
p
->
tŸ_Àn
));

302 #i‡
IP_DEBUG


303 
	`ù_debug_¥öt
(
p
);

306 
	`PERF_STOP
("ip_output_if");

307  
√tif
->
	`ouçut
“ëif, 
p
, 
de°
);

308 
	}
}

316 
îr_t


317 
	$ù_ouçut
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

318 
u8_t
 
âl
, u8_à
¥Ÿo
)

320 
√tif
 *netif;

321 i‡((
√tif
 = 
	`ù_rouã
(
de°
)Ë=
NULL
) {

322 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_ouçut: NÿrouãÅÿ0x%"
X32_F
"\n", 
de°
->
addr
));

323 
	`IP_STATS_INC
(
ù
.
πîr
);

324  
ERR_RTE
;

327  
	`ù_ouçut_if
 (
p
, 
§c
, 
de°
, 
âl
, 
¥Ÿo
, 
√tif
);

328 
	}
}

330 #i‡
LWIP_NETIF_HWADDRHINT


331 
îr_t


332 
	$ù_ouçut_höãd
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

333 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
, u8_à*
addr_höt
)

335 
√tif
 *netif;

336 
îr_t
 
îr
;

338 i‡((
√tif
 = 
	`ù_rouã
(
de°
)Ë=
NULL
) {

339 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_ouçut: NÿrouãÅÿ0x%"
X32_F
"\n", 
de°
->
addr
));

340 
	`IP_STATS_INC
(
ù
.
πîr
);

341  
ERR_RTE
;

344 
√tif
->
addr_höt
 =áddr_hint;

345 
îr
 = 
	`ù_ouçut_if
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
, 
√tif
);

346 
√tif
->
addr_höt
 = 
NULL
;

348  
îr
;

349 
	}
}

352 #i‡
IP_DEBUG


354 
	$ù_debug_¥öt
(
pbuf
 *
p
)

356 
ù_hdr
 *
ùhdr
 = 
p
->
∑ylﬂd
;

358 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("IP header:\n"));

359 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

360 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("|%2"
S16_F
" | %"
X16_F
"%"X16_F" | %"X16_F"%"X16_F" | (v,Åraffic class, flowÜabel)\n",

361 
ùhdr
->
v
,

362 
ùhdr
->
t˛ass1
, iphdr->
t˛ass2
,

363 
ùhdr
->
Êow1
, iphdr->
Êow2
));

364 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

365 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %5"
U16_F
" | %2"U16_F" | %2"U16_F" | (len,Çexthdr, hoplim)\n",

366 
	`¡ohs
(
ùhdr
->
Àn
),

367 
ùhdr
->
√xthdr
,

368 
ùhdr
->
h›lim
));

369 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

370 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (src)\n",

371 (
	`¡ohl
(
ùhdr
->
§c
.
addr
[0]) >> 16) & 0xffff,

372 
	`¡ohl
(
ùhdr
->
§c
.
addr
[0]) & 0xffff));

373 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (src)\n",

374 (
	`¡ohl
(
ùhdr
->
§c
.
addr
[1]) >> 16) & 0xffff,

375 
	`¡ohl
(
ùhdr
->
§c
.
addr
[1]) & 0xffff));

376 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (src)\n",

377 (
	`¡ohl
(
ùhdr
->
§c
.
addr
[2]) >> 16) & 0xffff,

378 
	`¡ohl
(
ùhdr
->
§c
.
addr
[2]) & 0xffff));

379 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (src)\n",

380 (
	`¡ohl
(
ùhdr
->
§c
.
addr
[3]) >> 16) & 0xffff,

381 
	`¡ohl
(
ùhdr
->
§c
.
addr
[3]) & 0xffff));

382 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

383 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (dest)\n",

384 (
	`¡ohl
(
ùhdr
->
de°
.
addr
[0]) >> 16) & 0xffff,

385 
	`¡ohl
(
ùhdr
->
de°
.
addr
[0]) & 0xffff));

386 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (dest)\n",

387 (
	`¡ohl
(
ùhdr
->
de°
.
addr
[1]) >> 16) & 0xffff,

388 
	`¡ohl
(
ùhdr
->
de°
.
addr
[1]) & 0xffff));

389 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (dest)\n",

390 (
	`¡ohl
(
ùhdr
->
de°
.
addr
[2]) >> 16) & 0xffff,

391 
	`¡ohl
(
ùhdr
->
de°
.
addr
[2]) & 0xffff));

392 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (dest)\n",

393 (
	`¡ohl
(
ùhdr
->
de°
.
addr
[3]) >> 16) & 0xffff,

394 
	`¡ohl
(
ùhdr
->
de°
.
addr
[3]) & 0xffff));

395 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

396 
	}
}

	@core/ipv6/ip6_addr.c

33 
	~"lwù/›t.h
"

34 
	~"lwù/ù_addr.h
"

35 
	~"lwù/öë.h
"

37 
u8_t


38 
	$ù_addr_√tcmp
(
ù_addr
 *
addr1
, ù_add∏*
addr2
,

39 
ù_addr
 *
mask
)

41 ((
addr1
->
addr
[0] & 
mask
->addr[0]Ë=(
addr2
->addr[0] & mask->addr[0]) &&

42 (
addr1
->
addr
[1] & 
mask
->addr[1]Ë=(
addr2
->addr[1] & mask->addr[1]) &&

43 (
addr1
->
addr
[2] & 
mask
->addr[2]Ë=(
addr2
->addr[2] & mask->addr[2]) &&

44 (
addr1
->
addr
[3] & 
mask
->addr[3]Ë=(
addr2
->addr[3] & mask->addr[3]));

46 
	}
}

48 
u8_t


49 
	$ù_addr_cmp
(
ù_addr
 *
addr1
, ù_add∏*
addr2
)

51 (
addr1
->
addr
[0] =
addr2
->addr[0] &&

52 
addr1
->
addr
[1] =
addr2
->addr[1] &&

53 
addr1
->
addr
[2] =
addr2
->addr[2] &&

54 
addr1
->
addr
[3] =
addr2
->addr[3]);

55 
	}
}

58 
	$ù_addr_£t
(
ù_addr
 *
de°
, ù_add∏*
§c
)

60 
	`SMEMCPY
(
de°
, 
§c
, (
ù_addr
));

65 
	}
}

67 
u8_t


68 
	$ù_addr_ißny
(
ù_addr
 *
addr
)

70 i‡(
addr
 =
NULL
)  1;

71 ((
addr
->addr[0] |áddr->addr[1] |áddr->addr[2] |áddr->addr[3]) == 0);

72 
	}
}

	@core/mem.c

56 
	~"lwù/›t.h
"

58 #i‡!
MEM_LIBC_MALLOC


60 
	~"lwù/def.h
"

61 
	~"lwù/mem.h
"

62 
	~"lwù/sys.h
"

63 
	~"lwù/°©s.h
"

64 
	~"lwù/îr.h
"

66 
	~<°rög.h
>

68 #i‡
MEM_USE_POOLS


79 
	$mem_mÆloc
(
mem_size_t
 
size
)

81 
memp_mÆloc_hñ≥r
 *
ñemít
;

82 
memp_t
 
poﬁƒ
;

83 
mem_size_t
 
ªquúed_size
 = 
size
 + (
memp_mÆloc_hñ≥r
);

85 
poﬁƒ
 = 
MEMP_POOL_FIRST
;Öoﬁƒ <
MEMP_POOL_LAST
;Öoﬁƒ = (
memp_t
)(poolnr + 1)) {

86 #i‡
MEM_USE_POOLS_TRY_BIGGER_POOL


87 
agaö
:

91 i‡(
ªquúed_size
 <
memp_sizes
[
poﬁƒ
]) {

95 i‡(
poﬁƒ
 > 
MEMP_POOL_LAST
) {

96 
	`LWIP_ASSERT
("mem_malloc():ÇoÖool isÅhat big!", 0);

97  
NULL
;

99 
ñemít
 = (
memp_mÆloc_hñ≥r
*)
	`memp_mÆloc
(
poﬁƒ
);

100 i‡(
ñemít
 =
NULL
) {

103 #i‡
MEM_USE_POOLS_TRY_BIGGER_POOL


105 i‡(
poﬁƒ
 < 
MEMP_POOL_LAST
) {

106 
poﬁƒ
++;

107 
agaö
;

110  
NULL
;

114 
ñemít
->
poﬁƒ
 =Öoolnr;

116 
ñemít
++;

118  
ñemít
;

119 
	}
}

129 
	$mem_‰ì
(*
rmem
)

131 
memp_mÆloc_hñ≥r
 *
hmem
 = (memp_mÆloc_hñ≥r*)
rmem
;

133 
	`LWIP_ASSERT
("rmem !NULL", (
rmem
 !
NULL
));

134 
	`LWIP_ASSERT
("rmem =MEM_ALIGN‘mem)", (
rmem
 =
	`LWIP_MEM_ALIGN
(rmem)));

137 
hmem
--;

139 
	`LWIP_ASSERT
("hmem !NULL", (
hmem
 !
NULL
));

140 
	`LWIP_ASSERT
("hmem =MEM_ALIGN(hmem)", (
hmem
 =
	`LWIP_MEM_ALIGN
(hmem)));

141 
	`LWIP_ASSERT
("hmem->poﬁƒ < MEMP_MAX", (
hmem
->
poﬁƒ
 < 
MEMP_MAX
));

144 
	`memp_‰ì
(
hmem
->
poﬁƒ
, hmem);

145 
	}
}

155 
	smem
 {

157 
mem_size_t
 
	m√xt
;

159 
mem_size_t
 
	m¥ev
;

161 
u8_t
 
	mu£d
;

167 #i‚de‡
MIN_SIZE


168 
	#MIN_SIZE
 12

	)

171 
	#MIN_SIZE_ALIGNED
 
	`LWIP_MEM_ALIGN_SIZE
(
MIN_SIZE
)

	)

172 
	#SIZEOF_STRUCT_MEM
 
	`LWIP_MEM_ALIGN_SIZE
((
mem
))

	)

173 
	#MEM_SIZE_ALIGNED
 
	`LWIP_MEM_ALIGN_SIZE
(
MEM_SIZE
)

	)

179 #i‚de‡
LWIP_RAM_HEAP_POINTER


181 
u8_t
 
	gøm_hóp
[
MEM_SIZE_ALIGNED
 + (2*
SIZEOF_STRUCT_MEM
Ë+ 
MEM_ALIGNMENT
];

182 
	#LWIP_RAM_HEAP_POINTER
 
øm_hóp


	)

186 
u8_t
 *
	gøm
;

188 
mem
 *
	gøm_íd
;

190 
mem
 *
	gl‰ì
;

193 
sys_muãx_t
 
	gmem_muãx
;

195 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


197 vﬁ©ûê
u8_t
 
	gmem_‰ì_cou¡
;

200 
	#LWIP_MEM_FREE_DECL_PROTECT
(Ë
	`SYS_ARCH_DECL_PROTECT
(
Àv_‰ì
)

	)

201 
	#LWIP_MEM_FREE_PROTECT
(Ë
	`SYS_ARCH_PROTECT
(
Àv_‰ì
)

	)

202 
	#LWIP_MEM_FREE_UNPROTECT
(Ë
	`SYS_ARCH_UNPROTECT
(
Àv_‰ì
)

	)

203 
	#LWIP_MEM_ALLOC_DECL_PROTECT
(Ë
	`SYS_ARCH_DECL_PROTECT
(
Àv_Æloc
)

	)

204 
	#LWIP_MEM_ALLOC_PROTECT
(Ë
	`SYS_ARCH_PROTECT
(
Àv_Æloc
)

	)

205 
	#LWIP_MEM_ALLOC_UNPROTECT
(Ë
	`SYS_ARCH_UNPROTECT
(
Àv_Æloc
)

	)

210 
	#LWIP_MEM_FREE_DECL_PROTECT
()

	)

211 
	#LWIP_MEM_FREE_PROTECT
(Ë
	`sys_muãx_lock
(&
mem_muãx
)

	)

212 
	#LWIP_MEM_FREE_UNPROTECT
(Ë
	`sys_muãx_u∆ock
(&
mem_muãx
)

	)

214 
	#LWIP_MEM_ALLOC_DECL_PROTECT
()

	)

215 
	#LWIP_MEM_ALLOC_PROTECT
()

	)

216 
	#LWIP_MEM_ALLOC_UNPROTECT
()

	)

233 
	$∂ug_hﬁes
(
mem
 *mem)

235 
mem
 *
nmem
;

236 
mem
 *
pmem
;

238 
	`LWIP_ASSERT
("∂ug_hﬁes: mem >øm", (
u8_t
 *)
mem
 >
øm
);

239 
	`LWIP_ASSERT
("∂ug_hﬁes: mem <Ñam_íd", (
u8_t
 *)
mem
 < (u8_à*)
øm_íd
);

240 
	`LWIP_ASSERT
("∂ug_hﬁes: mem->u£d =0", 
mem
->
u£d
 == 0);

243 
	`LWIP_ASSERT
("∂ug_hﬁes: mem->√xà<MEM_SIZE_ALIGNED", 
mem
->
√xt
 <
MEM_SIZE_ALIGNED
);

245 
nmem
 = (
mem
 *)(*)&
øm
[mem->
√xt
];

246 i‡(
mem
 !
nmem
 &&Çmem->
u£d
 =0 && (
u8_t
 *Ímem !(u8_à*)
øm_íd
) {

248 i‡(
l‰ì
 =
nmem
) {

249 
l‰ì
 = 
mem
;

251 
mem
->
√xt
 = 
nmem
->next;

252 ((
mem
 *)(*)&
øm
[
nmem
->
√xt
])->
¥ev
 = (
mem_size_t
)((
u8_t
 *)mem -Ñam);

256 
pmem
 = (
mem
 *)(*)&
øm
[mem->
¥ev
];

257 i‡(
pmem
 !
mem
 &&Ömem->
u£d
 == 0) {

259 i‡(
l‰ì
 =
mem
) {

260 
l‰ì
 = 
pmem
;

262 
pmem
->
√xt
 = 
mem
->next;

263 ((
mem
 *)(*)&
øm
[mem->
√xt
])->
¥ev
 = (
mem_size_t
)((
u8_t
 *)
pmem
 -Ñam);

265 
	}
}

271 
	$mem_öô
()

273 
mem
 *mem;

275 
	`LWIP_ASSERT
("Sanity checkálignment",

276 (
SIZEOF_STRUCT_MEM
 & (
MEM_ALIGNMENT
-1)) == 0);

279 
øm
 = (
u8_t
 *)
	`LWIP_MEM_ALIGN
(
LWIP_RAM_HEAP_POINTER
);

281 
mem
 = (mem *)(*)
øm
;

282 
mem
->
√xt
 = 
MEM_SIZE_ALIGNED
;

283 
mem
->
¥ev
 = 0;

284 
mem
->
u£d
 = 0;

286 
øm_íd
 = (
mem
 *)(*)&
øm
[
MEM_SIZE_ALIGNED
];

287 
øm_íd
->
u£d
 = 1;

288 
øm_íd
->
√xt
 = 
MEM_SIZE_ALIGNED
;

289 
øm_íd
->
¥ev
 = 
MEM_SIZE_ALIGNED
;

292 
l‰ì
 = (
mem
 *)(*)
øm
;

294 
	`MEM_STATS_AVAIL
(
avaû
, 
MEM_SIZE_ALIGNED
);

296 if(
	`sys_muãx_√w
(&
mem_muãx
Ë!
ERR_OK
) {

297 
	`LWIP_ASSERT
("failedÅo create mem_mutex", 0);

299 
	}
}

308 
	$mem_‰ì
(*
rmem
)

310 
mem
 *mem;

311 
	`LWIP_MEM_FREE_DECL_PROTECT
();

313 i‡(
rmem
 =
NULL
) {

314 
	`LWIP_DEBUGF
(
MEM_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_LEVEL_SERIOUS
, ("mem_free(p == NULL) was called.\n"));

317 
	`LWIP_ASSERT
("mem_‰ì: s™ôy checkálignmít", (((
mem_±r_t
)
rmem
Ë& (
MEM_ALIGNMENT
-1)) == 0);

319 
	`LWIP_ASSERT
("mem_‰ì:ÜegÆ mem‹y", (
u8_t
 *)
rmem
 >(u8_à*)
øm
 &&

320 (
u8_t
 *)
rmem
 < (u8_à*)
øm_íd
);

322 i‡((
u8_t
 *)
rmem
 < (u8_à*)
øm
 || (u8_à*Ïmem >(u8_à*)
øm_íd
) {

323 
	`SYS_ARCH_DECL_PROTECT
(
Àv
);

324 
	`LWIP_DEBUGF
(
MEM_DEBUG
 | 
LWIP_DBG_LEVEL_SEVERE
, ("mem_free: illegal memory\n"));

326 
	`SYS_ARCH_PROTECT
(
Àv
);

327 
	`MEM_STATS_INC
(
ûÀgÆ
);

328 
	`SYS_ARCH_UNPROTECT
(
Àv
);

332 
	`LWIP_MEM_FREE_PROTECT
();

334 
mem
 = (mem *)(*)((
u8_t
 *)
rmem
 - 
SIZEOF_STRUCT_MEM
);

336 
	`LWIP_ASSERT
("mem_‰ì: mem->u£d", 
mem
->
u£d
);

338 
mem
->
u£d
 = 0;

340 i‡(
mem
 < 
l‰ì
) {

342 
l‰ì
 = 
mem
;

345 
	`MEM_STATS_DEC_USED
(
u£d
, 
mem
->
√xt
 - (
mem_size_t
)(((
u8_t
 *)mem - 
øm
)));

348 
	`∂ug_hﬁes
(
mem
);

349 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


350 
mem_‰ì_cou¡
 = 1;

352 
	`LWIP_MEM_FREE_UNPROTECT
();

353 
	}
}

366 
	$mem_åim
(*
rmem
, 
mem_size_t
 
√wsize
)

368 
mem_size_t
 
size
;

369 
mem_size_t
 
±r
, 
±r2
;

370 
mem
 *mem, *
mem2
;

372 
	`LWIP_MEM_FREE_DECL_PROTECT
();

376 
√wsize
 = 
	`LWIP_MEM_ALIGN_SIZE
(newsize);

378 if(
√wsize
 < 
MIN_SIZE_ALIGNED
) {

380 
√wsize
 = 
MIN_SIZE_ALIGNED
;

383 i‡(
√wsize
 > 
MEM_SIZE_ALIGNED
) {

384  
NULL
;

387 
	`LWIP_ASSERT
("mem_åim:ÜegÆ mem‹y", (
u8_t
 *)
rmem
 >(u8_à*)
øm
 &&

388 (
u8_t
 *)
rmem
 < (u8_à*)
øm_íd
);

390 i‡((
u8_t
 *)
rmem
 < (u8_à*)
øm
 || (u8_à*Ïmem >(u8_à*)
øm_íd
) {

391 
	`SYS_ARCH_DECL_PROTECT
(
Àv
);

392 
	`LWIP_DEBUGF
(
MEM_DEBUG
 | 
LWIP_DBG_LEVEL_SEVERE
, ("mem_trim: illegal memory\n"));

394 
	`SYS_ARCH_PROTECT
(
Àv
);

395 
	`MEM_STATS_INC
(
ûÀgÆ
);

396 
	`SYS_ARCH_UNPROTECT
(
Àv
);

397  
rmem
;

400 
mem
 = (mem *)(*)((
u8_t
 *)
rmem
 - 
SIZEOF_STRUCT_MEM
);

402 
±r
 = (
mem_size_t
)((
u8_t
 *)
mem
 - 
øm
);

404 
size
 = 
mem
->
√xt
 - 
±r
 - 
SIZEOF_STRUCT_MEM
;

405 
	`LWIP_ASSERT
("mem_åim c™ o∆y shrök mem‹y", 
√wsize
 <
size
);

406 i‡(
√wsize
 > 
size
) {

408  
NULL
;

410 i‡(
√wsize
 =
size
) {

412  
rmem
;

416 
	`LWIP_MEM_FREE_PROTECT
();

418 
mem2
 = (
mem
 *)(*)&
øm
[mem->
√xt
];

419 if(
mem2
->
u£d
 == 0) {

421 
mem_size_t
 
√xt
;

423 
√xt
 = 
mem2
->next;

425 
±r2
 = 
±r
 + 
SIZEOF_STRUCT_MEM
 + 
√wsize
;

426 i‡(
l‰ì
 =
mem2
) {

427 
l‰ì
 = (
mem
 *)(*)&
øm
[
±r2
];

429 
mem2
 = (
mem
 *)(*)&
øm
[
±r2
];

430 
mem2
->
u£d
 = 0;

432 
mem2
->
√xt
 =Çext;

434 
mem2
->
¥ev
 = 
±r
;

436 
mem
->
√xt
 = 
±r2
;

440 i‡(
mem2
->
√xt
 !
MEM_SIZE_ALIGNED
) {

441 ((
mem
 *)(*)&
øm
[
mem2
->
√xt
])->
¥ev
 = 
±r2
;

443 
	`MEM_STATS_DEC_USED
(
u£d
, (
size
 - 
√wsize
));

445 } i‡(
√wsize
 + 
SIZEOF_STRUCT_MEM
 + 
MIN_SIZE_ALIGNED
 <
size
) {

453 
±r2
 = 
±r
 + 
SIZEOF_STRUCT_MEM
 + 
√wsize
;

454 
mem2
 = (
mem
 *)(*)&
øm
[
±r2
];

455 i‡(
mem2
 < 
l‰ì
) {

456 
l‰ì
 = 
mem2
;

458 
mem2
->
u£d
 = 0;

459 
mem2
->
√xt
 = 
mem
->next;

460 
mem2
->
¥ev
 = 
±r
;

461 
mem
->
√xt
 = 
±r2
;

462 i‡(
mem2
->
√xt
 !
MEM_SIZE_ALIGNED
) {

463 ((
mem
 *)(*)&
øm
[
mem2
->
√xt
])->
¥ev
 = 
±r2
;

465 
	`MEM_STATS_DEC_USED
(
u£d
, (
size
 - 
√wsize
));

474 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


475 
mem_‰ì_cou¡
 = 1;

477 
	`LWIP_MEM_FREE_UNPROTECT
();

478  
rmem
;

479 
	}
}

491 
	$mem_mÆloc
(
mem_size_t
 
size
)

493 
mem_size_t
 
±r
, 
±r2
;

494 
mem
 *mem, *
mem2
;

495 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


496 
u8_t
 
loˇl_mem_‰ì_cou¡
 = 0;

498 
	`LWIP_MEM_ALLOC_DECL_PROTECT
();

500 i‡(
size
 == 0) {

501  
NULL
;

506 
size
 = 
	`LWIP_MEM_ALIGN_SIZE
(size);

508 if(
size
 < 
MIN_SIZE_ALIGNED
) {

510 
size
 = 
MIN_SIZE_ALIGNED
;

513 i‡(
size
 > 
MEM_SIZE_ALIGNED
) {

514  
NULL
;

518 
	`sys_muãx_lock
(&
mem_muãx
);

519 
	`LWIP_MEM_ALLOC_PROTECT
();

520 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


523 
loˇl_mem_‰ì_cou¡
 = 0;

529 
±r
 = (
mem_size_t
)((
u8_t
 *)
l‰ì
 - 
øm
);Öå < 
MEM_SIZE_ALIGNED
 - 
size
;

530 
±r
 = ((
mem
 *)(*)&
øm
[±r])->
√xt
) {

531 
mem
 = (mem *)(*)&
øm
[
±r
];

532 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


533 
mem_‰ì_cou¡
 = 0;

534 
	`LWIP_MEM_ALLOC_UNPROTECT
();

536 
	`LWIP_MEM_ALLOC_PROTECT
();

537 i‡(
mem_‰ì_cou¡
 != 0) {

538 
loˇl_mem_‰ì_cou¡
 = 
mem_‰ì_cou¡
;

540 
mem_‰ì_cou¡
 = 0;

543 i‡((!
mem
->
u£d
) &&

544 (
mem
->
√xt
 - (
±r
 + 
SIZEOF_STRUCT_MEM
)Ë>
size
) {

548 i‡(
mem
->
√xt
 - (
±r
 + 
SIZEOF_STRUCT_MEM
Ë>(
size
 + SIZEOF_STRUCT_MEM + 
MIN_SIZE_ALIGNED
)) {

559 
±r2
 = 
±r
 + 
SIZEOF_STRUCT_MEM
 + 
size
;

561 
mem2
 = (
mem
 *)(*)&
øm
[
±r2
];

562 
mem2
->
u£d
 = 0;

563 
mem2
->
√xt
 = 
mem
->next;

564 
mem2
->
¥ev
 = 
±r
;

566 
mem
->
√xt
 = 
±r2
;

567 
mem
->
u£d
 = 1;

569 i‡(
mem2
->
√xt
 !
MEM_SIZE_ALIGNED
) {

570 ((
mem
 *)(*)&
øm
[
mem2
->
√xt
])->
¥ev
 = 
±r2
;

572 
	`MEM_STATS_INC_USED
(
u£d
, (
size
 + 
SIZEOF_STRUCT_MEM
));

581 
mem
->
u£d
 = 1;

582 
	`MEM_STATS_INC_USED
(
u£d
, 
mem
->
√xt
 - (
mem_size_t
)((
u8_t
 *)mem - 
øm
));

585 i‡(
mem
 =
l‰ì
) {

587 
l‰ì
->
u£d
 &&Ü‰ì !
øm_íd
) {

588 
	`LWIP_MEM_ALLOC_UNPROTECT
();

590 
	`LWIP_MEM_ALLOC_PROTECT
();

591 
l‰ì
 = (
mem
 *)(*)&
øm
[l‰ì->
√xt
];

593 
	`LWIP_ASSERT
("mem_mÆloc: !l‰ì->u£d", ((
l‰ì
 =
øm_íd
Ë|| (!l‰ì->
u£d
)));

595 
	`LWIP_MEM_ALLOC_UNPROTECT
();

596 
	`sys_muãx_u∆ock
(&
mem_muãx
);

597 
	`LWIP_ASSERT
("mem_malloc:állocated memoryÇotáboveÑam_end.",

598 (
mem_±r_t
)
mem
 + 
SIZEOF_STRUCT_MEM
 + 
size
 <(mem_±r_t)
øm_íd
);

599 
	`LWIP_ASSERT
("mem_malloc:állocated memoryÖroperlyáligned.",

600 ((
mem_±r_t
)
mem
 + 
SIZEOF_STRUCT_MEM
Ë% 
MEM_ALIGNMENT
 == 0);

601 
	`LWIP_ASSERT
("mem_malloc: sanity checkálignment",

602 (((
mem_±r_t
)
mem
Ë& (
MEM_ALIGNMENT
-1)) == 0);

604  (
u8_t
 *)
mem
 + 
SIZEOF_STRUCT_MEM
;

607 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


609 } 
loˇl_mem_‰ì_cou¡
 != 0);

611 
	`LWIP_DEBUGF
(
MEM_DEBUG
 | 
LWIP_DBG_LEVEL_SERIOUS
, ("mem_mÆloc: couldÇŸáŒoˇã %"
S16_F
" byãs\n", (
s16_t
)
size
));

612 
	`MEM_STATS_INC
(
îr
);

613 
	`LWIP_MEM_ALLOC_UNPROTECT
();

614 
	`sys_muãx_u∆ock
(&
mem_muãx
);

615  
NULL
;

616 
	}
}

629 *
	$mem_ˇŒoc
(
mem_size_t
 
cou¡
, mem_size_à
size
)

631 *
p
;

634 
p
 = 
	`mem_mÆloc
(
cou¡
 * 
size
);

635 i‡(
p
) {

637 
	`mem£t
(
p
, 0, 
cou¡
 * 
size
);

639  
p
;

640 
	}
}

	@core/memp.c

41 
	~"lwù/›t.h
"

43 
	~"lwù/memp.h
"

44 
	~"lwù/pbuf.h
"

45 
	~"lwù/udp.h
"

46 
	~"lwù/øw.h
"

47 
	~"lwù/t˝_im∂.h
"

48 
	~"lwù/igmp.h
"

49 
	~"lwù/≠i.h
"

50 
	~"lwù/≠i_msg.h
"

51 
	~"lwù/t˝ù.h
"

52 
	~"lwù/sys.h
"

53 
	~"lwù/timîs.h
"

54 
	~"lwù/°©s.h
"

55 
	~"√tif/ëh¨p.h
"

56 
	~"lwù/ù_‰ag.h
"

57 
	~"lwù/¢mp_°ru˘s.h
"

58 
	~"lwù/¢mp_msg.h
"

59 
	~"lwù/dns.h
"

60 
	~"√tif/µp_€.h
"

62 
	~<°rög.h
>

64 #i‡!
MEMP_MEM_MALLOC


66 
	smemp
 {

67 
memp
 *
	m√xt
;

68 #i‡
MEMP_OVERFLOW_CHECK


69 c⁄° *
	mfûe
;

70 
	mlöe
;

74 #i‡
MEMP_OVERFLOW_CHECK


83 #i‚de‡
MEMP_SANITY_REGION_BEFORE


84 
	#MEMP_SANITY_REGION_BEFORE
 16

	)

86 #i‡
MEMP_SANITY_REGION_BEFORE
 > 0

87 
	#MEMP_SANITY_REGION_BEFORE_ALIGNED
 
	`LWIP_MEM_ALIGN_SIZE
(
MEMP_SANITY_REGION_BEFORE
)

	)

89 
	#MEMP_SANITY_REGION_BEFORE_ALIGNED
 0

	)

91 #i‚de‡
MEMP_SANITY_REGION_AFTER


92 
	#MEMP_SANITY_REGION_AFTER
 16

	)

94 #i‡
MEMP_SANITY_REGION_AFTER
 > 0

95 
	#MEMP_SANITY_REGION_AFTER_ALIGNED
 
	`LWIP_MEM_ALIGN_SIZE
(
MEMP_SANITY_REGION_AFTER
)

	)

97 
	#MEMP_SANITY_REGION_AFTER_ALIGNED
 0

	)

101 
	#MEMP_SIZE
 (
	`LWIP_MEM_ALIGN_SIZE
((
memp
)Ë+ 
MEMP_SANITY_REGION_BEFORE_ALIGNED
)

	)

102 
	#MEMP_ALIGN_SIZE
(
x
Ë(
	`LWIP_MEM_ALIGN_SIZE
(xË+ 
MEMP_SANITY_REGION_AFTER_ALIGNED
)

	)

110 
	#MEMP_SIZE
 0

	)

111 
	#MEMP_ALIGN_SIZE
(
x
Ë(
	`LWIP_MEM_ALIGN_SIZE
(x))

	)

117 
memp
 *
	gmemp_èb
[
MEMP_MAX
];

121 
	#MEMP_ALIGN_SIZE
(
x
Ë(
	`LWIP_MEM_ALIGN_SIZE
(x))

	)

126 #i‡!
MEM_USE_POOLS
 && !
MEMP_MEM_MALLOC


129 c⁄° 
u16_t
 
	gmemp_sizes
[
MEMP_MAX
] = {

130 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë
	`LWIP_MEM_ALIGN_SIZE
(size),

	)

131 
	~"lwù/memp_°d.h
"

134 #i‡!
MEMP_MEM_MALLOC


137 c⁄° 
u16_t
 
	gmemp_num
[
MEMP_MAX
] = {

138 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë“um),

	)

139 
	~"lwù/memp_°d.h
"

143 #ifde‡
LWIP_DEBUG


144 c⁄° *
	gmemp_desc
[
MEMP_MAX
] = {

145 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë(desc),

	)

146 
	~"lwù/memp_°d.h
"

150 #i‡
MEMP_SEPARATE_POOLS


157 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë
u8_t
 
memp_mem‹y_
 ##Çamê## 
_ba£
 \

158 [((
num
Ë* (
MEMP_SIZE
 + 
	`MEMP_ALIGN_SIZE
(
size
)))];

	)

159 
	~"lwù/memp_°d.h
"

162 
u8_t
 *c⁄° 
	gmemp_ba£s
[] = {

163 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë
memp_mem‹y_
 ##Çamê## 
_ba£
,

	)

164 
	~"lwù/memp_°d.h
"

170 
u8_t
 
	gmemp_mem‹y
[
MEM_ALIGNMENT
 - 1

171 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë+ ( (numË* (
MEMP_SIZE
 + 
	`MEMP_ALIGN_SIZE
(sizeËË)

	)

172 
	~"lwù/memp_°d.h
"

177 #i‡
MEMP_SANITY_CHECK


182 
	$memp_ßnôy
()

184 
s16_t
 
i
, 
c
;

185 
memp
 *
m
, *
n
;

187 
i
 = 0; i < 
MEMP_MAX
; i++) {

188 
m
 = 
memp_èb
[
i
]; m !
NULL
; m = m->
√xt
) {

189 
c
 = 1;

190 
n
 = 
memp_èb
[
i
];Ç !
NULL
;Ç =Ç->
√xt
) {

191 i‡(
n
 =
m
 && --
c
 < 0) {

198 
	}
}

200 #i‡
MEMP_OVERFLOW_CHECK


201 #i‡
deföed
(
LWIP_DEBUG
Ë&& 
MEMP_STATS


202 c⁄° * 
	gmemp_ovîÊow_«mes
[] = {

203 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë"/"desc,

	)

204 
	~"lwù/memp_°d.h
"

216 
	$memp_ovîÊow_check_ñemít_ovîÊow
(
memp
 *
p
, 
u16_t
 
memp_ty≥
)

218 
u16_t
 
k
;

219 
u8_t
 *
m
;

220 #i‡
MEMP_SANITY_REGION_AFTER_ALIGNED
 > 0

221 
m
 = (
u8_t
*)
p
 + 
MEMP_SIZE
 + 
memp_sizes
[
memp_ty≥
];

222 
k
 = 0; k < 
MEMP_SANITY_REGION_AFTER_ALIGNED
; k++) {

223 i‡(
m
[
k
] != 0xcd) {

224 
îr°r
[128] = "detected memp overflow inÖool ";

225 
digô
[] = "0";

226 if(
memp_ty≥
 >= 10) {

227 
digô
[0] = '0' + (
memp_ty≥
/10);

228 
	`°rˇt
(
îr°r
, 
digô
);

230 
digô
[0] = '0' + (
memp_ty≥
%10);

231 
	`°rˇt
(
îr°r
, 
digô
);

232 #i‡
	`deföed
(
LWIP_DEBUG
Ë&& 
MEMP_STATS


233 
	`°rˇt
(
îr°r
, 
memp_ovîÊow_«mes
[
memp_ty≥
]);

235 
	`LWIP_ASSERT
(
îr°r
, 0);

239 
	}
}

249 
	$memp_ovîÊow_check_ñemít_undîÊow
(
memp
 *
p
, 
u16_t
 
memp_ty≥
)

251 
u16_t
 
k
;

252 
u8_t
 *
m
;

253 #i‡
MEMP_SANITY_REGION_BEFORE_ALIGNED
 > 0

254 
m
 = (
u8_t
*)
p
 + 
MEMP_SIZE
 - 
MEMP_SANITY_REGION_BEFORE_ALIGNED
;

255 
k
 = 0; k < 
MEMP_SANITY_REGION_BEFORE_ALIGNED
; k++) {

256 i‡(
m
[
k
] != 0xcd) {

257 
îr°r
[128] = "detected memp underflow inÖool ";

258 
digô
[] = "0";

259 if(
memp_ty≥
 >= 10) {

260 
digô
[0] = '0' + (
memp_ty≥
/10);

261 
	`°rˇt
(
îr°r
, 
digô
);

263 
digô
[0] = '0' + (
memp_ty≥
%10);

264 
	`°rˇt
(
îr°r
, 
digô
);

265 #i‡
	`deföed
(
LWIP_DEBUG
Ë&& 
MEMP_STATS


266 
	`°rˇt
(
îr°r
, 
memp_ovîÊow_«mes
[
memp_ty≥
]);

268 
	`LWIP_ASSERT
(
îr°r
, 0);

272 
	}
}

280 
	$memp_ovîÊow_check_Æl
()

282 
u16_t
 
i
, 
j
;

283 
memp
 *
p
;

285 
p
 = (
memp
 *)
	`LWIP_MEM_ALIGN
(
memp_mem‹y
);

286 
i
 = 0; i < 
MEMP_MAX
; ++i) {

287 
p
 =Ö;

288 
j
 = 0; j < 
memp_num
[
i
]; ++j) {

289 
	`memp_ovîÊow_check_ñemít_ovîÊow
(
p
, 
i
);

290 
p
 = (
memp
*)((
u8_t
*Ì + 
MEMP_SIZE
 + 
memp_sizes
[
i
] + 
MEMP_SANITY_REGION_AFTER_ALIGNED
);

293 
p
 = (
memp
 *)
	`LWIP_MEM_ALIGN
(
memp_mem‹y
);

294 
i
 = 0; i < 
MEMP_MAX
; ++i) {

295 
p
 =Ö;

296 
j
 = 0; j < 
memp_num
[
i
]; ++j) {

297 
	`memp_ovîÊow_check_ñemít_undîÊow
(
p
, 
i
);

298 
p
 = (
memp
*)((
u8_t
*Ì + 
MEMP_SIZE
 + 
memp_sizes
[
i
] + 
MEMP_SANITY_REGION_AFTER_ALIGNED
);

301 
	}
}

307 
	$memp_ovîÊow_öô
()

309 
u16_t
 
i
, 
j
;

310 
memp
 *
p
;

311 
u8_t
 *
m
;

313 
p
 = (
memp
 *)
	`LWIP_MEM_ALIGN
(
memp_mem‹y
);

314 
i
 = 0; i < 
MEMP_MAX
; ++i) {

315 
p
 =Ö;

316 
j
 = 0; j < 
memp_num
[
i
]; ++j) {

317 #i‡
MEMP_SANITY_REGION_BEFORE_ALIGNED
 > 0

318 
m
 = (
u8_t
*)
p
 + 
MEMP_SIZE
 - 
MEMP_SANITY_REGION_BEFORE_ALIGNED
;

319 
	`mem£t
(
m
, 0xcd, 
MEMP_SANITY_REGION_BEFORE_ALIGNED
);

321 #i‡
MEMP_SANITY_REGION_AFTER_ALIGNED
 > 0

322 
m
 = (
u8_t
*)
p
 + 
MEMP_SIZE
 + 
memp_sizes
[
i
];

323 
	`mem£t
(
m
, 0xcd, 
MEMP_SANITY_REGION_AFTER_ALIGNED
);

325 
p
 = (
memp
*)((
u8_t
*Ì + 
MEMP_SIZE
 + 
memp_sizes
[
i
] + 
MEMP_SANITY_REGION_AFTER_ALIGNED
);

328 
	}
}

337 
	$memp_öô
()

339 
memp
 *memp;

340 
u16_t
 
i
, 
j
;

342 
i
 = 0; i < 
MEMP_MAX
; ++i) {

343 
	`MEMP_STATS_AVAIL
(
u£d
, 
i
, 0);

344 
	`MEMP_STATS_AVAIL
(
max
, 
i
, 0);

345 
	`MEMP_STATS_AVAIL
(
îr
, 
i
, 0);

346 
	`MEMP_STATS_AVAIL
(
avaû
, 
i
, 
memp_num
[i]);

349 #i‡!
MEMP_SEPARATE_POOLS


350 
memp
 = (mem∞*)
	`LWIP_MEM_ALIGN
(
memp_mem‹y
);

353 
i
 = 0; i < 
MEMP_MAX
; ++i) {

354 
memp_èb
[
i
] = 
NULL
;

355 #i‡
MEMP_SEPARATE_POOLS


356 
memp
 = (memp*)
memp_ba£s
[
i
];

359 
j
 = 0; j < 
memp_num
[
i
]; ++j) {

360 
memp
->
√xt
 = 
memp_èb
[
i
];

361 
memp_èb
[
i
] = 
memp
;

362 
memp
 = (mem∞*)(*)((
u8_t
 *)mem∞+ 
MEMP_SIZE
 + 
memp_sizes
[
i
]

363 #i‡
MEMP_OVERFLOW_CHECK


364 + 
MEMP_SANITY_REGION_AFTER_ALIGNED


369 #i‡
MEMP_OVERFLOW_CHECK


370 
	`memp_ovîÊow_öô
();

372 
	`memp_ovîÊow_check_Æl
();

374 
	}
}

388 #i‡!
MEMP_OVERFLOW_CHECK


389 
	$memp_mÆloc
(
memp_t
 
ty≥
)

391 
	$memp_mÆloc_‚
(
memp_t
 
ty≥
, c⁄° * 
fûe
, c⁄° 
löe
)

394 
memp
 *memp;

395 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
);

397 
	`LWIP_ERROR
("memp_mÆloc:Åy≥ < MEMP_MAX", (
ty≥
 < 
MEMP_MAX
),  
NULL
;);

399 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
);

400 #i‡
MEMP_OVERFLOW_CHECK
 >= 2

401 
	`memp_ovîÊow_check_Æl
();

404 
memp
 = 
memp_èb
[
ty≥
];

406 i‡(
memp
 !
NULL
) {

407 
memp_èb
[
ty≥
] = 
memp
->
√xt
;

408 #i‡
MEMP_OVERFLOW_CHECK


409 
memp
->
√xt
 = 
NULL
;

410 
memp
->
fûe
 = file;

411 
memp
->
löe
 =Üine;

413 
	`MEMP_STATS_INC_USED
(
u£d
, 
ty≥
);

414 
	`LWIP_ASSERT
("memp_malloc: mempÖroperlyáligned",

415 ((
mem_±r_t
)
memp
 % 
MEM_ALIGNMENT
) == 0);

416 
memp
 = (memp*)(*)((
u8_t
*)mem∞+ 
MEMP_SIZE
);

418 
	`LWIP_DEBUGF
(
MEMP_DEBUG
 | 
LWIP_DBG_LEVEL_SERIOUS
, ("memp_mÆloc: ouào‡mem‹y i¿poﬁ %s\n", 
memp_desc
[
ty≥
]));

419 
	`MEMP_STATS_INC
(
îr
, 
ty≥
);

422 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
);

424  
memp
;

425 
	}
}

434 
	$memp_‰ì
(
memp_t
 
ty≥
, *
mem
)

436 
memp
 *memp;

437 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
);

439 i‡(
mem
 =
NULL
) {

442 
	`LWIP_ASSERT
("memp_free: memÖroperlyáligned",

443 ((
mem_±r_t
)
mem
 % 
MEM_ALIGNMENT
) == 0);

445 
memp
 = (mem∞*)(*)((
u8_t
*)
mem
 - 
MEMP_SIZE
);

447 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
);

448 #i‡
MEMP_OVERFLOW_CHECK


449 #i‡
MEMP_OVERFLOW_CHECK
 >= 2

450 
	`memp_ovîÊow_check_Æl
();

452 
	`memp_ovîÊow_check_ñemít_ovîÊow
(
memp
, 
ty≥
);

453 
	`memp_ovîÊow_check_ñemít_undîÊow
(
memp
, 
ty≥
);

457 
	`MEMP_STATS_DEC
(
u£d
, 
ty≥
);

459 
memp
->
√xt
 = 
memp_èb
[
ty≥
];

460 
memp_èb
[
ty≥
] = 
memp
;

462 #i‡
MEMP_SANITY_CHECK


463 
	`LWIP_ASSERT
("mem∞ßnôy", 
	`memp_ßnôy
());

466 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
);

467 
	}
}

	@core/netif.c

39 
	~"lwù/›t.h
"

41 
	~"lwù/def.h
"

42 
	~"lwù/ù_addr.h
"

43 
	~"lwù/√tif.h
"

44 
	~"lwù/t˝_im∂.h
"

45 
	~"lwù/¢mp.h
"

46 
	~"lwù/igmp.h
"

47 
	~"√tif/ëh¨p.h
"

48 
	~"lwù/°©s.h
"

49 #i‡
ENABLE_LOOPBACK


50 
	~"lwù/sys.h
"

51 #i‡
LWIP_NETIF_LOOPBACK_MULTITHREADING


52 
	~"lwù/t˝ù.h
"

56 #i‡
LWIP_AUTOIP


57 
	~"lwù/autoù.h
"

59 #i‡
LWIP_DHCP


60 
	~"lwù/dh˝.h
"

63 #i‡
LWIP_NETIF_STATUS_CALLBACK


64 
	#NETIF_STATUS_CALLBACK
(
n
Ëdo{ i‡“->
°©us_ˇŒback
Ë{ (n->°©us_ˇŒback)“); }}0)

	)

66 
	#NETIF_STATUS_CALLBACK
(
n
)

	)

69 #i‡
LWIP_NETIF_LINK_CALLBACK


70 
	#NETIF_LINK_CALLBACK
(
n
Ëdo{ i‡“->
lök_ˇŒback
Ë{ (n->lök_ˇŒback)“); }}0)

	)

72 
	#NETIF_LINK_CALLBACK
(
n
)

	)

75 
√tif
 *
	g√tif_li°
;

76 
√tif
 *
	g√tif_deÁu…
;

78 #i‡
LWIP_HAVE_LOOPIF


79 
√tif
 
	glo›_√tif
;

88 
îr_t


89 
	$√tif_lo›if_öô
(
√tif
 *netif)

94 
	`NETIF_INIT_SNMP
(
√tif
, 
¢mp_ifTy≥_so·w¨eLo›back
, 0);

96 
√tif
->
«me
[0] = 'l';

97 
√tif
->
«me
[1] = 'o';

98 
√tif
->
ouçut
 = 
√tif_lo›_ouçut
;

99  
ERR_OK
;

100 
	}
}

104 
	$√tif_öô
()

106 #i‡
LWIP_HAVE_LOOPIF


107 
ù_addr_t
 
lo›_ùaddr
, 
lo›_√tmask
, 
lo›_gw
;

108 
	`IP4_ADDR
(&
lo›_gw
, 127,0,0,1);

109 
	`IP4_ADDR
(&
lo›_ùaddr
, 127,0,0,1);

110 
	`IP4_ADDR
(&
lo›_√tmask
, 255,0,0,0);

112 #i‡
NO_SYS


113 
	`√tif_add
(&
lo›_√tif
, &
lo›_ùaddr
, &
lo›_√tmask
, &
lo›_gw
, 
NULL
, 
√tif_lo›if_öô
, 
ù_öput
);

115 
	`√tif_add
(&
lo›_√tif
, &
lo›_ùaddr
, &
lo›_√tmask
, &
lo›_gw
, 
NULL
, 
√tif_lo›if_öô
, 
t˝ù_öput
);

117 
	`√tif_£t_up
(&
lo›_√tif
);

120 
	}
}

136 
√tif
 *

137 
	$√tif_add
(
√tif
 *√tif, 
ù_addr_t
 *
ùaddr
, ip_addr_à*
√tmask
,

138 
ù_addr_t
 *
gw
, *
°©e
, 
√tif_öô_‚
 
öô
, 
√tif_öput_‚
 
öput
)

140 
u8_t
 
√ti‚um
 = 0;

142 
	`LWIP_ASSERT
("Nÿöô fun˘i⁄ giví", 
öô
 !
NULL
);

145 
	`ù_addr_£t_zîo
(&
√tif
->
ù_addr
);

146 
	`ù_addr_£t_zîo
(&
√tif
->
√tmask
);

147 
	`ù_addr_£t_zîo
(&
√tif
->
gw
);

148 
√tif
->
Êags
 = 0;

149 #i‡
LWIP_DHCP


151 
√tif
->
dh˝
 = 
NULL
;

153 #i‡
LWIP_AUTOIP


155 
√tif
->
autoù
 = 
NULL
;

157 #i‡
LWIP_NETIF_STATUS_CALLBACK


158 
√tif
->
°©us_ˇŒback
 = 
NULL
;

160 #i‡
LWIP_NETIF_LINK_CALLBACK


161 
√tif
->
lök_ˇŒback
 = 
NULL
;

163 #i‡
LWIP_IGMP


164 
√tif
->
igmp_mac_fûãr
 = 
NULL
;

166 #i‡
ENABLE_LOOPBACK


167 
√tif
->
lo›_fú°
 = 
NULL
;

168 
√tif
->
lo›_œ°
 = 
NULL
;

172 
√tif
->
°©e
 = state;

173 
√tif
->
num
 = 
√ti‚um
++;

174 
√tif
->
öput
 = input;

175 #i‡
LWIP_NETIF_HWADDRHINT


176 
√tif
->
addr_höt
 = 
NULL
;

178 #i‡
ENABLE_LOOPBACK
 && 
LWIP_LOOPBACK_MAX_PBUFS


179 
√tif
->
lo›_˙t_cuºít
 = 0;

182 
	`√tif_£t_addr
(
√tif
, 
ùaddr
, 
√tmask
, 
gw
);

185 i‡(
	`öô
(
√tif
Ë!
ERR_OK
) {

186  
NULL
;

190 
√tif
->
√xt
 = 
√tif_li°
;

191 
√tif_li°
 = 
√tif
;

192 
	`¢mp_öc_iÊi°
();

194 #i‡
LWIP_IGMP


196 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_IGMP
) {

197 
	`igmp_°¨t
(
√tif
);

201 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("netif:ádded interface %c%c IPáddr ",

202 
√tif
->
«me
[0],Çetif->name[1]));

203 
	`ù_addr_debug_¥öt
(
NETIF_DEBUG
, 
ùaddr
);

204 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("Çetmask "));

205 
	`ù_addr_debug_¥öt
(
NETIF_DEBUG
, 
√tmask
);

206 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, (" gw "));

207 
	`ù_addr_debug_¥öt
(
NETIF_DEBUG
, 
gw
);

208 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("\n"));

209  
√tif
;

210 
	}
}

222 
	$√tif_£t_addr
(
√tif
 *√tif, 
ù_addr_t
 *
ùaddr
, ip_addr_à*
√tmask
,

223 
ù_addr_t
 *
gw
)

225 
	`√tif_£t_ùaddr
(
√tif
, 
ùaddr
);

226 
	`√tif_£t_√tmask
(
√tif
, 
√tmask
);

227 
	`√tif_£t_gw
(
√tif
, 
gw
);

228 
	}
}

236 
	$√tif_ªmove
(
√tif
 *netif)

238 i‡(
√tif
 =
NULL
) {

242 #i‡
LWIP_IGMP


244 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_IGMP
) {

245 
	`igmp_°›
(
√tif
);

248 i‡(
	`√tif_is_up
(
√tif
)) {

250 
	`√tif_£t_down
(
√tif
);

253 
	`¢mp_dñëe_ùaddridx_åì
(
√tif
);

256 i‡(
√tif_li°
 =
√tif
) {

257 
√tif_li°
 = 
√tif
->
√xt
;

260 
√tif
 * 
tmpNëif
;

261 
tmpNëif
 = 
√tif_li°
;ÅmpNëi‡!
NULL
;ÅmpNëi‡tmpNëif->
√xt
) {

262 i‡(
tmpNëif
->
√xt
 =
√tif
) {

263 
tmpNëif
->
√xt
 = 
√tif
->next;

267 i‡(
tmpNëif
 =
NULL
)

270 
	`¢mp_dec_iÊi°
();

272 i‡(
√tif_deÁu…
 =
√tif
) {

274 
	`√tif_£t_deÁu…
(
NULL
);

276 
	`LWIP_DEBUGF
–
NETIF_DEBUG
, ("netif_remove:ÑemovedÇetif\n") );

277 
	}
}

285 
√tif
 *

286 
	$√tif_föd
(*
«me
)

288 
√tif
 *netif;

289 
u8_t
 
num
;

291 i‡(
«me
 =
NULL
) {

292  
NULL
;

295 
num
 = 
«me
[2] - '0';

297 
√tif
 = 
√tif_li°
;Çëi‡!
NULL
;Çëi‡√tif->
√xt
) {

298 i‡(
num
 =
√tif
->num &&

299 
«me
[0] =
√tif
->name[0] &&

300 
«me
[1] =
√tif
->name[1]) {

301 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("√tif_föd: found %c%c\n", 
«me
[0],Çame[1]));

302  
√tif
;

305 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("√tif_föd: didn'àföd %c%c\n", 
«me
[0],Çame[1]));

306  
NULL
;

307 
	}
}

319 
	$√tif_£t_ùaddr
(
√tif
 *√tif, 
ù_addr_t
 *
ùaddr
)

323 #i‡
LWIP_TCP


324 
t˝_pcb
 *
pcb
;

325 
t˝_pcb_li°í
 *
Õcb
;

328 i‡((
	`ù_addr_cmp
(
ùaddr
, &(
√tif
->
ù_addr
))) == 0) {

330 
	`LWIP_DEBUGF
(
NETIF_DEBUG
 | 
LWIP_DBG_STATE
, ("netif_set_ipaddr:Çetifáddress being changed\n"));

331 
pcb
 = 
t˝_a˘ive_pcbs
;

332 
pcb
 !
NULL
) {

334 i‡(
	`ù_addr_cmp
(&(
pcb
->
loˇl_ù
), &(
√tif
->
ù_addr
))

335 #i‡
LWIP_AUTOIP


337 && !
	`ù_addr_i¶ökloˇl
(&(
pcb
->
loˇl_ù
))

341 
t˝_pcb
 *
√xt
 = 
pcb
->next;

342 
	`LWIP_DEBUGF
(
NETIF_DEBUG
 | 
LWIP_DBG_STATE
, ("√tif_£t_ùaddr:áb‹tög TCPÖcb %p\n", (*)
pcb
));

343 
	`t˝_ab‹t
(
pcb
);

344 
pcb
 = 
√xt
;

346 
pcb
 =Öcb->
√xt
;

349 
Õcb
 = 
t˝_li°í_pcbs
.
li°í_pcbs
;Üpcb !
NULL
;Üpcb =Üpcb->
√xt
) {

351 i‡((!(
	`ù_addr_ißny
(&(
Õcb
->
loˇl_ù
)))) &&

352 (
	`ù_addr_cmp
(&(
Õcb
->
loˇl_ù
), &(
√tif
->
ù_addr
)))) {

355 
	`ù_addr_£t
(&(
Õcb
->
loˇl_ù
), 
ùaddr
);

360 
	`¢mp_dñëe_ùaddridx_åì
(
√tif
);

361 
	`¢mp_dñëe_ùπeidx_åì
(0,
√tif
);

363 
	`ù_addr_£t
(&(
√tif
->
ù_addr
), 
ùaddr
);

364 
	`¢mp_ö£π_ùaddridx_åì
(
√tif
);

365 
	`¢mp_ö£π_ùπeidx_åì
(0,
√tif
);

367 
	`LWIP_DEBUGF
(
NETIF_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("√tif: IPáddªs†o‡öãrÁ˚ %c%¯£àtÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

368 
√tif
->
«me
[0],Çetif->name[1],

369 
	`ù4_addr1_16
(&
√tif
->
ù_addr
),

370 
	`ù4_addr2_16
(&
√tif
->
ù_addr
),

371 
	`ù4_addr3_16
(&
√tif
->
ù_addr
),

372 
	`ù4_addr4_16
(&
√tif
->
ù_addr
)));

373 
	}
}

384 
	$√tif_£t_gw
(
√tif
 *√tif, 
ù_addr_t
 *
gw
)

386 
	`ù_addr_£t
(&(
√tif
->
gw
), gw);

387 
	`LWIP_DEBUGF
(
NETIF_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("√tif: GWáddªs†o‡öãrÁ˚ %c%¯£àtÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

388 
√tif
->
«me
[0],Çetif->name[1],

389 
	`ù4_addr1_16
(&
√tif
->
gw
),

390 
	`ù4_addr2_16
(&
√tif
->
gw
),

391 
	`ù4_addr3_16
(&
√tif
->
gw
),

392 
	`ù4_addr4_16
(&
√tif
->
gw
)));

393 
	}
}

405 
	$√tif_£t_√tmask
(
√tif
 *√tif, 
ù_addr_t
 *
√tmask
)

407 
	`¢mp_dñëe_ùπeidx_åì
(0, 
√tif
);

409 
	`ù_addr_£t
(&(
√tif
->
√tmask
),Çetmask);

410 
	`¢mp_ö£π_ùπeidx_åì
(0, 
√tif
);

411 
	`LWIP_DEBUGF
(
NETIF_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("√tif:Çëmask o‡öãrÁ˚ %c%¯£àtÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

412 
√tif
->
«me
[0],Çetif->name[1],

413 
	`ù4_addr1_16
(&
√tif
->
√tmask
),

414 
	`ù4_addr2_16
(&
√tif
->
√tmask
),

415 
	`ù4_addr3_16
(&
√tif
->
√tmask
),

416 
	`ù4_addr4_16
(&
√tif
->
√tmask
)));

417 
	}
}

426 
	$√tif_£t_deÁu…
(
√tif
 *netif)

428 i‡(
√tif
 =
NULL
) {

430 
	`¢mp_dñëe_ùπeidx_åì
(1, 
√tif
);

433 
	`¢mp_ö£π_ùπeidx_åì
(1, 
√tif
);

435 
√tif_deÁu…
 = 
√tif
;

436 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("netif: setting default interface %c%c\n",

437 
√tif
 ?Çëif->
«me
[0] : '\'',Çetif ?Çetif->name[1] : '\''));

438 
	}
}

449 
	$√tif_£t_up
(
√tif
 *netif)

451 i‡(!(
√tif
->
Êags
 & 
NETIF_FLAG_UP
)) {

452 
√tif
->
Êags
 |
NETIF_FLAG_UP
;

454 #i‡
LWIP_SNMP


455 
	`¢mp_gë_sysu±ime
(&
√tif
->
ts
);

458 
	`NETIF_STATUS_CALLBACK
(
√tif
);

460 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_LINK_UP
) {

461 #i‡
LWIP_ARP


463 i‡(
√tif
->
Êags
 & (
NETIF_FLAG_ETHARP
)) {

464 
	`ëh¨p_gøtuôous
(
√tif
);

468 #i‡
LWIP_IGMP


470 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_IGMP
) {

471 
	`igmp_ªp‹t_groups
–
√tif
);

476 
	}
}

486 
	$√tif_£t_down
(
√tif
 *netif)

488 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_UP
) {

489 
√tif
->
Êags
 &~
NETIF_FLAG_UP
;

490 #i‡
LWIP_SNMP


491 
	`¢mp_gë_sysu±ime
(&
√tif
->
ts
);

494 
	`NETIF_STATUS_CALLBACK
(
√tif
);

496 
	}
}

498 #i‡
LWIP_NETIF_STATUS_CALLBACK


502 
	$√tif_£t_°©us_ˇŒback
(
√tif
 *√tif, 
√tif_°©us_ˇŒback_‚
 
°©us_ˇŒback
)

504 i‡(
√tif
) {

505 
√tif
->
°©us_ˇŒback
 = status_callback;

507 
	}
}

513 
	$√tif_£t_lök_up
(
√tif
 *netif )

515 i‡(!(
√tif
->
Êags
 & 
NETIF_FLAG_LINK_UP
)) {

516 
√tif
->
Êags
 |
NETIF_FLAG_LINK_UP
;

518 #i‡
LWIP_DHCP


519 i‡(
√tif
->
dh˝
) {

520 
	`dh˝_√tw‹k_ch™ged
(
√tif
);

524 #i‡
LWIP_AUTOIP


525 i‡(
√tif
->
autoù
) {

526 
	`autoù_√tw‹k_ch™ged
(
√tif
);

530 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_UP
) {

531 #i‡
LWIP_ARP


533 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_ETHARP
) {

534 
	`ëh¨p_gøtuôous
(
√tif
);

538 #i‡
LWIP_IGMP


540 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_IGMP
) {

541 
	`igmp_ªp‹t_groups
–
√tif
);

545 
	`NETIF_LINK_CALLBACK
(
√tif
);

547 
	}
}

552 
	$√tif_£t_lök_down
(
√tif
 *netif )

554 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_LINK_UP
) {

555 
√tif
->
Êags
 &~
NETIF_FLAG_LINK_UP
;

556 
	`NETIF_LINK_CALLBACK
(
√tif
);

558 
	}
}

560 #i‡
LWIP_NETIF_LINK_CALLBACK


564 
	$√tif_£t_lök_ˇŒback
(
√tif
 *√tif, 
√tif_°©us_ˇŒback_‚
 
lök_ˇŒback
)

566 i‡(
√tif
) {

567 
√tif
->
lök_ˇŒback
 =Üink_callback;

569 
	}
}

572 #i‡
ENABLE_LOOPBACK


587 
îr_t


588 
	$√tif_lo›_ouçut
(
√tif
 *√tif, 
pbuf
 *
p
,

589 
ù_addr_t
 *
ùaddr
)

591 
pbuf
 *
r
;

592 
îr_t
 
îr
;

593 
pbuf
 *
œ°
;

594 #i‡
LWIP_LOOPBACK_MAX_PBUFS


595 
u8_t
 
˛í
 = 0;

599 #i‡
LWIP_SNMP


600 #i‡
LWIP_HAVE_LOOPIF


601 
√tif
 *
°©s_if
 = &
lo›_√tif
;

603 
√tif
 *
°©s_if
 =Çetif;

606 
	`SYS_ARCH_DECL_PROTECT
(
Àv
);

607 
	`LWIP_UNUSED_ARG
(
ùaddr
);

610 
r
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 
p
->
tŸ_Àn
, 
PBUF_RAM
);

611 i‡(
r
 =
NULL
) {

612 
	`LINK_STATS_INC
(
lök
.
memîr
);

613 
	`LINK_STATS_INC
(
lök
.
dr›
);

614 
	`¢mp_öc_ifoutdisˇrds
(
°©s_if
);

615  
ERR_MEM
;

617 #i‡
LWIP_LOOPBACK_MAX_PBUFS


618 
˛í
 = 
	`pbuf_˛í
(
r
);

620 if(((
√tif
->
lo›_˙t_cuºít
 + 
˛í
) <Çetif->loop_cnt_current) ||

621 ((
√tif
->
lo›_˙t_cuºít
 + 
˛í
Ë> 
LWIP_LOOPBACK_MAX_PBUFS
)) {

622 
	`pbuf_‰ì
(
r
);

623 
	`LINK_STATS_INC
(
lök
.
memîr
);

624 
	`LINK_STATS_INC
(
lök
.
dr›
);

625 
	`¢mp_öc_ifoutdisˇrds
(
°©s_if
);

626  
ERR_MEM
;

628 
√tif
->
lo›_˙t_cuºít
 +
˛í
;

632 i‡((
îr
 = 
	`pbuf_c›y
(
r
, 
p
)Ë!
ERR_OK
) {

633 
	`pbuf_‰ì
(
r
);

634 
	`LINK_STATS_INC
(
lök
.
memîr
);

635 
	`LINK_STATS_INC
(
lök
.
dr›
);

636 
	`¢mp_öc_ifoutdisˇrds
(
°©s_if
);

637  
îr
;

644 
œ°
 = 
r
;Üa°->
√xt
 !
NULL
;Üast =Üast->next);

646 
	`SYS_ARCH_PROTECT
(
Àv
);

647 if(
√tif
->
lo›_fú°
 !
NULL
) {

648 
	`LWIP_ASSERT
("i‡fú° !NULL,Üa° mu°álsÿbê!NULL", 
√tif
->
lo›_œ°
 !
NULL
);

649 
√tif
->
lo›_œ°
->
√xt
 = 
r
;

650 
√tif
->
lo›_œ°
 = 
œ°
;

652 
√tif
->
lo›_fú°
 = 
r
;

653 
√tif
->
lo›_œ°
 = 
œ°
;

655 
	`SYS_ARCH_UNPROTECT
(
Àv
);

657 
	`LINK_STATS_INC
(
lök
.
xmô
);

658 
	`¢mp_add_ifouto˘ës
(
°©s_if
, 
p
->
tŸ_Àn
);

659 
	`¢mp_öc_ifoutuˇ°pkts
(
°©s_if
);

661 #i‡
LWIP_NETIF_LOOPBACK_MULTITHREADING


663 
	`t˝ù_ˇŒback
((
t˝ù_ˇŒback_‚
)
√tif_pﬁl
, 
√tif
);

666  
ERR_OK
;

667 
	}
}

676 
	$√tif_pﬁl
(
√tif
 *netif)

678 
pbuf
 *
ö
;

681 #i‡
LWIP_SNMP


682 #i‡
LWIP_HAVE_LOOPIF


683 
√tif
 *
°©s_if
 = &
lo›_√tif
;

685 
√tif
 *
°©s_if
 =Çetif;

688 
	`SYS_ARCH_DECL_PROTECT
(
Àv
);

692 
	`SYS_ARCH_PROTECT
(
Àv
);

693 
ö
 = 
√tif
->
lo›_fú°
;

694 i‡(
ö
 !
NULL
) {

695 
pbuf
 *
ö_íd
 = 
ö
;

696 #i‡
LWIP_LOOPBACK_MAX_PBUFS


697 
u8_t
 
˛í
 = 
	`pbuf_˛í
(
ö
);

699 
	`LWIP_ASSERT
("netif->loop_cnt_current underflow",

700 ((
√tif
->
lo›_˙t_cuºít
 - 
˛í
) <Çetif->loop_cnt_current));

701 
√tif
->
lo›_˙t_cuºít
 -
˛í
;

703 
ö_íd
->
Àn
 !ö_íd->
tŸ_Àn
) {

704 
	`LWIP_ASSERT
("bogu†pbuf:Üí !tŸ_À¿buà√xà=NULL!", 
ö_íd
->
√xt
 !
NULL
);

705 
ö_íd
 = in_íd->
√xt
;

708 i‡(
ö_íd
 =
√tif
->
lo›_œ°
) {

710 
√tif
->
lo›_fú°
 =Çëif->
lo›_œ°
 = 
NULL
;

713 
√tif
->
lo›_fú°
 = 
ö_íd
->
√xt
;

714 
	`LWIP_ASSERT
("shouldÇŸ bênuŒ sö˚ fú° !œ°!", 
√tif
->
lo›_fú°
 !
NULL
);

717 
ö_íd
->
√xt
 = 
NULL
;

719 
	`SYS_ARCH_UNPROTECT
(
Àv
);

721 i‡(
ö
 !
NULL
) {

722 
	`LINK_STATS_INC
(
lök
.
ªcv
);

723 
	`¢mp_add_iföo˘ës
(
°©s_if
, 
ö
->
tŸ_Àn
);

724 
	`¢mp_öc_iföuˇ°pkts
(
°©s_if
);

726 i‡(
	`ù_öput
(
ö
, 
√tif
Ë!
ERR_OK
) {

727 
	`pbuf_‰ì
(
ö
);

730 
ö
 = 
NULL
;

733 } 
√tif
->
lo›_fú°
 !
NULL
);

734 
	}
}

736 #i‡!
LWIP_NETIF_LOOPBACK_MULTITHREADING


741 
	$√tif_pﬁl_Æl
()

743 
√tif
 *√ti‡
√tif_li°
;

745 
√tif
 !
NULL
) {

746 
	`√tif_pﬁl
(
√tif
);

748 
√tif
 =Çëif->
√xt
;

750 
	}
}

	@core/pbuf.c

64 
	~"lwù/›t.h
"

66 
	~"lwù/°©s.h
"

67 
	~"lwù/def.h
"

68 
	~"lwù/mem.h
"

69 
	~"lwù/memp.h
"

70 
	~"lwù/pbuf.h
"

71 
	~"lwù/sys.h
"

72 
	~"¨ch/≥rf.h
"

73 #i‡
TCP_QUEUE_OOSEQ


74 
	~"lwù/t˝_im∂.h
"

76 #i‡
LWIP_CHECKSUM_ON_COPY


77 
	~"lwù/öë_chksum.h
"

80 
	~<°rög.h
>

82 
	#SIZEOF_STRUCT_PBUF
 
	`LWIP_MEM_ALIGN_SIZE
((
pbuf
))

	)

85 
	#PBUF_POOL_BUFSIZE_ALIGNED
 
	`LWIP_MEM_ALIGN_SIZE
(
PBUF_POOL_BUFSIZE
)

	)

87 #i‡!
LWIP_TCP
 || !
TCP_QUEUE_OOSEQ
 || 
NO_SYS


88 
	#PBUF_POOL_IS_EMPTY
()

	)

91 #i‚de‡
PBUF_POOL_FREE_OOSEQ


92 
	#PBUF_POOL_FREE_OOSEQ
 1

	)

95 #i‡
PBUF_POOL_FREE_OOSEQ


96 
	~"lwù/t˝ù.h
"

97 
	#PBUF_POOL_IS_EMPTY
(Ë
	`pbuf_poﬁ_is_em±y
()

	)

98 
u8_t
 
	gpbuf_‰ì_oo£q_queued
;

108 
	$pbuf_‰ì_oo£q
(* 
¨g
)

110 
t˝_pcb
* 
pcb
;

111 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
);

112 
	`LWIP_UNUSED_ARG
(
¨g
);

114 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
);

115 
pbuf_‰ì_oo£q_queued
 = 0;

116 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
);

118 
pcb
 = 
t˝_a˘ive_pcbs
; 
NULL
 !pcb;Öcb =Öcb->
√xt
) {

119 i‡(
NULL
 !
pcb
->
oo£q
) {

121 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
, ("pbuf_free_ooseq: freeing out-of-sequenceÖbufs\n"));

122 
	`t˝_£gs_‰ì
(
pcb
->
oo£q
);

123 
pcb
->
oo£q
 = 
NULL
;

127 
	}
}

131 
	$pbuf_poﬁ_is_em±y
()

133 
u8_t
 
queued
;

134 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
);

136 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
);

137 
queued
 = 
pbuf_‰ì_oo£q_queued
;

138 
pbuf_‰ì_oo£q_queued
 = 1;

139 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
);

141 if(!
queued
) {

143 if(
	`t˝ù_ˇŒback_wôh_block
(
pbuf_‰ì_oo£q
, 
NULL
, 0Ë!
ERR_OK
) {

144 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
);

145 
pbuf_‰ì_oo£q_queued
 = 0;

146 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
);

149 
	}
}

184 
pbuf
 *

185 
	$pbuf_Æloc
(
pbuf_œyî
 
œyî
, 
u16_t
 
Àngth
, 
pbuf_ty≥
 
ty≥
)

187 
pbuf
 *
p
, *
q
, *
r
;

188 
u16_t
 
off£t
;

189 
s32_t
 
ªm_Àn
;

190 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
, ("pbuf_Æloc÷ígth=%"
U16_F
")\n", 
Àngth
));

193 
off£t
 = 0;

194 
œyî
) {

195 
PBUF_TRANSPORT
:

197 
off£t
 +
PBUF_TRANSPORT_HLEN
;

199 
PBUF_IP
:

201 
off£t
 +
PBUF_IP_HLEN
;

203 
PBUF_LINK
:

205 
off£t
 +
PBUF_LINK_HLEN
;

207 
PBUF_RAW
:

210 
	`LWIP_ASSERT
("pbuf_alloc: badÖbufÜayer", 0);

211  
NULL
;

214 
ty≥
) {

215 
PBUF_POOL
:

217 
p
 = (
pbuf
 *)
	`memp_mÆloc
(
MEMP_PBUF_POOL
);

218 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
, ("pbuf_Æloc:áŒoˇãdÖbu‡%p\n", (*)
p
));

219 i‡(
p
 =
NULL
) {

220 
	`PBUF_POOL_IS_EMPTY
();

221  
NULL
;

223 
p
->
ty≥
 =Åype;

224 
p
->
√xt
 = 
NULL
;

227 
p
->
∑ylﬂd
 = 
	`LWIP_MEM_ALIGN
((*)((
u8_t
 *Ì + (
SIZEOF_STRUCT_PBUF
 + 
off£t
)));

228 
	`LWIP_ASSERT
("pbuf_alloc:ÖbufÖ->payloadÖroperlyáligned",

229 ((
mem_±r_t
)
p
->
∑ylﬂd
 % 
MEM_ALIGNMENT
) == 0);

231 
p
->
tŸ_Àn
 = 
Àngth
;

233 
p
->
Àn
 = 
	`LWIP_MIN
(
Àngth
, 
PBUF_POOL_BUFSIZE_ALIGNED
 - 
	`LWIP_MEM_ALIGN_SIZE
(
off£t
));

234 
	`LWIP_ASSERT
("checkÖ->payload +Ö->len doesÇot overflowÖbuf",

235 ((
u8_t
*)
p
->
∑ylﬂd
 +Ö->
Àn
 <=

236 (
u8_t
*)
p
 + 
SIZEOF_STRUCT_PBUF
 + 
PBUF_POOL_BUFSIZE_ALIGNED
));

237 
	`LWIP_ASSERT
("PBUF_POOL_BUFSIZE must be biggerÅhan MEM_ALIGNMENT",

238 (
PBUF_POOL_BUFSIZE_ALIGNED
 - 
	`LWIP_MEM_ALIGN_SIZE
(
off£t
)) > 0 );

240 
p
->
ªf
 = 1;

245 
r
 = 
p
;

247 
ªm_Àn
 = 
Àngth
 - 
p
->
Àn
;

249 
ªm_Àn
 > 0) {

250 
q
 = (
pbuf
 *)
	`memp_mÆloc
(
MEMP_PBUF_POOL
);

251 i‡(
q
 =
NULL
) {

252 
	`PBUF_POOL_IS_EMPTY
();

254 
	`pbuf_‰ì
(
p
);

256  
NULL
;

258 
q
->
ty≥
 =Åype;

259 
q
->
Êags
 = 0;

260 
q
->
√xt
 = 
NULL
;

262 
r
->
√xt
 = 
q
;

264 
	`LWIP_ASSERT
("ªm_À¿< max_u16_t", 
ªm_Àn
 < 0xffff);

265 
q
->
tŸ_Àn
 = (
u16_t
)
ªm_Àn
;

267 
q
->
Àn
 = 
	`LWIP_MIN
((
u16_t
)
ªm_Àn
, 
PBUF_POOL_BUFSIZE_ALIGNED
);

268 
q
->
∑ylﬂd
 = (*)((
u8_t
 *)q + 
SIZEOF_STRUCT_PBUF
);

269 
	`LWIP_ASSERT
("pbuf_alloc:Öbuf q->payloadÖroperlyáligned",

270 ((
mem_±r_t
)
q
->
∑ylﬂd
 % 
MEM_ALIGNMENT
) == 0);

271 
	`LWIP_ASSERT
("checkÖ->payload +Ö->len doesÇot overflowÖbuf",

272 ((
u8_t
*)
p
->
∑ylﬂd
 +Ö->
Àn
 <=

273 (
u8_t
*)
p
 + 
SIZEOF_STRUCT_PBUF
 + 
PBUF_POOL_BUFSIZE_ALIGNED
));

274 
q
->
ªf
 = 1;

276 
ªm_Àn
 -
q
->
Àn
;

278 
r
 = 
q
;

284 
PBUF_RAM
:

286 
p
 = (
pbuf
*)
	`mem_mÆloc
(
	`LWIP_MEM_ALIGN_SIZE
(
SIZEOF_STRUCT_PBUF
 + 
off£t
Ë+ LWIP_MEM_ALIGN_SIZE(
Àngth
));

287 i‡(
p
 =
NULL
) {

288  
NULL
;

291 
p
->
∑ylﬂd
 = 
	`LWIP_MEM_ALIGN
((*)((
u8_t
 *Ì + 
SIZEOF_STRUCT_PBUF
 + 
off£t
));

292 
p
->
Àn
 =Ö->
tŸ_Àn
 = 
Àngth
;

293 
p
->
√xt
 = 
NULL
;

294 
p
->
ty≥
 =Åype;

296 
	`LWIP_ASSERT
("pbuf_alloc:Öbuf->payloadÖroperlyáligned",

297 ((
mem_±r_t
)
p
->
∑ylﬂd
 % 
MEM_ALIGNMENT
) == 0);

300 
PBUF_ROM
:

302 
PBUF_REF
:

304 
p
 = (
pbuf
 *)
	`memp_mÆloc
(
MEMP_PBUF
);

305 i‡(
p
 =
NULL
) {

306 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_LEVEL_SERIOUS
,

308 (
ty≥
 =
PBUF_ROM
) ? "ROM" : "REF"));

309  
NULL
;

312 
p
->
∑ylﬂd
 = 
NULL
;

313 
p
->
Àn
 =Ö->
tŸ_Àn
 = 
Àngth
;

314 
p
->
√xt
 = 
NULL
;

315 
p
->
ty≥
 =Åype;

318 
	`LWIP_ASSERT
("pbuf_alloc:ÉrroneousÅype", 0);

319  
NULL
;

322 
p
->
ªf
 = 1;

324 
p
->
Êags
 = 0;

325 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
, ("pbuf_Æloc÷ígth=%"
U16_F
"Ë=%p\n", 
Àngth
, (*)
p
));

326  
p
;

327 
	}
}

329 #i‡
LWIP_SUPPORT_CUSTOM_PBUF


343 
pbuf
*

344 
	$pbuf_Ælo˚d_cu°om
(
pbuf_œyî
 
l
, 
u16_t
 
Àngth
, 
pbuf_ty≥
 
ty≥
, 
pbuf_cu°om
 *
p
,

345 *
∑ylﬂd_mem
, 
u16_t
 
∑ylﬂd_mem_Àn
)

347 
u16_t
 
off£t
;

348 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
, ("pbuf_Ælo˚d_cu°om÷ígth=%"
U16_F
")\n", 
Àngth
));

351 
off£t
 = 0;

352 
l
) {

353 
PBUF_TRANSPORT
:

355 
off£t
 +
PBUF_TRANSPORT_HLEN
;

357 
PBUF_IP
:

359 
off£t
 +
PBUF_IP_HLEN
;

361 
PBUF_LINK
:

363 
off£t
 +
PBUF_LINK_HLEN
;

365 
PBUF_RAW
:

368 
	`LWIP_ASSERT
("pbuf_alloced_custom: badÖbufÜayer", 0);

369  
NULL
;

372 i‡(
	`LWIP_MEM_ALIGN_SIZE
(
off£t
Ë+ 
Àngth
 < 
∑ylﬂd_mem_Àn
) {

373 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_LEVEL_WARNING
, ("pbuf_Ælo˚d_cu°om÷ígth=%"
U16_F
"Ëbuf„∏toÿsh‹t\n", 
Àngth
));

374  
NULL
;

377 
p
->
pbuf
.
√xt
 = 
NULL
;

378 i‡(
∑ylﬂd_mem
 !
NULL
) {

379 
p
->
pbuf
.
∑ylﬂd
 = 
	`LWIP_MEM_ALIGN
((*)((
u8_t
 *)
∑ylﬂd_mem
 + 
off£t
));

381 
p
->
pbuf
.
∑ylﬂd
 = 
NULL
;

383 
p
->
pbuf
.
Êags
 = 
PBUF_FLAG_IS_CUSTOM
;

384 
p
->
pbuf
.
Àn
 =Ö->pbuf.
tŸ_Àn
 = 
Àngth
;

385 
p
->
pbuf
.
ty≥
 =Åype;

386 
p
->
pbuf
.
ªf
 = 1;

387  &
p
->
pbuf
;

388 
	}
}

407 
	$pbuf_ªÆloc
(
pbuf
 *
p
, 
u16_t
 
√w_Àn
)

409 
pbuf
 *
q
;

410 
u16_t
 
ªm_Àn
;

411 
s32_t
 
grow
;

413 
	`LWIP_ASSERT
("pbuf_ªÆloc:Ö !NULL", 
p
 !
NULL
);

414 
	`LWIP_ASSERT
("pbuf_ªÆloc: s™êp->ty≥", 
p
->
ty≥
 =
PBUF_POOL
 ||

415 
p
->
ty≥
 =
PBUF_ROM
 ||

416 
p
->
ty≥
 =
PBUF_RAM
 ||

417 
p
->
ty≥
 =
PBUF_REF
);

420 i‡(
√w_Àn
 >
p
->
tŸ_Àn
) {

427 
grow
 = 
√w_Àn
 - 
p
->
tŸ_Àn
;

430 
ªm_Àn
 = 
√w_Àn
;

431 
q
 = 
p
;

433 
ªm_Àn
 > 
q
->
Àn
) {

435 
ªm_Àn
 -
q
->
Àn
;

437 
	`LWIP_ASSERT
("grow < max_u16_t", 
grow
 < 0xffff);

438 
q
->
tŸ_Àn
 +(
u16_t
)
grow
;

440 
q
 = q->
√xt
;

441 
	`LWIP_ASSERT
("pbuf_ªÆloc: q !NULL", 
q
 !
NULL
);

448 i‡((
q
->
ty≥
 =
PBUF_RAM
Ë&& (
ªm_Àn
 !q->
Àn
)) {

450 
q
 = (
pbuf
 *)
	`mem_åim
(q, (
u16_t
)((
u8_t
 *)q->
∑ylﬂd
 - (u8_à*)qË+ 
ªm_Àn
);

451 
	`LWIP_ASSERT
("mem_åimÑëu∫ed q =NULL", 
q
 !
NULL
);

454 
q
->
Àn
 = 
ªm_Àn
;

455 
q
->
tŸ_Àn
 = q->
Àn
;

458 i‡(
q
->
√xt
 !
NULL
) {

460 
	`pbuf_‰ì
(
q
->
√xt
);

463 
q
->
√xt
 = 
NULL
;

465 
	}
}

487 
u8_t


488 
	$pbuf_hódî
(
pbuf
 *
p
, 
s16_t
 
hódî_size_ö¸emít
)

490 
u16_t
 
ty≥
;

491 *
∑ylﬂd
;

492 
u16_t
 
ö¸emít_magnôude
;

494 
	`LWIP_ASSERT
("∞!NULL", 
p
 !
NULL
);

495 i‡((
hódî_size_ö¸emít
 =0Ë|| (
p
 =
NULL
)) {

499 i‡(
hódî_size_ö¸emít
 < 0){

500 
ö¸emít_magnôude
 = -
hódî_size_ö¸emít
;

502 
	`LWIP_ERROR
("ö¸emít_magnôudê<p->Àn", (
ö¸emít_magnôude
 <
p
->
Àn
),  1;);

504 
ö¸emít_magnôude
 = 
hódî_size_ö¸emít
;

509 
	`LWIP_ASSERT
("p->type == PBUF_RAM ||Ö->type == PBUF_POOL",

510 
p
->
ty≥
 =
PBUF_RAM
 ||Ö->ty≥ =
PBUF_POOL
);

512 
	`LWIP_ASSERT
("p->payload - increment_magnitude >=Ö + SIZEOF_STRUCT_PBUF",

513 (
u8_t
 *)
p
->
∑ylﬂd
 - 
ö¸emít_magnôude
 >(u8_à*Ì + 
SIZEOF_STRUCT_PBUF
);

517 
ty≥
 = 
p
->type;

519 
∑ylﬂd
 = 
p
->payload;

522 i‡(
ty≥
 =
PBUF_RAM
 ||Åy≥ =
PBUF_POOL
) {

524 
p
->
∑ylﬂd
 = (
u8_t
 *Ì->∑ylﬂd - 
hódî_size_ö¸emít
;

526 i‡((
u8_t
 *)
p
->
∑ylﬂd
 < (u8_à*Ì + 
SIZEOF_STRUCT_PBUF
) {

527 
	`LWIP_DEBUGF
–
PBUF_DEBUG
 | 
LWIP_DBG_LEVEL_SERIOUS
,

529 (*)
p
->
∑ylﬂd
, (*)(p + 1)));

531 
p
->
∑ylﬂd
 =Öayload;

536 } i‡(
ty≥
 =
PBUF_REF
 ||Åy≥ =
PBUF_ROM
) {

538 i‡((
hódî_size_ö¸emít
 < 0Ë&& (
ö¸emít_magnôude
 <
p
->
Àn
)) {

540 
p
->
∑ylﬂd
 = (
u8_t
 *Ì->∑ylﬂd - 
hódî_size_ö¸emít
;

548 
	`LWIP_ASSERT
("badÖbufÅype", 0);

552 
p
->
Àn
 +
hódî_size_ö¸emít
;

553 
p
->
tŸ_Àn
 +
hódî_size_ö¸emít
;

555 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
, ("pbuf_hódî: old %∞√w %∞(%"
S16_F
")\n",

556 (*)
∑ylﬂd
, (*)
p
->∑ylﬂd, 
hódî_size_ö¸emít
));

559 
	}
}

594 
u8_t


595 
	$pbuf_‰ì
(
pbuf
 *
p
)

597 
u16_t
 
ty≥
;

598 
pbuf
 *
q
;

599 
u8_t
 
cou¡
;

601 i‡(
p
 =
NULL
) {

602 
	`LWIP_ASSERT
("∞!NULL", 
p
 !
NULL
);

604 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_LEVEL_SERIOUS
,

608 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
, ("pbuf_‰ì(%p)\n", (*)
p
));

610 
PERF_START
;

612 
	`LWIP_ASSERT
("pbuf_free: saneÅype",

613 
p
->
ty≥
 =
PBUF_RAM
 ||Ö->ty≥ =
PBUF_ROM
 ||

614 
p
->
ty≥
 =
PBUF_REF
 ||Ö->ty≥ =
PBUF_POOL
);

616 
cou¡
 = 0;

619 
p
 !
NULL
) {

620 
u16_t
 
ªf
;

621 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
);

625 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
);

627 
	`LWIP_ASSERT
("pbuf_‰ì:Ö->ª‡> 0", 
p
->
ªf
 > 0);

629 
ªf
 = --(
p
->ref);

630 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
);

632 i‡(
ªf
 == 0) {

634 
q
 = 
p
->
√xt
;

635 
	`LWIP_DEBUGF
–
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
, ("pbuf_‰ì: dóŒoˇtög %p\n", (*)
p
));

636 
ty≥
 = 
p
->type;

637 #i‡
LWIP_SUPPORT_CUSTOM_PBUF


639 i‡((
p
->
Êags
 & 
PBUF_FLAG_IS_CUSTOM
) != 0) {

640 
pbuf_cu°om
 *
pc
 = (pbuf_cu°om*)
p
;

641 
	`LWIP_ASSERT
("pc->cu°om_‰ì_fun˘i⁄ !NULL", 
pc
->
cu°om_‰ì_fun˘i⁄
 !
NULL
);

642 
pc
->
	`cu°om_‰ì_fun˘i⁄
(
p
);

647 i‡(
ty≥
 =
PBUF_POOL
) {

648 
	`memp_‰ì
(
MEMP_PBUF_POOL
, 
p
);

650 } i‡(
ty≥
 =
PBUF_ROM
 ||Åy≥ =
PBUF_REF
) {

651 
	`memp_‰ì
(
MEMP_PBUF
, 
p
);

654 
	`mem_‰ì
(
p
);

657 
cou¡
++;

659 
p
 = 
q
;

663 
	`LWIP_DEBUGF
–
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
, ("pbuf_‰ì: %∞ha†ª‡%"
U16_F
",Éndög hîe.\n", (*)
p
, 
ªf
));

665 
p
 = 
NULL
;

668 
	`PERF_STOP
("pbuf_free");

670  
cou¡
;

671 
	}
}

680 
u8_t


681 
	$pbuf_˛í
(
pbuf
 *
p
)

683 
u8_t
 
Àn
;

685 
Àn
 = 0;

686 
p
 !
NULL
) {

687 ++
Àn
;

688 
p
 =Ö->
√xt
;

690  
Àn
;

691 
	}
}

700 
	$pbuf_ªf
(
pbuf
 *
p
)

702 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
);

704 i‡(
p
 !
NULL
) {

705 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
);

706 ++(
p
->
ªf
);

707 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
);

709 
	}
}

722 
	$pbuf_ˇt
(
pbuf
 *
h
, pbu‡*
t
)

724 
pbuf
 *
p
;

726 
	`LWIP_ERROR
("(h != NULL) && (t != NULL) (programmer violates API)",

727 ((
h
 !
NULL
Ë&& (
t
 != NULL)), ;);

730 
p
 = 
h
;Ö->
√xt
 !
NULL
;Ö =Ö->next) {

732 
p
->
tŸ_Àn
 +
t
->tot_len;

735 
	`LWIP_ASSERT
("p->tŸ_À¿=p->À¿(o‡œ°Öbu‡ö chaö)", 
p
->
tŸ_Àn
 =p->
Àn
);

736 
	`LWIP_ASSERT
("p->√xà=NULL", 
p
->
√xt
 =
NULL
);

738 
p
->
tŸ_Àn
 +
t
->tot_len;

740 
p
->
√xt
 = 
t
;

744 
	}
}

763 
	$pbuf_chaö
(
pbuf
 *
h
, pbu‡*
t
)

765 
	`pbuf_ˇt
(
h
, 
t
);

767 
	`pbuf_ªf
(
t
);

768 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
, ("pbuf_chaö: %∞ª„ªn˚†%p\n", (*)
h
, (*)
t
));

769 
	}
}

779 
pbuf
 *

780 
	$pbuf_dechaö
(
pbuf
 *
p
)

782 
pbuf
 *
q
;

783 
u8_t
 
èû_g⁄e
 = 1;

785 
q
 = 
p
->
√xt
;

787 i‡(
q
 !
NULL
) {

789 
	`LWIP_ASSERT
("p->tŸ_À¿=p->À¿+ q->tŸ_Àn", 
q
->
tŸ_Àn
 =
p
->tŸ_À¿-Ö->
Àn
);

791 
q
->
tŸ_Àn
 = 
p
->tŸ_À¿-Ö->
Àn
;

793 
p
->
√xt
 = 
NULL
;

795 
p
->
tŸ_Àn
 =Ö->
Àn
;

797 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
, ("pbuf_dechaö: uƒe„ªncög %p\n", (*)
q
));

798 
èû_g⁄e
 = 
	`pbuf_‰ì
(
q
);

799 i‡(
èû_g⁄e
 > 0) {

800 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
,

801 ("pbuf_dechaö: dóŒoˇãd %∞◊†ô i†nÿl⁄gîÑe„ªn˚d)\n", (*)
q
));

806 
	`LWIP_ASSERT
("p->tŸ_À¿=p->Àn", 
p
->
tŸ_Àn
 =p->
Àn
);

807  ((
èû_g⁄e
 > 0Ë? 
NULL
 : 
q
);

808 
	}
}

828 
îr_t


829 
	$pbuf_c›y
(
pbuf
 *
p_to
, pbu‡*
p_‰om
)

831 
u16_t
 
off£t_to
=0, 
off£t_‰om
=0, 
Àn
;

833 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
, ("pbuf_copy(%p, %p)\n",

834 (*)
p_to
, (*)
p_‰om
));

837 
	`LWIP_ERROR
("pbuf_c›y:Å¨gëÇŸ bigÉnoughÅÿhﬁd sour˚", ((
p_to
 !
NULL
) &&

838 (
p_‰om
 !
NULL
Ë&& (
p_to
->
tŸ_Àn
 >p_‰om->tŸ_Àn)),  
ERR_ARG
;);

843 
	`LWIP_ASSERT
("p_tÿ!NULL", 
p_to
 !
NULL
);

845 i‡((
p_to
->
Àn
 - 
off£t_to
Ë>(
p_‰om
->À¿- 
off£t_‰om
)) {

847 
Àn
 = 
p_‰om
->À¿- 
off£t_‰om
;

850 
Àn
 = 
p_to
->À¿- 
off£t_to
;

852 
	`MEMCPY
((
u8_t
*)
p_to
->
∑ylﬂd
 + 
off£t_to
, (u8_t*)
p_‰om
->∑ylﬂd + 
off£t_‰om
, 
Àn
);

853 
off£t_to
 +
Àn
;

854 
off£t_‰om
 +
Àn
;

855 
	`LWIP_ASSERT
("off£t_tÿ<p_to->Àn", 
off£t_to
 <
p_to
->
Àn
);

856 i‡(
off£t_to
 =
p_to
->
Àn
) {

858 
off£t_to
 = 0;

859 
p_to
 =Ö_to->
√xt
;

861 
	`LWIP_ASSERT
("off£t_‰om <p_‰om->Àn", 
off£t_‰om
 <
p_‰om
->
Àn
);

862 i‡(
off£t_‰om
 >
p_‰om
->
Àn
) {

864 
off£t_‰om
 = 0;

865 
p_‰om
 =Ö_‰om->
√xt
;

868 if((
p_‰om
 !
NULL
Ë&& (p_‰om->
Àn
 =p_‰om->
tŸ_Àn
)) {

870 
	`LWIP_ERROR
("pbuf_copy() doesÇotállowÖacket queues!\n",

871 (
p_‰om
->
√xt
 =
NULL
),  
ERR_VAL
;);

873 if((
p_to
 !
NULL
Ë&& (p_to->
Àn
 =p_to->
tŸ_Àn
)) {

875 
	`LWIP_ERROR
("pbuf_copy() doesÇotállowÖacket queues!\n",

876 (
p_to
->
√xt
 =
NULL
),  
ERR_VAL
;);

878 } 
p_‰om
);

879 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
, ("pbuf_copy:Énd of chainÑeached.\n"));

880  
ERR_OK
;

881 
	}
}

894 
u16_t


895 
	$pbuf_c›y_∑πül
(
pbuf
 *
buf
, *
d©≠å
, 
u16_t
 
Àn
, u16_à
off£t
)

897 
pbuf
 *
p
;

898 
u16_t
 
À·
;

899 
u16_t
 
buf_c›y_Àn
;

900 
u16_t
 
c›õd_tŸÆ
 = 0;

902 
	`LWIP_ERROR
("pbuf_c›y_∑πül: invÆid buf", (
buf
 !
NULL
),  0;);

903 
	`LWIP_ERROR
("pbuf_c›y_∑πül: invÆid d©≠å", (
d©≠å
 !
NULL
),  0;);

905 
À·
 = 0;

907 if((
buf
 =
NULL
Ë|| (
d©≠å
 == NULL)) {

912 
p
 = 
buf
; 
Àn
 !0 &&Ö !
NULL
;Ö =Ö->
√xt
) {

913 i‡((
off£t
 !0Ë&& (off£à>
p
->
Àn
)) {

915 
off£t
 -
p
->
Àn
;

918 
buf_c›y_Àn
 = 
p
->
Àn
 - 
off£t
;

919 i‡(
buf_c›y_Àn
 > 
Àn
)

920 
buf_c›y_Àn
 = 
Àn
;

922 
	`MEMCPY
(&((*)
d©≠å
)[
À·
], &((*)
p
->
∑ylﬂd
)[
off£t
], 
buf_c›y_Àn
);

923 
c›õd_tŸÆ
 +
buf_c›y_Àn
;

924 
À·
 +
buf_c›y_Àn
;

925 
Àn
 -
buf_c›y_Àn
;

926 
off£t
 = 0;

929  
c›õd_tŸÆ
;

930 
	}
}

942 
îr_t


943 
	$pbuf_èke
(
pbuf
 *
buf
, c⁄° *
d©≠å
, 
u16_t
 
Àn
)

945 
pbuf
 *
p
;

946 
u16_t
 
buf_c›y_Àn
;

947 
u16_t
 
tŸÆ_c›y_Àn
 = 
Àn
;

948 
u16_t
 
c›õd_tŸÆ
 = 0;

950 
	`LWIP_ERROR
("pbuf_èke: invÆid buf", (
buf
 !
NULL
),  0;);

951 
	`LWIP_ERROR
("pbuf_èke: invÆid d©≠å", (
d©≠å
 !
NULL
),  0;);

953 i‡((
buf
 =
NULL
Ë|| (
d©≠å
 =NULLË|| (buf->
tŸ_Àn
 < 
Àn
)) {

954  
ERR_ARG
;

958 
p
 = 
buf
; 
tŸÆ_c›y_Àn
 !0;Ö =Ö->
√xt
) {

959 
	`LWIP_ASSERT
("pbuf_èke: invÆidÖbuf", 
p
 !
NULL
);

960 
buf_c›y_Àn
 = 
tŸÆ_c›y_Àn
;

961 i‡(
buf_c›y_Àn
 > 
p
->
Àn
) {

963 
buf_c›y_Àn
 = 
p
->
Àn
;

966 
	`MEMCPY
(
p
->
∑ylﬂd
, &((*)
d©≠å
)[
c›õd_tŸÆ
], 
buf_c›y_Àn
);

967 
tŸÆ_c›y_Àn
 -
buf_c›y_Àn
;

968 
c›õd_tŸÆ
 +
buf_c›y_Àn
;

970 
	`LWIP_ASSERT
("didÇŸ c›yáŒ d©a", 
tŸÆ_c›y_Àn
 =0 && 
c›õd_tŸÆ
 =
Àn
);

971  
ERR_OK
;

972 
	}
}

986 
pbuf
*

987 
	$pbuf_cﬂÀs˚
(
pbuf
 *
p
, 
pbuf_œyî
 
œyî
)

989 
pbuf
 *
q
;

990 
îr_t
 
îr
;

991 i‡(
p
->
√xt
 =
NULL
) {

992  
p
;

994 
q
 = 
	`pbuf_Æloc
(
œyî
, 
p
->
tŸ_Àn
, 
PBUF_RAM
);

995 i‡(
q
 =
NULL
) {

997  
p
;

999 
îr
 = 
	`pbuf_c›y
(
q
, 
p
);

1000 
	`LWIP_ASSERT
("pbuf_c›y faûed", 
îr
 =
ERR_OK
);

1001 
	`pbuf_‰ì
(
p
);

1002  
q
;

1003 
	}
}

1005 #i‡
LWIP_CHECKSUM_ON_COPY


1018 
îr_t


1019 
	$pbuf_fûl_chksum
(
pbuf
 *
p
, 
u16_t
 
°¨t_off£t
, c⁄° *
d©≠å
,

1020 
u16_t
 
Àn
, u16_à*
chksum
)

1022 
u32_t
 
acc
;

1023 
u16_t
 
c›y_chksum
;

1024 *
d°_±r
;

1025 
	`LWIP_ASSERT
("∞!NULL", 
p
 !
NULL
);

1026 
	`LWIP_ASSERT
("d©≠å !NULL", 
d©≠å
 !
NULL
);

1027 
	`LWIP_ASSERT
("chksum !NULL", 
chksum
 !
NULL
);

1028 
	`LWIP_ASSERT
("À¿!0", 
Àn
 != 0);

1030 i‡((
°¨t_off£t
 >
p
->
Àn
) || (start_offset +Üen >Ö->len)) {

1031  
ERR_ARG
;

1034 
d°_±r
 = ((*)
p
->
∑ylﬂd
Ë+ 
°¨t_off£t
;

1035 
c›y_chksum
 = 
	`LWIP_CHKSUM_COPY
(
d°_±r
, 
d©≠å
, 
Àn
);

1036 i‡((
°¨t_off£t
 & 1) != 0) {

1037 
c›y_chksum
 = 
	`SWAP_BYTES_IN_WORD
(copy_chksum);

1039 
acc
 = *
chksum
;

1040 
acc
 +
c›y_chksum
;

1041 *
chksum
 = 
	`FOLD_U32T
(
acc
);

1042  
ERR_OK
;

1043 
	}
}

1053 
u8_t


1054 
	$pbuf_gë_©
(
pbuf
* 
p
, 
u16_t
 
off£t
)

1056 
u16_t
 
c›y_‰om
 = 
off£t
;

1057 
pbuf
* 
q
 = 
p
;

1060 (
q
 !
NULL
Ë&& (q->
Àn
 <
c›y_‰om
)) {

1061 
c›y_‰om
 -
q
->
Àn
;

1062 
q
 = q->
√xt
;

1065 i‡((
q
 !
NULL
Ë&& (q->
Àn
 > 
c›y_‰om
)) {

1066  ((
u8_t
*)
q
->
∑ylﬂd
)[
c›y_‰om
];

1069 
	}
}

1080 
u16_t


1081 
	$pbuf_memcmp
(
pbuf
* 
p
, 
u16_t
 
off£t
, c⁄° * 
s2
, u16_à
n
)

1083 
u16_t
 
°¨t
 = 
off£t
;

1084 
pbuf
* 
q
 = 
p
;

1087 (
q
 !
NULL
Ë&& (q->
Àn
 <
°¨t
)) {

1088 
°¨t
 -
q
->
Àn
;

1089 
q
 = q->
√xt
;

1092 i‡((
q
 !
NULL
Ë&& (q->
Àn
 > 
°¨t
)) {

1093 
u16_t
 
i
;

1094 
i
 = 0; i < 
n
; i++) {

1095 
u8_t
 
a
 = 
	`pbuf_gë_©
(
q
, 
°¨t
 + 
i
);

1096 
u8_t
 
b
 = ((u8_t*)
s2
)[
i
];

1097 i‡(
a
 !
b
) {

1098  
i
+1;

1104 
	}
}

1116 
u16_t


1117 
	$pbuf_memföd
(
pbuf
* 
p
, c⁄° * 
mem
, 
u16_t
 
mem_Àn
, u16_à
°¨t_off£t
)

1119 
u16_t
 
i
;

1120 
u16_t
 
max
 = 
p
->
tŸ_Àn
 - 
mem_Àn
;

1121 i‡(
p
->
tŸ_Àn
 >
mem_Àn
 + 
°¨t_off£t
) {

1122 
i
 = 
°¨t_off£t
; i <
max
; ) {

1123 
u16_t
 
∂us
 = 
	`pbuf_memcmp
(
p
, 
i
, 
mem
, 
mem_Àn
);

1124 i‡(
∂us
 == 0) {

1125  
i
;

1127 
i
 +
∂us
;

1132 
	}
}

1144 
u16_t


1145 
	$pbuf_°r°r
(
pbuf
* 
p
, c⁄° * 
sub°r
)

1147 
size_t
 
sub°r_Àn
;

1148 i‡((
sub°r
 =
NULL
Ë|| (sub°r[0] =0Ë|| (
p
->
tŸ_Àn
 == 0xFFFF)) {

1151 
sub°r_Àn
 = 
	`°æí
(
sub°r
);

1152 i‡(
sub°r_Àn
 >= 0xFFFF) {

1155  
	`pbuf_memföd
(
p
, 
sub°r
, (
u16_t
)
sub°r_Àn
, 0);

1156 
	}
}

	@core/raw.c

41 
	~"lwù/›t.h
"

43 #i‡
LWIP_RAW


45 
	~"lwù/def.h
"

46 
	~"lwù/memp.h
"

47 
	~"lwù/ù_addr.h
"

48 
	~"lwù/√tif.h
"

49 
	~"lwù/øw.h
"

50 
	~"lwù/°©s.h
"

51 
	~"¨ch/≥rf.h
"

53 
	~<°rög.h
>

56 
øw_pcb
 *
	gøw_pcbs
;

75 
u8_t


76 
	$øw_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

78 
øw_pcb
 *
pcb
, *
¥ev
;

79 
ù_hdr
 *
ùhdr
;

80 
s16_t
 
¥Ÿo
;

81 
u8_t
 
óãn
 = 0;

83 
	`LWIP_UNUSED_ARG
(
öp
);

85 
ùhdr
 = (
ù_hdr
 *)
p
->
∑ylﬂd
;

86 
¥Ÿo
 = 
	`IPH_PROTO
(
ùhdr
);

88 
¥ev
 = 
NULL
;

89 
pcb
 = 
øw_pcbs
;

92 (
óãn
 =0Ë&& (
pcb
 !
NULL
)) {

93 i‡((
pcb
->
¥Ÿocﬁ
 =
¥Ÿo
) &&

94 (
	`ù_addr_ißny
(&
pcb
->
loˇl_ù
) ||

95 
	`ù_addr_cmp
(&(
pcb
->
loˇl_ù
), &
cuºít_ùhdr_de°
))) {

96 #i‡
IP_SOF_BROADCAST_RECV


98 i‡((
pcb
->
so_›ti⁄s
 & 
SOF_BROADCAST
Ë|| !
	`ù_addr_isbrﬂdˇ°
(&
cuºít_ùhdr_de°
, 
öp
))

102 i‡(
pcb
->
ªcv
 !
NULL
) {

104 i‡(
pcb
->
	`ªcv
’cb->
ªcv_¨g
,Öcb, 
p
, 
	`ù_cuºít_§c_addr
()) != 0) {

106 
p
 = 
NULL
;

107 
óãn
 = 1;

108 i‡(
¥ev
 !
NULL
) {

111 
¥ev
->
√xt
 = 
pcb
->next;

112 
pcb
->
√xt
 = 
øw_pcbs
;

113 
øw_pcbs
 = 
pcb
;

121 
¥ev
 = 
pcb
;

122 
pcb
 =Öcb->
√xt
;

124  
óãn
;

125 
	}
}

141 
îr_t


142 
	$øw_böd
(
øw_pcb
 *
pcb
, 
ù_addr_t
 *
ùaddr
)

144 
	`ù_addr_£t
(&
pcb
->
loˇl_ù
, 
ùaddr
);

145  
ERR_OK
;

146 
	}
}

161 
îr_t


162 
	$øw_c⁄√˘
(
øw_pcb
 *
pcb
, 
ù_addr_t
 *
ùaddr
)

164 
	`ù_addr_£t
(&
pcb
->
ªmŸe_ù
, 
ùaddr
);

165  
ERR_OK
;

166 
	}
}

183 
	$øw_ªcv
(
øw_pcb
 *
pcb
, 
øw_ªcv_‚
 
ªcv
, *
ªcv_¨g
)

186 
pcb
->
ªcv
 =Ñecv;

187 
pcb
->
ªcv_¨g
 =Ñecv_arg;

188 
	}
}

202 
îr_t


203 
	$øw_£ndto
(
øw_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr_t
 *
ùaddr
)

205 
îr_t
 
îr
;

206 
√tif
 *netif;

207 
ù_addr_t
 *
§c_ù
;

208 
pbuf
 *
q
;

210 
	`LWIP_DEBUGF
(
RAW_DEBUG
 | 
LWIP_DBG_TRACE
, ("raw_sendto\n"));

213 i‡(
	`pbuf_hódî
(
p
, 
IP_HLEN
)) {

215 
q
 = 
	`pbuf_Æloc
(
PBUF_IP
, 0, 
PBUF_RAM
);

217 i‡(
q
 =
NULL
) {

218 
	`LWIP_DEBUGF
(
RAW_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_LEVEL_SERIOUS
, ("raw_sendto: couldÇotállocate header\n"));

219  
ERR_MEM
;

221 i‡(
p
->
tŸ_Àn
 != 0) {

223 
	`pbuf_chaö
(
q
, 
p
);

226 
	`LWIP_DEBUGF
(
RAW_DEBUG
, ("øw_£ndto:ádded hódîÖbu‡%∞bef‹êgivíÖbu‡%p\n", (*)
q
, (*)
p
));

229 
q
 = 
p
;

230 if(
	`pbuf_hódî
(
q
, -
IP_HLEN
)) {

231 
	`LWIP_ASSERT
("Can'tÑestore header we justÑemoved!", 0);

232  
ERR_MEM
;

236 i‡((
√tif
 = 
	`ù_rouã
(
ùaddr
)Ë=
NULL
) {

237 
	`LWIP_DEBUGF
(
RAW_DEBUG
 | 
LWIP_DBG_LEVEL_WARNING
, ("øw_£ndto: NÿrouãÅÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

238 
	`ù4_addr1_16
(
ùaddr
), 
	`ù4_addr2_16
(ùaddr), 
	`ù4_addr3_16
(ùaddr), 
	`ù4_addr4_16
(ipaddr)));

240 i‡(
q
 !
p
) {

241 
	`pbuf_‰ì
(
q
);

243  
ERR_RTE
;

246 #i‡
IP_SOF_BROADCAST


248 i‡(((
pcb
->
so_›ti⁄s
 & 
SOF_BROADCAST
Ë=0Ë&& 
	`ù_addr_isbrﬂdˇ°
(
ùaddr
, 
√tif
)) {

249 
	`LWIP_DEBUGF
(
RAW_DEBUG
 | 
LWIP_DBG_LEVEL_WARNING
, ("øw_£ndto: SOF_BROADCASTÇŸÉ«bÀd o¿pcb %p\n", (*)
pcb
));

251 i‡(
q
 !
p
) {

252 
	`pbuf_‰ì
(
q
);

254  
ERR_VAL
;

258 i‡(
	`ù_addr_ißny
(&
pcb
->
loˇl_ù
)) {

260 
§c_ù
 = &(
√tif
->
ù_addr
);

263 
§c_ù
 = &(
pcb
->
loˇl_ù
);

266 #i‡
LWIP_NETIF_HWADDRHINT


267 
√tif
->
addr_höt
 = &(
pcb
->addr_hint);

269 
îr
 = 
	`ù_ouçut_if
 (
q
, 
§c_ù
, 
ùaddr
, 
pcb
->
âl
,Öcb->
tos
,Öcb->
¥Ÿocﬁ
, 
√tif
);

270 #i‡
LWIP_NETIF_HWADDRHINT


271 
√tif
->
addr_höt
 = 
NULL
;

275 i‡(
q
 !
p
) {

277 
	`pbuf_‰ì
(
q
);

279  
îr
;

280 
	}
}

289 
îr_t


290 
	$øw_£nd
(
øw_pcb
 *
pcb
, 
pbuf
 *
p
)

292  
	`øw_£ndto
(
pcb
, 
p
, &pcb->
ªmŸe_ù
);

293 
	}
}

304 
	$øw_ªmove
(
øw_pcb
 *
pcb
)

306 
øw_pcb
 *
pcb2
;

308 i‡(
øw_pcbs
 =
pcb
) {

310 
øw_pcbs
 =Ñaw_pcbs->
√xt
;

313 
pcb2
 = 
øw_pcbs
;Öcb2 !
NULL
;Öcb2 =Öcb2->
√xt
) {

315 i‡(
pcb2
->
√xt
 !
NULL
 &&Öcb2->√xà=
pcb
) {

317 
pcb2
->
√xt
 = 
pcb
->next;

321 
	`memp_‰ì
(
MEMP_RAW_PCB
, 
pcb
);

322 
	}
}

334 
øw_pcb
 *

335 
	$øw_√w
(
u8_t
 
¥Ÿo
)

337 
øw_pcb
 *
pcb
;

339 
	`LWIP_DEBUGF
(
RAW_DEBUG
 | 
LWIP_DBG_TRACE
, ("raw_new\n"));

341 
pcb
 = (
øw_pcb
 *)
	`memp_mÆloc
(
MEMP_RAW_PCB
);

343 i‡(
pcb
 !
NULL
) {

345 
	`mem£t
(
pcb
, 0, (
øw_pcb
));

346 
pcb
->
¥Ÿocﬁ
 = 
¥Ÿo
;

347 
pcb
->
âl
 = 
RAW_TTL
;

348 
pcb
->
√xt
 = 
øw_pcbs
;

349 
øw_pcbs
 = 
pcb
;

351  
pcb
;

352 
	}
}

	@core/snmp/asn1_dec.c

37 
	~"lwù/›t.h
"

39 #i‡
LWIP_SNMP


41 
	~"lwù/¢mp_a¢1.h
"

51 
îr_t


52 
	$¢mp_a¢1_dec_ty≥
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 *
ty≥
)

54 
u16_t
 
∂í
, 
ba£
;

55 
u8_t
 *
msg_±r
;

57 
∂í
 = 0;

58 
p
 !
NULL
)

60 
ba£
 = 
∂í
;

61 
∂í
 +
p
->
Àn
;

62 i‡(
ofs
 < 
∂í
)

64 
msg_±r
 = (
u8_t
*)
p
->
∑ylﬂd
;

65 
msg_±r
 +
ofs
 - 
ba£
;

66 *
ty≥
 = *
msg_±r
;

67  
ERR_OK
;

69 
p
 =Ö->
√xt
;

72  
ERR_ARG
;

73 
	}
}

84 
îr_t


85 
	$¢mp_a¢1_dec_Àngth
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 *
o˘ës_u£d
, u16_à*
Àngth
)

87 
u16_t
 
∂í
, 
ba£
;

88 
u8_t
 *
msg_±r
;

90 
∂í
 = 0;

91 
p
 !
NULL
)

93 
ba£
 = 
∂í
;

94 
∂í
 +
p
->
Àn
;

95 i‡(
ofs
 < 
∂í
)

97 
msg_±r
 = (
u8_t
*)
p
->
∑ylﬂd
;

98 
msg_±r
 +
ofs
 - 
ba£
;

100 i‡(*
msg_±r
 < 0x80)

103 *
o˘ës_u£d
 = 1;

104 *
Àngth
 = *
msg_±r
;

105  
ERR_OK
;

107 i‡(*
msg_±r
 == 0x80)

110 
u8_t
 
zîos
;

111 
u8_t
 
i
;

113 *
Àngth
 = 0;

114 
zîos
 = 0;

115 
zîos
 != 2)

117 
i
 = 2;

118 
i
 > 0)

120 
i
--;

121 (*
Àngth
) += 1;

122 
ofs
 += 1;

123 i‡(
ofs
 >
∂í
)

126 
p
 =Ö->
√xt
;

127 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

128 
msg_±r
 = (
u8_t
*)
p
->
∑ylﬂd
;

129 
∂í
 +
p
->
Àn
;

134 
msg_±r
++;

136 i‡(*
msg_±r
 == 0)

138 
zîos
++;

139 i‡(
zîos
 == 2)

142 
i
 = 0;

147 
zîos
 = 0;

151 *
o˘ës_u£d
 = 1;

152  
ERR_OK
;

154 i‡(*
msg_±r
 == 0x81)

157 
ofs
 += 1;

158 i‡(
ofs
 >
∂í
)

161 
p
 =Ö->
√xt
;

162 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

163 
msg_±r
 = (
u8_t
*)
p
->
∑ylﬂd
;

168 
msg_±r
++;

170 *
Àngth
 = *
msg_±r
;

171 *
o˘ës_u£d
 = 2;

172  
ERR_OK
;

174 i‡(*
msg_±r
 == 0x82)

176 
u8_t
 
i
;

179 
i
 = 2;

180 
i
 > 0)

182 
i
--;

183 
ofs
 += 1;

184 i‡(
ofs
 >
∂í
)

187 
p
 =Ö->
√xt
;

188 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

189 
msg_±r
 = (
u8_t
*)
p
->
∑ylﬂd
;

190 
∂í
 +
p
->
Àn
;

195 
msg_±r
++;

197 i‡(
i
 == 0)

200 *
Àngth
 |*
msg_±r
;

205 *
Àngth
 = (*
msg_±r
) << 8;

208 *
o˘ës_u£d
 = 3;

209  
ERR_OK
;

215 *
o˘ës_u£d
 = 1 + ((*
msg_±r
) & 0x7f);

216  
ERR_ARG
;

219 
p
 =Ö->
√xt
;

223  
ERR_ARG
;

224 
	}
}

239 
îr_t


240 
	$¢mp_a¢1_dec_u32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
u32_t
 *
vÆue
)

242 
u16_t
 
∂í
, 
ba£
;

243 
u8_t
 *
msg_±r
;

245 
∂í
 = 0;

246 
p
 !
NULL
)

248 
ba£
 = 
∂í
;

249 
∂í
 +
p
->
Àn
;

250 i‡(
ofs
 < 
∂í
)

252 
msg_±r
 = (
u8_t
*)
p
->
∑ylﬂd
;

253 
msg_±r
 +
ofs
 - 
ba£
;

254 i‡((
Àn
 > 0) && (len < 6))

257 *
vÆue
 = 0;

258 i‡(*
msg_±r
 & 0x80)

261  
ERR_ARG
;

266 i‡((
Àn
 > 1Ë&& (*
msg_±r
 == 0))

269 
Àn
--;

270 
ofs
 += 1;

271 i‡(
ofs
 >
∂í
)

274 
p
 =Ö->
√xt
;

275 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

276 
msg_±r
 = (
u8_t
*)
p
->
∑ylﬂd
;

277 
∂í
 +
p
->
Àn
;

282 
msg_±r
++;

287 
Àn
 > 1)

289 
Àn
--;

290 *
vÆue
 |*
msg_±r
;

291 *
vÆue
 <<= 8;

292 
ofs
 += 1;

293 i‡(
ofs
 >
∂í
)

296 
p
 =Ö->
√xt
;

297 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

298 
msg_±r
 = (
u8_t
*)
p
->
∑ylﬂd
;

299 
∂í
 +
p
->
Àn
;

304 
msg_±r
++;

307 *
vÆue
 |*
msg_±r
;

308  
ERR_OK
;

312  
ERR_ARG
;

315 
p
 =Ö->
√xt
;

318  
ERR_ARG
;

319 
	}
}

332 
îr_t


333 
	$¢mp_a¢1_dec_s32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
s32_t
 *
vÆue
)

335 
u16_t
 
∂í
, 
ba£
;

336 
u8_t
 *
msg_±r
;

337 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


338 
u8_t
 *
lsb_±r
 = (u8_t*)
vÆue
;

340 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


341 
u8_t
 *
lsb_±r
 = (u8_t*)
vÆue
 + (
s32_t
) - 1;

343 
u8_t
 
sign
;

345 
∂í
 = 0;

346 
p
 !
NULL
)

348 
ba£
 = 
∂í
;

349 
∂í
 +
p
->
Àn
;

350 i‡(
ofs
 < 
∂í
)

352 
msg_±r
 = (
u8_t
*)
p
->
∑ylﬂd
;

353 
msg_±r
 +
ofs
 - 
ba£
;

354 i‡((
Àn
 > 0) && (len < 5))

356 i‡(*
msg_±r
 & 0x80)

359 *
vÆue
 = -1;

360 
sign
 = 1;

365 *
vÆue
 = 0;

366 
sign
 = 0;

369 
Àn
 > 1)

371 
Àn
--;

372 i‡(
sign
)

374 *
lsb_±r
 &*
msg_±r
;

375 *
vÆue
 <<= 8;

376 *
lsb_±r
 |= 255;

380 *
lsb_±r
 |*
msg_±r
;

381 *
vÆue
 <<= 8;

383 
ofs
 += 1;

384 i‡(
ofs
 >
∂í
)

387 
p
 =Ö->
√xt
;

388 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

389 
msg_±r
 = (
u8_t
*)
p
->
∑ylﬂd
;

390 
∂í
 +
p
->
Àn
;

395 
msg_±r
++;

398 i‡(
sign
)

400 *
lsb_±r
 &*
msg_±r
;

404 *
lsb_±r
 |*
msg_±r
;

406  
ERR_OK
;

410  
ERR_ARG
;

413 
p
 =Ö->
√xt
;

416  
ERR_ARG
;

417 
	}
}

428 
îr_t


429 
	$¢mp_a¢1_dec_oid
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
¢mp_obj_id
 *
oid
)

431 
u16_t
 
∂í
, 
ba£
;

432 
u8_t
 *
msg_±r
;

433 
s32_t
 *
oid_±r
;

435 
∂í
 = 0;

436 
p
 !
NULL
)

438 
ba£
 = 
∂í
;

439 
∂í
 +
p
->
Àn
;

440 i‡(
ofs
 < 
∂í
)

442 
msg_±r
 = (
u8_t
*)
p
->
∑ylﬂd
;

443 
msg_±r
 +
ofs
 - 
ba£
;

445 
oid
->
Àn
 = 0;

446 
oid_±r
 = &
oid
->
id
[0];

447 i‡(
Àn
 > 0)

450 i‡(*
msg_±r
 == 0x2B)

453 *
oid_±r
 = 1;

454 
oid_±r
++;

455 *
oid_±r
 = 3;

456 
oid_±r
++;

458 i‡(*
msg_±r
 < 40)

460 *
oid_±r
 = 0;

461 
oid_±r
++;

462 *
oid_±r
 = *
msg_±r
;

463 
oid_±r
++;

465 i‡(*
msg_±r
 < 80)

467 *
oid_±r
 = 1;

468 
oid_±r
++;

469 *
oid_±r
 = (*
msg_±r
) - 40;

470 
oid_±r
++;

474 *
oid_±r
 = 2;

475 
oid_±r
++;

476 *
oid_±r
 = (*
msg_±r
) - 80;

477 
oid_±r
++;

479 
oid
->
Àn
 = 2;

485  
ERR_OK
;

487 
Àn
--;

488 i‡(
Àn
 > 0)

490 
ofs
 += 1;

491 i‡(
ofs
 >
∂í
)

494 
p
 =Ö->
√xt
;

495 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

496 
msg_±r
 = (
u8_t
*)
p
->
∑ylﬂd
;

497 
∂í
 +
p
->
Àn
;

502 
msg_±r
++;

505 (
Àn
 > 0Ë&& (
oid
->À¿< 
LWIP_SNMP_OBJ_ID_LEN
))

508 i‡(*
msg_±r
 & 0x80)

510 
s32_t
 
sub_id
 = 0;

512 (*
msg_±r
 & 0x80Ë&& (
Àn
 > 1))

514 
Àn
--;

515 
sub_id
 = (sub_id << 7Ë+ (*
msg_±r
 & ~0x80);

516 
ofs
 += 1;

517 i‡(
ofs
 >
∂í
)

520 
p
 =Ö->
√xt
;

521 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

522 
msg_±r
 = (
u8_t
*)
p
->
∑ylﬂd
;

523 
∂í
 +
p
->
Àn
;

528 
msg_±r
++;

531 i‡(!(*
msg_±r
 & 0x80Ë&& (
Àn
 > 0))

534 
Àn
--;

535 
sub_id
 = (sub_id << 7Ë+ *
msg_±r
;

536 *
oid_±r
 = 
sub_id
;

542 
Àn
--;

543 *
oid_±r
 = *
msg_±r
;

545 i‡(
Àn
 > 0)

548 
ofs
 += 1;

549 i‡(
ofs
 >
∂í
)

552 
p
 =Ö->
√xt
;

553 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

554 
msg_±r
 = (
u8_t
*)
p
->
∑ylﬂd
;

555 
∂í
 +
p
->
Àn
;

560 
msg_±r
++;

563 
oid_±r
++;

564 
oid
->
Àn
++;

566 i‡(
Àn
 == 0)

569  
ERR_OK
;

574  
ERR_ARG
;

578 
p
 =Ö->
√xt
;

581  
ERR_ARG
;

582 
	}
}

595 
îr_t


596 
	$¢mp_a¢1_dec_øw
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, u16_à
øw_Àn
, 
u8_t
 *
øw
)

598 
u16_t
 
∂í
, 
ba£
;

599 
u8_t
 *
msg_±r
;

601 i‡(
Àn
 > 0)

603 
∂í
 = 0;

604 
p
 !
NULL
)

606 
ba£
 = 
∂í
;

607 
∂í
 +
p
->
Àn
;

608 i‡(
ofs
 < 
∂í
)

610 
msg_±r
 = (
u8_t
*)
p
->
∑ylﬂd
;

611 
msg_±r
 +
ofs
 - 
ba£
;

612 i‡(
øw_Àn
 >
Àn
)

614 
Àn
 > 1)

617 
Àn
--;

618 *
øw
 = *
msg_±r
;

619 
øw
++;

620 
ofs
 += 1;

621 i‡(
ofs
 >
∂í
)

624 
p
 =Ö->
√xt
;

625 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

626 
msg_±r
 = (
u8_t
*)
p
->
∑ylﬂd
;

627 
∂í
 +
p
->
Àn
;

632 
msg_±r
++;

636 *
øw
 = *
msg_±r
;

637  
ERR_OK
;

642  
ERR_ARG
;

645 
p
 =Ö->
√xt
;

648  
ERR_ARG
;

653  
ERR_OK
;

655 
	}
}

	@core/snmp/asn1_enc.c

37 
	~"lwù/›t.h
"

39 #i‡
LWIP_SNMP


41 
	~"lwù/¢mp_a¢1.h
"

50 
	$¢mp_a¢1_íc_Àngth_˙t
(
u16_t
 
Àngth
, 
u8_t
 *
o˘ës_√eded
)

52 i‡(
Àngth
 < 0x80U)

54 *
o˘ës_√eded
 = 1;

56 i‡(
Àngth
 < 0x100U)

58 *
o˘ës_√eded
 = 2;

62 *
o˘ës_√eded
 = 3;

64 
	}
}

77 
	$¢mp_a¢1_íc_u32t_˙t
(
u32_t
 
vÆue
, 
u16_t
 *
o˘ës_√eded
)

79 i‡(
vÆue
 < 0x80UL)

81 *
o˘ës_√eded
 = 1;

83 i‡(
vÆue
 < 0x8000UL)

85 *
o˘ës_√eded
 = 2;

87 i‡(
vÆue
 < 0x800000UL)

89 *
o˘ës_√eded
 = 3;

91 i‡(
vÆue
 < 0x80000000UL)

93 *
o˘ës_√eded
 = 4;

97 *
o˘ës_√eded
 = 5;

99 
	}
}

110 
	$¢mp_a¢1_íc_s32t_˙t
(
s32_t
 
vÆue
, 
u16_t
 *
o˘ës_√eded
)

112 i‡(
vÆue
 < 0)

114 
vÆue
 = ~value;

116 i‡(
vÆue
 < 0x80L)

118 *
o˘ës_√eded
 = 1;

120 i‡(
vÆue
 < 0x8000L)

122 *
o˘ës_√eded
 = 2;

124 i‡(
vÆue
 < 0x800000L)

126 *
o˘ës_√eded
 = 3;

130 *
o˘ës_√eded
 = 4;

132 
	}
}

142 
	$¢mp_a¢1_íc_oid_˙t
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
u16_t
 *
o˘ës_√eded
)

144 
s32_t
 
sub_id
;

145 
u8_t
 
˙t
;

147 
˙t
 = 0;

148 i‡(
idít_Àn
 > 1)

151 
˙t
++;

152 
idít_Àn
 -= 2;

153 
idít
 += 2;

155 
idít_Àn
 > 0)

157 
idít_Àn
--;

158 
sub_id
 = *
idít
;

160 
sub_id
 >>= 7;

161 
˙t
++;

162 
sub_id
 > 0)

164 
sub_id
 >>= 7;

165 
˙t
++;

167 
idít
++;

169 *
o˘ës_√eded
 = 
˙t
;

170 
	}
}

180 
îr_t


181 
	$¢mp_a¢1_íc_ty≥
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
ty≥
)

183 
u16_t
 
∂í
, 
ba£
;

184 
u8_t
 *
msg_±r
;

186 
∂í
 = 0;

187 
p
 !
NULL
)

189 
ba£
 = 
∂í
;

190 
∂í
 +
p
->
Àn
;

191 i‡(
ofs
 < 
∂í
)

193 
msg_±r
 = (
u8_t
*)
p
->
∑ylﬂd
;

194 
msg_±r
 +
ofs
 - 
ba£
;

195 *
msg_±r
 = 
ty≥
;

196  
ERR_OK
;

198 
p
 =Ö->
√xt
;

201  
ERR_ARG
;

202 
	}
}

212 
îr_t


213 
	$¢mp_a¢1_íc_Àngth
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àngth
)

215 
u16_t
 
∂í
, 
ba£
;

216 
u8_t
 *
msg_±r
;

218 
∂í
 = 0;

219 
p
 !
NULL
)

221 
ba£
 = 
∂í
;

222 
∂í
 +
p
->
Àn
;

223 i‡(
ofs
 < 
∂í
)

225 
msg_±r
 = (
u8_t
*)
p
->
∑ylﬂd
;

226 
msg_±r
 +
ofs
 - 
ba£
;

228 i‡(
Àngth
 < 0x80)

230 *
msg_±r
 = (
u8_t
)
Àngth
;

231  
ERR_OK
;

233 i‡(
Àngth
 < 0x100)

235 *
msg_±r
 = 0x81;

236 
ofs
 += 1;

237 i‡(
ofs
 >
∂í
)

240 
p
 =Ö->
√xt
;

241 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

242 
msg_±r
 = (
u8_t
*)
p
->
∑ylﬂd
;

247 
msg_±r
++;

249 *
msg_±r
 = (
u8_t
)
Àngth
;

250  
ERR_OK
;

254 
u8_t
 
i
;

257 *
msg_±r
 = 0x82;

258 
i
 = 2;

259 
i
 > 0)

261 
i
--;

262 
ofs
 += 1;

263 i‡(
ofs
 >
∂í
)

266 
p
 =Ö->
√xt
;

267 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

268 
msg_±r
 = (
u8_t
*)
p
->
∑ylﬂd
;

269 
∂í
 +
p
->
Àn
;

274 
msg_±r
++;

276 i‡(
i
 == 0)

279 *
msg_±r
 = (
u8_t
)
Àngth
;

284 *
msg_±r
 = (
u8_t
)(
Àngth
 >> 8);

287  
ERR_OK
;

290 
p
 =Ö->
√xt
;

293  
ERR_ARG
;

294 
	}
}

307 
îr_t


308 
	$¢mp_a¢1_íc_u32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
o˘ës_√eded
, 
u32_t
 
vÆue
)

310 
u16_t
 
∂í
, 
ba£
;

311 
u8_t
 *
msg_±r
;

313 
∂í
 = 0;

314 
p
 !
NULL
)

316 
ba£
 = 
∂í
;

317 
∂í
 +
p
->
Àn
;

318 i‡(
ofs
 < 
∂í
)

320 
msg_±r
 = (
u8_t
*)
p
->
∑ylﬂd
;

321 
msg_±r
 +
ofs
 - 
ba£
;

323 i‡(
o˘ës_√eded
 == 5)

326 
o˘ës_√eded
--;

327 *
msg_±r
 = 0x00;

328 
ofs
 += 1;

329 i‡(
ofs
 >
∂í
)

332 
p
 =Ö->
√xt
;

333 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

334 
msg_±r
 = (
u8_t
*)
p
->
∑ylﬂd
;

335 
∂í
 +
p
->
Àn
;

340 
msg_±r
++;

343 
o˘ës_√eded
 > 1)

345 
o˘ës_√eded
--;

346 *
msg_±r
 = (
u8_t
)(
vÆue
 >> (
o˘ës_√eded
 << 3));

347 
ofs
 += 1;

348 i‡(
ofs
 >
∂í
)

351 
p
 =Ö->
√xt
;

352 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

353 
msg_±r
 = (
u8_t
*)
p
->
∑ylﬂd
;

354 
∂í
 +
p
->
Àn
;

359 
msg_±r
++;

363 *
msg_±r
 = (
u8_t
)
vÆue
;

364  
ERR_OK
;

366 
p
 =Ö->
√xt
;

369  
ERR_ARG
;

370 
	}
}

383 
îr_t


384 
	$¢mp_a¢1_íc_s32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
o˘ës_√eded
, 
s32_t
 
vÆue
)

386 
u16_t
 
∂í
, 
ba£
;

387 
u8_t
 *
msg_±r
;

389 
∂í
 = 0;

390 
p
 !
NULL
)

392 
ba£
 = 
∂í
;

393 
∂í
 +
p
->
Àn
;

394 i‡(
ofs
 < 
∂í
)

396 
msg_±r
 = (
u8_t
*)
p
->
∑ylﬂd
;

397 
msg_±r
 +
ofs
 - 
ba£
;

399 
o˘ës_√eded
 > 1)

401 
o˘ës_√eded
--;

402 *
msg_±r
 = (
u8_t
)(
vÆue
 >> (
o˘ës_√eded
 << 3));

403 
ofs
 += 1;

404 i‡(
ofs
 >
∂í
)

407 
p
 =Ö->
√xt
;

408 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

409 
msg_±r
 = (
u8_t
*)
p
->
∑ylﬂd
;

410 
∂í
 +
p
->
Àn
;

415 
msg_±r
++;

419 *
msg_±r
 = (
u8_t
)
vÆue
;

420  
ERR_OK
;

422 
p
 =Ö->
√xt
;

425  
ERR_ARG
;

426 
	}
}

437 
îr_t


438 
	$¢mp_a¢1_íc_oid
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
)

440 
u16_t
 
∂í
, 
ba£
;

441 
u8_t
 *
msg_±r
;

443 
∂í
 = 0;

444 
p
 !
NULL
)

446 
ba£
 = 
∂í
;

447 
∂í
 +
p
->
Àn
;

448 i‡(
ofs
 < 
∂í
)

450 
msg_±r
 = (
u8_t
*)
p
->
∑ylﬂd
;

451 
msg_±r
 +
ofs
 - 
ba£
;

453 i‡(
idít_Àn
 > 1)

455 i‡((
idít
[0] == 1) && (ident[1] == 3))

458 *
msg_±r
 = 0x2b;

463 *
msg_±r
 = (
u8_t
)((
idít
[0] * 40) + ident[1]);

465 
ofs
 += 1;

466 i‡(
ofs
 >
∂í
)

469 
p
 =Ö->
√xt
;

470 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

471 
msg_±r
 = (
u8_t
*)
p
->
∑ylﬂd
;

472 
∂í
 +
p
->
Àn
;

477 
msg_±r
++;

479 
idít_Àn
 -= 2;

480 
idít
 += 2;

486  
ERR_ARG
;

488 
idít_Àn
 > 0)

490 
s32_t
 
sub_id
;

491 
u8_t
 
shi·
, 
èû
;

493 
idít_Àn
--;

494 
sub_id
 = *
idít
;

495 
èû
 = 0;

496 
shi·
 = 28;

497 
shi·
 > 0)

499 
u8_t
 
code
;

501 
code
 = (
u8_t
)(
sub_id
 >> 
shi·
);

502 i‡((
code
 !0Ë|| (
èû
 != 0))

504 
èû
 = 1;

505 *
msg_±r
 = 
code
 | 0x80;

506 
ofs
 += 1;

507 i‡(
ofs
 >
∂í
)

510 
p
 =Ö->
√xt
;

511 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

512 
msg_±r
 = (
u8_t
*)
p
->
∑ylﬂd
;

513 
∂í
 +
p
->
Àn
;

518 
msg_±r
++;

521 
shi·
 -= 7;

523 *
msg_±r
 = (
u8_t
)
sub_id
 & 0x7F;

524 i‡(
idít_Àn
 > 0)

526 
ofs
 += 1;

527 i‡(
ofs
 >
∂í
)

530 
p
 =Ö->
√xt
;

531 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

532 
msg_±r
 = (
u8_t
*)
p
->
∑ylﬂd
;

533 
∂í
 +
p
->
Àn
;

538 
msg_±r
++;

542 
idít
++;

544  
ERR_OK
;

546 
p
 =Ö->
√xt
;

549  
ERR_ARG
;

550 
	}
}

561 
îr_t


562 
	$¢mp_a¢1_íc_øw
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
øw_Àn
, 
u8_t
 *
øw
)

564 
u16_t
 
∂í
, 
ba£
;

565 
u8_t
 *
msg_±r
;

567 
∂í
 = 0;

568 
p
 !
NULL
)

570 
ba£
 = 
∂í
;

571 
∂í
 +
p
->
Àn
;

572 i‡(
ofs
 < 
∂í
)

574 
msg_±r
 = (
u8_t
*)
p
->
∑ylﬂd
;

575 
msg_±r
 +
ofs
 - 
ba£
;

577 
øw_Àn
 > 1)

580 
øw_Àn
--;

581 *
msg_±r
 = *
øw
;

582 
øw
++;

583 
ofs
 += 1;

584 i‡(
ofs
 >
∂í
)

587 
p
 =Ö->
√xt
;

588 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

589 
msg_±r
 = (
u8_t
*)
p
->
∑ylﬂd
;

590 
∂í
 +
p
->
Àn
;

595 
msg_±r
++;

598 i‡(
øw_Àn
 > 0)

601 *
msg_±r
 = *
øw
;

603  
ERR_OK
;

605 
p
 =Ö->
√xt
;

608  
ERR_ARG
;

609 
	}
}

	@core/snmp/mib2.c

38 
	~"lwù/›t.h
"

40 #i‡
LWIP_SNMP


42 
	~"lwù/¢mp.h
"

43 
	~"lwù/√tif.h
"

44 
	~"lwù/ù.h
"

45 
	~"lwù/ù_‰ag.h
"

46 
	~"lwù/mem.h
"

47 
	~"lwù/t˝_im∂.h
"

48 
	~"lwù/udp.h
"

49 
	~"lwù/¢mp_a¢1.h
"

50 
	~"lwù/¢mp_°ru˘s.h
"

51 
	~"lwù/sys.h
"

52 
	~"√tif/ëh¨p.h
"

67 
	#SNMP_ENTERPRISE_ID
 26381

	)

68 
	#SNMP_SYSOBJID_LEN
 7

	)

69 
	#SNMP_SYSOBJID
 {1, 3, 6, 1, 4, 1, 
SNMP_ENTERPRISE_ID
}

	)

71 #i‚de‡
SNMP_SYSSERVICES


72 
	#SNMP_SYSSERVICES
 ((1 << 6Ë| (1 << 3Ë| ((
IP_FORWARD
Ë<< 2))

	)

75 #i‚de‡
SNMP_GET_SYSUPTIME


76 
	#SNMP_GET_SYSUPTIME
(
sysu±ime
)

	)

79 
sy°em_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

80 
sy°em_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

81 
u8_t
 
sy°em_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

82 
sy°em_£t_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

83 
öãrÁ˚s_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

84 
öãrÁ˚s_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

85 
i„¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

86 
i„¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

87 #i‡!
SNMP_SAFE_REQUESTS


88 
u8_t
 
i„¡ry_£t_ã°
 (
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

89 
i„¡ry_£t_vÆue
 (
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

91 
©íåy_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

92 
©íåy_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

93 
ù_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

94 
ù_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

95 
u8_t
 
ù_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

96 
ù_addª¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

97 
ù_addª¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

98 
ù_πì¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

99 
ù_πì¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

100 
ù_¡omíåy_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

101 
ù_¡omíåy_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

102 
icmp_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

103 
icmp_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

104 #i‡
LWIP_TCP


105 
t˝_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

106 
t˝_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

107 #ifde‡
THIS_SEEMS_UNUSED


108 
t˝c⁄√¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

109 
t˝c⁄√¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

112 
udp_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

113 
udp_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

114 
ud≥¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

115 
ud≥¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

116 
¢mp_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

117 
¢mp_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

118 
u8_t
 
¢mp_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

119 
¢mp_£t_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

123 c⁄° 
mib_sˇœr_node
 
	g¢mp_sˇœr
 = {

124 &
¢mp_gë_obje˘_def
,

125 &
¢mp_gë_vÆue
,

126 &
¢mp_£t_ã°
,

127 &
¢mp_£t_vÆue
,

128 
MIB_NODE_SC
,

131 c⁄° 
s32_t
 
	g¢mp_ids
[28] = {

135 
mib_node
* c⁄° 
	g¢mp_nodes
[28] = {

136 (
mib_node
*)&
¢mp_sˇœr
, (mib_node*)&snmp_scalar,

137 (
mib_node
*)&
¢mp_sˇœr
, (mib_node*)&snmp_scalar,

138 (
mib_node
*)&
¢mp_sˇœr
, (mib_node*)&snmp_scalar,

139 (
mib_node
*)&
¢mp_sˇœr
, (mib_node*)&snmp_scalar,

140 (
mib_node
*)&
¢mp_sˇœr
, (mib_node*)&snmp_scalar,

141 (
mib_node
*)&
¢mp_sˇœr
, (mib_node*)&snmp_scalar,

142 (
mib_node
*)&
¢mp_sˇœr
, (mib_node*)&snmp_scalar,

143 (
mib_node
*)&
¢mp_sˇœr
, (mib_node*)&snmp_scalar,

144 (
mib_node
*)&
¢mp_sˇœr
, (mib_node*)&snmp_scalar,

145 (
mib_node
*)&
¢mp_sˇœr
, (mib_node*)&snmp_scalar,

146 (
mib_node
*)&
¢mp_sˇœr
, (mib_node*)&snmp_scalar,

147 (
mib_node
*)&
¢mp_sˇœr
, (mib_node*)&snmp_scalar,

148 (
mib_node
*)&
¢mp_sˇœr
, (mib_node*)&snmp_scalar,

149 (
mib_node
*)&
¢mp_sˇœr
, (mib_node*)&snmp_scalar

151 c⁄° 
mib_¨øy_node
 
	g¢mp
 = {

152 &
nﬁófs_gë_obje˘_def
,

153 &
nﬁófs_gë_vÆue
,

154 &
nﬁófs_£t_ã°
,

155 &
nﬁófs_£t_vÆue
,

156 
MIB_NODE_AR
,

158 
¢mp_ids
,

159 
¢mp_nodes


168 
mib_li°_roŸnode
 
	gudp_roŸ
 = {

169 &
nﬁófs_gë_obje˘_def
,

170 &
nﬁófs_gë_vÆue
,

171 &
nﬁófs_£t_ã°
,

172 &
nﬁófs_£t_vÆue
,

173 
MIB_NODE_LR
,

175 
NULL
,

176 
NULL
,

179 c⁄° 
s32_t
 
	gud≥¡ry_ids
[2] = { 1, 2 };

180 
mib_node
* c⁄° 
	gud≥¡ry_nodes
[2] = {

181 (
mib_node
*)&
udp_roŸ
, (mib_node*)&udp_root,

183 c⁄° 
mib_¨øy_node
 
	gud≥¡ry
 = {

184 &
nﬁófs_gë_obje˘_def
,

185 &
nﬁófs_gë_vÆue
,

186 &
nﬁófs_£t_ã°
,

187 &
nﬁófs_£t_vÆue
,

188 
MIB_NODE_AR
,

190 
ud≥¡ry_ids
,

191 
ud≥¡ry_nodes


194 
s32_t
 
	gud±abÀ_id
 = 1;

195 
mib_node
* 
	gud±abÀ_node
 = (mib_node*)&
ud≥¡ry
;

196 
mib_øm_¨øy_node
 
	gud±abÀ
 = {

197 &
nﬁófs_gë_obje˘_def
,

198 &
nﬁófs_gë_vÆue
,

199 &
nﬁófs_£t_ã°
,

200 &
nﬁófs_£t_vÆue
,

201 
MIB_NODE_RA
,

203 &
ud±abÀ_id
,

204 &
ud±abÀ_node


207 c⁄° 
mib_sˇœr_node
 
	gudp_sˇœr
 = {

208 &
udp_gë_obje˘_def
,

209 &
udp_gë_vÆue
,

210 &
nﬁófs_£t_ã°
,

211 &
nﬁófs_£t_vÆue
,

212 
MIB_NODE_SC
,

215 c⁄° 
s32_t
 
	gudp_ids
[5] = { 1, 2, 3, 4, 5 };

216 
mib_node
* c⁄° 
	gudp_nodes
[5] = {

217 (
mib_node
*)&
udp_sˇœr
, (mib_node*)&udp_scalar,

218 (
mib_node
*)&
udp_sˇœr
, (mib_node*)&udp_scalar,

219 (
mib_node
*)&
ud±abÀ


221 c⁄° 
mib_¨øy_node
 
	gudp
 = {

222 &
nﬁófs_gë_obje˘_def
,

223 &
nﬁófs_gë_vÆue
,

224 &
nﬁófs_£t_ã°
,

225 &
nﬁófs_£t_vÆue
,

226 
MIB_NODE_AR
,

228 
udp_ids
,

229 
udp_nodes


233 #i‡
LWIP_TCP


236 
mib_li°_roŸnode
 
	gt˝c⁄¡ªe_roŸ
 = {

237 &
nﬁófs_gë_obje˘_def
,

238 &
nﬁófs_gë_vÆue
,

239 &
nﬁófs_£t_ã°
,

240 &
nﬁófs_£t_vÆue
,

241 
MIB_NODE_LR
,

243 
NULL
,

244 
NULL
,

247 c⁄° 
s32_t
 
	gt˝c⁄√¡ry_ids
[5] = { 1, 2, 3, 4, 5 };

248 
mib_node
* c⁄° 
	gt˝c⁄√¡ry_nodes
[5] = {

249 (
mib_node
*)&
t˝c⁄¡ªe_roŸ
, (mib_node*)&tcpconntree_root,

250 (
mib_node
*)&
t˝c⁄¡ªe_roŸ
, (mib_node*)&tcpconntree_root,

251 (
mib_node
*)&
t˝c⁄¡ªe_roŸ


253 c⁄° 
mib_¨øy_node
 
	gt˝c⁄√¡ry
 = {

254 &
nﬁófs_gë_obje˘_def
,

255 &
nﬁófs_gë_vÆue
,

256 &
nﬁófs_£t_ã°
,

257 &
nﬁófs_£t_vÆue
,

258 
MIB_NODE_AR
,

260 
t˝c⁄√¡ry_ids
,

261 
t˝c⁄√¡ry_nodes


264 
s32_t
 
	gt˝c⁄¡abÀ_id
 = 1;

265 
mib_node
* 
	gt˝c⁄¡abÀ_node
 = (mib_node*)&
t˝c⁄√¡ry
;

266 
mib_øm_¨øy_node
 
	gt˝c⁄¡abÀ
 = {

267 &
nﬁófs_gë_obje˘_def
,

268 &
nﬁófs_gë_vÆue
,

269 &
nﬁófs_£t_ã°
,

270 &
nﬁófs_£t_vÆue
,

271 
MIB_NODE_RA
,

275 &
t˝c⁄¡abÀ_id
,

276 &
t˝c⁄¡abÀ_node


279 c⁄° 
mib_sˇœr_node
 
	gt˝_sˇœr
 = {

280 &
t˝_gë_obje˘_def
,

281 &
t˝_gë_vÆue
,

282 &
nﬁófs_£t_ã°
,

283 &
nﬁófs_£t_vÆue
,

284 
MIB_NODE_SC
,

287 c⁄° 
s32_t
 
	gt˝_ids
[15] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };

288 
mib_node
* c⁄° 
	gt˝_nodes
[15] = {

289 (
mib_node
*)&
t˝_sˇœr
, (mib_node*)&tcp_scalar,

290 (
mib_node
*)&
t˝_sˇœr
, (mib_node*)&tcp_scalar,

291 (
mib_node
*)&
t˝_sˇœr
, (mib_node*)&tcp_scalar,

292 (
mib_node
*)&
t˝_sˇœr
, (mib_node*)&tcp_scalar,

293 (
mib_node
*)&
t˝_sˇœr
, (mib_node*)&tcp_scalar,

294 (
mib_node
*)&
t˝_sˇœr
, (mib_node*)&tcp_scalar,

295 (
mib_node
*)&
t˝c⁄¡abÀ
, (mib_node*)&
t˝_sˇœr
,

296 (
mib_node
*)&
t˝_sˇœr


298 c⁄° 
mib_¨øy_node
 
	gt˝
 = {

299 &
nﬁófs_gë_obje˘_def
,

300 &
nﬁófs_gë_vÆue
,

301 &
nﬁófs_£t_ã°
,

302 &
nﬁófs_£t_vÆue
,

303 
MIB_NODE_AR
,

305 
t˝_ids
,

306 
t˝_nodes


311 c⁄° 
mib_sˇœr_node
 
	gicmp_sˇœr
 = {

312 &
icmp_gë_obje˘_def
,

313 &
icmp_gë_vÆue
,

314 &
nﬁófs_£t_ã°
,

315 &
nﬁófs_£t_vÆue
,

316 
MIB_NODE_SC
,

319 c⁄° 
s32_t
 
	gicmp_ids
[26] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 };

320 
mib_node
* c⁄° 
	gicmp_nodes
[26] = {

321 (
mib_node
*)&
icmp_sˇœr
, (mib_node*)&icmp_scalar,

322 (
mib_node
*)&
icmp_sˇœr
, (mib_node*)&icmp_scalar,

323 (
mib_node
*)&
icmp_sˇœr
, (mib_node*)&icmp_scalar,

324 (
mib_node
*)&
icmp_sˇœr
, (mib_node*)&icmp_scalar,

325 (
mib_node
*)&
icmp_sˇœr
, (mib_node*)&icmp_scalar,

326 (
mib_node
*)&
icmp_sˇœr
, (mib_node*)&icmp_scalar,

327 (
mib_node
*)&
icmp_sˇœr
, (mib_node*)&icmp_scalar,

328 (
mib_node
*)&
icmp_sˇœr
, (mib_node*)&icmp_scalar,

329 (
mib_node
*)&
icmp_sˇœr
, (mib_node*)&icmp_scalar,

330 (
mib_node
*)&
icmp_sˇœr
, (mib_node*)&icmp_scalar,

331 (
mib_node
*)&
icmp_sˇœr
, (mib_node*)&icmp_scalar,

332 (
mib_node
*)&
icmp_sˇœr
, (mib_node*)&icmp_scalar,

333 (
mib_node
*)&
icmp_sˇœr
, (mib_node*)&icmp_scalar

335 c⁄° 
mib_¨øy_node
 
	gicmp
 = {

336 &
nﬁófs_gë_obje˘_def
,

337 &
nﬁófs_gë_vÆue
,

338 &
nﬁófs_£t_ã°
,

339 &
nﬁófs_£t_vÆue
,

340 
MIB_NODE_AR
,

342 
icmp_ids
,

343 
icmp_nodes


347 
mib_li°_roŸnode
 
	gù¡omåì_roŸ
 = {

348 &
nﬁófs_gë_obje˘_def
,

349 &
nﬁófs_gë_vÆue
,

350 &
nﬁófs_£t_ã°
,

351 &
nﬁófs_£t_vÆue
,

352 
MIB_NODE_LR
,

354 
NULL
,

355 
NULL
,

358 c⁄° 
s32_t
 
	gù¡omíåy_ids
[4] = { 1, 2, 3, 4 };

359 
mib_node
* c⁄° 
	gù¡omíåy_nodes
[4] = {

360 (
mib_node
*)&
ù¡omåì_roŸ
, (mib_node*)&ipntomtree_root,

361 (
mib_node
*)&
ù¡omåì_roŸ
, (mib_node*)&ipntomtree_root

363 c⁄° 
mib_¨øy_node
 
	gù¡omíåy
 = {

364 &
nﬁófs_gë_obje˘_def
,

365 &
nﬁófs_gë_vÆue
,

366 &
nﬁófs_£t_ã°
,

367 &
nﬁófs_£t_vÆue
,

368 
MIB_NODE_AR
,

370 
ù¡omíåy_ids
,

371 
ù¡omíåy_nodes


374 
s32_t
 
	gù¡omèbÀ_id
 = 1;

375 
mib_node
* 
	gù¡omèbÀ_node
 = (mib_node*)&
ù¡omíåy
;

376 
mib_øm_¨øy_node
 
	gù¡omèbÀ
 = {

377 &
nﬁófs_gë_obje˘_def
,

378 &
nﬁófs_gë_vÆue
,

379 &
nﬁófs_£t_ã°
,

380 &
nﬁófs_£t_vÆue
,

381 
MIB_NODE_RA
,

383 &
ù¡omèbÀ_id
,

384 &
ù¡omèbÀ_node


388 
mib_li°_roŸnode
 
	gùπëªe_roŸ
 = {

389 &
nﬁófs_gë_obje˘_def
,

390 &
nﬁófs_gë_vÆue
,

391 &
nﬁófs_£t_ã°
,

392 &
nﬁófs_£t_vÆue
,

393 
MIB_NODE_LR
,

395 
NULL
,

396 
NULL
,

399 c⁄° 
s32_t
 
	gùπì¡ry_ids
[13] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 };

400 
mib_node
* c⁄° 
	gùπì¡ry_nodes
[13] = {

401 (
mib_node
*)&
ùπëªe_roŸ
, (mib_node*)&iprtetree_root,

402 (
mib_node
*)&
ùπëªe_roŸ
, (mib_node*)&iprtetree_root,

403 (
mib_node
*)&
ùπëªe_roŸ
, (mib_node*)&iprtetree_root,

404 (
mib_node
*)&
ùπëªe_roŸ
, (mib_node*)&iprtetree_root,

405 (
mib_node
*)&
ùπëªe_roŸ
, (mib_node*)&iprtetree_root,

406 (
mib_node
*)&
ùπëªe_roŸ
, (mib_node*)&iprtetree_root,

407 (
mib_node
*)&
ùπëªe_roŸ


409 c⁄° 
mib_¨øy_node
 
	gùπì¡ry
 = {

410 &
nﬁófs_gë_obje˘_def
,

411 &
nﬁófs_gë_vÆue
,

412 &
nﬁófs_£t_ã°
,

413 &
nﬁófs_£t_vÆue
,

414 
MIB_NODE_AR
,

416 
ùπì¡ry_ids
,

417 
ùπì¡ry_nodes


420 
s32_t
 
	gùπëabÀ_id
 = 1;

421 
mib_node
* 
	gùπëabÀ_node
 = (mib_node*)&
ùπì¡ry
;

422 
mib_øm_¨øy_node
 
	gùπëabÀ
 = {

423 &
nﬁófs_gë_obje˘_def
,

424 &
nﬁófs_gë_vÆue
,

425 &
nﬁófs_£t_ã°
,

426 &
nﬁófs_£t_vÆue
,

427 
MIB_NODE_RA
,

429 &
ùπëabÀ_id
,

430 &
ùπëabÀ_node


434 
mib_li°_roŸnode
 
	gùaddπªe_roŸ
 = {

435 &
nﬁófs_gë_obje˘_def
,

436 &
nﬁófs_gë_vÆue
,

437 &
nﬁófs_£t_ã°
,

438 &
nﬁófs_£t_vÆue
,

439 
MIB_NODE_LR
,

441 
NULL
,

442 
NULL
,

445 c⁄° 
s32_t
 
	gùaddª¡ry_ids
[5] = { 1, 2, 3, 4, 5 };

446 
mib_node
* c⁄° 
	gùaddª¡ry_nodes
[5] = {

447 (
mib_node
*)&
ùaddπªe_roŸ
,

448 (
mib_node
*)&
ùaddπªe_roŸ
,

449 (
mib_node
*)&
ùaddπªe_roŸ
,

450 (
mib_node
*)&
ùaddπªe_roŸ
,

451 (
mib_node
*)&
ùaddπªe_roŸ


453 c⁄° 
mib_¨øy_node
 
	gùaddª¡ry
 = {

454 &
nﬁófs_gë_obje˘_def
,

455 &
nﬁófs_gë_vÆue
,

456 &
nﬁófs_£t_ã°
,

457 &
nﬁófs_£t_vÆue
,

458 
MIB_NODE_AR
,

460 
ùaddª¡ry_ids
,

461 
ùaddª¡ry_nodes


464 
s32_t
 
	gùaddπabÀ_id
 = 1;

465 
mib_node
* 
	gùaddπabÀ_node
 = (mib_node*)&
ùaddª¡ry
;

466 
mib_øm_¨øy_node
 
	gùaddπabÀ
 = {

467 &
nﬁófs_gë_obje˘_def
,

468 &
nﬁófs_gë_vÆue
,

469 &
nﬁófs_£t_ã°
,

470 &
nﬁófs_£t_vÆue
,

471 
MIB_NODE_RA
,

473 &
ùaddπabÀ_id
,

474 &
ùaddπabÀ_node


478 c⁄° 
mib_sˇœr_node
 
	gù_sˇœr
 = {

479 &
ù_gë_obje˘_def
,

480 &
ù_gë_vÆue
,

481 &
ù_£t_ã°
,

482 &
nﬁófs_£t_vÆue
,

483 
MIB_NODE_SC
,

486 c⁄° 
s32_t
 
	gù_ids
[23] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 };

487 
mib_node
* c⁄° 
	gù_nodes
[23] = {

488 (
mib_node
*)&
ù_sˇœr
, (mib_node*)&ip_scalar,

489 (
mib_node
*)&
ù_sˇœr
, (mib_node*)&ip_scalar,

490 (
mib_node
*)&
ù_sˇœr
, (mib_node*)&ip_scalar,

491 (
mib_node
*)&
ù_sˇœr
, (mib_node*)&ip_scalar,

492 (
mib_node
*)&
ù_sˇœr
, (mib_node*)&ip_scalar,

493 (
mib_node
*)&
ù_sˇœr
, (mib_node*)&ip_scalar,

494 (
mib_node
*)&
ù_sˇœr
, (mib_node*)&ip_scalar,

495 (
mib_node
*)&
ù_sˇœr
, (mib_node*)&ip_scalar,

496 (
mib_node
*)&
ù_sˇœr
, (mib_node*)&ip_scalar,

497 (
mib_node
*)&
ù_sˇœr
, (mib_node*)&
ùaddπabÀ
,

498 (
mib_node
*)&
ùπëabÀ
, (mib_node*)&
ù¡omèbÀ
,

499 (
mib_node
*)&
ù_sˇœr


501 c⁄° 
mib_¨øy_node
 
	gmib2_ù
 = {

502 &
nﬁófs_gë_obje˘_def
,

503 &
nﬁófs_gë_vÆue
,

504 &
nﬁófs_£t_ã°
,

505 &
nﬁófs_£t_vÆue
,

506 
MIB_NODE_AR
,

508 
ù_ids
,

509 
ù_nodes


513 
mib_li°_roŸnode
 
	g¨±ªe_roŸ
 = {

514 &
nﬁófs_gë_obje˘_def
,

515 &
nﬁófs_gë_vÆue
,

516 &
nﬁófs_£t_ã°
,

517 &
nﬁófs_£t_vÆue
,

518 
MIB_NODE_LR
,

520 
NULL
,

521 
NULL
,

524 c⁄° 
s32_t
 
	g©íåy_ids
[3] = { 1, 2, 3 };

525 
mib_node
* c⁄° 
	g©íåy_nodes
[3] = {

526 (
mib_node
*)&
¨±ªe_roŸ
,

527 (
mib_node
*)&
¨±ªe_roŸ
,

528 (
mib_node
*)&
¨±ªe_roŸ


530 c⁄° 
mib_¨øy_node
 
	g©íåy
 = {

531 &
nﬁófs_gë_obje˘_def
,

532 &
nﬁófs_gë_vÆue
,

533 &
nﬁófs_£t_ã°
,

534 &
nﬁófs_£t_vÆue
,

535 
MIB_NODE_AR
,

537 
©íåy_ids
,

538 
©íåy_nodes


541 c⁄° 
s32_t
 
	g©èbÀ_id
 = 1;

542 
mib_node
* c⁄° 
	g©èbÀ_node
 = (mib_node*)&
©íåy
;

543 c⁄° 
mib_¨øy_node
 
	g©èbÀ
 = {

544 &
nﬁófs_gë_obje˘_def
,

545 &
nﬁófs_gë_vÆue
,

546 &
nﬁófs_£t_ã°
,

547 &
nﬁófs_£t_vÆue
,

548 
MIB_NODE_AR
,

550 &
©èbÀ_id
,

551 &
©èbÀ_node


555 
s32_t
 
	g©_id
 = 1;

556 
mib_node
* 
	gmib2_©_node
 = (mib_node*)&
©èbÀ
;

557 
mib_øm_¨øy_node
 
	g©
 = {

558 &
nﬁófs_gë_obje˘_def
,

559 &
nﬁófs_gë_vÆue
,

560 &
nﬁófs_£t_ã°
,

561 &
nﬁófs_£t_vÆue
,

562 
MIB_NODE_RA
,

564 &
©_id
,

565 &
mib2_©_node


569 
mib_li°_roŸnode
 
	giÊi°_roŸ
 = {

570 &
i„¡ry_gë_obje˘_def
,

571 &
i„¡ry_gë_vÆue
,

572 #i‡
SNMP_SAFE_REQUESTS


573 &
nﬁófs_£t_ã°
,

574 &
nﬁófs_£t_vÆue
,

576 &
i„¡ry_£t_ã°
,

577 &
i„¡ry_£t_vÆue
,

579 
MIB_NODE_LR
,

581 
NULL
,

582 
NULL
,

585 c⁄° 
s32_t
 
	gi„¡ry_ids
[22] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 };

586 
mib_node
* c⁄° 
	gi„¡ry_nodes
[22] = {

587 (
mib_node
*)&
iÊi°_roŸ
, (mib_node*)&iflist_root,

588 (
mib_node
*)&
iÊi°_roŸ
, (mib_node*)&iflist_root,

589 (
mib_node
*)&
iÊi°_roŸ
, (mib_node*)&iflist_root,

590 (
mib_node
*)&
iÊi°_roŸ
, (mib_node*)&iflist_root,

591 (
mib_node
*)&
iÊi°_roŸ
, (mib_node*)&iflist_root,

592 (
mib_node
*)&
iÊi°_roŸ
, (mib_node*)&iflist_root,

593 (
mib_node
*)&
iÊi°_roŸ
, (mib_node*)&iflist_root,

594 (
mib_node
*)&
iÊi°_roŸ
, (mib_node*)&iflist_root,

595 (
mib_node
*)&
iÊi°_roŸ
, (mib_node*)&iflist_root,

596 (
mib_node
*)&
iÊi°_roŸ
, (mib_node*)&iflist_root,

597 (
mib_node
*)&
iÊi°_roŸ
, (mib_node*)&iflist_root

599 c⁄° 
mib_¨øy_node
 
	gi„¡ry
 = {

600 &
nﬁófs_gë_obje˘_def
,

601 &
nﬁófs_gë_vÆue
,

602 &
nﬁófs_£t_ã°
,

603 &
nﬁófs_£t_vÆue
,

604 
MIB_NODE_AR
,

606 
i„¡ry_ids
,

607 
i„¡ry_nodes


610 
s32_t
 
	gi·abÀ_id
 = 1;

611 
mib_node
* 
	gi·abÀ_node
 = (mib_node*)&
i„¡ry
;

612 
mib_øm_¨øy_node
 
	gi·abÀ
 = {

613 &
nﬁófs_gë_obje˘_def
,

614 &
nﬁófs_gë_vÆue
,

615 &
nﬁófs_£t_ã°
,

616 &
nﬁófs_£t_vÆue
,

617 
MIB_NODE_RA
,

619 &
i·abÀ_id
,

620 &
i·abÀ_node


624 c⁄° 
mib_sˇœr_node
 
	göãrÁ˚s_sˇœr
 = {

625 &
öãrÁ˚s_gë_obje˘_def
,

626 &
öãrÁ˚s_gë_vÆue
,

627 &
nﬁófs_£t_ã°
,

628 &
nﬁófs_£t_vÆue
,

629 
MIB_NODE_SC
,

632 c⁄° 
s32_t
 
	göãrÁ˚s_ids
[2] = { 1, 2 };

633 
mib_node
* c⁄° 
	göãrÁ˚s_nodes
[2] = {

634 (
mib_node
*)&
öãrÁ˚s_sˇœr
, (mib_node*)&
i·abÀ


636 c⁄° 
mib_¨øy_node
 
	göãrÁ˚s
 = {

637 &
nﬁófs_gë_obje˘_def
,

638 &
nﬁófs_gë_vÆue
,

639 &
nﬁófs_£t_ã°
,

640 &
nﬁófs_£t_vÆue
,

641 
MIB_NODE_AR
,

643 
öãrÁ˚s_ids
,

644 
öãrÁ˚s_nodes


650 c⁄° 
mib_sˇœr_node
 
	gsys_ãm_sˇœr
 = {

651 &
sy°em_gë_obje˘_def
,

652 &
sy°em_gë_vÆue
,

653 &
sy°em_£t_ã°
,

654 &
sy°em_£t_vÆue
,

655 
MIB_NODE_SC
,

658 c⁄° 
s32_t
 
	gsys_ãm_ids
[7] = { 1, 2, 3, 4, 5, 6, 7 };

659 
mib_node
* c⁄° 
	gsys_ãm_nodes
[7] = {

660 (
mib_node
*)&
sys_ãm_sˇœr
, (mib_node*)&sys_tem_scalar,

661 (
mib_node
*)&
sys_ãm_sˇœr
, (mib_node*)&sys_tem_scalar,

662 (
mib_node
*)&
sys_ãm_sˇœr
, (mib_node*)&sys_tem_scalar,

663 (
mib_node
*)&
sys_ãm_sˇœr


666 c⁄° 
mib_¨øy_node
 
	gsys_ãm
 = {

667 &
nﬁófs_gë_obje˘_def
,

668 &
nﬁófs_gë_vÆue
,

669 &
nﬁófs_£t_ã°
,

670 &
nﬁófs_£t_vÆue
,

671 
MIB_NODE_AR
,

673 
sys_ãm_ids
,

674 
sys_ãm_nodes


678 #i‡
LWIP_TCP


679 
	#MIB2_GROUPS
 8

	)

681 
	#MIB2_GROUPS
 7

	)

683 c⁄° 
s32_t
 
	gmib2_ids
[
MIB2_GROUPS
] =

690 #i‡
LWIP_TCP


696 
mib_node
* c⁄° 
	gmib2_nodes
[
MIB2_GROUPS
] = {

697 (
mib_node
*)&
sys_ãm
,

698 (
mib_node
*)&
öãrÁ˚s
,

699 (
mib_node
*)&
©
,

700 (
mib_node
*)&
mib2_ù
,

701 (
mib_node
*)&
icmp
,

702 #i‡
LWIP_TCP


703 (
mib_node
*)&
t˝
,

705 (
mib_node
*)&
udp
,

706 (
mib_node
*)&
¢mp


709 c⁄° 
mib_¨øy_node
 
	gmib2
 = {

710 &
nﬁófs_gë_obje˘_def
,

711 &
nﬁófs_gë_vÆue
,

712 &
nﬁófs_£t_ã°
,

713 &
nﬁófs_£t_vÆue
,

714 
MIB_NODE_AR
,

715 
MIB2_GROUPS
,

716 
mib2_ids
,

717 
mib2_nodes


721 c⁄° 
s32_t
 
	gmgmt_ids
[1] = { 1 };

722 
mib_node
* c⁄° 
	gmgmt_nodes
[1] = { (mib_node*)&
mib2
 };

723 c⁄° 
mib_¨øy_node
 
	gmgmt
 = {

724 &
nﬁófs_gë_obje˘_def
,

725 &
nﬁófs_gë_vÆue
,

726 &
nﬁófs_£t_ã°
,

727 &
nﬁófs_£t_vÆue
,

728 
MIB_NODE_AR
,

730 
mgmt_ids
,

731 
mgmt_nodes


735 #i‡
SNMP_PRIVATE_MIB


738 
s32_t
 
	göã∫ë_ids
[2] = { 2, 4 };

739 
mib_node
* c⁄° 
	göã∫ë_nodes
[2] = { (mib_node*)&
mgmt
, (mib_node*)&
mib_¥iv©e
 };

740 c⁄° 
mib_¨øy_node
 
	göã∫ë
 = {

741 &
nﬁófs_gë_obje˘_def
,

742 &
nﬁófs_gë_vÆue
,

743 &
nﬁófs_£t_ã°
,

744 &
nﬁófs_£t_vÆue
,

745 
MIB_NODE_AR
,

747 
öã∫ë_ids
,

748 
öã∫ë_nodes


751 c⁄° 
s32_t
 
	göã∫ë_ids
[1] = { 2 };

752 
mib_node
* c⁄° 
	göã∫ë_nodes
[1] = { (mib_node*)&
mgmt
 };

753 c⁄° 
mib_¨øy_node
 
	göã∫ë
 = {

754 &
nﬁófs_gë_obje˘_def
,

755 &
nﬁófs_gë_vÆue
,

756 &
nﬁófs_£t_ã°
,

757 &
nﬁófs_£t_vÆue
,

758 
MIB_NODE_AR
,

760 
öã∫ë_ids
,

761 
öã∫ë_nodes


766 
¢mp_obj_id
 
	gsysobjid
 = {
SNMP_SYSOBJID_LEN
, 
SNMP_SYSOBJID
};

768 
¢mp_obj_id
 
	g¢mpgΩ_id
 = {7,{1,3,6,1,2,1,11}};

770 c⁄° 
s32_t
 
	gsys£rvi˚s
 = 
SNMP_SYSSERVICES
;

773 c⁄° 
u8_t
 
	gsysdes¸_Àn_deÁu…
 = 4;

774 c⁄° 
u8_t
 
	gsysdes¸_deÁu…
[] = "lwIP";

775 
u8_t
* 
	gsysdes¸_Àn_±r
 = (u8_t*)&
sysdes¸_Àn_deÁu…
;

776 
u8_t
* 
	gsysdes¸_±r
 = (u8_t*)&
sysdes¸_deÁu…
[0];

778 c⁄° 
u8_t
 
	gsysc⁄è˘_Àn_deÁu…
 = 0;

779 c⁄° 
u8_t
 
	gsysc⁄è˘_deÁu…
[] = "";

780 
u8_t
* 
	gsysc⁄è˘_Àn_±r
 = (u8_t*)&
sysc⁄è˘_Àn_deÁu…
;

781 
u8_t
* 
	gsysc⁄è˘_±r
 = (u8_t*)&
sysc⁄è˘_deÁu…
[0];

783 c⁄° 
u8_t
 
	gsy¢ame_Àn_deÁu…
 = 8;

784 c⁄° 
u8_t
 
	gsy¢ame_deÁu…
[] = "FQDN-unk";

785 
u8_t
* 
	gsy¢ame_Àn_±r
 = (u8_t*)&
sy¢ame_Àn_deÁu…
;

786 
u8_t
* 
	gsy¢ame_±r
 = (u8_t*)&
sy¢ame_deÁu…
[0];

788 c⁄° 
u8_t
 
	gsy¶oˇti⁄_Àn_deÁu…
 = 0;

789 c⁄° 
u8_t
 
	gsy¶oˇti⁄_deÁu…
[] = "";

790 
u8_t
* 
	gsy¶oˇti⁄_Àn_±r
 = (u8_t*)&
sy¶oˇti⁄_Àn_deÁu…
;

791 
u8_t
* 
	gsy¶oˇti⁄_±r
 = (u8_t*)&
sy¶oˇti⁄_deÁu…
[0];

793 c⁄° 
u8_t
 
	g¢m≥«bÀauthíå≠s_deÁu…
 = 2;

794 
u8_t
* 
	g¢m≥«bÀauthíå≠s_±r
 = (u8_t*)&
¢m≥«bÀauthíå≠s_deÁu…
;

797 c⁄° 
¢mp_obj_id
 
	gif•ecific
 = {2, {0, 0}};

799 c⁄° 
¢mp_obj_id
 
	gùrouãöfo
 = {2, {0, 0}};

804 
u32_t
 
	gsysu±ime
 = 0;

807 
u32_t
 
	gùöª˚ives
 = 0,

808 
	gùöhdªº‹s
 = 0,

809 
	gùöaddªº‹s
 = 0,

810 
	gùf‹wd©agøms
 = 0,

811 
	gùöunknow≈rŸos
 = 0,

812 
	gùödisˇrds
 = 0,

813 
	gùödñivîs
 = 0,

814 
	gùouåeque°s
 = 0,

815 
	gùoutdisˇrds
 = 0,

816 
	gùouä‹ouãs
 = 0,

817 
	gùªasmªqds
 = 0,

818 
	gùªasmoks
 = 0,

819 
	gùªasmÁûs
 = 0,

820 
	gù‰agoks
 = 0,

821 
	gù‰agÁûs
 = 0,

822 
	gù‰ag¸óãs
 = 0,

823 
	gùroutögdisˇrds
 = 0;

825 
u32_t
 
	gicmpömsgs
 = 0,

826 
	gicmpöîr‹s
 = 0,

827 
	gicmpöde°uƒóchs
 = 0,

828 
	gicmpötimìxcds
 = 0,

829 
	gicmpö∑rm¥obs
 = 0,

830 
	gicmpö§cquíchs
 = 0,

831 
	gicmpöªdúe˘s
 = 0,

832 
	gicmpöechos
 = 0,

833 
	gicmpöech‹ïs
 = 0,

834 
	gicmpötime°amps
 = 0,

835 
	gicmpötime°am¥ïs
 = 0,

836 
	gicmpöaddrmasks
 = 0,

837 
	gicmpöaddrmaskªps
 = 0,

838 
	gicmpoutmsgs
 = 0,

839 
	gicmpouãº‹s
 = 0,

840 
	gicmpoutde°uƒóchs
 = 0,

841 
	gicmpouâimìxcds
 = 0,

842 
	gicmpouç¨m¥obs
 = 0,

843 
	gicmpout§cquíchs
 = 0,

844 
	gicmpouåedúe˘s
 = 0,

845 
	gicmpouãchos
 = 0,

846 
	gicmpouãch‹ïs
 = 0,

847 
	gicmpouâime°amps
 = 0,

848 
	gicmpouâime°am¥ïs
 = 0,

849 
	gicmpouèddrmasks
 = 0,

850 
	gicmpouèddrmaskªps
 = 0;

852 
u32_t
 
	gt˝a˘ive›ís
 = 0,

853 
	gt˝∑ssive›ís
 = 0,

854 
	gt˝©ãm±Áûs
 = 0,

855 
	gt˝e°abª£ts
 = 0,

856 
	gt˝ö£gs
 = 0,

857 
	gt˝out£gs
 = 0,

858 
	gt˝ªå™s£gs
 = 0,

859 
	gt˝öîrs
 = 0,

860 
	gt˝ouå°s
 = 0;

862 
u32_t
 
	gudpöd©agøms
 = 0,

863 
	gud≤›‹ts
 = 0,

864 
	gudpöîr‹s
 = 0,

865 
	gudpoutd©agøms
 = 0;

867 
u32_t
 
	g¢mpöpkts
 = 0,

868 
	g¢mpouçkts
 = 0,

869 
	g¢mpöbadvîsi⁄s
 = 0,

870 
	g¢mpöbadcommunôy«mes
 = 0,

871 
	g¢mpöbadcommunôyu£s
 = 0,

872 
	g¢mpöa¢∑r£îrs
 = 0,

873 
	g¢mpötoobigs
 = 0,

874 
	g¢mpönosuch«mes
 = 0,

875 
	g¢mpöbadvÆues
 = 0,

876 
	g¢mpöªad⁄lys
 = 0,

877 
	g¢mpögíîrs
 = 0,

878 
	g¢mpötŸÆªqv¨s
 = 0,

879 
	g¢mpötŸÆ£tv¨s
 = 0,

880 
	g¢mpögëªque°s
 = 0,

881 
	g¢mpögë√xts
 = 0,

882 
	g¢mpö£åeque°s
 = 0,

883 
	g¢mpögëª•⁄£s
 = 0,

884 
	g¢mpöå≠s
 = 0,

885 
	g¢mpouâoobigs
 = 0,

886 
	g¢mpouäosuch«mes
 = 0,

887 
	g¢mpoutbadvÆues
 = 0,

888 
	g¢mpoutgíîrs
 = 0,

889 
	g¢mpoutgëªque°s
 = 0,

890 
	g¢mpoutgë√xts
 = 0,

891 
	g¢mpout£åeque°s
 = 0,

892 
	g¢mpoutgëª•⁄£s
 = 0,

893 
	g¢mpouâøps
 = 0;

905 
	$oc°∫˝y
(
u8_t
 *
d°
, u8_à*
§c
, 
u16_t
 
n
)

907 
u16_t
 
i
 = 
n
;

908 
i
 > 0) {

909 
i
--;

910 *
d°
++ = *
§c
++;

912 
	}
}

921 
	$obje˘idn˝y
(
s32_t
 *
d°
, s32_à*
§c
, 
u8_t
 
n
)

923 
u8_t
 
i
 = 
n
;

924 
i
 > 0) {

925 
i
--;

926 *
d°
++ = *
§c
++;

928 
	}
}

936 
	$¢mp_£t_sysde§
(
u8_t
 *
°r
, u8_à*
Àn
)

938 i‡(
°r
 !
NULL
)

940 
sysdes¸_±r
 = 
°r
;

941 
sysdes¸_Àn_±r
 = 
Àn
;

943 
	}
}

945 
	$¢mp_gë_sysobjid_±r
(
¢mp_obj_id
 **
oid
)

947 *
oid
 = &
sysobjid
;

948 
	}
}

955 
	$¢mp_£t_sysobjid
(
¢mp_obj_id
 *
oid
)

957 
sysobjid
 = *
oid
;

958 
	}
}

964 
	$¢mp_öc_sysu±ime
()

966 
sysu±ime
++;

967 
	}
}

969 
	$¢mp_add_sysu±ime
(
u32_t
 
vÆue
)

971 
sysu±ime
+=
vÆue
;

972 
	}
}

974 
	$¢mp_gë_sysu±ime
(
u32_t
 *
vÆue
)

976 
	`SNMP_GET_SYSUPTIME
(
sysu±ime
);

977 *
vÆue
 = 
sysu±ime
;

978 
	}
}

987 
	$¢mp_£t_sysc⁄è˘
(
u8_t
 *
oc°r
, u8_à*
oc°æí
)

989 i‡(
oc°r
 !
NULL
)

991 
sysc⁄è˘_±r
 = 
oc°r
;

992 
sysc⁄è˘_Àn_±r
 = 
oc°æí
;

994 
	}
}

1003 
	$¢mp_£t_sy¢ame
(
u8_t
 *
oc°r
, u8_à*
oc°æí
)

1005 i‡(
oc°r
 !
NULL
)

1007 
sy¢ame_±r
 = 
oc°r
;

1008 
sy¢ame_Àn_±r
 = 
oc°æí
;

1010 
	}
}

1019 
	$¢mp_£t_sy¶oˇti⁄
(
u8_t
 *
oc°r
, u8_à*
oc°æí
)

1021 i‡(
oc°r
 !
NULL
)

1023 
sy¶oˇti⁄_±r
 = 
oc°r
;

1024 
sy¶oˇti⁄_Àn_±r
 = 
oc°æí
;

1026 
	}
}

1029 
	$¢mp_add_iföo˘ës
(
√tif
 *
ni
, 
u32_t
 
vÆue
)

1031 
ni
->
iföo˘ës
 +
vÆue
;

1032 
	}
}

1034 
	$¢mp_öc_iföuˇ°pkts
(
√tif
 *
ni
)

1036 (
ni
->
iföuˇ°pkts
)++;

1037 
	}
}

1039 
	$¢mp_öc_ifönuˇ°pkts
(
√tif
 *
ni
)

1041 (
ni
->
ifönuˇ°pkts
)++;

1042 
	}
}

1044 
	$¢mp_öc_ifödisˇrds
(
√tif
 *
ni
)

1046 (
ni
->
ifödisˇrds
)++;

1047 
	}
}

1049 
	$¢mp_add_ifouto˘ës
(
√tif
 *
ni
, 
u32_t
 
vÆue
)

1051 
ni
->
ifouto˘ës
 +
vÆue
;

1052 
	}
}

1054 
	$¢mp_öc_ifoutuˇ°pkts
(
√tif
 *
ni
)

1056 (
ni
->
ifoutuˇ°pkts
)++;

1057 
	}
}

1059 
	$¢mp_öc_ifouäuˇ°pkts
(
√tif
 *
ni
)

1061 (
ni
->
ifouäuˇ°pkts
)++;

1062 
	}
}

1064 
	$¢mp_öc_ifoutdisˇrds
(
√tif
 *
ni
)

1066 (
ni
->
ifoutdisˇrds
)++;

1067 
	}
}

1069 
	$¢mp_öc_iÊi°
()

1071 
mib_li°_node
 *
if_node
 = 
NULL
;

1073 
	`¢mp_mib_node_ö£π
(&
iÊi°_roŸ
, iÊi°_roŸ.
cou¡
 + 1, &
if_node
);

1075 
i·abÀ
.
maxÀngth
 = 1;

1076 
	}
}

1078 
	$¢mp_dec_iÊi°
()

1080 
	`¢mp_mib_node_dñëe
(&
iÊi°_roŸ
, iÊi°_roŸ.
èû
);

1082 if(
iÊi°_roŸ
.
cou¡
 =0Ë
i·abÀ
.
maxÀngth
 = 0;

1083 
	}
}

1089 
	$¢mp_ö£π_¨pidx_åì
(
√tif
 *
ni
, 
ù_addr_t
 *
ù
)

1091 
mib_li°_roŸnode
 *
©_∫
;

1092 
mib_li°_node
 *
©_node
;

1093 
s32_t
 
¨pidx
[5];

1094 
u8_t
 
Àvñ
, 
åì
;

1096 
	`LWIP_ASSERT
("nò!NULL", 
ni
 !
NULL
);

1097 
	`¢mp_√ti·oifödex
(
ni
, &
¨pidx
[0]);

1098 
	`¢mp_ùtooid
(
ù
, &
¨pidx
[1]);

1100 
åì
 = 0;Åree < 2;Åree++)

1102 i‡(
åì
 == 0)

1104 
©_∫
 = &
¨±ªe_roŸ
;

1108 
©_∫
 = &
ù¡omåì_roŸ
;

1110 
Àvñ
 = 0;Üevel < 5;Üevel++)

1112 
©_node
 = 
NULL
;

1113 
	`¢mp_mib_node_ö£π
(
©_∫
, 
¨pidx
[
Àvñ
], &
©_node
);

1114 i‡((
Àvñ
 !4Ë&& (
©_node
 !
NULL
))

1116 i‡(
©_node
->
≈å
 =
NULL
)

1118 
©_∫
 = 
	`¢mp_mib_Ãn_Æloc
();

1119 
©_node
->
≈å
 = (
mib_node
*)
©_∫
;

1120 i‡(
©_∫
 !
NULL
)

1122 i‡(
Àvñ
 == 3)

1124 i‡(
åì
 == 0)

1126 
©_∫
->
gë_obje˘_def
 = 
©íåy_gë_obje˘_def
;

1127 
©_∫
->
gë_vÆue
 = 
©íåy_gë_vÆue
;

1131 
©_∫
->
gë_obje˘_def
 = 
ù_¡omíåy_gë_obje˘_def
;

1132 
©_∫
->
gë_vÆue
 = 
ù_¡omíåy_gë_vÆue
;

1134 
©_∫
->
£t_ã°
 = 
nﬁófs_£t_ã°
;

1135 
©_∫
->
£t_vÆue
 = 
nﬁófs_£t_vÆue
;

1141 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("snmp_insert_arpidx_tree() insert failed, mem full"));

1147 
©_∫
 = (
mib_li°_roŸnode
*)
©_node
->
≈å
;

1153 
©
.
maxÀngth
 = 1;

1154 
ù¡omèbÀ
.
maxÀngth
 = 1;

1155 
	}
}

1161 
	$¢mp_dñëe_¨pidx_åì
(
√tif
 *
ni
, 
ù_addr_t
 *
ù
)

1163 
mib_li°_roŸnode
 *
©_∫
, *
√xt
, *
dñ_∫
[5];

1164 
mib_li°_node
 *
©_n
, *
dñ_n
[5];

1165 
s32_t
 
¨pidx
[5];

1166 
u8_t
 
fc
, 
åì
, 
Àvñ
, 
dñ_˙t
;

1168 
	`¢mp_√ti·oifödex
(
ni
, &
¨pidx
[0]);

1169 
	`¢mp_ùtooid
(
ù
, &
¨pidx
[1]);

1171 
åì
 = 0;Åree < 2;Åree++)

1174 i‡(
åì
 == 0)

1176 
©_∫
 = &
¨±ªe_roŸ
;

1180 
©_∫
 = &
ù¡omåì_roŸ
;

1182 
Àvñ
 = 0;

1183 
dñ_˙t
 = 0;

1184 (
Àvñ
 < 5Ë&& (
©_∫
 !
NULL
))

1186 
fc
 = 
	`¢mp_mib_node_föd
(
©_∫
, 
¨pidx
[
Àvñ
], &
©_n
);

1187 i‡(
fc
 == 0)

1190 
dñ_˙t
 = 0;

1191 
©_∫
 = 
NULL
;

1193 i‡(
fc
 == 1)

1195 
dñ_∫
[
dñ_˙t
] = 
©_∫
;

1196 
dñ_n
[
dñ_˙t
] = 
©_n
;

1197 
dñ_˙t
++;

1198 
©_∫
 = (
mib_li°_roŸnode
*)(
©_n
->
≈å
);

1200 i‡(
fc
 == 2)

1203 
dñ_˙t
 = 0;

1204 
©_∫
 = (
mib_li°_roŸnode
*)(
©_n
->
≈å
);

1206 
Àvñ
++;

1209 
dñ_˙t
 > 0)

1211 
dñ_˙t
--;

1213 
©_∫
 = 
dñ_∫
[
dñ_˙t
];

1214 
©_n
 = 
dñ_n
[
dñ_˙t
];

1216 
√xt
 = 
	`¢mp_mib_node_dñëe
(
©_∫
, 
©_n
);

1217 i‡(
√xt
 !
NULL
)

1219 
	`LWIP_ASSERT
("√xt_cou¡ =0",
√xt
->
cou¡
 == 0);

1220 
	`¢mp_mib_Ãn_‰ì
(
√xt
);

1225 if(
¨±ªe_roŸ
.
cou¡
 =0Ë
©
.
maxÀngth
 = 0;

1226 if(
ù¡omåì_roŸ
.
cou¡
 =0Ë
ù¡omèbÀ
.
maxÀngth
 = 0;

1227 
	}
}

1229 
	$¢mp_öc_ùöª˚ives
()

1231 
ùöª˚ives
++;

1232 
	}
}

1234 
	$¢mp_öc_ùöhdªº‹s
()

1236 
ùöhdªº‹s
++;

1237 
	}
}

1239 
	$¢mp_öc_ùöaddªº‹s
()

1241 
ùöaddªº‹s
++;

1242 
	}
}

1244 
	$¢mp_öc_ùf‹wd©agøms
()

1246 
ùf‹wd©agøms
++;

1247 
	}
}

1249 
	$¢mp_öc_ùöunknow≈rŸos
()

1251 
ùöunknow≈rŸos
++;

1252 
	}
}

1254 
	$¢mp_öc_ùödisˇrds
()

1256 
ùödisˇrds
++;

1257 
	}
}

1259 
	$¢mp_öc_ùödñivîs
()

1261 
ùödñivîs
++;

1262 
	}
}

1264 
	$¢mp_öc_ùouåeque°s
()

1266 
ùouåeque°s
++;

1267 
	}
}

1269 
	$¢mp_öc_ùoutdisˇrds
()

1271 
ùoutdisˇrds
++;

1272 
	}
}

1274 
	$¢mp_öc_ùouä‹ouãs
()

1276 
ùouä‹ouãs
++;

1277 
	}
}

1279 
	$¢mp_öc_ùªasmªqds
()

1281 
ùªasmªqds
++;

1282 
	}
}

1284 
	$¢mp_öc_ùªasmoks
()

1286 
ùªasmoks
++;

1287 
	}
}

1289 
	$¢mp_öc_ùªasmÁûs
()

1291 
ùªasmÁûs
++;

1292 
	}
}

1294 
	$¢mp_öc_ù‰agoks
()

1296 
ù‰agoks
++;

1297 
	}
}

1299 
	$¢mp_öc_ù‰agÁûs
()

1301 
ù‰agÁûs
++;

1302 
	}
}

1304 
	$¢mp_öc_ù‰ag¸óãs
()

1306 
ù‰ag¸óãs
++;

1307 
	}
}

1309 
	$¢mp_öc_ùroutögdisˇrds
()

1311 
ùroutögdisˇrds
++;

1312 
	}
}

1318 
	$¢mp_ö£π_ùaddridx_åì
(
√tif
 *
ni
)

1320 
mib_li°_roŸnode
 *
ùa_∫
;

1321 
mib_li°_node
 *
ùa_node
;

1322 
s32_t
 
ùaddridx
[4];

1323 
u8_t
 
Àvñ
;

1325 
	`LWIP_ASSERT
("nò!NULL", 
ni
 !
NULL
);

1326 
	`¢mp_ùtooid
(&
ni
->
ù_addr
, &
ùaddridx
[0]);

1328 
Àvñ
 = 0;

1329 
ùa_∫
 = &
ùaddπªe_roŸ
;

1330 
Àvñ
 < 4)

1332 
ùa_node
 = 
NULL
;

1333 
	`¢mp_mib_node_ö£π
(
ùa_∫
, 
ùaddridx
[
Àvñ
], &
ùa_node
);

1334 i‡((
Àvñ
 !3Ë&& (
ùa_node
 !
NULL
))

1336 i‡(
ùa_node
->
≈å
 =
NULL
)

1338 
ùa_∫
 = 
	`¢mp_mib_Ãn_Æloc
();

1339 
ùa_node
->
≈å
 = (
mib_node
*)
ùa_∫
;

1340 i‡(
ùa_∫
 !
NULL
)

1342 i‡(
Àvñ
 == 2)

1344 
ùa_∫
->
gë_obje˘_def
 = 
ù_addª¡ry_gë_obje˘_def
;

1345 
ùa_∫
->
gë_vÆue
 = 
ù_addª¡ry_gë_vÆue
;

1346 
ùa_∫
->
£t_ã°
 = 
nﬁófs_£t_ã°
;

1347 
ùa_∫
->
£t_vÆue
 = 
nﬁófs_£t_vÆue
;

1353 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("snmp_insert_ipaddridx_tree() insert failed, mem full"));

1359 
ùa_∫
 = (
mib_li°_roŸnode
*)
ùa_node
->
≈å
;

1362 
Àvñ
++;

1365 
ùaddπabÀ
.
maxÀngth
 = 1;

1366 
	}
}

1372 
	$¢mp_dñëe_ùaddridx_åì
(
√tif
 *
ni
)

1374 
mib_li°_roŸnode
 *
ùa_∫
, *
√xt
, *
dñ_∫
[4];

1375 
mib_li°_node
 *
ùa_n
, *
dñ_n
[4];

1376 
s32_t
 
ùaddridx
[4];

1377 
u8_t
 
fc
, 
Àvñ
, 
dñ_˙t
;

1379 
	`LWIP_ASSERT
("nò!NULL", 
ni
 !
NULL
);

1380 
	`¢mp_ùtooid
(&
ni
->
ù_addr
, &
ùaddridx
[0]);

1383 
Àvñ
 = 0;

1384 
dñ_˙t
 = 0;

1385 
ùa_∫
 = &
ùaddπªe_roŸ
;

1386 (
Àvñ
 < 4Ë&& (
ùa_∫
 !
NULL
))

1388 
fc
 = 
	`¢mp_mib_node_föd
(
ùa_∫
, 
ùaddridx
[
Àvñ
], &
ùa_n
);

1389 i‡(
fc
 == 0)

1392 
dñ_˙t
 = 0;

1393 
ùa_∫
 = 
NULL
;

1395 i‡(
fc
 == 1)

1397 
dñ_∫
[
dñ_˙t
] = 
ùa_∫
;

1398 
dñ_n
[
dñ_˙t
] = 
ùa_n
;

1399 
dñ_˙t
++;

1400 
ùa_∫
 = (
mib_li°_roŸnode
*)(
ùa_n
->
≈å
);

1402 i‡(
fc
 == 2)

1405 
dñ_˙t
 = 0;

1406 
ùa_∫
 = (
mib_li°_roŸnode
*)(
ùa_n
->
≈å
);

1408 
Àvñ
++;

1411 
dñ_˙t
 > 0)

1413 
dñ_˙t
--;

1415 
ùa_∫
 = 
dñ_∫
[
dñ_˙t
];

1416 
ùa_n
 = 
dñ_n
[
dñ_˙t
];

1418 
√xt
 = 
	`¢mp_mib_node_dñëe
(
ùa_∫
, 
ùa_n
);

1419 i‡(
√xt
 !
NULL
)

1421 
	`LWIP_ASSERT
("√xt_cou¡ =0",
√xt
->
cou¡
 == 0);

1422 
	`¢mp_mib_Ãn_‰ì
(
√xt
);

1426 i‡(
ùaddπªe_roŸ
.
cou¡
 =0Ë
ùaddπabÀ
.
maxÀngth
 = 0;

1427 
	}
}

1439 
	$¢mp_ö£π_ùπeidx_åì
(
u8_t
 
dÊt
, 
√tif
 *
ni
)

1441 
u8_t
 
ö£π
 = 0;

1442 
ù_addr_t
 
d°
;

1444 i‡(
dÊt
 != 0)

1447 
	`ù_addr_£t_™y
(&
d°
);

1448 
ö£π
 = 1;

1453 
	`ù_addr_gë_√tw‹k
(&
d°
, &
ni
->
ù_addr
, &ni->
√tmask
);

1455 i‡(!
	`ù_addr_ißny
(&
d°
)) {

1456 
ö£π
 = 1;

1459 i‡(
ö£π
)

1461 
mib_li°_roŸnode
 *
ùπe_∫
;

1462 
mib_li°_node
 *
ùπe_node
;

1463 
s32_t
 
ùπeidx
[4];

1464 
u8_t
 
Àvñ
;

1466 
	`¢mp_ùtooid
(&
d°
, &
ùπeidx
[0]);

1467 
Àvñ
 = 0;

1468 
ùπe_∫
 = &
ùπëªe_roŸ
;

1469 
Àvñ
 < 4)

1471 
ùπe_node
 = 
NULL
;

1472 
	`¢mp_mib_node_ö£π
(
ùπe_∫
, 
ùπeidx
[
Àvñ
], &
ùπe_node
);

1473 i‡((
Àvñ
 !3Ë&& (
ùπe_node
 !
NULL
))

1475 i‡(
ùπe_node
->
≈å
 =
NULL
)

1477 
ùπe_∫
 = 
	`¢mp_mib_Ãn_Æloc
();

1478 
ùπe_node
->
≈å
 = (
mib_node
*)
ùπe_∫
;

1479 i‡(
ùπe_∫
 !
NULL
)

1481 i‡(
Àvñ
 == 2)

1483 
ùπe_∫
->
gë_obje˘_def
 = 
ù_πì¡ry_gë_obje˘_def
;

1484 
ùπe_∫
->
gë_vÆue
 = 
ù_πì¡ry_gë_vÆue
;

1485 
ùπe_∫
->
£t_ã°
 = 
nﬁófs_£t_ã°
;

1486 
ùπe_∫
->
£t_vÆue
 = 
nﬁófs_£t_vÆue
;

1492 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("snmp_insert_iprteidx_tree() insert failed, mem full"));

1498 
ùπe_∫
 = (
mib_li°_roŸnode
*)
ùπe_node
->
≈å
;

1501 
Àvñ
++;

1505 
ùπëabÀ
.
maxÀngth
 = 1;

1506 
	}
}

1516 
	$¢mp_dñëe_ùπeidx_åì
(
u8_t
 
dÊt
, 
√tif
 *
ni
)

1518 
u8_t
 
dñ
 = 0;

1519 
ù_addr_t
 
d°
;

1521 i‡(
dÊt
 != 0)

1524 
	`ù_addr_£t_™y
(&
d°
);

1525 
dñ
 = 1;

1530 
	`ù_addr_gë_√tw‹k
(&
d°
, &
ni
->
ù_addr
, &ni->
√tmask
);

1532 i‡(!
	`ù_addr_ißny
(&
d°
)) {

1533 
dñ
 = 1;

1536 i‡(
dñ
)

1538 
mib_li°_roŸnode
 *
ùπe_∫
, *
√xt
, *
dñ_∫
[4];

1539 
mib_li°_node
 *
ùπe_n
, *
dñ_n
[4];

1540 
s32_t
 
ùπeidx
[4];

1541 
u8_t
 
fc
, 
Àvñ
, 
dñ_˙t
;

1543 
	`¢mp_ùtooid
(&
d°
, &
ùπeidx
[0]);

1545 
Àvñ
 = 0;

1546 
dñ_˙t
 = 0;

1547 
ùπe_∫
 = &
ùπëªe_roŸ
;

1548 (
Àvñ
 < 4Ë&& (
ùπe_∫
 !
NULL
))

1550 
fc
 = 
	`¢mp_mib_node_föd
(
ùπe_∫
, 
ùπeidx
[
Àvñ
], &
ùπe_n
);

1551 i‡(
fc
 == 0)

1554 
dñ_˙t
 = 0;

1555 
ùπe_∫
 = 
NULL
;

1557 i‡(
fc
 == 1)

1559 
dñ_∫
[
dñ_˙t
] = 
ùπe_∫
;

1560 
dñ_n
[
dñ_˙t
] = 
ùπe_n
;

1561 
dñ_˙t
++;

1562 
ùπe_∫
 = (
mib_li°_roŸnode
*)(
ùπe_n
->
≈å
);

1564 i‡(
fc
 == 2)

1567 
dñ_˙t
 = 0;

1568 
ùπe_∫
 = (
mib_li°_roŸnode
*)(
ùπe_n
->
≈å
);

1570 
Àvñ
++;

1573 
dñ_˙t
 > 0)

1575 
dñ_˙t
--;

1577 
ùπe_∫
 = 
dñ_∫
[
dñ_˙t
];

1578 
ùπe_n
 = 
dñ_n
[
dñ_˙t
];

1580 
√xt
 = 
	`¢mp_mib_node_dñëe
(
ùπe_∫
, 
ùπe_n
);

1581 i‡(
√xt
 !
NULL
)

1583 
	`LWIP_ASSERT
("√xt_cou¡ =0",
√xt
->
cou¡
 == 0);

1584 
	`¢mp_mib_Ãn_‰ì
(
√xt
);

1589 i‡(
ùπëªe_roŸ
.
cou¡
 =0Ë
ùπëabÀ
.
maxÀngth
 = 0;

1590 
	}
}

1593 
	$¢mp_öc_icmpömsgs
()

1595 
icmpömsgs
++;

1596 
	}
}

1598 
	$¢mp_öc_icmpöîr‹s
()

1600 
icmpöîr‹s
++;

1601 
	}
}

1603 
	$¢mp_öc_icmpöde°uƒóchs
()

1605 
icmpöde°uƒóchs
++;

1606 
	}
}

1608 
	$¢mp_öc_icmpötimìxcds
()

1610 
icmpötimìxcds
++;

1611 
	}
}

1613 
	$¢mp_öc_icmpö∑rm¥obs
()

1615 
icmpö∑rm¥obs
++;

1616 
	}
}

1618 
	$¢mp_öc_icmpö§cquíchs
()

1620 
icmpö§cquíchs
++;

1621 
	}
}

1623 
	$¢mp_öc_icmpöªdúe˘s
()

1625 
icmpöªdúe˘s
++;

1626 
	}
}

1628 
	$¢mp_öc_icmpöechos
()

1630 
icmpöechos
++;

1631 
	}
}

1633 
	$¢mp_öc_icmpöech‹ïs
()

1635 
icmpöech‹ïs
++;

1636 
	}
}

1638 
	$¢mp_öc_icmpötime°amps
()

1640 
icmpötime°amps
++;

1641 
	}
}

1643 
	$¢mp_öc_icmpötime°am¥ïs
()

1645 
icmpötime°am¥ïs
++;

1646 
	}
}

1648 
	$¢mp_öc_icmpöaddrmasks
()

1650 
icmpöaddrmasks
++;

1651 
	}
}

1653 
	$¢mp_öc_icmpöaddrmaskªps
()

1655 
icmpöaddrmaskªps
++;

1656 
	}
}

1658 
	$¢mp_öc_icmpoutmsgs
()

1660 
icmpoutmsgs
++;

1661 
	}
}

1663 
	$¢mp_öc_icmpouãº‹s
()

1665 
icmpouãº‹s
++;

1666 
	}
}

1668 
	$¢mp_öc_icmpoutde°uƒóchs
()

1670 
icmpoutde°uƒóchs
++;

1671 
	}
}

1673 
	$¢mp_öc_icmpouâimìxcds
()

1675 
icmpouâimìxcds
++;

1676 
	}
}

1678 
	$¢mp_öc_icmpouç¨m¥obs
()

1680 
icmpouç¨m¥obs
++;

1681 
	}
}

1683 
	$¢mp_öc_icmpout§cquíchs
()

1685 
icmpout§cquíchs
++;

1686 
	}
}

1688 
	$¢mp_öc_icmpouåedúe˘s
()

1690 
icmpouåedúe˘s
++;

1691 
	}
}

1693 
	$¢mp_öc_icmpouãchos
()

1695 
icmpouãchos
++;

1696 
	}
}

1698 
	$¢mp_öc_icmpouãch‹ïs
()

1700 
icmpouãch‹ïs
++;

1701 
	}
}

1703 
	$¢mp_öc_icmpouâime°amps
()

1705 
icmpouâime°amps
++;

1706 
	}
}

1708 
	$¢mp_öc_icmpouâime°am¥ïs
()

1710 
icmpouâime°am¥ïs
++;

1711 
	}
}

1713 
	$¢mp_öc_icmpouèddrmasks
()

1715 
icmpouèddrmasks
++;

1716 
	}
}

1718 
	$¢mp_öc_icmpouèddrmaskªps
()

1720 
icmpouèddrmaskªps
++;

1721 
	}
}

1723 
	$¢mp_öc_t˝a˘ive›ís
()

1725 
t˝a˘ive›ís
++;

1726 
	}
}

1728 
	$¢mp_öc_t˝∑ssive›ís
()

1730 
t˝∑ssive›ís
++;

1731 
	}
}

1733 
	$¢mp_öc_t˝©ãm±Áûs
()

1735 
t˝©ãm±Áûs
++;

1736 
	}
}

1738 
	$¢mp_öc_t˝e°abª£ts
()

1740 
t˝e°abª£ts
++;

1741 
	}
}

1743 
	$¢mp_öc_t˝ö£gs
()

1745 
t˝ö£gs
++;

1746 
	}
}

1748 
	$¢mp_öc_t˝out£gs
()

1750 
t˝out£gs
++;

1751 
	}
}

1753 
	$¢mp_öc_t˝ªå™s£gs
()

1755 
t˝ªå™s£gs
++;

1756 
	}
}

1758 
	$¢mp_öc_t˝öîrs
()

1760 
t˝öîrs
++;

1761 
	}
}

1763 
	$¢mp_öc_t˝ouå°s
()

1765 
t˝ouå°s
++;

1766 
	}
}

1768 
	$¢mp_öc_udpöd©agøms
()

1770 
udpöd©agøms
++;

1771 
	}
}

1773 
	$¢mp_öc_ud≤›‹ts
()

1775 
ud≤›‹ts
++;

1776 
	}
}

1778 
	$¢mp_öc_udpöîr‹s
()

1780 
udpöîr‹s
++;

1781 
	}
}

1783 
	$¢mp_öc_udpoutd©agøms
()

1785 
udpoutd©agøms
++;

1786 
	}
}

1792 
	$¢mp_ö£π_udpidx_åì
(
udp_pcb
 *
pcb
)

1794 
mib_li°_roŸnode
 *
udp_∫
;

1795 
mib_li°_node
 *
udp_node
;

1796 
s32_t
 
udpidx
[5];

1797 
u8_t
 
Àvñ
;

1799 
	`LWIP_ASSERT
("pcb !NULL", 
pcb
 !
NULL
);

1800 
	`¢mp_ùtooid
(&
pcb
->
loˇl_ù
, &
udpidx
[0]);

1801 
udpidx
[4] = 
pcb
->
loˇl_p‹t
;

1803 
udp_∫
 = &
udp_roŸ
;

1804 
Àvñ
 = 0;Üevel < 5;Üevel++)

1806 
udp_node
 = 
NULL
;

1807 
	`¢mp_mib_node_ö£π
(
udp_∫
, 
udpidx
[
Àvñ
], &
udp_node
);

1808 i‡((
Àvñ
 !4Ë&& (
udp_node
 !
NULL
))

1810 i‡(
udp_node
->
≈å
 =
NULL
)

1812 
udp_∫
 = 
	`¢mp_mib_Ãn_Æloc
();

1813 
udp_node
->
≈å
 = (
mib_node
*)
udp_∫
;

1814 i‡(
udp_∫
 !
NULL
)

1816 i‡(
Àvñ
 == 3)

1818 
udp_∫
->
gë_obje˘_def
 = 
ud≥¡ry_gë_obje˘_def
;

1819 
udp_∫
->
gë_vÆue
 = 
ud≥¡ry_gë_vÆue
;

1820 
udp_∫
->
£t_ã°
 = 
nﬁófs_£t_ã°
;

1821 
udp_∫
->
£t_vÆue
 = 
nﬁófs_£t_vÆue
;

1827 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("snmp_insert_udpidx_tree() insert failed, mem full"));

1833 
udp_∫
 = (
mib_li°_roŸnode
*)
udp_node
->
≈å
;

1837 
ud±abÀ
.
maxÀngth
 = 1;

1838 
	}
}

1844 
	$¢mp_dñëe_udpidx_åì
(
udp_pcb
 *
pcb
)

1846 
udp_pcb
 *
≈cb
;

1847 
mib_li°_roŸnode
 *
udp_∫
, *
√xt
, *
dñ_∫
[5];

1848 
mib_li°_node
 *
udp_n
, *
dñ_n
[5];

1849 
s32_t
 
udpidx
[5];

1850 
u8_t
 
bödögs
, 
fc
, 
Àvñ
, 
dñ_˙t
;

1852 
	`LWIP_ASSERT
("pcb !NULL", 
pcb
 !
NULL
);

1853 
	`¢mp_ùtooid
(&
pcb
->
loˇl_ù
, &
udpidx
[0]);

1854 
udpidx
[4] = 
pcb
->
loˇl_p‹t
;

1858 
bödögs
 = 0;

1859 
≈cb
 = 
udp_pcbs
;

1860 (
≈cb
 !
NULL
))

1862 i‡(
	`ù_addr_cmp
(&
≈cb
->
loˇl_ù
, &
pcb
->local_ip) &&

1863 (
≈cb
->
loˇl_p‹t
 =
udpidx
[4]))

1865 
bödögs
++;

1867 
≈cb
 =Çpcb->
√xt
;

1869 i‡(
bödögs
 == 1)

1873 
Àvñ
 = 0;

1874 
dñ_˙t
 = 0;

1875 
udp_∫
 = &
udp_roŸ
;

1876 (
Àvñ
 < 5Ë&& (
udp_∫
 !
NULL
))

1878 
fc
 = 
	`¢mp_mib_node_föd
(
udp_∫
, 
udpidx
[
Àvñ
], &
udp_n
);

1879 i‡(
fc
 == 0)

1882 
dñ_˙t
 = 0;

1883 
udp_∫
 = 
NULL
;

1885 i‡(
fc
 == 1)

1887 
dñ_∫
[
dñ_˙t
] = 
udp_∫
;

1888 
dñ_n
[
dñ_˙t
] = 
udp_n
;

1889 
dñ_˙t
++;

1890 
udp_∫
 = (
mib_li°_roŸnode
*)(
udp_n
->
≈å
);

1892 i‡(
fc
 == 2)

1895 
dñ_˙t
 = 0;

1896 
udp_∫
 = (
mib_li°_roŸnode
*)(
udp_n
->
≈å
);

1898 
Àvñ
++;

1901 
dñ_˙t
 > 0)

1903 
dñ_˙t
--;

1905 
udp_∫
 = 
dñ_∫
[
dñ_˙t
];

1906 
udp_n
 = 
dñ_n
[
dñ_˙t
];

1908 
√xt
 = 
	`¢mp_mib_node_dñëe
(
udp_∫
, 
udp_n
);

1909 i‡(
√xt
 !
NULL
)

1911 
	`LWIP_ASSERT
("√xt_cou¡ =0",
√xt
->
cou¡
 == 0);

1912 
	`¢mp_mib_Ãn_‰ì
(
√xt
);

1917 i‡(
udp_roŸ
.
cou¡
 =0Ë
ud±abÀ
.
maxÀngth
 = 0;

1918 
	}
}

1921 
	$¢mp_öc_¢mpöpkts
()

1923 
¢mpöpkts
++;

1924 
	}
}

1926 
	$¢mp_öc_¢mpouçkts
()

1928 
¢mpouçkts
++;

1929 
	}
}

1931 
	$¢mp_öc_¢mpöbadvîsi⁄s
()

1933 
¢mpöbadvîsi⁄s
++;

1934 
	}
}

1936 
	$¢mp_öc_¢mpöbadcommunôy«mes
()

1938 
¢mpöbadcommunôy«mes
++;

1939 
	}
}

1941 
	$¢mp_öc_¢mpöbadcommunôyu£s
()

1943 
¢mpöbadcommunôyu£s
++;

1944 
	}
}

1946 
	$¢mp_öc_¢mpöa¢∑r£îrs
()

1948 
¢mpöa¢∑r£îrs
++;

1949 
	}
}

1951 
	$¢mp_öc_¢mpötoobigs
()

1953 
¢mpötoobigs
++;

1954 
	}
}

1956 
	$¢mp_öc_¢mpönosuch«mes
()

1958 
¢mpönosuch«mes
++;

1959 
	}
}

1961 
	$¢mp_öc_¢mpöbadvÆues
()

1963 
¢mpöbadvÆues
++;

1964 
	}
}

1966 
	$¢mp_öc_¢mpöªad⁄lys
()

1968 
¢mpöªad⁄lys
++;

1969 
	}
}

1971 
	$¢mp_öc_¢mpögíîrs
()

1973 
¢mpögíîrs
++;

1974 
	}
}

1976 
	$¢mp_add_¢mpötŸÆªqv¨s
(
u8_t
 
vÆue
)

1978 
¢mpötŸÆªqv¨s
 +
vÆue
;

1979 
	}
}

1981 
	$¢mp_add_¢mpötŸÆ£tv¨s
(
u8_t
 
vÆue
)

1983 
¢mpötŸÆ£tv¨s
 +
vÆue
;

1984 
	}
}

1986 
	$¢mp_öc_¢mpögëªque°s
()

1988 
¢mpögëªque°s
++;

1989 
	}
}

1991 
	$¢mp_öc_¢mpögë√xts
()

1993 
¢mpögë√xts
++;

1994 
	}
}

1996 
	$¢mp_öc_¢mpö£åeque°s
()

1998 
¢mpö£åeque°s
++;

1999 
	}
}

2001 
	$¢mp_öc_¢mpögëª•⁄£s
()

2003 
¢mpögëª•⁄£s
++;

2004 
	}
}

2006 
	$¢mp_öc_¢mpöå≠s
()

2008 
¢mpöå≠s
++;

2009 
	}
}

2011 
	$¢mp_öc_¢mpouâoobigs
()

2013 
¢mpouâoobigs
++;

2014 
	}
}

2016 
	$¢mp_öc_¢mpouäosuch«mes
()

2018 
¢mpouäosuch«mes
++;

2019 
	}
}

2021 
	$¢mp_öc_¢mpoutbadvÆues
()

2023 
¢mpoutbadvÆues
++;

2024 
	}
}

2026 
	$¢mp_öc_¢mpoutgíîrs
()

2028 
¢mpoutgíîrs
++;

2029 
	}
}

2031 
	$¢mp_öc_¢mpoutgëªque°s
()

2033 
¢mpoutgëªque°s
++;

2034 
	}
}

2036 
	$¢mp_öc_¢mpoutgë√xts
()

2038 
¢mpoutgë√xts
++;

2039 
	}
}

2041 
	$¢mp_öc_¢mpout£åeque°s
()

2043 
¢mpout£åeque°s
++;

2044 
	}
}

2046 
	$¢mp_öc_¢mpoutgëª•⁄£s
()

2048 
¢mpoutgëª•⁄£s
++;

2049 
	}
}

2051 
	$¢mp_öc_¢mpouâøps
()

2053 
¢mpouâøps
++;

2054 
	}
}

2056 
	$¢mp_gë_¢mpgΩid_±r
(
¢mp_obj_id
 **
oid
)

2058 *
oid
 = &
¢mpgΩ_id
;

2059 
	}
}

2061 
	$¢mp_£t_¢m≥«bÀauthíå≠s
(
u8_t
 *
vÆue
)

2063 i‡(
vÆue
 !
NULL
)

2065 
¢m≥«bÀauthíå≠s_±r
 = 
vÆue
;

2067 
	}
}

2069 
	$¢mp_gë_¢m≥«bÀauthíå≠s
(
u8_t
 *
vÆue
)

2071 *
vÆue
 = *
¢m≥«bÀauthíå≠s_±r
;

2072 
	}
}

2075 
	$nﬁófs_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

2077 
	`LWIP_UNUSED_ARG
(
idít_Àn
);

2078 
	`LWIP_UNUSED_ARG
(
idít
);

2079 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2080 
	}
}

2083 
	$nﬁófs_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2085 
	`LWIP_UNUSED_ARG
(
od
);

2086 
	`LWIP_UNUSED_ARG
(
Àn
);

2087 
	`LWIP_UNUSED_ARG
(
vÆue
);

2088 
	}
}

2090 
u8_t


2091 
	$nﬁófs_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2093 
	`LWIP_UNUSED_ARG
(
od
);

2094 
	`LWIP_UNUSED_ARG
(
Àn
);

2095 
	`LWIP_UNUSED_ARG
(
vÆue
);

2098 
	}
}

2101 
	$nﬁófs_£t_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2103 
	`LWIP_UNUSED_ARG
(
od
);

2104 
	`LWIP_UNUSED_ARG
(
Àn
);

2105 
	`LWIP_UNUSED_ARG
(
vÆue
);

2106 
	}
}

2117 
	$sy°em_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

2119 
u8_t
 
id
;

2122 
idít_Àn
 += 1;

2123 
idít
 -= 1;

2124 i‡(
idít_Àn
 == 2)

2126 
od
->
id_ö°_Àn
 = 
idít_Àn
;

2127 
od
->
id_ö°_±r
 = 
idít
;

2129 
	`LWIP_ASSERT
("övÆid id", (
idít
[0] >= 0) && (ident[0] <= 0xff));

2130 
id
 = (
u8_t
)
idít
[0];

2131 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("gë_obje˘_de‡sy°em.%"
U16_F
".0\n",(
u16_t
)
id
));

2132 
id
)

2135 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2136 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2137 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2138 
od
->
v_Àn
 = *
sysdes¸_Àn_±r
;

2141 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2142 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2143 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
);

2144 
od
->
v_Àn
 = 
sysobjid
.
Àn
 * (
s32_t
);

2147 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2148 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2149 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_TIMETICKS
);

2150 
od
->
v_Àn
 = (
u32_t
);

2153 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2154 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2155 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2156 
od
->
v_Àn
 = *
sysc⁄è˘_Àn_±r
;

2159 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2160 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2161 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2162 
od
->
v_Àn
 = *
sy¢ame_Àn_±r
;

2165 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2166 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2167 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2168 
od
->
v_Àn
 = *
sy¶oˇti⁄_Àn_±r
;

2171 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2172 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2173 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2174 
od
->
v_Àn
 = (
s32_t
);

2177 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("system_get_object_def:Ço such object\n"));

2178 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2184 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("system_get_object_def:Ço scalar\n"));

2185 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2187 
	}
}

2198 
	$sy°em_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2200 
u8_t
 
id
;

2202 
	`LWIP_ASSERT
("övÆid id", (
od
->
id_ö°_±r
[0] >= 0) && (od->id_inst_ptr[0] <= 0xff));

2203 
id
 = (
u8_t
)
od
->
id_ö°_±r
[0];

2204 
id
)

2207 
	`oc°∫˝y
((
u8_t
*)
vÆue
, 
sysdes¸_±r
, 
Àn
);

2210 
	`obje˘idn˝y
((
s32_t
*)
vÆue
, (s32_t*)
sysobjid
.
id
, (
u8_t
)(
Àn
 / (s32_t)));

2214 
	`¢mp_gë_sysu±ime
((
u32_t
*)
vÆue
);

2218 
	`oc°∫˝y
((
u8_t
*)
vÆue
, 
sysc⁄è˘_±r
, 
Àn
);

2221 
	`oc°∫˝y
((
u8_t
*)
vÆue
, 
sy¢ame_±r
, 
Àn
);

2224 
	`oc°∫˝y
((
u8_t
*)
vÆue
, 
sy¶oˇti⁄_±r
, 
Àn
);

2228 
s32_t
 *
söt_±r
 = (s32_t*)
vÆue
;

2229 *
söt_±r
 = 
sys£rvi˚s
;

2233 
	}
}

2235 
u8_t


2236 
	$sy°em_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2238 
u8_t
 
id
, 
£t_ok
;

2240 
	`LWIP_UNUSED_ARG
(
vÆue
);

2241 
£t_ok
 = 0;

2242 
	`LWIP_ASSERT
("övÆid id", (
od
->
id_ö°_±r
[0] >= 0) && (od->id_inst_ptr[0] <= 0xff));

2243 
id
 = (
u8_t
)
od
->
id_ö°_±r
[0];

2244 
id
)

2247 i‡((
sysc⁄è˘_±r
 !
sysc⁄è˘_deÁu…
) &&

2248 (
Àn
 <= 255))

2250 
£t_ok
 = 1;

2254 i‡((
sy¢ame_±r
 !
sy¢ame_deÁu…
) &&

2255 (
Àn
 <= 255))

2257 
£t_ok
 = 1;

2261 i‡((
sy¶oˇti⁄_±r
 !
sy¶oˇti⁄_deÁu…
) &&

2262 (
Àn
 <= 255))

2264 
£t_ok
 = 1;

2268  
£t_ok
;

2269 
	}
}

2272 
	$sy°em_£t_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2274 
u8_t
 
id
;

2276 
	`LWIP_ASSERT
("övÆidÜí", 
Àn
 <= 0xff);

2277 
	`LWIP_ASSERT
("övÆid id", (
od
->
id_ö°_±r
[0] >= 0) && (od->id_inst_ptr[0] <= 0xff));

2278 
id
 = (
u8_t
)
od
->
id_ö°_±r
[0];

2279 
id
)

2282 
	`oc°∫˝y
(
sysc⁄è˘_±r
, (
u8_t
*)
vÆue
, 
Àn
);

2283 *
sysc⁄è˘_Àn_±r
 = (
u8_t
)
Àn
;

2286 
	`oc°∫˝y
(
sy¢ame_±r
, (
u8_t
*)
vÆue
, 
Àn
);

2287 *
sy¢ame_Àn_±r
 = (
u8_t
)
Àn
;

2290 
	`oc°∫˝y
(
sy¶oˇti⁄_±r
, (
u8_t
*)
vÆue
, 
Àn
);

2291 *
sy¶oˇti⁄_Àn_±r
 = (
u8_t
)
Àn
;

2294 
	}
}

2304 
	$öãrÁ˚s_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

2307 
idít_Àn
 += 1;

2308 
idít
 -= 1;

2309 i‡(
idít_Àn
 == 2)

2311 
od
->
id_ö°_Àn
 = 
idít_Àn
;

2312 
od
->
id_ö°_±r
 = 
idít
;

2314 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2315 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2316 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2317 
od
->
v_Àn
 = (
s32_t
);

2321 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("interfaces_get_object_def:Ço scalar\n"));

2322 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2324 
	}
}

2335 
	$öãrÁ˚s_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2337 
	`LWIP_UNUSED_ARG
(
Àn
);

2338 i‡(
od
->
id_ö°_±r
[0] == 1)

2340 
s32_t
 *
söt_±r
 = (s32_t*)
vÆue
;

2341 *
söt_±r
 = 
iÊi°_roŸ
.
cou¡
;

2343 
	}
}

2353 
	$i„¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

2355 
u8_t
 
id
;

2358 
idít_Àn
 += 1;

2359 
idít
 -= 1;

2360 i‡(
idít_Àn
 == 2)

2362 
od
->
id_ö°_Àn
 = 
idít_Àn
;

2363 
od
->
id_ö°_±r
 = 
idít
;

2365 
	`LWIP_ASSERT
("övÆid id", (
idít
[0] >= 0) && (ident[0] <= 0xff));

2366 
id
 = (
u8_t
)
idít
[0];

2367 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("gë_obje˘_de‡i„¡ry.%"
U16_F
"\n",(
u16_t
)
id
));

2368 
id
)

2374 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2375 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2376 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2377 
od
->
v_Àn
 = (
s32_t
);

2380 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2381 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2382 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2384 
od
->
v_Àn
 = 2;

2388 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2389 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2390 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_GAUGE
);

2391 
od
->
v_Àn
 = (
u32_t
);

2395 
√tif
 *netif;

2397 
	`¢mp_ifödext⁄ëif
(
idít
[1], &
√tif
);

2398 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2399 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2400 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2401 
od
->
v_Àn
 = 
√tif
->
hwaddr_Àn
;

2405 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2406 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2407 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2408 
od
->
v_Àn
 = (
s32_t
);

2411 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2412 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2413 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_TIMETICKS
);

2414 
od
->
v_Àn
 = (
u32_t
);

2427 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2428 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2429 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
);

2430 
od
->
v_Àn
 = (
u32_t
);

2434 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2435 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2436 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
);

2437 
od
->
v_Àn
 = 
if•ecific
.
Àn
 * (
s32_t
);

2440 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ifentry_get_object_def:Ço such object\n"));

2441 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2447 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ifentry_get_object_def:Ço scalar\n"));

2448 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2450 
	}
}

2461 
	$i„¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2463 
√tif
 *netif;

2464 
u8_t
 
id
;

2466 
	`¢mp_ifödext⁄ëif
(
od
->
id_ö°_±r
[1], &
√tif
);

2467 
	`LWIP_ASSERT
("övÆid id", (
od
->
id_ö°_±r
[0] >= 0) && (od->id_inst_ptr[0] <= 0xff));

2468 
id
 = (
u8_t
)
od
->
id_ö°_±r
[0];

2469 
id
)

2473 
s32_t
 *
söt_±r
 = (s32_t*)
vÆue
;

2474 *
söt_±r
 = 
od
->
id_ö°_±r
[1];

2478 
	`oc°∫˝y
((
u8_t
*)
vÆue
, (u8_t*)
√tif
->
«me
, 
Àn
);

2482 
s32_t
 *
söt_±r
 = (s32_t*)
vÆue
;

2483 *
söt_±r
 = 
√tif
->
lök_ty≥
;

2488 
s32_t
 *
söt_±r
 = (s32_t*)
vÆue
;

2489 *
söt_±r
 = 
√tif
->
mtu
;

2494 
u32_t
 *
uöt_±r
 = (u32_t*)
vÆue
;

2495 *
uöt_±r
 = 
√tif
->
lök_•ìd
;

2499 
	`oc°∫˝y
((
u8_t
*)
vÆue
, 
√tif
->
hwaddr
, 
Àn
);

2503 
s32_t
 *
söt_±r
 = (s32_t*)
vÆue
;

2504 i‡(
	`√tif_is_up
(
√tif
))

2506 i‡(
	`√tif_is_lök_up
(
√tif
))

2508 *
söt_±r
 = 1;

2512 *
söt_±r
 = 7;

2517 *
söt_±r
 = 2;

2523 
s32_t
 *
söt_±r
 = (s32_t*)
vÆue
;

2524 i‡(
	`√tif_is_up
(
√tif
))

2526 *
söt_±r
 = 1;

2530 *
söt_±r
 = 2;

2536 
u32_t
 *
uöt_±r
 = (u32_t*)
vÆue
;

2537 *
uöt_±r
 = 
√tif
->
ts
;

2542 
u32_t
 *
uöt_±r
 = (u32_t*)
vÆue
;

2543 *
uöt_±r
 = 
√tif
->
iföo˘ës
;

2548 
u32_t
 *
uöt_±r
 = (u32_t*)
vÆue
;

2549 *
uöt_±r
 = 
√tif
->
iföuˇ°pkts
;

2554 
u32_t
 *
uöt_±r
 = (u32_t*)
vÆue
;

2555 *
uöt_±r
 = 
√tif
->
ifönuˇ°pkts
;

2560 
u32_t
 *
uöt_±r
 = (u32_t*)
vÆue
;

2561 *
uöt_±r
 = 
√tif
->
ifödisˇrds
;

2568 
u32_t
 *
uöt_±r
 = (u32_t*)
vÆue
;

2569 *
uöt_±r
 = 0;

2574 
u32_t
 *
uöt_±r
 = (u32_t*)
vÆue
;

2575 *
uöt_±r
 = 
√tif
->
ifouto˘ës
;

2580 
u32_t
 *
uöt_±r
 = (u32_t*)
vÆue
;

2581 *
uöt_±r
 = 
√tif
->
ifoutuˇ°pkts
;

2586 
u32_t
 *
uöt_±r
 = (u32_t*)
vÆue
;

2587 *
uöt_±r
 = 
√tif
->
ifouäuˇ°pkts
;

2592 
u32_t
 *
uöt_±r
 = (u32_t*)
vÆue
;

2593 *
uöt_±r
 = 
√tif
->
ifoutdisˇrds
;

2599 
u32_t
 *
uöt_±r
 = (u32_t*)
vÆue
;

2600 *
uöt_±r
 = 0;

2606 
u32_t
 *
uöt_±r
 = (u32_t*)
vÆue
;

2607 *
uöt_±r
 = 0;

2611 
	`obje˘idn˝y
((
s32_t
*)
vÆue
, (s32_t*)
if•ecific
.
id
, (
u8_t
)(
Àn
 / (s32_t)));

2614 
	}
}

2616 #i‡!
SNMP_SAFE_REQUESTS


2617 
u8_t


2618 
	$i„¡ry_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2620 
√tif
 *netif;

2621 
u8_t
 
id
, 
£t_ok
;

2622 
	`LWIP_UNUSED_ARG
(
Àn
);

2624 
£t_ok
 = 0;

2625 
	`¢mp_ifödext⁄ëif
(
od
->
id_ö°_±r
[1], &
√tif
);

2626 
id
 = (
u8_t
)
od
->
id_ö°_±r
[0];

2627 
id
)

2631 
s32_t
 *
söt_±r
 = (s32_t*)
vÆue
;

2632 i‡(*
söt_±r
 == 1 || *sint_ptr == 2)

2633 
£t_ok
 = 1;

2637  
£t_ok
;

2638 
	}
}

2641 
	$i„¡ry_£t_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2643 
√tif
 *netif;

2644 
u8_t
 
id
;

2645 
	`LWIP_UNUSED_ARG
(
Àn
);

2647 
	`¢mp_ifödext⁄ëif
(
od
->
id_ö°_±r
[1], &
√tif
);

2648 
id
 = (
u8_t
)
od
->
id_ö°_±r
[0];

2649 
id
)

2653 
s32_t
 *
söt_±r
 = (s32_t*)
vÆue
;

2654 i‡(*
söt_±r
 == 1)

2656 
	`√tif_£t_up
(
√tif
);

2658 i‡(*
söt_±r
 == 2)

2660 
	`√tif_£t_down
(
√tif
);

2665 
	}
}

2676 
	$©íåy_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

2679 
idít_Àn
 += 5;

2680 
idít
 -= 5;

2682 i‡(
idít_Àn
 == 6)

2684 
od
->
id_ö°_Àn
 = 
idít_Àn
;

2685 
od
->
id_ö°_±r
 = 
idít
;

2687 
idít
[0])

2690 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2691 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2692 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2693 
od
->
v_Àn
 = (
s32_t
);

2696 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2697 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2698 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2699 
od
->
v_Àn
 = 6;

2702 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2703 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2704 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
);

2705 
od
->
v_Àn
 = 4;

2708 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("atentry_get_object_def:Ço such object\n"));

2709 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2715 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("atentry_get_object_def:Ço scalar\n"));

2716 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2718 
	}
}

2721 
	$©íåy_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2723 #i‡
LWIP_ARP


2724 
u8_t
 
id
;

2725 
ëh_addr
* 
ëhaddr_ªt
;

2726 
ù_addr_t
* 
ùaddr_ªt
;

2728 
ù_addr_t
 
ù
;

2729 
√tif
 *netif;

2731 
	`LWIP_UNUSED_ARG
(
Àn
);

2732 
	`LWIP_UNUSED_ARG
(
vÆue
);

2734 
	`¢mp_ifödext⁄ëif
(
od
->
id_ö°_±r
[1], &
√tif
);

2735 
	`¢mp_oidtoù
(&
od
->
id_ö°_±r
[2], &
ù
);

2737 #i‡
LWIP_ARP


2738 i‡(
	`ëh¨p_föd_addr
(
√tif
, &
ù
, &
ëhaddr_ªt
, &
ùaddr_ªt
) > -1)

2740 
	`LWIP_ASSERT
("övÆid id", (
od
->
id_ö°_±r
[0] >= 0) && (od->id_inst_ptr[0] <= 0xff));

2741 
id
 = (
u8_t
)
od
->
id_ö°_±r
[0];

2742 
id
)

2746 
s32_t
 *
söt_±r
 = (s32_t*)
vÆue
;

2747 *
söt_±r
 = 
od
->
id_ö°_±r
[1];

2752 
ëh_addr
 *
d°
 = (ëh_addr*)
vÆue
;

2754 *
d°
 = *
ëhaddr_ªt
;

2759 
ù_addr_t
 *
d°
 = (ù_addr_t*)
vÆue
;

2761 *
d°
 = *
ùaddr_ªt
;

2767 
	}
}

2770 
	$ù_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

2772 
u8_t
 
id
;

2775 
idít_Àn
 += 1;

2776 
idít
 -= 1;

2777 i‡(
idít_Àn
 == 2)

2779 
od
->
id_ö°_Àn
 = 
idít_Àn
;

2780 
od
->
id_ö°_±r
 = 
idít
;

2782 
	`LWIP_ASSERT
("övÆid id", (
idít
[0] >= 0) && (ident[0] <= 0xff));

2783 
id
 = (
u8_t
)
idít
[0];

2784 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("gë_obje˘_de‡ù.%"
U16_F
".0\n",(
u16_t
)
id
));

2785 
id
)

2789 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2790 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2791 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2792 
od
->
v_Àn
 = (
s32_t
);

2811 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2812 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2813 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
);

2814 
od
->
v_Àn
 = (
u32_t
);

2817 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2818 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2819 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2820 
od
->
v_Àn
 = (
s32_t
);

2823 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_get_object_def:Ço such object\n"));

2824 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2830 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_get_object_def:Ço scalar\n"));

2831 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2833 
	}
}

2836 
	$ù_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2838 
u8_t
 
id
;

2840 
	`LWIP_UNUSED_ARG
(
Àn
);

2841 
	`LWIP_ASSERT
("övÆid id", (
od
->
id_ö°_±r
[0] >= 0) && (od->id_inst_ptr[0] <= 0xff));

2842 
id
 = (
u8_t
)
od
->
id_ö°_±r
[0];

2843 
id
)

2847 
s32_t
 *
söt_±r
 = (s32_t*)
vÆue
;

2848 #i‡
IP_FORWARD


2850 *
söt_±r
 = 1;

2853 *
söt_±r
 = 2;

2859 
s32_t
 *
söt_±r
 = (s32_t*)
vÆue
;

2860 *
söt_±r
 = 
IP_DEFAULT_TTL
;

2865 
u32_t
 *
uöt_±r
 = (u32_t*)
vÆue
;

2866 *
uöt_±r
 = 
ùöª˚ives
;

2871 
u32_t
 *
uöt_±r
 = (u32_t*)
vÆue
;

2872 *
uöt_±r
 = 
ùöhdªº‹s
;

2877 
u32_t
 *
uöt_±r
 = (u32_t*)
vÆue
;

2878 *
uöt_±r
 = 
ùöaddªº‹s
;

2883 
u32_t
 *
uöt_±r
 = (u32_t*)
vÆue
;

2884 *
uöt_±r
 = 
ùf‹wd©agøms
;

2889 
u32_t
 *
uöt_±r
 = (u32_t*)
vÆue
;

2890 *
uöt_±r
 = 
ùöunknow≈rŸos
;

2895 
u32_t
 *
uöt_±r
 = (u32_t*)
vÆue
;

2896 *
uöt_±r
 = 
ùödisˇrds
;

2901 
u32_t
 *
uöt_±r
 = (u32_t*)
vÆue
;

2902 *
uöt_±r
 = 
ùödñivîs
;

2907 
u32_t
 *
uöt_±r
 = (u32_t*)
vÆue
;

2908 *
uöt_±r
 = 
ùouåeque°s
;

2913 
u32_t
 *
uöt_±r
 = (u32_t*)
vÆue
;

2914 *
uöt_±r
 = 
ùoutdisˇrds
;

2919 
u32_t
 *
uöt_±r
 = (u32_t*)
vÆue
;

2920 *
uöt_±r
 = 
ùouä‹ouãs
;

2925 
s32_t
 *
söt_±r
 = (s32_t*)
vÆue
;

2926 #i‡
IP_REASSEMBLY


2927 *
söt_±r
 = 
IP_REASS_MAXAGE
;

2929 *
söt_±r
 = 0;

2935 
u32_t
 *
uöt_±r
 = (u32_t*)
vÆue
;

2936 *
uöt_±r
 = 
ùªasmªqds
;

2941 
u32_t
 *
uöt_±r
 = (u32_t*)
vÆue
;

2942 *
uöt_±r
 = 
ùªasmoks
;

2947 
u32_t
 *
uöt_±r
 = (u32_t*)
vÆue
;

2948 *
uöt_±r
 = 
ùªasmÁûs
;

2953 
u32_t
 *
uöt_±r
 = (u32_t*)
vÆue
;

2954 *
uöt_±r
 = 
ù‰agoks
;

2959 
u32_t
 *
uöt_±r
 = (u32_t*)
vÆue
;

2960 *
uöt_±r
 = 
ù‰agÁûs
;

2965 
u32_t
 *
uöt_±r
 = (u32_t*)
vÆue
;

2966 *
uöt_±r
 = 
ù‰ag¸óãs
;

2972 
u32_t
 *
uöt_±r
 = (u32_t*)
vÆue
;

2973 *
uöt_±r
 = 
ùroutögdisˇrds
;

2977 
	}
}

2989 
u8_t


2990 
	$ù_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2992 
u8_t
 
id
, 
£t_ok
;

2993 
s32_t
 *
söt_±r
 = (s32_t*)
vÆue
;

2995 
	`LWIP_UNUSED_ARG
(
Àn
);

2996 
£t_ok
 = 0;

2997 
	`LWIP_ASSERT
("övÆid id", (
od
->
id_ö°_±r
[0] >= 0) && (od->id_inst_ptr[0] <= 0xff));

2998 
id
 = (
u8_t
)
od
->
id_ö°_±r
[0];

2999 
id
)

3002 #i‡
IP_FORWARD


3004 i‡(*
söt_±r
 == 1)

3007 i‡(*
söt_±r
 == 2)

3010 
£t_ok
 = 1;

3014 i‡(*
söt_±r
 =
IP_DEFAULT_TTL
)

3016 
£t_ok
 = 1;

3020  
£t_ok
;

3021 
	}
}

3024 
	$ù_addª¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3027 
idít_Àn
 += 4;

3028 
idít
 -= 4;

3030 i‡(
idít_Àn
 == 5)

3032 
u8_t
 
id
;

3034 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3035 
od
->
id_ö°_±r
 = 
idít
;

3037 
	`LWIP_ASSERT
("övÆid id", (
idít
[0] >= 0) && (ident[0] <= 0xff));

3038 
id
 = (
u8_t
)
idít
[0];

3039 
id
)

3043 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3044 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3045 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
);

3046 
od
->
v_Àn
 = 4;

3051 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3052 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3053 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3054 
od
->
v_Àn
 = (
s32_t
);

3057 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_addrentry_get_object_def:Ço such object\n"));

3058 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3064 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_addrentry_get_object_def:Ço scalar\n"));

3065 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3067 
	}
}

3070 
	$ù_addª¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3072 
u8_t
 
id
;

3073 
u16_t
 
ifidx
;

3074 
ù_addr_t
 
ù
;

3075 
√tif
 *√ti‡
√tif_li°
;

3077 
	`LWIP_UNUSED_ARG
(
Àn
);

3078 
	`¢mp_oidtoù
(&
od
->
id_ö°_±r
[1], &
ù
);

3079 
ifidx
 = 0;

3080 (
√tif
 !
NULL
Ë&& !
	`ù_addr_cmp
(&
ù
, &√tif->
ù_addr
))

3082 
√tif
 =Çëif->
√xt
;

3083 
ifidx
++;

3086 i‡(
√tif
 !
NULL
)

3088 
	`LWIP_ASSERT
("övÆid id", (
od
->
id_ö°_±r
[0] >= 0) && (od->id_inst_ptr[0] <= 0xff));

3089 
id
 = (
u8_t
)
od
->
id_ö°_±r
[0];

3090 
id
)

3094 
ù_addr_t
 *
d°
 = (ù_addr_t*)
vÆue
;

3095 *
d°
 = 
√tif
->
ù_addr
;

3100 
s32_t
 *
söt_±r
 = (s32_t*)
vÆue
;

3101 *
söt_±r
 = 
ifidx
 + 1;

3106 
ù_addr_t
 *
d°
 = (ù_addr_t*)
vÆue
;

3107 *
d°
 = 
√tif
->
√tmask
;

3112 
s32_t
 *
söt_±r
 = (s32_t*)
vÆue
;

3116 *
söt_±r
 = 
IPADDR_BROADCAST
 & 1;

3121 
s32_t
 *
söt_±r
 = (s32_t*)
vÆue
;

3122 #i‡
IP_REASSEMBLY


3127 *
söt_±r
 = (
IP_HLEN
 + ((
IP_REASS_MAX_PBUFS
/2) *

3128 (
PBUF_POOL_BUFSIZE
 - 
PBUF_LINK_HLEN
 - 
IP_HLEN
)));

3132 *
söt_±r
 = 0;

3138 
	}
}

3146 
	$ù_πì¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3148 
u8_t
 
id
;

3151 
idít_Àn
 += 4;

3152 
idít
 -= 4;

3154 i‡(
idít_Àn
 == 5)

3156 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3157 
od
->
id_ö°_±r
 = 
idít
;

3159 
	`LWIP_ASSERT
("övÆid id", (
idít
[0] >= 0) && (ident[0] <= 0xff));

3160 
id
 = (
u8_t
)
idít
[0];

3161 
id
)

3166 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3167 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3168 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
);

3169 
od
->
v_Àn
 = 4;

3179 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3180 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3181 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3182 
od
->
v_Àn
 = (
s32_t
);

3185 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3186 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3187 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3188 
od
->
v_Àn
 = (
s32_t
);

3192 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3193 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3194 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
);

3195 
od
->
v_Àn
 = 
ùrouãöfo
.
Àn
 * (
s32_t
);

3198 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_rteentry_get_object_def:Ço such object\n"));

3199 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3205 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_rteentry_get_object_def:Ço scalar\n"));

3206 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3208 
	}
}

3211 
	$ù_πì¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3213 
√tif
 *netif;

3214 
ù_addr_t
 
de°
;

3215 
s32_t
 *
idít
;

3216 
u8_t
 
id
;

3218 
idít
 = 
od
->
id_ö°_±r
;

3219 
	`¢mp_oidtoù
(&
idít
[1], &
de°
);

3221 i‡(
	`ù_addr_ißny
(&
de°
))

3224 
√tif
 = 
√tif_deÁu…
;

3229 
√tif
 = 
√tif_li°
;

3230 (
√tif
 !
NULL
) &&

3231 !
	`ù_addr_√tcmp
(&
de°
, &(
√tif
->
ù_addr
), &“ëif->
√tmask
)) )

3233 
√tif
 =Çëif->
√xt
;

3236 i‡(
√tif
 !
NULL
)

3238 
	`LWIP_ASSERT
("övÆid id", (
idít
[0] >= 0) && (ident[0] <= 0xff));

3239 
id
 = (
u8_t
)
idít
[0];

3240 
id
)

3244 
ù_addr_t
 *
d°
 = (ù_addr_t*)
vÆue
;

3246 i‡(
	`ù_addr_ißny
(&
de°
))

3249 
	`ù_addr_£t_zîo
(
d°
);

3254 
	`ù_addr_gë_√tw‹k
(
d°
, &
√tif
->
ù_addr
, &√tif->
√tmask
);

3260 
s32_t
 *
söt_±r
 = (s32_t*)
vÆue
;

3262 
	`¢mp_√ti·oifödex
(
√tif
, 
söt_±r
);

3267 
s32_t
 *
söt_±r
 = (s32_t*)
vÆue
;

3269 i‡(
	`ù_addr_ißny
(&
de°
))

3272 *
söt_±r
 = 1;

3277 *
söt_±r
 = 0;

3286 
s32_t
 *
söt_±r
 = (s32_t*)
vÆue
;

3288 *
söt_±r
 = -1;

3293 
ù_addr_t
 *
d°
 = (ù_addr_t*)
vÆue
;

3295 i‡(
	`ù_addr_ißny
(&
de°
))

3298 *
d°
 = 
√tif
->
gw
;

3303 *
d°
 = 
√tif
->
ù_addr
;

3309 
s32_t
 *
söt_±r
 = (s32_t*)
vÆue
;

3311 i‡(
	`ù_addr_ißny
(&
de°
))

3314 *
söt_±r
 = 4;

3319 *
söt_±r
 = 3;

3325 
s32_t
 *
söt_±r
 = (s32_t*)
vÆue
;

3327 *
söt_±r
 = 2;

3332 
s32_t
 *
söt_±r
 = (s32_t*)
vÆue
;

3335 *
söt_±r
 = 0;

3340 
ù_addr_t
 *
d°
 = (ù_addr_t*)
vÆue
;

3342 i‡(
	`ù_addr_ißny
(&
de°
))

3345 
	`ù_addr_£t_zîo
(
d°
);

3350 *
d°
 = 
√tif
->
√tmask
;

3355 
	`obje˘idn˝y
((
s32_t
*)
vÆue
, (s32_t*)
ùrouãöfo
.
id
, (
u8_t
)(
Àn
 / (s32_t)));

3359 
	}
}

3362 
	$ù_¡omíåy_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3365 
idít_Àn
 += 5;

3366 
idít
 -= 5;

3368 i‡(
idít_Àn
 == 6)

3370 
u8_t
 
id
;

3372 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3373 
od
->
id_ö°_±r
 = 
idít
;

3375 
	`LWIP_ASSERT
("övÆid id", (
idít
[0] >= 0) && (ident[0] <= 0xff));

3376 
id
 = (
u8_t
)
idít
[0];

3377 
id
)

3381 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3382 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3383 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3384 
od
->
v_Àn
 = (
s32_t
);

3387 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3388 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3389 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

3390 
od
->
v_Àn
 = 6;

3393 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3394 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3395 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
);

3396 
od
->
v_Àn
 = 4;

3399 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_ntomentry_get_object_def:Ço such object\n"));

3400 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3406 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_ntomentry_get_object_def:Ço scalar\n"));

3407 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3409 
	}
}

3412 
	$ù_¡omíåy_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3414 #i‡
LWIP_ARP


3415 
u8_t
 
id
;

3416 
ëh_addr
* 
ëhaddr_ªt
;

3417 
ù_addr_t
* 
ùaddr_ªt
;

3419 
ù_addr_t
 
ù
;

3420 
√tif
 *netif;

3422 
	`LWIP_UNUSED_ARG
(
Àn
);

3423 
	`LWIP_UNUSED_ARG
(
vÆue
);

3425 
	`¢mp_ifödext⁄ëif
(
od
->
id_ö°_±r
[1], &
√tif
);

3426 
	`¢mp_oidtoù
(&
od
->
id_ö°_±r
[2], &
ù
);

3428 #i‡
LWIP_ARP


3429 i‡(
	`ëh¨p_föd_addr
(
√tif
, &
ù
, &
ëhaddr_ªt
, &
ùaddr_ªt
) > -1)

3431 
	`LWIP_ASSERT
("övÆid id", (
od
->
id_ö°_±r
[0] >= 0) && (od->id_inst_ptr[0] <= 0xff));

3432 
id
 = (
u8_t
)
od
->
id_ö°_±r
[0];

3433 
id
)

3437 
s32_t
 *
söt_±r
 = (s32_t*)
vÆue
;

3438 *
söt_±r
 = 
od
->
id_ö°_±r
[1];

3443 
ëh_addr
 *
d°
 = (ëh_addr*)
vÆue
;

3445 *
d°
 = *
ëhaddr_ªt
;

3450 
ù_addr_t
 *
d°
 = (ù_addr_t*)
vÆue
;

3452 *
d°
 = *
ùaddr_ªt
;

3457 
s32_t
 *
söt_±r
 = (s32_t*)
vÆue
;

3459 *
söt_±r
 = 3;

3465 
	}
}

3468 
	$icmp_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3471 
idít_Àn
 += 1;

3472 
idít
 -= 1;

3473 i‡((
idít_Àn
 == 2) &&

3474 (
idít
[0] > 0) && (ident[0] < 27))

3476 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3477 
od
->
id_ö°_±r
 = 
idít
;

3479 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

3480 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3481 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
);

3482 
od
->
v_Àn
 = (
u32_t
);

3486 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("icmp_get_object_def:Ço scalar\n"));

3487 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3489 
	}
}

3492 
	$icmp_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3494 
u32_t
 *
uöt_±r
 = (u32_t*)
vÆue
;

3495 
u8_t
 
id
;

3497 
	`LWIP_UNUSED_ARG
(
Àn
);

3498 
	`LWIP_ASSERT
("övÆid id", (
od
->
id_ö°_±r
[0] >= 0) && (od->id_inst_ptr[0] <= 0xff));

3499 
id
 = (
u8_t
)
od
->
id_ö°_±r
[0];

3500 
id
)

3503 *
uöt_±r
 = 
icmpömsgs
;

3506 *
uöt_±r
 = 
icmpöîr‹s
;

3509 *
uöt_±r
 = 
icmpöde°uƒóchs
;

3512 *
uöt_±r
 = 
icmpötimìxcds
;

3515 *
uöt_±r
 = 
icmpö∑rm¥obs
;

3518 *
uöt_±r
 = 
icmpö§cquíchs
;

3521 *
uöt_±r
 = 
icmpöªdúe˘s
;

3524 *
uöt_±r
 = 
icmpöechos
;

3527 *
uöt_±r
 = 
icmpöech‹ïs
;

3530 *
uöt_±r
 = 
icmpötime°amps
;

3533 *
uöt_±r
 = 
icmpötime°am¥ïs
;

3536 *
uöt_±r
 = 
icmpöaddrmasks
;

3539 *
uöt_±r
 = 
icmpöaddrmaskªps
;

3542 *
uöt_±r
 = 
icmpoutmsgs
;

3545 *
uöt_±r
 = 
icmpouãº‹s
;

3548 *
uöt_±r
 = 
icmpoutde°uƒóchs
;

3551 *
uöt_±r
 = 
icmpouâimìxcds
;

3554 *
uöt_±r
 = 
icmpouç¨m¥obs
;

3557 *
uöt_±r
 = 
icmpout§cquíchs
;

3560 *
uöt_±r
 = 
icmpouåedúe˘s
;

3563 *
uöt_±r
 = 
icmpouãchos
;

3566 *
uöt_±r
 = 
icmpouãch‹ïs
;

3569 *
uöt_±r
 = 
icmpouâime°amps
;

3572 *
uöt_±r
 = 
icmpouâime°am¥ïs
;

3575 *
uöt_±r
 = 
icmpouèddrmasks
;

3578 *
uöt_±r
 = 
icmpouèddrmaskªps
;

3581 
	}
}

3583 #i‡
LWIP_TCP


3586 
	$t˝_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3588 
u8_t
 
id
;

3591 
idít_Àn
 += 1;

3592 
idít
 -= 1;

3593 i‡(
idít_Àn
 == 2)

3595 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3596 
od
->
id_ö°_±r
 = 
idít
;

3598 
	`LWIP_ASSERT
("övÆid id", (
idít
[0] >= 0) && (ident[0] <= 0xff));

3599 
id
 = (
u8_t
)
idít
[0];

3600 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("gë_obje˘_de‡t˝.%"
U16_F
".0\n",(
u16_t
)
id
));

3602 
id
)

3608 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

3609 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3610 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3611 
od
->
v_Àn
 = (
s32_t
);

3622 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

3623 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3624 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
);

3625 
od
->
v_Àn
 = (
u32_t
);

3628 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3629 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3630 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_GAUGE
);

3631 
od
->
v_Àn
 = (
u32_t
);

3634 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("tcp_get_object_def:Ço such object\n"));

3635 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3641 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("tcp_get_object_def:Ço scalar\n"));

3642 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3644 
	}
}

3647 
	$t˝_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3649 
u32_t
 *
uöt_±r
 = (u32_t*)
vÆue
;

3650 
s32_t
 *
söt_±r
 = (s32_t*)
vÆue
;

3651 
u8_t
 
id
;

3653 
	`LWIP_UNUSED_ARG
(
Àn
);

3654 
	`LWIP_ASSERT
("övÆid id", (
od
->
id_ö°_±r
[0] >= 0) && (od->id_inst_ptr[0] <= 0xff));

3655 
id
 = (
u8_t
)
od
->
id_ö°_±r
[0];

3656 
id
)

3659 *
söt_±r
 = 4;

3664 *
söt_±r
 = 1000;

3669 *
söt_±r
 = 60000;

3672 *
söt_±r
 = 
MEMP_NUM_TCP_PCB
;

3675 *
uöt_±r
 = 
t˝a˘ive›ís
;

3678 *
uöt_±r
 = 
t˝∑ssive›ís
;

3681 *
uöt_±r
 = 
t˝©ãm±Áûs
;

3684 *
uöt_±r
 = 
t˝e°abª£ts
;

3688 
u16_t
 
t˝cuºe°ab
 = 0;

3689 
t˝_pcb
 *
pcb
 = 
t˝_a˘ive_pcbs
;

3690 
pcb
 !
NULL
)

3692 i‡((
pcb
->
°©e
 =
ESTABLISHED
) ||

3693 (
pcb
->
°©e
 =
CLOSE_WAIT
))

3695 
t˝cuºe°ab
++;

3697 
pcb
 =Öcb->
√xt
;

3699 *
uöt_±r
 = 
t˝cuºe°ab
;

3703 *
uöt_±r
 = 
t˝ö£gs
;

3706 *
uöt_±r
 = 
t˝out£gs
;

3709 *
uöt_±r
 = 
t˝ªå™s£gs
;

3712 *
uöt_±r
 = 
t˝öîrs
;

3715 *
uöt_±r
 = 
t˝ouå°s
;

3718 
	}
}

3719 #ifde‡
THIS_SEEMS_UNUSED


3721 
	$t˝c⁄√¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3724 
idít_Àn
 += 10;

3725 
idít
 -= 10;

3727 i‡(
idít_Àn
 == 11)

3729 
u8_t
 
id
;

3731 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3732 
od
->
id_ö°_±r
 = 
idít
;

3734 
id
 = 
idít
[0];

3735 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("gë_obje˘_de‡t˝.%"
U16_F
".0\n",(
u16_t
)
id
));

3737 
id
)

3740 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3741 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3742 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3743 
od
->
v_Àn
 = (
s32_t
);

3747 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3748 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3749 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
);

3750 
od
->
v_Àn
 = 4;

3754 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3755 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3756 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3757 
od
->
v_Àn
 = (
s32_t
);

3760 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("tcpconnentry_get_object_def:Ço such object\n"));

3761 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3767 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("tcpconnentry_get_object_def:Ço such object\n"));

3768 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3770 
	}
}

3773 
	$t˝c⁄√¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3775 
ù_addr_t
 
lù
, 
rù
;

3776 
u16_t
 
Õ‹t
, 
Ω‹t
;

3777 
s32_t
 *
idít
;

3779 
idít
 = 
od
->
id_ö°_±r
;

3780 
	`¢mp_oidtoù
(&
idít
[1], &
lù
);

3781 
Õ‹t
 = 
idít
[5];

3782 
	`¢mp_oidtoù
(&
idít
[6], &
rù
);

3783 
Ω‹t
 = 
idít
[10];

3786 
	}
}

3791 
	$udp_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3794 
idít_Àn
 += 1;

3795 
idít
 -= 1;

3796 i‡((
idít_Àn
 == 2) &&

3797 (
idít
[0] > 0) && (ident[0] < 6))

3799 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3800 
od
->
id_ö°_±r
 = 
idít
;

3802 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

3803 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3804 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
);

3805 
od
->
v_Àn
 = (
u32_t
);

3809 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("udp_get_object_def:Ço scalar\n"));

3810 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3812 
	}
}

3815 
	$udp_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3817 
u32_t
 *
uöt_±r
 = (u32_t*)
vÆue
;

3818 
u8_t
 
id
;

3820 
	`LWIP_UNUSED_ARG
(
Àn
);

3821 
	`LWIP_ASSERT
("övÆid id", (
od
->
id_ö°_±r
[0] >= 0) && (od->id_inst_ptr[0] <= 0xff));

3822 
id
 = (
u8_t
)
od
->
id_ö°_±r
[0];

3823 
id
)

3826 *
uöt_±r
 = 
udpöd©agøms
;

3829 *
uöt_±r
 = 
ud≤›‹ts
;

3832 *
uöt_±r
 = 
udpöîr‹s
;

3835 *
uöt_±r
 = 
udpoutd©agøms
;

3838 
	}
}

3841 
	$ud≥¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3844 
idít_Àn
 += 5;

3845 
idít
 -= 5;

3847 i‡(
idít_Àn
 == 6)

3849 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3850 
od
->
id_ö°_±r
 = 
idít
;

3852 
idít
[0])

3855 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3856 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3857 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
);

3858 
od
->
v_Àn
 = 4;

3861 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3862 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3863 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3864 
od
->
v_Àn
 = (
s32_t
);

3867 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("udpentry_get_object_def:Ço such object\n"));

3868 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3874 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("udpentry_get_object_def:Ço scalar\n"));

3875 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3877 
	}
}

3880 
	$ud≥¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3882 
u8_t
 
id
;

3883 
udp_pcb
 *
pcb
;

3884 
ù_addr_t
 
ù
;

3885 
u16_t
 
p‹t
;

3887 
	`LWIP_UNUSED_ARG
(
Àn
);

3888 
	`¢mp_oidtoù
(&
od
->
id_ö°_±r
[1], &
ù
);

3889 
	`LWIP_ASSERT
("övÆidÖ‹t", (
od
->
id_ö°_±r
[5] >= 0) && (od->id_inst_ptr[5] <= 0xffff));

3890 
p‹t
 = (
u16_t
)
od
->
id_ö°_±r
[5];

3892 
pcb
 = 
udp_pcbs
;

3893 (
pcb
 !
NULL
) &&

3894 !(
	`ù_addr_cmp
(&
pcb
->
loˇl_ù
, &
ù
) &&

3895 (
pcb
->
loˇl_p‹t
 =
p‹t
)))

3897 
pcb
 =Öcb->
√xt
;

3900 i‡(
pcb
 !
NULL
)

3902 
	`LWIP_ASSERT
("övÆid id", (
od
->
id_ö°_±r
[0] >= 0) && (od->id_inst_ptr[0] <= 0xff));

3903 
id
 = (
u8_t
)
od
->
id_ö°_±r
[0];

3904 
id
)

3908 
ù_addr_t
 *
d°
 = (ù_addr_t*)
vÆue
;

3909 *
d°
 = 
pcb
->
loˇl_ù
;

3914 
s32_t
 *
söt_±r
 = (s32_t*)
vÆue
;

3915 *
söt_±r
 = 
pcb
->
loˇl_p‹t
;

3920 
	}
}

3923 
	$¢mp_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3926 
idít_Àn
 += 1;

3927 
idít
 -= 1;

3928 i‡(
idít_Àn
 == 2)

3930 
u8_t
 
id
;

3932 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3933 
od
->
id_ö°_±r
 = 
idít
;

3935 
	`LWIP_ASSERT
("övÆid id", (
idít
[0] >= 0) && (ident[0] <= 0xff));

3936 
id
 = (
u8_t
)
idít
[0];

3937 
id
)

3966 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

3967 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3968 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
);

3969 
od
->
v_Àn
 = (
u32_t
);

3972 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

3973 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3974 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3975 
od
->
v_Àn
 = (
s32_t
);

3978 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("snmp_get_object_def:Ço such object\n"));

3979 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3985 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("snmp_get_object_def:Ço scalar\n"));

3986 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3988 
	}
}

3991 
	$¢mp_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3993 
u32_t
 *
uöt_±r
 = (u32_t*)
vÆue
;

3994 
u8_t
 
id
;

3996 
	`LWIP_UNUSED_ARG
(
Àn
);

3997 
	`LWIP_ASSERT
("övÆid id", (
od
->
id_ö°_±r
[0] >= 0) && (od->id_inst_ptr[0] <= 0xff));

3998 
id
 = (
u8_t
)
od
->
id_ö°_±r
[0];

3999 
id
)

4002 *
uöt_±r
 = 
¢mpöpkts
;

4005 *
uöt_±r
 = 
¢mpouçkts
;

4008 *
uöt_±r
 = 
¢mpöbadvîsi⁄s
;

4011 *
uöt_±r
 = 
¢mpöbadcommunôy«mes
;

4014 *
uöt_±r
 = 
¢mpöbadcommunôyu£s
;

4017 *
uöt_±r
 = 
¢mpöa¢∑r£îrs
;

4020 *
uöt_±r
 = 
¢mpötoobigs
;

4023 *
uöt_±r
 = 
¢mpönosuch«mes
;

4026 *
uöt_±r
 = 
¢mpöbadvÆues
;

4029 *
uöt_±r
 = 
¢mpöªad⁄lys
;

4032 *
uöt_±r
 = 
¢mpögíîrs
;

4035 *
uöt_±r
 = 
¢mpötŸÆªqv¨s
;

4038 *
uöt_±r
 = 
¢mpötŸÆ£tv¨s
;

4041 *
uöt_±r
 = 
¢mpögëªque°s
;

4044 *
uöt_±r
 = 
¢mpögë√xts
;

4047 *
uöt_±r
 = 
¢mpö£åeque°s
;

4050 *
uöt_±r
 = 
¢mpögëª•⁄£s
;

4053 *
uöt_±r
 = 
¢mpöå≠s
;

4056 *
uöt_±r
 = 
¢mpouâoobigs
;

4059 *
uöt_±r
 = 
¢mpouäosuch«mes
;

4062 *
uöt_±r
 = 
¢mpoutbadvÆues
;

4065 *
uöt_±r
 = 
¢mpoutgíîrs
;

4068 *
uöt_±r
 = 
¢mpoutgëªque°s
;

4071 *
uöt_±r
 = 
¢mpoutgë√xts
;

4074 *
uöt_±r
 = 
¢mpout£åeque°s
;

4077 *
uöt_±r
 = 
¢mpoutgëª•⁄£s
;

4080 *
uöt_±r
 = 
¢mpouâøps
;

4083 *
uöt_±r
 = *
¢m≥«bÀauthíå≠s_±r
;

4086 
	}
}

4095 
u8_t


4096 
	$¢mp_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

4098 
u8_t
 
id
, 
£t_ok
;

4100 
	`LWIP_UNUSED_ARG
(
Àn
);

4101 
£t_ok
 = 0;

4102 
	`LWIP_ASSERT
("övÆid id", (
od
->
id_ö°_±r
[0] >= 0) && (od->id_inst_ptr[0] <= 0xff));

4103 
id
 = (
u8_t
)
od
->
id_ö°_±r
[0];

4104 i‡(
id
 == 30)

4107 
s32_t
 *
söt_±r
 = (s32_t*)
vÆue
;

4109 i‡(
¢m≥«bÀauthíå≠s_±r
 !&
¢m≥«bÀauthíå≠s_deÁu…
)

4112 i‡((*
söt_±r
 == 1) || (*sint_ptr == 2))

4114 
£t_ok
 = 1;

4120 i‡(*
söt_±r
 =
¢m≥«bÀauthíå≠s_deÁu…
)

4122 
£t_ok
 = 1;

4126  
£t_ok
;

4127 
	}
}

4130 
	$¢mp_£t_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

4132 
u8_t
 
id
;

4134 
	`LWIP_UNUSED_ARG
(
Àn
);

4135 
	`LWIP_ASSERT
("övÆid id", (
od
->
id_ö°_±r
[0] >= 0) && (od->id_inst_ptr[0] <= 0xff));

4136 
id
 = (
u8_t
)
od
->
id_ö°_±r
[0];

4137 i‡(
id
 == 30)

4141 
u8_t
 *
±r
 = (u8_t*)
vÆue
;

4142 *
¢m≥«bÀauthíå≠s_±r
 = *
±r
;

4144 
	}
}

	@core/snmp/mib_structs.c

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_SNMP


39 
	~"lwù/¢mp_°ru˘s.h
"

40 
	~"lwù/memp.h
"

41 
	~"lwù/√tif.h
"

44 c⁄° 
s32_t
 
	g¥efix
[4] = {1, 3, 6, 1};

46 
	#NODE_STACK_SIZE
 (
LWIP_SNMP_OBJ_ID_LEN
)

	)

48 
	sn£


51 
mib_node
* 
	mr_±r
;

53 
s32_t
 
	mr_id
;

55 
u8_t
 
	mr_∆
;

57 
u8_t
 
	gnode_°ack_˙t
;

58 
n£
 
	gnode_°ack
[
NODE_STACK_SIZE
];

64 
	$push_node
(
n£
* 
node
)

66 
	`LWIP_ASSERT
("node_°ack_˙à< NODE_STACK_SIZE",
node_°ack_˙t
 < 
NODE_STACK_SIZE
);

67 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("push_node(Ënode=%∞id=%"
S32_F
"\n",(*)(
node
->
r_±r
),node->
r_id
));

68 i‡(
node_°ack_˙t
 < 
NODE_STACK_SIZE
)

70 
node_°ack
[
node_°ack_˙t
] = *
node
;

71 
node_°ack_˙t
++;

73 
	}
}

79 
	$p›_node
(
n£
* 
node
)

81 i‡(
node_°ack_˙t
 > 0)

83 
node_°ack_˙t
--;

84 *
node
 = 
node_°ack
[
node_°ack_˙t
];

86 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("p›_node(Ënode=%∞id=%"
S32_F
"\n",(*)(
node
->
r_±r
),node->
r_id
));

87 
	}
}

95 
	$¢mp_ifödext⁄ëif
(
s32_t
 
ifödex
, 
√tif
 **netif)

97 
√tif
 *
nif
 = 
√tif_li°
;

98 
s32_t
 
i
, 
ifidx
;

100 
ifidx
 = 
ifödex
 - 1;

101 
i
 = 0;

102 (
nif
 !
NULL
Ë&& (
i
 < 
ifidx
))

104 
nif
 =Çif->
√xt
;

105 
i
++;

107 *
√tif
 = 
nif
;

108 
	}
}

116 
	$¢mp_√ti·oifödex
(
√tif
 *√tif, 
s32_t
 *
ifidx
)

118 
√tif
 *
nif
 = 
√tif_li°
;

119 
u16_t
 
i
;

121 
i
 = 0;

122 (
nif
 !
NULL
Ë&& (ni‡!
√tif
))

124 
nif
 =Çif->
√xt
;

125 
i
++;

127 *
ifidx
 = 
i
+1;

128 
	}
}

136 
	$¢mp_oidtoù
(
s32_t
 *
idít
, 
ù_addr_t
 *
ù
)

138 
	`IP4_ADDR
(
ù
, 
idít
[0], ident[1], ident[2], ident[3]);

139 
	}
}

147 
	$¢mp_ùtooid
(
ù_addr_t
 *
ù
, 
s32_t
 *
idít
)

149 
idít
[0] = 
	`ù4_addr1
(
ù
);

150 
idít
[1] = 
	`ù4_addr2
(
ù
);

151 
idít
[2] = 
	`ù4_addr3
(
ù
);

152 
idít
[3] = 
	`ù4_addr4
(
ù
);

153 
	}
}

155 
mib_li°_node
 *

156 
	$¢mp_mib_ _Æloc
(
s32_t
 
id
)

158 
mib_li°_node
 *
 
;

160 
 
 = (
mib_li°_node
 *)
	`memp_mÆloc
(
MEMP_SNMP_NODE
);

161 i‡(
 
 !
NULL
)

163 
 
->
¥ev
 = 
NULL
;

164 
 
->
√xt
 = 
NULL
;

165 
 
->
objid
 = 
id
;

166 
 
->
≈å
 = 
NULL
;

168  
 
;

169 
	}
}

172 
	$¢mp_mib_ _‰ì
(
mib_li°_node
 *
 
)

174 
	`memp_‰ì
(
MEMP_SNMP_NODE
, 
 
);

175 
	}
}

177 
mib_li°_roŸnode
 *

178 
	$¢mp_mib_Ãn_Æloc
()

180 
mib_li°_roŸnode
 *
Ãn
;

182 
Ãn
 = (
mib_li°_roŸnode
*)
	`memp_mÆloc
(
MEMP_SNMP_ROOTNODE
);

183 i‡(
Ãn
 !
NULL
)

185 
Ãn
->
gë_obje˘_def
 = 
nﬁófs_gë_obje˘_def
;

186 
Ãn
->
gë_vÆue
 = 
nﬁófs_gë_vÆue
;

187 
Ãn
->
£t_ã°
 = 
nﬁófs_£t_ã°
;

188 
Ãn
->
£t_vÆue
 = 
nﬁófs_£t_vÆue
;

189 
Ãn
->
node_ty≥
 = 
MIB_NODE_LR
;

190 
Ãn
->
maxÀngth
 = 0;

191 
Ãn
->
hód
 = 
NULL
;

192 
Ãn
->
èû
 = 
NULL
;

193 
Ãn
->
cou¡
 = 0;

195  
Ãn
;

196 
	}
}

199 
	$¢mp_mib_Ãn_‰ì
(
mib_li°_roŸnode
 *
Ãn
)

201 
	`memp_‰ì
(
MEMP_SNMP_ROOTNODE
, 
Ãn
);

202 
	}
}

215 
s8_t


216 
	$¢mp_mib_node_ö£π
(
mib_li°_roŸnode
 *
∫
, 
s32_t
 
objid
, 
mib_li°_node
 **
ö¢
)

218 
mib_li°_node
 *
¬
;

219 
s8_t
 
ö£π
;

221 
	`LWIP_ASSERT
("∫ !NULL",
∫
 !
NULL
);

224 
ö£π
 = 0;

225 i‡(
∫
->
hód
 =
NULL
)

228 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("Ælo¯em±yÜi° objid==%"
S32_F
"\n",
objid
));

229 
¬
 = 
	`¢mp_mib_ _Æloc
(
objid
);

230 i‡(
¬
 !
NULL
)

232 
∫
->
hód
 = 
¬
;

233 
∫
->
èû
 = 
¬
;

234 *
ö¢
 = 
¬
;

235 
ö£π
 = 1;

239 
ö£π
 = -1;

244 
mib_li°_node
 *
n
;

246 
n
 = 
∫
->
hód
;

247 (
n
 !
NULL
Ë&& (
ö£π
 == 0))

249 i‡(
n
->
objid
 == objid)

252 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("nodêÆªadyÅhîêobjid==%"
S32_F
"\n",
objid
));

253 *
ö¢
 = 
n
;

254 
ö£π
 = 2;

256 i‡(
n
->
objid
 < objid)

258 i‡(
n
->
√xt
 =
NULL
)

261 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("Ælo¯ö†èû objid==%"
S32_F
"\n",
objid
));

262 
¬
 = 
	`¢mp_mib_ _Æloc
(
objid
);

263 i‡(
¬
 !
NULL
)

265 
¬
->
√xt
 = 
NULL
;

266 
¬
->
¥ev
 = 
n
;

267 
n
->
√xt
 = 
¬
;

268 
∫
->
èû
 = 
¬
;

269 *
ö¢
 = 
¬
;

270 
ö£π
 = 1;

275 
ö£π
 = -1;

281 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("traverseÜist\n"));

282 
n
 =Ç->
√xt
;

289 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("Ælo¯ö†n->¥ev, objid==%"
S32_F
",Ç\n",
objid
));

290 
¬
 = 
	`¢mp_mib_ _Æloc
(
objid
);

291 i‡(
¬
 !
NULL
)

293 i‡(
n
->
¥ev
 =
NULL
)

296 
¬
->
√xt
 = 
n
;

297 
¬
->
¥ev
 = 
NULL
;

298 
∫
->
hód
 = 
¬
;

299 
n
->
¥ev
 = 
¬
;

304 
¬
->
√xt
 = 
n
;

305 
¬
->
¥ev
 = 
n
->prev;

306 
n
->
¥ev
->
√xt
 = 
¬
;

307 
n
->
¥ev
 = 
¬
;

309 *
ö¢
 = 
¬
;

310 
ö£π
 = 1;

315 
ö£π
 = -1;

320 i‡(
ö£π
 == 1)

322 
∫
->
cou¡
 += 1;

324 
	`LWIP_ASSERT
("ö£π !0",
ö£π
 != 0);

325  
ö£π
;

326 
	}
}

337 
s8_t


338 
	$¢mp_mib_node_föd
(
mib_li°_roŸnode
 *
∫
, 
s32_t
 
objid
, 
mib_li°_node
 **
‚
)

340 
s8_t
 
fc
;

341 
mib_li°_node
 *
n
;

343 
	`LWIP_ASSERT
("∫ !NULL",
∫
 !
NULL
);

344 
n
 = 
∫
->
hód
;

345 (
n
 !
NULL
Ë&& (n->
objid
 != objid))

347 
n
 =Ç->
√xt
;

349 i‡(
n
 =
NULL
)

351 
fc
 = 0;

353 i‡(
n
->
≈å
 =
NULL
)

356 
fc
 = 1;

360 
mib_li°_roŸnode
 *
r
;

362 i‡(
n
->
≈å
->
node_ty≥
 =
MIB_NODE_LR
)

364 
r
 = (
mib_li°_roŸnode
 *)
n
->
≈å
;

365 i‡(
r
->
cou¡
 > 1)

368 
fc
 = 2;

373 
fc
 = 1;

379 
fc
 = 3;

382 *
‚
 = 
n
;

383  
fc
;

384 
	}
}

394 
mib_li°_roŸnode
 *

395 
	$¢mp_mib_node_dñëe
(
mib_li°_roŸnode
 *
∫
, 
mib_li°_node
 *
n
)

397 
mib_li°_roŸnode
 *
√xt
;

399 
	`LWIP_ASSERT
("∫ !NULL",
∫
 !
NULL
);

400 
	`LWIP_ASSERT
("¿!NULL",
n
 !
NULL
);

403 
√xt
 = (
mib_li°_roŸnode
*)(
n
->
≈å
);

404 
∫
->
cou¡
 -= 1;

406 i‡(
n
 =
∫
->
hód
)

408 
∫
->
hód
 = 
n
->
√xt
;

409 i‡(
n
->
√xt
 !
NULL
)

412 
n
->
√xt
->
¥ev
 = 
NULL
;

415 i‡(
n
 =
∫
->
èû
)

417 
∫
->
èû
 = 
n
->
¥ev
;

418 i‡(
n
->
¥ev
 !
NULL
)

421 
n
->
¥ev
->
√xt
 = 
NULL
;

427 
n
->
¥ev
->
√xt
 =Ç->next;

428 
n
->
√xt
->
¥ev
 =Ç->prev;

430 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("‰ìÜi° objid==%"
S32_F
"\n",
n
->
objid
));

431 
	`¢mp_mib_ _‰ì
(
n
);

432 i‡(
∫
->
cou¡
 == 0)

434 
∫
->
hód
 = 
NULL
;

435 
∫
->
èû
 = 
NULL
;

437  
√xt
;

438 
	}
}

451 
mib_node
 *

452 
	$¢mp_£¨ch_åì
(
mib_node
 *
node
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_«me_±r
 *
≈
)

454 
u8_t
 
node_ty≥
, 
ext_Àvñ
;

456 
ext_Àvñ
 = 0;

457 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("node==%∞*idít==%"
S32_F
"\n",(*)
node
,*
idít
));

458 
node
 !
NULL
)

460 
node_ty≥
 = 
node
->node_type;

461 i‡((
node_ty≥
 =
MIB_NODE_AR
Ë|| (node_ty≥ =
MIB_NODE_RA
))

463 
mib_¨øy_node
 *
™
;

464 
u16_t
 
i
;

466 i‡(
idít_Àn
 > 0)

469 
™
 = (
mib_¨øy_node
 *)
node
;

470 
i
 = 0;

471 (
i
 < 
™
->
maxÀngth
Ë&& (™->
objid
[i] !*
idít
))

473 
i
++;

475 i‡(
i
 < 
™
->
maxÀngth
)

478 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("™->objid[%"
U16_F
"]==%"
S32_F
" *idít==%"S32_F"\n",
i
,
™
->
objid
[i],*
idít
));

479 i‡(
™
->
≈å
[
i
] =
NULL
)

483 
≈
->
idít_Àn
 = ident_len;

484 
≈
->
idít
 = ident;

485  (
mib_node
*)
™
;

490 
idít
++;

491 
idít_Àn
--;

492 
node
 = 
™
->
≈å
[
i
];

498 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("™ sórch faûed *idít==%"
S32_F
"\n",*
idít
));

499  
NULL
;

505 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("an search failed, short object identifier\n"));

506  
NULL
;

509 if(
node_ty≥
 =
MIB_NODE_LR
)

511 
mib_li°_roŸnode
 *
Ãn
;

512 
mib_li°_node
 *
 
;

514 i‡(
idít_Àn
 > 0)

517 
Ãn
 = (
mib_li°_roŸnode
 *)
node
;

518 
 
 = 
Ãn
->
hód
;

520 (
 
 !
NULL
Ë&& ( ->
objid
 !*
idít
))

522 
 
 =Ün->
√xt
;

524 i‡(
 
 !
NULL
)

527 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,(" ->objid==%"
S32_F
" *idít==%"S32_F"\n",
 
->
objid
,*
idít
));

528 i‡(
 
->
≈å
 =
NULL
)

530 
≈
->
idít_Àn
 = ident_len;

531 
≈
->
idít
 = ident;

532  (
mib_node
*)
Ãn
;

537 
idít_Àn
--;

538 
idít
++;

539 
node
 = 
 
->
≈å
;

545 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("  sórch faûed *idít==%"
S32_F
"\n",*
idít
));

546  
NULL
;

552 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ln search failed, short object identifier\n"));

553  
NULL
;

556 if(
node_ty≥
 =
MIB_NODE_EX
)

558 
mib_exã∫Æ_node
 *
í
;

559 
u16_t
 
i
, 
Àn
;

561 i‡(
idít_Àn
 > 0)

564 
í
 = (
mib_exã∫Æ_node
 *)
node
;

566 
i
 = 0;

567 
Àn
 = 
í
->
	`Àvñ_Àngth
”n->
addr_öf
,
ext_Àvñ
);

568 (
i
 < 
Àn
Ë&& (
í
->
	`idít_cmp
”n->
addr_öf
,
ext_Àvñ
,i,*
idít
) != 0))

570 
i
++;

572 i‡(
i
 < 
Àn
)

574 
s32_t
 
debug_id
;

576 
í
->
	`gë_objid
”n->
addr_öf
,
ext_Àvñ
,
i
,&
debug_id
);

577 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("í->objid==%"
S32_F
" *idít==%"S32_F"\n",
debug_id
,*
idít
));

578 i‡((
ext_Àvñ
 + 1Ë=
í
->
åì_Àvñs
)

580 
≈
->
idít_Àn
 = ident_len;

581 
≈
->
idít
 = ident;

582  (
mib_node
*)
í
;

587 
idít_Àn
--;

588 
idít
++;

589 
ext_Àvñ
++;

595 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("í sórch faûed *idít==%"
S32_F
"\n",*
idít
));

596  
NULL
;

602 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("en search failed, short object identifier\n"));

603  
NULL
;

606 i‡(
node_ty≥
 =
MIB_NODE_SC
)

608 
mib_sˇœr_node
 *
¢
;

610 
¢
 = (
mib_sˇœr_node
 *)
node
;

611 i‡((
idít_Àn
 =1Ë&& (*
idít
 == 0))

613 
≈
->
idít_Àn
 = ident_len;

614 
≈
->
idít
 = ident;

615  (
mib_node
*)
¢
;

620 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("search failed, invalid object identifierÜength\n"));

621  
NULL
;

627 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("£¨ch faûedÇode_ty≥ %"
U16_F
" unkown\n",(
u16_t
)
node_ty≥
));

628  
NULL
;

632 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("£¨ch faûedÇode==%p\n",(*)
node
));

633  
NULL
;

634 
	}
}

639 
u8_t


640 
	$em±y_èbÀ
(
mib_node
 *
node
)

642 
u8_t
 
node_ty≥
;

643 
u8_t
 
em±y
 = 0;

645 i‡(
node
 !
NULL
)

647 
node_ty≥
 = 
node
->node_type;

648 i‡(
node_ty≥
 =
MIB_NODE_LR
)

650 
mib_li°_roŸnode
 *
Ãn
;

651 
Ãn
 = (
mib_li°_roŸnode
 *)
node
;

652 i‡((
Ãn
->
cou¡
 =0Ë|| (Ãn->
hód
 =
NULL
))

654 
em±y
 = 1;

657 i‡((
node_ty≥
 =
MIB_NODE_AR
Ë|| (node_ty≥ =
MIB_NODE_RA
))

659 
mib_¨øy_node
 *
™
;

660 
™
 = (
mib_¨øy_node
 *)
node
;

661 i‡((
™
->
maxÀngth
 =0Ë|| (™->
≈å
 =
NULL
))

663 
em±y
 = 1;

666 i‡(
node_ty≥
 =
MIB_NODE_EX
)

668 
mib_exã∫Æ_node
 *
í
;

669 
í
 = (
mib_exã∫Æ_node
 *)
node
;

670 i‡(
í
->
åì_Àvñs
 == 0)

672 
em±y
 = 1;

676  
em±y
;

677 
	}
}

682 
mib_node
 *

683 
	$¢mp_ex∑nd_åì
(
mib_node
 *
node
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_obj_id
 *
oidªt
)

685 
u8_t
 
node_ty≥
, 
ext_Àvñ
, 
˛imb_åì
;

687 
ext_Àvñ
 = 0;

689 
node_°ack_˙t
 = 0;

690 
node
 !
NULL
)

692 
˛imb_åì
 = 0;

693 
node_ty≥
 = 
node
->node_type;

694 i‡((
node_ty≥
 =
MIB_NODE_AR
Ë|| (node_ty≥ =
MIB_NODE_RA
))

696 
mib_¨øy_node
 *
™
;

697 
u16_t
 
i
;

700 
™
 = (
mib_¨øy_node
 *)
node
;

701 i‡(
idít_Àn
 > 0)

703 
i
 = 0;

704 (
i
 < 
™
->
maxÀngth
Ë&& (™->
objid
[i] < *
idít
))

706 
i
++;

708 i‡(
i
 < 
™
->
maxÀngth
)

710 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("™->objid[%"
U16_F
"]==%"
S32_F
" *idít==%"S32_F"\n",
i
,
™
->
objid
[i],*
idít
));

712 
oidªt
->
id
[oidªt->
Àn
] = 
™
->
objid
[
i
];

713 (
oidªt
->
Àn
)++;

715 i‡(
™
->
≈å
[
i
] =
NULL
)

717 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("leafÇode\n"));

719 i‡(
™
->
objid
[
i
] > *
idít
)

721  (
mib_node
*)
™
;

723 i‡((
i
 + 1Ë< 
™
->
maxÀngth
)

726 (
oidªt
->
Àn
)--;

727 
oidªt
->
id
[oidªt->
Àn
] = 
™
->
objid
[
i
 + 1];

728 (
oidªt
->
Àn
)++;

729  (
mib_node
*)
™
;

734 (
oidªt
->
Àn
)--;

735 
˛imb_åì
 = 1;

740 
u8_t
 
j
;

741 
n£
 
cur_node
;

743 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("non-leafÇode\n"));

745 
	`LWIP_ASSERT
("ò< 0xff", 
i
 < 0xff);

746 
j
 = (
u8_t
)
i
 + 1;

747 (
j
 < 
™
->
maxÀngth
Ë&& (
	`em±y_èbÀ
◊n->
≈å
[j])))

749 
j
++;

751 i‡(
j
 < 
™
->
maxÀngth
)

753 
cur_node
.
r_±r
 = 
™
->
≈å
[
j
];

754 
cur_node
.
r_id
 = 
™
->
objid
[
j
];

755 
cur_node
.
r_∆
 = 0;

759 
cur_node
.
r_±r
 = 
NULL
;

761 
	`push_node
(&
cur_node
);

762 i‡(
™
->
objid
[
i
] =*
idít
)

764 
idít_Àn
--;

765 
idít
++;

770 
idít_Àn
 = 0;

773 
node
 = 
™
->
≈å
[
i
];

779 
˛imb_åì
 = 1;

784 
u8_t
 
j
;

786 
j
 = 0;

787 (
j
 < 
™
->
maxÀngth
Ë&& 
	`em±y_èbÀ
◊n->
≈å
[j]))

789 
j
++;

791 i‡(
j
 < 
™
->
maxÀngth
)

793 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("À·án->objid[j]==%"
S32_F
"\n",
™
->
objid
[
j
]));

794 
oidªt
->
id
[oidªt->
Àn
] = 
™
->
objid
[
j
];

795 (
oidªt
->
Àn
)++;

796 i‡(
™
->
≈å
[
j
] =
NULL
)

799  (
mib_node
*)
™
;

804 
node
 = 
™
->
≈å
[
j
];

810 
˛imb_åì
 = 1;

814 if(
node_ty≥
 =
MIB_NODE_LR
)

816 
mib_li°_roŸnode
 *
Ãn
;

817 
mib_li°_node
 *
 
;

820 
Ãn
 = (
mib_li°_roŸnode
 *)
node
;

821 i‡(
idít_Àn
 > 0)

823 
 
 = 
Ãn
->
hód
;

825 (
 
 !
NULL
Ë&& ( ->
objid
 < *
idít
))

827 
 
 =Ün->
√xt
;

829 i‡(
 
 !
NULL
)

831 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,(" ->objid==%"
S32_F
" *idít==%"S32_F"\n",
 
->
objid
,*
idít
));

832 
oidªt
->
id
[oidªt->
Àn
] = 
 
->
objid
;

833 (
oidªt
->
Àn
)++;

834 i‡(
 
->
≈å
 =
NULL
)

837 i‡(
 
->
objid
 > *
idít
)

839  (
mib_node
*)
Ãn
;

841 i‡(
 
->
√xt
 !
NULL
)

844 (
oidªt
->
Àn
)--;

845 
oidªt
->
id
[oidªt->
Àn
] = 
 
->
√xt
->
objid
;

846 (
oidªt
->
Àn
)++;

847  (
mib_node
*)
Ãn
;

852 (
oidªt
->
Àn
)--;

853 
˛imb_åì
 = 1;

858 
mib_li°_node
 *
jn
;

859 
n£
 
cur_node
;

862 
jn
 = 
 
->
√xt
;

863 (
jn
 !
NULL
Ë&& 
	`em±y_èbÀ
(jn->
≈å
))

865 
jn
 = jn->
√xt
;

867 i‡(
jn
 !
NULL
)

869 
cur_node
.
r_±r
 = 
jn
->
≈å
;

870 
cur_node
.
r_id
 = 
jn
->
objid
;

871 
cur_node
.
r_∆
 = 0;

875 
cur_node
.
r_±r
 = 
NULL
;

877 
	`push_node
(&
cur_node
);

878 i‡(
 
->
objid
 =*
idít
)

880 
idít_Àn
--;

881 
idít
++;

886 
idít_Àn
 = 0;

889 
node
 = 
 
->
≈å
;

896 
˛imb_åì
 = 1;

901 
mib_li°_node
 *
jn
;

903 
jn
 = 
Ãn
->
hód
;

904 (
jn
 !
NULL
Ë&& 
	`em±y_èbÀ
(jn->
≈å
))

906 
jn
 = jn->
√xt
;

908 i‡(
jn
 !
NULL
)

910 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("À· jn->objid==%"
S32_F
"\n",
jn
->
objid
));

911 
oidªt
->
id
[oidªt->
Àn
] = 
jn
->
objid
;

912 (
oidªt
->
Àn
)++;

913 i‡(
jn
->
≈å
 =
NULL
)

916 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("jn->nptr == NULL\n"));

917  (
mib_node
*)
Ãn
;

922 
node
 = 
jn
->
≈å
;

928 
˛imb_åì
 = 1;

932 if(
node_ty≥
 =
MIB_NODE_EX
)

934 
mib_exã∫Æ_node
 *
í
;

935 
s32_t
 
ex_id
;

938 
í
 = (
mib_exã∫Æ_node
 *)
node
;

939 i‡(
idít_Àn
 > 0)

941 
u16_t
 
i
, 
Àn
;

943 
i
 = 0;

944 
Àn
 = 
í
->
	`Àvñ_Àngth
”n->
addr_öf
,
ext_Àvñ
);

945 (
i
 < 
Àn
Ë&& (
í
->
	`idít_cmp
”n->
addr_öf
,
ext_Àvñ
,i,*
idít
) < 0))

947 
i
++;

949 i‡(
i
 < 
Àn
)

952 
í
->
	`gë_objid
”n->
addr_öf
,
ext_Àvñ
,
i
,&
ex_id
);

953 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("í->objid[%"
U16_F
"]==%"
S32_F
" *idít==%"S32_F"\n",
i
,
ex_id
,*
idít
));

954 
oidªt
->
id
[oidªt->
Àn
] = 
ex_id
;

955 (
oidªt
->
Àn
)++;

957 i‡((
ext_Àvñ
 + 1Ë=
í
->
åì_Àvñs
)

959 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("leafÇode\n"));

961 i‡(
ex_id
 > *
idít
)

963  (
mib_node
*)
í
;

965 i‡((
i
 + 1Ë< 
Àn
)

968 
í
->
	`gë_objid
”n->
addr_öf
,
ext_Àvñ
,
i
 + 1,&
ex_id
);

969 (
oidªt
->
Àn
)--;

970 
oidªt
->
id
[oidªt->
Àn
] = 
ex_id
;

971 (
oidªt
->
Àn
)++;

972  (
mib_node
*)
í
;

977 (
oidªt
->
Àn
)--;

978 
˛imb_åì
 = 1;

983 
u8_t
 
j
;

984 
n£
 
cur_node
;

986 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("non-leafÇode\n"));

988 
	`LWIP_ASSERT
("ò< 0xff", 
i
 < 0xff);

989 
j
 = (
u8_t
)
i
 + 1;

990 i‡(
j
 < 
Àn
)

993 
cur_node
.
r_±r
 = 
node
;

994 
í
->
	`gë_objid
”n->
addr_öf
,
ext_Àvñ
,
j
,&
cur_node
.
r_id
);

995 
cur_node
.
r_∆
 = 
ext_Àvñ
 + 1;

999 
cur_node
.
r_±r
 = 
NULL
;

1001 
	`push_node
(&
cur_node
);

1002 i‡(
í
->
	`idít_cmp
”n->
addr_öf
,
ext_Àvñ
,
i
,*
idít
) == 0)

1004 
idít_Àn
--;

1005 
idít
++;

1010 
idít_Àn
 = 0;

1013 
ext_Àvñ
++;

1019 
˛imb_åì
 = 1;

1025 
í
->
	`gë_objid
”n->
addr_öf
,
ext_Àvñ
,0,&
ex_id
);

1026 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("À·Én->objid==%"
S32_F
"\n",
ex_id
));

1027 
oidªt
->
id
[oidªt->
Àn
] = 
ex_id
;

1028 (
oidªt
->
Àn
)++;

1029 i‡((
ext_Àvñ
 + 1Ë=
í
->
åì_Àvñs
)

1032 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("(ext_level + 1) ==Én->tree_levels\n"));

1033  (
mib_node
*)
í
;

1038 
ext_Àvñ
++;

1042 if(
node_ty≥
 =
MIB_NODE_SC
)

1044 
mib_sˇœr_node
 *
¢
;

1047 
¢
 = (
mib_sˇœr_node
 *)
node
;

1048 i‡(
idít_Àn
 > 0)

1051 
˛imb_åì
 = 1;

1056 
oidªt
->
id
[oidªt->
Àn
] = 0;

1057 (
oidªt
->
Àn
)++;

1059 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("completed scalarÜeaf\n"));

1060  (
mib_node
*)
¢
;

1066 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ex∑nd faûedÇode_ty≥ %"
U16_F
" unkown\n",(
u16_t
)
node_ty≥
));

1067  
NULL
;

1070 i‡(
˛imb_åì
)

1072 
n£
 
chûd
;

1075 
chûd
.
r_±r
 = 
NULL
;

1076 
chûd
.
r_id
 = 0;

1077 
chûd
.
r_∆
 = 0;

1078 (
node_°ack_˙t
 > 0Ë&& (
chûd
.
r_±r
 =
NULL
))

1080 
	`p›_node
(&
chûd
);

1082 (
oidªt
->
Àn
)--;

1084 i‡(
chûd
.
r_±r
 !
NULL
)

1087 
idít_Àn
 = 0;

1088 
oidªt
->
id
[oidªt->
Àn
] = 
chûd
.
r_id
;

1089 
oidªt
->
Àn
++;

1090 
node
 = 
chûd
.
r_±r
;

1091 
ext_Àvñ
 = 
chûd
.
r_∆
;

1096 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("expand failed,ÅreeÉnds here\n"));

1097  
NULL
;

1102 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ex∑nd faûedÇode==%p\n",(*)
node
));

1103  
NULL
;

1104 
	}
}

1113 
u8_t


1114 
	$¢mp_iso_¥efix_t°
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
)

1116 i‡((
idít_Àn
 > 3) &&

1117 (
idít
[0] == 1) && (ident[1] == 3) &&

1118 (
idít
[2] == 6) && (ident[3] == 1))

1126 
	}
}

1139 
u8_t


1140 
	$¢mp_iso_¥efix_ex∑nd
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_obj_id
 *
oidªt
)

1142 c⁄° 
s32_t
 *
¥efix_±r
;

1143 
s32_t
 *
ªt_±r
;

1144 
u8_t
 
i
;

1146 
i
 = 0;

1147 
¥efix_±r
 = &
¥efix
[0];

1148 
ªt_±r
 = &
oidªt
->
id
[0];

1149 
idít_Àn
 = ((ident_len < 4)?ident_len:4);

1150 (
i
 < 
idít_Àn
Ë&& ((*
idít
Ë<(*
¥efix_±r
)))

1152 *
ªt_±r
++ = *
¥efix_±r
++;

1153 
idít
++;

1154 
i
++;

1156 i‡(
i
 =
idít_Àn
)

1159 
i
 < 4)

1161 *
ªt_±r
++ = *
¥efix_±r
++;

1162 
i
++;

1164 
oidªt
->
Àn
 = 
i
;

1172 
	}
}

	@core/snmp/msg_in.c

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_SNMP


39 
	~"lwù/¢mp.h
"

40 
	~"lwù/¢mp_a¢1.h
"

41 
	~"lwù/¢mp_msg.h
"

42 
	~"lwù/¢mp_°ru˘s.h
"

43 
	~"lwù/ù_addr.h
"

44 
	~"lwù/memp.h
"

45 
	~"lwù/udp.h
"

46 
	~"lwù/°©s.h
"

48 
	~<°rög.h
>

52 c⁄° 
s32_t
 
	g¢mp_vîsi⁄
 = 0;

54 c⁄° 
	g¢mp_publiccommunôy
[7] = "public";

57 
¢mp_msg_p°©
 
	gmsg_öput_li°
[
SNMP_CONCURRENT_REQUESTS
];

59 
udp_pcb
 *
	g¢mp1_pcb
;

61 
¢mp_ªcv
(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr_t
 *
addr
, 
u16_t
 
p‹t
);

62 
îr_t
 
¢mp_pdu_hódî_check
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
pdu_Àn
, u16_à*
ofs_ªt
, 
¢mp_msg_p°©
 *
m_°©
);

63 
îr_t
 
¢mp_pdu_dec_v¨bödli°
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à*
ofs_ªt
, 
¢mp_msg_p°©
 *
m_°©
);

71 
	$¢mp_öô
()

73 
¢mp_msg_p°©
 *
msg_ps
;

74 
u8_t
 
i
;

76 
¢mp1_pcb
 = 
	`udp_√w
();

77 i‡(
¢mp1_pcb
 !
NULL
)

79 
	`udp_ªcv
(
¢mp1_pcb
, 
¢mp_ªcv
, (*)
SNMP_IN_PORT
);

80 
	`udp_böd
(
¢mp1_pcb
, 
IP_ADDR_ANY
, 
SNMP_IN_PORT
);

82 
msg_ps
 = &
msg_öput_li°
[0];

83 
i
=0; i<
SNMP_CONCURRENT_REQUESTS
; i++)

85 
msg_ps
->
°©e
 = 
SNMP_MSG_EMPTY
;

86 
msg_ps
->
îr‹_ödex
 = 0;

87 
msg_ps
->
îr‹_°©us
 = 
SNMP_ES_NOERROR
;

88 
msg_ps
++;

90 
å≠_msg
.
pcb
 = 
¢mp1_pcb
;

92 #ifde‡
SNMP_PRIVATE_MIB_INIT


97 
	`SNMP_PRIVATE_MIB_INIT
();

102 
	`¢mp_cﬁd°¨t_å≠
();

103 
	}
}

106 
	$¢mp_îr‹_ª•⁄£
(
¢mp_msg_p°©
 *
msg_ps
, 
u8_t
 
îr‹
)

108 
	`¢mp_v¨böd_li°_‰ì
(&
msg_ps
->
outvb
);

109 
msg_ps
->
outvb
 = msg_ps->
övb
;

110 
msg_ps
->
övb
.
hód
 = 
NULL
;

111 
msg_ps
->
övb
.
èû
 = 
NULL
;

112 
msg_ps
->
övb
.
cou¡
 = 0;

113 
msg_ps
->
îr‹_°©us
 = 
îr‹
;

114 
msg_ps
->
îr‹_ödex
 = 1 + msg_ps->
vb_idx
;

115 
	`¢mp_£nd_ª•⁄£
(
msg_ps
);

116 
	`¢mp_v¨böd_li°_‰ì
(&
msg_ps
->
outvb
);

117 
msg_ps
->
°©e
 = 
SNMP_MSG_EMPTY
;

118 
	}
}

121 
	$¢mp_ok_ª•⁄£
(
¢mp_msg_p°©
 *
msg_ps
)

123 
îr_t
 
îr_ªt
;

125 
îr_ªt
 = 
	`¢mp_£nd_ª•⁄£
(
msg_ps
);

126 i‡(
îr_ªt
 =
ERR_MEM
)

132 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("¢mp_msg_evíà%"
S32_F
"\n",
msg_ps
->
îr‹_°©us
));

135 
	`¢mp_v¨böd_li°_‰ì
(&
msg_ps
->
övb
);

136 
	`¢mp_v¨böd_li°_‰ì
(&
msg_ps
->
outvb
);

137 
msg_ps
->
°©e
 = 
SNMP_MSG_EMPTY
;

138 
	}
}

147 
	$¢mp_msg_gë_evít
(
u8_t
 
ªque°_id
, 
¢mp_msg_p°©
 *
msg_ps
)

149 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("¢mp_msg_gë_evít: msg_ps->°©e==%"
U16_F
"\n",(
u16_t
)
msg_ps
->
°©e
));

151 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_GET_OBJDEF
)

153 
mib_exã∫Æ_node
 *
í
;

154 
¢mp_«me_±r
 
≈
;

157 
í
 = 
msg_ps
->
ext_mib_node
;

158 
≈
 = 
msg_ps
->
ext_«me_±r
;

161 
í
->
	`gë_obje˘_def_a
(
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
, &
msg_ps
->
ext_obje˘_def
);

162 i‡((
msg_ps
->
ext_obje˘_def
.
ö°™˚
 !
MIB_OBJECT_NONE
) &&

163 (
msg_ps
->
ext_obje˘_def
.
ac˚ss
 & 
MIB_ACCESS_READ
))

165 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_GET_VALUE
;

166 
í
->
	`gë_vÆue_q
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
);

170 
í
->
	`gë_obje˘_def_pc
(
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
);

172 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

175 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_GET_VALUE
)

177 
mib_exã∫Æ_node
 *
í
;

178 
¢mp_v¨böd
 *
vb
;

181 
í
 = 
msg_ps
->
ext_mib_node
;

184 
vb
 = (
¢mp_v¨böd
 *)
	`memp_mÆloc
(
MEMP_SNMP_VARBIND
);

185 
	`LWIP_ASSERT
("vb !NULL",
vb
 !
NULL
);

186 i‡(
vb
 !
NULL
)

188 
vb
->
√xt
 = 
NULL
;

189 
vb
->
¥ev
 = 
NULL
;

192 
vb
->
idít
 = 
msg_ps
->
vb_±r
->ident;

193 
vb
->
idít_Àn
 = 
msg_ps
->
vb_±r
->ident_len;

195 
msg_ps
->
vb_±r
->
idít
 = 
NULL
;

196 
msg_ps
->
vb_±r
->
idít_Àn
 = 0;

198 
vb
->
vÆue_ty≥
 = 
msg_ps
->
ext_obje˘_def
.
a¢_ty≥
;

199 
	`LWIP_ASSERT
("övÆidÜígth", 
msg_ps
->
ext_obje˘_def
.
v_Àn
 <= 0xff);

200 
vb
->
vÆue_Àn
 = (
u8_t
)
msg_ps
->
ext_obje˘_def
.
v_Àn
;

201 i‡(
vb
->
vÆue_Àn
 > 0)

203 
	`LWIP_ASSERT
("SNMP_MAX_OCTET_STRING_LEN i†c⁄figuªdÅoÿlow", 
vb
->
vÆue_Àn
 <
SNMP_MAX_VALUE_SIZE
);

204 
vb
->
vÆue
 = 
	`memp_mÆloc
(
MEMP_SNMP_VALUE
);

205 
	`LWIP_ASSERT
("vb->vÆuê!NULL",
vb
->
vÆue
 !
NULL
);

206 i‡(
vb
->
vÆue
 !
NULL
)

208 
í
->
	`gë_vÆue_a
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
, 
vb
->
vÆue_Àn
, vb->
vÆue
);

209 
	`¢mp_v¨böd_èû_add
(&
msg_ps
->
outvb
, 
vb
);

211 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

212 
msg_ps
->
vb_idx
 += 1;

216 
í
->
	`gë_vÆue_pc
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
);

217 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_msg_event:Ço variable space\n"));

218 
msg_ps
->
vb_±r
->
idít
 = 
vb
->ident;

219 
msg_ps
->
vb_±r
->
idít_Àn
 = 
vb
->ident_len;

220 
	`memp_‰ì
(
MEMP_SNMP_VARBIND
, 
vb
);

221 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_TOOBIG
);

227 
í
->
	`gë_vÆue_a
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
, 0, 
NULL
);

228 
vb
->
vÆue
 = 
NULL
;

229 
	`¢mp_v¨böd_èû_add
(&
msg_ps
->
outvb
, 
vb
);

231 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

232 
msg_ps
->
vb_idx
 += 1;

237 
í
->
	`gë_vÆue_pc
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
);

238 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_msg_event:Ço outvb space\n"));

239 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_TOOBIG
);

243 (
msg_ps
->
°©e
 =
SNMP_MSG_SEARCH_OBJ
) &&

244 (
msg_ps
->
vb_idx
 < msg_ps->
övb
.
cou¡
))

246 
mib_node
 *
mn
;

247 
¢mp_«me_±r
 
≈
;

249 i‡(
msg_ps
->
vb_idx
 == 0)

251 
msg_ps
->
vb_±r
 = msg_ps->
övb
.
hód
;

255 
msg_ps
->
vb_±r
 = msg_ps->vb_±r->
√xt
;

258 i‡(
	`¢mp_iso_¥efix_t°
(
msg_ps
->
vb_±r
->
idít_Àn
, msg_ps->vb_±r->
idít
))

260 
mn
 = 
	`¢mp_£¨ch_åì
((
mib_node
*)&
öã∫ë
, 
msg_ps
->
vb_±r
->
idít_Àn
 - 4,

261 
msg_ps
->
vb_±r
->
idít
 + 4, &
≈
);

262 i‡(
mn
 !
NULL
)

264 i‡(
mn
->
node_ty≥
 =
MIB_NODE_EX
)

267 
mib_exã∫Æ_node
 *
í
 = (mib_exã∫Æ_node*)
mn
;

269 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_GET_OBJDEF
;

271 
msg_ps
->
ext_mib_node
 = 
í
;

272 
msg_ps
->
ext_«me_±r
 = 
≈
;

274 
í
->
	`gë_obje˘_def_q
”n->
addr_öf
, 
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
);

279 
obj_def
 
obje˘_def
;

281 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_GET_OBJDEF
;

282 
mn
->
	`gë_obje˘_def
(
≈
.
idít_Àn
,Çp.
idít
, &
obje˘_def
);

283 i‡((
obje˘_def
.
ö°™˚
 !
MIB_OBJECT_NONE
) &&

284 (
obje˘_def
.
ac˚ss
 & 
MIB_ACCESS_READ
))

286 
mn
 = mn;

291 
mn
 = 
NULL
;

293 i‡(
mn
 !
NULL
)

295 
¢mp_v¨böd
 *
vb
;

297 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_GET_VALUE
;

299 
vb
 = (
¢mp_v¨böd
 *)
	`memp_mÆloc
(
MEMP_SNMP_VARBIND
);

300 
	`LWIP_ASSERT
("vb !NULL",
vb
 !
NULL
);

301 i‡(
vb
 !
NULL
)

303 
vb
->
√xt
 = 
NULL
;

304 
vb
->
¥ev
 = 
NULL
;

307 
vb
->
idít
 = 
msg_ps
->
vb_±r
->ident;

308 
vb
->
idít_Àn
 = 
msg_ps
->
vb_±r
->ident_len;

310 
msg_ps
->
vb_±r
->
idít
 = 
NULL
;

311 
msg_ps
->
vb_±r
->
idít_Àn
 = 0;

313 
vb
->
vÆue_ty≥
 = 
obje˘_def
.
a¢_ty≥
;

314 
	`LWIP_ASSERT
("övÆidÜígth", 
obje˘_def
.
v_Àn
 <= 0xff);

315 
vb
->
vÆue_Àn
 = (
u8_t
)
obje˘_def
.
v_Àn
;

316 i‡(
vb
->
vÆue_Àn
 > 0)

318 
	`LWIP_ASSERT
("SNMP_MAX_OCTET_STRING_LEN is configuredÅooÜow",

319 
vb
->
vÆue_Àn
 <
SNMP_MAX_VALUE_SIZE
);

320 
vb
->
vÆue
 = 
	`memp_mÆloc
(
MEMP_SNMP_VALUE
);

321 
	`LWIP_ASSERT
("vb->vÆuê!NULL",
vb
->
vÆue
 !
NULL
);

322 i‡(
vb
->
vÆue
 !
NULL
)

324 
mn
->
	`gë_vÆue
(&
obje˘_def
, 
vb
->
vÆue_Àn
, vb->
vÆue
);

325 
	`¢mp_v¨böd_èû_add
(&
msg_ps
->
outvb
, 
vb
);

326 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

327 
msg_ps
->
vb_idx
 += 1;

331 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_msg_event: couldn'tállocate variable space\n"));

332 
msg_ps
->
vb_±r
->
idít
 = 
vb
->ident;

333 
msg_ps
->
vb_±r
->
idít_Àn
 = 
vb
->ident_len;

334 
	`memp_‰ì
(
MEMP_SNMP_VARBIND
, 
vb
);

335 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_TOOBIG
);

341 
vb
->
vÆue
 = 
NULL
;

342 
	`¢mp_v¨böd_èû_add
(&
msg_ps
->
outvb
, 
vb
);

343 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

344 
msg_ps
->
vb_idx
 += 1;

349 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_msg_event: couldn'tállocate outvb space\n"));

350 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_TOOBIG
);

358 
mn
 = 
NULL
;

360 i‡(
mn
 =
NULL
)

363 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

366 i‡((
msg_ps
->
°©e
 =
SNMP_MSG_SEARCH_OBJ
) &&

367 (
msg_ps
->
vb_idx
 =msg_ps->
övb
.
cou¡
))

369 
	`¢mp_ok_ª•⁄£
(
msg_ps
);

371 
	}
}

380 
	$¢mp_msg_gë√xt_evít
(
u8_t
 
ªque°_id
, 
¢mp_msg_p°©
 *
msg_ps
)

382 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("¢mp_msg_gë√xt_evít: msg_ps->°©e==%"
U16_F
"\n",(
u16_t
)
msg_ps
->
°©e
));

384 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_GET_OBJDEF
)

386 
mib_exã∫Æ_node
 *
í
;

389 
í
 = 
msg_ps
->
ext_mib_node
;

392 
í
->
	`gë_obje˘_def_a
(
ªque°_id
, 1, &
msg_ps
->
ext_oid
.
id
[msg_ps->ext_oid.
Àn
 - 1], &msg_ps->
ext_obje˘_def
);

393 i‡(
msg_ps
->
ext_obje˘_def
.
ö°™˚
 !
MIB_OBJECT_NONE
)

395 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_GET_VALUE
;

396 
í
->
	`gë_vÆue_q
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
);

400 
í
->
	`gë_obje˘_def_pc
(
ªque°_id
, 1, &
msg_ps
->
ext_oid
.
id
[msg_ps->ext_oid.
Àn
 - 1]);

402 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

405 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_GET_VALUE
)

407 
mib_exã∫Æ_node
 *
í
;

408 
¢mp_v¨böd
 *
vb
;

411 
í
 = 
msg_ps
->
ext_mib_node
;

413 
	`LWIP_ASSERT
("övÆidÜígth", 
msg_ps
->
ext_obje˘_def
.
v_Àn
 <= 0xff);

414 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
msg_ps
->
ext_oid
,

415 
msg_ps
->
ext_obje˘_def
.
a¢_ty≥
,

416 (
u8_t
)
msg_ps
->
ext_obje˘_def
.
v_Àn
);

417 i‡(
vb
 !
NULL
)

419 
í
->
	`gë_vÆue_a
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
, 
vb
->
vÆue_Àn
, vb->
vÆue
);

420 
	`¢mp_v¨böd_èû_add
(&
msg_ps
->
outvb
, 
vb
);

421 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

422 
msg_ps
->
vb_idx
 += 1;

426 
í
->
	`gë_vÆue_pc
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
);

427 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_msg_getnext_event: couldn'tállocate outvb space\n"));

428 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_TOOBIG
);

432 (
msg_ps
->
°©e
 =
SNMP_MSG_SEARCH_OBJ
) &&

433 (
msg_ps
->
vb_idx
 < msg_ps->
övb
.
cou¡
))

435 
mib_node
 *
mn
;

436 
¢mp_obj_id
 
oid
;

438 i‡(
msg_ps
->
vb_idx
 == 0)

440 
msg_ps
->
vb_±r
 = msg_ps->
övb
.
hód
;

444 
msg_ps
->
vb_±r
 = msg_ps->vb_±r->
√xt
;

446 i‡(
	`¢mp_iso_¥efix_ex∑nd
(
msg_ps
->
vb_±r
->
idít_Àn
, msg_ps->vb_±r->
idít
, &
oid
))

448 i‡(
msg_ps
->
vb_±r
->
idít_Àn
 > 3)

451 
mn
 = 
	`¢mp_ex∑nd_åì
((
mib_node
*)&
öã∫ë
,

452 
msg_ps
->
vb_±r
->
idít_Àn
 - 4,

453 
msg_ps
->
vb_±r
->
idít
 + 4, &
oid
);

458 
mn
 = 
	`¢mp_ex∑nd_åì
((
mib_node
*)&
öã∫ë
, 0, 
NULL
, &
oid
);

463 
mn
 = 
NULL
;

465 i‡(
mn
 !
NULL
)

467 i‡(
mn
->
node_ty≥
 =
MIB_NODE_EX
)

470 
mib_exã∫Æ_node
 *
í
 = (mib_exã∫Æ_node*)
mn
;

472 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_GET_OBJDEF
;

474 
msg_ps
->
ext_mib_node
 = 
í
;

475 
msg_ps
->
ext_oid
 = 
oid
;

477 
í
->
	`gë_obje˘_def_q
”n->
addr_öf
, 
ªque°_id
, 1, &
oid
.
id
[oid.
Àn
 - 1]);

482 
obj_def
 
obje˘_def
;

483 
¢mp_v¨böd
 *
vb
;

485 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_GET_OBJDEF
;

486 
mn
->
	`gë_obje˘_def
(1, &
oid
.
id
[oid.
Àn
 - 1], &
obje˘_def
);

488 
	`LWIP_ASSERT
("övÆidÜígth", 
obje˘_def
.
v_Àn
 <= 0xff);

489 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
obje˘_def
.
a¢_ty≥
, (
u8_t
)obje˘_def.
v_Àn
);

490 i‡(
vb
 !
NULL
)

492 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_GET_VALUE
;

493 
mn
->
	`gë_vÆue
(&
obje˘_def
, obje˘_def.
v_Àn
, 
vb
->
vÆue
);

494 
	`¢mp_v¨böd_èû_add
(&
msg_ps
->
outvb
, 
vb
);

495 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

496 
msg_ps
->
vb_idx
 += 1;

500 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_recv couldn'tállocate outvb space\n"));

501 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_TOOBIG
);

505 i‡(
mn
 =
NULL
)

508 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

511 i‡((
msg_ps
->
°©e
 =
SNMP_MSG_SEARCH_OBJ
) &&

512 (
msg_ps
->
vb_idx
 =msg_ps->
övb
.
cou¡
))

514 
	`¢mp_ok_ª•⁄£
(
msg_ps
);

516 
	}
}

525 
	$¢mp_msg_£t_evít
(
u8_t
 
ªque°_id
, 
¢mp_msg_p°©
 *
msg_ps
)

527 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("¢mp_msg_£t_evít: msg_ps->°©e==%"
U16_F
"\n",(
u16_t
)
msg_ps
->
°©e
));

529 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_GET_OBJDEF
)

531 
mib_exã∫Æ_node
 *
í
;

532 
¢mp_«me_±r
 
≈
;

535 
í
 = 
msg_ps
->
ext_mib_node
;

536 
≈
 = 
msg_ps
->
ext_«me_±r
;

539 
í
->
	`gë_obje˘_def_a
(
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
, &
msg_ps
->
ext_obje˘_def
);

540 i‡(
msg_ps
->
ext_obje˘_def
.
ö°™˚
 !
MIB_OBJECT_NONE
)

542 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_SET_TEST
;

543 
í
->
	`£t_ã°_q
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
);

547 
í
->
	`gë_obje˘_def_pc
(
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
);

549 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

552 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_SET_TEST
)

554 
mib_exã∫Æ_node
 *
í
;

557 
í
 = 
msg_ps
->
ext_mib_node
;

559 i‡(
msg_ps
->
ext_obje˘_def
.
ac˚ss
 & 
MIB_ACCESS_WRITE
)

561 i‡((
msg_ps
->
ext_obje˘_def
.
a¢_ty≥
 =msg_ps->
vb_±r
->
vÆue_ty≥
) &&

562 (
í
->
	`£t_ã°_a
(
ªque°_id
,&
msg_ps
->
ext_obje˘_def
,

563 
msg_ps
->
vb_±r
->
vÆue_Àn
,msg_ps->vb_±r->
vÆue
) != 0))

565 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

566 
msg_ps
->
vb_idx
 += 1;

570 
í
->
	`£t_ã°_pc
(
ªque°_id
,&
msg_ps
->
ext_obje˘_def
);

572 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_BADVALUE
);

577 
í
->
	`£t_ã°_pc
(
ªque°_id
,&
msg_ps
->
ext_obje˘_def
);

579 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

582 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_GET_OBJDEF_S
)

584 
mib_exã∫Æ_node
 *
í
;

585 
¢mp_«me_±r
 
≈
;

588 
í
 = 
msg_ps
->
ext_mib_node
;

589 
≈
 = 
msg_ps
->
ext_«me_±r
;

592 
í
->
	`gë_obje˘_def_a
(
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
, &
msg_ps
->
ext_obje˘_def
);

593 i‡(
msg_ps
->
ext_obje˘_def
.
ö°™˚
 !
MIB_OBJECT_NONE
)

595 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_SET_VALUE
;

596 
í
->
	`£t_vÆue_q
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
,

597 
msg_ps
->
vb_±r
->
vÆue_Àn
,msg_ps->vb_±r->
vÆue
);

601 
í
->
	`gë_obje˘_def_pc
(
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
);

603 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_GENERROR
);

606 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_SET_VALUE
)

608 
mib_exã∫Æ_node
 *
í
;

611 
í
 = 
msg_ps
->
ext_mib_node
;

612 
í
->
	`£t_vÆue_a
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
,

613 
msg_ps
->
vb_±r
->
vÆue_Àn
, msg_ps->vb_±r->
vÆue
);

616 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_SET_VALUE
;

617 
msg_ps
->
vb_idx
 += 1;

621 (
msg_ps
->
°©e
 =
SNMP_MSG_SEARCH_OBJ
) &&

622 (
msg_ps
->
vb_idx
 < msg_ps->
övb
.
cou¡
))

624 
mib_node
 *
mn
;

625 
¢mp_«me_±r
 
≈
;

627 i‡(
msg_ps
->
vb_idx
 == 0)

629 
msg_ps
->
vb_±r
 = msg_ps->
övb
.
hód
;

633 
msg_ps
->
vb_±r
 = msg_ps->vb_±r->
√xt
;

636 i‡(
	`¢mp_iso_¥efix_t°
(
msg_ps
->
vb_±r
->
idít_Àn
, msg_ps->vb_±r->
idít
))

638 
mn
 = 
	`¢mp_£¨ch_åì
((
mib_node
*)&
öã∫ë
, 
msg_ps
->
vb_±r
->
idít_Àn
 - 4,

639 
msg_ps
->
vb_±r
->
idít
 + 4, &
≈
);

640 i‡(
mn
 !
NULL
)

642 i‡(
mn
->
node_ty≥
 =
MIB_NODE_EX
)

645 
mib_exã∫Æ_node
 *
í
 = (mib_exã∫Æ_node*)
mn
;

647 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_GET_OBJDEF
;

649 
msg_ps
->
ext_mib_node
 = 
í
;

650 
msg_ps
->
ext_«me_±r
 = 
≈
;

652 
í
->
	`gë_obje˘_def_q
”n->
addr_öf
, 
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
);

657 
obj_def
 
obje˘_def
;

659 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_GET_OBJDEF
;

660 
mn
->
	`gë_obje˘_def
(
≈
.
idít_Àn
,Çp.
idít
, &
obje˘_def
);

661 i‡(
obje˘_def
.
ö°™˚
 !
MIB_OBJECT_NONE
)

663 
mn
 = mn;

668 
mn
 = 
NULL
;

670 i‡(
mn
 !
NULL
)

672 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_SET_TEST
;

674 i‡(
obje˘_def
.
ac˚ss
 & 
MIB_ACCESS_WRITE
)

676 i‡((
obje˘_def
.
a¢_ty≥
 =
msg_ps
->
vb_±r
->
vÆue_ty≥
) &&

677 (
mn
->
	`£t_ã°
(&
obje˘_def
,
msg_ps
->
vb_±r
->
vÆue_Àn
,msg_ps->vb_±r->
vÆue
) != 0))

679 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

680 
msg_ps
->
vb_idx
 += 1;

685 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_BADVALUE
);

691 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

699 
mn
 = 
NULL
;

701 i‡(
mn
 =
NULL
)

704 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

708 i‡((
msg_ps
->
°©e
 =
SNMP_MSG_SEARCH_OBJ
) &&

709 (
msg_ps
->
vb_idx
 =msg_ps->
övb
.
cou¡
))

711 
msg_ps
->
vb_idx
 = 0;

712 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_SET_VALUE
;

716 (
msg_ps
->
°©e
 =
SNMP_MSG_INTERNAL_SET_VALUE
) &&

717 (
msg_ps
->
vb_idx
 < msg_ps->
övb
.
cou¡
))

719 
mib_node
 *
mn
;

720 
¢mp_«me_±r
 
≈
;

722 i‡(
msg_ps
->
vb_idx
 == 0)

724 
msg_ps
->
vb_±r
 = msg_ps->
övb
.
hód
;

728 
msg_ps
->
vb_±r
 = msg_ps->vb_±r->
√xt
;

731 
mn
 = 
	`¢mp_£¨ch_åì
((
mib_node
*)&
öã∫ë
, 
msg_ps
->
vb_±r
->
idít_Àn
 - 4,

732 
msg_ps
->
vb_±r
->
idít
 + 4, &
≈
);

735 i‡(
mn
 !
NULL
)

737 i‡(
mn
->
node_ty≥
 =
MIB_NODE_EX
)

740 
mib_exã∫Æ_node
 *
í
 = (mib_exã∫Æ_node*)
mn
;

742 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_GET_OBJDEF_S
;

744 
msg_ps
->
ext_mib_node
 = 
í
;

745 
msg_ps
->
ext_«me_±r
 = 
≈
;

747 
í
->
	`gë_obje˘_def_q
”n->
addr_öf
, 
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
);

752 
obj_def
 
obje˘_def
;

754 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_GET_OBJDEF_S
;

755 
mn
->
	`gë_obje˘_def
(
≈
.
idít_Àn
,Çp.
idít
, &
obje˘_def
);

756 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_SET_VALUE
;

757 
mn
->
	`£t_vÆue
(&
obje˘_def
,
msg_ps
->
vb_±r
->
vÆue_Àn
,msg_ps->vb_±r->
vÆue
);

758 
msg_ps
->
vb_idx
 += 1;

762 i‡((
msg_ps
->
°©e
 =
SNMP_MSG_INTERNAL_SET_VALUE
) &&

763 (
msg_ps
->
vb_idx
 =msg_ps->
övb
.
cou¡
))

768 
msg_ps
->
outvb
 = msg_ps->
övb
;

769 
msg_ps
->
övb
.
hód
 = 
NULL
;

770 
msg_ps
->
övb
.
èû
 = 
NULL
;

771 
msg_ps
->
övb
.
cou¡
 = 0;

772 
	`¢mp_ok_ª•⁄£
(
msg_ps
);

774 
	}
}

784 
	$¢mp_msg_evít
(
u8_t
 
ªque°_id
)

786 
¢mp_msg_p°©
 *
msg_ps
;

788 i‡(
ªque°_id
 < 
SNMP_CONCURRENT_REQUESTS
)

790 
msg_ps
 = &
msg_öput_li°
[
ªque°_id
];

791 i‡(
msg_ps
->
π
 =
SNMP_ASN1_PDU_GET_NEXT_REQ
)

793 
	`¢mp_msg_gë√xt_evít
(
ªque°_id
, 
msg_ps
);

795 i‡(
msg_ps
->
π
 =
SNMP_ASN1_PDU_GET_REQ
)

797 
	`¢mp_msg_gë_evít
(
ªque°_id
, 
msg_ps
);

799 if(
msg_ps
->
π
 =
SNMP_ASN1_PDU_SET_REQ
)

801 
	`¢mp_msg_£t_evít
(
ªque°_id
, 
msg_ps
);

804 
	}
}

809 
	$¢mp_ªcv
(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr_t
 *
addr
, 
u16_t
 
p‹t
)

811 
¢mp_msg_p°©
 *
msg_ps
;

812 
u8_t
 
ªq_idx
;

813 
îr_t
 
îr_ªt
;

814 
u16_t
 
∑ylﬂd_Àn
 = 
p
->
tŸ_Àn
;

815 
u16_t
 
∑ylﬂd_ofs
 = 0;

816 
u16_t
 
v¨böd_ofs
 = 0;

819 
	`LWIP_UNUSED_ARG
(
¨g
);

822 
msg_ps
 = &
msg_öput_li°
[0];

823 
ªq_idx
 = 0;

824 (
ªq_idx
 < 
SNMP_CONCURRENT_REQUESTS
Ë&& (
msg_ps
->
°©e
 !
SNMP_MSG_EMPTY
))

826 
ªq_idx
++;

827 
msg_ps
++;

829 i‡(
ªq_idx
 =
SNMP_CONCURRENT_REQUESTS
)

832 
	`pbuf_‰ì
(
p
);

837 
	`¢mp_öc_¢mpöpkts
();

839 
msg_ps
->
pcb
 =Öcb;

841 
msg_ps
->
sù
 = *
addr
;

843 
msg_ps
->
•
 = 
p‹t
;

846 
îr_ªt
 = 
	`¢mp_pdu_hódî_check
(
p
, 
∑ylﬂd_ofs
, 
∑ylﬂd_Àn
, &
v¨böd_ofs
, 
msg_ps
);

849 i‡((
îr_ªt
 !
ERR_OK
) ||

850 ((
msg_ps
->
π
 !
SNMP_ASN1_PDU_GET_REQ
) &&

851 (
msg_ps
->
π
 !
SNMP_ASN1_PDU_GET_NEXT_REQ
) &&

852 (
msg_ps
->
π
 !
SNMP_ASN1_PDU_SET_REQ
)) ||

853 ((
msg_ps
->
îr‹_°©us
 !
SNMP_ES_NOERROR
) ||

854 (
msg_ps
->
îr‹_ödex
 != 0)) )

857 
	`pbuf_‰ì
(
p
);

858 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_pdu_header_check() failed\n"));

861 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("¢mp_ªcv ok, communôy %s\n", 
msg_ps
->
communôy
));

865 
îr_ªt
 = 
	`¢mp_pdu_dec_v¨bödli°
(
p
, 
v¨böd_ofs
, &v¨böd_ofs, 
msg_ps
);

867 
	`pbuf_‰ì
(
p
);

868 i‡((
îr_ªt
 !
ERR_OK
Ë|| (
msg_ps
->
övb
.
cou¡
 == 0))

873 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_pdu_dec_varbindlist() failed\n"));

877 
msg_ps
->
îr‹_°©us
 = 
SNMP_ES_NOERROR
;

878 
msg_ps
->
îr‹_ödex
 = 0;

880 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

882 
msg_ps
->
vb_idx
 = 0;

884 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("¢mp_ªcv v¨böd c¡=%"
U16_F
"\n",(
u16_t
)
msg_ps
->
övb
.
cou¡
));

887 
	`¢mp_msg_evít
(
ªq_idx
);

888 
	}
}

902 
îr_t


903 
	$¢mp_pdu_hódî_check
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
pdu_Àn
, u16_à*
ofs_ªt
, 
¢mp_msg_p°©
 *
m_°©
)

905 
îr_t
 
dîr
;

906 
u16_t
 
Àn
, 
ofs_ba£
;

907 
u8_t
 
Àn_o˘ës
;

908 
u8_t
 
ty≥
;

909 
s32_t
 
vîsi⁄
;

911 
ofs_ba£
 = 
ofs
;

912 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

913 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

914 i‡((
dîr
 !
ERR_OK
) ||

915 (
pdu_Àn
 !(1 + 
Àn_o˘ës
 + 
Àn
)) ||

916 (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
)))

918 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

919  
ERR_ARG
;

921 
ofs
 +(1 + 
Àn_o˘ës
);

922 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

923 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

924 i‡((
dîr
 !
ERR_OK
Ë|| (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
)))

927 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

928  
ERR_ARG
;

930 
dîr
 = 
	`¢mp_a¢1_dec_s32t
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, &
vîsi⁄
);

931 i‡(
dîr
 !
ERR_OK
)

934 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

935  
ERR_ARG
;

937 i‡(
vîsi⁄
 != 0)

940 
	`¢mp_öc_¢mpöbadvîsi⁄s
();

941  
ERR_ARG
;

943 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

944 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

945 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

946 i‡((
dîr
 !
ERR_OK
Ë|| (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
)))

949 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

950  
ERR_ARG
;

952 
dîr
 = 
	`¢mp_a¢1_dec_øw
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, 
SNMP_COMMUNITY_STR_LEN
, 
m_°©
->
communôy
);

953 i‡(
dîr
 !
ERR_OK
)

955 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

956  
ERR_ARG
;

959 
Àn
 = (÷í < (
SNMP_COMMUNITY_STR_LEN
))?(len):(SNMP_COMMUNITY_STR_LEN));

960 
m_°©
->
communôy
[
Àn
] = 0;

961 
m_°©
->
com_°æí
 = (
u8_t
)
Àn
;

962 i‡(
	`°∫cmp
(
¢mp_publiccommunôy
, (c⁄° *)
m_°©
->
communôy
, 
SNMP_COMMUNITY_STR_LEN
) != 0)

965 
	`¢mp_öc_¢mpöbadcommunôy«mes
();

966 
	`¢mp_authÁû_å≠
();

967  
ERR_ARG
;

969 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

970 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

971 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

972 i‡(
dîr
 !
ERR_OK
)

974 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

975  
ERR_ARG
;

977 
ty≥
)

979 (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_GET_REQ
):

981 
	`¢mp_öc_¢mpögëªque°s
();

982 
dîr
 = 
ERR_OK
;

984 (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_GET_NEXT_REQ
):

986 
	`¢mp_öc_¢mpögë√xts
();

987 
dîr
 = 
ERR_OK
;

989 (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_GET_RESP
):

991 
	`¢mp_öc_¢mpögëª•⁄£s
();

992 
dîr
 = 
ERR_ARG
;

994 (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_SET_REQ
):

996 
	`¢mp_öc_¢mpö£åeque°s
();

997 
dîr
 = 
ERR_OK
;

999 (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_TRAP
):

1001 
	`¢mp_öc_¢mpöå≠s
();

1002 
dîr
 = 
ERR_ARG
;

1005 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1006 
dîr
 = 
ERR_ARG
;

1009 i‡(
dîr
 !
ERR_OK
)

1012  
ERR_ARG
;

1014 
m_°©
->
π
 = 
ty≥
 & 0x1F;

1015 
ofs
 +(1 + 
Àn_o˘ës
);

1016 i‡(
Àn
 !(
pdu_Àn
 - (
ofs
 - 
ofs_ba£
)))

1019 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1020  
ERR_ARG
;

1022 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1023 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

1024 i‡((
dîr
 !
ERR_OK
Ë|| (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
)))

1027 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1028  
ERR_ARG
;

1030 
dîr
 = 
	`¢mp_a¢1_dec_s32t
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, &
m_°©
->
rid
);

1031 i‡(
dîr
 !
ERR_OK
)

1034 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1035  
ERR_ARG
;

1037 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

1038 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1039 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

1040 i‡((
dîr
 !
ERR_OK
Ë|| (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
)))

1043 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1044  
ERR_ARG
;

1048 
dîr
 = 
	`¢mp_a¢1_dec_s32t
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, &
m_°©
->
îr‹_°©us
);

1049 i‡(
dîr
 !
ERR_OK
)

1052 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1053  
ERR_ARG
;

1055 
m_°©
->
îr‹_°©us
)

1057 
SNMP_ES_TOOBIG
:

1058 
	`¢mp_öc_¢mpötoobigs
();

1060 
SNMP_ES_NOSUCHNAME
:

1061 
	`¢mp_öc_¢mpönosuch«mes
();

1063 
SNMP_ES_BADVALUE
:

1064 
	`¢mp_öc_¢mpöbadvÆues
();

1066 
SNMP_ES_READONLY
:

1067 
	`¢mp_öc_¢mpöªad⁄lys
();

1069 
SNMP_ES_GENERROR
:

1070 
	`¢mp_öc_¢mpögíîrs
();

1073 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

1074 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1075 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

1076 i‡((
dîr
 !
ERR_OK
Ë|| (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
)))

1079 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1080  
ERR_ARG
;

1084 
dîr
 = 
	`¢mp_a¢1_dec_s32t
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, &
m_°©
->
îr‹_ödex
);

1085 i‡(
dîr
 !
ERR_OK
)

1088 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1089  
ERR_ARG
;

1091 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

1092 *
ofs_ªt
 = 
ofs
;

1093  
ERR_OK
;

1094 
	}
}

1096 
îr_t


1097 
	$¢mp_pdu_dec_v¨bödli°
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à*
ofs_ªt
, 
¢mp_msg_p°©
 *
m_°©
)

1099 
îr_t
 
dîr
;

1100 
u16_t
 
Àn
, 
vb_Àn
;

1101 
u8_t
 
Àn_o˘ës
;

1102 
u8_t
 
ty≥
;

1105 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1106 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
vb_Àn
);

1107 i‡((
dîr
 !
ERR_OK
) ||

1108 (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
)))

1110 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1111  
ERR_ARG
;

1113 
ofs
 +(1 + 
Àn_o˘ës
);

1116 
m_°©
->
övb
.
cou¡
 = 0;

1117 
m_°©
->
övb
.
hód
 = 
NULL
;

1118 
m_°©
->
övb
.
èû
 = 
NULL
;

1120 
vb_Àn
 > 0)

1122 
¢mp_obj_id
 
oid
, 
oid_vÆue
;

1123 
¢mp_v¨böd
 *
vb
;

1125 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1126 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

1127 i‡((
dîr
 !
ERR_OK
) ||

1128 (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
)) ||

1129 (
Àn
 =0Ë|| (À¿> 
vb_Àn
))

1131 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1133 
	`¢mp_v¨böd_li°_‰ì
(&
m_°©
->
övb
);

1134  
ERR_ARG
;

1136 
ofs
 +(1 + 
Àn_o˘ës
);

1137 
vb_Àn
 -(1 + 
Àn_o˘ës
);

1139 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1140 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

1141 i‡((
dîr
 !
ERR_OK
Ë|| (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
)))

1144 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1146 
	`¢mp_v¨böd_li°_‰ì
(&
m_°©
->
övb
);

1147  
ERR_ARG
;

1149 
dîr
 = 
	`¢mp_a¢1_dec_oid
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, &
oid
);

1150 i‡(
dîr
 !
ERR_OK
)

1153 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1155 
	`¢mp_v¨böd_li°_‰ì
(&
m_°©
->
övb
);

1156  
ERR_ARG
;

1158 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

1159 
vb_Àn
 -(1 + 
Àn_o˘ës
 + 
Àn
);

1161 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1162 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

1163 i‡(
dîr
 !
ERR_OK
)

1166 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1168 
	`¢mp_v¨böd_li°_‰ì
(&
m_°©
->
övb
);

1169  
ERR_ARG
;

1172 
ty≥
)

1174 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
):

1175 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
ty≥
, (
s32_t
));

1176 i‡(
vb
 !
NULL
)

1178 
s32_t
 *
v±r
 = (s32_t*)
vb
->
vÆue
;

1180 
dîr
 = 
	`¢mp_a¢1_dec_s32t
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, 
v±r
);

1181 
	`¢mp_v¨böd_èû_add
(&
m_°©
->
övb
, 
vb
);

1185 
dîr
 = 
ERR_ARG
;

1188 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
):

1189 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_GAUGE
):

1190 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_TIMETICKS
):

1191 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
ty≥
, (
u32_t
));

1192 i‡(
vb
 !
NULL
)

1194 
u32_t
 *
v±r
 = (u32_t*)
vb
->
vÆue
;

1196 
dîr
 = 
	`¢mp_a¢1_dec_u32t
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, 
v±r
);

1197 
	`¢mp_v¨böd_èû_add
(&
m_°©
->
övb
, 
vb
);

1201 
dîr
 = 
ERR_ARG
;

1204 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
):

1205 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OPAQUE
):

1206 
	`LWIP_ASSERT
("övÆidÜígth", 
Àn
 <= 0xff);

1207 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
ty≥
, (
u8_t
)
Àn
);

1208 i‡(
vb
 !
NULL
)

1210 
dîr
 = 
	`¢mp_a¢1_dec_øw
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, 
vb
->
vÆue_Àn
, (
u8_t
*)vb->
vÆue
);

1211 
	`¢mp_v¨böd_èû_add
(&
m_°©
->
övb
, 
vb
);

1215 
dîr
 = 
ERR_ARG
;

1218 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_NUL
):

1219 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
ty≥
, 0);

1220 i‡(
vb
 !
NULL
)

1222 
	`¢mp_v¨böd_èû_add
(&
m_°©
->
övb
, 
vb
);

1223 
dîr
 = 
ERR_OK
;

1227 
dîr
 = 
ERR_ARG
;

1230 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
):

1231 
dîr
 = 
	`¢mp_a¢1_dec_oid
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, &
oid_vÆue
);

1232 i‡(
dîr
 =
ERR_OK
)

1234 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
ty≥
, 
oid_vÆue
.
Àn
 * (
s32_t
));

1235 i‡(
vb
 !
NULL
)

1237 
u8_t
 
i
 = 
oid_vÆue
.
Àn
;

1238 
s32_t
 *
v±r
 = (s32_t*)
vb
->
vÆue
;

1240 
i
 > 0)

1242 
i
--;

1243 
v±r
[
i
] = 
oid_vÆue
.
id
[i];

1245 
	`¢mp_v¨böd_èû_add
(&
m_°©
->
övb
, 
vb
);

1246 
dîr
 = 
ERR_OK
;

1250 
dîr
 = 
ERR_ARG
;

1254 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
):

1255 i‡(
Àn
 == 4)

1258 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
ty≥
, 4);

1259 i‡(
vb
 !
NULL
)

1261 
dîr
 = 
	`¢mp_a¢1_dec_øw
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, 
vb
->
vÆue_Àn
, (
u8_t
*)vb->
vÆue
);

1262 
	`¢mp_v¨böd_èû_add
(&
m_°©
->
övb
, 
vb
);

1266 
dîr
 = 
ERR_ARG
;

1271 
dîr
 = 
ERR_ARG
;

1275 
dîr
 = 
ERR_ARG
;

1278 i‡(
dîr
 !
ERR_OK
)

1280 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1282 
	`¢mp_v¨böd_li°_‰ì
(&
m_°©
->
övb
);

1283  
ERR_ARG
;

1285 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

1286 
vb_Àn
 -(1 + 
Àn_o˘ës
 + 
Àn
);

1289 i‡(
m_°©
->
π
 =
SNMP_ASN1_PDU_SET_REQ
)

1291 
	`¢mp_add_¢mpötŸÆ£tv¨s
(
m_°©
->
övb
.
cou¡
);

1295 
	`¢mp_add_¢mpötŸÆªqv¨s
(
m_°©
->
övb
.
cou¡
);

1298 *
ofs_ªt
 = 
ofs
;

1299  
ERR_OK
;

1300 
	}
}

1302 
¢mp_v¨böd
*

1303 
	$¢mp_v¨böd_Æloc
(
¢mp_obj_id
 *
oid
, 
u8_t
 
ty≥
, u8_à
Àn
)

1305 
¢mp_v¨böd
 *
vb
;

1307 
vb
 = (
¢mp_v¨böd
 *)
	`memp_mÆloc
(
MEMP_SNMP_VARBIND
);

1308 
	`LWIP_ASSERT
("vb !NULL",
vb
 !
NULL
);

1309 i‡(
vb
 !
NULL
)

1311 
u8_t
 
i
;

1313 
vb
->
√xt
 = 
NULL
;

1314 
vb
->
¥ev
 = 
NULL
;

1315 
i
 = 
oid
->
Àn
;

1316 
vb
->
idít_Àn
 = 
i
;

1317 i‡(
i
 > 0)

1319 
	`LWIP_ASSERT
("SNMP_MAX_TREE_DEPTH i†c⁄figuªdÅoÿlow", 
i
 <
SNMP_MAX_TREE_DEPTH
);

1321 
vb
->
idít
 = (
s32_t
*)
	`memp_mÆloc
(
MEMP_SNMP_VALUE
);

1322 
	`LWIP_ASSERT
("vb->idíà!NULL",
vb
->
idít
 !
NULL
);

1323 i‡(
vb
->
idít
 =
NULL
)

1325 
	`memp_‰ì
(
MEMP_SNMP_VARBIND
, 
vb
);

1326  
NULL
;

1328 
i
 > 0)

1330 
i
--;

1331 
vb
->
idít
[
i
] = 
oid
->
id
[i];

1337 
vb
->
idít
 = 
NULL
;

1339 
vb
->
vÆue_ty≥
 = 
ty≥
;

1340 
vb
->
vÆue_Àn
 = 
Àn
;

1341 i‡(
Àn
 > 0)

1343 
	`LWIP_ASSERT
("SNMP_MAX_OCTET_STRING_LEN i†c⁄figuªdÅoÿlow", 
vb
->
vÆue_Àn
 <
SNMP_MAX_VALUE_SIZE
);

1345 
vb
->
vÆue
 = 
	`memp_mÆloc
(
MEMP_SNMP_VALUE
);

1346 
	`LWIP_ASSERT
("vb->vÆuê!NULL",
vb
->
vÆue
 !
NULL
);

1347 i‡(
vb
->
vÆue
 =
NULL
)

1349 i‡(
vb
->
idít
 !
NULL
)

1351 
	`memp_‰ì
(
MEMP_SNMP_VALUE
, 
vb
->
idít
);

1353 
	`memp_‰ì
(
MEMP_SNMP_VARBIND
, 
vb
);

1354  
NULL
;

1360 
vb
->
vÆue
 = 
NULL
;

1363  
vb
;

1364 
	}
}

1367 
	$¢mp_v¨böd_‰ì
(
¢mp_v¨böd
 *
vb
)

1369 i‡(
vb
->
vÆue
 !
NULL
 )

1371 
	`memp_‰ì
(
MEMP_SNMP_VALUE
, 
vb
->
vÆue
);

1373 i‡(
vb
->
idít
 !
NULL
 )

1375 
	`memp_‰ì
(
MEMP_SNMP_VALUE
, 
vb
->
idít
);

1377 
	`memp_‰ì
(
MEMP_SNMP_VARBIND
, 
vb
);

1378 
	}
}

1381 
	$¢mp_v¨böd_li°_‰ì
(
¢mp_v¨böd_roŸ
 *
roŸ
)

1383 
¢mp_v¨böd
 *
vb
, *
¥ev
;

1385 
vb
 = 
roŸ
->
èû
;

1386  
vb
 !
NULL
 )

1388 
¥ev
 = 
vb
->prev;

1389 
	`¢mp_v¨böd_‰ì
(
vb
);

1390 
vb
 = 
¥ev
;

1392 
roŸ
->
cou¡
 = 0;

1393 
roŸ
->
hód
 = 
NULL
;

1394 
roŸ
->
èû
 = 
NULL
;

1395 
	}
}

1398 
	$¢mp_v¨böd_èû_add
(
¢mp_v¨böd_roŸ
 *
roŸ
, 
¢mp_v¨böd
 *
vb
)

1400 i‡(
roŸ
->
cou¡
 == 0)

1403 
roŸ
->
hód
 = 
vb
;

1404 
roŸ
->
èû
 = 
vb
;

1409 
roŸ
->
èû
->
√xt
 = 
vb
;

1410 
vb
->
¥ev
 = 
roŸ
->
èû
;

1411 
roŸ
->
èû
 = 
vb
;

1413 
roŸ
->
cou¡
 += 1;

1414 
	}
}

1416 
¢mp_v¨böd
*

1417 
	$¢mp_v¨böd_èû_ªmove
(
¢mp_v¨böd_roŸ
 *
roŸ
)

1419 
¢mp_v¨böd
* 
vb
;

1421 i‡(
roŸ
->
cou¡
 > 0)

1424 
vb
 = 
roŸ
->
èû
;

1425 
roŸ
->
èû
 = 
vb
->
¥ev
;

1426 
vb
->
¥ev
->
√xt
 = 
NULL
;

1427 
roŸ
->
cou¡
 -= 1;

1432 
vb
 = 
NULL
;

1434  
vb
;

1435 
	}
}

	@core/snmp/msg_out.c

45 
	~"lwù/›t.h
"

47 #i‡
LWIP_SNMP


49 
	~"lwù/udp.h
"

50 
	~"lwù/√tif.h
"

51 
	~"lwù/¢mp.h
"

52 
	~"lwù/¢mp_a¢1.h
"

53 
	~"lwù/¢mp_msg.h
"

55 
	s¢mp_å≠_d°


58 
ù_addr_t
 
	mdù
;

60 
u8_t
 
	míabÀ
;

62 
¢mp_å≠_d°
 
	gå≠_d°
[
SNMP_TRAP_DESTINATIONS
];

65 
¢mp_msg_å≠
 
	gå≠_msg
;

67 
u16_t
 
¢mp_ª•_hódî_sum
(
¢mp_msg_p°©
 *
m_°©
, u16_à
vb_Àn
);

68 
u16_t
 
¢mp_å≠_hódî_sum
(
¢mp_msg_å≠
 *
m_å≠
, u16_à
vb_Àn
);

69 
u16_t
 
¢mp_v¨böd_li°_sum
(
¢mp_v¨böd_roŸ
 *
roŸ
);

71 
u16_t
 
¢mp_ª•_hódî_íc
(
¢mp_msg_p°©
 *
m_°©
, 
pbuf
 *
p
);

72 
u16_t
 
¢mp_å≠_hódî_íc
(
¢mp_msg_å≠
 *
m_å≠
, 
pbuf
 *
p
);

73 
u16_t
 
¢mp_v¨böd_li°_íc
(
¢mp_v¨böd_roŸ
 *
roŸ
, 
pbuf
 *
p
, u16_à
ofs
);

81 
	$¢mp_å≠_d°_íabÀ
(
u8_t
 
d°_idx
, u8_à
íabÀ
)

83 i‡(
d°_idx
 < 
SNMP_TRAP_DESTINATIONS
)

85 
å≠_d°
[
d°_idx
].
íabÀ
 =Énable;

87 
	}
}

95 
	$¢mp_å≠_d°_ù_£t
(
u8_t
 
d°_idx
, 
ù_addr_t
 *
d°
)

97 i‡(
d°_idx
 < 
SNMP_TRAP_DESTINATIONS
)

99 
	`ù_addr_£t
(&
å≠_d°
[
d°_idx
].
dù
, 
d°
);

101 
	}
}

112 
îr_t


113 
	$¢mp_£nd_ª•⁄£
(
¢mp_msg_p°©
 *
m_°©
)

115 
¢mp_v¨böd_roŸ
 
em±yvb
 = {
NULL
, NULL, 0, 0, 0};

116 
pbuf
 *
p
;

117 
u16_t
 
tŸ_Àn
;

118 
îr_t
 
îr
;

121 
tŸ_Àn
 = 
	`¢mp_v¨böd_li°_sum
(&
m_°©
->
outvb
);

122 
tŸ_Àn
 = 
	`¢mp_ª•_hódî_sum
(
m_°©
,Åot_len);

125 
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
tŸ_Àn
, 
PBUF_POOL
);

126 i‡(
p
 =
NULL
)

128 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_snd_response()ÅooBig\n"));

131 
m_°©
->
îr‹_°©us
 = 
SNMP_ES_TOOBIG
;

132 
m_°©
->
îr‹_ödex
 = 0;

134 
tŸ_Àn
 = 
	`¢mp_v¨böd_li°_sum
(&
em±yvb
);

135 
tŸ_Àn
 = 
	`¢mp_ª•_hódî_sum
(
m_°©
,Åot_len);

137 
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
tŸ_Àn
, 
PBUF_POOL
);

139 i‡(
p
 !
NULL
)

142 
u16_t
 
ofs
;

144 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_snd_response()Ö != NULL\n"));

147 
ofs
 = 
	`¢mp_ª•_hódî_íc
(
m_°©
, 
p
);

148 i‡(
m_°©
->
îr‹_°©us
 =
SNMP_ES_TOOBIG
)

150 
	`¢mp_v¨böd_li°_íc
(&
em±yvb
, 
p
, 
ofs
);

154 
	`¢mp_v¨böd_li°_íc
(&
m_°©
->
outvb
, 
p
, 
ofs
);

157 
m_°©
->
îr‹_°©us
)

159 
SNMP_ES_TOOBIG
:

160 
	`¢mp_öc_¢mpouâoobigs
();

162 
SNMP_ES_NOSUCHNAME
:

163 
	`¢mp_öc_¢mpouäosuch«mes
();

165 
SNMP_ES_BADVALUE
:

166 
	`¢mp_öc_¢mpoutbadvÆues
();

168 
SNMP_ES_GENERROR
:

169 
	`¢mp_öc_¢mpoutgíîrs
();

172 
	`¢mp_öc_¢mpoutgëª•⁄£s
();

173 
	`¢mp_öc_¢mpouçkts
();

177 
	`udp_c⁄√˘
(
m_°©
->
pcb
, &m_°©->
sù
, m_°©->
•
);

178 
îr
 = 
	`udp_£nd
(
m_°©
->
pcb
, 
p
);

179 i‡(
îr
 =
ERR_MEM
)

182 
îr
 = 
ERR_MEM
;

186 
îr
 = 
ERR_OK
;

189 
	`udp_disc⁄√˘
(
m_°©
->
pcb
);

191 
	`pbuf_‰ì
(
p
);

192 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_snd_response() done\n"));

193  
îr
;

199  
ERR_MEM
;

201 
	}
}

219 
îr_t


220 
	$¢mp_£nd_å≠
(
s8_t
 
gíîic_å≠
, 
¢mp_obj_id
 *
eoid
, 
s32_t
 
•ecific_å≠
)

222 
¢mp_å≠_d°
 *
td
;

223 
√tif
 *
d°_if
;

224 
ù_addr_t
 
d°_ù
;

225 
pbuf
 *
p
;

226 
u16_t
 
i
,
tŸ_Àn
;

228 
i
=0, 
td
 = &
å≠_d°
[0]; i<
SNMP_TRAP_DESTINATIONS
; i++,Åd++)

230 i‡((
td
->
íabÀ
 !0Ë&& !
	`ù_addr_ißny
(&td->
dù
))

233 
	`ù_addr_c›y
(
å≠_msg
.
dù
, 
td
->dip);

235 
d°_if
 = 
	`ù_rouã
(&
td
->
dù
);

236 
	`ù_addr_c›y
(
d°_ù
, 
d°_if
->
ù_addr
);

238 
å≠_msg
.
sù_øw
[0] = 
	`ù4_addr1
(&
d°_ù
);

239 
å≠_msg
.
sù_øw
[1] = 
	`ù4_addr2
(&
d°_ù
);

240 
å≠_msg
.
sù_øw
[2] = 
	`ù4_addr3
(&
d°_ù
);

241 
å≠_msg
.
sù_øw
[3] = 
	`ù4_addr4
(&
d°_ù
);

242 
å≠_msg
.
gí_å≠
 = 
gíîic_å≠
;

243 
å≠_msg
.
•c_å≠
 = 
•ecific_å≠
;

244 i‡(
gíîic_å≠
 =
SNMP_GENTRAP_ENTERPRISESPC
)

247 
å≠_msg
.
íãΩri£
 = 
eoid
;

252 
	`¢mp_gë_¢mpgΩid_±r
(&
å≠_msg
.
íãΩri£
);

254 
	`¢mp_gë_sysu±ime
(&
å≠_msg
.
ts
);

257 
tŸ_Àn
 = 
	`¢mp_v¨böd_li°_sum
(&
å≠_msg
.
outvb
);

258 
tŸ_Àn
 = 
	`¢mp_å≠_hódî_sum
(&
å≠_msg
,Åot_len);

261 
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
tŸ_Àn
, 
PBUF_POOL
);

262 i‡(
p
 !
NULL
)

264 
u16_t
 
ofs
;

267 
ofs
 = 
	`¢mp_å≠_hódî_íc
(&
å≠_msg
, 
p
);

268 
	`¢mp_v¨böd_li°_íc
(&
å≠_msg
.
outvb
, 
p
, 
ofs
);

270 
	`¢mp_öc_¢mpouâøps
();

271 
	`¢mp_öc_¢mpouçkts
();

274 
	`udp_£ndto
(
å≠_msg
.
pcb
, 
p
, &å≠_msg.
dù
, 
SNMP_TRAP_PORT
);

276 
	`pbuf_‰ì
(
p
);

280  
ERR_MEM
;

284  
ERR_OK
;

285 
	}
}

288 
	$¢mp_cﬁd°¨t_å≠
()

290 
å≠_msg
.
outvb
.
hód
 = 
NULL
;

291 
å≠_msg
.
outvb
.
èû
 = 
NULL
;

292 
å≠_msg
.
outvb
.
cou¡
 = 0;

293 
	`¢mp_£nd_å≠
(
SNMP_GENTRAP_COLDSTART
, 
NULL
, 0);

294 
	}
}

297 
	$¢mp_authÁû_å≠
()

299 
u8_t
 
íabÀ
;

300 
	`¢mp_gë_¢m≥«bÀauthíå≠s
(&
íabÀ
);

301 i‡(
íabÀ
 == 1)

303 
å≠_msg
.
outvb
.
hód
 = 
NULL
;

304 
å≠_msg
.
outvb
.
èû
 = 
NULL
;

305 
å≠_msg
.
outvb
.
cou¡
 = 0;

306 
	`¢mp_£nd_å≠
(
SNMP_GENTRAP_AUTHFAIL
, 
NULL
, 0);

308 
	}
}

318 
u16_t


319 
	$¢mp_ª•_hódî_sum
(
¢mp_msg_p°©
 *
m_°©
, 
u16_t
 
vb_Àn
)

321 
u16_t
 
tŸ_Àn
;

322 
¢mp_ª•_hódî_Àngths
 *
rhl
;

324 
rhl
 = &
m_°©
->rhl;

325 
tŸ_Àn
 = 
vb_Àn
;

326 
	`¢mp_a¢1_íc_s32t_˙t
(
m_°©
->
îr‹_ödex
, &
rhl
->
îridxÀn
);

327 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
îridxÀn
, &rhl->
îridxÀ∆í
);

328 
tŸ_Àn
 +1 + 
rhl
->
îridxÀ∆í
 +Ñhl->
îridxÀn
;

330 
	`¢mp_a¢1_íc_s32t_˙t
(
m_°©
->
îr‹_°©us
, &
rhl
->
îr°©Àn
);

331 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
îr°©Àn
, &rhl->
îr°©À∆í
);

332 
tŸ_Àn
 +1 + 
rhl
->
îr°©À∆í
 +Ñhl->
îr°©Àn
;

334 
	`¢mp_a¢1_íc_s32t_˙t
(
m_°©
->
rid
, &
rhl
->
ridÀn
);

335 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
ridÀn
, &rhl->
ridÀ∆í
);

336 
tŸ_Àn
 +1 + 
rhl
->
ridÀ∆í
 +Ñhl->
ridÀn
;

338 
rhl
->
pduÀn
 = 
tŸ_Àn
;

339 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
pduÀn
, &rhl->
pduÀ∆í
);

340 
tŸ_Àn
 +1 + 
rhl
->
pduÀ∆í
;

342 
rhl
->
comÀn
 = 
m_°©
->
com_°æí
;

343 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
comÀn
, &rhl->
comÀ∆í
);

344 
tŸ_Àn
 +1 + 
rhl
->
comÀ∆í
 +Ñhl->
comÀn
;

346 
	`¢mp_a¢1_íc_s32t_˙t
(
¢mp_vîsi⁄
, &
rhl
->
vîÀn
);

347 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
vîÀn
, &rhl->
vîÀ∆í
);

348 
tŸ_Àn
 +1 + 
rhl
->
vîÀn
 +Ñhl->
vîÀ∆í
;

350 
rhl
->
£qÀn
 = 
tŸ_Àn
;

351 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
£qÀn
, &rhl->
£qÀ∆í
);

352 
tŸ_Àn
 +1 + 
rhl
->
£qÀ∆í
;

354  
tŸ_Àn
;

355 
	}
}

365 
u16_t


366 
	$¢mp_å≠_hódî_sum
(
¢mp_msg_å≠
 *
m_å≠
, 
u16_t
 
vb_Àn
)

368 
u16_t
 
tŸ_Àn
;

369 
¢mp_å≠_hódî_Àngths
 *
thl
;

371 
thl
 = &
m_å≠
->thl;

372 
tŸ_Àn
 = 
vb_Àn
;

374 
	`¢mp_a¢1_íc_u32t_˙t
(
m_å≠
->
ts
, &
thl
->
t¶í
);

375 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
t¶í
, &thl->
t¶íÀn
);

376 
tŸ_Àn
 +1 + 
thl
->
t¶í
 +Åhl->
t¶íÀn
;

378 
	`¢mp_a¢1_íc_s32t_˙t
(
m_å≠
->
•c_å≠
, &
thl
->
°ΩÀn
);

379 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
°ΩÀn
, &thl->
°ΩÀ∆í
);

380 
tŸ_Àn
 +1 + 
thl
->
°ΩÀn
 +Åhl->
°ΩÀ∆í
;

382 
	`¢mp_a¢1_íc_s32t_˙t
(
m_å≠
->
gí_å≠
, &
thl
->
gå∂í
);

383 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
gå∂í
, &thl->
gå∂íÀn
);

384 
tŸ_Àn
 +1 + 
thl
->
gå∂í
 +Åhl->
gå∂íÀn
;

386 
thl
->
Øddæí
 = 4;

387 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
Øddæí
, &thl->
ØddæíÀn
);

388 
tŸ_Àn
 +1 + 
thl
->
Øddæí
 +Åhl->
ØddæíÀn
;

390 
	`¢mp_a¢1_íc_oid_˙t
(
m_å≠
->
íãΩri£
->
Àn
, &m_å≠->íãΩri£->
id
[0], &
thl
->
eidÀn
);

391 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
eidÀn
, &thl->
eidÀ∆í
);

392 
tŸ_Àn
 +1 + 
thl
->
eidÀn
 +Åhl->
eidÀ∆í
;

394 
thl
->
pduÀn
 = 
tŸ_Àn
;

395 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
pduÀn
, &thl->
pduÀ∆í
);

396 
tŸ_Àn
 +1 + 
thl
->
pduÀ∆í
;

398 
thl
->
comÀn
 = (
¢mp_publiccommunôy
) - 1;

399 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
comÀn
, &thl->
comÀ∆í
);

400 
tŸ_Àn
 +1 + 
thl
->
comÀ∆í
 +Åhl->
comÀn
;

402 
	`¢mp_a¢1_íc_s32t_˙t
(
¢mp_vîsi⁄
, &
thl
->
vîÀn
);

403 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
vîÀn
, &thl->
vîÀ∆í
);

404 
tŸ_Àn
 +1 + 
thl
->
vîÀn
 +Åhl->
vîÀ∆í
;

406 
thl
->
£qÀn
 = 
tŸ_Àn
;

407 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
£qÀn
, &thl->
£qÀ∆í
);

408 
tŸ_Àn
 +1 + 
thl
->
£qÀ∆í
;

410  
tŸ_Àn
;

411 
	}
}

420 
u16_t


421 
	$¢mp_v¨böd_li°_sum
(
¢mp_v¨böd_roŸ
 *
roŸ
)

423 
¢mp_v¨böd
 *
vb
;

424 
u32_t
 *
uöt_±r
;

425 
s32_t
 *
söt_±r
;

426 
u16_t
 
tŸ_Àn
;

428 
tŸ_Àn
 = 0;

429 
vb
 = 
roŸ
->
èû
;

430  
vb
 !
NULL
 )

433 
vb
->
vÆue_ty≥
)

435 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
):

436 
söt_±r
 = (
s32_t
*)
vb
->
vÆue
;

437 
	`¢mp_a¢1_íc_s32t_˙t
(*
söt_±r
, &
vb
->
vÀn
);

439 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
):

440 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_GAUGE
):

441 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_TIMETICKS
):

442 
uöt_±r
 = (
u32_t
*)
vb
->
vÆue
;

443 
	`¢mp_a¢1_íc_u32t_˙t
(*
uöt_±r
, &
vb
->
vÀn
);

445 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
):

446 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_NUL
):

447 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
):

448 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OPAQUE
):

449 
vb
->
vÀn
 = vb->
vÆue_Àn
;

451 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
):

452 
söt_±r
 = (
s32_t
*)
vb
->
vÆue
;

453 
	`¢mp_a¢1_íc_oid_˙t
(
vb
->
vÆue_Àn
 / (
s32_t
), 
söt_±r
, &vb->
vÀn
);

457 
vb
->
vÀn
 = 0;

461 
	`¢mp_a¢1_íc_Àngth_˙t
(
vb
->
vÀn
, &vb->
vÀ∆í
);

462 
	`¢mp_a¢1_íc_oid_˙t
(
vb
->
idít_Àn
, vb->
idít
, &vb->
ﬁí
);

463 
	`¢mp_a¢1_íc_Àngth_˙t
(
vb
->
ﬁí
, &vb->
ﬁíÀn
);

465 
vb
->
£qÀn
 = 1 + vb->
vÀ∆í
 + vb->
vÀn
;

466 
vb
->
£qÀn
 +1 + vb->
ﬁíÀn
 + vb->
ﬁí
;

467 
	`¢mp_a¢1_íc_Àngth_˙t
(
vb
->
£qÀn
, &vb->
£qÀ∆í
);

470 
tŸ_Àn
 +1 + 
vb
->
£qÀ∆í
 + vb->
£qÀn
;

472 
vb
 = vb->
¥ev
;

476 
roŸ
->
£qÀn
 = 
tŸ_Àn
;

477 
	`¢mp_a¢1_íc_Àngth_˙t
(
roŸ
->
£qÀn
, &roŸ->
£qÀ∆í
);

478 
tŸ_Àn
 +1 + 
roŸ
->
£qÀ∆í
;

480  
tŸ_Àn
;

481 
	}
}

486 
u16_t


487 
	$¢mp_ª•_hódî_íc
(
¢mp_msg_p°©
 *
m_°©
, 
pbuf
 *
p
)

489 
u16_t
 
ofs
;

491 
ofs
 = 0;

492 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
));

493 
ofs
 += 1;

494 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
£qÀn
);

495 
ofs
 +
m_°©
->
rhl
.
£qÀ∆í
;

497 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

498 
ofs
 += 1;

499 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
vîÀn
);

500 
ofs
 +
m_°©
->
rhl
.
vîÀ∆í
;

501 
	`¢mp_a¢1_íc_s32t
(
p
, 
ofs
, 
m_°©
->
rhl
.
vîÀn
, 
¢mp_vîsi⁄
);

502 
ofs
 +
m_°©
->
rhl
.
vîÀn
;

504 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
));

505 
ofs
 += 1;

506 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
comÀn
);

507 
ofs
 +
m_°©
->
rhl
.
comÀ∆í
;

508 
	`¢mp_a¢1_íc_øw
(
p
, 
ofs
, 
m_°©
->
rhl
.
comÀn
, m_°©->
communôy
);

509 
ofs
 +
m_°©
->
rhl
.
comÀn
;

511 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_GET_RESP
));

512 
ofs
 += 1;

513 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
pduÀn
);

514 
ofs
 +
m_°©
->
rhl
.
pduÀ∆í
;

516 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

517 
ofs
 += 1;

518 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
ridÀn
);

519 
ofs
 +
m_°©
->
rhl
.
ridÀ∆í
;

520 
	`¢mp_a¢1_íc_s32t
(
p
, 
ofs
, 
m_°©
->
rhl
.
ridÀn
, m_°©->
rid
);

521 
ofs
 +
m_°©
->
rhl
.
ridÀn
;

523 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

524 
ofs
 += 1;

525 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
îr°©Àn
);

526 
ofs
 +
m_°©
->
rhl
.
îr°©À∆í
;

527 
	`¢mp_a¢1_íc_s32t
(
p
, 
ofs
, 
m_°©
->
rhl
.
îr°©Àn
, m_°©->
îr‹_°©us
);

528 
ofs
 +
m_°©
->
rhl
.
îr°©Àn
;

530 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

531 
ofs
 += 1;

532 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
îridxÀn
);

533 
ofs
 +
m_°©
->
rhl
.
îridxÀ∆í
;

534 
	`¢mp_a¢1_íc_s32t
(
p
, 
ofs
, 
m_°©
->
rhl
.
îridxÀn
, m_°©->
îr‹_ödex
);

535 
ofs
 +
m_°©
->
rhl
.
îridxÀn
;

537  
ofs
;

538 
	}
}

543 
u16_t


544 
	$¢mp_å≠_hódî_íc
(
¢mp_msg_å≠
 *
m_å≠
, 
pbuf
 *
p
)

546 
u16_t
 
ofs
;

548 
ofs
 = 0;

549 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
));

550 
ofs
 += 1;

551 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
£qÀn
);

552 
ofs
 +
m_å≠
->
thl
.
£qÀ∆í
;

554 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

555 
ofs
 += 1;

556 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
vîÀn
);

557 
ofs
 +
m_å≠
->
thl
.
vîÀ∆í
;

558 
	`¢mp_a¢1_íc_s32t
(
p
, 
ofs
, 
m_å≠
->
thl
.
vîÀn
, 
¢mp_vîsi⁄
);

559 
ofs
 +
m_å≠
->
thl
.
vîÀn
;

561 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
));

562 
ofs
 += 1;

563 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
comÀn
);

564 
ofs
 +
m_å≠
->
thl
.
comÀ∆í
;

565 
	`¢mp_a¢1_íc_øw
(
p
, 
ofs
, 
m_å≠
->
thl
.
comÀn
, (
u8_t
 *)&
¢mp_publiccommunôy
[0]);

566 
ofs
 +
m_å≠
->
thl
.
comÀn
;

568 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_TRAP
));

569 
ofs
 += 1;

570 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
pduÀn
);

571 
ofs
 +
m_å≠
->
thl
.
pduÀ∆í
;

573 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
));

574 
ofs
 += 1;

575 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
eidÀn
);

576 
ofs
 +
m_å≠
->
thl
.
eidÀ∆í
;

577 
	`¢mp_a¢1_íc_oid
(
p
, 
ofs
, 
m_å≠
->
íãΩri£
->
Àn
, &m_å≠->íãΩri£->
id
[0]);

578 
ofs
 +
m_å≠
->
thl
.
eidÀn
;

580 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
));

581 
ofs
 += 1;

582 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
Øddæí
);

583 
ofs
 +
m_å≠
->
thl
.
ØddæíÀn
;

584 
	`¢mp_a¢1_íc_øw
(
p
, 
ofs
, 
m_å≠
->
thl
.
Øddæí
, &m_å≠->
sù_øw
[0]);

585 
ofs
 +
m_å≠
->
thl
.
Øddæí
;

587 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

588 
ofs
 += 1;

589 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
gå∂í
);

590 
ofs
 +
m_å≠
->
thl
.
gå∂íÀn
;

591 
	`¢mp_a¢1_íc_u32t
(
p
, 
ofs
, 
m_å≠
->
thl
.
gå∂í
, m_å≠->
gí_å≠
);

592 
ofs
 +
m_å≠
->
thl
.
gå∂í
;

594 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

595 
ofs
 += 1;

596 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
°ΩÀn
);

597 
ofs
 +
m_å≠
->
thl
.
°ΩÀ∆í
;

598 
	`¢mp_a¢1_íc_u32t
(
p
, 
ofs
, 
m_å≠
->
thl
.
°ΩÀn
, m_å≠->
•c_å≠
);

599 
ofs
 +
m_å≠
->
thl
.
°ΩÀn
;

601 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_TIMETICKS
));

602 
ofs
 += 1;

603 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
t¶í
);

604 
ofs
 +
m_å≠
->
thl
.
t¶íÀn
;

605 
	`¢mp_a¢1_íc_u32t
(
p
, 
ofs
, 
m_å≠
->
thl
.
t¶í
, m_å≠->
ts
);

606 
ofs
 +
m_å≠
->
thl
.
t¶í
;

608  
ofs
;

609 
	}
}

614 
u16_t


615 
	$¢mp_v¨böd_li°_íc
(
¢mp_v¨böd_roŸ
 *
roŸ
, 
pbuf
 *
p
, 
u16_t
 
ofs
)

617 
¢mp_v¨böd
 *
vb
;

618 
s32_t
 *
söt_±r
;

619 
u32_t
 *
uöt_±r
;

620 
u8_t
 *
øw_±r
;

622 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
));

623 
ofs
 += 1;

624 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
roŸ
->
£qÀn
);

625 
ofs
 +
roŸ
->
£qÀ∆í
;

627 
vb
 = 
roŸ
->
hód
;

628  
vb
 !
NULL
 )

630 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
));

631 
ofs
 += 1;

632 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
vb
->
£qÀn
);

633 
ofs
 +
vb
->
£qÀ∆í
;

635 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
));

636 
ofs
 += 1;

637 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
vb
->
ﬁí
);

638 
ofs
 +
vb
->
ﬁíÀn
;

639 
	`¢mp_a¢1_íc_oid
(
p
, 
ofs
, 
vb
->
idít_Àn
, &vb->
idít
[0]);

640 
ofs
 +
vb
->
ﬁí
;

642 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, 
vb
->
vÆue_ty≥
);

643 
ofs
 += 1;

644 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
vb
->
vÀn
);

645 
ofs
 +
vb
->
vÀ∆í
;

647 
vb
->
vÆue_ty≥
)

649 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
):

650 
söt_±r
 = (
s32_t
*)
vb
->
vÆue
;

651 
	`¢mp_a¢1_íc_s32t
(
p
, 
ofs
, 
vb
->
vÀn
, *
söt_±r
);

653 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
):

654 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_GAUGE
):

655 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_TIMETICKS
):

656 
uöt_±r
 = (
u32_t
*)
vb
->
vÆue
;

657 
	`¢mp_a¢1_íc_u32t
(
p
, 
ofs
, 
vb
->
vÀn
, *
uöt_±r
);

659 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
):

660 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
):

661 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OPAQUE
):

662 
øw_±r
 = (
u8_t
*)
vb
->
vÆue
;

663 
	`¢mp_a¢1_íc_øw
(
p
, 
ofs
, 
vb
->
vÀn
, 
øw_±r
);

665 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_NUL
):

667 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
):

668 
söt_±r
 = (
s32_t
*)
vb
->
vÆue
;

669 
	`¢mp_a¢1_íc_oid
(
p
, 
ofs
, 
vb
->
vÆue_Àn
 / (
s32_t
), 
söt_±r
);

675 
ofs
 +
vb
->
vÀn
;

676 
vb
 = vb->
√xt
;

678  
ofs
;

679 
	}
}

	@core/stats.c

39 
	~"lwù/›t.h
"

41 #i‡
LWIP_STATS


43 
	~"lwù/def.h
"

44 
	~"lwù/°©s.h
"

45 
	~"lwù/mem.h
"

47 
	~<°rög.h
>

49 
°©s_
 
	glwù_°©s
;

51 
	$°©s_öô
()

53 #ifde‡
LWIP_DEBUG


54 #i‡
MEMP_STATS


55 c⁄° * 
memp_«mes
[] = {

56 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ëdesc,

	)

57 
	~"lwù/memp_°d.h
"

59 
i
;

60 
i
 = 0; i < 
MEMP_MAX
; i++) {

61 
lwù_°©s
.
memp
[
i
].
«me
 = 
memp_«mes
[i];

64 #i‡
MEM_STATS


65 
lwù_°©s
.
mem
.
«me
 = "MEM";

68 
	}
}

70 #i‡
LWIP_STATS_DISPLAY


72 
	$°©s_di•œy_¥Ÿo
(
°©s_¥Ÿo
 *
¥Ÿo
, *
«me
)

74 
	`LWIP_PLATFORM_DIAG
(("\n%s\n\t", 
«me
));

75 
	`LWIP_PLATFORM_DIAG
(("xmô: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
xmô
));

76 
	`LWIP_PLATFORM_DIAG
(("ªcv: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
ªcv
));

77 
	`LWIP_PLATFORM_DIAG
(("fw: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
fw
));

78 
	`LWIP_PLATFORM_DIAG
(("dr›: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
dr›
));

79 
	`LWIP_PLATFORM_DIAG
(("chkîr: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
chkîr
));

80 
	`LWIP_PLATFORM_DIAG
(("À√º: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
À√º
));

81 
	`LWIP_PLATFORM_DIAG
(("memîr: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
memîr
));

82 
	`LWIP_PLATFORM_DIAG
(("πîr: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
πîr
));

83 
	`LWIP_PLATFORM_DIAG
(("¥Ÿîr: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
¥Ÿîr
));

84 
	`LWIP_PLATFORM_DIAG
(("›ãº: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
›ãº
));

85 
	`LWIP_PLATFORM_DIAG
(("îr: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
îr
));

86 
	`LWIP_PLATFORM_DIAG
(("ˇchehô: %"
STAT_COUNTER_F
"\n", 
¥Ÿo
->
ˇchehô
));

87 
	}
}

89 #i‡
IGMP_STATS


91 
	$°©s_di•œy_igmp
(
°©s_igmp
 *
igmp
)

93 
	`LWIP_PLATFORM_DIAG
(("\nIGMP\n\t"));

94 
	`LWIP_PLATFORM_DIAG
(("xmô: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
xmô
));

95 
	`LWIP_PLATFORM_DIAG
(("ªcv: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
ªcv
));

96 
	`LWIP_PLATFORM_DIAG
(("dr›: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
dr›
));

97 
	`LWIP_PLATFORM_DIAG
(("chkîr: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
chkîr
));

98 
	`LWIP_PLATFORM_DIAG
(("À√º: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
À√º
));

99 
	`LWIP_PLATFORM_DIAG
(("memîr: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
memîr
));

100 
	`LWIP_PLATFORM_DIAG
(("¥Ÿîr: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
¥Ÿîr
));

101 
	`LWIP_PLATFORM_DIAG
(("rx_v1: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
rx_v1
));

102 
	`LWIP_PLATFORM_DIAG
(("rx_group: %"
STAT_COUNTER_F
"\n", 
igmp
->
rx_group
));

103 
	`LWIP_PLATFORM_DIAG
(("rx_gíîÆ: %"
STAT_COUNTER_F
"\n", 
igmp
->
rx_gíîÆ
));

104 
	`LWIP_PLATFORM_DIAG
(("rx_ªp‹t: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
rx_ªp‹t
));

105 
	`LWIP_PLATFORM_DIAG
(("tx_joö: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
tx_joö
));

106 
	`LWIP_PLATFORM_DIAG
(("tx_Àave: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
tx_Àave
));

107 
	`LWIP_PLATFORM_DIAG
(("tx_ªp‹t: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
tx_ªp‹t
));

108 
	}
}

111 #i‡
MEM_STATS
 || 
MEMP_STATS


113 
	$°©s_di•œy_mem
(
°©s_mem
 *
mem
, *
«me
)

115 
	`LWIP_PLATFORM_DIAG
(("\nMEM %s\n\t", 
«me
));

116 
	`LWIP_PLATFORM_DIAG
(("avaû: %"
U32_F
"\n\t", (
u32_t
)
mem
->
avaû
));

117 
	`LWIP_PLATFORM_DIAG
(("u£d: %"
U32_F
"\n\t", (
u32_t
)
mem
->
u£d
));

118 
	`LWIP_PLATFORM_DIAG
(("max: %"
U32_F
"\n\t", (
u32_t
)
mem
->
max
));

119 
	`LWIP_PLATFORM_DIAG
(("îr: %"
U32_F
"\n", (
u32_t
)
mem
->
îr
));

120 
	}
}

122 #i‡
MEMP_STATS


124 
	$°©s_di•œy_memp
(
°©s_mem
 *
mem
, 
ödex
)

126 * 
memp_«mes
[] = {

127 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ëdesc,

	)

128 
	~"lwù/memp_°d.h
"

130 if(
ödex
 < 
MEMP_MAX
) {

131 
	`°©s_di•œy_mem
(
mem
, 
memp_«mes
[
ödex
]);

133 
	}
}

137 #i‡
SYS_STATS


139 
	$°©s_di•œy_sys
(
°©s_sys
 *
sys
)

141 
	`LWIP_PLATFORM_DIAG
(("\nSYS\n\t"));

142 
	`LWIP_PLATFORM_DIAG
(("£m.u£d: %"
U32_F
"\n\t", (
u32_t
)
sys
->
£m
.
u£d
));

143 
	`LWIP_PLATFORM_DIAG
(("£m.max: %"
U32_F
"\n\t", (
u32_t
)
sys
->
£m
.
max
));

144 
	`LWIP_PLATFORM_DIAG
(("£m.îr: %"
U32_F
"\n\t", (
u32_t
)
sys
->
£m
.
îr
));

145 
	`LWIP_PLATFORM_DIAG
(("muãx.u£d: %"
U32_F
"\n\t", (
u32_t
)
sys
->
muãx
.
u£d
));

146 
	`LWIP_PLATFORM_DIAG
(("muãx.max: %"
U32_F
"\n\t", (
u32_t
)
sys
->
muãx
.
max
));

147 
	`LWIP_PLATFORM_DIAG
(("muãx.îr: %"
U32_F
"\n\t", (
u32_t
)
sys
->
muãx
.
îr
));

148 
	`LWIP_PLATFORM_DIAG
(("mbox.u£d: %"
U32_F
"\n\t", (
u32_t
)
sys
->
mbox
.
u£d
));

149 
	`LWIP_PLATFORM_DIAG
(("mbox.max: %"
U32_F
"\n\t", (
u32_t
)
sys
->
mbox
.
max
));

150 
	`LWIP_PLATFORM_DIAG
(("mbox.îr: %"
U32_F
"\n\t", (
u32_t
)
sys
->
mbox
.
îr
));

151 
	}
}

155 
	$°©s_di•œy
()

157 
s16_t
 
i
;

159 
	`LINK_STATS_DISPLAY
();

160 
	`ETHARP_STATS_DISPLAY
();

161 
	`IPFRAG_STATS_DISPLAY
();

162 
	`IP_STATS_DISPLAY
();

163 
	`IGMP_STATS_DISPLAY
();

164 
	`ICMP_STATS_DISPLAY
();

165 
	`UDP_STATS_DISPLAY
();

166 
	`TCP_STATS_DISPLAY
();

167 
	`MEM_STATS_DISPLAY
();

168 
i
 = 0; i < 
MEMP_MAX
; i++) {

169 
	`MEMP_STATS_DISPLAY
(
i
);

171 
	`SYS_STATS_DISPLAY
();

172 
	}
}

	@core/sys.c

39 
	~"lwù/›t.h
"

41 
	~"lwù/sys.h
"

46 #i‡!
NO_SYS


54 
	$sys_m¶ìp
(
u32_t
 
ms
)

56 i‡(
ms
 > 0) {

57 
sys_£m_t
 
dñay£m
;

58 
îr_t
 
îr
 = 
	`sys_£m_√w
(&
dñay£m
, 0);

59 i‡(
îr
 =
ERR_OK
) {

60 
	`sys_¨ch_£m_waô
(&
dñay£m
, 
ms
);

61 
	`sys_£m_‰ì
(&
dñay£m
);

64 
	}
}

	@core/tcp.c

43 
	~"lwù/›t.h
"

45 #i‡
LWIP_TCP


47 
	~"lwù/def.h
"

48 
	~"lwù/mem.h
"

49 
	~"lwù/memp.h
"

50 
	~"lwù/¢mp.h
"

51 
	~"lwù/t˝.h
"

52 
	~"lwù/t˝_im∂.h
"

53 
	~"lwù/debug.h
"

54 
	~"lwù/°©s.h
"

56 
	~<°rög.h
>

58 c⁄° * c⁄° 
	gt˝_°©e_°r
[] = {

73 
u32_t
 
	gt˝_ticks
;

74 c⁄° 
u8_t
 
	gt˝_backoff
[13] =

77 c⁄° 
u8_t
 
	gt˝_≥rsi°_backoff
[7] = { 3, 6, 12, 24, 48, 96, 120 };

82 
t˝_pcb
 *
	gt˝_bound_pcbs
;

84 
t˝_li°í_pcbs_t
 
	gt˝_li°í_pcbs
;

87 
t˝_pcb
 *
	gt˝_a˘ive_pcbs
;

89 
t˝_pcb
 *
	gt˝_tw_pcbs
;

91 
	#NUM_TCP_PCB_LISTS
 4

	)

92 
	#NUM_TCP_PCB_LISTS_NO_TIME_WAIT
 3

	)

94 
t˝_pcb
 ** c⁄° 
	gt˝_pcb_li°s
[] = {&
t˝_li°í_pcbs
.
pcbs
, &
t˝_bound_pcbs
,

95 &
t˝_a˘ive_pcbs
, &
t˝_tw_pcbs
};

98 
t˝_pcb
 *
	gt˝_tmp_pcb
;

101 
u8_t
 
	gt˝_timî
;

102 
u16_t
 
t˝_√w_p‹t
();

109 
	$t˝_tmr
()

112 
	`t˝_Á°tmr
();

114 i‡(++
t˝_timî
 & 1) {

117 
	`t˝_¶owtmr
();

119 
	}
}

137 
îr_t


138 
	$t˝_˛o£_shutdown
(
t˝_pcb
 *
pcb
, 
u8_t
 
r°_⁄_u«cked_d©a
)

140 
îr_t
 
îr
;

142 i‡(
r°_⁄_u«cked_d©a
 && (
pcb
->
°©e
 !
LISTEN
)) {

143 i‡((
pcb
->
ªfu£d_d©a
 !
NULL
Ë|| (pcb->
rcv_wnd
 !
TCP_WND
)) {

146 
	`LWIP_ASSERT
("pcb->Êag†& TF_RXCLOSED", 
pcb
->
Êags
 & 
TF_RXCLOSED
);

150 
	`t˝_r°
(
pcb
->
¢d_nxt
,Öcb->
rcv_nxt
, &pcb->
loˇl_ù
, &pcb->
ªmŸe_ù
,

151 
pcb
->
loˇl_p‹t
,Öcb->
ªmŸe_p‹t
);

153 
	`t˝_pcb_purge
(
pcb
);

158 
	`TCP_RMV
(&
t˝_a˘ive_pcbs
, 
pcb
);

159 
pcb
->
°©e
 = 
TIME_WAIT
;

160 
	`TCP_REG
(&
t˝_tw_pcbs
, 
pcb
);

162  
ERR_OK
;

166 
pcb
->
°©e
) {

167 
CLOSED
:

175 
îr
 = 
ERR_OK
;

176 i‡(
pcb
->
loˇl_p‹t
 != 0) {

177 
	`TCP_RMV
(&
t˝_bound_pcbs
, 
pcb
);

179 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

180 
pcb
 = 
NULL
;

182 
LISTEN
:

183 
îr
 = 
ERR_OK
;

184 
	`t˝_pcb_ªmove
(&
t˝_li°í_pcbs
.
pcbs
, 
pcb
);

185 
	`memp_‰ì
(
MEMP_TCP_PCB_LISTEN
, 
pcb
);

186 
pcb
 = 
NULL
;

188 
SYN_SENT
:

189 
îr
 = 
ERR_OK
;

190 
	`t˝_pcb_ªmove
(&
t˝_a˘ive_pcbs
, 
pcb
);

191 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

192 
pcb
 = 
NULL
;

193 
	`¢mp_öc_t˝©ãm±Áûs
();

195 
SYN_RCVD
:

196 
îr
 = 
	`t˝_£nd_fö
(
pcb
);

197 i‡(
îr
 =
ERR_OK
) {

198 
	`¢mp_öc_t˝©ãm±Áûs
();

199 
pcb
->
°©e
 = 
FIN_WAIT_1
;

202 
ESTABLISHED
:

203 
îr
 = 
	`t˝_£nd_fö
(
pcb
);

204 i‡(
îr
 =
ERR_OK
) {

205 
	`¢mp_öc_t˝e°abª£ts
();

206 
pcb
->
°©e
 = 
FIN_WAIT_1
;

209 
CLOSE_WAIT
:

210 
îr
 = 
	`t˝_£nd_fö
(
pcb
);

211 i‡(
îr
 =
ERR_OK
) {

212 
	`¢mp_öc_t˝e°abª£ts
();

213 
pcb
->
°©e
 = 
LAST_ACK
;

218 
îr
 = 
ERR_OK
;

219 
pcb
 = 
NULL
;

223 i‡(
pcb
 !
NULL
 && 
îr
 =
ERR_OK
) {

232 
	`t˝_ouçut
(
pcb
);

234  
îr
;

235 
	}
}

251 
îr_t


252 
	$t˝_˛o£
(
t˝_pcb
 *
pcb
)

254 #i‡
TCP_DEBUG


255 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_close: closing in "));

256 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

259 i‡(
pcb
->
°©e
 !
LISTEN
) {

261 
pcb
->
Êags
 |
TF_RXCLOSED
;

264  
	`t˝_˛o£_shutdown
(
pcb
, 1);

265 
	}
}

277 
îr_t


278 
	$t˝_shutdown
(
t˝_pcb
 *
pcb
, 
shut_rx
, 
shut_tx
)

280 i‡(
pcb
->
°©e
 =
LISTEN
) {

281  
ERR_CONN
;

283 i‡(
shut_rx
) {

285 i‡(
pcb
->
ªfu£d_d©a
 !
NULL
) {

286 
	`pbuf_‰ì
(
pcb
->
ªfu£d_d©a
);

287 
pcb
->
ªfu£d_d©a
 = 
NULL
;

290 
pcb
->
Êags
 |
TF_RXCLOSED
;

292 i‡(
shut_tx
) {

295 
pcb
->
°©e
) {

296 
SYN_RCVD
:

297 
ESTABLISHED
:

298 
CLOSE_WAIT
:

299  
	`t˝_˛o£_shutdown
(
pcb
, 0);

306  
ERR_OK
;

307 
	}
}

318 
	$t˝_ab™d⁄
(
t˝_pcb
 *
pcb
, 
ª£t
)

320 
u32_t
 
£qno
, 
ackno
;

321 
u16_t
 
ªmŸe_p‹t
, 
loˇl_p‹t
;

322 
ù_addr_t
 
ªmŸe_ù
, 
loˇl_ù
;

323 #i‡
LWIP_CALLBACK_API


324 
t˝_îr_‚
 
îrf
;

326 *
îrf_¨g
;

329 
	`LWIP_ASSERT
("don't callÅcp_abort/tcp_abandon forÜisten-pcbs",

330 
pcb
->
°©e
 !
LISTEN
);

334 i‡(
pcb
->
°©e
 =
TIME_WAIT
) {

335 
	`t˝_pcb_ªmove
(&
t˝_tw_pcbs
, 
pcb
);

336 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

338 
£qno
 = 
pcb
->
¢d_nxt
;

339 
ackno
 = 
pcb
->
rcv_nxt
;

340 
	`ù_addr_c›y
(
loˇl_ù
, 
pcb
->local_ip);

341 
	`ù_addr_c›y
(
ªmŸe_ù
, 
pcb
->remote_ip);

342 
loˇl_p‹t
 = 
pcb
->local_port;

343 
ªmŸe_p‹t
 = 
pcb
->remote_port;

344 #i‡
LWIP_CALLBACK_API


345 
îrf
 = 
pcb
->errf;

347 
îrf_¨g
 = 
pcb
->
ˇŒback_¨g
;

348 
	`t˝_pcb_ªmove
(&
t˝_a˘ive_pcbs
, 
pcb
);

349 i‡(
pcb
->
u«cked
 !
NULL
) {

350 
	`t˝_£gs_‰ì
(
pcb
->
u«cked
);

352 i‡(
pcb
->
un£¡
 !
NULL
) {

353 
	`t˝_£gs_‰ì
(
pcb
->
un£¡
);

355 #i‡
TCP_QUEUE_OOSEQ


356 i‡(
pcb
->
oo£q
 !
NULL
) {

357 
	`t˝_£gs_‰ì
(
pcb
->
oo£q
);

360 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

361 
	`TCP_EVENT_ERR
(
îrf
, 
îrf_¨g
, 
ERR_ABRT
);

362 i‡(
ª£t
) {

363 
	`LWIP_DEBUGF
(
TCP_RST_DEBUG
, ("tcp_abandon: sending RST\n"));

364 
	`t˝_r°
(
£qno
, 
ackno
, &
loˇl_ù
, &
ªmŸe_ù
, 
loˇl_p‹t
, 
ªmŸe_p‹t
);

367 
	}
}

380 
	$t˝_ab‹t
(
t˝_pcb
 *
pcb
)

382 
	`t˝_ab™d⁄
(
pcb
, 1);

383 
	}
}

399 
îr_t


400 
	$t˝_böd
(
t˝_pcb
 *
pcb
, 
ù_addr_t
 *
ùaddr
, 
u16_t
 
p‹t
)

402 
i
;

403 
max_pcb_li°
 = 
NUM_TCP_PCB_LISTS
;

404 
t˝_pcb
 *
˝cb
;

406 
	`LWIP_ERROR
("t˝_böd: c™ o∆y böd i¿°©êCLOSED", 
pcb
->
°©e
 =
CLOSED
,  
ERR_VAL
);

408 #i‡
SO_REUSE


414 i‡((
pcb
->
so_›ti⁄s
 & 
SOF_REUSEADDR
) != 0) {

415 
max_pcb_li°
 = 
NUM_TCP_PCB_LISTS_NO_TIME_WAIT
;

419 i‡(
p‹t
 == 0) {

420 
p‹t
 = 
	`t˝_√w_p‹t
();

424 
i
 = 0; i < 
max_pcb_li°
; i++) {

425 
˝cb
 = *
t˝_pcb_li°s
[
i
]; cpcb !
NULL
; cpcb = cpcb->
√xt
) {

426 i‡(
˝cb
->
loˇl_p‹t
 =
p‹t
) {

427 #i‡
SO_REUSE


431 i‡(((
pcb
->
so_›ti⁄s
 & 
SOF_REUSEADDR
) == 0) ||

432 ((
˝cb
->
so_›ti⁄s
 & 
SOF_REUSEADDR
) == 0))

435 i‡(
	`ù_addr_ißny
(&(
˝cb
->
loˇl_ù
)) ||

436 
	`ù_addr_ißny
(
ùaddr
) ||

437 
	`ù_addr_cmp
(&(
˝cb
->
loˇl_ù
), 
ùaddr
)) {

438  
ERR_USE
;

445 i‡(!
	`ù_addr_ißny
(
ùaddr
)) {

446 
pcb
->
loˇl_ù
 = *
ùaddr
;

448 
pcb
->
loˇl_p‹t
 = 
p‹t
;

449 
	`TCP_REG
(&
t˝_bound_pcbs
, 
pcb
);

450 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_böd: bödÅÿp‹à%"
U16_F
"\n", 
p‹t
));

451  
ERR_OK
;

452 
	}
}

453 #i‡
LWIP_CALLBACK_API


457 
îr_t


458 
	$t˝_ac˚±_nuŒ
(*
¨g
, 
t˝_pcb
 *
pcb
, 
îr_t
 
îr
)

460 
	`LWIP_UNUSED_ARG
(
¨g
);

461 
	`LWIP_UNUSED_ARG
(
pcb
);

462 
	`LWIP_UNUSED_ARG
(
îr
);

464  
ERR_ABRT
;

465 
	}
}

482 
t˝_pcb
 *

483 
	$t˝_li°í_wôh_backlog
(
t˝_pcb
 *
pcb
, 
u8_t
 
backlog
)

485 
t˝_pcb_li°í
 *
Õcb
;

487 
	`LWIP_UNUSED_ARG
(
backlog
);

488 
	`LWIP_ERROR
("t˝_li°í:ÖcbáÃódy c⁄√˘ed", 
pcb
->
°©e
 =
CLOSED
,  
NULL
);

491 i‡(
pcb
->
°©e
 =
LISTEN
) {

492  
pcb
;

494 #i‡
SO_REUSE


495 i‡((
pcb
->
so_›ti⁄s
 & 
SOF_REUSEADDR
) != 0) {

499 
Õcb
 = 
t˝_li°í_pcbs
.
li°í_pcbs
;Üpcb !
NULL
;Üpcb =Üpcb->
√xt
) {

500 i‡(
Õcb
->
loˇl_p‹t
 =
pcb
->local_port) {

501 i‡(
	`ù_addr_cmp
(&
Õcb
->
loˇl_ù
, &
pcb
->local_ip)) {

503  
NULL
;

509 
Õcb
 = (
t˝_pcb_li°í
 *)
	`memp_mÆloc
(
MEMP_TCP_PCB_LISTEN
);

510 i‡(
Õcb
 =
NULL
) {

511  
NULL
;

513 
Õcb
->
ˇŒback_¨g
 = 
pcb
->callback_arg;

514 
Õcb
->
loˇl_p‹t
 = 
pcb
->local_port;

515 
Õcb
->
°©e
 = 
LISTEN
;

516 
Õcb
->
¥io
 = 
pcb
->prio;

517 
Õcb
->
so_›ti⁄s
 = 
pcb
->so_options;

518 
Õcb
->
so_›ti⁄s
 |
SOF_ACCEPTCONN
;

519 
Õcb
->
âl
 = 
pcb
->ttl;

520 
Õcb
->
tos
 = 
pcb
->tos;

521 
	`ù_addr_c›y
(
Õcb
->
loˇl_ù
, 
pcb
->local_ip);

522 i‡(
pcb
->
loˇl_p‹t
 != 0) {

523 
	`TCP_RMV
(&
t˝_bound_pcbs
, 
pcb
);

525 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

526 #i‡
LWIP_CALLBACK_API


527 
Õcb
->
ac˚±
 = 
t˝_ac˚±_nuŒ
;

529 #i‡
TCP_LISTEN_BACKLOG


530 
Õcb
->
ac˚±s_≥ndög
 = 0;

531 
Õcb
->
backlog
 = (backlog ? backlog : 1);

533 
	`TCP_REG
(&
t˝_li°í_pcbs
.
pcbs
, (
t˝_pcb
 *)
Õcb
);

534  (
t˝_pcb
 *)
Õcb
;

535 
	}
}

543 
u32_t
 
	$t˝_upd©e_rcv_™n_wnd
(
t˝_pcb
 *
pcb
)

545 
u32_t
 
√w_right_edge
 = 
pcb
->
rcv_nxt
 +Öcb->
rcv_wnd
;

547 i‡(
	`TCP_SEQ_GEQ
(
√w_right_edge
, 
pcb
->
rcv_™n_right_edge
 + 
	`LWIP_MIN
((
TCP_WND
 / 2),Öcb->
mss
))) {

549 
pcb
->
rcv_™n_wnd
 =Öcb->
rcv_wnd
;

550  
√w_right_edge
 - 
pcb
->
rcv_™n_right_edge
;

552 i‡(
	`TCP_SEQ_GT
(
pcb
->
rcv_nxt
,Öcb->
rcv_™n_right_edge
)) {

555 
pcb
->
rcv_™n_wnd
 = 0;

558 
u32_t
 
√w_rcv_™n_wnd
 = 
pcb
->
rcv_™n_right_edge
 -Öcb->
rcv_nxt
;

559 
	`LWIP_ASSERT
("√w_rcv_™n_wnd <0xffff", 
√w_rcv_™n_wnd
 <= 0xffff);

560 
pcb
->
rcv_™n_wnd
 = (
u16_t
)
√w_rcv_™n_wnd
;

564 
	}
}

575 
	$t˝_ªcved
(
t˝_pcb
 *
pcb
, 
u16_t
 
Àn
)

577 
wnd_öÊ©i⁄
;

579 
	`LWIP_ASSERT
("tcp_recved:Üen would wrapÑcv_wnd\n",

580 
Àn
 <0xfff‡- 
pcb
->
rcv_wnd
 );

582 
pcb
->
rcv_wnd
 +
Àn
;

583 i‡(
pcb
->
rcv_wnd
 > 
TCP_WND
) {

584 
pcb
->
rcv_wnd
 = 
TCP_WND
;

587 
wnd_öÊ©i⁄
 = 
	`t˝_upd©e_rcv_™n_wnd
(
pcb
);

593 i‡(
wnd_öÊ©i⁄
 >
TCP_WND_UPDATE_THRESHOLD
) {

594 
	`t˝_ack_now
(
pcb
);

595 
	`t˝_ouçut
(
pcb
);

598 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_ªcved:Ñecveived %"
U16_F
" bytes, wnd %"U16_F" (%"U16_F").\n",

599 
Àn
, 
pcb
->
rcv_wnd
, 
TCP_WND
 -Öcb->rcv_wnd));

600 
	}
}

608 
u16_t


609 
	$t˝_√w_p‹t
()

611 
i
;

612 
t˝_pcb
 *
pcb
;

613 #i‚de‡
TCP_LOCAL_PORT_RANGE_START


616 
	#TCP_LOCAL_PORT_RANGE_START
 0xc000

	)

617 
	#TCP_LOCAL_PORT_RANGE_END
 0xffff

	)

619 
u16_t
 
p‹t
 = 
TCP_LOCAL_PORT_RANGE_START
;

621 
agaö
:

622 i‡(
p‹t
++ >
TCP_LOCAL_PORT_RANGE_END
) {

623 
p‹t
 = 
TCP_LOCAL_PORT_RANGE_START
;

626 
i
 = 0; i < 
NUM_TCP_PCB_LISTS
; i++) {

627 
pcb
 = *
t˝_pcb_li°s
[
i
];Öcb !
NULL
;Öcb =Öcb->
√xt
) {

628 i‡(
pcb
->
loˇl_p‹t
 =
p‹t
) {

629 
agaö
;

633  
p‹t
;

634 
	}
}

648 
îr_t


649 
	$t˝_c⁄√˘
(
t˝_pcb
 *
pcb
, 
ù_addr_t
 *
ùaddr
, 
u16_t
 
p‹t
,

650 
t˝_c⁄√˘ed_‚
 
c⁄√˘ed
)

652 
îr_t
 
ªt
;

653 
u32_t
 
iss
;

654 
u16_t
 
ﬁd_loˇl_p‹t
;

656 
	`LWIP_ERROR
("t˝_c⁄√˘: c™ o∆y c⁄√˘ from sèã CLOSED", 
pcb
->
°©e
 =
CLOSED
,  
ERR_ISCONN
);

658 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_c⁄√˘Åÿp‹à%"
U16_F
"\n", 
p‹t
));

659 i‡(
ùaddr
 !
NULL
) {

660 
pcb
->
ªmŸe_ù
 = *
ùaddr
;

662  
ERR_VAL
;

664 
pcb
->
ªmŸe_p‹t
 = 
p‹t
;

667 i‡(
	`ù_addr_ißny
(&(
pcb
->
loˇl_ù
))) {

669 
√tif
 *√ti‡
	`ù_rouã
(&(
pcb
->
ªmŸe_ù
));

670 i‡(
√tif
 =
NULL
) {

673  
ERR_RTE
;

676 
	`ù_addr_c›y
(
pcb
->
loˇl_ù
, 
√tif
->
ù_addr
);

679 
ﬁd_loˇl_p‹t
 = 
pcb
->
loˇl_p‹t
;

680 i‡(
pcb
->
loˇl_p‹t
 == 0) {

681 
pcb
->
loˇl_p‹t
 = 
	`t˝_√w_p‹t
();

683 #i‡
SO_REUSE


684 i‡((
pcb
->
so_›ti⁄s
 & 
SOF_REUSEADDR
) != 0) {

687 
t˝_pcb
 *
˝cb
;

688 
i
;

690 
i
 = 2; i < 
NUM_TCP_PCB_LISTS
; i++) {

691 
˝cb
 = *
t˝_pcb_li°s
[
i
]; cpcb !
NULL
; cpcb = cpcb->
√xt
) {

692 i‡((
˝cb
->
loˇl_p‹t
 =
pcb
->local_port) &&

693 (
˝cb
->
ªmŸe_p‹t
 =
p‹t
) &&

694 
	`ù_addr_cmp
(&
˝cb
->
loˇl_ù
, &
pcb
->local_ip) &&

695 
	`ù_addr_cmp
(&
˝cb
->
ªmŸe_ù
, 
ùaddr
)) {

697  
ERR_USE
;

703 
iss
 = 
	`t˝_√xt_iss
();

704 
pcb
->
rcv_nxt
 = 0;

705 
pcb
->
¢d_nxt
 = 
iss
;

706 
pcb
->
œ°ack
 = 
iss
 - 1;

707 
pcb
->
¢d_lbb
 = 
iss
 - 1;

708 
pcb
->
rcv_wnd
 = 
TCP_WND
;

709 
pcb
->
rcv_™n_wnd
 = 
TCP_WND
;

710 
pcb
->
rcv_™n_right_edge
 =Öcb->
rcv_nxt
;

711 
pcb
->
¢d_wnd
 = 
TCP_WND
;

714 
pcb
->
mss
 = (
TCP_MSS
 > 536) ? 536 : TCP_MSS;

715 #i‡
TCP_CALCULATE_EFF_SEND_MSS


716 
pcb
->
mss
 = 
	`t˝_eff_£nd_mss
’cb->mss, 
ùaddr
);

718 
pcb
->
cwnd
 = 1;

719 
pcb
->
s°hªsh
 =Öcb->
mss
 * 10;

720 #i‡
LWIP_CALLBACK_API


721 
pcb
->
c⁄√˘ed
 = connected;

723 
	`LWIP_UNUSED_ARG
(
c⁄√˘ed
);

727 
ªt
 = 
	`t˝_íqueue_Êags
(
pcb
, 
TCP_SYN
);

728 i‡(
ªt
 =
ERR_OK
) {

730 
pcb
->
°©e
 = 
SYN_SENT
;

731 i‡(
ﬁd_loˇl_p‹t
 != 0) {

732 
	`TCP_RMV
(&
t˝_bound_pcbs
, 
pcb
);

734 
	`TCP_REG
(&
t˝_a˘ive_pcbs
, 
pcb
);

735 
	`¢mp_öc_t˝a˘ive›ís
();

737 
	`t˝_ouçut
(
pcb
);

739  
ªt
;

740 
	}
}

750 
	$t˝_¶owtmr
()

752 
t˝_pcb
 *
pcb
, *
¥ev
;

753 
u16_t
 
eff_wnd
;

754 
u8_t
 
pcb_ªmove
;

755 
u8_t
 
pcb_ª£t
;

756 
îr_t
 
îr
;

758 
îr
 = 
ERR_OK
;

760 ++
t˝_ticks
;

763 
¥ev
 = 
NULL
;

764 
pcb
 = 
t˝_a˘ive_pcbs
;

765 i‡(
pcb
 =
NULL
) {

766 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:ÇoáctiveÖcbs\n"));

768 
pcb
 !
NULL
) {

769 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:ÖrocessingáctiveÖcb\n"));

770 
	`LWIP_ASSERT
("t˝_¶owtmr:á˘ivêpcb->°©ê!CLOSED\n", 
pcb
->
°©e
 !
CLOSED
);

771 
	`LWIP_ASSERT
("t˝_¶owtmr:á˘ivêpcb->°©ê!LISTEN\n", 
pcb
->
°©e
 !
LISTEN
);

772 
	`LWIP_ASSERT
("t˝_¶owtmr:á˘ivêpcb->°©ê!TIME-WAIT\n", 
pcb
->
°©e
 !
TIME_WAIT
);

774 
pcb_ªmove
 = 0;

775 
pcb_ª£t
 = 0;

777 i‡(
pcb
->
°©e
 =
SYN_SENT
 &&Öcb->
ƒtx
 =
TCP_SYNMAXRTX
) {

778 ++
pcb_ªmove
;

779 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr: max SYNÑetriesÑeached\n"));

781 i‡(
pcb
->
ƒtx
 =
TCP_MAXRTX
) {

782 ++
pcb_ªmove
;

783 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr: max DATAÑetriesÑeached\n"));

785 i‡(
pcb
->
≥rsi°_backoff
 > 0) {

788 
pcb
->
≥rsi°_˙t
++;

789 i‡(
pcb
->
≥rsi°_˙t
 >
t˝_≥rsi°_backoff
[pcb->
≥rsi°_backoff
-1]) {

790 
pcb
->
≥rsi°_˙t
 = 0;

791 i‡(
pcb
->
≥rsi°_backoff
 < (
t˝_≥rsi°_backoff
)) {

792 
pcb
->
≥rsi°_backoff
++;

794 
	`t˝_zîo_wödow_¥obe
(
pcb
);

798 if(
pcb
->
πime
 >= 0)

799 ++
pcb
->
πime
;

801 i‡(
pcb
->
u«cked
 !
NULL
 &&Öcb->
πime
 >pcb->
πo
) {

803 
	`LWIP_DEBUGF
(
TCP_RTO_DEBUG
, ("t˝_¶owtmr:Ñtimê%"
S16_F


804 "Öcb->πÿ%"
S16_F
"\n",

805 
pcb
->
πime
,Öcb->
πo
));

809 i‡(
pcb
->
°©e
 !
SYN_SENT
) {

810 
pcb
->
πo
 = (’cb->
ß
 >> 3Ë+Öcb->
sv
Ë<< 
t˝_backoff
[pcb->
ƒtx
];

814 
pcb
->
πime
 = 0;

817 
eff_wnd
 = 
	`LWIP_MIN
(
pcb
->
cwnd
,Öcb->
¢d_wnd
);

818 
pcb
->
s°hªsh
 = 
eff_wnd
 >> 1;

819 i‡(
pcb
->
s°hªsh
 < (pcb->
mss
 << 1)) {

820 
pcb
->
s°hªsh
 = (pcb->
mss
 << 1);

822 
pcb
->
cwnd
 =Öcb->
mss
;

823 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("t˝_¶owtmr: cwnd %"
U16_F


824 " s°hªsh %"
U16_F
"\n",

825 
pcb
->
cwnd
,Öcb->
s°hªsh
));

829 
	`t˝_ªxmô_πo
(
pcb
);

834 i‡(
pcb
->
°©e
 =
FIN_WAIT_2
) {

835 i‡((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
) >

836 
TCP_FIN_WAIT_TIMEOUT
 / 
TCP_SLOW_INTERVAL
) {

837 ++
pcb_ªmove
;

838 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:ÑemovingÖcb stuck in FIN-WAIT-2\n"));

843 if((
pcb
->
so_›ti⁄s
 & 
SOF_KEEPALIVE
) &&

844 ((
pcb
->
°©e
 =
ESTABLISHED
) ||

845 (
pcb
->
°©e
 =
CLOSE_WAIT
))) {

846 #i‡
LWIP_TCP_KEEPALIVE


847 if((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
) >

848 (
pcb
->
kìp_idÀ
 + (pcb->
kìp_˙t
*pcb->
kìp_ötvl
))

849 / 
TCP_SLOW_INTERVAL
)

851 if((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
) >

852 (
pcb
->
kìp_idÀ
 + 
TCP_MAXIDLE
Ë/ 
TCP_SLOW_INTERVAL
)

855 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_¶owtmr: KEEPALIVEÅimeout. Ab‹tög c⁄√˘i⁄Åÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F".\n",

856 
	`ù4_addr1_16
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr2_16
(&pcb->remote_ip),

857 
	`ù4_addr3_16
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr4_16
(&pcb->remote_ip)));

859 ++
pcb_ªmove
;

860 ++
pcb_ª£t
;

862 #i‡
LWIP_TCP_KEEPALIVE


863 if((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
) >

864 (
pcb
->
kìp_idÀ
 +Öcb->
kìp_˙t_£¡
 *Öcb->
kìp_ötvl
)

865 / 
TCP_SLOW_INTERVAL
)

867 if((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
) >

868 (
pcb
->
kìp_idÀ
 +Öcb->
kìp_˙t_£¡
 * 
TCP_KEEPINTVL_DEFAULT
)

869 / 
TCP_SLOW_INTERVAL
)

872 
	`t˝_kì∑live
(
pcb
);

873 
pcb
->
kìp_˙t_£¡
++;

880 #i‡
TCP_QUEUE_OOSEQ


881 i‡(
pcb
->
oo£q
 !
NULL
 &&

882 (
u32_t
)
t˝_ticks
 - 
pcb
->
tmr
 >pcb->
πo
 * 
TCP_OOSEQ_TIMEOUT
) {

883 
	`t˝_£gs_‰ì
(
pcb
->
oo£q
);

884 
pcb
->
oo£q
 = 
NULL
;

885 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("tcp_slowtmr: dropping OOSEQ queued data\n"));

890 i‡(
pcb
->
°©e
 =
SYN_RCVD
) {

891 i‡((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
) >

892 
TCP_SYN_RCVD_TIMEOUT
 / 
TCP_SLOW_INTERVAL
) {

893 ++
pcb_ªmove
;

894 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:ÑemovingÖcb stuck in SYN-RCVD\n"));

899 i‡(
pcb
->
°©e
 =
LAST_ACK
) {

900 i‡((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
Ë> 2 * 
TCP_MSL
 / 
TCP_SLOW_INTERVAL
) {

901 ++
pcb_ªmove
;

902 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:ÑemovingÖcb stuck in LAST-ACK\n"));

907 i‡(
pcb_ªmove
) {

908 
t˝_pcb
 *
pcb2
;

909 
	`t˝_pcb_purge
(
pcb
);

911 i‡(
¥ev
 !
NULL
) {

912 
	`LWIP_ASSERT
("t˝_¶owtmr: middÀÅ˝ !t˝_a˘ive_pcbs", 
pcb
 !
t˝_a˘ive_pcbs
);

913 
¥ev
->
√xt
 = 
pcb
->next;

916 
	`LWIP_ASSERT
("t˝_¶owtmr: fú°Öcb =t˝_a˘ive_pcbs", 
t˝_a˘ive_pcbs
 =
pcb
);

917 
t˝_a˘ive_pcbs
 = 
pcb
->
√xt
;

920 
	`TCP_EVENT_ERR
(
pcb
->
îrf
,Öcb->
ˇŒback_¨g
, 
ERR_ABRT
);

921 i‡(
pcb_ª£t
) {

922 
	`t˝_r°
(
pcb
->
¢d_nxt
,Öcb->
rcv_nxt
, &pcb->
loˇl_ù
, &pcb->
ªmŸe_ù
,

923 
pcb
->
loˇl_p‹t
,Öcb->
ªmŸe_p‹t
);

926 
pcb2
 = 
pcb
;

927 
pcb
 =Öcb->
√xt
;

928 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb2
);

931 
¥ev
 = 
pcb
;

932 
pcb
 =Öcb->
√xt
;

935 ++
¥ev
->
pﬁ…mr
;

936 i‡(
¥ev
->
pﬁ…mr
 >¥ev->
pﬁlöãrvÆ
) {

937 
¥ev
->
pﬁ…mr
 = 0;

938 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:Öollingápplication\n"));

939 
	`TCP_EVENT_POLL
(
¥ev
, 
îr
);

941 i‡(
îr
 =
ERR_OK
) {

942 
	`t˝_ouçut
(
¥ev
);

950 
¥ev
 = 
NULL
;

951 
pcb
 = 
t˝_tw_pcbs
;

952 
pcb
 !
NULL
) {

953 
	`LWIP_ASSERT
("t˝_¶owtmr: TIME-WAITÖcb->°©ê=TIME-WAIT", 
pcb
->
°©e
 =
TIME_WAIT
);

954 
pcb_ªmove
 = 0;

957 i‡((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
Ë> 2 * 
TCP_MSL
 / 
TCP_SLOW_INTERVAL
) {

958 ++
pcb_ªmove
;

964 i‡(
pcb_ªmove
) {

965 
t˝_pcb
 *
pcb2
;

966 
	`t˝_pcb_purge
(
pcb
);

968 i‡(
¥ev
 !
NULL
) {

969 
	`LWIP_ASSERT
("t˝_¶owtmr: middÀÅ˝ !t˝_tw_pcbs", 
pcb
 !
t˝_tw_pcbs
);

970 
¥ev
->
√xt
 = 
pcb
->next;

973 
	`LWIP_ASSERT
("t˝_¶owtmr: fú°Öcb =t˝_tw_pcbs", 
t˝_tw_pcbs
 =
pcb
);

974 
t˝_tw_pcbs
 = 
pcb
->
√xt
;

976 
pcb2
 = 
pcb
;

977 
pcb
 =Öcb->
√xt
;

978 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb2
);

980 
¥ev
 = 
pcb
;

981 
pcb
 =Öcb->
√xt
;

984 
	}
}

993 
	$t˝_Á°tmr
()

995 
t˝_pcb
 *
pcb
 = 
t˝_a˘ive_pcbs
;

997 
pcb
 !
NULL
) {

998 
t˝_pcb
 *
√xt
 = 
pcb
->next;

1000 i‡(
pcb
->
ªfu£d_d©a
 !
NULL
) {

1002 
îr_t
 
îr
;

1003 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_fasttmr:Çotify keptÖacket\n"));

1004 
	`TCP_EVENT_RECV
(
pcb
,Öcb->
ªfu£d_d©a
, 
ERR_OK
, 
îr
);

1005 i‡(
îr
 =
ERR_OK
) {

1006 
pcb
->
ªfu£d_d©a
 = 
NULL
;

1007 } i‡(
îr
 =
ERR_ABRT
) {

1009 
pcb
 = 
NULL
;

1014 i‡(
pcb
 && (pcb->
Êags
 & 
TF_ACK_DELAY
)) {

1015 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_fasttmr: delayed ACK\n"));

1016 
	`t˝_ack_now
(
pcb
);

1017 
	`t˝_ouçut
(
pcb
);

1018 
pcb
->
Êags
 &~(
TF_ACK_DELAY
 | 
TF_ACK_NOW
);

1021 
pcb
 = 
√xt
;

1023 
	}
}

1031 
	$t˝_£gs_‰ì
(
t˝_£g
 *
£g
)

1033 
£g
 !
NULL
) {

1034 
t˝_£g
 *
√xt
 = 
£g
->next;

1035 
	`t˝_£g_‰ì
(
£g
);

1036 
£g
 = 
√xt
;

1038 
	}
}

1046 
	$t˝_£g_‰ì
(
t˝_£g
 *
£g
)

1048 i‡(
£g
 !
NULL
) {

1049 i‡(
£g
->
p
 !
NULL
) {

1050 
	`pbuf_‰ì
(
£g
->
p
);

1051 #i‡
TCP_DEBUG


1052 
£g
->
p
 = 
NULL
;

1055 
	`memp_‰ì
(
MEMP_TCP_SEG
, 
£g
);

1057 
	}
}

1066 
	$t˝_£çrio
(
t˝_pcb
 *
pcb
, 
u8_t
 
¥io
)

1068 
pcb
->
¥io
 =Örio;

1069 
	}
}

1071 #i‡
TCP_QUEUE_OOSEQ


1079 
t˝_£g
 *

1080 
	$t˝_£g_c›y
(
t˝_£g
 *
£g
)

1082 
t˝_£g
 *
c£g
;

1084 
c£g
 = (
t˝_£g
 *)
	`memp_mÆloc
(
MEMP_TCP_SEG
);

1085 i‡(
c£g
 =
NULL
) {

1086  
NULL
;

1088 
	`SMEMCPY
((
u8_t
 *)
c£g
, (c⁄° u8_à*)
£g
, (
t˝_£g
));

1089 
	`pbuf_ªf
(
c£g
->
p
);

1090  
c£g
;

1091 
	}
}

1094 #i‡
LWIP_CALLBACK_API


1099 
îr_t


1100 
	$t˝_ªcv_nuŒ
(*
¨g
, 
t˝_pcb
 *
pcb
, 
pbuf
 *
p
, 
îr_t
 
îr
)

1102 
	`LWIP_UNUSED_ARG
(
¨g
);

1103 i‡(
p
 !
NULL
) {

1104 
	`t˝_ªcved
(
pcb
, 
p
->
tŸ_Àn
);

1105 
	`pbuf_‰ì
(
p
);

1106 } i‡(
îr
 =
ERR_OK
) {

1107  
	`t˝_˛o£
(
pcb
);

1109  
ERR_OK
;

1110 
	}
}

1119 
	$t˝_kûl_¥io
(
u8_t
 
¥io
)

1121 
t˝_pcb
 *
pcb
, *
öa˘ive
;

1122 
u32_t
 
öa˘ivôy
;

1123 
u8_t
 
m¥io
;

1126 
m¥io
 = 
TCP_PRIO_MAX
;

1129 
öa˘ivôy
 = 0;

1130 
öa˘ive
 = 
NULL
;

1131 
pcb
 = 
t˝_a˘ive_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

1132 i‡(
pcb
->
¥io
 <=Örio &&

1133 
pcb
->
¥io
 <
m¥io
 &&

1134 (
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
Ë>
öa˘ivôy
) {

1135 
öa˘ivôy
 = 
t˝_ticks
 - 
pcb
->
tmr
;

1136 
öa˘ive
 = 
pcb
;

1137 
m¥io
 = 
pcb
->
¥io
;

1140 i‡(
öa˘ive
 !
NULL
) {

1141 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_kûl_¥io: kûlög olde° PCB %∞(%"
S32_F
")\n",

1142 (*)
öa˘ive
, 
öa˘ivôy
));

1143 
	`t˝_ab‹t
(
öa˘ive
);

1145 
	}
}

1152 
	$t˝_kûl_timewaô
()

1154 
t˝_pcb
 *
pcb
, *
öa˘ive
;

1155 
u32_t
 
öa˘ivôy
;

1157 
öa˘ivôy
 = 0;

1158 
öa˘ive
 = 
NULL
;

1160 
pcb
 = 
t˝_tw_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

1161 i‡((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
Ë>
öa˘ivôy
) {

1162 
öa˘ivôy
 = 
t˝_ticks
 - 
pcb
->
tmr
;

1163 
öa˘ive
 = 
pcb
;

1166 i‡(
öa˘ive
 !
NULL
) {

1167 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_kûl_timewaô: kûlög olde° TIME-WAIT PCB %∞(%"
S32_F
")\n",

1168 (*)
öa˘ive
, 
öa˘ivôy
));

1169 
	`t˝_ab‹t
(
öa˘ive
);

1171 
	}
}

1179 
t˝_pcb
 *

1180 
	$t˝_Æloc
(
u8_t
 
¥io
)

1182 
t˝_pcb
 *
pcb
;

1183 
u32_t
 
iss
;

1185 
pcb
 = (
t˝_pcb
 *)
	`memp_mÆloc
(
MEMP_TCP_PCB
);

1186 i‡(
pcb
 =
NULL
) {

1188 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));

1189 
	`t˝_kûl_timewaô
();

1191 
pcb
 = (
t˝_pcb
 *)
	`memp_mÆloc
(
MEMP_TCP_PCB
);

1192 i‡(
pcb
 =
NULL
) {

1194 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_Æloc: kûlög c⁄√˘i⁄ wôhÖriÿlowîÅh™ %d\n", 
¥io
));

1195 
	`t˝_kûl_¥io
(
¥io
);

1197 
pcb
 = (
t˝_pcb
 *)
	`memp_mÆloc
(
MEMP_TCP_PCB
);

1198 i‡(
pcb
 !
NULL
) {

1200 
	`MEMP_STATS_DEC
(
îr
, 
MEMP_TCP_PCB
);

1203 i‡(
pcb
 !
NULL
) {

1205 
	`MEMP_STATS_DEC
(
îr
, 
MEMP_TCP_PCB
);

1208 i‡(
pcb
 !
NULL
) {

1209 
	`mem£t
(
pcb
, 0, (
t˝_pcb
));

1210 
pcb
->
¥io
 =Örio;

1211 
pcb
->
¢d_buf
 = 
TCP_SND_BUF
;

1212 
pcb
->
¢d_queuñí
 = 0;

1213 
pcb
->
rcv_wnd
 = 
TCP_WND
;

1214 
pcb
->
rcv_™n_wnd
 = 
TCP_WND
;

1215 
pcb
->
tos
 = 0;

1216 
pcb
->
âl
 = 
TCP_TTL
;

1219 
pcb
->
mss
 = (
TCP_MSS
 > 536) ? 536 : TCP_MSS;

1220 
pcb
->
πo
 = 3000 / 
TCP_SLOW_INTERVAL
;

1221 
pcb
->
ß
 = 0;

1222 
pcb
->
sv
 = 3000 / 
TCP_SLOW_INTERVAL
;

1223 
pcb
->
πime
 = -1;

1224 
pcb
->
cwnd
 = 1;

1225 
iss
 = 
	`t˝_√xt_iss
();

1226 
pcb
->
¢d_wl2
 = 
iss
;

1227 
pcb
->
¢d_nxt
 = 
iss
;

1228 
pcb
->
œ°ack
 = 
iss
;

1229 
pcb
->
¢d_lbb
 = 
iss
;

1230 
pcb
->
tmr
 = 
t˝_ticks
;

1232 
pcb
->
pﬁ…mr
 = 0;

1234 #i‡
LWIP_CALLBACK_API


1235 
pcb
->
ªcv
 = 
t˝_ªcv_nuŒ
;

1239 
pcb
->
kìp_idÀ
 = 
TCP_KEEPIDLE_DEFAULT
;

1241 #i‡
LWIP_TCP_KEEPALIVE


1242 
pcb
->
kìp_ötvl
 = 
TCP_KEEPINTVL_DEFAULT
;

1243 
pcb
->
kìp_˙t
 = 
TCP_KEEPCNT_DEFAULT
;

1246 
pcb
->
kìp_˙t_£¡
 = 0;

1248  
pcb
;

1249 
	}
}

1263 
t˝_pcb
 *

1264 
	$t˝_√w
()

1266  
	`t˝_Æloc
(
TCP_PRIO_NORMAL
);

1267 
	}
}

1277 
	$t˝_¨g
(
t˝_pcb
 *
pcb
, *
¨g
)

1279 
pcb
->
ˇŒback_¨g
 = 
¨g
;

1280 
	}
}

1281 #i‡
LWIP_CALLBACK_API


1291 
	$t˝_ªcv
(
t˝_pcb
 *
pcb
, 
t˝_ªcv_‚
 
ªcv
)

1293 
pcb
->
ªcv
 =Ñecv;

1294 
	}
}

1304 
	$t˝_£¡
(
t˝_pcb
 *
pcb
, 
t˝_£¡_‚
 
£¡
)

1306 
pcb
->
£¡
 = sent;

1307 
	}
}

1318 
	$t˝_îr
(
t˝_pcb
 *
pcb
, 
t˝_îr_‚
 
îr
)

1320 
pcb
->
îrf
 = 
îr
;

1321 
	}
}

1332 
	$t˝_ac˚±
(
t˝_pcb
 *
pcb
, 
t˝_ac˚±_‚
 
ac˚±
)

1334 
pcb
->
ac˚±
 =áccept;

1335 
	}
}

1346 
	$t˝_pﬁl
(
t˝_pcb
 *
pcb
, 
t˝_pﬁl_‚
 
pﬁl
, 
u8_t
 
öãrvÆ
)

1348 #i‡
LWIP_CALLBACK_API


1349 
pcb
->
pﬁl
 =Öoll;

1351 
	`LWIP_UNUSED_ARG
(
pﬁl
);

1353 
pcb
->
pﬁlöãrvÆ
 = 
öãrvÆ
;

1354 
	}
}

1363 
	$t˝_pcb_purge
(
t˝_pcb
 *
pcb
)

1365 i‡(
pcb
->
°©e
 !
CLOSED
 &&

1366 
pcb
->
°©e
 !
TIME_WAIT
 &&

1367 
pcb
->
°©e
 !
LISTEN
) {

1369 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_pcb_purge\n"));

1371 #i‡
TCP_LISTEN_BACKLOG


1372 i‡(
pcb
->
°©e
 =
SYN_RCVD
) {

1374 
t˝_pcb_li°í
 *
Õcb
;

1375 
	`LWIP_ASSERT
("tcp_pcb_purge:Öcb->state == SYN_RCVD butÅcp_listen_pcbs is NULL",

1376 
t˝_li°í_pcbs
.
li°í_pcbs
 !
NULL
);

1377 
Õcb
 = 
t˝_li°í_pcbs
.
li°í_pcbs
;Üpcb !
NULL
;Üpcb =Üpcb->
√xt
) {

1378 i‡((
Õcb
->
loˇl_p‹t
 =
pcb
->local_port) &&

1379 (
	`ù_addr_ißny
(&
Õcb
->
loˇl_ù
) ||

1380 
	`ù_addr_cmp
(&
pcb
->
loˇl_ù
, &
Õcb
->local_ip))) {

1382 
	`LWIP_ASSERT
("tcp_pcb_purge:ÜistenÖcb doesÇot haveácceptsÖending",

1383 
Õcb
->
ac˚±s_≥ndög
 > 0);

1384 
Õcb
->
ac˚±s_≥ndög
--;

1392 i‡(
pcb
->
ªfu£d_d©a
 !
NULL
) {

1393 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_pcb_purge: dataÜeft on ->refused_data\n"));

1394 
	`pbuf_‰ì
(
pcb
->
ªfu£d_d©a
);

1395 
pcb
->
ªfu£d_d©a
 = 
NULL
;

1397 i‡(
pcb
->
un£¡
 !
NULL
) {

1398 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_pcb_purge:Çotáll data sent\n"));

1400 i‡(
pcb
->
u«cked
 !
NULL
) {

1401 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_pcb_purge: dataÜeft on ->unacked\n"));

1403 #i‡
TCP_QUEUE_OOSEQ


1404 i‡(
pcb
->
oo£q
 !
NULL
) {

1405 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_pcb_purge: dataÜeft on ->ooseq\n"));

1407 
	`t˝_£gs_‰ì
(
pcb
->
oo£q
);

1408 
pcb
->
oo£q
 = 
NULL
;

1413 
pcb
->
πime
 = -1;

1415 
	`t˝_£gs_‰ì
(
pcb
->
un£¡
);

1416 
	`t˝_£gs_‰ì
(
pcb
->
u«cked
);

1417 
pcb
->
u«cked
 =Öcb->
un£¡
 = 
NULL
;

1418 #i‡
TCP_OVERSIZE


1419 
pcb
->
un£¡_ovîsize
 = 0;

1422 
	}
}

1431 
	$t˝_pcb_ªmove
(
t˝_pcb
 **
pcbli°
, t˝_pcb *
pcb
)

1433 
	`TCP_RMV
(
pcbli°
, 
pcb
);

1435 
	`t˝_pcb_purge
(
pcb
);

1438 i‡(
pcb
->
°©e
 !
TIME_WAIT
 &&

1439 
pcb
->
°©e
 !
LISTEN
 &&

1440 
pcb
->
Êags
 & 
TF_ACK_DELAY
) {

1441 
pcb
->
Êags
 |
TF_ACK_NOW
;

1442 
	`t˝_ouçut
(
pcb
);

1445 i‡(
pcb
->
°©e
 !
LISTEN
) {

1446 
	`LWIP_ASSERT
("un£¡ segmít†Àakög", 
pcb
->
un£¡
 =
NULL
);

1447 
	`LWIP_ASSERT
("u«cked segmít†Àakög", 
pcb
->
u«cked
 =
NULL
);

1448 #i‡
TCP_QUEUE_OOSEQ


1449 
	`LWIP_ASSERT
("oo£q segmít†Àakög", 
pcb
->
oo£q
 =
NULL
);

1453 
pcb
->
°©e
 = 
CLOSED
;

1455 
	`LWIP_ASSERT
("t˝_pcb_ªmove:Å˝_pcbs_ß√()", 
	`t˝_pcbs_ß√
());

1456 
	}
}

1463 
u32_t


1464 
	$t˝_√xt_iss
()

1466 
u32_t
 
iss
 = 6510;

1468 
iss
 +
t˝_ticks
;

1469  
iss
;

1470 
	}
}

1472 #i‡
TCP_CALCULATE_EFF_SEND_MSS


1478 
u16_t


1479 
	$t˝_eff_£nd_mss
(
u16_t
 
£ndmss
, 
ù_addr_t
 *
addr
)

1481 
u16_t
 
mss_s
;

1482 
√tif
 *
outif
;

1484 
outif
 = 
	`ù_rouã
(
addr
);

1485 i‡((
outif
 !
NULL
Ë&& (outif->
mtu
 != 0)) {

1486 
mss_s
 = 
outif
->
mtu
 - 
IP_HLEN
 - 
TCP_HLEN
;

1491 
£ndmss
 = 
	`LWIP_MIN
(£ndmss, 
mss_s
);

1493  
£ndmss
;

1494 
	}
}

1498 
	$t˝_debug_°©e_°r
(
t˝_°©e
 
s
)

1500  
t˝_°©e_°r
[
s
];

1501 
	}
}

1503 #i‡
TCP_DEBUG
 || 
TCP_INPUT_DEBUG
 || 
TCP_OUTPUT_DEBUG


1510 
	$t˝_debug_¥öt
(
t˝_hdr
 *
t˝hdr
)

1512 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP header:\n"));

1513 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1514 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("| %5"
U16_F
" | %5"U16_F" | (srcÖort, destÖort)\n",

1515 
	`¡ohs
(
t˝hdr
->
§c
),Çtohs—˝hdr->
de°
)));

1516 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1517 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("| %010"
U32_F
" | (seqÇo)\n",

1518 
	`¡ohl
(
t˝hdr
->
£qno
)));

1519 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1520 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("| %010"
U32_F
" | (ackÇo)\n",

1521 
	`¡ohl
(
t˝hdr
->
ackno
)));

1522 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1523 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("| %2"
U16_F
" | |%"U16_F"%"U16_F"%"U16_F"%"U16_F"%"U16_F"%"U16_F"| %5"U16_F" | (hdrlen, flags (",

1524 
	`TCPH_HDRLEN
(
t˝hdr
),

1525 
	`TCPH_FLAGS
(
t˝hdr
) >> 5 & 1,

1526 
	`TCPH_FLAGS
(
t˝hdr
) >> 4 & 1,

1527 
	`TCPH_FLAGS
(
t˝hdr
) >> 3 & 1,

1528 
	`TCPH_FLAGS
(
t˝hdr
) >> 2 & 1,

1529 
	`TCPH_FLAGS
(
t˝hdr
) >> 1 & 1,

1530 
	`TCPH_FLAGS
(
t˝hdr
) & 1,

1531 
	`¡ohs
(
t˝hdr
->
wnd
)));

1532 
	`t˝_debug_¥öt_Êags
(
	`TCPH_FLAGS
(
t˝hdr
));

1533 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("), win)\n"));

1534 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1535 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("| 0x%04"
X16_F
" | %5"
U16_F
" | (chksum, urgp)\n",

1536 
	`¡ohs
(
t˝hdr
->
chksum
),Çtohs—˝hdr->
urgp
)));

1537 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1538 
	}
}

1546 
	$t˝_debug_¥öt_°©e
(
t˝_°©e
 
s
)

1548 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("Sèã: %s\n", 
t˝_°©e_°r
[
s
]));

1549 
	}
}

1557 
	$t˝_debug_¥öt_Êags
(
u8_t
 
Êags
)

1559 i‡(
Êags
 & 
TCP_FIN
) {

1560 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("FIN "));

1562 i‡(
Êags
 & 
TCP_SYN
) {

1563 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("SYN "));

1565 i‡(
Êags
 & 
TCP_RST
) {

1566 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("RST "));

1568 i‡(
Êags
 & 
TCP_PSH
) {

1569 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("PSH "));

1571 i‡(
Êags
 & 
TCP_ACK
) {

1572 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("ACK "));

1574 i‡(
Êags
 & 
TCP_URG
) {

1575 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("URG "));

1577 i‡(
Êags
 & 
TCP_ECE
) {

1578 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("ECE "));

1580 i‡(
Êags
 & 
TCP_CWR
) {

1581 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("CWR "));

1583 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("\n"));

1584 
	}
}

1590 
	$t˝_debug_¥öt_pcbs
()

1592 
t˝_pcb
 *
pcb
;

1593 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("Active PCB states:\n"));

1594 
pcb
 = 
t˝_a˘ive_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

1595 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("Loˇ»p‹à%"
U16_F
", f‹eig¿p‹à%"U16_F" snd_nxà%"
U32_F
"Ñcv_nxt %"U32_F" ",

1596 
pcb
->
loˇl_p‹t
,Öcb->
ªmŸe_p‹t
,

1597 
pcb
->
¢d_nxt
,Öcb->
rcv_nxt
));

1598 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

1600 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("Listen PCB states:\n"));

1601 
pcb
 = (
t˝_pcb
 *)
t˝_li°í_pcbs
.
pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

1602 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("Loˇ»p‹à%"
U16_F
", f‹eig¿p‹à%"U16_F" snd_nxà%"
U32_F
"Ñcv_nxt %"U32_F" ",

1603 
pcb
->
loˇl_p‹t
,Öcb->
ªmŸe_p‹t
,

1604 
pcb
->
¢d_nxt
,Öcb->
rcv_nxt
));

1605 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

1607 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TIME-WAIT PCB states:\n"));

1608 
pcb
 = 
t˝_tw_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

1609 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("Loˇ»p‹à%"
U16_F
", f‹eig¿p‹à%"U16_F" snd_nxà%"
U32_F
"Ñcv_nxt %"U32_F" ",

1610 
pcb
->
loˇl_p‹t
,Öcb->
ªmŸe_p‹t
,

1611 
pcb
->
¢d_nxt
,Öcb->
rcv_nxt
));

1612 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

1614 
	}
}

1619 
s16_t


1620 
	$t˝_pcbs_ß√
()

1622 
t˝_pcb
 *
pcb
;

1623 
pcb
 = 
t˝_a˘ive_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

1624 
	`LWIP_ASSERT
("t˝_pcbs_ß√:á˘ivêpcb->°©ê!CLOSED", 
pcb
->
°©e
 !
CLOSED
);

1625 
	`LWIP_ASSERT
("t˝_pcbs_ß√:á˘ivêpcb->°©ê!LISTEN", 
pcb
->
°©e
 !
LISTEN
);

1626 
	`LWIP_ASSERT
("t˝_pcbs_ß√:á˘ivêpcb->°©ê!TIME-WAIT", 
pcb
->
°©e
 !
TIME_WAIT
);

1628 
pcb
 = 
t˝_tw_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

1629 
	`LWIP_ASSERT
("t˝_pcbs_ß√:ÅwÖcb->°©ê=TIME-WAIT", 
pcb
->
°©e
 =
TIME_WAIT
);

1632 
	}
}

	@core/tcp_in.c

44 
	~"lwù/›t.h
"

46 #i‡
LWIP_TCP


48 
	~"lwù/t˝_im∂.h
"

49 
	~"lwù/def.h
"

50 
	~"lwù/ù_addr.h
"

51 
	~"lwù/√tif.h
"

52 
	~"lwù/mem.h
"

53 
	~"lwù/memp.h
"

54 
	~"lwù/öë_chksum.h
"

55 
	~"lwù/°©s.h
"

56 
	~"lwù/¢mp.h
"

57 
	~"¨ch/≥rf.h
"

62 
t˝_£g
 
	gö£g
;

63 
t˝_hdr
 *
	gt˝hdr
;

64 
ù_hdr
 *
	gùhdr
;

65 
u32_t
 
	g£qno
, 
	gackno
;

66 
u8_t
 
	gÊags
;

67 
u16_t
 
	gt˝Àn
;

69 
u8_t
 
	gªcv_Êags
;

70 
pbuf
 *
	gªcv_d©a
;

72 
t˝_pcb
 *
	gt˝_öput_pcb
;

75 
îr_t
 
t˝_¥o˚ss
(
t˝_pcb
 *
pcb
);

76 
t˝_ª˚ive
(
t˝_pcb
 *
pcb
);

77 
t˝_∑r£›t
(
t˝_pcb
 *
pcb
);

79 
îr_t
 
t˝_li°í_öput
(
t˝_pcb_li°í
 *
pcb
);

80 
îr_t
 
t˝_timewaô_öput
(
t˝_pcb
 *
pcb
);

92 
	$t˝_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

94 
t˝_pcb
 *
pcb
, *
¥ev
;

95 
t˝_pcb_li°í
 *
Õcb
;

96 #i‡
SO_REUSE


97 
t˝_pcb
 *
Õcb_¥ev
 = 
NULL
;

98 
t˝_pcb_li°í
 *
Õcb_™y
 = 
NULL
;

100 
u8_t
 
hdæí
;

101 
îr_t
 
îr
;

103 
PERF_START
;

105 
	`TCP_STATS_INC
(
t˝
.
ªcv
);

106 
	`¢mp_öc_t˝ö£gs
();

108 
ùhdr
 = (
ù_hdr
 *)
p
->
∑ylﬂd
;

109 
t˝hdr
 = (
t˝_hdr
 *)((
u8_t
 *)
p
->
∑ylﬂd
 + 
	`IPH_HL
(
ùhdr
) * 4);

111 #i‡
TCP_INPUT_DEBUG


112 
	`t˝_debug_¥öt
(
t˝hdr
);

116 i‡(
	`pbuf_hódî
(
p
, -((
s16_t
)(
	`IPH_HL
(
ùhdr
Ë* 4))Ë|| (p->
tŸ_Àn
 < (
t˝_hdr
))) {

118 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_öput: sh‹à∑ckë (%"
U16_F
" byãsËdisˇrded\n", 
p
->
tŸ_Àn
));

119 
	`TCP_STATS_INC
(
t˝
.
À√º
);

120 
	`TCP_STATS_INC
(
t˝
.
dr›
);

121 
	`¢mp_öc_t˝öîrs
();

122 
	`pbuf_‰ì
(
p
);

127 i‡(
	`ù_addr_isbrﬂdˇ°
(&
cuºít_ùhdr_de°
, 
öp
) ||

128 
	`ù_addr_ismu…iˇ°
(&
cuºít_ùhdr_de°
)) {

129 
	`TCP_STATS_INC
(
t˝
.
¥Ÿîr
);

130 
	`TCP_STATS_INC
(
t˝
.
dr›
);

131 
	`¢mp_öc_t˝öîrs
();

132 
	`pbuf_‰ì
(
p
);

136 #i‡
CHECKSUM_CHECK_TCP


138 i‡(
	`öë_chksum_p£udo
(
p
, 
	`ù_cuºít_§c_addr
(), 
	`ù_cuºít_de°_addr
(),

139 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
) != 0) {

140 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_öput:Öackë disˇrded duêtÿÁûög checksum 0x%04"
X16_F
"\n",

141 
	`öë_chksum_p£udo
(
p
, 
	`ù_cuºít_§c_addr
(), 
	`ù_cuºít_de°_addr
(),

142 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
)));

143 #i‡
TCP_DEBUG


144 
	`t˝_debug_¥öt
(
t˝hdr
);

146 
	`TCP_STATS_INC
(
t˝
.
chkîr
);

147 
	`TCP_STATS_INC
(
t˝
.
dr›
);

148 
	`¢mp_öc_t˝öîrs
();

149 
	`pbuf_‰ì
(
p
);

156 
hdæí
 = 
	`TCPH_HDRLEN
(
t˝hdr
);

157 if(
	`pbuf_hódî
(
p
, -(
hdæí
 * 4))){

159 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input: shortÖacket\n"));

160 
	`TCP_STATS_INC
(
t˝
.
À√º
);

161 
	`TCP_STATS_INC
(
t˝
.
dr›
);

162 
	`¢mp_öc_t˝öîrs
();

163 
	`pbuf_‰ì
(
p
);

168 
t˝hdr
->
§c
 = 
	`¡ohs
(tcphdr->src);

169 
t˝hdr
->
de°
 = 
	`¡ohs
(tcphdr->dest);

170 
£qno
 = 
t˝hdr
->£qnÿ
	`¡ohl
(tcphdr->seqno);

171 
ackno
 = 
t˝hdr
->acknÿ
	`¡ohl
(tcphdr->ackno);

172 
t˝hdr
->
wnd
 = 
	`¡ohs
(tcphdr->wnd);

174 
Êags
 = 
	`TCPH_FLAGS
(
t˝hdr
);

175 
t˝Àn
 = 
p
->
tŸ_Àn
 + ((
Êags
 & (
TCP_FIN
 | 
TCP_SYN
)) ? 1 : 0);

179 
¥ev
 = 
NULL
;

182 
pcb
 = 
t˝_a˘ive_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

183 
	`LWIP_ASSERT
("t˝_öput:á˘ivêpcb->°©ê!CLOSED", 
pcb
->
°©e
 !
CLOSED
);

184 
	`LWIP_ASSERT
("t˝_öput:á˘ivêpcb->°©ê!TIME-WAIT", 
pcb
->
°©e
 !
TIME_WAIT
);

185 
	`LWIP_ASSERT
("t˝_öput:á˘ivêpcb->°©ê!LISTEN", 
pcb
->
°©e
 !
LISTEN
);

186 i‡(
pcb
->
ªmŸe_p‹t
 =
t˝hdr
->
§c
 &&

187 
pcb
->
loˇl_p‹t
 =
t˝hdr
->
de°
 &&

188 
	`ù_addr_cmp
(&(
pcb
->
ªmŸe_ù
), &
cuºít_ùhdr_§c
) &&

189 
	`ù_addr_cmp
(&(
pcb
->
loˇl_ù
), &
cuºít_ùhdr_de°
)) {

194 
	`LWIP_ASSERT
("t˝_öput:Öcb->√xà!pcb (bef‹êˇche)", 
pcb
->
√xt
 !=Öcb);

195 i‡(
¥ev
 !
NULL
) {

196 
¥ev
->
√xt
 = 
pcb
->next;

197 
pcb
->
√xt
 = 
t˝_a˘ive_pcbs
;

198 
t˝_a˘ive_pcbs
 = 
pcb
;

200 
	`LWIP_ASSERT
("t˝_öput:Öcb->√xà!pcb (a·î cache)", 
pcb
->
√xt
 !=Öcb);

203 
¥ev
 = 
pcb
;

206 i‡(
pcb
 =
NULL
) {

209 
pcb
 = 
t˝_tw_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

210 
	`LWIP_ASSERT
("t˝_öput: TIME-WAITÖcb->°©ê=TIME-WAIT", 
pcb
->
°©e
 =
TIME_WAIT
);

211 i‡(
pcb
->
ªmŸe_p‹t
 =
t˝hdr
->
§c
 &&

212 
pcb
->
loˇl_p‹t
 =
t˝hdr
->
de°
 &&

213 
	`ù_addr_cmp
(&(
pcb
->
ªmŸe_ù
), &
cuºít_ùhdr_§c
) &&

214 
	`ù_addr_cmp
(&(
pcb
->
loˇl_ù
), &
cuºít_ùhdr_de°
)) {

218 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input:Öacked for TIME_WAITing connection.\n"));

219 
	`t˝_timewaô_öput
(
pcb
);

220 
	`pbuf_‰ì
(
p
);

227 
¥ev
 = 
NULL
;

228 
Õcb
 = 
t˝_li°í_pcbs
.
li°í_pcbs
;Üpcb !
NULL
;Üpcb =Üpcb->
√xt
) {

229 i‡(
Õcb
->
loˇl_p‹t
 =
t˝hdr
->
de°
) {

230 #i‡
SO_REUSE


231 i‡(
	`ù_addr_cmp
(&(
Õcb
->
loˇl_ù
), &
cuºít_ùhdr_de°
)) {

234 } if(
	`ù_addr_ißny
(&(
Õcb
->
loˇl_ù
))) {

236 
Õcb_™y
 = 
Õcb
;

237 
Õcb_¥ev
 = 
¥ev
;

240 i‡(
	`ù_addr_cmp
(&(
Õcb
->
loˇl_ù
), &
cuºít_ùhdr_de°
) ||

241 
	`ù_addr_ißny
(&(
Õcb
->
loˇl_ù
))) {

247 
¥ev
 = (
t˝_pcb
 *)
Õcb
;

249 #i‡
SO_REUSE


251 i‡(
Õcb
 =
NULL
) {

253 
Õcb
 = 
Õcb_™y
;

254 
¥ev
 = 
Õcb_¥ev
;

257 i‡(
Õcb
 !
NULL
) {

261 i‡(
¥ev
 !
NULL
) {

262 ((
t˝_pcb_li°í
 *)
¥ev
)->
√xt
 = 
Õcb
->next;

264 
Õcb
->
√xt
 = 
t˝_li°í_pcbs
.
li°í_pcbs
;

266 
t˝_li°í_pcbs
.
li°í_pcbs
 = 
Õcb
;

269 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input:Öacked for LISTENing connection.\n"));

270 
	`t˝_li°í_öput
(
Õcb
);

271 
	`pbuf_‰ì
(
p
);

276 #i‡
TCP_INPUT_DEBUG


277 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("+-+-+-+-+-+-+-+-+-+-+-+-+-+-Åcp_input: flags "));

278 
	`t˝_debug_¥öt_Êags
(
	`TCPH_FLAGS
(
t˝hdr
));

279 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));

283 i‡(
pcb
 !
NULL
) {

285 #i‡
TCP_INPUT_DEBUG


286 #i‡
TCP_DEBUG


287 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

292 
ö£g
.
√xt
 = 
NULL
;

293 
ö£g
.
Àn
 = 
p
->
tŸ_Àn
;

294 
ö£g
.
p
 =Ö;

295 
ö£g
.
t˝hdr
 =Åcphdr;

297 
ªcv_d©a
 = 
NULL
;

298 
ªcv_Êags
 = 0;

301 i‡(
pcb
->
ªfu£d_d©a
 !
NULL
) {

303 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input:Çotify keptÖacket\n"));

304 
	`TCP_EVENT_RECV
(
pcb
,Öcb->
ªfu£d_d©a
, 
ERR_OK
, 
îr
);

305 i‡(
îr
 =
ERR_OK
) {

306 
pcb
->
ªfu£d_d©a
 = 
NULL
;

307 } i‡((
îr
 =
ERR_ABRT
Ë|| (
t˝Àn
 > 0)) {

311 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input: drop incomingÖackets, becauseÖcb is \"full\"\n"));

312 
	`TCP_STATS_INC
(
t˝
.
dr›
);

313 
	`¢mp_öc_t˝öîrs
();

314 
	`pbuf_‰ì
(
p
);

318 
t˝_öput_pcb
 = 
pcb
;

319 
îr
 = 
	`t˝_¥o˚ss
(
pcb
);

322 i‡(
îr
 !
ERR_ABRT
) {

323 i‡(
ªcv_Êags
 & 
TF_RESET
) {

328 
	`TCP_EVENT_ERR
(
pcb
->
îrf
,Öcb->
ˇŒback_¨g
, 
ERR_RST
);

329 
	`t˝_pcb_ªmove
(&
t˝_a˘ive_pcbs
, 
pcb
);

330 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

331 } i‡(
ªcv_Êags
 & 
TF_CLOSED
) {

334 
	`t˝_pcb_ªmove
(&
t˝_a˘ive_pcbs
, 
pcb
);

335 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

337 
îr
 = 
ERR_OK
;

341 i‡(
pcb
->
acked
 > 0) {

342 
	`TCP_EVENT_SENT
(
pcb
,Öcb->
acked
, 
îr
);

343 i‡(
îr
 =
ERR_ABRT
) {

344 
ab‹ãd
;

348 i‡(
ªcv_d©a
 !
NULL
) {

349 
	`LWIP_ASSERT
("pcb->ªfu£d_d©®=NULL", 
pcb
->
ªfu£d_d©a
 =
NULL
);

350 i‡(
pcb
->
Êags
 & 
TF_RXCLOSED
) {

353 
	`pbuf_‰ì
(
ªcv_d©a
);

354 
	`t˝_ab‹t
(
pcb
);

355 
ab‹ãd
;

357 i‡(
Êags
 & 
TCP_PSH
) {

358 
ªcv_d©a
->
Êags
 |
PBUF_FLAG_PUSH
;

362 
	`TCP_EVENT_RECV
(
pcb
, 
ªcv_d©a
, 
ERR_OK
, 
îr
);

363 i‡(
îr
 =
ERR_ABRT
) {

364 
ab‹ãd
;

368 i‡(
îr
 !
ERR_OK
) {

369 
pcb
->
ªfu£d_d©a
 = 
ªcv_d©a
;

370 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input: keep incomingÖacket, becauseÖcb is \"full\"\n"));

376 i‡(
ªcv_Êags
 & 
TF_GOT_FIN
) {

379 i‡(
pcb
->
rcv_wnd
 !
TCP_WND
) {

380 
pcb
->
rcv_wnd
++;

382 
	`TCP_EVENT_CLOSED
(
pcb
, 
îr
);

383 i‡(
îr
 =
ERR_ABRT
) {

384 
ab‹ãd
;

388 
t˝_öput_pcb
 = 
NULL
;

390 
	`t˝_ouçut
(
pcb
);

391 #i‡
TCP_INPUT_DEBUG


392 #i‡
TCP_DEBUG


393 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

400 
ab‹ãd
:

401 
t˝_öput_pcb
 = 
NULL
;

402 
ªcv_d©a
 = 
NULL
;

405 i‡(
ö£g
.
p
 !
NULL
)

407 
	`pbuf_‰ì
(
ö£g
.
p
);

408 
ö£g
.
p
 = 
NULL
;

414 
	`LWIP_DEBUGF
(
TCP_RST_DEBUG
, ("tcp_input:Ço PCB match found,Ñesetting.\n"));

415 i‡(!(
	`TCPH_FLAGS
(
t˝hdr
Ë& 
TCP_RST
)) {

416 
	`TCP_STATS_INC
(
t˝
.
¥Ÿîr
);

417 
	`TCP_STATS_INC
(
t˝
.
dr›
);

418 
	`t˝_r°
(
ackno
, 
£qno
 + 
t˝Àn
,

419 
	`ù_cuºít_de°_addr
(), 
	`ù_cuºít_§c_addr
(),

420 
t˝hdr
->
de°
,Å˝hdr->
§c
);

422 
	`pbuf_‰ì
(
p
);

425 
	`LWIP_ASSERT
("t˝_öput:Å˝_pcbs_ß√()", 
	`t˝_pcbs_ß√
());

426 
	`PERF_STOP
("tcp_input");

427 
	}
}

441 
îr_t


442 
	$t˝_li°í_öput
(
t˝_pcb_li°í
 *
pcb
)

444 
t˝_pcb
 *
≈cb
;

445 
îr_t
 
rc
;

449 i‡(
Êags
 & 
TCP_ACK
) {

452 
	`LWIP_DEBUGF
(
TCP_RST_DEBUG
, ("tcp_listen_input: ACK in LISTEN, sendingÑeset\n"));

453 
	`t˝_r°
(
ackno
 + 1, 
£qno
 + 
t˝Àn
,

454 
	`ù_cuºít_de°_addr
(), 
	`ù_cuºít_§c_addr
(),

455 
t˝hdr
->
de°
,Å˝hdr->
§c
);

456 } i‡(
Êags
 & 
TCP_SYN
) {

457 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP c⁄√˘i⁄Ñeque° %"
U16_F
" -> %"U16_F".\n", 
t˝hdr
->
§c
,Å˝hdr->
de°
));

458 #i‡
TCP_LISTEN_BACKLOG


459 i‡(
pcb
->
ac˚±s_≥ndög
 >pcb->
backlog
) {

460 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_li°í_öput:Üi°í backlogÉx˚eded f‹Ö‹à%"
U16_F
"\n", 
t˝hdr
->
de°
));

461  
ERR_ABRT
;

464 
≈cb
 = 
	`t˝_Æloc
(
pcb
->
¥io
);

468 i‡(
≈cb
 =
NULL
) {

469 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_listen_input: couldÇotállocate PCB\n"));

470 
	`TCP_STATS_INC
(
t˝
.
memîr
);

471  
ERR_MEM
;

473 #i‡
TCP_LISTEN_BACKLOG


474 
pcb
->
ac˚±s_≥ndög
++;

477 
	`ù_addr_c›y
(
≈cb
->
loˇl_ù
, 
cuºít_ùhdr_de°
);

478 
≈cb
->
loˇl_p‹t
 = 
pcb
->local_port;

479 
	`ù_addr_c›y
(
≈cb
->
ªmŸe_ù
, 
cuºít_ùhdr_§c
);

480 
≈cb
->
ªmŸe_p‹t
 = 
t˝hdr
->
§c
;

481 
≈cb
->
°©e
 = 
SYN_RCVD
;

482 
≈cb
->
rcv_nxt
 = 
£qno
 + 1;

483 
≈cb
->
rcv_™n_right_edge
 =Çpcb->
rcv_nxt
;

484 
≈cb
->
¢d_wnd
 = 
t˝hdr
->
wnd
;

485 
≈cb
->
s°hªsh
 =Çpcb->
¢d_wnd
;

486 
≈cb
->
¢d_wl1
 = 
£qno
 - 1;

487 
≈cb
->
ˇŒback_¨g
 = 
pcb
->callback_arg;

488 #i‡
LWIP_CALLBACK_API


489 
≈cb
->
ac˚±
 = 
pcb
->accept;

492 
≈cb
->
so_›ti⁄s
 = 
pcb
->so_›ti⁄†& 
SOF_INHERITED
;

495 
	`TCP_REG
(&
t˝_a˘ive_pcbs
, 
≈cb
);

498 
	`t˝_∑r£›t
(
≈cb
);

499 #i‡
TCP_CALCULATE_EFF_SEND_MSS


500 
≈cb
->
mss
 = 
	`t˝_eff_£nd_mss
“pcb->mss, &“pcb->
ªmŸe_ù
));

503 
	`¢mp_öc_t˝∑ssive›ís
();

506 
rc
 = 
	`t˝_íqueue_Êags
(
≈cb
, 
TCP_SYN
 | 
TCP_ACK
);

507 i‡(
rc
 !
ERR_OK
) {

508 
	`t˝_ab™d⁄
(
≈cb
, 0);

509  
rc
;

511  
	`t˝_ouçut
(
≈cb
);

513  
ERR_OK
;

514 
	}
}

525 
îr_t


526 
	$t˝_timewaô_öput
(
t˝_pcb
 *
pcb
)

533 i‡(
Êags
 & 
TCP_RST
) {

534  
ERR_OK
;

537 i‡(
Êags
 & 
TCP_SYN
) {

540 i‡(
	`TCP_SEQ_BETWEEN
(
£qno
, 
pcb
->
rcv_nxt
,Öcb->rcv_nxt+pcb->
rcv_wnd
)) {

542 
	`t˝_r°
(
ackno
, 
£qno
 + 
t˝Àn
, 
	`ù_cuºít_de°_addr
(), 
	`ù_cuºít_§c_addr
(),

543 
t˝hdr
->
de°
,Å˝hdr->
§c
);

544  
ERR_OK
;

546 } i‡(
Êags
 & 
TCP_FIN
) {

549 
pcb
->
tmr
 = 
t˝_ticks
;

552 i‡((
t˝Àn
 > 0)) {

554 
pcb
->
Êags
 |
TF_ACK_NOW
;

555  
	`t˝_ouçut
(
pcb
);

557  
ERR_OK
;

558 
	}
}

571 
îr_t


572 
	$t˝_¥o˚ss
(
t˝_pcb
 *
pcb
)

574 
t˝_£g
 *
r£g
;

575 
u8_t
 
ac˚±abÀ
 = 0;

576 
îr_t
 
îr
;

578 
îr
 = 
ERR_OK
;

581 i‡(
Êags
 & 
TCP_RST
) {

583 i‡(
pcb
->
°©e
 =
SYN_SENT
) {

584 i‡(
ackno
 =
pcb
->
¢d_nxt
) {

585 
ac˚±abÀ
 = 1;

588 i‡(
	`TCP_SEQ_BETWEEN
(
£qno
, 
pcb
->
rcv_nxt
,

589 
pcb
->
rcv_nxt
+pcb->
rcv_wnd
)) {

590 
ac˚±abÀ
 = 1;

594 i‡(
ac˚±abÀ
) {

595 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_process: Connection RESET\n"));

596 
	`LWIP_ASSERT
("t˝_öput:Öcb->°©ê!CLOSED", 
pcb
->
°©e
 !
CLOSED
);

597 
ªcv_Êags
 |
TF_RESET
;

598 
pcb
->
Êags
 &~
TF_ACK_DELAY
;

599  
ERR_RST
;

601 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_¥o˚ss: u«c˚±abÀÑe£à£qnÿ%"
U32_F
"Ñcv_nxt %"U32_F"\n",

602 
£qno
, 
pcb
->
rcv_nxt
));

603 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_¥o˚ss: u«c˚±abÀÑe£à£qnÿ%"
U32_F
"Ñcv_nxt %"U32_F"\n",

604 
£qno
, 
pcb
->
rcv_nxt
));

605  
ERR_OK
;

609 i‡((
Êags
 & 
TCP_SYN
Ë&& (
pcb
->
°©e
 !
SYN_SENT
 &&Öcb->°©ê!
SYN_RCVD
)) {

611 
	`t˝_ack_now
(
pcb
);

612  
ERR_OK
;

615 i‡((
pcb
->
Êags
 & 
TF_RXCLOSED
) == 0) {

617 
pcb
->
tmr
 = 
t˝_ticks
;

619 
pcb
->
kìp_˙t_£¡
 = 0;

621 
	`t˝_∑r£›t
(
pcb
);

624 
pcb
->
°©e
) {

625 
SYN_SENT
:

626 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("SYN-SENT:ácknÿ%"
U32_F
"Öcb->¢d_nxà%"U32_F" u«cked %"U32_F"\n", 
ackno
,

627 
pcb
->
¢d_nxt
, 
	`¡ohl
’cb->
u«cked
->
t˝hdr
->
£qno
)));

629 i‡((
Êags
 & 
TCP_ACK
Ë&& (Êag†& 
TCP_SYN
)

630 && 
ackno
 =
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
) + 1) {

631 
pcb
->
¢d_buf
++;

632 
pcb
->
rcv_nxt
 = 
£qno
 + 1;

633 
pcb
->
rcv_™n_right_edge
 =Öcb->
rcv_nxt
;

634 
pcb
->
œ°ack
 = 
ackno
;

635 
pcb
->
¢d_wnd
 = 
t˝hdr
->
wnd
;

636 
pcb
->
¢d_wl1
 = 
£qno
 - 1;

637 
pcb
->
°©e
 = 
ESTABLISHED
;

639 #i‡
TCP_CALCULATE_EFF_SEND_MSS


640 
pcb
->
mss
 = 
	`t˝_eff_£nd_mss
’cb->mss, &’cb->
ªmŸe_ù
));

645 
pcb
->
s°hªsh
 =Öcb->
mss
 * 10;

647 
pcb
->
cwnd
 = (’cb->cwnd =1Ë? (pcb->
mss
 * 2) :Öcb->mss);

648 
	`LWIP_ASSERT
("pcb->¢d_queuñí > 0", (
pcb
->
¢d_queuñí
 > 0));

649 --
pcb
->
¢d_queuñí
;

650 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("t˝_¥o˚ss: SYN-SENT --queuñí %"
U16_F
"\n", (
u16_t
)
pcb
->
¢d_queuñí
));

651 
r£g
 = 
pcb
->
u«cked
;

652 
pcb
->
u«cked
 = 
r£g
->
√xt
;

656 if(
pcb
->
u«cked
 =
NULL
)

657 
pcb
->
πime
 = -1;

659 
pcb
->
πime
 = 0;

660 
pcb
->
ƒtx
 = 0;

663 
	`t˝_£g_‰ì
(
r£g
);

667 
	`TCP_EVENT_CONNECTED
(
pcb
, 
ERR_OK
, 
îr
);

668 i‡(
îr
 =
ERR_ABRT
) {

669  
ERR_ABRT
;

671 
	`t˝_ack_now
(
pcb
);

674 i‡(
Êags
 & 
TCP_ACK
) {

676 
	`t˝_r°
(
ackno
, 
£qno
 + 
t˝Àn
, 
	`ù_cuºít_de°_addr
(), 
	`ù_cuºít_§c_addr
(),

677 
t˝hdr
->
de°
,Å˝hdr->
§c
);

680 
SYN_RCVD
:

681 i‡(
Êags
 & 
TCP_ACK
) {

683 i‡(
	`TCP_SEQ_BETWEEN
(
ackno
, 
pcb
->
œ°ack
+1,Öcb->
¢d_nxt
)) {

684 
u16_t
 
ﬁd_cwnd
;

685 
pcb
->
°©e
 = 
ESTABLISHED
;

686 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP c⁄√˘i⁄É°ablished %"
U16_F
" -> %"U16_F".\n", 
ö£g
.
t˝hdr
->
§c
, in£g.t˝hdr->
de°
));

687 #i‡
LWIP_CALLBACK_API


688 
	`LWIP_ASSERT
("pcb->ac˚± !NULL", 
pcb
->
ac˚±
 !
NULL
);

691 
	`TCP_EVENT_ACCEPT
(
pcb
, 
ERR_OK
, 
îr
);

692 i‡(
îr
 !
ERR_OK
) {

696 i‡(
îr
 !
ERR_ABRT
) {

697 
	`t˝_ab‹t
(
pcb
);

699  
ERR_ABRT
;

701 
ﬁd_cwnd
 = 
pcb
->
cwnd
;

704 
	`t˝_ª˚ive
(
pcb
);

707 i‡(
pcb
->
acked
 != 0) {

708 
pcb
->
acked
--;

711 
pcb
->
cwnd
 = ((
ﬁd_cwnd
 =1Ë? (pcb->
mss
 * 2) :Öcb->mss);

713 i‡(
ªcv_Êags
 & 
TF_GOT_FIN
) {

714 
	`t˝_ack_now
(
pcb
);

715 
pcb
->
°©e
 = 
CLOSE_WAIT
;

719 
	`t˝_r°
(
ackno
, 
£qno
 + 
t˝Àn
, 
	`ù_cuºít_de°_addr
(), 
	`ù_cuºít_§c_addr
(),

720 
t˝hdr
->
de°
,Å˝hdr->
§c
);

722 } i‡((
Êags
 & 
TCP_SYN
Ë&& (
£qno
 =
pcb
->
rcv_nxt
 - 1)) {

724 
	`t˝_ªxmô
(
pcb
);

727 
CLOSE_WAIT
:

729 
ESTABLISHED
:

730 
	`t˝_ª˚ive
(
pcb
);

731 i‡(
ªcv_Êags
 & 
TF_GOT_FIN
) {

732 
	`t˝_ack_now
(
pcb
);

733 
pcb
->
°©e
 = 
CLOSE_WAIT
;

736 
FIN_WAIT_1
:

737 
	`t˝_ª˚ive
(
pcb
);

738 i‡(
ªcv_Êags
 & 
TF_GOT_FIN
) {

739 i‡((
Êags
 & 
TCP_ACK
Ë&& (
ackno
 =
pcb
->
¢d_nxt
)) {

740 
	`LWIP_DEBUGF
(
TCP_DEBUG
,

741 ("TCP c⁄√˘i⁄ clo£d: FIN_WAIT_1 %"
U16_F
" -> %"U16_F".\n", 
ö£g
.
t˝hdr
->
§c
, in£g.t˝hdr->
de°
));

742 
	`t˝_ack_now
(
pcb
);

743 
	`t˝_pcb_purge
(
pcb
);

744 
	`TCP_RMV
(&
t˝_a˘ive_pcbs
, 
pcb
);

745 
pcb
->
°©e
 = 
TIME_WAIT
;

746 
	`TCP_REG
(&
t˝_tw_pcbs
, 
pcb
);

748 
	`t˝_ack_now
(
pcb
);

749 
pcb
->
°©e
 = 
CLOSING
;

751 } i‡((
Êags
 & 
TCP_ACK
Ë&& (
ackno
 =
pcb
->
¢d_nxt
)) {

752 
pcb
->
°©e
 = 
FIN_WAIT_2
;

755 
FIN_WAIT_2
:

756 
	`t˝_ª˚ive
(
pcb
);

757 i‡(
ªcv_Êags
 & 
TF_GOT_FIN
) {

758 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP c⁄√˘i⁄ clo£d: FIN_WAIT_2 %"
U16_F
" -> %"U16_F".\n", 
ö£g
.
t˝hdr
->
§c
, in£g.t˝hdr->
de°
));

759 
	`t˝_ack_now
(
pcb
);

760 
	`t˝_pcb_purge
(
pcb
);

761 
	`TCP_RMV
(&
t˝_a˘ive_pcbs
, 
pcb
);

762 
pcb
->
°©e
 = 
TIME_WAIT
;

763 
	`TCP_REG
(&
t˝_tw_pcbs
, 
pcb
);

766 
CLOSING
:

767 
	`t˝_ª˚ive
(
pcb
);

768 i‡(
Êags
 & 
TCP_ACK
 && 
ackno
 =
pcb
->
¢d_nxt
) {

769 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP c⁄√˘i⁄ clo£d: CLOSING %"
U16_F
" -> %"U16_F".\n", 
ö£g
.
t˝hdr
->
§c
, in£g.t˝hdr->
de°
));

770 
	`t˝_pcb_purge
(
pcb
);

771 
	`TCP_RMV
(&
t˝_a˘ive_pcbs
, 
pcb
);

772 
pcb
->
°©e
 = 
TIME_WAIT
;

773 
	`TCP_REG
(&
t˝_tw_pcbs
, 
pcb
);

776 
LAST_ACK
:

777 
	`t˝_ª˚ive
(
pcb
);

778 i‡(
Êags
 & 
TCP_ACK
 && 
ackno
 =
pcb
->
¢d_nxt
) {

779 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP c⁄√˘i⁄ clo£d: LAST_ACK %"
U16_F
" -> %"U16_F".\n", 
ö£g
.
t˝hdr
->
§c
, in£g.t˝hdr->
de°
));

781 
ªcv_Êags
 |
TF_CLOSED
;

787  
ERR_OK
;

788 
	}
}

790 #i‡
TCP_QUEUE_OOSEQ


797 
	$t˝_oos_ö£π_£gmít
(
t˝_£g
 *
c£g
, t˝_£g *
√xt
)

799 
t˝_£g
 *
ﬁd_£g
;

801 i‡(
	`TCPH_FLAGS
(
c£g
->
t˝hdr
Ë& 
TCP_FIN
) {

803 
	`t˝_£gs_‰ì
(
√xt
);

804 
√xt
 = 
NULL
;

809 
√xt
 &&

810 
	`TCP_SEQ_GEQ
((
£qno
 + 
c£g
->
Àn
),

811 (
√xt
->
t˝hdr
->
£qno
 +Çext->
Àn
))) {

813 i‡(
	`TCPH_FLAGS
(
√xt
->
t˝hdr
Ë& 
TCP_FIN
) {

814 
	`TCPH_SET_FLAG
(
c£g
->
t˝hdr
, 
TCP_FIN
);

816 
ﬁd_£g
 = 
√xt
;

817 
√xt
 =Çext->next;

818 
	`t˝_£g_‰ì
(
ﬁd_£g
);

820 i‡(
√xt
 &&

821 
	`TCP_SEQ_GT
(
£qno
 + 
c£g
->
Àn
, 
√xt
->
t˝hdr
->seqno)) {

823 
c£g
->
Àn
 = (
u16_t
)(
√xt
->
t˝hdr
->
£qno
 - seqno);

824 
	`pbuf_ªÆloc
(
c£g
->
p
, c£g->
Àn
);

827 
c£g
->
√xt
 =Çext;

828 
	}
}

844 
	$t˝_ª˚ive
(
t˝_pcb
 *
pcb
)

846 
t˝_£g
 *
√xt
;

847 #i‡
TCP_QUEUE_OOSEQ


848 
t˝_£g
 *
¥ev
, *
c£g
;

850 
pbuf
 *
p
;

851 
s32_t
 
off
;

852 
s16_t
 
m
;

853 
u32_t
 
right_wnd_edge
;

854 
u16_t
 
√w_tŸ_Àn
;

855 
found_du∑ck
 = 0;

857 i‡(
Êags
 & 
TCP_ACK
) {

858 
right_wnd_edge
 = 
pcb
->
¢d_wnd
 +Öcb->
¢d_wl2
;

861 i‡(
	`TCP_SEQ_LT
(
pcb
->
¢d_wl1
, 
£qno
) ||

862 (
pcb
->
¢d_wl1
 =
£qno
 && 
	`TCP_SEQ_LT
’cb->
¢d_wl2
, 
ackno
)) ||

863 (
pcb
->
¢d_wl2
 =
ackno
 && 
t˝hdr
->
wnd
 >Öcb->
¢d_wnd
)) {

864 
pcb
->
¢d_wnd
 = 
t˝hdr
->
wnd
;

865 
pcb
->
¢d_wl1
 = 
£qno
;

866 
pcb
->
¢d_wl2
 = 
ackno
;

867 i‡(
pcb
->
¢d_wnd
 > 0 &&Öcb->
≥rsi°_backoff
 > 0) {

868 
pcb
->
≥rsi°_backoff
 = 0;

870 
	`LWIP_DEBUGF
(
TCP_WND_DEBUG
, ("t˝_ª˚ive: wödow upd©ê%"
U16_F
"\n", 
pcb
->
¢d_wnd
));

871 #i‡
TCP_WND_DEBUG


873 i‡(
pcb
->
¢d_wnd
 !
t˝hdr
->
wnd
) {

874 
	`LWIP_DEBUGF
(
TCP_WND_DEBUG
,

875 ("t˝_ª˚ive:Çÿwödow upd©êœ°ack %"
U32_F
"áckno %"

876 
U32_F
" wl1 %"U32_F" seqno %"U32_F" wl2 %"U32_F"\n",

877 
pcb
->
œ°ack
, 
ackno
,Öcb->
¢d_wl1
, 
£qno
,Öcb->
¢d_wl2
));

903 i‡(
	`TCP_SEQ_LEQ
(
ackno
, 
pcb
->
œ°ack
)) {

904 
pcb
->
acked
 = 0;

906 i‡(
t˝Àn
 == 0) {

908 i‡(
pcb
->
¢d_wl2
 +Öcb->
¢d_wnd
 =
right_wnd_edge
){

910 i‡(
pcb
->
πime
 >= 0) {

912 i‡(
pcb
->
œ°ack
 =
ackno
) {

913 
found_du∑ck
 = 1;

914 i‡(
pcb
->
du∑cks
 + 1 >Öcb->dupacks)

915 ++
pcb
->
du∑cks
;

916 i‡(
pcb
->
du∑cks
 > 3) {

919 i‡((
u16_t
)(
pcb
->
cwnd
 +Öcb->
mss
) >Öcb->cwnd) {

920 
pcb
->
cwnd
 +pcb->
mss
;

922 } i‡(
pcb
->
du∑cks
 == 3) {

924 
	`t˝_ªxmô_Á°
(
pcb
);

932 i‡(!
found_du∑ck
) {

933 
pcb
->
du∑cks
 = 0;

935 } i‡(
	`TCP_SEQ_BETWEEN
(
ackno
, 
pcb
->
œ°ack
+1,Öcb->
¢d_nxt
)){

941 i‡(
pcb
->
Êags
 & 
TF_INFR
) {

942 
pcb
->
Êags
 &~
TF_INFR
;

943 
pcb
->
cwnd
 =Öcb->
s°hªsh
;

947 
pcb
->
ƒtx
 = 0;

950 
pcb
->
πo
 = (pcb->
ß
 >> 3Ë+Öcb->
sv
;

953 
pcb
->
acked
 = (
u16_t
)(
ackno
 -Öcb->
œ°ack
);

955 
pcb
->
¢d_buf
 +pcb->
acked
;

958 
pcb
->
du∑cks
 = 0;

959 
pcb
->
œ°ack
 = 
ackno
;

963 i‡(
pcb
->
°©e
 >
ESTABLISHED
) {

964 i‡(
pcb
->
cwnd
 <Öcb->
s°hªsh
) {

965 i‡((
u16_t
)(
pcb
->
cwnd
 +Öcb->
mss
) >Öcb->cwnd) {

966 
pcb
->
cwnd
 +pcb->
mss
;

968 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("t˝_ª˚ive: slow sèπ cwnd %"
U16_F
"\n", 
pcb
->
cwnd
));

970 
u16_t
 
√w_cwnd
 = (
pcb
->
cwnd
 +Öcb->
mss
 *Öcb->mss /Öcb->cwnd);

971 i‡(
√w_cwnd
 > 
pcb
->
cwnd
) {

972 
pcb
->
cwnd
 = 
√w_cwnd
;

974 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("t˝_ª˚ive: c⁄ge°i⁄ávoid™˚ cwnd %"
U16_F
"\n", 
pcb
->
cwnd
));

977 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_ª˚ive: ACK f‹ %"
U32_F
", unacked->seqno %"U32_F":%"U32_F"\n",

978 
ackno
,

979 
pcb
->
u«cked
 !
NULL
?

980 
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
): 0,

981 
pcb
->
u«cked
 !
NULL
?

982 
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
Ë+ 
	`TCP_TCPLEN
(pcb->unacked): 0));

986 
pcb
->
u«cked
 !
NULL
 &&

987 
	`TCP_SEQ_LEQ
(
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
) +

988 
	`TCP_TCPLEN
(
pcb
->
u«cked
), 
ackno
)) {

989 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_ª˚ive:Ñemovög %"
U32_F
":%"U32_F" fromÖcb->unacked\n",

990 
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
),

991 
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
) +

992 
	`TCP_TCPLEN
(
pcb
->
u«cked
)));

994 
√xt
 = 
pcb
->
u«cked
;

995 
pcb
->
u«cked
 =Öcb->u«cked->
√xt
;

997 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("t˝_ª˚ive: queuñí %"
U16_F
" ... ", (
u16_t
)
pcb
->
¢d_queuñí
));

998 
	`LWIP_ASSERT
("pcb->¢d_queuñí >pbuf_˛í“ext->p)", (
pcb
->
¢d_queuñí
 >
	`pbuf_˛í
(
√xt
->
p
)));

1000 i‡((
pcb
->
acked
 !0Ë&& ((
	`TCPH_FLAGS
(
√xt
->
t˝hdr
Ë& 
TCP_FIN
) != 0)) {

1001 
pcb
->
acked
--;

1004 
pcb
->
¢d_queuñí
 -
	`pbuf_˛í
(
√xt
->
p
);

1005 
	`t˝_£g_‰ì
(
√xt
);

1007 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("%"
U16_F
" (a·î fªeög u«cked)\n", (
u16_t
)
pcb
->
¢d_queuñí
));

1008 i‡(
pcb
->
¢d_queuñí
 != 0) {

1009 
	`LWIP_ASSERT
("t˝_ª˚ive: vÆid queuêÀngth", 
pcb
->
u«cked
 !
NULL
 ||

1010 
pcb
->
un£¡
 !
NULL
);

1016 if(
pcb
->
u«cked
 =
NULL
)

1017 
pcb
->
πime
 = -1;

1019 
pcb
->
πime
 = 0;

1021 
pcb
->
pﬁ…mr
 = 0;

1024 
pcb
->
acked
 = 0;

1033 
pcb
->
un£¡
 !
NULL
 &&

1034 
	`TCP_SEQ_BETWEEN
(
ackno
, 
	`¡ohl
(
pcb
->
un£¡
->
t˝hdr
->
£qno
) +

1035 
	`TCP_TCPLEN
(
pcb
->
un£¡
),Öcb->
¢d_nxt
)) {

1036 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_ª˚ive:Ñemovög %"
U32_F
":%"U32_F" fromÖcb->unsent\n",

1037 
	`¡ohl
(
pcb
->
un£¡
->
t˝hdr
->
£qno
),Çtohl(pcb->unsent->tcphdr->seqno) +

1038 
	`TCP_TCPLEN
(
pcb
->
un£¡
)));

1040 
√xt
 = 
pcb
->
un£¡
;

1041 
pcb
->
un£¡
 =Öcb->un£¡->
√xt
;

1042 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("t˝_ª˚ive: queuñí %"
U16_F
" ... ", (
u16_t
)
pcb
->
¢d_queuñí
));

1043 
	`LWIP_ASSERT
("pcb->¢d_queuñí >pbuf_˛í“ext->p)", (
pcb
->
¢d_queuñí
 >
	`pbuf_˛í
(
√xt
->
p
)));

1045 i‡((
pcb
->
acked
 !0Ë&& ((
	`TCPH_FLAGS
(
√xt
->
t˝hdr
Ë& 
TCP_FIN
) != 0)) {

1046 
pcb
->
acked
--;

1048 
pcb
->
¢d_queuñí
 -
	`pbuf_˛í
(
√xt
->
p
);

1049 
	`t˝_£g_‰ì
(
√xt
);

1050 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("%"
U16_F
" (a·î fªeög un£¡)\n", (
u16_t
)
pcb
->
¢d_queuñí
));

1051 i‡(
pcb
->
¢d_queuñí
 != 0) {

1052 
	`LWIP_ASSERT
("tcp_receive: valid queueÜength",

1053 
pcb
->
u«cked
 !
NULL
 ||Öcb->
un£¡
 != NULL);

1058 
	`LWIP_DEBUGF
(
TCP_RTO_DEBUG
, ("t˝_ª˚ive:Öcb->πã° %"
U32_F
"Ñtseq %"U32_F"áckno %"U32_F"\n",

1059 
pcb
->
πã°
,Öcb->
π£q
, 
ackno
));

1064 i‡(
pcb
->
πã°
 && 
	`TCP_SEQ_LT
’cb->
π£q
, 
ackno
)) {

1067 
m
 = (
s16_t
)(
t˝_ticks
 - 
pcb
->
πã°
);

1069 
	`LWIP_DEBUGF
(
TCP_RTO_DEBUG
, ("t˝_ª˚ive:Éx≥rõn˚dÑâ %"
U16_F
"Åicks (%"U16_F" msec).\n",

1070 
m
, m * 
TCP_SLOW_INTERVAL
));

1073 
m
 = m - (
pcb
->
ß
 >> 3);

1074 
pcb
->
ß
 +
m
;

1075 i‡(
m
 < 0) {

1076 
m
 = -m;

1078 
m
 = m - (
pcb
->
sv
 >> 2);

1079 
pcb
->
sv
 +
m
;

1080 
pcb
->
πo
 = (pcb->
ß
 >> 3Ë+Öcb->
sv
;

1082 
	`LWIP_DEBUGF
(
TCP_RTO_DEBUG
, ("t˝_ª˚ive: RTO %"
U16_F
" (%"U16_F" milliseconds)\n",

1083 
pcb
->
πo
,Öcb->πÿ* 
TCP_SLOW_INTERVAL
));

1085 
pcb
->
πã°
 = 0;

1091 i‡(
t˝Àn
 > 0) {

1122 i‡(
	`TCP_SEQ_BETWEEN
(
pcb
->
rcv_nxt
, 
£qno
 + 1, seqnÿ+ 
t˝Àn
 - 1)){

1143 
off
 = 
pcb
->
rcv_nxt
 - 
£qno
;

1144 
p
 = 
ö£g
.p;

1145 
	`LWIP_ASSERT
("ö£g.∞!NULL", 
ö£g
.
p
);

1146 
	`LWIP_ASSERT
("öß√ off£t!", (
off
 < 0x7fff));

1147 i‡(
ö£g
.
p
->
Àn
 < 
off
) {

1148 
	`LWIP_ASSERT
("pbu‡toÿsh‹t!", (((
s32_t
)
ö£g
.
p
->
tŸ_Àn
Ë>
off
));

1149 
√w_tŸ_Àn
 = (
u16_t
)(
ö£g
.
p
->
tŸ_Àn
 - 
off
);

1150 
p
->
Àn
 < 
off
) {

1151 
off
 -
p
->
Àn
;

1155 
p
->
tŸ_Àn
 = 
√w_tŸ_Àn
;

1156 
p
->
Àn
 = 0;

1157 
p
 =Ö->
√xt
;

1159 if(
	`pbuf_hódî
(
p
, (
s16_t
)-
off
)) {

1161 
	`LWIP_ASSERT
("pbuf_header failed", 0);

1164 if(
	`pbuf_hódî
(
ö£g
.
p
, (
s16_t
)-
off
)) {

1166 
	`LWIP_ASSERT
("pbuf_header failed", 0);

1169 
ö£g
.
Àn
 -(
u16_t
)(
pcb
->
rcv_nxt
 - 
£qno
);

1170 
ö£g
.
t˝hdr
->
£qno
 = seqnÿ
pcb
->
rcv_nxt
;

1173 i‡(
	`TCP_SEQ_LT
(
£qno
, 
pcb
->
rcv_nxt
)){

1177 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_ª˚ive: du∂iˇã seqnÿ%"
U32_F
"\n", 
£qno
));

1178 
	`t˝_ack_now
(
pcb
);

1185 i‡(
	`TCP_SEQ_BETWEEN
(
£qno
, 
pcb
->
rcv_nxt
,

1186 
pcb
->
rcv_nxt
 +Öcb->
rcv_wnd
 - 1)){

1187 i‡(
pcb
->
rcv_nxt
 =
£qno
) {

1191 
t˝Àn
 = 
	`TCP_TCPLEN
(&
ö£g
);

1193 i‡(
t˝Àn
 > 
pcb
->
rcv_wnd
) {

1194 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
,

1196 "£qnÿ%"
U32_F
"Üí %"
U16_F
"ÑightÉdge %"U32_F"\n",

1197 
£qno
, 
t˝Àn
, 
pcb
->
rcv_nxt
 +Öcb->
rcv_wnd
));

1198 i‡(
	`TCPH_FLAGS
(
ö£g
.
t˝hdr
Ë& 
TCP_FIN
) {

1201 
	`TCPH_FLAGS_SET
(
ö£g
.
t˝hdr
, 
	`TCPH_FLAGS
(ö£g.t˝hdrË&~ 
TCP_FIN
);

1204 
ö£g
.
Àn
 = 
pcb
->
rcv_wnd
;

1205 i‡(
	`TCPH_FLAGS
(
ö£g
.
t˝hdr
Ë& 
TCP_SYN
) {

1206 
ö£g
.
Àn
 -= 1;

1208 
	`pbuf_ªÆloc
(
ö£g
.
p
, in£g.
Àn
);

1209 
t˝Àn
 = 
	`TCP_TCPLEN
(&
ö£g
);

1210 
	`LWIP_ASSERT
("tcp_receive: segmentÇotÅrimmed correctlyÅoÑcv_wnd\n",

1211 (
£qno
 + 
t˝Àn
Ë=(
pcb
->
rcv_nxt
 +Öcb->
rcv_wnd
));

1213 #i‡
TCP_QUEUE_OOSEQ


1217 i‡(
pcb
->
oo£q
 !
NULL
) {

1218 i‡(
	`TCPH_FLAGS
(
ö£g
.
t˝hdr
Ë& 
TCP_FIN
) {

1219 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
,

1224 
pcb
->
oo£q
 !
NULL
) {

1225 
t˝_£g
 *
ﬁd_oo£q
 = 
pcb
->
oo£q
;

1226 
pcb
->
oo£q
 =Öcb->oo£q->
√xt
;

1227 
	`t˝_£g_‰ì
(
ﬁd_oo£q
);

1231 
√xt
 = 
pcb
->
oo£q
;

1234 
√xt
 &&

1235 
	`TCP_SEQ_GEQ
(
£qno
 + 
t˝Àn
,

1236 
√xt
->
t˝hdr
->
£qno
 +Çext->
Àn
)) {

1238 i‡(
	`TCPH_FLAGS
(
√xt
->
t˝hdr
Ë& 
TCP_FIN
 &&

1239 (
	`TCPH_FLAGS
(
ö£g
.
t˝hdr
Ë& 
TCP_SYN
) == 0) {

1240 
	`TCPH_SET_FLAG
(
ö£g
.
t˝hdr
, 
TCP_FIN
);

1241 
t˝Àn
 = 
	`TCP_TCPLEN
(&
ö£g
);

1243 
¥ev
 = 
√xt
;

1244 
√xt
 =Çext->next;

1245 
	`t˝_£g_‰ì
(
¥ev
);

1249 i‡(
√xt
 &&

1250 
	`TCP_SEQ_GT
(
£qno
 + 
t˝Àn
,

1251 
√xt
->
t˝hdr
->
£qno
)) {

1253 
ö£g
.
Àn
 = (
u16_t
)(
√xt
->
t˝hdr
->
£qno
 - seqno);

1254 i‡(
	`TCPH_FLAGS
(
ö£g
.
t˝hdr
Ë& 
TCP_SYN
) {

1255 
ö£g
.
Àn
 -= 1;

1257 
	`pbuf_ªÆloc
(
ö£g
.
p
, in£g.
Àn
);

1258 
t˝Àn
 = 
	`TCP_TCPLEN
(&
ö£g
);

1259 
	`LWIP_ASSERT
("tcp_receive: segmentÇotÅrimmed correctlyÅo ooseq queue\n",

1260 (
£qno
 + 
t˝Àn
Ë=
√xt
->
t˝hdr
->seqno);

1262 
pcb
->
oo£q
 = 
√xt
;

1267 
pcb
->
rcv_nxt
 = 
£qno
 + 
t˝Àn
;

1270 
	`LWIP_ASSERT
("t˝_ª˚ive:Å˝À¿>Ñcv_wnd\n", 
pcb
->
rcv_wnd
 >
t˝Àn
);

1271 
pcb
->
rcv_wnd
 -
t˝Àn
;

1273 
	`t˝_upd©e_rcv_™n_wnd
(
pcb
);

1284 i‡(
ö£g
.
p
->
tŸ_Àn
 > 0) {

1285 
ªcv_d©a
 = 
ö£g
.
p
;

1289 
ö£g
.
p
 = 
NULL
;

1291 i‡(
	`TCPH_FLAGS
(
ö£g
.
t˝hdr
Ë& 
TCP_FIN
) {

1292 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_receive:Ñeceived FIN.\n"));

1293 
ªcv_Êags
 |
TF_GOT_FIN
;

1296 #i‡
TCP_QUEUE_OOSEQ


1299 
pcb
->
oo£q
 !
NULL
 &&

1300 
pcb
->
oo£q
->
t˝hdr
->
£qno
 =pcb->
rcv_nxt
) {

1302 
c£g
 = 
pcb
->
oo£q
;

1303 
£qno
 = 
pcb
->
oo£q
->
t˝hdr
->seqno;

1305 
pcb
->
rcv_nxt
 +
	`TCP_TCPLEN
(
c£g
);

1306 
	`LWIP_ASSERT
("tcp_receive: ooseqÅcplen >Ñcv_wnd\n",

1307 
pcb
->
rcv_wnd
 >
	`TCP_TCPLEN
(
c£g
));

1308 
pcb
->
rcv_wnd
 -
	`TCP_TCPLEN
(
c£g
);

1310 
	`t˝_upd©e_rcv_™n_wnd
(
pcb
);

1312 i‡(
c£g
->
p
->
tŸ_Àn
 > 0) {

1315 i‡(
ªcv_d©a
) {

1316 
	`pbuf_ˇt
(
ªcv_d©a
, 
c£g
->
p
);

1318 
ªcv_d©a
 = 
c£g
->
p
;

1320 
c£g
->
p
 = 
NULL
;

1322 i‡(
	`TCPH_FLAGS
(
c£g
->
t˝hdr
Ë& 
TCP_FIN
) {

1323 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_receive: dequeued FIN.\n"));

1324 
ªcv_Êags
 |
TF_GOT_FIN
;

1325 i‡(
pcb
->
°©e
 =
ESTABLISHED
) {

1326 
pcb
->
°©e
 = 
CLOSE_WAIT
;

1330 
pcb
->
oo£q
 = 
c£g
->
√xt
;

1331 
	`t˝_£g_‰ì
(
c£g
);

1337 
	`t˝_ack
(
pcb
);

1341 
	`t˝_£nd_em±y_ack
(
pcb
);

1342 #i‡
TCP_QUEUE_OOSEQ


1344 i‡(
pcb
->
oo£q
 =
NULL
) {

1345 
pcb
->
oo£q
 = 
	`t˝_£g_c›y
(&
ö£g
);

1359 
¥ev
 = 
NULL
;

1360 
√xt
 = 
pcb
->
oo£q
;Çexà!
NULL
;Çext =Çext->next) {

1361 i‡(
£qno
 =
√xt
->
t˝hdr
->seqno) {

1366 i‡(
ö£g
.
Àn
 > 
√xt
->len) {

1370 
c£g
 = 
	`t˝_£g_c›y
(&
ö£g
);

1371 i‡(
c£g
 !
NULL
) {

1372 i‡(
¥ev
 !
NULL
) {

1373 
¥ev
->
√xt
 = 
c£g
;

1375 
pcb
->
oo£q
 = 
c£g
;

1377 
	`t˝_oos_ö£π_£gmít
(
c£g
, 
√xt
);

1387 i‡(
¥ev
 =
NULL
) {

1388 i‡(
	`TCP_SEQ_LT
(
£qno
, 
√xt
->
t˝hdr
->seqno)) {

1393 
c£g
 = 
	`t˝_£g_c›y
(&
ö£g
);

1394 i‡(
c£g
 !
NULL
) {

1395 
pcb
->
oo£q
 = 
c£g
;

1396 
	`t˝_oos_ö£π_£gmít
(
c£g
, 
√xt
);

1403 i‡(
	`TCP_SEQ_BETWEEN
(
£qno
, 
¥ev
->
t˝hdr
->£qno+1, 
√xt
->tcphdr->seqno-1)) {

1409 
c£g
 = 
	`t˝_£g_c›y
(&
ö£g
);

1410 i‡(
c£g
 !
NULL
) {

1411 i‡(
	`TCP_SEQ_GT
(
¥ev
->
t˝hdr
->
£qno
 +Öªv->
Àn
, seqno)) {

1413 
¥ev
->
Àn
 = (
u16_t
)(
£qno
 -Öªv->
t˝hdr
->seqno);

1414 
	`pbuf_ªÆloc
(
¥ev
->
p
,Öªv->
Àn
);

1416 
¥ev
->
√xt
 = 
c£g
;

1417 
	`t˝_oos_ö£π_£gmít
(
c£g
, 
√xt
);

1425 i‡(
√xt
->√xà=
NULL
 &&

1426 
	`TCP_SEQ_GT
(
£qno
, 
√xt
->
t˝hdr
->seqno)) {

1427 i‡(
	`TCPH_FLAGS
(
√xt
->
t˝hdr
Ë& 
TCP_FIN
) {

1431 
√xt
->√xà
	`t˝_£g_c›y
(&
ö£g
);

1432 i‡(
√xt
->√xà!
NULL
) {

1433 i‡(
	`TCP_SEQ_GT
(
√xt
->
t˝hdr
->
£qno
 +Çext->
Àn
, seqno)) {

1435 
√xt
->
Àn
 = (
u16_t
)(
£qno
 -Çext->
t˝hdr
->seqno);

1436 
	`pbuf_ªÆloc
(
√xt
->
p
,Çext->
Àn
);

1439 i‡((
u32_t
)
t˝Àn
 + 
£qno
 > 
pcb
->
rcv_nxt
 + (u32_tÌcb->
rcv_wnd
) {

1440 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
,

1442 "£qnÿ%"
U32_F
"Üí %"
U16_F
"ÑightÉdge %"U32_F"\n",

1443 
£qno
, 
t˝Àn
, 
pcb
->
rcv_nxt
 +Öcb->
rcv_wnd
));

1444 i‡(
	`TCPH_FLAGS
(
√xt
->√xt->
t˝hdr
Ë& 
TCP_FIN
) {

1447 
	`TCPH_FLAGS_SET
(
√xt
->√xt->
t˝hdr
, 
	`TCPH_FLAGS
“ext->√xt->t˝hdrË&~ 
TCP_FIN
);

1450 
√xt
->√xt->
Àn
 = 
pcb
->
rcv_nxt
 +Öcb->
rcv_wnd
 - 
£qno
;

1451 
	`pbuf_ªÆloc
(
√xt
->√xt->
p
,Çext->√xt->
Àn
);

1452 
t˝Àn
 = 
	`TCP_TCPLEN
(
√xt
->next);

1453 
	`LWIP_ASSERT
("tcp_receive: segmentÇotÅrimmed correctlyÅoÑcv_wnd\n",

1454 (
£qno
 + 
t˝Àn
Ë=(
pcb
->
rcv_nxt
 +Öcb->
rcv_wnd
));

1460 
¥ev
 = 
√xt
;

1468 
	`t˝_£nd_em±y_ack
(
pcb
);

1475 if(!
	`TCP_SEQ_BETWEEN
(
£qno
, 
pcb
->
rcv_nxt
,Öcb->rcv_nxà+Öcb->
rcv_wnd
-1)){

1476 
	`t˝_ack_now
(
pcb
);

1479 
	}
}

1490 
	$t˝_∑r£›t
(
t˝_pcb
 *
pcb
)

1492 
u16_t
 
c
, 
max_c
;

1493 
u16_t
 
mss
;

1494 
u8_t
 *
›ts
, 
›t
;

1495 #i‡
LWIP_TCP_TIMESTAMPS


1496 
u32_t
 
tsvÆ
;

1499 
›ts
 = (
u8_t
 *)
t˝hdr
 + 
TCP_HLEN
;

1502 if(
	`TCPH_HDRLEN
(
t˝hdr
) > 0x5) {

1503 
max_c
 = (
	`TCPH_HDRLEN
(
t˝hdr
) - 5) << 2;

1504 
c
 = 0; c < 
max_c
; ) {

1505 
›t
 = 
›ts
[
c
];

1506 
›t
) {

1509 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_parseopt: EOL\n"));

1513 ++
c
;

1514 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_parseopt: NOP\n"));

1517 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_parseopt: MSS\n"));

1518 i‡(
›ts
[
c
 + 1] !0x04 || c + 0x04 > 
max_c
) {

1520 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_parseopt: badÜength\n"));

1524 
mss
 = (
›ts
[
c
 + 2] << 8) | opts[c + 3];

1526 
pcb
->
mss
 = ((ms†> 
TCP_MSS
) || (mss == 0)) ? TCP_MSS : mss;

1528 
c
 += 0x04;

1530 #i‡
LWIP_TCP_TIMESTAMPS


1532 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_parseopt: TS\n"));

1533 i‡(
›ts
[
c
 + 1] !0x0A || c + 0x0A > 
max_c
) {

1535 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_parseopt: badÜength\n"));

1539 
tsvÆ
 = (
›ts
[
c
+2]) | (opts[c+3] << 8) |

1540 (
›ts
[
c
+4] << 16) | (opts[c+5] << 24);

1541 i‡(
Êags
 & 
TCP_SYN
) {

1542 
pcb
->
ts_ª˚¡
 = 
	`¡ohl
(
tsvÆ
);

1543 
pcb
->
Êags
 |
TF_TIMESTAMP
;

1544 } i‡(
	`TCP_SEQ_BETWEEN
(
pcb
->
ts_œ°ack£¡
, 
£qno
, seqno+
t˝Àn
)) {

1545 
pcb
->
ts_ª˚¡
 = 
	`¡ohl
(
tsvÆ
);

1548 
c
 += 0x0A;

1552 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_parseopt: other\n"));

1553 i‡(
›ts
[
c
 + 1] == 0) {

1554 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_parseopt: badÜength\n"));

1561 
c
 +
›ts
[c + 1];

1565 
	}
}

	@core/tcp_out.c

41 
	~"lwù/›t.h
"

43 #i‡
LWIP_TCP


45 
	~"lwù/t˝_im∂.h
"

46 
	~"lwù/def.h
"

47 
	~"lwù/mem.h
"

48 
	~"lwù/memp.h
"

49 
	~"lwù/sys.h
"

50 
	~"lwù/ù_addr.h
"

51 
	~"lwù/√tif.h
"

52 
	~"lwù/öë_chksum.h
"

53 
	~"lwù/°©s.h
"

54 
	~"lwù/¢mp.h
"

56 
	~<°rög.h
>

60 #i‡
TCP_CHECKSUM_ON_COPY


61 
	#TCP_DATA_COPY
(
d°
, 
§c
, 
Àn
, 
£g
) do { \

62 
	`t˝_£g_add_chksum
(
	`LWIP_CHKSUM_COPY
(
d°
, 
§c
, 
Àn
), \

63 
Àn
, &
£g
->
chksum
, &£g->
chksum_sw≠≥d
); \

64 
£g
->
Êags
 |
TF_SEG_DATA_CHECKSUMMED
; } 0)

	)

65 
	#TCP_DATA_COPY2
(
d°
, 
§c
, 
Àn
, 
chksum
, 
chksum_sw≠≥d
) \

66 
	`t˝_£g_add_chksum
(
	`LWIP_CHKSUM_COPY
(
d°
, 
§c
, 
Àn
),Üí, 
chksum
, 
chksum_sw≠≥d
);

	)

68 
	#TCP_DATA_COPY
(
d°
, 
§c
, 
Àn
, 
£g
Ë
	`MEMCPY
(d°, src,Üí)

	)

69 
	#TCP_DATA_COPY2
(
d°
, 
§c
, 
Àn
, 
chksum
, 
chksum_sw≠≥d
Ë
	`MEMCPY
(d°, src,Üí)

	)

74 #i‚de‡
TCP_CHECKSUM_ON_COPY_SANITY_CHECK


75 
	#TCP_CHECKSUM_ON_COPY_SANITY_CHECK
 0

	)

79 
t˝_ouçut_£gmít
(
t˝_£g
 *
£g
, 
t˝_pcb
 *
pcb
);

91 
pbuf
 *

92 
	$t˝_ouçut_Æloc_hódî
(
t˝_pcb
 *
pcb
, 
u16_t
 
›éí
, u16_à
d©Æí
,

93 
u32_t
 
£qno_be
 )

95 
t˝_hdr
 *
t˝hdr
;

96 
pbuf
 *
p
 = 
	`pbuf_Æloc
(
PBUF_IP
, 
TCP_HLEN
 + 
›éí
 + 
d©Æí
, 
PBUF_RAM
);

97 i‡(
p
 !
NULL
) {

98 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold structÅcp_hdr",

99 (
p
->
Àn
 >
TCP_HLEN
 + 
›éí
));

100 
t˝hdr
 = (
t˝_hdr
 *)
p
->
∑ylﬂd
;

101 
t˝hdr
->
§c
 = 
	`ht⁄s
(
pcb
->
loˇl_p‹t
);

102 
t˝hdr
->
de°
 = 
	`ht⁄s
(
pcb
->
ªmŸe_p‹t
);

103 
t˝hdr
->
£qno
 = 
£qno_be
;

104 
t˝hdr
->
ackno
 = 
	`ht⁄l
(
pcb
->
rcv_nxt
);

105 
	`TCPH_HDRLEN_FLAGS_SET
(
t˝hdr
, (5 + 
›éí
 / 4), 
TCP_ACK
);

106 
t˝hdr
->
wnd
 = 
	`ht⁄s
(
pcb
->
rcv_™n_wnd
);

107 
t˝hdr
->
chksum
 = 0;

108 
t˝hdr
->
urgp
 = 0;

111 
pcb
->
rcv_™n_right_edge
 =Öcb->
rcv_nxt
 +Öcb->
rcv_™n_wnd
;

113  
p
;

114 
	}
}

122 
îr_t


123 
	$t˝_£nd_fö
(
t˝_pcb
 *
pcb
)

126 i‡(
pcb
->
un£¡
 !
NULL
) {

127 
t˝_£g
 *
œ°_un£¡
;

128 
œ°_un£¡
 = 
pcb
->
un£¡
;Üa°_un£¡->
√xt
 !
NULL
;

129 
œ°_un£¡
 =Üa°_un£¡->
√xt
);

131 i‡((
	`TCPH_FLAGS
(
œ°_un£¡
->
t˝hdr
Ë& (
TCP_SYN
 | 
TCP_FIN
 | 
TCP_RST
)) == 0) {

133 
	`TCPH_SET_FLAG
(
œ°_un£¡
->
t˝hdr
, 
TCP_FIN
);

134  
ERR_OK
;

138  
	`t˝_íqueue_Êags
(
pcb
, 
TCP_FIN
);

139 
	}
}

155 
t˝_£g
 *

156 
	$t˝_¸óã_£gmít
(
t˝_pcb
 *
pcb
, 
pbuf
 *
p
, 
u8_t
 
Êags
, 
u32_t
 
£qno
, u8_à
›tÊags
)

158 
t˝_£g
 *
£g
;

159 
u8_t
 
›éí
 = 
	`LWIP_TCP_OPT_LENGTH
(
›tÊags
);

161 i‡((
£g
 = (
t˝_£g
 *)
	`memp_mÆloc
(
MEMP_TCP_SEG
)Ë=
NULL
) {

162 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2, ("tcp_create_segment:Ço memory.\n"));

163 
	`pbuf_‰ì
(
p
);

164  
NULL
;

166 
£g
->
Êags
 = 
›tÊags
;

167 
£g
->
√xt
 = 
NULL
;

168 
£g
->
p
 =Ö;

169 
£g
->
Àn
 = 
p
->
tŸ_Àn
 - 
›éí
;

170 #i‡
TCP_OVERSIZE_DBGCHECK


171 
£g
->
ovîsize_À·
 = 0;

173 #i‡
TCP_CHECKSUM_ON_COPY


174 
£g
->
chksum
 = 0;

175 
£g
->
chksum_sw≠≥d
 = 0;

177 
	`LWIP_ASSERT
("invalid optflagsÖassed: TF_SEG_DATA_CHECKSUMMED",

178 (
›tÊags
 & 
TF_SEG_DATA_CHECKSUMMED
) == 0);

182 i‡(
	`pbuf_hódî
(
p
, 
TCP_HLEN
)) {

183 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2, ("tcp_create_segment:ÇoÑoom for TCP header inÖbuf.\n"));

184 
	`TCP_STATS_INC
(
t˝
.
îr
);

185 
	`t˝_£g_‰ì
(
£g
);

186  
NULL
;

188 
£g
->
t˝hdr
 = (
t˝_hdr
 *)£g->
p
->
∑ylﬂd
;

189 
£g
->
t˝hdr
->
§c
 = 
	`ht⁄s
(
pcb
->
loˇl_p‹t
);

190 
£g
->
t˝hdr
->
de°
 = 
	`ht⁄s
(
pcb
->
ªmŸe_p‹t
);

191 
£g
->
t˝hdr
->
£qno
 = 
	`ht⁄l
(seqno);

193 
	`TCPH_HDRLEN_FLAGS_SET
(
£g
->
t˝hdr
, (5 + 
›éí
 / 4), 
Êags
);

195 
£g
->
t˝hdr
->
urgp
 = 0;

196  
£g
;

197 
	}
}

214 #i‡
TCP_OVERSIZE


215 
pbuf
 *

216 
	$t˝_pbuf_¥óŒoc
(
pbuf_œyî
 
œyî
, 
u16_t
 
Àngth
, u16_à
max_Àngth
,

217 
u16_t
 *
ovîsize
, 
t˝_pcb
 *
pcb
, 
u8_t
 
≠iÊags
,

218 
u8_t
 
fú°_£g
)

220 
pbuf
 *
p
;

221 
u16_t
 
Æloc
 = 
Àngth
;

223 #i‡
LWIP_NETIF_TX_SINGLE_PBUF


224 
	`LWIP_UNUSED_ARG
(
max_Àngth
);

225 
	`LWIP_UNUSED_ARG
(
pcb
);

226 
	`LWIP_UNUSED_ARG
(
≠iÊags
);

227 
	`LWIP_UNUSED_ARG
(
fú°_£g
);

229 
Æloc
 = 
TCP_MSS
;

231 i‡(
Àngth
 < 
max_Àngth
) {

243 i‡((
≠iÊags
 & 
TCP_WRITE_FLAG_MORE
) ||

244 (!(
pcb
->
Êags
 & 
TF_NODELAY
) &&

245 (!
fú°_£g
 ||

246 
pcb
->
un£¡
 !
NULL
 ||

247 
pcb
->
u«cked
 !
NULL
))) {

248 
Æloc
 = 
	`LWIP_MIN
(
max_Àngth
, 
	`LWIP_MEM_ALIGN_SIZE
(
Àngth
 + 
TCP_OVERSIZE
));

252 
p
 = 
	`pbuf_Æloc
(
œyî
, 
Æloc
, 
PBUF_RAM
);

253 i‡(
p
 =
NULL
) {

254  
NULL
;

256 
	`LWIP_ASSERT
("√ed unchaöedÖbuf", 
p
->
√xt
 =
NULL
);

257 *
ovîsize
 = 
p
->
Àn
 - 
Àngth
;

259 
p
->
Àn
 =Ö->
tŸ_Àn
 = 
Àngth
;

260  
p
;

261 
	}
}

263 
	#t˝_pbuf_¥óŒoc
(
œyî
, 
Àngth
, 
mx
, 
os
, 
pcb
, 
≠i
, 
f°
Ë
	`pbuf_Æloc
(÷ayî), (Àngth), 
PBUF_RAM
)

	)

266 #i‡
TCP_CHECKSUM_ON_COPY


269 
	$t˝_£g_add_chksum
(
u16_t
 
chksum
, u16_à
Àn
, u16_à*
£g_chksum
,

270 
u8_t
 *
£g_chksum_sw≠≥d
)

272 
u32_t
 
hñ≥r
;

274 
hñ≥r
 = 
chksum
 + *
£g_chksum
;

275 
chksum
 = 
	`FOLD_U32T
(
hñ≥r
);

276 i‡((
Àn
 & 1) != 0) {

277 *
£g_chksum_sw≠≥d
 = 1 - *seg_chksum_swapped;

278 
chksum
 = 
	`SWAP_BYTES_IN_WORD
(chksum);

280 *
£g_chksum
 = 
chksum
;

281 
	}
}

290 
îr_t


291 
	$t˝_wrôe_checks
(
t˝_pcb
 *
pcb
, 
u16_t
 
Àn
)

294 i‡((
pcb
->
°©e
 !
ESTABLISHED
) &&

295 (
pcb
->
°©e
 !
CLOSE_WAIT
) &&

296 (
pcb
->
°©e
 !
SYN_SENT
) &&

297 (
pcb
->
°©e
 !
SYN_RCVD
)) {

298 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 
LWIP_DBG_STATE
 | 
LWIP_DBG_LEVEL_SEVERE
, ("tcp_write() called in invalid state\n"));

299  
ERR_CONN
;

300 } i‡(
Àn
 == 0) {

301  
ERR_OK
;

305 i‡(
Àn
 > 
pcb
->
¢d_buf
) {

306 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 3, ("t˝_wrôe:Åoÿmuch d©®÷í=%"
U16_F
" > snd_buf=%"U16_F")\n",

307 
Àn
, 
pcb
->
¢d_buf
));

308 
pcb
->
Êags
 |
TF_NAGLEMEMERR
;

309  
ERR_MEM
;

312 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("t˝_wrôe: queuñí: %"
U16_F
"\n", (
u16_t
)
pcb
->
¢d_queuñí
));

317 i‡((
pcb
->
¢d_queuñí
 >
TCP_SND_QUEUELEN
Ë|| (pcb->¢d_queuñí > 
TCP_SNDQUEUELEN_OVERFLOW
)) {

318 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 3, ("t˝_wrôe:Åoÿl⁄g queuê%"
U16_F
" (max %"U16_F")\n",

319 
pcb
->
¢d_queuñí
, 
TCP_SND_QUEUELEN
));

320 
	`TCP_STATS_INC
(
t˝
.
memîr
);

321 
pcb
->
Êags
 |
TF_NAGLEMEMERR
;

322  
ERR_MEM
;

324 i‡(
pcb
->
¢d_queuñí
 != 0) {

325 
	`LWIP_ASSERT
("tcp_write:Öbufs on queue =>átÜeast one queueÇon-empty",

326 
pcb
->
u«cked
 !
NULL
 ||Öcb->
un£¡
 != NULL);

328 
	`LWIP_ASSERT
("tcp_write:ÇoÖbufs on queue => both queuesÉmpty",

329 
pcb
->
u«cked
 =
NULL
 &&Öcb->
un£¡
 == NULL);

331  
ERR_OK
;

332 
	}
}

350 
îr_t


351 
	$t˝_wrôe
(
t˝_pcb
 *
pcb
, c⁄° *
¨g
, 
u16_t
 
Àn
, 
u8_t
 
≠iÊags
)

353 
pbuf
 *
c⁄ˇt_p
 = 
NULL
;

354 
t˝_£g
 *
œ°_un£¡
 = 
NULL
, *
£g
 = NULL, *
¥ev_£g
 = NULL, *
queue
 = NULL;

355 
u16_t
 
pos
 = 0;

356 
u16_t
 
queuñí
;

357 
u8_t
 
›éí
 = 0;

358 
u8_t
 
›tÊags
 = 0;

359 #i‡
TCP_OVERSIZE


360 
u16_t
 
ovîsize
 = 0;

361 
u16_t
 
ovîsize_u£d
 = 0;

363 #i‡
TCP_CHECKSUM_ON_COPY


364 
u16_t
 
c⁄ˇt_chksum
 = 0;

365 
u8_t
 
c⁄ˇt_chksum_sw≠≥d
 = 0;

366 
u16_t
 
c⁄ˇt_chksummed
 = 0;

368 
îr_t
 
îr
;

370 #i‡
LWIP_NETIF_TX_SINGLE_PBUF


372 
≠iÊags
 |
TCP_WRITE_FLAG_COPY
;

375 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
, ("t˝_wrôe’cb=%p, d©a=%p,Üí=%"
U16_F
",ápiflags=%"U16_F")\n",

376 (*)
pcb
, 
¨g
, 
Àn
, (
u16_t
)
≠iÊags
));

377 
	`LWIP_ERROR
("tcp_write:árg == NULL (programmer violates API)",

378 
¨g
 !
NULL
,  
ERR_ARG
;);

380 
îr
 = 
	`t˝_wrôe_checks
(
pcb
, 
Àn
);

381 i‡(
îr
 !
ERR_OK
) {

382  
îr
;

384 
queuñí
 = 
pcb
->
¢d_queuñí
;

386 #i‡
LWIP_TCP_TIMESTAMPS


387 i‡((
pcb
->
Êags
 & 
TF_TIMESTAMP
)) {

388 
›tÊags
 = 
TF_SEG_OPTS_TS
;

389 
›éí
 = 
	`LWIP_TCP_OPT_LENGTH
(
TF_SEG_OPTS_TS
);

417 i‡(
pcb
->
un£¡
 !
NULL
) {

418 
u16_t
 
•a˚
;

419 
u16_t
 
un£¡_›éí
;

422 
œ°_un£¡
 = 
pcb
->
un£¡
;Üa°_un£¡->
√xt
 !
NULL
;

423 
œ°_un£¡
 =Üa°_un£¡->
√xt
);

426 
un£¡_›éí
 = 
	`LWIP_TCP_OPT_LENGTH
(
œ°_un£¡
->
Êags
);

427 
•a˚
 = 
pcb
->
mss
 - (
œ°_un£¡
->
Àn
 + 
un£¡_›éí
);

436 #i‡
TCP_OVERSIZE


437 #i‡
TCP_OVERSIZE_DBGCHECK


439 
	`LWIP_ASSERT
("unsent_oversize mismatch (pcb vs.Üast_unsent)",

440 
pcb
->
un£¡_ovîsize
 =
œ°_un£¡
->
ovîsize_À·
);

442 
ovîsize
 = 
pcb
->
un£¡_ovîsize
;

443 i‡(
ovîsize
 > 0) {

444 
	`LWIP_ASSERT
("öc⁄si°íàovîsizêvs. s∑˚", 
ovîsize_u£d
 <
•a˚
);

445 
£g
 = 
œ°_un£¡
;

446 
ovîsize_u£d
 = 
ovîsize
 < 
Àn
 ? oversize :Üen;

447 
pos
 +
ovîsize_u£d
;

448 
ovîsize
 -
ovîsize_u£d
;

449 
•a˚
 -
ovîsize_u£d
;

452 
	`LWIP_ASSERT
("öc⁄si°íd ovîsizêvs.Üí", (
ovîsize
 =0Ë|| (
pos
 =
Àn
));

462 i‡((
pos
 < 
Àn
Ë&& (
•a˚
 > 0Ë&& (
œ°_un£¡
->len > 0)) {

463 
u16_t
 
£gÀn
 = 
•a˚
 < 
Àn
 - 
pos
 ? space :Üen -Öos;

464 
£g
 = 
œ°_un£¡
;

469 i‡(
≠iÊags
 & 
TCP_WRITE_FLAG_COPY
) {

471 i‡((
c⁄ˇt_p
 = 
	`t˝_pbuf_¥óŒoc
(
PBUF_RAW
, 
£gÀn
, 
•a˚
, &
ovîsize
, 
pcb
, 
≠iÊags
, 1)Ë=
NULL
) {

472 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2,

473 ("t˝_wrôê: couldÇŸáŒoˇã mem‹y f‹Öbu‡c›y sizê%"
U16_F
"\n",

474 
£gÀn
));

475 
memîr
;

477 #i‡
TCP_OVERSIZE_DBGCHECK


478 
œ°_un£¡
->
ovîsize_À·
 = 
ovîsize
;

480 
	`TCP_DATA_COPY2
(
c⁄ˇt_p
->
∑ylﬂd
, (
u8_t
*)
¨g
 + 
pos
, 
£gÀn
, &
c⁄ˇt_chksum
, &
c⁄ˇt_chksum_sw≠≥d
);

481 #i‡
TCP_CHECKSUM_ON_COPY


482 
c⁄ˇt_chksummed
 +
£gÀn
;

486 i‡((
c⁄ˇt_p
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
£gÀn
, 
PBUF_ROM
)Ë=
NULL
) {

487 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2,

489 
memîr
;

491 #i‡
TCP_CHECKSUM_ON_COPY


493 
	`t˝_£g_add_chksum
(~
	`öë_chksum
((
u8_t
*)
¨g
 + 
pos
, 
£gÀn
), seglen,

494 &
c⁄ˇt_chksum
, &
c⁄ˇt_chksum_sw≠≥d
);

495 
c⁄ˇt_chksummed
 +
£gÀn
;

498 
c⁄ˇt_p
->
∑ylﬂd
 = (
u8_t
*)
¨g
 + 
pos
;

501 
pos
 +
£gÀn
;

502 
queuñí
 +
	`pbuf_˛í
(
c⁄ˇt_p
);

505 #i‡
TCP_OVERSIZE


506 
	`LWIP_ASSERT
("unsent_oversize mismatch (pcb->unsent is NULL)",

507 
pcb
->
un£¡_ovîsize
 == 0);

517 
pos
 < 
Àn
) {

518 
pbuf
 *
p
;

519 
u16_t
 
À·
 = 
Àn
 - 
pos
;

520 
u16_t
 
max_Àn
 = 
pcb
->
mss
 - 
›éí
;

521 
u16_t
 
£gÀn
 = 
À·
 > 
max_Àn
 ? max_len :Üeft;

522 #i‡
TCP_CHECKSUM_ON_COPY


523 
u16_t
 
chksum
 = 0;

524 
u8_t
 
chksum_sw≠≥d
 = 0;

527 i‡(
≠iÊags
 & 
TCP_WRITE_FLAG_COPY
) {

530 i‡((
p
 = 
	`t˝_pbuf_¥óŒoc
(
PBUF_TRANSPORT
, 
£gÀn
 + 
›éí
, 
pcb
->
mss
, &
ovîsize
,Öcb, 
≠iÊags
, 
queue
 =
NULL
)) == NULL) {

531 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2, ("t˝_wrôê: couldÇŸáŒoˇã mem‹y f‹Öbu‡c›y sizê%"
U16_F
"\n", 
£gÀn
));

532 
memîr
;

534 
	`LWIP_ASSERT
("tcp_write: checkÅhat firstÖbuf can holdÅhe complete seglen",

535 (
p
->
Àn
 >
£gÀn
));

536 
	`TCP_DATA_COPY2
((*)
p
->
∑ylﬂd
 + 
›éí
, (
u8_t
*)
¨g
 + 
pos
, 
£gÀn
, &
chksum
, &
chksum_sw≠≥d
);

543 
pbuf
 *
p2
;

544 #i‡
TCP_OVERSIZE


545 
	`LWIP_ASSERT
("ovîsizê=0", 
ovîsize
 == 0);

547 i‡((
p2
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
£gÀn
, 
PBUF_ROM
)Ë=
NULL
) {

548 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2, ("tcp_write: couldÇotállocate memory for zero-copyÖbuf\n"));

549 
memîr
;

551 #i‡
TCP_CHECKSUM_ON_COPY


553 
chksum
 = ~
	`öë_chksum
((
u8_t
*)
¨g
 + 
pos
, 
£gÀn
);

556 
p2
->
∑ylﬂd
 = (
u8_t
*)
¨g
 + 
pos
;

559 i‡((
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
›éí
, 
PBUF_RAM
)Ë=
NULL
) {

562 
	`pbuf_‰ì
(
p2
);

563 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2, ("tcp_write: couldÇotállocate memory for headerÖbuf\n"));

564 
memîr
;

567 
	`pbuf_ˇt
(
p
 , 
p2
 );

570 
queuñí
 +
	`pbuf_˛í
(
p
);

575 i‡((
queuñí
 > 
TCP_SND_QUEUELEN
Ë|| (queuñí > 
TCP_SNDQUEUELEN_OVERFLOW
)) {

576 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2, ("t˝_wrôe: queuêtoÿl⁄g %"
U16_F
" (%"U16_F")\n", 
queuñí
, 
TCP_SND_QUEUELEN
));

577 
	`pbuf_‰ì
(
p
);

578 
memîr
;

581 i‡((
£g
 = 
	`t˝_¸óã_£gmít
(
pcb
, 
p
, 0,Öcb->
¢d_lbb
 + 
pos
, 
›tÊags
)Ë=
NULL
) {

582 
memîr
;

584 #i‡
TCP_OVERSIZE_DBGCHECK


585 
£g
->
ovîsize_À·
 = 
ovîsize
;

587 #i‡
TCP_CHECKSUM_ON_COPY


588 
£g
->
chksum
 = chksum;

589 
£g
->
chksum_sw≠≥d
 = chksum_swapped;

590 
£g
->
Êags
 |
TF_SEG_DATA_CHECKSUMMED
;

594 i‡(
queue
 =
NULL
) {

595 
queue
 = 
£g
;

598 
	`LWIP_ASSERT
("¥ev_£g !NULL", 
¥ev_£g
 !
NULL
);

599 
¥ev_£g
->
√xt
 = 
£g
;

602 
¥ev_£g
 = 
£g
;

604 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 
LWIP_DBG_TRACE
, ("t˝_wrôe: queueög %"
U32_F
":%"U32_F"\n",

605 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
),

606 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë+ 
	`TCP_TCPLEN
(seg)));

608 
pos
 +
£gÀn
;

620 #i‡
TCP_OVERSIZE


621 i‡(
ovîsize_u£d
 > 0) {

622 
pbuf
 *
p
;

624 
p
 = 
œ°_un£¡
->p;Ö;Ö =Ö->
√xt
) {

625 
p
->
tŸ_Àn
 +
ovîsize_u£d
;

626 i‡(
p
->
√xt
 =
NULL
) {

627 
	`TCP_DATA_COPY
((*)
p
->
∑ylﬂd
 +Ö->
Àn
, 
¨g
, 
ovîsize_u£d
, 
œ°_un£¡
);

628 
p
->
Àn
 +
ovîsize_u£d
;

631 
œ°_un£¡
->
Àn
 +
ovîsize_u£d
;

632 #i‡
TCP_OVERSIZE_DBGCHECK


633 
œ°_un£¡
->
ovîsize_À·
 -
ovîsize_u£d
;

636 
pcb
->
un£¡_ovîsize
 = 
ovîsize
;

642 i‡(
c⁄ˇt_p
 !
NULL
) {

643 
	`LWIP_ASSERT
("tcp_write: cannot concatenate whenÖcb->unsent isÉmpty",

644 (
œ°_un£¡
 !
NULL
));

645 
	`pbuf_ˇt
(
œ°_un£¡
->
p
, 
c⁄ˇt_p
);

646 
œ°_un£¡
->
Àn
 +
c⁄ˇt_p
->
tŸ_Àn
;

647 #i‡
TCP_CHECKSUM_ON_COPY


648 i‡(
c⁄ˇt_chksummed
) {

649 
	`t˝_£g_add_chksum
(
c⁄ˇt_chksum
, 
c⁄ˇt_chksummed
, &
œ°_un£¡
->
chksum
,

650 &
œ°_un£¡
->
chksum_sw≠≥d
);

651 
œ°_un£¡
->
Êags
 |
TF_SEG_DATA_CHECKSUMMED
;

660 i‡(
œ°_un£¡
 =
NULL
) {

661 
pcb
->
un£¡
 = 
queue
;

663 
œ°_un£¡
->
√xt
 = 
queue
;

669 
pcb
->
¢d_lbb
 +
Àn
;

670 
pcb
->
¢d_buf
 -
Àn
;

671 
pcb
->
¢d_queuñí
 = 
queuñí
;

673 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("t˝_wrôe: %"
S16_F
" (afterÉnqueued)\n",

674 
pcb
->
¢d_queuñí
));

675 i‡(
pcb
->
¢d_queuñí
 != 0) {

676 
	`LWIP_ASSERT
("tcp_write: valid queueÜength",

677 
pcb
->
u«cked
 !
NULL
 ||Öcb->
un£¡
 != NULL);

681 i‡(
£g
 !
NULL
 && seg->
t˝hdr
 !NULL && ((
≠iÊags
 & 
TCP_WRITE_FLAG_MORE
)==0)) {

682 
	`TCPH_SET_FLAG
(
£g
->
t˝hdr
, 
TCP_PSH
);

685  
ERR_OK
;

686 
memîr
:

687 
pcb
->
Êags
 |
TF_NAGLEMEMERR
;

688 
	`TCP_STATS_INC
(
t˝
.
memîr
);

690 i‡(
c⁄ˇt_p
 !
NULL
) {

691 
	`pbuf_‰ì
(
c⁄ˇt_p
);

693 i‡(
queue
 !
NULL
) {

694 
	`t˝_£gs_‰ì
(
queue
);

696 i‡(
pcb
->
¢d_queuñí
 != 0) {

697 
	`LWIP_ASSERT
("t˝_wrôe: vÆid queuêÀngth", 
pcb
->
u«cked
 !
NULL
 ||

698 
pcb
->
un£¡
 !
NULL
);

700 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
 | 
LWIP_DBG_STATE
, ("t˝_wrôe: %"
S16_F
" (wôh memÉº)\n", 
pcb
->
¢d_queuñí
));

701  
ERR_MEM
;

702 
	}
}

714 
îr_t


715 
	$t˝_íqueue_Êags
(
t˝_pcb
 *
pcb
, 
u8_t
 
Êags
)

717 
pbuf
 *
p
;

718 
t˝_£g
 *
£g
;

719 
u8_t
 
›tÊags
 = 0;

720 
u8_t
 
›éí
 = 0;

722 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("t˝_íqueue_Êags: queuñí: %"
U16_F
"\n", (
u16_t
)
pcb
->
¢d_queuñí
));

724 
	`LWIP_ASSERT
("tcp_enqueue_flags:ÇeedÉither TCP_SYN or TCP_FIN in flags (programmer violates API)",

725 (
Êags
 & (
TCP_SYN
 | 
TCP_FIN
)) != 0);

728 i‡((
pcb
->
¢d_queuñí
 >
TCP_SND_QUEUELEN
Ë|| (pcb->¢d_queuñí > 
TCP_SNDQUEUELEN_OVERFLOW
)) {

729 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 3, ("t˝_íqueue_Êags:Åoÿl⁄g queuê%"
U16_F
" (max %"U16_F")\n",

730 
pcb
->
¢d_queuñí
, 
TCP_SND_QUEUELEN
));

731 
	`TCP_STATS_INC
(
t˝
.
memîr
);

732 
pcb
->
Êags
 |
TF_NAGLEMEMERR
;

733  
ERR_MEM
;

736 i‡(
Êags
 & 
TCP_SYN
) {

737 
›tÊags
 = 
TF_SEG_OPTS_MSS
;

739 #i‡
LWIP_TCP_TIMESTAMPS


740 i‡((
pcb
->
Êags
 & 
TF_TIMESTAMP
)) {

741 
›tÊags
 |
TF_SEG_OPTS_TS
;

744 
›éí
 = 
	`LWIP_TCP_OPT_LENGTH
(
›tÊags
);

750 i‡(
pcb
->
¢d_buf
 == 0) {

751 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 3, ("tcp_enqueue_flags:Ço send bufferávailable\n"));

752 
	`TCP_STATS_INC
(
t˝
.
memîr
);

753  
ERR_MEM
;

757 i‡((
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
›éí
, 
PBUF_RAM
)Ë=
NULL
) {

758 
pcb
->
Êags
 |
TF_NAGLEMEMERR
;

759 
	`TCP_STATS_INC
(
t˝
.
memîr
);

760  
ERR_MEM
;

762 
	`LWIP_ASSERT
("tcp_enqueue_flags: checkÅhat firstÖbuf can hold optlen",

763 (
p
->
Àn
 >
›éí
));

766 i‡((
£g
 = 
	`t˝_¸óã_£gmít
(
pcb
, 
p
, 
Êags
,Öcb->
¢d_lbb
, 
›tÊags
)Ë=
NULL
) {

767 
pcb
->
Êags
 |
TF_NAGLEMEMERR
;

768 
	`TCP_STATS_INC
(
t˝
.
memîr
);

769  
ERR_MEM
;

771 
	`LWIP_ASSERT
("£g->t˝hd∏nŸálig√d", ((
mem_±r_t
)
£g
->
t˝hdr
 % 
MEM_ALIGNMENT
) == 0);

772 
	`LWIP_ASSERT
("t˝_íqueue_Êags: invÆid segmíàÀngth", 
£g
->
Àn
 == 0);

774 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 
LWIP_DBG_TRACE
,

775 ("t˝_íqueue_Êags: queueög %"
U32_F
":%"U32_F" (0x%"
X16_F
")\n",

776 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
),

777 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë+ 
	`TCP_TCPLEN
(seg),

778 (
u16_t
)
Êags
));

781 i‡(
pcb
->
un£¡
 =
NULL
) {

782 
pcb
->
un£¡
 = 
£g
;

784 
t˝_£g
 *
u£g
;

785 
u£g
 = 
pcb
->
un£¡
; u£g->
√xt
 !
NULL
; useg = useg->next);

786 
u£g
->
√xt
 = 
£g
;

788 #i‡
TCP_OVERSIZE


790 
pcb
->
un£¡_ovîsize
 = 0;

794 i‡((
Êags
 & 
TCP_SYN
Ë|| (Êag†& 
TCP_FIN
)) {

795 
pcb
->
¢d_lbb
++;

797 
pcb
->
¢d_buf
--;

799 i‡(
Êags
 & 
TCP_FIN
) {

800 
pcb
->
Êags
 |
TF_FIN
;

804 
pcb
->
¢d_queuñí
 +
	`pbuf_˛í
(
£g
->
p
);

805 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("t˝_íqueue_Êags: %"
S16_F
" (a·îÉnqueued)\n", 
pcb
->
¢d_queuñí
));

806 i‡(
pcb
->
¢d_queuñí
 != 0) {

807 
	`LWIP_ASSERT
("tcp_enqueue_flags: invalid queueÜength",

808 
pcb
->
u«cked
 !
NULL
 ||Öcb->
un£¡
 != NULL);

811  
ERR_OK
;

812 
	}
}

815 #i‡
LWIP_TCP_TIMESTAMPS


822 
	$t˝_buûd_time°amp_›ti⁄
(
t˝_pcb
 *
pcb
, 
u32_t
 *
›ts
)

825 
›ts
[0] = 
	`PP_HTONL
(0x0101080A);

826 
›ts
[1] = 
	`ht⁄l
(
	`sys_now
());

827 
›ts
[2] = 
	`ht⁄l
(
pcb
->
ts_ª˚¡
);

828 
	}
}

835 
îr_t


836 
	$t˝_£nd_em±y_ack
(
t˝_pcb
 *
pcb
)

838 
pbuf
 *
p
;

839 
t˝_hdr
 *
t˝hdr
;

840 
u8_t
 
›éí
 = 0;

842 #i‡
LWIP_TCP_TIMESTAMPS


843 i‡(
pcb
->
Êags
 & 
TF_TIMESTAMP
) {

844 
›éí
 = 
	`LWIP_TCP_OPT_LENGTH
(
TF_SEG_OPTS_TS
);

848 
p
 = 
	`t˝_ouçut_Æloc_hódî
(
pcb
, 
›éí
, 0, 
	`ht⁄l
’cb->
¢d_nxt
));

849 i‡(
p
 =
NULL
) {

850 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
, ("tcp_output: (ACK) couldÇotállocateÖbuf\n"));

851  
ERR_BUF
;

853 
t˝hdr
 = (
t˝_hdr
 *)
p
->
∑ylﬂd
;

854 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
,

855 ("t˝_ouçut: sídög ACK f‹ %"
U32_F
"\n", 
pcb
->
rcv_nxt
));

857 
pcb
->
Êags
 &~(
TF_ACK_DELAY
 | 
TF_ACK_NOW
);

860 #i‡
LWIP_TCP_TIMESTAMPS


861 
pcb
->
ts_œ°ack£¡
 =Öcb->
rcv_nxt
;

863 i‡(
pcb
->
Êags
 & 
TF_TIMESTAMP
) {

864 
	`t˝_buûd_time°amp_›ti⁄
(
pcb
, (
u32_t
 *)(
t˝hdr
 + 1));

868 #i‡
CHECKSUM_GEN_TCP


869 
t˝hdr
->
chksum
 = 
	`öë_chksum_p£udo
(
p
, &(
pcb
->
loˇl_ù
), &’cb->
ªmŸe_ù
),

870 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
);

872 #i‡
LWIP_NETIF_HWADDRHINT


873 
	`ù_ouçut_höãd
(
p
, &(
pcb
->
loˇl_ù
), &’cb->
ªmŸe_ù
),Öcb->
âl
,Öcb->
tos
,

874 
IP_PROTO_TCP
, &(
pcb
->
addr_höt
));

876 
	`ù_ouçut
(
p
, &(
pcb
->
loˇl_ù
), &’cb->
ªmŸe_ù
),Öcb->
âl
,Öcb->
tos
,

877 
IP_PROTO_TCP
);

879 
	`pbuf_‰ì
(
p
);

881  
ERR_OK
;

882 
	}
}

891 
îr_t


892 
	$t˝_ouçut
(
t˝_pcb
 *
pcb
)

894 
t˝_£g
 *
£g
, *
u£g
;

895 
u32_t
 
wnd
, 
¢d_nxt
;

896 #i‡
TCP_CWND_DEBUG


897 
s16_t
 
i
 = 0;

904 i‡(
t˝_öput_pcb
 =
pcb
) {

905  
ERR_OK
;

908 
wnd
 = 
	`LWIP_MIN
(
pcb
->
¢d_wnd
,Öcb->
cwnd
);

910 
£g
 = 
pcb
->
un£¡
;

918 i‡(
pcb
->
Êags
 & 
TF_ACK_NOW
 &&

919 (
£g
 =
NULL
 ||

920 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë- 
pcb
->
œ°ack
 + seg->
Àn
 > 
wnd
)) {

921  
	`t˝_£nd_em±y_ack
(
pcb
);

925 
u£g
 = 
pcb
->
u«cked
;

926 i‡(
u£g
 !
NULL
) {

927 ; 
u£g
->
√xt
 !
NULL
; useg = useg->next);

930 #i‡
TCP_OUTPUT_DEBUG


931 i‡(
£g
 =
NULL
) {

932 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
, ("tcp_output:ÇothingÅo send (%p)\n",

933 (*)
pcb
->
un£¡
));

936 #i‡
TCP_CWND_DEBUG


937 i‡(
£g
 =
NULL
) {

938 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("t˝_ouçut: snd_wnd %"
U16_F


939 ", cwnd %"
U16_F
", wnd %"
U32_F


940 ", seg =NULL,áck %"
U32_F
"\n",

941 
pcb
->
¢d_wnd
,Öcb->
cwnd
, 
wnd
,Öcb->
œ°ack
));

943 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
,

944 ("t˝_ouçut: snd_wnd %"
U16_F
", cwnd %"U16_F", wnd %"
U32_F


945 ",Éffwnd %"
U32_F
", seq %"U32_F",áck %"U32_F"\n",

946 
pcb
->
¢d_wnd
,Öcb->
cwnd
, 
wnd
,

947 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë- 
pcb
->
œ°ack
 + seg->
Àn
,

948 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
), 
pcb
->
œ°ack
));

952 
£g
 !
NULL
 &&

953 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë- 
pcb
->
œ°ack
 + seg->
Àn
 <
wnd
) {

954 
	`LWIP_ASSERT
("RSTÇotÉxpected here!",

955 (
	`TCPH_FLAGS
(
£g
->
t˝hdr
Ë& 
TCP_RST
) == 0);

963 if((
	`t˝_do_ouçut_«gÀ
(
pcb
) == 0) &&

964 ((
pcb
->
Êags
 & (
TF_NAGLEMEMERR
 | 
TF_FIN
)) == 0)){

967 #i‡
TCP_CWND_DEBUG


968 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("t˝_ouçut: snd_wnd %"
U16_F
", cwnd %"U16_F", wnd %"
U32_F
",Éffwnd %"U32_F", seq %"U32_F",áck %"U32_F", i %"
S16_F
"\n",

969 
pcb
->
¢d_wnd
,Öcb->
cwnd
, 
wnd
,

970 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë+ seg->
Àn
 -

971 
pcb
->
œ°ack
,

972 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
), 
pcb
->
œ°ack
, 
i
));

973 ++
i
;

976 
pcb
->
un£¡
 = 
£g
->
√xt
;

978 i‡(
pcb
->
°©e
 !
SYN_SENT
) {

979 
	`TCPH_SET_FLAG
(
£g
->
t˝hdr
, 
TCP_ACK
);

980 
pcb
->
Êags
 &~(
TF_ACK_DELAY
 | 
TF_ACK_NOW
);

983 
	`t˝_ouçut_£gmít
(
£g
, 
pcb
);

984 
¢d_nxt
 = 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë+ 
	`TCP_TCPLEN
(seg);

985 i‡(
	`TCP_SEQ_LT
(
pcb
->
¢d_nxt
, snd_nxt)) {

986 
pcb
->
¢d_nxt
 = snd_nxt;

989 i‡(
	`TCP_TCPLEN
(
£g
) > 0) {

990 
£g
->
√xt
 = 
NULL
;

992 i‡(
pcb
->
u«cked
 =
NULL
) {

993 
pcb
->
u«cked
 = 
£g
;

994 
u£g
 = 
£g
;

1000 i‡(
	`TCP_SEQ_LT
(
	`¡ohl
(
£g
->
t˝hdr
->
£qno
),Çtohl(
u£g
->tcphdr->seqno))) {

1002 
t˝_£g
 **
cur_£g
 = &(
pcb
->
u«cked
);

1003 *
cur_£g
 &&

1004 
	`TCP_SEQ_LT
(
	`¡ohl
((*
cur_£g
)->
t˝hdr
->
£qno
),Çtohl(
£g
->tcphdr->seqno))) {

1005 
cur_£g
 = &((*cur_£g)->
√xt
 );

1007 
£g
->
√xt
 = (*
cur_£g
);

1008 (*
cur_£g
Ë
£g
;

1011 
u£g
->
√xt
 = 
£g
;

1012 
u£g
 = u£g->
√xt
;

1017 
	`t˝_£g_‰ì
(
£g
);

1019 
£g
 = 
pcb
->
un£¡
;

1021 #i‡
TCP_OVERSIZE


1022 i‡(
pcb
->
un£¡
 =
NULL
) {

1024 
pcb
->
un£¡_ovîsize
 = 0;

1028 i‡(
£g
 !
NULL
 && 
pcb
->
≥rsi°_backoff
 == 0 &&

1029 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë- 
pcb
->
œ°ack
 + seg->
Àn
 >Öcb->
¢d_wnd
) {

1031 
pcb
->
≥rsi°_˙t
 = 0;

1032 
pcb
->
≥rsi°_backoff
 = 1;

1035 
pcb
->
Êags
 &~
TF_NAGLEMEMERR
;

1036  
ERR_OK
;

1037 
	}
}

1046 
	$t˝_ouçut_£gmít
(
t˝_£g
 *
£g
, 
t˝_pcb
 *
pcb
)

1048 
u16_t
 
Àn
;

1049 
√tif
 *netif;

1050 
u32_t
 *
›ts
;

1053 
	`¢mp_öc_t˝out£gs
();

1057 
£g
->
t˝hdr
->
ackno
 = 
	`ht⁄l
(
pcb
->
rcv_nxt
);

1060 
£g
->
t˝hdr
->
wnd
 = 
	`ht⁄s
(
pcb
->
rcv_™n_wnd
);

1062 
pcb
->
rcv_™n_right_edge
 =Öcb->
rcv_nxt
 +Öcb->
rcv_™n_wnd
;

1066 
	`LWIP_ASSERT
("£g->t˝hd∏nŸálig√d", ((
mem_±r_t
)
£g
->
t˝hdr
 % 
MEM_ALIGNMENT
) == 0);

1067 
›ts
 = (
u32_t
 *)(*)(
£g
->
t˝hdr
 + 1);

1068 i‡(
£g
->
Êags
 & 
TF_SEG_OPTS_MSS
) {

1069 
	`TCP_BUILD_MSS_OPTION
(*
›ts
);

1070 
›ts
 += 1;

1072 #i‡
LWIP_TCP_TIMESTAMPS


1073 
pcb
->
ts_œ°ack£¡
 =Öcb->
rcv_nxt
;

1075 i‡(
£g
->
Êags
 & 
TF_SEG_OPTS_TS
) {

1076 
	`t˝_buûd_time°amp_›ti⁄
(
pcb
, 
›ts
);

1077 
›ts
 += 3;

1083 i‡(
pcb
->
πime
 == -1) {

1084 
pcb
->
πime
 = 0;

1089 i‡(
	`ù_addr_ißny
(&(
pcb
->
loˇl_ù
))) {

1090 
√tif
 = 
	`ù_rouã
(&(
pcb
->
ªmŸe_ù
));

1091 i‡(
√tif
 =
NULL
) {

1094 
	`ù_addr_c›y
(
pcb
->
loˇl_ù
, 
√tif
->
ù_addr
);

1097 i‡(
pcb
->
πã°
 == 0) {

1098 
pcb
->
πã°
 = 
t˝_ticks
;

1099 
pcb
->
π£q
 = 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
);

1101 
	`LWIP_DEBUGF
(
TCP_RTO_DEBUG
, ("t˝_ouçut_£gmít:Ñt£q %"
U32_F
"\n", 
pcb
->
π£q
));

1103 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
, ("t˝_ouçut_£gmít: %"
U32_F
":%"U32_F"\n",

1104 
	`ht⁄l
(
£g
->
t˝hdr
->
£qno
), htonl(seg->tcphdr->seqno) +

1105 
£g
->
Àn
));

1107 
Àn
 = (
u16_t
)((
u8_t
 *)
£g
->
t˝hdr
 - (u8_à*)£g->
p
->
∑ylﬂd
);

1109 
£g
->
p
->
Àn
 -=Üen;

1110 
£g
->
p
->
tŸ_Àn
 -
Àn
;

1112 
£g
->
p
->
∑ylﬂd
 = seg->
t˝hdr
;

1114 
£g
->
t˝hdr
->
chksum
 = 0;

1115 #i‡
CHECKSUM_GEN_TCP


1116 #i‡
TCP_CHECKSUM_ON_COPY


1118 
u32_t
 
acc
;

1119 #i‡
TCP_CHECKSUM_ON_COPY_SANITY_CHECK


1120 
u16_t
 
chksum_¶ow
 = 
	`öë_chksum_p£udo
(
£g
->
p
, &(
pcb
->
loˇl_ù
),

1121 &(
pcb
->
ªmŸe_ù
),

1122 
IP_PROTO_TCP
, 
£g
->
p
->
tŸ_Àn
);

1124 i‡((
£g
->
Êags
 & 
TF_SEG_DATA_CHECKSUMMED
) == 0) {

1125 
	`LWIP_ASSERT
("data included butÇot checksummed",

1126 
£g
->
p
->
tŸ_Àn
 =(
	`TCPH_HDRLEN
(£g->
t˝hdr
) * 4));

1130 
acc
 = 
	`öë_chksum_p£udo_∑πül
(
£g
->
p
, &(
pcb
->
loˇl_ù
),

1131 &(
pcb
->
ªmŸe_ù
),

1132 
IP_PROTO_TCP
, 
£g
->
p
->
tŸ_Àn
, 
	`TCPH_HDRLEN
(£g->
t˝hdr
) * 4);

1134 i‡(
£g
->
chksum_sw≠≥d
) {

1135 
£g
->
chksum
 = 
	`SWAP_BYTES_IN_WORD
(seg->chksum);

1136 
£g
->
chksum_sw≠≥d
 = 0;

1138 
acc
 +(
u16_t
)~(
£g
->
chksum
);

1139 
£g
->
t˝hdr
->
chksum
 = 
	`FOLD_U32T
(
acc
);

1140 #i‡
TCP_CHECKSUM_ON_COPY_SANITY_CHECK


1141 i‡(
chksum_¶ow
 !
£g
->
t˝hdr
->
chksum
) {

1142 
	`LWIP_DEBUGF
(
TCP_DEBUG
 | 
LWIP_DBG_LEVEL_WARNING
,

1143 ("t˝_ouçut_£gmít: cÆcuœãd checksum i†%"
X16_F
" instead of %"X16_F"\n",

1144 
£g
->
t˝hdr
->
chksum
, 
chksum_¶ow
));

1145 
£g
->
t˝hdr
->
chksum
 = 
chksum_¶ow
;

1150 
£g
->
t˝hdr
->
chksum
 = 
	`öë_chksum_p£udo
(£g->
p
, &(
pcb
->
loˇl_ù
),

1151 &(
pcb
->
ªmŸe_ù
),

1152 
IP_PROTO_TCP
, 
£g
->
p
->
tŸ_Àn
);

1155 
	`TCP_STATS_INC
(
t˝
.
xmô
);

1157 #i‡
LWIP_NETIF_HWADDRHINT


1158 
	`ù_ouçut_höãd
(
£g
->
p
, &(
pcb
->
loˇl_ù
), &’cb->
ªmŸe_ù
),Öcb->
âl
,Öcb->
tos
,

1159 
IP_PROTO_TCP
, &(
pcb
->
addr_höt
));

1161 
	`ù_ouçut
(
£g
->
p
, &(
pcb
->
loˇl_ù
), &’cb->
ªmŸe_ù
),Öcb->
âl
,Öcb->
tos
,

1162 
IP_PROTO_TCP
);

1164 
	}
}

1187 
	$t˝_r°
(
u32_t
 
£qno
, u32_à
ackno
,

1188 
ù_addr_t
 *
loˇl_ù
, ip_addr_à*
ªmŸe_ù
,

1189 
u16_t
 
loˇl_p‹t
, u16_à
ªmŸe_p‹t
)

1191 
pbuf
 *
p
;

1192 
t˝_hdr
 *
t˝hdr
;

1193 
p
 = 
	`pbuf_Æloc
(
PBUF_IP
, 
TCP_HLEN
, 
PBUF_RAM
);

1194 i‡(
p
 =
NULL
) {

1195 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_rst: couldÇotállocate memory forÖbuf\n"));

1198 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold structÅcp_hdr",

1199 (
p
->
Àn
 >(
t˝_hdr
)));

1201 
t˝hdr
 = (
t˝_hdr
 *)
p
->
∑ylﬂd
;

1202 
t˝hdr
->
§c
 = 
	`ht⁄s
(
loˇl_p‹t
);

1203 
t˝hdr
->
de°
 = 
	`ht⁄s
(
ªmŸe_p‹t
);

1204 
t˝hdr
->
£qno
 = 
	`ht⁄l
(seqno);

1205 
t˝hdr
->
ackno
 = 
	`ht⁄l
(ackno);

1206 
	`TCPH_HDRLEN_FLAGS_SET
(
t˝hdr
, 
TCP_HLEN
/4, 
TCP_RST
 | 
TCP_ACK
);

1207 
t˝hdr
->
wnd
 = 
	`PP_HTONS
(
TCP_WND
);

1208 
t˝hdr
->
chksum
 = 0;

1209 
t˝hdr
->
urgp
 = 0;

1211 #i‡
CHECKSUM_GEN_TCP


1212 
t˝hdr
->
chksum
 = 
	`öë_chksum_p£udo
(
p
, 
loˇl_ù
, 
ªmŸe_ù
,

1213 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
);

1215 
	`TCP_STATS_INC
(
t˝
.
xmô
);

1216 
	`¢mp_öc_t˝ouå°s
();

1218 
	`ù_ouçut
(
p
, 
loˇl_ù
, 
ªmŸe_ù
, 
TCP_TTL
, 0, 
IP_PROTO_TCP
);

1219 
	`pbuf_‰ì
(
p
);

1220 
	`LWIP_DEBUGF
(
TCP_RST_DEBUG
, ("t˝_r°: seqnÿ%"
U32_F
"ácknÿ%"U32_F".\n", 
£qno
, 
ackno
));

1221 
	}
}

1231 
	$t˝_ªxmô_πo
(
t˝_pcb
 *
pcb
)

1233 
t˝_£g
 *
£g
;

1235 i‡(
pcb
->
u«cked
 =
NULL
) {

1240 
£g
 = 
pcb
->
u«cked
; seg->
√xt
 !
NULL
; seg = seg->next);

1242 
£g
->
√xt
 = 
pcb
->
un£¡
;

1244 
pcb
->
un£¡
 =Öcb->
u«cked
;

1246 
pcb
->
u«cked
 = 
NULL
;

1249 ++
pcb
->
ƒtx
;

1252 
pcb
->
πã°
 = 0;

1255 
	`t˝_ouçut
(
pcb
);

1256 
	}
}

1266 
	$t˝_ªxmô
(
t˝_pcb
 *
pcb
)

1268 
t˝_£g
 *
£g
;

1269 
t˝_£g
 **
cur_£g
;

1271 i‡(
pcb
->
u«cked
 =
NULL
) {

1277 
£g
 = 
pcb
->
u«cked
;

1278 
pcb
->
u«cked
 = 
£g
->
√xt
;

1280 
cur_£g
 = &(
pcb
->
un£¡
);

1281 *
cur_£g
 &&

1282 
	`TCP_SEQ_LT
(
	`¡ohl
((*
cur_£g
)->
t˝hdr
->
£qno
),Çtohl(
£g
->tcphdr->seqno))) {

1283 
cur_£g
 = &((*cur_£g)->
√xt
 );

1285 
£g
->
√xt
 = *
cur_£g
;

1286 *
cur_£g
 = 
£g
;

1288 ++
pcb
->
ƒtx
;

1291 
pcb
->
πã°
 = 0;

1294 
	`¢mp_öc_t˝ªå™s£gs
();

1297 
	}
}

1306 
	$t˝_ªxmô_Á°
(
t˝_pcb
 *
pcb
)

1308 i‡(
pcb
->
u«cked
 !
NULL
 && !’cb->
Êags
 & 
TF_INFR
)) {

1310 
	`LWIP_DEBUGF
(
TCP_FR_DEBUG
,

1311 ("t˝_ª˚ive: du∑ck†%"
U16_F
" (%"
U32_F


1312 "), fa°Ñëønsmô %"
U32_F
"\n",

1313 (
u16_t
)
pcb
->
du∑cks
,Öcb->
œ°ack
,

1314 
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
)));

1315 
	`t˝_ªxmô
(
pcb
);

1319 i‡(
pcb
->
cwnd
 >Öcb->
¢d_wnd
) {

1320 
pcb
->
s°hªsh
 =Öcb->
¢d_wnd
 / 2;

1322 
pcb
->
s°hªsh
 =Öcb->
cwnd
 / 2;

1326 i‡(
pcb
->
s°hªsh
 < 2*pcb->
mss
) {

1327 
	`LWIP_DEBUGF
(
TCP_FR_DEBUG
,

1328 ("t˝_ª˚ive: Thêmöimum vÆuêf‹ s°hªsh %"
U16_F


1329 " should bêmö 2 ms†%"
U16_F
"...\n",

1330 
pcb
->
s°hªsh
, 2*pcb->
mss
));

1331 
pcb
->
s°hªsh
 = 2*pcb->
mss
;

1334 
pcb
->
cwnd
 =Öcb->
s°hªsh
 + 3 *Öcb->
mss
;

1335 
pcb
->
Êags
 |
TF_INFR
;

1337 
	}
}

1349 
	$t˝_kì∑live
(
t˝_pcb
 *
pcb
)

1351 
pbuf
 *
p
;

1352 
t˝_hdr
 *
t˝hdr
;

1354 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_kì∑live: sídög KEEPALIVEÖrobêtÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

1355 
	`ù4_addr1_16
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr2_16
(&pcb->remote_ip),

1356 
	`ù4_addr3_16
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr4_16
(&pcb->remote_ip)));

1358 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_kì∑live:Å˝_tick†%"
U32_F
"Öcb->tm∏%"U32_F"Öcb->kìp_˙t_£¡ %"
U16_F
"\n",

1359 
t˝_ticks
, 
pcb
->
tmr
,Öcb->
kìp_˙t_£¡
));

1361 
p
 = 
	`t˝_ouçut_Æloc_hódî
(
pcb
, 0, 0, 
	`ht⁄l
’cb->
¢d_nxt
 - 1));

1362 if(
p
 =
NULL
) {

1363 
	`LWIP_DEBUGF
(
TCP_DEBUG
,

1367 
t˝hdr
 = (
t˝_hdr
 *)
p
->
∑ylﬂd
;

1369 #i‡
CHECKSUM_GEN_TCP


1370 
t˝hdr
->
chksum
 = 
	`öë_chksum_p£udo
(
p
, &
pcb
->
loˇl_ù
, &pcb->
ªmŸe_ù
,

1371 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
);

1373 
	`TCP_STATS_INC
(
t˝
.
xmô
);

1376 #i‡
LWIP_NETIF_HWADDRHINT


1377 
	`ù_ouçut_höãd
(
p
, &
pcb
->
loˇl_ù
, &pcb->
ªmŸe_ù
,Öcb->
âl
, 0, 
IP_PROTO_TCP
,

1378 &(
pcb
->
addr_höt
));

1380 
	`ù_ouçut
(
p
, &
pcb
->
loˇl_ù
, &pcb->
ªmŸe_ù
,Öcb->
âl
, 0, 
IP_PROTO_TCP
);

1383 
	`pbuf_‰ì
(
p
);

1385 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_kì∑live: seqnÿ%"
U32_F
"áckno %"U32_F".\n",

1386 
pcb
->
¢d_nxt
 - 1,Öcb->
rcv_nxt
));

1387 
	}
}

1399 
	$t˝_zîo_wödow_¥obe
(
t˝_pcb
 *
pcb
)

1401 
pbuf
 *
p
;

1402 
t˝_hdr
 *
t˝hdr
;

1403 
t˝_£g
 *
£g
;

1404 
u16_t
 
Àn
;

1405 
u8_t
 
is_fö
;

1407 
	`LWIP_DEBUGF
(
TCP_DEBUG
,

1409 
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

1410 
	`ù4_addr1_16
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr2_16
(&pcb->remote_ip),

1411 
	`ù4_addr3_16
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr4_16
(&pcb->remote_ip)));

1413 
	`LWIP_DEBUGF
(
TCP_DEBUG
,

1414 ("t˝_zîo_wödow_¥obe:Å˝_tick†%"
U32_F


1415 "Öcb->tm∏%"
U32_F
"Öcb->kìp_˙t_£¡ %"
U16_F
"\n",

1416 
t˝_ticks
, 
pcb
->
tmr
,Öcb->
kìp_˙t_£¡
));

1418 
£g
 = 
pcb
->
u«cked
;

1420 if(
£g
 =
NULL
) {

1421 
£g
 = 
pcb
->
un£¡
;

1423 if(
£g
 =
NULL
) {

1427 
is_fö
 = ((
	`TCPH_FLAGS
(
£g
->
t˝hdr
Ë& 
TCP_FIN
Ë!0Ë&& (£g->
Àn
 == 0);

1429 
Àn
 = 
is_fö
 ? 0 : 1;

1431 
p
 = 
	`t˝_ouçut_Æloc_hódî
(
pcb
, 0, 
Àn
, 
£g
->
t˝hdr
->
£qno
);

1432 if(
p
 =
NULL
) {

1433 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_zero_window_probe:Ço memory forÖbuf\n"));

1436 
t˝hdr
 = (
t˝_hdr
 *)
p
->
∑ylﬂd
;

1438 i‡(
is_fö
) {

1440 
	`TCPH_FLAGS_SET
(
t˝hdr
, 
TCP_ACK
 | 
TCP_FIN
);

1443 
t˝_hdr
 *
thdr
 = (t˝_hd∏*)
£g
->
p
->
∑ylﬂd
;

1444 *
d
 = ((*)
p
->
∑ylﬂd
 + 
TCP_HLEN
);

1445 
	`pbuf_c›y_∑πül
(
£g
->
p
, 
d
, 1, 
	`TCPH_HDRLEN
(
thdr
) * 4);

1448 #i‡
CHECKSUM_GEN_TCP


1449 
t˝hdr
->
chksum
 = 
	`öë_chksum_p£udo
(
p
, &
pcb
->
loˇl_ù
, &pcb->
ªmŸe_ù
,

1450 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
);

1452 
	`TCP_STATS_INC
(
t˝
.
xmô
);

1455 #i‡
LWIP_NETIF_HWADDRHINT


1456 
	`ù_ouçut_höãd
(
p
, &
pcb
->
loˇl_ù
, &pcb->
ªmŸe_ù
,Öcb->
âl
, 0, 
IP_PROTO_TCP
,

1457 &(
pcb
->
addr_höt
));

1459 
	`ù_ouçut
(
p
, &
pcb
->
loˇl_ù
, &pcb->
ªmŸe_ù
,Öcb->
âl
, 0, 
IP_PROTO_TCP
);

1462 
	`pbuf_‰ì
(
p
);

1464 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_zîo_wödow_¥obe: seqnÿ%"
U32_F


1465 "ácknÿ%"
U32_F
".\n",

1466 
pcb
->
¢d_nxt
 - 1,Öcb->
rcv_nxt
));

1467 
	}
}

	@core/timers.c

42 
	~"lwù/›t.h
"

44 
	~"lwù/timîs.h
"

45 
	~"lwù/t˝_im∂.h
"

47 #i‡
LWIP_TIMERS


49 
	~"lwù/def.h
"

50 
	~"lwù/memp.h
"

51 
	~"lwù/t˝ù.h
"

53 
	~"lwù/ù_‰ag.h
"

54 
	~"√tif/ëh¨p.h
"

55 
	~"lwù/dh˝.h
"

56 
	~"lwù/autoù.h
"

57 
	~"lwù/igmp.h
"

58 
	~"lwù/dns.h
"

62 
sys_timeo
 *
	g√xt_timeout
;

63 #i‡
NO_SYS


64 
u32_t
 
	gtimeouts_œ°_time
;

67 #i‡
LWIP_TCP


69 
	gt˝ù_t˝_timî_a˘ive
;

77 
	$t˝ù_t˝_timî
(*
¨g
)

79 
	`LWIP_UNUSED_ARG
(
¨g
);

82 
	`t˝_tmr
();

84 i‡(
t˝_a˘ive_pcbs
 || 
t˝_tw_pcbs
) {

86 
	`sys_timeout
(
TCP_TMR_INTERVAL
, 
t˝ù_t˝_timî
, 
NULL
);

89 
t˝ù_t˝_timî_a˘ive
 = 0;

91 
	}
}

99 
	$t˝_timî_√eded
()

102 i‡(!
t˝ù_t˝_timî_a˘ive
 && (
t˝_a˘ive_pcbs
 || 
t˝_tw_pcbs
)) {

104 
t˝ù_t˝_timî_a˘ive
 = 1;

105 
	`sys_timeout
(
TCP_TMR_INTERVAL
, 
t˝ù_t˝_timî
, 
NULL
);

107 
	}
}

110 #i‡
IP_REASSEMBLY


117 
	$ù_ªass_timî
(*
¨g
)

119 
	`LWIP_UNUSED_ARG
(
¨g
);

120 
	`LWIP_DEBUGF
(
TIMERS_DEBUG
, ("tcpip: ip_reass_tmr()\n"));

121 
	`ù_ªass_tmr
();

122 
	`sys_timeout
(
IP_TMR_INTERVAL
, 
ù_ªass_timî
, 
NULL
);

123 
	}
}

126 #i‡
LWIP_ARP


133 
	$¨p_timî
(*
¨g
)

135 
	`LWIP_UNUSED_ARG
(
¨g
);

136 
	`LWIP_DEBUGF
(
TIMERS_DEBUG
, ("tcpip:Étharp_tmr()\n"));

137 
	`ëh¨p_tmr
();

138 
	`sys_timeout
(
ARP_TMR_INTERVAL
, 
¨p_timî
, 
NULL
);

139 
	}
}

142 #i‡
LWIP_DHCP


149 
	$dh˝_timî_cﬂr£
(*
¨g
)

151 
	`LWIP_UNUSED_ARG
(
¨g
);

152 
	`LWIP_DEBUGF
(
TIMERS_DEBUG
, ("tcpip: dhcp_coarse_tmr()\n"));

153 
	`dh˝_cﬂr£_tmr
();

154 
	`sys_timeout
(
DHCP_COARSE_TIMER_MSECS
, 
dh˝_timî_cﬂr£
, 
NULL
);

155 
	}
}

163 
	$dh˝_timî_föe
(*
¨g
)

165 
	`LWIP_UNUSED_ARG
(
¨g
);

166 
	`LWIP_DEBUGF
(
TIMERS_DEBUG
, ("tcpip: dhcp_fine_tmr()\n"));

167 
	`dh˝_föe_tmr
();

168 
	`sys_timeout
(
DHCP_FINE_TIMER_MSECS
, 
dh˝_timî_föe
, 
NULL
);

169 
	}
}

172 #i‡
LWIP_AUTOIP


179 
	$autoù_timî
(*
¨g
)

181 
	`LWIP_UNUSED_ARG
(
¨g
);

182 
	`LWIP_DEBUGF
(
TIMERS_DEBUG
, ("tcpip:áutoip_tmr()\n"));

183 
	`autoù_tmr
();

184 
	`sys_timeout
(
AUTOIP_TMR_INTERVAL
, 
autoù_timî
, 
NULL
);

185 
	}
}

188 #i‡
LWIP_IGMP


195 
	$igmp_timî
(*
¨g
)

197 
	`LWIP_UNUSED_ARG
(
¨g
);

198 
	`LWIP_DEBUGF
(
TIMERS_DEBUG
, ("tcpip: igmp_tmr()\n"));

199 
	`igmp_tmr
();

200 
	`sys_timeout
(
IGMP_TMR_INTERVAL
, 
igmp_timî
, 
NULL
);

201 
	}
}

204 #i‡
LWIP_DNS


211 
	$dns_timî
(*
¨g
)

213 
	`LWIP_UNUSED_ARG
(
¨g
);

214 
	`LWIP_DEBUGF
(
TIMERS_DEBUG
, ("tcpip: dns_tmr()\n"));

215 
	`dns_tmr
();

216 
	`sys_timeout
(
DNS_TMR_INTERVAL
, 
dns_timî
, 
NULL
);

217 
	}
}

221 
	$sys_timeouts_öô
()

223 #i‡
IP_REASSEMBLY


224 
	`sys_timeout
(
IP_TMR_INTERVAL
, 
ù_ªass_timî
, 
NULL
);

226 #i‡
LWIP_ARP


227 
	`sys_timeout
(
ARP_TMR_INTERVAL
, 
¨p_timî
, 
NULL
);

229 #i‡
LWIP_DHCP


230 
	`sys_timeout
(
DHCP_COARSE_TIMER_MSECS
, 
dh˝_timî_cﬂr£
, 
NULL
);

231 
	`sys_timeout
(
DHCP_FINE_TIMER_MSECS
, 
dh˝_timî_föe
, 
NULL
);

233 #i‡
LWIP_AUTOIP


234 
	`sys_timeout
(
AUTOIP_TMR_INTERVAL
, 
autoù_timî
, 
NULL
);

236 #i‡
LWIP_IGMP


237 
	`sys_timeout
(
IGMP_TMR_INTERVAL
, 
igmp_timî
, 
NULL
);

239 #i‡
LWIP_DNS


240 
	`sys_timeout
(
DNS_TMR_INTERVAL
, 
dns_timî
, 
NULL
);

243 #i‡
NO_SYS


245 
timeouts_œ°_time
 = 
	`sys_now
();

247 
	}
}

259 #i‡
LWIP_DEBUG_TIMERNAMES


261 
	$sys_timeout_debug
(
u32_t
 
m£cs
, 
sys_timeout_h™dÀr
 
h™dÀr
, *
¨g
, c⁄° * 
h™dÀr_«me
)

264 
	$sys_timeout
(
u32_t
 
m£cs
, 
sys_timeout_h™dÀr
 
h™dÀr
, *
¨g
)

267 
sys_timeo
 *
timeout
, *
t
;

269 
timeout
 = (
sys_timeo
 *)
	`memp_mÆloc
(
MEMP_SYS_TIMEOUT
);

270 i‡(
timeout
 =
NULL
) {

271 
	`LWIP_ASSERT
("sys_timeout:Åimeouà!NULL,Öoﬁ MEMP_SYS_TIMEOUT i†em±y", 
timeout
 !
NULL
);

274 
timeout
->
√xt
 = 
NULL
;

275 
timeout
->
h
 = 
h™dÀr
;

276 
timeout
->
¨g
 =árg;

277 
timeout
->
time
 = 
m£cs
;

278 #i‡
LWIP_DEBUG_TIMERNAMES


279 
timeout
->
h™dÀr_«me
 = handler_name;

280 
	`LWIP_DEBUGF
(
TIMERS_DEBUG
, ("sys_timeout: %∞m£cs=%"
U32_F
" handler=%sárg=%p\n",

281 (*)
timeout
, 
m£cs
, 
h™dÀr_«me
, (*)
¨g
));

284 i‡(
√xt_timeout
 =
NULL
) {

285 
√xt_timeout
 = 
timeout
;

289 i‡(
√xt_timeout
->
time
 > 
m£cs
) {

290 
√xt_timeout
->
time
 -
m£cs
;

291 
timeout
->
√xt
 = 
√xt_timeout
;

292 
√xt_timeout
 = 
timeout
;

294 
t
 = 
√xt_timeout
;Å !
NULL
;Å =Å->
√xt
) {

295 
timeout
->
time
 -
t
->time;

296 i‡(
t
->
√xt
 =
NULL
 ||Å->√xt->
time
 > 
timeout
->time) {

297 i‡(
t
->
√xt
 !
NULL
) {

298 
t
->
√xt
->
time
 -
timeout
->time;

300 
timeout
->
√xt
 = 
t
->next;

301 
t
->
√xt
 = 
timeout
;

306 
	}
}

319 
	$sys_u¡imeout
(
sys_timeout_h™dÀr
 
h™dÀr
, *
¨g
)

321 
sys_timeo
 *
¥ev_t
, *
t
;

323 i‡(
√xt_timeout
 =
NULL
) {

327 
t
 = 
√xt_timeout
, 
¥ev_t
 = 
NULL
;Å !NULL;Öªv_àt,Å =Å->
√xt
) {

328 i‡((
t
->
h
 =
h™dÀr
Ë&& (t->
¨g
 ==árg)) {

331 i‡(
¥ev_t
 =
NULL
) {

332 
√xt_timeout
 = 
t
->
√xt
;

334 
¥ev_t
->
√xt
 = 
t
->next;

337 i‡(
t
->
√xt
 !
NULL
) {

338 
t
->
√xt
->
time
 +=Å->time;

340 
	`memp_‰ì
(
MEMP_SYS_TIMEOUT
, 
t
);

345 
	}
}

347 #i‡
NO_SYS


356 
	$sys_check_timeouts
()

358 
sys_timeo
 *
tm±imeout
;

359 
u32_t
 
diff
;

360 
sys_timeout_h™dÀr
 
h™dÀr
;

361 *
¨g
;

362 
had_⁄e
;

363 
u32_t
 
now
;

365 
now
 = 
	`sys_now
();

366 i‡(
√xt_timeout
) {

368 
diff
 = 
	`LWIP_U32_DIFF
(
now
, 
timeouts_œ°_time
);

371 
had_⁄e
 = 0;

372 
tm±imeout
 = 
√xt_timeout
;

373 i‡(
tm±imeout
->
time
 <
diff
) {

375 
had_⁄e
 = 1;

376 
timeouts_œ°_time
 = 
now
;

377 
diff
 -
tm±imeout
->
time
;

378 
√xt_timeout
 = 
tm±imeout
->
√xt
;

379 
h™dÀr
 = 
tm±imeout
->
h
;

380 
¨g
 = 
tm±imeout
->arg;

381 #i‡
LWIP_DEBUG_TIMERNAMES


382 i‡(
h™dÀr
 !
NULL
) {

383 
	`LWIP_DEBUGF
(
TIMERS_DEBUG
, ("sct calling h=%sárg=%p\n",

384 
tm±imeout
->
h™dÀr_«me
, 
¨g
));

387 
	`memp_‰ì
(
MEMP_SYS_TIMEOUT
, 
tm±imeout
);

388 i‡(
h™dÀr
 !
NULL
) {

389 
	`h™dÀr
(
¨g
);

393 }
had_⁄e
);

395 
	}
}

403 
	$sys_ª°¨t_timeouts
()

405 
timeouts_œ°_time
 = 
	`sys_now
();

406 
	}
}

418 
	$sys_timeouts_mbox_„tch
(
sys_mbox_t
 *
mbox
, **
msg
)

420 
u32_t
 
time_√eded
;

421 
sys_timeo
 *
tm±imeout
;

422 
sys_timeout_h™dÀr
 
h™dÀr
;

423 *
¨g
;

425 
agaö
:

426 i‡(!
√xt_timeout
) {

427 
time_√eded
 = 
	`sys_¨ch_mbox_„tch
(
mbox
, 
msg
, 0);

429 i‡(
√xt_timeout
->
time
 > 0) {

430 
time_√eded
 = 
	`sys_¨ch_mbox_„tch
(
mbox
, 
msg
, 
√xt_timeout
->
time
);

432 
time_√eded
 = 
SYS_ARCH_TIMEOUT
;

435 i‡(
time_√eded
 =
SYS_ARCH_TIMEOUT
) {

439 
tm±imeout
 = 
√xt_timeout
;

440 
√xt_timeout
 = 
tm±imeout
->
√xt
;

441 
h™dÀr
 = 
tm±imeout
->
h
;

442 
¨g
 = 
tm±imeout
->arg;

443 #i‡
LWIP_DEBUG_TIMERNAMES


444 i‡(
h™dÀr
 !
NULL
) {

445 
	`LWIP_DEBUGF
(
TIMERS_DEBUG
, ("stmf calling h=%sárg=%p\n",

446 
tm±imeout
->
h™dÀr_«me
, 
¨g
));

449 
	`memp_‰ì
(
MEMP_SYS_TIMEOUT
, 
tm±imeout
);

450 i‡(
h™dÀr
 !
NULL
) {

453 
	`LOCK_TCPIP_CORE
();

454 
	`h™dÀr
(
¨g
);

455 
	`UNLOCK_TCPIP_CORE
();

457 
	`LWIP_TCPIP_THREAD_ALIVE
();

460 
agaö
;

465 i‡(
time_√eded
 < 
√xt_timeout
->
time
) {

466 
√xt_timeout
->
time
 -
time_√eded
;

468 
√xt_timeout
->
time
 = 0;

472 
	}
}

479 
	$t˝_timî_√eded
()

481 
	}
}

	@core/udp.c

49 
	~"lwù/›t.h
"

51 #i‡
LWIP_UDP


53 
	~"lwù/udp.h
"

54 
	~"lwù/def.h
"

55 
	~"lwù/memp.h
"

56 
	~"lwù/öë_chksum.h
"

57 
	~"lwù/ù_addr.h
"

58 
	~"lwù/√tif.h
"

59 
	~"lwù/icmp.h
"

60 
	~"lwù/°©s.h
"

61 
	~"lwù/¢mp.h
"

62 
	~"¨ch/≥rf.h
"

63 
	~"lwù/dh˝.h
"

65 
	~<°rög.h
>

69 
udp_pcb
 *
	gudp_pcbs
;

84 
	$udp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

86 
udp_hdr
 *
udphdr
;

87 
udp_pcb
 *
pcb
, *
¥ev
;

88 
udp_pcb
 *
unc⁄_pcb
;

89 
ù_hdr
 *
ùhdr
;

90 
u16_t
 
§c
, 
de°
;

91 
u8_t
 
loˇl_m©ch
;

92 
u8_t
 
brﬂdˇ°
;

94 
PERF_START
;

96 
	`UDP_STATS_INC
(
udp
.
ªcv
);

98 
ùhdr
 = (
ù_hdr
 *)
p
->
∑ylﬂd
;

102 i‡(
p
->
tŸ_Àn
 < (
	`IPH_HL
(
ùhdr
Ë* 4 + 
UDP_HLEN
Ë|| 
	`pbuf_hódî
’, -(
s16_t
)(IPH_HL(iphdr) * 4))) {

104 
	`LWIP_DEBUGF
(
UDP_DEBUG
,

105 ("udp_öput: sh‹àUDP d©agøm (%"
U16_F
" byãsËdisˇrded\n", 
p
->
tŸ_Àn
));

106 
	`UDP_STATS_INC
(
udp
.
À√º
);

107 
	`UDP_STATS_INC
(
udp
.
dr›
);

108 
	`¢mp_öc_udpöîr‹s
();

109 
	`pbuf_‰ì
(
p
);

110 
íd
;

113 
udphdr
 = (
udp_hdr
 *)
p
->
∑ylﬂd
;

116 
brﬂdˇ°
 = 
	`ù_addr_isbrﬂdˇ°
(&
cuºít_ùhdr_de°
, 
öp
);

118 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_öput:Ñe˚ived d©agøm o‡Àngth %"
U16_F
"\n", 
p
->
tŸ_Àn
));

121 
§c
 = 
	`¡ohs
(
udphdr
->src);

122 
de°
 = 
	`¡ohs
(
udphdr
->dest);

124 
	`udp_debug_¥öt
(
udphdr
);

127 
	`LWIP_DEBUGF
(
UDP_DEBUG
,

128 ("ud∞(%"
U16_F
".%"U16_F".%"U16_F".%"U16_F", %"U16_F") <-- "

129 "(%"
U16_F
".%"U16_F".%"U16_F".%"U16_F", %"U16_F")\n",

130 
	`ù4_addr1_16
(&
ùhdr
->
de°
), 
	`ù4_addr2_16
(&iphdr->dest),

131 
	`ù4_addr3_16
(&
ùhdr
->
de°
), 
	`ù4_addr4_16
(&ùhdr->de°), 
	`¡ohs
(
udphdr
->dest),

132 
	`ù4_addr1_16
(&
ùhdr
->
§c
), 
	`ù4_addr2_16
(&iphdr->src),

133 
	`ù4_addr3_16
(&
ùhdr
->
§c
), 
	`ù4_addr4_16
(&ùhdr->§c), 
	`¡ohs
(
udphdr
->src)));

135 #i‡
LWIP_DHCP


136 
pcb
 = 
NULL
;

139 i‡(
de°
 =
DHCP_CLIENT_PORT
) {

141 i‡(
§c
 =
DHCP_SERVER_PORT
) {

142 i‡((
öp
->
dh˝
 !
NULL
Ë&& (öp->dh˝->
pcb
 != NULL)) {

146 i‡((
	`ù_addr_ißny
(&
öp
->
dh˝
->
pcb
->
ªmŸe_ù
) ||

147 
	`ù_addr_cmp
(&(
öp
->
dh˝
->
pcb
->
ªmŸe_ù
), &
cuºít_ùhdr_§c
))) {

148 
pcb
 = 
öp
->
dh˝
->pcb;

155 
¥ev
 = 
NULL
;

156 
loˇl_m©ch
 = 0;

157 
unc⁄_pcb
 = 
NULL
;

162 
pcb
 = 
udp_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

163 
loˇl_m©ch
 = 0;

165 
	`LWIP_DEBUGF
(
UDP_DEBUG
,

166 ("pcb (%"
U16_F
".%"U16_F".%"U16_F".%"U16_F", %"U16_F") --- "

167 "(%"
U16_F
".%"U16_F".%"U16_F".%"U16_F", %"U16_F")\n",

168 
	`ù4_addr1_16
(&
pcb
->
loˇl_ù
), 
	`ù4_addr2_16
(&pcb->local_ip),

169 
	`ù4_addr3_16
(&
pcb
->
loˇl_ù
), 
	`ù4_addr4_16
(&pcb->loˇl_ù),Öcb->
loˇl_p‹t
,

170 
	`ù4_addr1_16
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr2_16
(&pcb->remote_ip),

171 
	`ù4_addr3_16
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr4_16
(&pcb->ªmŸe_ù),Öcb->
ªmŸe_p‹t
));

174 i‡((
pcb
->
loˇl_p‹t
 =
de°
) &&

175 ((!
brﬂdˇ°
 && 
	`ù_addr_ißny
(&
pcb
->
loˇl_ù
)) ||

176 
	`ù_addr_cmp
(&(
pcb
->
loˇl_ù
), &
cuºít_ùhdr_de°
) ||

177 #i‡
LWIP_IGMP


178 
	`ù_addr_ismu…iˇ°
(&
cuºít_ùhdr_de°
) ||

180 #i‡
IP_SOF_BROADCAST_RECV


181 (
brﬂdˇ°
 && (
pcb
->
so_›ti⁄s
 & 
SOF_BROADCAST
)))) {

183 (
brﬂdˇ°
))) {

185 
loˇl_m©ch
 = 1;

186 i‡((
unc⁄_pcb
 =
NULL
) &&

187 ((
pcb
->
Êags
 & 
UDP_FLAGS_CONNECTED
) == 0)) {

189 
unc⁄_pcb
 = 
pcb
;

193 i‡((
loˇl_m©ch
 != 0) &&

194 (
pcb
->
ªmŸe_p‹t
 =
§c
) &&

195 (
	`ù_addr_ißny
(&
pcb
->
ªmŸe_ù
) ||

196 
	`ù_addr_cmp
(&(
pcb
->
ªmŸe_ù
), &
cuºít_ùhdr_§c
))) {

198 i‡(
¥ev
 !
NULL
) {

201 
¥ev
->
√xt
 = 
pcb
->next;

202 
pcb
->
√xt
 = 
udp_pcbs
;

203 
udp_pcbs
 = 
pcb
;

205 
	`UDP_STATS_INC
(
udp
.
ˇchehô
);

209 
¥ev
 = 
pcb
;

212 i‡(
pcb
 =
NULL
) {

213 
pcb
 = 
unc⁄_pcb
;

218 i‡(
pcb
 !
NULL
 || 
	`ù_addr_cmp
(&
öp
->
ù_addr
, &
cuºít_ùhdr_de°
)) {

219 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
, ("udp_input: calculating checksum\n"));

220 #i‡
LWIP_UDPLITE


221 i‡(
	`IPH_PROTO
(
ùhdr
Ë=
IP_PROTO_UDPLITE
) {

223 #i‡
CHECKSUM_CHECK_UDP


224 
u16_t
 
chkÀn
 = 
	`¡ohs
(
udphdr
->
Àn
);

225 i‡(
chkÀn
 < (
udp_hdr
)) {

226 i‡(
chkÀn
 == 0) {

229 
chkÀn
 = 
p
->
tŸ_Àn
;

233 
	`UDP_STATS_INC
(
udp
.
chkîr
);

234 
	`UDP_STATS_INC
(
udp
.
dr›
);

235 
	`¢mp_öc_udpöîr‹s
();

236 
	`pbuf_‰ì
(
p
);

237 
íd
;

240 i‡(
	`öë_chksum_p£udo_∑πül
(
p
, &
cuºít_ùhdr_§c
, &
cuºít_ùhdr_de°
,

241 
IP_PROTO_UDPLITE
, 
p
->
tŸ_Àn
, 
chkÀn
) != 0) {

242 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_LEVEL_SERIOUS
,

244 
	`UDP_STATS_INC
(
udp
.
chkîr
);

245 
	`UDP_STATS_INC
(
udp
.
dr›
);

246 
	`¢mp_öc_udpöîr‹s
();

247 
	`pbuf_‰ì
(
p
);

248 
íd
;

254 #i‡
CHECKSUM_CHECK_UDP


255 i‡(
udphdr
->
chksum
 != 0) {

256 i‡(
	`öë_chksum_p£udo
(
p
, 
	`ù_cuºít_§c_addr
(), 
	`ù_cuºít_de°_addr
(),

257 
IP_PROTO_UDP
, 
p
->
tŸ_Àn
) != 0) {

258 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_LEVEL_SERIOUS
,

260 
	`UDP_STATS_INC
(
udp
.
chkîr
);

261 
	`UDP_STATS_INC
(
udp
.
dr›
);

262 
	`¢mp_öc_udpöîr‹s
();

263 
	`pbuf_‰ì
(
p
);

264 
íd
;

269 if(
	`pbuf_hódî
(
p
, -
UDP_HLEN
)) {

271 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

272 
	`UDP_STATS_INC
(
udp
.
dr›
);

273 
	`¢mp_öc_udpöîr‹s
();

274 
	`pbuf_‰ì
(
p
);

275 
íd
;

277 i‡(
pcb
 !
NULL
) {

278 
	`¢mp_öc_udpöd©agøms
();

279 #i‡
SO_REUSE
 && 
SO_REUSE_RXTOALL


280 i‡((
brﬂdˇ°
 || 
	`ù_addr_ismu…iˇ°
(&
cuºít_ùhdr_de°
)) &&

281 ((
pcb
->
so_›ti⁄s
 & 
SOF_REUSEADDR
) != 0)) {

284 
udp_pcb
 *
mpcb
;

285 
u8_t
 
p_hódî_ch™ged
 = 0;

286 
mpcb
 = 
udp_pcbs
; mpcb !
NULL
; mpcb = mpcb->
√xt
) {

287 i‡(
mpcb
 !
pcb
) {

289 i‡((
mpcb
->
loˇl_p‹t
 =
de°
) &&

290 ((!
brﬂdˇ°
 && 
	`ù_addr_ißny
(&
mpcb
->
loˇl_ù
)) ||

291 
	`ù_addr_cmp
(&(
mpcb
->
loˇl_ù
), &
cuºít_ùhdr_de°
) ||

292 #i‡
LWIP_IGMP


293 
	`ù_addr_ismu…iˇ°
(&
cuºít_ùhdr_de°
) ||

295 #i‡
IP_SOF_BROADCAST_RECV


296 (
brﬂdˇ°
 && (
mpcb
->
so_›ti⁄s
 & 
SOF_BROADCAST
)))) {

298 (
brﬂdˇ°
))) {

301 i‡(
mpcb
->
ªcv
 !
NULL
) {

302 
pbuf
 *
q
;

304 i‡(
p_hódî_ch™ged
 == 0) {

305 
	`pbuf_hódî
(
p
, (
s16_t
)((
	`IPH_HL
(
ùhdr
Ë* 4Ë+ 
UDP_HLEN
));

306 
p_hódî_ch™ged
 = 1;

308 
q
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
p
->
tŸ_Àn
, 
PBUF_RAM
);

309 i‡(
q
 !
NULL
) {

310 
îr_t
 
îr
 = 
	`pbuf_c›y
(
q
, 
p
);

311 i‡(
îr
 =
ERR_OK
) {

313 
	`pbuf_hódî
(
q
, -(
s16_t
)((
	`IPH_HL
(
ùhdr
Ë* 4Ë+ 
UDP_HLEN
));

314 
mpcb
->
	`ªcv
(mpcb->
ªcv_¨g
, mpcb, 
q
, 
	`ù_cuºít_§c_addr
(), 
§c
);

321 i‡(
p_hódî_ch™ged
) {

323 
	`pbuf_hódî
(
p
, -(
s16_t
)((
	`IPH_HL
(
ùhdr
Ë* 4Ë+ 
UDP_HLEN
));

328 i‡(
pcb
->
ªcv
 !
NULL
) {

330 
pcb
->
	`ªcv
’cb->
ªcv_¨g
,Öcb, 
p
, 
	`ù_cuºít_§c_addr
(), 
§c
);

333 
	`pbuf_‰ì
(
p
);

334 
íd
;

337 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
, ("udp_input:Çot for us.\n"));

339 #i‡
LWIP_ICMP


342 i‡(!
brﬂdˇ°
 &&

343 !
	`ù_addr_ismu…iˇ°
(&
cuºít_ùhdr_de°
)) {

345 
	`pbuf_hódî
(
p
, (
	`IPH_HL
(
ùhdr
Ë* 4Ë+ 
UDP_HLEN
);

346 
	`LWIP_ASSERT
("p->∑ylﬂd =ùhdr", (
p
->
∑ylﬂd
 =
ùhdr
));

347 
	`icmp_de°_uƒóch
(
p
, 
ICMP_DUR_PORT
);

350 
	`UDP_STATS_INC
(
udp
.
¥Ÿîr
);

351 
	`UDP_STATS_INC
(
udp
.
dr›
);

352 
	`¢mp_öc_ud≤›‹ts
();

353 
	`pbuf_‰ì
(
p
);

356 
	`pbuf_‰ì
(
p
);

358 
íd
:

359 
	`PERF_STOP
("udp_input");

360 
	}
}

380 
îr_t


381 
	$udp_£nd
(
udp_pcb
 *
pcb
, 
pbuf
 *
p
)

384  
	`udp_£ndto
(
pcb
, 
p
, &pcb->
ªmŸe_ù
,Öcb->
ªmŸe_p‹t
);

385 
	}
}

387 #i‡
LWIP_CHECKSUM_ON_COPY


390 
îr_t


391 
	$udp_£nd_chksum
(
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

392 
u8_t
 
have_chksum
, 
u16_t
 
chksum
)

395  
	`udp_£ndto_chksum
(
pcb
, 
p
, &pcb->
ªmŸe_ù
,Öcb->
ªmŸe_p‹t
,

396 
have_chksum
, 
chksum
);

397 
	}
}

417 
îr_t


418 
	$udp_£ndto
(
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

419 
ù_addr_t
 *
d°_ù
, 
u16_t
 
d°_p‹t
)

421 #i‡
LWIP_CHECKSUM_ON_COPY


422  
	`udp_£ndto_chksum
(
pcb
, 
p
, 
d°_ù
, 
d°_p‹t
, 0, 0);

423 
	}
}

426 
îr_t


427 
	$udp_£ndto_chksum
(
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr_t
 *
d°_ù
,

428 
u16_t
 
d°_p‹t
, 
u8_t
 
have_chksum
, u16_à
chksum
)

431 
√tif
 *netif;

433 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
, ("udp_send\n"));

436 #i‡
LWIP_IGMP


437 
√tif
 = 
	`ù_rouã
((
	`ù_addr_ismu…iˇ°
(
d°_ù
))?(&(
pcb
->
mu…iˇ°_ù
)):(dst_ip));

439 
√tif
 = 
	`ù_rouã
(
d°_ù
);

443 i‡(
√tif
 =
NULL
) {

444 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_LEVEL_SERIOUS
, ("udp_£nd: NÿrouãÅÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

445 
	`ù4_addr1_16
(
d°_ù
), 
	`ù4_addr2_16
(d°_ù), 
	`ù4_addr3_16
(d°_ù), 
	`ù4_addr4_16
(dst_ip)));

446 
	`UDP_STATS_INC
(
udp
.
πîr
);

447  
ERR_RTE
;

449 #i‡
LWIP_CHECKSUM_ON_COPY


450  
	`udp_£ndto_if_chksum
(
pcb
, 
p
, 
d°_ù
, 
d°_p‹t
, 
√tif
, 
have_chksum
, 
chksum
);

452  
	`udp_£ndto_if
(
pcb
, 
p
, 
d°_ù
, 
d°_p‹t
, 
√tif
);

454 
	}
}

475 
îr_t


476 
	$udp_£ndto_if
(
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

477 
ù_addr_t
 *
d°_ù
, 
u16_t
 
d°_p‹t
, 
√tif
 *netif)

479 #i‡
LWIP_CHECKSUM_ON_COPY


480  
	`udp_£ndto_if_chksum
(
pcb
, 
p
, 
d°_ù
, 
d°_p‹t
, 
√tif
, 0, 0);

481 
	}
}

484 
îr_t


485 
	$udp_£ndto_if_chksum
(
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr_t
 *
d°_ù
,

486 
u16_t
 
d°_p‹t
, 
√tif
 *√tif, 
u8_t
 
have_chksum
,

487 
u16_t
 
chksum
)

490 
udp_hdr
 *
udphdr
;

491 
ù_addr_t
 *
§c_ù
;

492 
îr_t
 
îr
;

493 
pbuf
 *
q
;

495 #i‡
IP_SOF_BROADCAST


497 i‡–((
pcb
->
so_›ti⁄s
 & 
SOF_BROADCAST
Ë=0Ë&& 
	`ù_addr_isbrﬂdˇ°
(
d°_ù
, 
√tif
) ) {

498 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_LEVEL_SERIOUS
,

499 ("udp_£ndto_if: SOF_BROADCASTÇŸÉ«bÀd o¿pcb %p\n", (*)
pcb
));

500  
ERR_VAL
;

505 i‡(
pcb
->
loˇl_p‹t
 == 0) {

506 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
, ("udp_send:Çot yet boundÅoáÖort, bindingÇow\n"));

507 
îr
 = 
	`udp_böd
(
pcb
, &pcb->
loˇl_ù
,Öcb->
loˇl_p‹t
);

508 i‡(
îr
 !
ERR_OK
) {

509 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_LEVEL_SERIOUS
, ("udp_send: forcedÖort bind failed\n"));

510  
îr
;

515 i‡(
	`pbuf_hódî
(
p
, 
UDP_HLEN
)) {

517 
q
 = 
	`pbuf_Æloc
(
PBUF_IP
, 
UDP_HLEN
, 
PBUF_RAM
);

519 i‡(
q
 =
NULL
) {

520 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_LEVEL_SERIOUS
, ("udp_send: couldÇotállocate header\n"));

521  
ERR_MEM
;

523 i‡(
p
->
tŸ_Àn
 != 0) {

525 
	`pbuf_chaö
(
q
, 
p
);

528 
	`LWIP_DEBUGF
(
UDP_DEBUG
,

529 ("udp_£nd:ádded hódîÖbu‡%∞bef‹êgivíÖbu‡%p\n", (*)
q
, (*)
p
));

533 
q
 = 
p
;

534 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_£nd:ádded hódî i¿givíÖbu‡%p\n", (*)
p
));

536 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold struct udp_hdr",

537 (
q
->
Àn
 >(
udp_hdr
)));

539 
udphdr
 = (
udp_hdr
 *)
q
->
∑ylﬂd
;

540 
udphdr
->
§c
 = 
	`ht⁄s
(
pcb
->
loˇl_p‹t
);

541 
udphdr
->
de°
 = 
	`ht⁄s
(
d°_p‹t
);

543 
udphdr
->
chksum
 = 0x0000;

546 #i‡
LWIP_IGMP


547 i‡(
	`ù_addr_ismu…iˇ°
(
d°_ù
Ë&& ((
pcb
->
Êags
 & 
UDP_FLAGS_MULTICAST_LOOP
) != 0)) {

548 
q
->
Êags
 |
PBUF_FLAG_MCASTLOOP
;

554 i‡(
	`ù_addr_ißny
(&
pcb
->
loˇl_ù
)) {

556 
§c_ù
 = &(
√tif
->
ù_addr
);

560 i‡(!
	`ù_addr_cmp
(&(
pcb
->
loˇl_ù
), &(
√tif
->
ù_addr
))) {

562 i‡(
q
 !
p
) {

564 
	`pbuf_‰ì
(
q
);

565 
q
 = 
NULL
;

568  
ERR_VAL
;

571 
§c_ù
 = &(
pcb
->
loˇl_ù
);

574 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_£nd: sídög d©agøm o‡Àngth %"
U16_F
"\n", 
q
->
tŸ_Àn
));

576 #i‡
LWIP_UDPLITE


578 i‡(
pcb
->
Êags
 & 
UDP_FLAGS_UDPLITE
) {

579 
u16_t
 
chkÀn
, 
chkÀn_hdr
;

580 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_£nd: UDP LITEÖackëÜígth %"
U16_F
"\n", 
q
->
tŸ_Àn
));

582 
chkÀn_hdr
 = 
chkÀn
 = 
pcb
->
chksum_Àn_tx
;

583 i‡((
chkÀn
 < (
udp_hdr
)Ë|| (chkÀ¿> 
q
->
tŸ_Àn
)) {

584 i‡(
chkÀn
 != 0) {

585 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_£nd: UDP LITEÖcb->chksum_À¿i†ûÀgÆ: %"
U16_F
"\n", 
chkÀn
));

593 
chkÀn_hdr
 = 0;

594 
chkÀn
 = 
q
->
tŸ_Àn
;

596 
udphdr
->
Àn
 = 
	`ht⁄s
(
chkÀn_hdr
);

598 #i‡
CHECKSUM_GEN_UDP


599 
udphdr
->
chksum
 = 
	`öë_chksum_p£udo_∑πül
(
q
, 
§c_ù
, 
d°_ù
,

600 
IP_PROTO_UDPLITE
, 
q
->
tŸ_Àn
,

601 #i‡!
LWIP_CHECKSUM_ON_COPY


602 
chkÀn
);

604 (
have_chksum
 ? 
UDP_HLEN
 : 
chkÀn
));

605 i‡(
have_chksum
) {

606 
u32_t
 
acc
;

607 
acc
 = 
udphdr
->
chksum
 + (
u16_t
)~(chksum);

608 
udphdr
->
chksum
 = 
	`FOLD_U32T
(
acc
);

613 i‡(
udphdr
->
chksum
 == 0x0000) {

614 
udphdr
->
chksum
 = 0xffff;

618 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_send: ip_output_if (,,,,IP_PROTO_UDPLITE,)\n"));

619 #i‡
LWIP_NETIF_HWADDRHINT


620 
√tif
->
addr_höt
 = &(
pcb
->addr_hint);

622 
îr
 = 
	`ù_ouçut_if
(
q
, 
§c_ù
, 
d°_ù
, 
pcb
->
âl
,Öcb->
tos
, 
IP_PROTO_UDPLITE
, 
√tif
);

623 #i‡
LWIP_NETIF_HWADDRHINT


624 
√tif
->
addr_höt
 = 
NULL
;

629 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_£nd: UDPÖackëÜígth %"
U16_F
"\n", 
q
->
tŸ_Àn
));

630 
udphdr
->
Àn
 = 
	`ht⁄s
(
q
->
tŸ_Àn
);

632 #i‡
CHECKSUM_GEN_UDP


633 i‡((
pcb
->
Êags
 & 
UDP_FLAGS_NOCHKSUM
) == 0) {

634 
u16_t
 
udpchksum
;

635 #i‡
LWIP_CHECKSUM_ON_COPY


636 i‡(
have_chksum
) {

637 
u32_t
 
acc
;

638 
udpchksum
 = 
	`öë_chksum_p£udo_∑πül
(
q
, 
§c_ù
, 
d°_ù
, 
IP_PROTO_UDP
,

639 
q
->
tŸ_Àn
, 
UDP_HLEN
);

640 
acc
 = 
udpchksum
 + (
u16_t
)~(
chksum
);

641 
udpchksum
 = 
	`FOLD_U32T
(
acc
);

645 
udpchksum
 = 
	`öë_chksum_p£udo
(
q
, 
§c_ù
, 
d°_ù
, 
IP_PROTO_UDP
, q->
tŸ_Àn
);

649 i‡(
udpchksum
 == 0x0000) {

650 
udpchksum
 = 0xffff;

652 
udphdr
->
chksum
 = 
udpchksum
;

655 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_£nd: UDP checksum 0x%04"
X16_F
"\n", 
udphdr
->
chksum
));

656 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_send: ip_output_if (,,,,IP_PROTO_UDP,)\n"));

658 #i‡
LWIP_NETIF_HWADDRHINT


659 
√tif
->
addr_höt
 = &(
pcb
->addr_hint);

661 
îr
 = 
	`ù_ouçut_if
(
q
, 
§c_ù
, 
d°_ù
, 
pcb
->
âl
,Öcb->
tos
, 
IP_PROTO_UDP
, 
√tif
);

662 #i‡
LWIP_NETIF_HWADDRHINT


663 
√tif
->
addr_höt
 = 
NULL
;

667 
	`¢mp_öc_udpoutd©agøms
();

670 i‡(
q
 !
p
) {

672 
	`pbuf_‰ì
(
q
);

673 
q
 = 
NULL
;

677 
	`UDP_STATS_INC
(
udp
.
xmô
);

678  
îr
;

679 
	}
}

700 
îr_t


701 
	$udp_böd
(
udp_pcb
 *
pcb
, 
ù_addr_t
 *
ùaddr
, 
u16_t
 
p‹t
)

703 
udp_pcb
 *
ùcb
;

704 
u8_t
 
ªböd
;

706 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
, ("udp_bind(ipaddr = "));

707 
	`ù_addr_debug_¥öt
(
UDP_DEBUG
, 
ùaddr
);

708 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
, (",Ö‹à%"
U16_F
")\n", 
p‹t
));

710 
ªböd
 = 0;

712 
ùcb
 = 
udp_pcbs
; ipcb !
NULL
; ipcb = ipcb->
√xt
) {

714 i‡(
pcb
 =
ùcb
) {

716 
	`LWIP_ASSERT
("ªböd =0", 
ªböd
 == 0);

718 
ªböd
 = 1;

724 #i‡
SO_REUSE


725 i‡(((
pcb
->
so_›ti⁄s
 & 
SOF_REUSEADDR
) == 0) &&

726 ((
ùcb
->
so_›ti⁄s
 & 
SOF_REUSEADDR
) == 0)) {

731 i‡((
ùcb
->
loˇl_p‹t
 =
p‹t
) &&

733 (
	`ù_addr_ißny
(&(
ùcb
->
loˇl_ù
)) ||

734 
	`ù_addr_ißny
(
ùaddr
) ||

735 
	`ù_addr_cmp
(&(
ùcb
->
loˇl_ù
), 
ùaddr
))) {

737 
	`LWIP_DEBUGF
(
UDP_DEBUG
,

738 ("udp_böd:Üoˇ»p‹à%"
U16_F
"áÃódy bound byánŸhîÖcb\n", 
p‹t
));

739  
ERR_USE
;

744 
	`ù_addr_£t
(&
pcb
->
loˇl_ù
, 
ùaddr
);

747 i‡(
p‹t
 == 0) {

748 #i‚de‡
UDP_LOCAL_PORT_RANGE_START


751 
	#UDP_LOCAL_PORT_RANGE_START
 0xc000

	)

752 
	#UDP_LOCAL_PORT_RANGE_END
 0xffff

	)

754 
p‹t
 = 
UDP_LOCAL_PORT_RANGE_START
;

755 
ùcb
 = 
udp_pcbs
;

756 (
ùcb
 !
NULL
Ë&& (
p‹t
 !
UDP_LOCAL_PORT_RANGE_END
)) {

757 i‡(
ùcb
->
loˇl_p‹t
 =
p‹t
) {

759 
p‹t
++;

761 
ùcb
 = 
udp_pcbs
;

764 
ùcb
 = ipcb->
√xt
;

767 i‡(
ùcb
 !
NULL
) {

769 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_bind: out of free UDPÖorts\n"));

770  
ERR_USE
;

773 
pcb
->
loˇl_p‹t
 = 
p‹t
;

774 
	`¢mp_ö£π_udpidx_åì
(
pcb
);

776 i‡(
ªböd
 == 0) {

778 
pcb
->
√xt
 = 
udp_pcbs
;

779 
udp_pcbs
 = 
pcb
;

781 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
,

782 ("udp_böd: boundÅÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F",Öort %"U16_F"\n",

783 
	`ù4_addr1_16
(&
pcb
->
loˇl_ù
), 
	`ù4_addr2_16
(&pcb->local_ip),

784 
	`ù4_addr3_16
(&
pcb
->
loˇl_ù
), 
	`ù4_addr4_16
(&pcb->local_ip),

785 
pcb
->
loˇl_p‹t
));

786  
ERR_OK
;

787 
	}
}

805 
îr_t


806 
	$udp_c⁄√˘
(
udp_pcb
 *
pcb
, 
ù_addr_t
 *
ùaddr
, 
u16_t
 
p‹t
)

808 
udp_pcb
 *
ùcb
;

810 i‡(
pcb
->
loˇl_p‹t
 == 0) {

811 
îr_t
 
îr
 = 
	`udp_böd
(
pcb
, &pcb->
loˇl_ù
,Öcb->
loˇl_p‹t
);

812 i‡(
îr
 !
ERR_OK
) {

813  
îr
;

817 
	`ù_addr_£t
(&
pcb
->
ªmŸe_ù
, 
ùaddr
);

818 
pcb
->
ªmŸe_p‹t
 = 
p‹t
;

819 
pcb
->
Êags
 |
UDP_FLAGS_CONNECTED
;

821 #ifde‡
LWIP_UDP_TODO


823 i‡(
	`ù_addr_ißny
(&
pcb
->
loˇl_ù
Ë&& !ù_addr_ißny(&pcb->
ªmŸe_ù
)) {

824 
√tif
 *netif;

826 i‡((
√tif
 = 
	`ù_rouã
(&(
pcb
->
ªmŸe_ù
))Ë=
NULL
) {

827 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_c⁄√˘: NÿrouãÅÿ0x%lx\n", 
pcb
->
ªmŸe_ù
.
addr
));

828 
	`UDP_STATS_INC
(
udp
.
πîr
);

829  
ERR_RTE
;

834 
pcb
->
loˇl_ù
 = 
√tif
->
ù_addr
;

835 } i‡(
	`ù_addr_ißny
(&
pcb
->
ªmŸe_ù
)) {

836 
pcb
->
loˇl_ù
.
addr
 = 0;

839 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
,

840 ("udp_c⁄√˘: c⁄√˘edÅÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F",port %"U16_F"\n",

841 
	`ù4_addr1_16
(&
pcb
->
loˇl_ù
), 
	`ù4_addr2_16
(&pcb->local_ip),

842 
	`ù4_addr3_16
(&
pcb
->
loˇl_ù
), 
	`ù4_addr4_16
(&pcb->local_ip),

843 
pcb
->
loˇl_p‹t
));

846 
ùcb
 = 
udp_pcbs
; ipcb !
NULL
; ipcb = ipcb->
√xt
) {

847 i‡(
pcb
 =
ùcb
) {

849  
ERR_OK
;

853 
pcb
->
√xt
 = 
udp_pcbs
;

854 
udp_pcbs
 = 
pcb
;

855  
ERR_OK
;

856 
	}
}

864 
	$udp_disc⁄√˘
(
udp_pcb
 *
pcb
)

867 
	`ù_addr_£t_™y
(&
pcb
->
ªmŸe_ù
);

868 
pcb
->
ªmŸe_p‹t
 = 0;

870 
pcb
->
Êags
 &~
UDP_FLAGS_CONNECTED
;

871 
	}
}

883 
	$udp_ªcv
(
udp_pcb
 *
pcb
, 
udp_ªcv_‚
 
ªcv
, *
ªcv_¨g
)

886 
pcb
->
ªcv
 =Ñecv;

887 
pcb
->
ªcv_¨g
 =Ñecv_arg;

888 
	}
}

899 
	$udp_ªmove
(
udp_pcb
 *
pcb
)

901 
udp_pcb
 *
pcb2
;

903 
	`¢mp_dñëe_udpidx_åì
(
pcb
);

905 i‡(
udp_pcbs
 =
pcb
) {

907 
udp_pcbs
 = udp_pcbs->
√xt
;

910 
pcb2
 = 
udp_pcbs
;Öcb2 !
NULL
;Öcb2 =Öcb2->
√xt
) {

912 i‡(
pcb2
->
√xt
 !
NULL
 &&Öcb2->√xà=
pcb
) {

914 
pcb2
->
√xt
 = 
pcb
->next;

918 
	`memp_‰ì
(
MEMP_UDP_PCB
, 
pcb
);

919 
	}
}

929 
udp_pcb
 *

930 
	$udp_√w
()

932 
udp_pcb
 *
pcb
;

933 
pcb
 = (
udp_pcb
 *)
	`memp_mÆloc
(
MEMP_UDP_PCB
);

935 i‡(
pcb
 !
NULL
) {

940 
	`mem£t
(
pcb
, 0, (
udp_pcb
));

941 
pcb
->
âl
 = 
UDP_TTL
;

943  
pcb
;

944 
	}
}

946 #i‡
UDP_DEBUG


953 
	$udp_debug_¥öt
(
udp_hdr
 *
udphdr
)

955 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("UDP header:\n"));

956 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("+-------------------------------+\n"));

957 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("| %5"
U16_F
" | %5"U16_F" | (srcÖort, destÖort)\n",

958 
	`¡ohs
(
udphdr
->
§c
),Çtohs(udphdr->
de°
)));

959 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("+-------------------------------+\n"));

960 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("| %5"
U16_F
" | 0x%04"
X16_F
" | (len, chksum)\n",

961 
	`¡ohs
(
udphdr
->
Àn
),Çtohs(udphdr->
chksum
)));

962 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("+-------------------------------+\n"));

963 
	}
}

	@include/ipv4/lwip/autoip.h

44 #i‚de‡
__LWIP_AUTOIP_H__


45 
	#__LWIP_AUTOIP_H__


	)

47 
	~"lwù/›t.h
"

49 #i‡
LWIP_AUTOIP


51 
	~"lwù/√tif.h
"

52 
	~"lwù/udp.h
"

53 
	~"√tif/ëh¨p.h
"

55 #ifde‡
__˝lu•lus


60 
	#AUTOIP_TMR_INTERVAL
 100

	)

61 
	#AUTOIP_TICKS_PER_SECOND
 (1000 / 
AUTOIP_TMR_INTERVAL
)

	)

64 
	#PROBE_WAIT
 1

	)

65 
	#PROBE_MIN
 1

	)

66 
	#PROBE_MAX
 2

	)

67 
	#PROBE_NUM
 3

	)

68 
	#ANNOUNCE_NUM
 2

	)

69 
	#ANNOUNCE_INTERVAL
 2

	)

70 
	#ANNOUNCE_WAIT
 2

	)

71 
	#MAX_CONFLICTS
 10

	)

72 
	#RATE_LIMIT_INTERVAL
 60

	)

73 
	#DEFEND_INTERVAL
 10

	)

76 
	#AUTOIP_STATE_OFF
 0

	)

77 
	#AUTOIP_STATE_PROBING
 1

	)

78 
	#AUTOIP_STATE_ANNOUNCING
 2

	)

79 
	#AUTOIP_STATE_BOUND
 3

	)

81 
	sautoù


83 
ù_addr_t
 
Œùaddr
;

84 
u8_t
 
°©e
;

85 
u8_t
 
£¡_num
;

86 
u16_t
 
âw
;

87 
u8_t
 
œ°c⁄Êi˘
;

88 
u8_t
 
åõd_Œùaddr
;

93 
autoù_öô
();

96 
autoù_£t_°ru˘
(
√tif
 *√tif, 
autoù
 *autoip);

99 
îr_t
 
autoù_°¨t
(
√tif
 *netif);

102 
îr_t
 
autoù_°›
(
√tif
 *netif);

105 
autoù_¨p_ª∂y
(
√tif
 *√tif, 
ëh¨p_hdr
 *
hdr
);

108 
autoù_tmr
();

111 
autoù_√tw‹k_ch™ged
(
√tif
 *netif);

113 #ifde‡
__˝lu•lus


	@include/ipv4/lwip/icmp.h

32 #i‚de‡
__LWIP_ICMP_H__


33 
	#__LWIP_ICMP_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/pbuf.h
"

37 
	~"lwù/ù_addr.h
"

38 
	~"lwù/√tif.h
"

40 #ifde‡
__˝lu•lus


44 
	#ICMP_ER
 0

	)

45 
	#ICMP_DUR
 3

	)

46 
	#ICMP_SQ
 4

	)

47 
	#ICMP_RD
 5

	)

48 
	#ICMP_ECHO
 8

	)

49 
	#ICMP_TE
 11

	)

50 
	#ICMP_PP
 12

	)

51 
	#ICMP_TS
 13

	)

52 
	#ICMP_TSR
 14

	)

53 
	#ICMP_IRQ
 15

	)

54 
	#ICMP_IR
 16

	)

56 
	eicmp_dur_ty≥
 {

57 
ICMP_DUR_NET
 = 0,

58 
ICMP_DUR_HOST
 = 1,

59 
ICMP_DUR_PROTO
 = 2,

60 
ICMP_DUR_PORT
 = 3,

61 
ICMP_DUR_FRAG
 = 4,

62 
ICMP_DUR_SR
 = 5

65 
	eicmp_ã_ty≥
 {

66 
ICMP_TE_TTL
 = 0,

67 
ICMP_TE_FRAG
 = 1

70 #ifde‡
PACK_STRUCT_USE_INCLUDES


71 
	~"¨ch/bp°ru˘.h
"

78 
PACK_STRUCT_BEGIN


79 
	sicmp_echo_hdr
 {

80 
PACK_STRUCT_FIELD
(
u8_t
 
ty≥
);

81 
PACK_STRUCT_FIELD
(
u8_t
 
code
);

82 
PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

83 
PACK_STRUCT_FIELD
(
u16_t
 
id
);

84 
PACK_STRUCT_FIELD
(
u16_t
 
£qno
);

85 } 
PACK_STRUCT_STRUCT
;

86 
PACK_STRUCT_END


87 #ifde‡
PACK_STRUCT_USE_INCLUDES


88 
	~"¨ch/ï°ru˘.h
"

91 
	#ICMPH_TYPE
(
hdr
Ë((hdr)->
ty≥
)

	)

92 
	#ICMPH_CODE
(
hdr
Ë((hdr)->
code
)

	)

95 
	#ICMPH_TYPE_SET
(
hdr
, 
t
Ë((hdr)->
ty≥
 = (t))

	)

96 
	#ICMPH_CODE_SET
(
hdr
, 
c
Ë((hdr)->
code
 = (c))

	)

99 #i‡
LWIP_ICMP


101 
icmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

102 
icmp_de°_uƒóch
(
pbuf
 *
p
, 
icmp_dur_ty≥
 
t
);

103 
icmp_time_ex˚eded
(
pbuf
 *
p
, 
icmp_ã_ty≥
 
t
);

107 #ifde‡
__˝lu•lus


	@include/ipv4/lwip/igmp.h

35 #i‚de‡
__LWIP_IGMP_H__


36 
	#__LWIP_IGMP_H__


	)

38 
	~"lwù/›t.h
"

39 
	~"lwù/ù_addr.h
"

40 
	~"lwù/√tif.h
"

41 
	~"lwù/pbuf.h
"

43 #i‡
LWIP_IGMP


45 #ifde‡
__˝lu•lus


51 
	#IGMP_TMR_INTERVAL
 100

	)

52 
	#IGMP_V1_DELAYING_MEMBER_TMR
 (1000/
IGMP_TMR_INTERVAL
)

	)

53 
	#IGMP_JOIN_DELAYING_MEMBER_TMR
 (500 /
IGMP_TMR_INTERVAL
)

	)

57 
	#IGMP_DEL_MAC_FILTER
 0

	)

58 
	#IGMP_ADD_MAC_FILTER
 1

	)

72 
	sigmp_group
 {

74 
igmp_group
 *
√xt
;

76 
√tif
 *netif;

78 
ù_addr_t
 
group_addªss
;

80 
u8_t
 
œ°_ªp‹ãr_Êag
;

82 
u8_t
 
group_°©e
;

84 
u16_t
 
timî
;

86 
u8_t
 
u£
;

90 
igmp_öô
();

91 
îr_t
 
igmp_°¨t
(
√tif
 *netif);

92 
îr_t
 
igmp_°›
(
√tif
 *netif);

93 
igmp_ªp‹t_groups
(
√tif
 *netif);

94 
igmp_group
 *
igmp_lookf‹_group
(
√tif
 *
iÂ
, 
ù_addr_t
 *
addr
);

95 
igmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
, 
ù_addr_t
 *
de°
);

96 
îr_t
 
igmp_joögroup
(
ù_addr_t
 *
iÁddr
, ip_addr_à*
grou∑ddr
);

97 
îr_t
 
igmp_Àavegroup
(
ù_addr_t
 *
iÁddr
, ip_addr_à*
grou∑ddr
);

98 
igmp_tmr
();

100 #ifde‡
__˝lu•lus


	@include/ipv4/lwip/inet.h

32 #i‚de‡
__LWIP_INET_H__


33 
	#__LWIP_INET_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/def.h
"

37 
	~"lwù/ù_addr.h
"

39 #ifde‡
__˝lu•lus


44 
	sö_addr
 {

45 
u32_t
 
s_addr
;

49 
	#INADDR_NONE
 
IPADDR_NONE


	)

51 
	#INADDR_LOOPBACK
 
IPADDR_LOOPBACK


	)

53 
	#INADDR_ANY
 
IPADDR_ANY


	)

55 
	#INADDR_BROADCAST
 
IPADDR_BROADCAST


	)

61 
	#IN_CLASSA
(
a
Ë
	`IP_CLASSA
◊)

	)

62 
	#IN_CLASSA_NET
 
IP_CLASSA_NET


	)

63 
	#IN_CLASSA_NSHIFT
 
IP_CLASSA_NSHIFT


	)

64 
	#IN_CLASSA_HOST
 
IP_CLASSA_HOST


	)

65 
	#IN_CLASSA_MAX
 
IP_CLASSA_MAX


	)

67 
	#IN_CLASSB
(
b
Ë
	`IP_CLASSB
(b)

	)

68 
	#IN_CLASSB_NET
 
IP_CLASSB_NET


	)

69 
	#IN_CLASSB_NSHIFT
 
IP_CLASSB_NSHIFT


	)

70 
	#IN_CLASSB_HOST
 
IP_CLASSB_HOST


	)

71 
	#IN_CLASSB_MAX
 
IP_CLASSB_MAX


	)

73 
	#IN_CLASSC
(
c
Ë
	`IP_CLASSC
(c)

	)

74 
	#IN_CLASSC_NET
 
IP_CLASSC_NET


	)

75 
	#IN_CLASSC_NSHIFT
 
IP_CLASSC_NSHIFT


	)

76 
	#IN_CLASSC_HOST
 
IP_CLASSC_HOST


	)

77 
	#IN_CLASSC_MAX
 
IP_CLASSC_MAX


	)

79 
	#IN_CLASSD
(
d
Ë
	`IP_CLASSD
(d)

	)

80 
	#IN_CLASSD_NET
 
IP_CLASSD_NET


	)

81 
	#IN_CLASSD_NSHIFT
 
IP_CLASSD_NSHIFT


	)

82 
	#IN_CLASSD_HOST
 
IP_CLASSD_HOST


	)

83 
	#IN_CLASSD_MAX
 
IP_CLASSD_MAX


	)

85 
	#IN_MULTICAST
(
a
Ë
	`IP_MULTICAST
◊)

	)

87 
	#IN_EXPERIMENTAL
(
a
Ë
	`IP_EXPERIMENTAL
◊)

	)

88 
	#IN_BADCLASS
(
a
Ë
	`IP_BADCLASS
◊)

	)

90 
	#IN_LOOPBACKNET
 
IP_LOOPBACKNET


	)

92 
	#öë_addr_‰om_ùaddr
(
èrgë_öaddr
, 
sour˚_ùaddr
Ë(—¨gë_öaddr)->
s_addr
 = 
	`ù4_addr_gë_u32
(sour˚_ùaddr))

	)

93 
	#öë_addr_to_ùaddr
(
èrgë_ùaddr
, 
sour˚_öaddr
Ë(
	`ù4_addr_£t_u32
—¨gë_ùaddr, (sour˚_öaddr)->
s_addr
))

	)

95 
	#öë_addr_to_ùaddr_p
(
èrgë_ùaddr_p
, 
sour˚_öaddr
Ë(—¨gë_ùaddr_pË(
ù_addr_t
*)&((sour˚_öaddr)->
s_addr
))

	)

98 
	#öë_addr
(
˝
Ë
	`ùaddr_addr
(˝)

	)

99 
	#öë_©⁄
(
˝
, 
addr
Ë
	`ùaddr_©⁄
(˝, (
ù_addr_t
*Ôddr)

	)

100 
	#öë_¡ﬂ
(
addr
Ë
	`ùaddr_¡ﬂ
((
ù_addr_t
*)&◊ddr))

	)

101 
	#öë_¡ﬂ_r
(
addr
, 
buf
, 
buÊí
Ë
	`ùaddr_¡ﬂ_r
((
ù_addr_t
*)&◊ddr), buf, buÊí)

	)

103 #ifde‡
__˝lu•lus


	@include/ipv4/lwip/inet_chksum.h

32 #i‚de‡
__LWIP_INET_CHKSUM_H__


33 
	#__LWIP_INET_CHKSUM_H__


	)

35 
	~"lwù/›t.h
"

37 
	~"lwù/pbuf.h
"

38 
	~"lwù/ù_addr.h
"

41 #i‚de‡
SWAP_BYTES_IN_WORD


42 #i‡
LWIP_PLATFORM_BYTESWAP
 && (
BYTE_ORDER
 =
LITTLE_ENDIAN
)

44 
	#SWAP_BYTES_IN_WORD
(
w
Ë
	`LWIP_PLATFORM_HTONS
(w)

	)

47 
	#SWAP_BYTES_IN_WORD
(
w
Ë(((wË& 0xffË<< 8Ë| (((wË& 0xff00Ë>> 8)

	)

52 #i‚de‡
FOLD_U32T


53 
	#FOLD_U32T
(
u
Ë(((uË>> 16Ë+ ((uË& 0x0000ffffUL))

	)

56 #i‡
LWIP_CHECKSUM_ON_COPY


59 #i‚de‡
LWIP_CHKSUM_COPY


60 
	#LWIP_CHKSUM_COPY
(
d°
, 
§c
, 
Àn
Ë
	`lwù_chksum_c›y
(d°, src,Üí)

	)

61 #i‚de‡
LWIP_CHKSUM_COPY_ALGORITHM


62 
	#LWIP_CHKSUM_COPY_ALGORITHM
 1

	)

66 
	#LWIP_CHKSUM_COPY_ALGORITHM
 0

	)

69 #ifde‡
__˝lu•lus


73 
u16_t
 
öë_chksum
(*
d©≠å
, u16_à
Àn
);

74 
u16_t
 
öë_chksum_pbuf
(
pbuf
 *
p
);

75 
u16_t
 
öë_chksum_p£udo
(
pbuf
 *
p
,

76 
ù_addr_t
 *
§c
, ip_addr_à*
de°
,

77 
u8_t
 
¥Ÿo
, 
u16_t
 
¥Ÿo_Àn
);

78 
u16_t
 
öë_chksum_p£udo_∑πül
(
pbuf
 *
p
,

79 
ù_addr_t
 *
§c
, ip_addr_à*
de°
,

80 
u8_t
 
¥Ÿo
, 
u16_t
 
¥Ÿo_Àn
, u16_à
chksum_Àn
);

81 #i‡
LWIP_CHKSUM_COPY_ALGORITHM


82 
u16_t
 
lwù_chksum_c›y
(*
d°
, c⁄° *
§c
, u16_à
Àn
);

85 #ifde‡
__˝lu•lus


	@include/ipv4/lwip/ip.h

32 #i‚de‡
__LWIP_IP_H__


33 
	#__LWIP_IP_H__


	)

35 
	~"lwù/›t.h
"

37 
	~"lwù/def.h
"

38 
	~"lwù/pbuf.h
"

39 
	~"lwù/ù_addr.h
"

40 
	~"lwù/îr.h
"

41 
	~"lwù/√tif.h
"

43 #ifde‡
__˝lu•lus


48 
	#IP_OPTIONS_SEND
 
LWIP_IGMP


	)

50 
	#IP_HLEN
 20

	)

52 
	#IP_PROTO_ICMP
 1

	)

53 
	#IP_PROTO_IGMP
 2

	)

54 
	#IP_PROTO_UDP
 17

	)

55 
	#IP_PROTO_UDPLITE
 136

	)

56 
	#IP_PROTO_TCP
 6

	)

61 #ifde‡
IP_HDRINCL


62 #unde‡
IP_HDRINCL


64 
	#IP_HDRINCL
 
NULL


	)

66 #i‡
LWIP_NETIF_HWADDRHINT


67 
	#IP_PCB_ADDRHINT
 ;
u8_t
 
addr_höt


	)

69 
	#IP_PCB_ADDRHINT


	)

76 
	#IP_PCB
 \

78 
ù_addr_t
 
loˇl_ù
; \

79 
ù_addr_t
 
ªmŸe_ù
; \

81 
u8_t
 
so_›ti⁄s
; \

83 
u8_t
 
tos
; \

85 
u8_t
 
âl
 \

87 
IP_PCB_ADDRHINT


	)

89 
	sù_pcb
 {

91 
IP_PCB
;

98 
	#SOF_ACCEPTCONN
 (
u8_t
)0x02U

	)

99 
	#SOF_REUSEADDR
 (
u8_t
)0x04U

	)

100 
	#SOF_KEEPALIVE
 (
u8_t
)0x08U

	)

102 
	#SOF_BROADCAST
 (
u8_t
)0x20U

	)

104 
	#SOF_LINGER
 (
u8_t
)0x80U

	)

109 
	#SOF_INHERITED
 (
SOF_REUSEADDR
|
SOF_KEEPALIVE
|
SOF_LINGER
 )

	)

112 #ifde‡
PACK_STRUCT_USE_INCLUDES


113 
	~"¨ch/bp°ru˘.h
"

115 
PACK_STRUCT_BEGIN


116 
	sù_hdr
 {

118 
PACK_STRUCT_FIELD
(
u16_t
 
_v_hl_tos
);

120 
PACK_STRUCT_FIELD
(
u16_t
 
_Àn
);

122 
PACK_STRUCT_FIELD
(
u16_t
 
_id
);

124 
PACK_STRUCT_FIELD
(
u16_t
 
_off£t
);

125 
	#IP_RF
 0x8000U

	)

126 
	#IP_DF
 0x4000U

	)

127 
	#IP_MF
 0x2000U

	)

128 
	#IP_OFFMASK
 0x1fffU

	)

130 
PACK_STRUCT_FIELD
(
u8_t
 
_âl
);

132 
PACK_STRUCT_FIELD
(
u8_t
 
_¥Ÿo
);

134 
PACK_STRUCT_FIELD
(
u16_t
 
_chksum
);

136 
PACK_STRUCT_FIELD
(
ù_addr_p_t
 
§c
);

137 
PACK_STRUCT_FIELD
(
ù_addr_p_t
 
de°
);

138 } 
PACK_STRUCT_STRUCT
;

139 
PACK_STRUCT_END


140 #ifde‡
PACK_STRUCT_USE_INCLUDES


141 
	~"¨ch/ï°ru˘.h
"

144 
	#IPH_V
(
hdr
Ë(
	`¡ohs
((hdr)->
_v_hl_tos
Ë>> 12)

	)

145 
	#IPH_HL
(
hdr
Ë((
	`¡ohs
((hdr)->
_v_hl_tos
Ë>> 8Ë& 0x0f)

	)

146 
	#IPH_TOS
(
hdr
Ë(
	`¡ohs
((hdr)->
_v_hl_tos
Ë& 0xff)

	)

147 
	#IPH_LEN
(
hdr
Ë((hdr)->
_Àn
)

	)

148 
	#IPH_ID
(
hdr
Ë((hdr)->
_id
)

	)

149 
	#IPH_OFFSET
(
hdr
Ë((hdr)->
_off£t
)

	)

150 
	#IPH_TTL
(
hdr
Ë((hdr)->
_âl
)

	)

151 
	#IPH_PROTO
(
hdr
Ë((hdr)->
_¥Ÿo
)

	)

152 
	#IPH_CHKSUM
(
hdr
Ë((hdr)->
_chksum
)

	)

154 
	#IPH_VHLTOS_SET
(
hdr
, 
v
, 
hl
, 
tos
Ë(hdr)->
_v_hl_tos
 = (
	`ht⁄s
(((vË<< 12Ë| ((hlË<< 8Ë| (tos)))

	)

155 
	#IPH_LEN_SET
(
hdr
, 
Àn
Ë(hdr)->
_Àn
 = (Àn)

	)

156 
	#IPH_ID_SET
(
hdr
, 
id
Ë(hdr)->
_id
 = (id)

	)

157 
	#IPH_OFFSET_SET
(
hdr
, 
off
Ë(hdr)->
_off£t
 = (off)

	)

158 
	#IPH_TTL_SET
(
hdr
, 
âl
Ë(hdr)->
_âl
 = (
u8_t
)—é)

	)

159 
	#IPH_PROTO_SET
(
hdr
, 
¥Ÿo
Ë(hdr)->
_¥Ÿo
 = (
u8_t
)’rŸo)

	)

160 
	#IPH_CHKSUM_SET
(
hdr
, 
chksum
Ë(hdr)->
_chksum
 = (chksum)

	)

163 
√tif
 *
cuºít_√tif
;

165 c⁄° 
ù_hdr
 *
cuºít_hódî
;

167 
ù_addr_t
 
cuºít_ùhdr_§c
;

169 
ù_addr_t
 
cuºít_ùhdr_de°
;

171 
	#ù_öô
(Ë

	)

172 
√tif
 *
ù_rouã
(
ù_addr_t
 *
de°
);

173 
îr_t
 
ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

174 
îr_t
 
ù_ouçut
(
pbuf
 *
p
, 
ù_addr_t
 *
§c
, ip_addr_à*
de°
,

175 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
);

176 
îr_t
 
ù_ouçut_if
(
pbuf
 *
p
, 
ù_addr_t
 *
§c
, ip_addr_à*
de°
,

177 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
,

178 
√tif
 *netif);

179 #i‡
LWIP_NETIF_HWADDRHINT


180 
îr_t
 
ù_ouçut_höãd
(
pbuf
 *
p
, 
ù_addr_t
 *
§c
, ip_addr_à*
de°
,

181 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
, u8_à*
addr_höt
);

183 #i‡
IP_OPTIONS_SEND


184 
îr_t
 
ù_ouçut_if_›t
(
pbuf
 *
p
, 
ù_addr_t
 *
§c
, ip_addr_à*
de°
,

185 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
, 
√tif
 *√tif, *
ù_›ti⁄s
,

186 
u16_t
 
›éí
);

191 
	#ù_cuºít_√tif
(Ë(
cuºít_√tif
)

	)

195 
	#ù_cuºít_hódî
(Ë(
cuºít_hódî
)

	)

197 
	#ù_cuºít_§c_addr
(Ë(&
cuºít_ùhdr_§c
)

	)

199 
	#ù_cuºít_de°_addr
(Ë(&
cuºít_ùhdr_de°
)

	)

201 #i‡
IP_DEBUG


202 
ù_debug_¥öt
(
pbuf
 *
p
);

204 
	#ù_debug_¥öt
(
p
)

	)

207 #ifde‡
__˝lu•lus


	@include/ipv4/lwip/ip_addr.h

32 #i‚de‡
__LWIP_IP_ADDR_H__


33 
	#__LWIP_IP_ADDR_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/def.h
"

38 #ifde‡
__˝lu•lus


44 
	sù_addr
 {

45 
u32_t
 
addr
;

50 #ifde‡
PACK_STRUCT_USE_INCLUDES


51 
	~"¨ch/bp°ru˘.h
"

53 
PACK_STRUCT_BEGIN


54 
	sù_addr_∑cked
 {

55 
PACK_STRUCT_FIELD
(
u32_t
 
addr
);

56 } 
PACK_STRUCT_STRUCT
;

57 
PACK_STRUCT_END


58 #ifde‡
PACK_STRUCT_USE_INCLUDES


59 
	~"¨ch/ï°ru˘.h
"

64 
ù_addr
 
	tù_addr_t
;

65 
ù_addr_∑cked
 
	tù_addr_p_t
;

71 #ifde‡
PACK_STRUCT_USE_INCLUDES


72 
	~"¨ch/bp°ru˘.h
"

74 
PACK_STRUCT_BEGIN


75 
	sù_addr2
 {

76 
PACK_STRUCT_FIELD
(
u16_t
 
addrw
[2]);

77 } 
PACK_STRUCT_STRUCT
;

78 
PACK_STRUCT_END


79 #ifde‡
PACK_STRUCT_USE_INCLUDES


80 
	~"¨ch/ï°ru˘.h
"

84 
√tif
;

86 c⁄° 
ù_addr_t
 
ù_addr_™y
;

87 c⁄° 
ù_addr_t
 
ù_addr_brﬂdˇ°
;

92 
	#IP_ADDR_ANY
 ((
ù_addr_t
 *)&
ù_addr_™y
)

	)

93 
	#IP_ADDR_BROADCAST
 ((
ù_addr_t
 *)&
ù_addr_brﬂdˇ°
)

	)

96 
	#IPADDR_NONE
 ((
u32_t
)0xffffffffUL)

	)

98 
	#IPADDR_LOOPBACK
 ((
u32_t
)0x7f000001UL)

	)

100 
	#IPADDR_ANY
 ((
u32_t
)0x00000000UL)

	)

102 
	#IPADDR_BROADCAST
 ((
u32_t
)0xffffffffUL)

	)

108 
	#IP_CLASSA
(
a
Ë((((
u32_t
)◊)Ë& 0x80000000ULË=0)

	)

109 
	#IP_CLASSA_NET
 0xff000000

	)

110 
	#IP_CLASSA_NSHIFT
 24

	)

111 
	#IP_CLASSA_HOST
 (0xfffffff‡& ~
IP_CLASSA_NET
)

	)

112 
	#IP_CLASSA_MAX
 128

	)

114 
	#IP_CLASSB
(
a
Ë((((
u32_t
)◊)Ë& 0xc0000000ULË=0x80000000UL)

	)

115 
	#IP_CLASSB_NET
 0xffff0000

	)

116 
	#IP_CLASSB_NSHIFT
 16

	)

117 
	#IP_CLASSB_HOST
 (0xfffffff‡& ~
IP_CLASSB_NET
)

	)

118 
	#IP_CLASSB_MAX
 65536

	)

120 
	#IP_CLASSC
(
a
Ë((((
u32_t
)◊)Ë& 0xe0000000ULË=0xc0000000UL)

	)

121 
	#IP_CLASSC_NET
 0xffffff00

	)

122 
	#IP_CLASSC_NSHIFT
 8

	)

123 
	#IP_CLASSC_HOST
 (0xfffffff‡& ~
IP_CLASSC_NET
)

	)

125 
	#IP_CLASSD
(
a
Ë(((
u32_t
)◊Ë& 0xf0000000ULË=0xe0000000UL)

	)

126 
	#IP_CLASSD_NET
 0xf0000000

	)

127 
	#IP_CLASSD_NSHIFT
 28

	)

128 
	#IP_CLASSD_HOST
 0x0ffffff‡

	)

129 
	#IP_MULTICAST
(
a
Ë
	`IP_CLASSD
◊)

	)

131 
	#IP_EXPERIMENTAL
(
a
Ë(((
u32_t
)◊Ë& 0xf0000000ULË=0xf0000000UL)

	)

132 
	#IP_BADCLASS
(
a
Ë(((
u32_t
)◊Ë& 0xf0000000ULË=0xf0000000UL)

	)

134 
	#IP_LOOPBACKNET
 127

	)

137 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


139 
	#IP4_ADDR
(
ùaddr
, 
a
,
b
,
c
,
d
) \

140 (
ùaddr
)->
addr
 = ((
u32_t
)((
a
) & 0xff) << 24) | \

141 ((
u32_t
)((
b
) & 0xff) << 16) | \

142 ((
u32_t
)((
c
) & 0xff) << 8) | \

143 (
u32_t
)((
d
Ë& 0xff)

	)

147 
	#IP4_ADDR
(
ùaddr
, 
a
,
b
,
c
,
d
) \

148 (
ùaddr
)->
addr
 = ((
u32_t
)((
d
) & 0xff) << 24) | \

149 ((
u32_t
)((
c
) & 0xff) << 16) | \

150 ((
u32_t
)((
b
) & 0xff) << 8) | \

151 (
u32_t
)((
a
Ë& 0xff)

	)

157 #i‚de‡
IPADDR2_COPY


158 
	#IPADDR2_COPY
(
de°
, 
§c
Ë
	`SMEMCPY
(de°, src, (
ù_addr_t
))

	)

162 
	#ù_addr_c›y
(
de°
, 
§c
Ë((de°).
addr
 = (§c).addr)

	)

164 
	#ù_addr_£t
(
de°
, 
§c
Ë((de°)->
addr
 = \

165 ((
§c
Ë=
NULL
 ? 0 : \

166 (
§c
)->
addr
))

	)

168 
	#ù_addr_£t_zîo
(
ùaddr
Ë((ùaddr)->
addr
 = 0)

	)

170 
	#ù_addr_£t_™y
(
ùaddr
Ë((ùaddr)->
addr
 = 
IPADDR_ANY
)

	)

172 
	#ù_addr_£t_lo›back
(
ùaddr
Ë((ùaddr)->
addr
 = 
	`PP_HTONL
(
IPADDR_LOOPBACK
))

	)

175 
	#ù_addr_£t_ht⁄
(
de°
, 
§c
Ë((de°)->
addr
 = \

176 ((
§c
Ë=
NULL
 ? 0:\

177 
	`ht⁄l
((
§c
)->
addr
)))

	)

179 
	#ù4_addr_£t_u32
(
de°_ùaddr
, 
§c_u32
Ë((de°_ùaddr)->
addr
 = (§c_u32))

	)

181 
	#ù4_addr_gë_u32
(
§c_ùaddr
Ë((§c_ùaddr)->
addr
)

	)

184 
	#ù_addr_gë_√tw‹k
(
èrgë
, 
ho°
, 
√tmask
Ë(—¨gë)->
addr
 = ((ho°)->addrË& (“ëmask)->addr))

	)

194 
	#ù_addr_√tcmp
(
addr1
, 
addr2
, 
mask
Ë((◊ddr1)->
addr
 & \

195 (
mask
)->
addr
) == \

196 ((
addr2
)->
addr
 & \

197 (
mask
)->
addr
))

	)

198 
	#ù_addr_cmp
(
addr1
, 
addr2
Ë(◊ddr1)->
addr
 =◊ddr2)->addr)

	)

200 
	#ù_addr_ißny
(
addr1
Ë(◊ddr1Ë=
NULL
 || (addr1)->
addr
 =
IPADDR_ANY
)

	)

202 
	#ù_addr_isbrﬂdˇ°
(
ùaddr
, 
√tif
Ë
	`ù4_addr_isbrﬂdˇ°
((ùaddr)->
addr
, (√tif))

	)

203 
u8_t
 
ù4_addr_isbrﬂdˇ°
(
u32_t
 
addr
, c⁄° 
√tif
 *netif);

205 
	#ù_addr_√tmask_vÆid
(
√tmask
Ë
	`ù4_addr_√tmask_vÆid
(“ëmask)->
addr
)

	)

206 
u8_t
 
ù4_addr_√tmask_vÆid
(
u32_t
 
√tmask
);

208 
	#ù_addr_ismu…iˇ°
(
addr1
Ë((◊ddr1)->
addr
 & 
	`PP_HTONL
(0xf0000000UL)Ë=PP_HTONL(0xe0000000UL))

	)

210 
	#ù_addr_i¶ökloˇl
(
addr1
Ë((◊ddr1)->
addr
 & 
	`PP_HTONL
(0xffff0000UL)Ë=PP_HTONL(0xa9„0000UL))

	)

212 
	#ù_addr_debug_¥öt
(
debug
, 
ùaddr
) \

213 
	`LWIP_DEBUGF
(
debug
, ("%"
U16_F
".%"U16_F".%"U16_F".%"U16_F, \

214 
ùaddr
 !
NULL
 ? 
	`ù4_addr1_16
(ipaddr) : 0, \

215 
ùaddr
 !
NULL
 ? 
	`ù4_addr2_16
(ipaddr) : 0, \

216 
ùaddr
 !
NULL
 ? 
	`ù4_addr3_16
(ipaddr) : 0, \

217 
ùaddr
 !
NULL
 ? 
	`ù4_addr4_16
(ùaddrË: 0))

	)

220 
	#ù4_addr1
(
ùaddr
Ë(((
u8_t
*)(ùaddr))[0])

	)

221 
	#ù4_addr2
(
ùaddr
Ë(((
u8_t
*)(ùaddr))[1])

	)

222 
	#ù4_addr3
(
ùaddr
Ë(((
u8_t
*)(ùaddr))[2])

	)

223 
	#ù4_addr4
(
ùaddr
Ë(((
u8_t
*)(ùaddr))[3])

	)

226 
	#ù4_addr1_16
(
ùaddr
Ë((
u16_t
)
	`ù4_addr1
(ùaddr))

	)

227 
	#ù4_addr2_16
(
ùaddr
Ë((
u16_t
)
	`ù4_addr2
(ùaddr))

	)

228 
	#ù4_addr3_16
(
ùaddr
Ë((
u16_t
)
	`ù4_addr3
(ùaddr))

	)

229 
	#ù4_addr4_16
(
ùaddr
Ë((
u16_t
)
	`ù4_addr4
(ùaddr))

	)

232 
	#ù_¡ﬂ
(
ùaddr
Ë
	`ùaddr_¡ﬂ
(ùaddr)

	)

234 
u32_t
 
ùaddr_addr
(c⁄° *
˝
);

235 
ùaddr_©⁄
(c⁄° *
˝
, 
ù_addr_t
 *
addr
);

237 *
ùaddr_¡ﬂ
(c⁄° 
ù_addr_t
 *
addr
);

238 *
ùaddr_¡ﬂ_r
(c⁄° 
ù_addr_t
 *
addr
, *
buf
, 
buÊí
);

240 #ifde‡
__˝lu•lus


	@include/ipv4/lwip/ip_frag.h

33 #i‚de‡
__LWIP_IP_FRAG_H__


34 
	#__LWIP_IP_FRAG_H__


	)

36 
	~"lwù/›t.h
"

37 
	~"lwù/îr.h
"

38 
	~"lwù/pbuf.h
"

39 
	~"lwù/√tif.h
"

40 
	~"lwù/ù_addr.h
"

41 
	~"lwù/ù.h
"

43 #ifde‡
__˝lu•lus


47 #i‡
IP_REASSEMBLY


49 
	#IP_TMR_INTERVAL
 1000

	)

54 
	sù_ªassd©a
 {

55 
ù_ªassd©a
 *
√xt
;

56 
pbuf
 *
p
;

57 
ù_hdr
 
ùhdr
;

58 
u16_t
 
d©agøm_Àn
;

59 
u8_t
 
Êags
;

60 
u8_t
 
timî
;

63 
ù_ªass_öô
();

64 
ù_ªass_tmr
();

65 
pbuf
 * 
ù_ªass
(pbu‡*
p
);

68 #i‡
IP_FRAG


69 #i‡!
IP_FRAG_USES_STATIC_BUF
 && !
LWIP_NETIF_TX_SINGLE_PBUF


73 
	spbuf_cu°om_ªf
 {

75 
pbuf_cu°om
 
	mpc
;

77 
pbuf
 *
	m‹igöÆ
;

81 
îr_t
 
ù_‰ag
(
pbuf
 *
p
, 
√tif
 *√tif, 
ù_addr_t
 *
de°
);

84 #ifde‡
__˝lu•lus


	@include/ipv6/lwip/icmp.h

32 #i‚de‡
__LWIP_ICMP_H__


33 
	#__LWIP_ICMP_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_ICMP


39 
	~"lwù/pbuf.h
"

40 
	~"lwù/√tif.h
"

42 #ifde‡
__˝lu•lus


46 
	#ICMP6_DUR
 1

	)

47 
	#ICMP6_TE
 3

	)

48 
	#ICMP6_ECHO
 128

	)

49 
	#ICMP6_ER
 129

	)

52 
	eicmp_dur_ty≥
 {

53 
ICMP_DUR_NET
 = 0,

54 
ICMP_DUR_HOST
 = 1,

55 
ICMP_DUR_PROTO
 = 2,

56 
ICMP_DUR_PORT
 = 3,

57 
ICMP_DUR_FRAG
 = 4,

58 
ICMP_DUR_SR
 = 5

61 
	eicmp_ã_ty≥
 {

62 
ICMP_TE_TTL
 = 0,

63 
ICMP_TE_FRAG
 = 1

66 
icmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

68 
icmp_de°_uƒóch
(
pbuf
 *
p
, 
icmp_dur_ty≥
 
t
);

69 
icmp_time_ex˚eded
(
pbuf
 *
p
, 
icmp_ã_ty≥
 
t
);

71 
	sicmp_echo_hdr
 {

72 
u8_t
 
ty≥
;

73 
u8_t
 
icode
;

74 
u16_t
 
chksum
;

75 
u16_t
 
id
;

76 
u16_t
 
£qno
;

79 
	sicmp_dur_hdr
 {

80 
u8_t
 
ty≥
;

81 
u8_t
 
icode
;

82 
u16_t
 
chksum
;

83 
u32_t
 
unu£d
;

86 
	sicmp_ã_hdr
 {

87 
u8_t
 
ty≥
;

88 
u8_t
 
icode
;

89 
u16_t
 
chksum
;

90 
u32_t
 
unu£d
;

93 #ifde‡
__˝lu•lus


	@include/ipv6/lwip/inet.h

32 #i‚de‡
__LWIP_INET_H__


33 
	#__LWIP_INET_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/pbuf.h
"

37 
	~"lwù/ù_addr.h
"

39 #ifde‡
__˝lu•lus


43 
u16_t
 
öë_chksum
(*
d©a
, u16_à
Àn
);

44 
u16_t
 
öë_chksum_pbuf
(
pbuf
 *
p
);

45 
u16_t
 
öë_chksum_p£udo
(
pbuf
 *
p
,

46 
ù_addr
 *
§c
, ù_add∏*
de°
,

47 
u8_t
 
¥Ÿo
, 
u32_t
 
¥Ÿo_Àn
);

49 
u32_t
 
öë_addr
(c⁄° *
˝
);

50 
s8_t
 
öë_©⁄
(c⁄° *
˝
, 
ö_addr
 *
addr
);

52 #i‚de‡
_MACHINE_ENDIAN_H_


53 #i‚de‡
_NETINET_IN_H


54 #i‚de‡
_LINUX_BYTEORDER_GENERIC_H


55 
u16_t
 
ht⁄s
(u16_à
n
);

56 
u16_t
 
¡ohs
(u16_à
n
);

57 
u32_t
 
ht⁄l
(u32_à
n
);

58 
u32_t
 
¡ohl
(u32_à
n
);

63 #ifde‡
__˝lu•lus


	@include/ipv6/lwip/ip.h

32 #i‚de‡
__LWIP_IP_H__


33 
	#__LWIP_IP_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/def.h
"

37 
	~"lwù/pbuf.h
"

38 
	~"lwù/ù_addr.h
"

40 
	~"lwù/îr.h
"

42 #ifde‡
__˝lu•lus


46 
	#IP_HLEN
 40

	)

48 
	#IP_PROTO_ICMP
 58

	)

49 
	#IP_PROTO_UDP
 17

	)

50 
	#IP_PROTO_UDPLITE
 136

	)

51 
	#IP_PROTO_TCP
 6

	)

56 #ifde‡
IP_HDRINCL


57 #unde‡
IP_HDRINCL


59 
	#IP_HDRINCL
 
NULL


	)

61 #i‡
LWIP_NETIF_HWADDRHINT


62 
	#IP_PCB_ADDRHINT
 ;
u8_t
 
addr_höt


	)

64 
	#IP_PCB_ADDRHINT


	)

71 
	#IP_PCB
 
ù_addr
 
loˇl_ù
; \

72 
ù_addr
 
ªmŸe_ù
; \

74 
u16_t
 
so_›ti⁄s
; \

76 
u8_t
 
tos
; \

78 
u8_t
 
âl
; \

80 
IP_PCB_ADDRHINT


	)

84 
	sù_hdr
 {

85 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


86 
u8_t
 
t˛ass1
:4, 
v
:4;

87 
u8_t
 
Êow1
:4, 
t˛ass2
:4;

89 
u8_t
 
v
:4, 
t˛ass1
:4;

90 
u8_t
 
t˛ass2
:8, 
Êow1
:4;

92 
u16_t
 
Êow2
;

93 
u16_t
 
Àn
;

94 
u8_t
 
√xthdr
;

95 
u8_t
 
h›lim
;

96 
ù_addr
 
§c
, 
de°
;

99 
	#IPH_PROTO
(
hdr
Ë(
ùhdr
->
√xthdr
)

	)

101 
ù_öô
();

103 
	~"lwù/√tif.h
"

105 
√tif
 *
ù_rouã
(
ù_addr
 *
de°
);

107 
ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

110 
îr_t
 
ù_ouçut
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

111 
u8_t
 
âl
, u8_à
¥Ÿo
);

113 
îr_t
 
ù_ouçut_if
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

114 
u8_t
 
âl
, u8_à
¥Ÿo
,

115 
√tif
 *netif);

117 
	#ù_cuºít_√tif
(Ë
NULL


	)

118 
	#ù_cuºít_hódî
(Ë
NULL


	)

120 #i‡
IP_DEBUG


121 
ù_debug_¥öt
(
pbuf
 *
p
);

124 #ifde‡
__˝lu•lus


	@include/ipv6/lwip/ip_addr.h

32 #i‚de‡
__LWIP_IP_ADDR_H__


33 
	#__LWIP_IP_ADDR_H__


	)

35 
	~"lwù/›t.h
"

37 #ifde‡
__˝lu•lus


41 
	#IP_ADDR_ANY
 0

	)

43 #ifde‡
PACK_STRUCT_USE_INCLUDES


44 
	~"¨ch/bp°ru˘.h
"

46 
PACK_STRUCT_BEGIN


47 
	sù_addr
 {

48 
PACK_STRUCT_FIELD
(
u32_t
 
addr
[4]);

49 } 
PACK_STRUCT_STRUCT
;

50 
PACK_STRUCT_END


51 #ifde‡
PACK_STRUCT_USE_INCLUDES


52 
	~"¨ch/ï°ru˘.h
"

59 #ifde‡
PACK_STRUCT_USE_INCLUDES


60 
	~"¨ch/bp°ru˘.h
"

62 
PACK_STRUCT_BEGIN


63 
	sù_addr2
 {

64 
PACK_STRUCT_FIELD
(
u16_t
 
addrw
[2]);

65 } 
PACK_STRUCT_STRUCT
;

66 
PACK_STRUCT_END


67 #ifde‡
PACK_STRUCT_USE_INCLUDES


68 
	~"¨ch/ï°ru˘.h
"

71 
	#IP6_ADDR
(
ùaddr
, 
a
,
b
,
c
,
d
,
e
,
f
,
g
,
h
Ëdÿ{ (ùaddr)->
addr
[0] = 
	`ht⁄l
((
u32_t
)((a & 0xffff) << 16) | (b & 0xffff)); \

72 (
ùaddr
)->
addr
[1] = 
	`ht⁄l
(((
c
 & 0xffffË<< 16Ë| (
d
 & 0xffff)); \

73 (
ùaddr
)->
addr
[2] = 
	`ht⁄l
(((
e
 & 0xffffË<< 16Ë| (
f
 & 0xffff)); \

74 (
ùaddr
)->
addr
[3] = 
	`ht⁄l
(((
g
 & 0xffffË<< 16Ë| (
h
 & 0xffff)); } 0)

	)

76 
u8_t
 
ù_addr_√tcmp
(
ù_addr
 *
addr1
, ù_add∏*
addr2
,

77 
ù_addr
 *
mask
);

78 
u8_t
 
ù_addr_cmp
(
ù_addr
 *
addr1
, ù_add∏*
addr2
);

79 
ù_addr_£t
(
ù_addr
 *
de°
, ù_add∏*
§c
);

80 
u8_t
 
ù_addr_ißny
(
ù_addr
 *
addr
);

82 
	#ù_addr_debug_¥öt
(
debug
, 
ùaddr
) \

83 
	`LWIP_DEBUGF
(
debug
, ("%"
X32_F
":%"X32_F":%"X32_F":%"X32_F":%"X32_F":%"X32_F":%"X32_F":%"X32_F"\n", \

84 (
	`¡ohl
(
ùaddr
->
addr
[0]) >> 16) & 0xffff, \

85 
	`¡ohl
(
ùaddr
->
addr
[0]) & 0xffff, \

86 (
	`¡ohl
(
ùaddr
->
addr
[1]) >> 16) & 0xffff, \

87 
	`¡ohl
(
ùaddr
->
addr
[1]) & 0xffff, \

88 (
	`¡ohl
(
ùaddr
->
addr
[2]) >> 16) & 0xffff, \

89 
	`¡ohl
(
ùaddr
->
addr
[2]) & 0xffff, \

90 (
	`¡ohl
(
ùaddr
->
addr
[3]) >> 16) & 0xffff, \

91 
	`¡ohl
(
ùaddr
->
addr
[3]Ë& 0xffff));

	)

93 #ifde‡
__˝lu•lus


	@include/lwip/api.h

32 #i‚de‡
__LWIP_API_H__


33 
	#__LWIP_API_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_NETCONN


39 
	~<°ddef.h
>

41 
	~"lwù/√tbuf.h
"

42 
	~"lwù/sys.h
"

43 
	~"lwù/ù_addr.h
"

44 
	~"lwù/îr.h
"

46 #ifde‡
__˝lu•lus


55 
	#NETCONN_NOFLAG
 0x00

	)

56 
	#NETCONN_NOCOPY
 0x00

	)

57 
	#NETCONN_COPY
 0x01

	)

58 
	#NETCONN_MORE
 0x02

	)

59 
	#NETCONN_DONTBLOCK
 0x04

	)

65 
	#NETCONN_FLAG_WRITE_DELAYED
 0x01

	)

67 
	#NETCONN_FLAG_NON_BLOCKING
 0x02

	)

69 
	#NETCONN_FLAG_IN_NONBLOCKING_CONNECT
 0x04

	)

72 
	#NETCONN_FLAG_NO_AUTO_RECVED
 0x08

	)

75 
	#NETCONN_FLAG_CHECK_WRITESPACE
 0x10

	)

79 
	#NETCONNTYPE_GROUP
(
t
Ë—&0xF0)

	)

80 
	#NETCONNTYPE_DATAGRAM
(
t
Ë—&0xE0)

	)

83 
	e√tc⁄n_ty≥
 {

84 
NETCONN_INVALID
 = 0,

86 
NETCONN_TCP
 = 0x10,

88 
NETCONN_UDP
 = 0x20,

89 
NETCONN_UDPLITE
 = 0x21,

90 
NETCONN_UDPNOCHKSUM
= 0x22,

92 
NETCONN_RAW
 = 0x40

97 
	e√tc⁄n_°©e
 {

98 
NETCONN_NONE
,

99 
NETCONN_WRITE
,

100 
NETCONN_LISTEN
,

101 
NETCONN_CONNECT
,

102 
NETCONN_CLOSE


106 
	e√tc⁄n_evt
 {

107 
NETCONN_EVT_RCVPLUS
,

108 
NETCONN_EVT_RCVMINUS
,

109 
NETCONN_EVT_SENDPLUS
,

110 
NETCONN_EVT_SENDMINUS
,

111 
NETCONN_EVT_ERROR


114 #i‡
LWIP_IGMP


116 
	e√tc⁄n_igmp
 {

117 
NETCONN_JOIN
,

118 
NETCONN_LEAVE


123 
ù_pcb
;

124 
t˝_pcb
;

125 
udp_pcb
;

126 
øw_pcb
;

127 
√tc⁄n
;

128 
≠i_msg_msg
;

131 (* 
√tc⁄n_ˇŒback
)(
	t√tc⁄n
 *, 
	t√tc⁄n_evt
, 
	tu16_t
 
	tÀn
);

134 
	s√tc⁄n
 {

136 
√tc⁄n_ty≥
 
ty≥
;

138 
√tc⁄n_°©e
 
°©e
;

141 
ù_pcb
 *
ù
;

142 
t˝_pcb
 *
t˝
;

143 
udp_pcb
 *
udp
;

144 
øw_pcb
 *
øw
;

145 } 
pcb
;

147 
îr_t
 
œ°_îr
;

149 
sys_£m_t
 
›_com∂ëed
;

152 
sys_mbox_t
 
ªcvmbox
;

153 #i‡
LWIP_TCP


156 
sys_mbox_t
 
ac˚±mbox
;

159 #i‡
LWIP_SOCKET


160 
sockë
;

162 #i‡
LWIP_SO_RCVTIMEO


165 
ªcv_timeout
;

167 #i‡
LWIP_SO_RCVBUF


170 
ªcv_bufsize
;

174 
s16_t
 
ªcv_avaû
;

177 
u8_t
 
Êags
;

178 #i‡
LWIP_TCP


181 
size_t
 
wrôe_off£t
;

185 
≠i_msg_msg
 *
cuºít_msg
;

188 
√tc⁄n_ˇŒback
 
ˇŒback
;

192 
	#API_EVENT
(
c
,
e
,
l
Ëi‡(c->
ˇŒback
) { \

193 (*
c
->
ˇŒback
)(c, 
e
, 
l
); \

194 }

	)

197 
	#NETCONN_SET_SAFE_ERR
(
c⁄n
, 
îr
) do { \

198 
	`SYS_ARCH_DECL_PROTECT
(
Àv
); \

199 
	`SYS_ARCH_PROTECT
(
Àv
); \

200 i‡(!
	`ERR_IS_FATAL
((
c⁄n
)->
œ°_îr
)) { \

201 (
c⁄n
)->
œ°_îr
 = 
îr
; \

203 
	`SYS_ARCH_UNPROTECT
(
Àv
); \

204 } 0);

	)

207 
	#√tc⁄n_√w
(
t
Ë
	`√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
—, 0, 
NULL
)

	)

208 
	#√tc⁄n_√w_wôh_ˇŒback
(
t
, 
c
Ë
	`√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
—, 0, c)

	)

210 
√tc⁄n
 *
√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
(
√tc⁄n_ty≥
 
t
, 
u8_t
 
¥Ÿo
,

211 
√tc⁄n_ˇŒback
 
ˇŒback
);

212 
îr_t
 
√tc⁄n_dñëe
(
√tc⁄n
 *
c⁄n
);

214 
	#√tc⁄n_ty≥
(
c⁄n
Ë(c⁄n->
ty≥
)

	)

216 
îr_t
 
√tc⁄n_gëaddr
(
√tc⁄n
 *
c⁄n
, 
ù_addr_t
 *
addr
,

217 
u16_t
 *
p‹t
, 
u8_t
 
loˇl
);

218 
	#√tc⁄n_≥î
(
c
,
i
,
p
Ë
	`√tc⁄n_gëaddr
(c,i,p,0)

	)

219 
	#√tc⁄n_addr
(
c
,
i
,
p
Ë
	`√tc⁄n_gëaddr
(c,i,p,1)

	)

221 
îr_t
 
√tc⁄n_böd
(
√tc⁄n
 *
c⁄n
, 
ù_addr_t
 *
addr
, 
u16_t
 
p‹t
);

222 
îr_t
 
√tc⁄n_c⁄√˘
(
√tc⁄n
 *
c⁄n
, 
ù_addr_t
 *
addr
, 
u16_t
 
p‹t
);

223 
îr_t
 
√tc⁄n_disc⁄√˘
 (
√tc⁄n
 *
c⁄n
);

224 
îr_t
 
√tc⁄n_li°í_wôh_backlog
(
√tc⁄n
 *
c⁄n
, 
u8_t
 
backlog
);

225 
	#√tc⁄n_li°í
(
c⁄n
Ë
	`√tc⁄n_li°í_wôh_backlog
(c⁄n, 
TCP_DEFAULT_LISTEN_BACKLOG
)

	)

226 
îr_t
 
√tc⁄n_ac˚±
(
√tc⁄n
 *
c⁄n
, √tc⁄¿**
√w_c⁄n
);

227 
îr_t
 
√tc⁄n_ªcv
(
√tc⁄n
 *
c⁄n
, 
√tbuf
 **
√w_buf
);

228 
îr_t
 
√tc⁄n_ªcv_t˝_pbuf
(
√tc⁄n
 *
c⁄n
, 
pbuf
 **
√w_buf
);

229 
√tc⁄n_ªcved
(
√tc⁄n
 *
c⁄n
, 
u32_t
 
Àngth
);

230 
îr_t
 
√tc⁄n_£ndto
(
√tc⁄n
 *
c⁄n
, 
√tbuf
 *
buf
,

231 
ù_addr_t
 *
addr
, 
u16_t
 
p‹t
);

232 
îr_t
 
√tc⁄n_£nd
(
√tc⁄n
 *
c⁄n
, 
√tbuf
 *
buf
);

233 
îr_t
 
√tc⁄n_wrôe
(
√tc⁄n
 *
c⁄n
, c⁄° *
d©≠å
, 
size_t
 
size
,

234 
u8_t
 
≠iÊags
);

235 
îr_t
 
√tc⁄n_˛o£
(
√tc⁄n
 *
c⁄n
);

236 
îr_t
 
√tc⁄n_shutdown
(
√tc⁄n
 *
c⁄n
, 
u8_t
 
shut_rx
, u8_à
shut_tx
);

238 #i‡
LWIP_IGMP


239 
îr_t
 
√tc⁄n_joö_Àave_group
(
√tc⁄n
 *
c⁄n
, 
ù_addr_t
 *
mu…üddr
,

240 
ù_addr_t
 *
√tif_addr
, 
√tc⁄n_igmp
 
joö_‹_Àave
);

242 #i‡
LWIP_DNS


243 
îr_t
 
√tc⁄n_gëho°by«me
(c⁄° *
«me
, 
ù_addr_t
 *
addr
);

246 
	#√tc⁄n_îr
(
c⁄n
Ë((c⁄n)->
œ°_îr
)

	)

247 
	#√tc⁄n_ªcv_bufsize
(
c⁄n
Ë((c⁄n)->
ªcv_bufsize
)

	)

250 
	#√tc⁄n_£t_n⁄blockög
(
c⁄n
, 
vÆ
) do { if(val) { \

251 (
c⁄n
)->
Êags
 |
NETCONN_FLAG_NON_BLOCKING
; \

253 (
c⁄n
)->
Êags
 &~ 
NETCONN_FLAG_NON_BLOCKING
; }} 0)

	)

255 
	#√tc⁄n_is_n⁄blockög
(
c⁄n
Ë(((c⁄n)->
Êags
 & 
NETCONN_FLAG_NON_BLOCKING
Ë!0)

	)

258 
	#√tc⁄n_£t_nﬂut‹ecved
(
c⁄n
, 
vÆ
) do { if(val) { \

259 (
c⁄n
)->
Êags
 |
NETCONN_FLAG_NO_AUTO_RECVED
; \

261 (
c⁄n
)->
Êags
 &~ 
NETCONN_FLAG_NO_AUTO_RECVED
; }} 0)

	)

263 
	#√tc⁄n_gë_nﬂut‹ecved
(
c⁄n
Ë(((c⁄n)->
Êags
 & 
NETCONN_FLAG_NO_AUTO_RECVED
Ë!0)

	)

265 #i‡
LWIP_SO_RCVTIMEO


267 
	#√tc⁄n_£t_ªcvtimeout
(
c⁄n
, 
timeout
Ë((c⁄n)->
ªcv_timeout
 = (timeout))

	)

269 
	#√tc⁄n_gë_ªcvtimeout
(
c⁄n
Ë((c⁄n)->
ªcv_timeout
)

	)

271 #i‡
LWIP_SO_RCVBUF


273 
	#√tc⁄n_£t_ªcvbufsize
(
c⁄n
, 
ªcvbufsize
Ë((c⁄n)->
ªcv_bufsize
 = (ªcvbufsize))

	)

275 
	#√tc⁄n_gë_ªcvbufsize
(
c⁄n
Ë((c⁄n)->
ªcv_bufsize
)

	)

278 #ifde‡
__˝lu•lus


	@include/lwip/api_msg.h

32 #i‚de‡
__LWIP_API_MSG_H__


33 
	#__LWIP_API_MSG_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_NETCONN


39 
	~<°ddef.h
>

41 
	~"lwù/ù_addr.h
"

42 
	~"lwù/îr.h
"

43 
	~"lwù/sys.h
"

44 
	~"lwù/igmp.h
"

45 
	~"lwù/≠i.h
"

47 #ifde‡
__˝lu•lus


52 
	#NETCONN_SHUT_RD
 1

	)

53 
	#NETCONN_SHUT_WR
 2

	)

54 
	#NETCONN_SHUT_RDWR
 (
NETCONN_SHUT_RD
 | 
NETCONN_SHUT_WR
)

	)

62 
	s≠i_msg_msg
 {

65 
√tc⁄n
 *
c⁄n
;

67 
îr_t
 
îr
;

71 
√tbuf
 *
b
;

74 
u8_t
 
¥Ÿo
;

75 } 
n
;

78 
ù_addr_t
 *
ùaddr
;

79 
u16_t
 
p‹t
;

80 } 
bc
;

83 
ù_addr_t
 *
ùaddr
;

84 
u16_t
 *
p‹t
;

85 
u8_t
 
loˇl
;

86 } 
ad
;

89 c⁄° *
d©≠å
;

90 
size_t
 
Àn
;

91 
u8_t
 
≠iÊags
;

92 } 
w
;

95 
u32_t
 
Àn
;

96 } 
r
;

99 
u8_t
 
shut
;

100 } 
sd
;

101 #i‡
LWIP_IGMP


104 
ù_addr_t
 *
mu…üddr
;

105 
ù_addr_t
 *
√tif_addr
;

106 
√tc⁄n_igmp
 
joö_‹_Àave
;

107 } 
jl
;

109 #i‡
TCP_LISTEN_BACKLOG


111 
u8_t
 
backlog
;

112 } 
lb
;

114 } 
msg
;

120 
	s≠i_msg
 {

122 (* 
fun˘i⁄
)(
≠i_msg_msg
 *
msg
);

124 
≠i_msg_msg
 
msg
;

127 #i‡
LWIP_DNS


132 
	sdns_≠i_msg
 {

134 c⁄° *
«me
;

136 
ù_addr_t
 *
addr
;

139 
sys_£m_t
 *
£m
;

141 
îr_t
 *
îr
;

145 
do_√wc⁄n
 ( 
≠i_msg_msg
 *
msg
);

146 
do_dñc⁄n
 ( 
≠i_msg_msg
 *
msg
);

147 
do_böd
 ( 
≠i_msg_msg
 *
msg
);

148 
do_c⁄√˘
 ( 
≠i_msg_msg
 *
msg
);

149 
do_disc⁄√˘
 ( 
≠i_msg_msg
 *
msg
);

150 
do_li°í
 ( 
≠i_msg_msg
 *
msg
);

151 
do_£nd
 ( 
≠i_msg_msg
 *
msg
);

152 
do_ªcv
 ( 
≠i_msg_msg
 *
msg
);

153 
do_wrôe
 ( 
≠i_msg_msg
 *
msg
);

154 
do_gëaddr
 ( 
≠i_msg_msg
 *
msg
);

155 
do_˛o£
 ( 
≠i_msg_msg
 *
msg
);

156 
do_shutdown
 ( 
≠i_msg_msg
 *
msg
);

157 #i‡
LWIP_IGMP


158 
do_joö_Àave_group
–
≠i_msg_msg
 *
msg
);

161 #i‡
LWIP_DNS


162 
do_gëho°by«me
(*
¨g
);

165 
√tc⁄n
* 
√tc⁄n_Æloc
(
√tc⁄n_ty≥
 
t
, 
√tc⁄n_ˇŒback
 
ˇŒback
);

166 
√tc⁄n_‰ì
(
√tc⁄n
 *
c⁄n
);

168 #ifde‡
__˝lu•lus


	@include/lwip/arch.h

32 #i‚de‡
__LWIP_ARCH_H__


33 
	#__LWIP_ARCH_H__


	)

35 #i‚de‡
LITTLE_ENDIAN


36 
	#LITTLE_ENDIAN
 1234

	)

39 #i‚de‡
BIG_ENDIAN


40 
	#BIG_ENDIAN
 4321

	)

43 
	~"¨ch/cc.h
"

46 #i‚de‡
SZT_F


47 
	#SZT_F
 
U32_F


	)

51 #i‚de‡
X8_F


52 
	#X8_F
 "02x"

	)

55 #ifde‡
__˝lu•lus


59 #i‚de‡
PACK_STRUCT_BEGIN


60 
	#PACK_STRUCT_BEGIN


	)

63 #i‚de‡
PACK_STRUCT_END


64 
	#PACK_STRUCT_END


	)

67 #i‚de‡
PACK_STRUCT_FIELD


68 
	#PACK_STRUCT_FIELD
(
x
Ë
	)
x

72 #i‚de‡
LWIP_UNUSED_ARG


73 
	#LWIP_UNUSED_ARG
(
x
Ë()
	)
x

77 #ifde‡
LWIP_PROVIDE_ERRNO


79 
	#EPERM
 1

	)

80 
	#ENOENT
 2

	)

81 
	#ESRCH
 3

	)

82 
	#EINTR
 4

	)

83 
	#EIO
 5

	)

84 
	#ENXIO
 6

	)

85 
	#E2BIG
 7

	)

86 
	#ENOEXEC
 8

	)

87 
	#EBADF
 9

	)

88 
	#ECHILD
 10

	)

89 
	#EAGAIN
 11

	)

90 
	#ENOMEM
 12

	)

91 
	#EACCES
 13

	)

92 
	#EFAULT
 14

	)

93 
	#ENOTBLK
 15

	)

94 
	#EBUSY
 16

	)

95 
	#EEXIST
 17

	)

96 
	#EXDEV
 18

	)

97 
	#ENODEV
 19

	)

98 
	#ENOTDIR
 20

	)

99 
	#EISDIR
 21

	)

100 
	#EINVAL
 22

	)

101 
	#ENFILE
 23

	)

102 
	#EMFILE
 24

	)

103 
	#ENOTTY
 25

	)

104 
	#ETXTBSY
 26

	)

105 
	#EFBIG
 27

	)

106 
	#ENOSPC
 28

	)

107 
	#ESPIPE
 29

	)

108 
	#EROFS
 30

	)

109 
	#EMLINK
 31

	)

110 
	#EPIPE
 32

	)

111 
	#EDOM
 33

	)

112 
	#ERANGE
 34

	)

113 
	#EDEADLK
 35

	)

114 
	#ENAMETOOLONG
 36

	)

115 
	#ENOLCK
 37

	)

116 
	#ENOSYS
 38

	)

117 
	#ENOTEMPTY
 39

	)

118 
	#ELOOP
 40

	)

119 
	#EWOULDBLOCK
 
EAGAIN


	)

120 
	#ENOMSG
 42

	)

121 
	#EIDRM
 43

	)

122 
	#ECHRNG
 44

	)

123 
	#EL2NSYNC
 45

	)

124 
	#EL3HLT
 46

	)

125 
	#EL3RST
 47

	)

126 
	#ELNRNG
 48

	)

127 
	#EUNATCH
 49

	)

128 
	#ENOCSI
 50

	)

129 
	#EL2HLT
 51

	)

130 
	#EBADE
 52

	)

131 
	#EBADR
 53

	)

132 
	#EXFULL
 54

	)

133 
	#ENOANO
 55

	)

134 
	#EBADRQC
 56

	)

135 
	#EBADSLT
 57

	)

137 
	#EDEADLOCK
 
EDEADLK


	)

139 
	#EBFONT
 59

	)

140 
	#ENOSTR
 60

	)

141 
	#ENODATA
 61

	)

142 
	#ETIME
 62

	)

143 
	#ENOSR
 63

	)

144 
	#ENONET
 64

	)

145 
	#ENOPKG
 65

	)

146 
	#EREMOTE
 66

	)

147 
	#ENOLINK
 67

	)

148 
	#EADV
 68

	)

149 
	#ESRMNT
 69

	)

150 
	#ECOMM
 70

	)

151 
	#EPROTO
 71

	)

152 
	#EMULTIHOP
 72

	)

153 
	#EDOTDOT
 73

	)

154 
	#EBADMSG
 74

	)

155 
	#EOVERFLOW
 75

	)

156 
	#ENOTUNIQ
 76

	)

157 
	#EBADFD
 77

	)

158 
	#EREMCHG
 78

	)

159 
	#ELIBACC
 79

	)

160 
	#ELIBBAD
 80

	)

161 
	#ELIBSCN
 81

	)

162 
	#ELIBMAX
 82

	)

163 
	#ELIBEXEC
 83

	)

164 
	#EILSEQ
 84

	)

165 
	#ERESTART
 85

	)

166 
	#ESTRPIPE
 86

	)

167 
	#EUSERS
 87

	)

168 
	#ENOTSOCK
 88

	)

169 
	#EDESTADDRREQ
 89

	)

170 
	#EMSGSIZE
 90

	)

171 
	#EPROTOTYPE
 91

	)

172 
	#ENOPROTOOPT
 92

	)

173 
	#EPROTONOSUPPORT
 93

	)

174 
	#ESOCKTNOSUPPORT
 94

	)

175 
	#EOPNOTSUPP
 95

	)

176 
	#EPFNOSUPPORT
 96

	)

177 
	#EAFNOSUPPORT
 97

	)

178 
	#EADDRINUSE
 98

	)

179 
	#EADDRNOTAVAIL
 99

	)

180 
	#ENETDOWN
 100

	)

181 
	#ENETUNREACH
 101

	)

182 
	#ENETRESET
 102

	)

183 
	#ECONNABORTED
 103

	)

184 
	#ECONNRESET
 104

	)

185 
	#ENOBUFS
 105

	)

186 
	#EISCONN
 106

	)

187 
	#ENOTCONN
 107

	)

188 
	#ESHUTDOWN
 108

	)

189 
	#ETOOMANYREFS
 109

	)

190 
	#ETIMEDOUT
 110

	)

191 
	#ECONNREFUSED
 111

	)

192 
	#EHOSTDOWN
 112

	)

193 
	#EHOSTUNREACH
 113

	)

194 
	#EALREADY
 114

	)

195 
	#EINPROGRESS
 115

	)

196 
	#ESTALE
 116

	)

197 
	#EUCLEAN
 117

	)

198 
	#ENOTNAM
 118

	)

199 
	#ENAVAIL
 119

	)

200 
	#EISNAM
 120

	)

201 
	#EREMOTEIO
 121

	)

202 
	#EDQUOT
 122

	)

204 
	#ENOMEDIUM
 123

	)

205 
	#EMEDIUMTYPE
 124

	)

208 
	#ENSROK
 0

	)

209 
	#ENSRNODATA
 160

	)

210 
	#ENSRFORMERR
 161

	)

211 
	#ENSRSERVFAIL
 162

	)

212 
	#ENSRNOTFOUND
 163

	)

213 
	#ENSRNOTIMP
 164

	)

214 
	#ENSRREFUSED
 165

	)

215 
	#ENSRBADQUERY
 166

	)

216 
	#ENSRBADNAME
 167

	)

217 
	#ENSRBADFAMILY
 168

	)

218 
	#ENSRBADRESP
 169

	)

219 
	#ENSRCONNREFUSED
 170

	)

220 
	#ENSRTIMEOUT
 171

	)

221 
	#ENSROF
 172

	)

222 
	#ENSRFILE
 173

	)

223 
	#ENSRNOMEM
 174

	)

224 
	#ENSRDESTRUCTION
 175

	)

225 
	#ENSRQUERYDOMAINTOOLONG
 176

	)

226 
	#ENSRCNAMELOOP
 177

	)

228 #i‚de‡
î∫o


229 
î∫o
;

234 #ifde‡
__˝lu•lus


	@include/lwip/debug.h

32 #i‚de‡
__LWIP_DEBUG_H__


33 
	#__LWIP_DEBUG_H__


	)

35 
	~"lwù/¨ch.h
"

43 
	#LWIP_DBG_LEVEL_ALL
 0x00

	)

44 
	#LWIP_DBG_LEVEL_OFF
 
LWIP_DBG_LEVEL_ALL


	)

45 
	#LWIP_DBG_LEVEL_WARNING
 0x01

	)

46 
	#LWIP_DBG_LEVEL_SERIOUS
 0x02

	)

47 
	#LWIP_DBG_LEVEL_SEVERE
 0x03

	)

48 
	#LWIP_DBG_MASK_LEVEL
 0x03

	)

51 
	#LWIP_DBG_ON
 0x80U

	)

53 
	#LWIP_DBG_OFF
 0x00U

	)

56 
	#LWIP_DBG_TRACE
 0x40U

	)

58 
	#LWIP_DBG_STATE
 0x20U

	)

60 
	#LWIP_DBG_FRESH
 0x10U

	)

62 
	#LWIP_DBG_HALT
 0x08U

	)

64 #i‚de‡
LWIP_NOASSERT


65 
	#LWIP_ASSERT
(
mesßge
, 
as£πi⁄
) do { if(!(assertion)) \

66 
	`LWIP_PLATFORM_ASSERT
(
mesßge
); } 0)

	)

68 
	#LWIP_ASSERT
(
mesßge
, 
as£πi⁄
)

	)

72 #i‚de‡
LWIP_ERROR


73 
	#LWIP_ERROR
(
mesßge
, 
ex¥essi⁄
, 
h™dÀr
) do { if (!(expression)) { \

74 
	`LWIP_PLATFORM_ASSERT
(
mesßge
); 
h™dÀr
;}} 0)

	)

77 #ifde‡
LWIP_DEBUG


81 
	#LWIP_DEBUGF
(
debug
, 
mesßge
) do { \

83 ((
debug
Ë& 
LWIP_DBG_ON
) && \

84 ((
debug
Ë& 
LWIP_DBG_TYPES_ON
) && \

85 ((
s16_t
)((
debug
Ë& 
LWIP_DBG_MASK_LEVEL
Ë>
LWIP_DBG_MIN_LEVEL
)) { \

86 
	`LWIP_PLATFORM_DIAG
(
mesßge
); \

87 i‡((
debug
Ë& 
LWIP_DBG_HALT
) { \

91 } 0)

	)

94 
	#LWIP_DEBUGF
(
debug
, 
mesßge
)

	)

	@include/lwip/def.h

32 #i‚de‡
__LWIP_DEF_H__


33 
	#__LWIP_DEF_H__


	)

36 
	~"lwù/¨ch.h
"

37 
	~"lwù/›t.h
"

39 #ifde‡
__˝lu•lus


43 
	#LWIP_MAX
(
x
 , 
y
Ë(((xË> (y)Ë? (xË: (y))

	)

44 
	#LWIP_MIN
(
x
 , 
y
Ë(((xË< (y)Ë? (xË: (y))

	)

46 #i‚de‡
NULL


47 
	#NULL
 ((*)0)

	)

52 
	#LWIP_U32_DIFF
(
a
, 
b
Ë((◊Ë>(b)Ë? (◊Ë- (b)Ë: ((◊Ë+ ((bË^ 0xFFFFFFFFË+ 1)))

	)

55 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


56 
	#LWIP_MAKE_U16
(
a
, 
b
Ë(◊ << 8Ë| b)

	)

58 
	#LWIP_MAKE_U16
(
a
, 
b
Ë((b << 8Ë|á)

	)

61 #i‚de‡
LWIP_PLATFORM_BYTESWAP


62 
	#LWIP_PLATFORM_BYTESWAP
 0

	)

65 #i‚de‡
LWIP_PREFIX_BYTEORDER_FUNCS


68 #ifde‡
ht⁄s


69 #unde‡
ht⁄s


71 #ifde‡
ht⁄l


72 #unde‡
ht⁄l


74 #ifde‡
¡ohs


75 #unde‡
¡ohs


77 #ifde‡
¡ohl


78 #unde‡
¡ohl


81 
	#ht⁄s
(
x
Ë
	`lwù_ht⁄s
(x)

	)

82 
	#¡ohs
(
x
Ë
	`lwù_¡ohs
(x)

	)

83 
	#ht⁄l
(
x
Ë
	`lwù_ht⁄l
(x)

	)

84 
	#¡ohl
(
x
Ë
	`lwù_¡ohl
(x)

	)

87 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


88 
	#lwù_ht⁄s
(
x
Ë(x)

	)

89 
	#lwù_¡ohs
(
x
Ë(x)

	)

90 
	#lwù_ht⁄l
(
x
Ë(x)

	)

91 
	#lwù_¡ohl
(
x
Ë(x)

	)

92 
	#PP_HTONS
(
x
Ë(x)

	)

93 
	#PP_NTOHS
(
x
Ë(x)

	)

94 
	#PP_HTONL
(
x
Ë(x)

	)

95 
	#PP_NTOHL
(
x
Ë(x)

	)

97 #i‡
LWIP_PLATFORM_BYTESWAP


98 
	#lwù_ht⁄s
(
x
Ë
	`LWIP_PLATFORM_HTONS
(x)

	)

99 
	#lwù_¡ohs
(
x
Ë
	`LWIP_PLATFORM_HTONS
(x)

	)

100 
	#lwù_ht⁄l
(
x
Ë
	`LWIP_PLATFORM_HTONL
(x)

	)

101 
	#lwù_¡ohl
(
x
Ë
	`LWIP_PLATFORM_HTONL
(x)

	)

103 
u16_t
 
lwù_ht⁄s
(u16_à
x
);

104 
u16_t
 
lwù_¡ohs
(u16_à
x
);

105 
u32_t
 
lwù_ht⁄l
(u32_à
x
);

106 
u32_t
 
lwù_¡ohl
(u32_à
x
);

112 
	#PP_HTONS
(
x
Ë((((xË& 0xffË<< 8Ë| (((xË& 0xff00Ë>> 8))

	)

113 
	#PP_NTOHS
(
x
Ë
	`PP_HTONS
(x)

	)

114 
	#PP_HTONL
(
x
) ((((x) & 0xff) << 24) | \

115 (((
x
) & 0xff00) << 8) | \

116 (((
x
) & 0xff0000UL) >> 8) | \

117 (((
x
Ë& 0xff000000ULË>> 24))

	)

118 
	#PP_NTOHL
(
x
Ë
	`PP_HTONL
(x)

	)

122 #ifde‡
__˝lu•lus


	@include/lwip/dhcp.h

4 #i‚de‡
__LWIP_DHCP_H__


5 
	#__LWIP_DHCP_H__


	)

7 
	~"lwù/›t.h
"

9 #i‡
LWIP_DHCP


11 
	~"lwù/√tif.h
"

12 
	~"lwù/udp.h
"

14 #ifde‡
__˝lu•lus


19 
	#DHCP_COARSE_TIMER_SECS
 60

	)

21 
	#DHCP_COARSE_TIMER_MSECS
 (
DHCP_COARSE_TIMER_SECS
 * 1000UL)

	)

23 
	#DHCP_FINE_TIMER_MSECS
 500

	)

25 
	#DHCP_CHADDR_LEN
 16U

	)

26 
	#DHCP_SNAME_LEN
 64U

	)

27 
	#DHCP_FILE_LEN
 128U

	)

29 
	sdh˝


32 
u32_t
 
xid
;

34 
udp_pcb
 *
pcb
;

36 
dh˝_msg
 *
msg_ö
;

38 
u8_t
 
°©e
;

40 
u8_t
 
åõs
;

41 #i‡
LWIP_DHCP_AUTOIP_COOP


42 
u8_t
 
autoù_co›_°©e
;

44 
u8_t
 
sub√t_mask_giví
;

46 
pbuf
 *
p_out
;

47 
dh˝_msg
 *
msg_out
;

48 
u16_t
 
›ti⁄s_out_Àn
;

49 
u16_t
 
ªque°_timeout
;

50 
u16_t
 
t1_timeout
;

51 
u16_t
 
t2_timeout
;

52 
ù_addr_t
 
£rvî_ù_addr
;

53 
ù_addr_t
 
of„ªd_ù_addr
;

54 
ù_addr_t
 
of„ªd_¢_mask
;

55 
ù_addr_t
 
of„ªd_gw_addr
;

57 
u32_t
 
of„ªd_t0_Àa£
;

58 
u32_t
 
of„ªd_t1_ª√w
;

59 
u32_t
 
of„ªd_t2_ªböd
;

62 #i‡
LWIP_DHCP_BOOTP_FILE


63 
ù_addr_t
 
of„ªd_si_addr
;

64 
boŸ_fûe_«me
[
DHCP_FILE_LEN
];

69 #ifde‡
PACK_STRUCT_USE_INCLUDES


70 
	~"¨ch/bp°ru˘.h
"

72 
PACK_STRUCT_BEGIN


74 
	sdh˝_msg


76 
PACK_STRUCT_FIELD
(
u8_t
 
›
);

77 
PACK_STRUCT_FIELD
(
u8_t
 
hty≥
);

78 
PACK_STRUCT_FIELD
(
u8_t
 
hÀn
);

79 
PACK_STRUCT_FIELD
(
u8_t
 
h›s
);

80 
PACK_STRUCT_FIELD
(
u32_t
 
xid
);

81 
PACK_STRUCT_FIELD
(
u16_t
 
£cs
);

82 
PACK_STRUCT_FIELD
(
u16_t
 
Êags
);

83 
PACK_STRUCT_FIELD
(
ù_addr_p_t
 
cüddr
);

84 
PACK_STRUCT_FIELD
(
ù_addr_p_t
 
yüddr
);

85 
PACK_STRUCT_FIELD
(
ù_addr_p_t
 
süddr
);

86 
PACK_STRUCT_FIELD
(
ù_addr_p_t
 
güddr
);

87 
PACK_STRUCT_FIELD
(
u8_t
 
chaddr
[
DHCP_CHADDR_LEN
]);

88 
PACK_STRUCT_FIELD
(
u8_t
 
¢ame
[
DHCP_SNAME_LEN
]);

89 
PACK_STRUCT_FIELD
(
u8_t
 
fûe
[
DHCP_FILE_LEN
]);

90 
PACK_STRUCT_FIELD
(
u32_t
 
cookõ
);

91 
	#DHCP_MIN_OPTIONS_LEN
 68U

	)

93 #i‡((
deföed
(
DHCP_OPTIONS_LEN
)Ë&& (DHCP_OPTIONS_LEN < 
DHCP_MIN_OPTIONS_LEN
))

94 #unde‡
DHCP_OPTIONS_LEN


97 #i‡(!
deföed
(
DHCP_OPTIONS_LEN
))

99 
	#DHCP_OPTIONS_LEN
 
DHCP_MIN_OPTIONS_LEN


	)

101 
PACK_STRUCT_FIELD
(
u8_t
 
›ti⁄s
[
DHCP_OPTIONS_LEN
]);

102 } 
PACK_STRUCT_STRUCT
;

103 
PACK_STRUCT_END


104 #ifde‡
PACK_STRUCT_USE_INCLUDES


105 
	~"¨ch/ï°ru˘.h
"

108 
dh˝_£t_°ru˘
(
√tif
 *√tif, 
dh˝
 *dhcp);

110 
	#dh˝_ªmove_°ru˘
(
√tif
Ëdÿ{ (√tif)->
dh˝
 = 
NULL
; } 0)

	)

111 
dh˝_˛ónup
(
√tif
 *netif);

113 
îr_t
 
dh˝_°¨t
(
√tif
 *netif);

115 
îr_t
 
dh˝_ª√w
(
√tif
 *netif);

117 
îr_t
 
dh˝_ªÀa£
(
√tif
 *netif);

119 
dh˝_°›
(
√tif
 *netif);

121 
dh˝_öf‹m
(
√tif
 *netif);

123 
dh˝_√tw‹k_ch™ged
(
√tif
 *netif);

126 #i‡
DHCP_DOES_ARP_CHECK


127 
dh˝_¨p_ª∂y
(
√tif
 *√tif, 
ù_addr_t
 *
addr
);

131 
dh˝_cﬂr£_tmr
();

133 
dh˝_föe_tmr
();

136 
	#DHCP_OP_OFS
 0

	)

137 
	#DHCP_HTYPE_OFS
 1

	)

138 
	#DHCP_HLEN_OFS
 2

	)

139 
	#DHCP_HOPS_OFS
 3

	)

140 
	#DHCP_XID_OFS
 4

	)

141 
	#DHCP_SECS_OFS
 8

	)

142 
	#DHCP_FLAGS_OFS
 10

	)

143 
	#DHCP_CIADDR_OFS
 12

	)

144 
	#DHCP_YIADDR_OFS
 16

	)

145 
	#DHCP_SIADDR_OFS
 20

	)

146 
	#DHCP_GIADDR_OFS
 24

	)

147 
	#DHCP_CHADDR_OFS
 28

	)

148 
	#DHCP_SNAME_OFS
 44

	)

149 
	#DHCP_FILE_OFS
 108

	)

150 
	#DHCP_MSG_LEN
 236

	)

152 
	#DHCP_COOKIE_OFS
 
DHCP_MSG_LEN


	)

153 
	#DHCP_OPTIONS_OFS
 (
DHCP_MSG_LEN
 + 4)

	)

155 
	#DHCP_CLIENT_PORT
 68

	)

156 
	#DHCP_SERVER_PORT
 67

	)

159 
	#DHCP_OFF
 0

	)

160 
	#DHCP_REQUESTING
 1

	)

161 
	#DHCP_INIT
 2

	)

162 
	#DHCP_REBOOTING
 3

	)

163 
	#DHCP_REBINDING
 4

	)

164 
	#DHCP_RENEWING
 5

	)

165 
	#DHCP_SELECTING
 6

	)

166 
	#DHCP_INFORMING
 7

	)

167 
	#DHCP_CHECKING
 8

	)

168 
	#DHCP_PERMANENT
 9

	)

169 
	#DHCP_BOUND
 10

	)

171 
	#DHCP_BACKING_OFF
 12

	)

174 
	#DHCP_AUTOIP_COOP_STATE_OFF
 0

	)

175 
	#DHCP_AUTOIP_COOP_STATE_ON
 1

	)

177 
	#DHCP_BOOTREQUEST
 1

	)

178 
	#DHCP_BOOTREPLY
 2

	)

181 
	#DHCP_DISCOVER
 1

	)

182 
	#DHCP_OFFER
 2

	)

183 
	#DHCP_REQUEST
 3

	)

184 
	#DHCP_DECLINE
 4

	)

185 
	#DHCP_ACK
 5

	)

186 
	#DHCP_NAK
 6

	)

187 
	#DHCP_RELEASE
 7

	)

188 
	#DHCP_INFORM
 8

	)

191 
	#DHCP_HTYPE_ETH
 1

	)

193 
	#DHCP_MAGIC_COOKIE
 0x63825363UL

	)

198 
	#DHCP_OPTION_PAD
 0

	)

199 
	#DHCP_OPTION_SUBNET_MASK
 1

	)

200 
	#DHCP_OPTION_ROUTER
 3

	)

201 
	#DHCP_OPTION_DNS_SERVER
 6

	)

202 
	#DHCP_OPTION_HOSTNAME
 12

	)

203 
	#DHCP_OPTION_IP_TTL
 23

	)

204 
	#DHCP_OPTION_MTU
 26

	)

205 
	#DHCP_OPTION_BROADCAST
 28

	)

206 
	#DHCP_OPTION_TCP_TTL
 37

	)

207 
	#DHCP_OPTION_END
 255

	)

210 
	#DHCP_OPTION_REQUESTED_IP
 50

	)

211 
	#DHCP_OPTION_LEASE_TIME
 51

	)

212 
	#DHCP_OPTION_OVERLOAD
 52

	)

214 
	#DHCP_OPTION_MESSAGE_TYPE
 53

	)

215 
	#DHCP_OPTION_MESSAGE_TYPE_LEN
 1

	)

217 
	#DHCP_OPTION_SERVER_ID
 54

	)

218 
	#DHCP_OPTION_PARAMETER_REQUEST_LIST
 55

	)

220 
	#DHCP_OPTION_MAX_MSG_SIZE
 57

	)

221 
	#DHCP_OPTION_MAX_MSG_SIZE_LEN
 2

	)

223 
	#DHCP_OPTION_T1
 58

	)

224 
	#DHCP_OPTION_T2
 59

	)

225 
	#DHCP_OPTION_US
 60

	)

226 
	#DHCP_OPTION_CLIENT_ID
 61

	)

227 
	#DHCP_OPTION_TFTP_SERVERNAME
 66

	)

228 
	#DHCP_OPTION_BOOTFILE
 67

	)

231 
	#DHCP_OVERLOAD_NONE
 0

	)

232 
	#DHCP_OVERLOAD_FILE
 1

	)

233 
	#DHCP_OVERLOAD_SNAME
 2

	)

234 
	#DHCP_OVERLOAD_SNAME_FILE
 3

	)

236 #ifde‡
__˝lu•lus


	@include/lwip/dns.h

34 #i‚de‡
__LWIP_DNS_H__


35 
	#__LWIP_DNS_H__


	)

37 
	~"lwù/›t.h
"

39 #i‡
LWIP_DNS


41 #ifde‡
__˝lu•lus


46 
	#DNS_TMR_INTERVAL
 1000

	)

49 
	#DNS_RRTYPE_A
 1

	)

50 
	#DNS_RRTYPE_NS
 2

	)

51 
	#DNS_RRTYPE_MD
 3

	)

52 
	#DNS_RRTYPE_MF
 4

	)

53 
	#DNS_RRTYPE_CNAME
 5

	)

54 
	#DNS_RRTYPE_SOA
 6

	)

55 
	#DNS_RRTYPE_MB
 7

	)

56 
	#DNS_RRTYPE_MG
 8

	)

57 
	#DNS_RRTYPE_MR
 9

	)

58 
	#DNS_RRTYPE_NULL
 10

	)

59 
	#DNS_RRTYPE_WKS
 11

	)

60 
	#DNS_RRTYPE_PTR
 12

	)

61 
	#DNS_RRTYPE_HINFO
 13

	)

62 
	#DNS_RRTYPE_MINFO
 14

	)

63 
	#DNS_RRTYPE_MX
 15

	)

64 
	#DNS_RRTYPE_TXT
 16

	)

67 
	#DNS_RRCLASS_IN
 1

	)

68 
	#DNS_RRCLASS_CS
 2

	)

69 
	#DNS_RRCLASS_CH
 3

	)

70 
	#DNS_RRCLASS_HS
 4

	)

71 
	#DNS_RRCLASS_FLUSH
 0x800

	)

78 
	#NETDB_ELEM_SIZE
 (32 + 16 + 
DNS_MAX_NAME_LENGTH
 + 1)

	)

80 #i‡
DNS_LOCAL_HOSTLIST


82 
	sloˇl_ho°li°_íåy
 {

84 c⁄° *
«me
;

86 
ù_addr_t
 
addr
;

87 
loˇl_ho°li°_íåy
 *
√xt
;

89 #i‡
DNS_LOCAL_HOSTLIST_IS_DYNAMIC


90 #i‚de‡
DNS_LOCAL_HOSTLIST_MAX_NAMELEN


91 
	#DNS_LOCAL_HOSTLIST_MAX_NAMELEN
 
DNS_MAX_NAME_LENGTH


	)

93 
	#LOCALHOSTLIST_ELEM_SIZE
 (((
loˇl_ho°li°_íåy
Ë+ 
DNS_LOCAL_HOSTLIST_MAX_NAMELEN
 + 1))

	)

104 (*
dns_found_ˇŒback
)(c⁄° *
	t«me
, 
	tù_addr_t
 *
	tùaddr
, *
	tˇŒback_¨g
);

106 
dns_öô
();

107 
dns_tmr
();

108 
dns_£t£rvî
(
u8_t
 
numdns
, 
ù_addr_t
 *
dns£rvî
);

109 
ù_addr_t
 
dns_gë£rvî
(
u8_t
 
numdns
);

110 
îr_t
 
dns_gëho°by«me
(c⁄° *
ho°«me
, 
ù_addr_t
 *
addr
,

111 
dns_found_ˇŒback
 
found
, *
ˇŒback_¨g
);

113 #i‡
DNS_LOCAL_HOSTLIST
 && 
DNS_LOCAL_HOSTLIST_IS_DYNAMIC


114 
dns_loˇl_ªmoveho°
(c⁄° *
ho°«me
, c⁄° 
ù_addr_t
 *
addr
);

115 
îr_t
 
dns_loˇl_addho°
(c⁄° *
ho°«me
, c⁄° 
ù_addr_t
 *
addr
);

118 #ifde‡
__˝lu•lus


	@include/lwip/err.h

32 #i‚de‡
__LWIP_ERR_H__


33 
	#__LWIP_ERR_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/¨ch.h
"

38 #ifde‡
__˝lu•lus


44 #ifde‡
LWIP_ERR_T


45 
LWIP_ERR_T
 
	tîr_t
;

47 
s8_t
 
	tîr_t
;

52 
	#ERR_OK
 0

	)

53 
	#ERR_MEM
 -1

	)

54 
	#ERR_BUF
 -2

	)

55 
	#ERR_TIMEOUT
 -3

	)

56 
	#ERR_RTE
 -4

	)

57 
	#ERR_INPROGRESS
 -5

	)

58 
	#ERR_VAL
 -6

	)

59 
	#ERR_WOULDBLOCK
 -7

	)

60 
	#ERR_USE
 -8

	)

61 
	#ERR_ISCONN
 -9

	)

63 
	#ERR_IS_FATAL
(
e
Ë(”Ë< 
ERR_ISCONN
)

	)

65 
	#ERR_ABRT
 -10

	)

66 
	#ERR_RST
 -11

	)

67 
	#ERR_CLSD
 -12

	)

68 
	#ERR_CONN
 -13

	)

70 
	#ERR_ARG
 -14

	)

72 
	#ERR_IF
 -15

	)

75 #ifde‡
LWIP_DEBUG


76 c⁄° *
lwù_°ªº
(
îr_t
 
îr
);

78 
	#lwù_°ªº
(
x
Ë""

	)

81 #ifde‡
__˝lu•lus


	@include/lwip/init.h

32 #i‚de‡
__LWIP_INIT_H__


33 
	#__LWIP_INIT_H__


	)

35 
	~"lwù/›t.h
"

37 #ifde‡
__˝lu•lus


42 
	#LWIP_VERSION_MAJOR
 1U

	)

44 
	#LWIP_VERSION_MINOR
 4U

	)

46 
	#LWIP_VERSION_REVISION
 0U

	)

50 
	#LWIP_VERSION_RC
 255U

	)

53 
	#LWIP_RC_RELEASE
 255U

	)

55 
	#LWIP_RC_DEVELOPMENT
 0U

	)

57 
	#LWIP_VERSION_IS_RELEASE
 (
LWIP_VERSION_RC
 =
LWIP_RC_RELEASE
)

	)

58 
	#LWIP_VERSION_IS_DEVELOPMENT
 (
LWIP_VERSION_RC
 =
LWIP_RC_DEVELOPMENT
)

	)

59 
	#LWIP_VERSION_IS_RC
 ((
LWIP_VERSION_RC
 !
LWIP_RC_RELEASE
Ë&& (LWIP_VERSION_RC !
LWIP_RC_DEVELOPMENT
))

	)

62 
	#LWIP_VERSION
 (
LWIP_VERSION_MAJOR
 << 24 | 
LWIP_VERSION_MINOR
 << 16 | \

63 
LWIP_VERSION_REVISION
 << 8 | 
LWIP_VERSION_RC
)

	)

66 
lwù_öô
();

68 #ifde‡
__˝lu•lus


	@include/lwip/mem.h

32 #i‚de‡
__LWIP_MEM_H__


33 
	#__LWIP_MEM_H__


	)

35 
	~"lwù/›t.h
"

37 #ifde‡
__˝lu•lus


41 #i‡
MEM_LIBC_MALLOC


43 
	~<°ddef.h
>

45 
size_t
 
	tmem_size_t
;

48 
	#mem_öô
()

	)

52 #i‚de‡
mem_‰ì


53 
	#mem_‰ì
 
‰ì


	)

55 #i‚de‡
mem_mÆloc


56 
	#mem_mÆloc
 
mÆloc


	)

58 #i‚de‡
mem_ˇŒoc


59 
	#mem_ˇŒoc
 
ˇŒoc


	)

63 #i‚de‡
mem_åim


64 
	#mem_åim
(
mem
, 
size
Ë(mem)

	)

71 #i‡
MEM_SIZE
 > 64000L

72 
u32_t
 
	tmem_size_t
;

73 
	#MEM_SIZE_F
 
U32_F


	)

75 
u16_t
 
	tmem_size_t
;

76 
	#MEM_SIZE_F
 
U16_F


	)

79 #i‡
MEM_USE_POOLS


81 
	#mem_öô
()

	)

84 
	#mem_åim
(
mem
, 
size
Ë(mem)

	)

87 
mem_öô
();

88 *
mem_åim
(*
mem
, 
mem_size_t
 
size
);

90 *
mem_mÆloc
(
mem_size_t
 
size
);

91 *
mem_ˇŒoc
(
mem_size_t
 
cou¡
, mem_size_à
size
);

92 
mem_‰ì
(*
mem
);

99 #i‚de‡
LWIP_MEM_ALIGN_SIZE


100 
	#LWIP_MEM_ALIGN_SIZE
(
size
Ë(((sizeË+ 
MEM_ALIGNMENT
 - 1Ë& ~(MEM_ALIGNMENT-1))

	)

107 #i‚de‡
LWIP_MEM_ALIGN_BUFFER


108 
	#LWIP_MEM_ALIGN_BUFFER
(
size
Ë(((sizeË+ 
MEM_ALIGNMENT
 - 1))

	)

114 #i‚de‡
LWIP_MEM_ALIGN


115 
	#LWIP_MEM_ALIGN
(
addr
Ë((*)(((
mem_±r_t
)◊ddrË+ 
MEM_ALIGNMENT
 - 1Ë& ~(mem_±r_t)(MEM_ALIGNMENT-1)))

	)

118 #ifde‡
__˝lu•lus


	@include/lwip/memp.h

33 #i‚de‡
__LWIP_MEMP_H__


34 
	#__LWIP_MEMP_H__


	)

36 
	~"lwù/›t.h
"

38 #ifde‡
__˝lu•lus


44 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë
MEMP_
##«me,

	)

45 
	~"lwù/memp_°d.h
"

46 
MEMP_MAX


47 } 
	tmemp_t
;

49 #i‡
MEM_USE_POOLS


54 
MEMP_POOL_HELPER_FIRST
 = ((
u8_t
)

55 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
)

	)

56 
	#LWIP_MALLOC_MEMPOOL_START
 1

	)

57 
	#LWIP_MALLOC_MEMPOOL
(
num
, 
size
Ë* 
MEMP_POOL_
##sizê+ 0

	)

58 
	#LWIP_MALLOC_MEMPOOL_END


	)

59 
	~"lwù/memp_°d.h
"

63 
MEMP_POOL_HELPER_LAST
 = ((
u8_t
)

64 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
)

	)

65 
	#LWIP_MALLOC_MEMPOOL_START


	)

66 
	#LWIP_MALLOC_MEMPOOL
(
num
, 
size
Ë0 + 
MEMP_POOL_
##sizê*

	)

67 
	#LWIP_MALLOC_MEMPOOL_END
 1

	)

68 
	~"lwù/memp_°d.h
"

70 } 
	tmemp_poﬁ_hñ≥r_t
;

74 
	#MEMP_POOL_FIRST
 ((
memp_t
Ë
MEMP_POOL_HELPER_FIRST
)

	)

75 
	#MEMP_POOL_LAST
 ((
memp_t
Ë
MEMP_POOL_HELPER_LAST
)

	)

78 #i‡
MEMP_MEM_MALLOC
 || 
MEM_USE_POOLS


79 c⁄° 
u16_t
 
memp_sizes
[
MEMP_MAX
];

82 #i‡
MEMP_MEM_MALLOC


84 
	~"mem.h
"

86 
	#memp_öô
()

	)

87 
	#memp_mÆloc
(
ty≥
Ë
	`mem_mÆloc
(
memp_sizes
[ty≥])

	)

88 
	#memp_‰ì
(
ty≥
, 
mem
Ë
	`mem_‰ì
(mem)

	)

92 #i‡
MEM_USE_POOLS


94 
	smemp_mÆloc_hñ≥r


96 
memp_t
 
	gpoﬁƒ
;

100 
memp_öô
();

102 #i‡
MEMP_OVERFLOW_CHECK


103 *
memp_mÆloc_‚
(
memp_t
 
ty≥
, c⁄° * 
fûe
, c⁄° 
löe
);

104 
	#memp_mÆloc
(
t
Ë
	`memp_mÆloc_‚
(—), 
__FILE__
, 
__LINE__
)

	)

106 *
memp_mÆloc
(
memp_t
 
ty≥
);

108 
memp_‰ì
(
memp_t
 
ty≥
, *
mem
);

112 #ifde‡
__˝lu•lus


	@include/lwip/memp_std.h

12 #i‚de‡
LWIP_MALLOC_MEMPOOL


15 
	#LWIP_MALLOC_MEMPOOL
(
num
, 
size
Ë
	`LWIP_MEMPOOL
(
POOL_
##size,Çum, (sizê+ (
memp_mÆloc_hñ≥r
)), "MALLOC_"#size)

	)

16 
	#LWIP_MALLOC_MEMPOOL_START


	)

17 
	#LWIP_MALLOC_MEMPOOL_END


	)

20 #i‚de‡
LWIP_PBUF_MEMPOOL


23 
	#LWIP_PBUF_MEMPOOL
(
«me
, 
num
, 
∑ylﬂd
, 
desc
Ë
	`LWIP_MEMPOOL
“ame,Çum, (
	`MEMP_ALIGN_SIZE
((
pbuf
)Ë+ MEMP_ALIGN_SIZE’aylﬂd)), desc)

	)

33 #i‡
LWIP_RAW


34 
LWIP_MEMPOOL
(
RAW_PCB
, 
MEMP_NUM_RAW_PCB
, (
øw_pcb
), "RAW_PCB")

37 #i‡
LWIP_UDP


38 
LWIP_MEMPOOL
(
UDP_PCB
, 
MEMP_NUM_UDP_PCB
, (
udp_pcb
), "UDP_PCB")

41 #i‡
LWIP_TCP


42 
LWIP_MEMPOOL
(
TCP_PCB
, 
MEMP_NUM_TCP_PCB
, (
t˝_pcb
), "TCP_PCB")

43 
LWIP_MEMPOOL
(
TCP_PCB_LISTEN
, 
MEMP_NUM_TCP_PCB_LISTEN
, (
t˝_pcb_li°í
), "TCP_PCB_LISTEN")

44 
LWIP_MEMPOOL
(
TCP_SEG
, 
MEMP_NUM_TCP_SEG
, (
t˝_£g
), "TCP_SEG")

47 #i‡
IP_REASSEMBLY


48 
LWIP_MEMPOOL
(
REASSDATA
, 
MEMP_NUM_REASSDATA
, (
ù_ªassd©a
), "REASSDATA")

50 #i‡
IP_FRAG
 && !
IP_FRAG_USES_STATIC_BUF
 && !
LWIP_NETIF_TX_SINGLE_PBUF


51 
LWIP_MEMPOOL
(
FRAG_PBUF
, 
MEMP_NUM_FRAG_PBUF
, (
pbuf_cu°om_ªf
),"FRAG_PBUF")

54 #i‡
LWIP_NETCONN


55 
LWIP_MEMPOOL
(
NETBUF
, 
MEMP_NUM_NETBUF
, (
√tbuf
), "NETBUF")

56 
LWIP_MEMPOOL
(
NETCONN
, 
MEMP_NUM_NETCONN
, (
√tc⁄n
), "NETCONN")

59 #i‡
NO_SYS
==0

60 
LWIP_MEMPOOL
(
TCPIP_MSG_API
, 
MEMP_NUM_TCPIP_MSG_API
, (
t˝ù_msg
), "TCPIP_MSG_API")

61 #i‡!
LWIP_TCPIP_CORE_LOCKING_INPUT


62 
LWIP_MEMPOOL
(
TCPIP_MSG_INPKT
,
MEMP_NUM_TCPIP_MSG_INPKT
, (
t˝ù_msg
), "TCPIP_MSG_INPKT")

66 #i‡
ARP_QUEUEING


67 
LWIP_MEMPOOL
(
ARP_QUEUE
, 
MEMP_NUM_ARP_QUEUE
, (
ëh¨p_q_íåy
), "ARP_QUEUE")

70 #i‡
LWIP_IGMP


71 
LWIP_MEMPOOL
(
IGMP_GROUP
, 
MEMP_NUM_IGMP_GROUP
, (
igmp_group
), "IGMP_GROUP")

74 #i‡(!
NO_SYS
 || (NO_SYS && !
NO_SYS_NO_TIMERS
))

75 
LWIP_MEMPOOL
(
SYS_TIMEOUT
, 
MEMP_NUM_SYS_TIMEOUT
, (
sys_timeo
), "SYS_TIMEOUT")

78 #i‡
LWIP_SNMP


79 
LWIP_MEMPOOL
(
SNMP_ROOTNODE
, 
MEMP_NUM_SNMP_ROOTNODE
, (
mib_li°_roŸnode
), "SNMP_ROOTNODE")

80 
LWIP_MEMPOOL
(
SNMP_NODE
, 
MEMP_NUM_SNMP_NODE
, (
mib_li°_node
), "SNMP_NODE")

81 
LWIP_MEMPOOL
(
SNMP_VARBIND
, 
MEMP_NUM_SNMP_VARBIND
, (
¢mp_v¨böd
), "SNMP_VARBIND")

82 
LWIP_MEMPOOL
(
SNMP_VALUE
, 
MEMP_NUM_SNMP_VALUE
, 
SNMP_MAX_VALUE_SIZE
, "SNMP_VALUE")

84 #i‡
LWIP_DNS
 && 
LWIP_SOCKET


85 
LWIP_MEMPOOL
(
NETDB
, 
MEMP_NUM_NETDB
, 
NETDB_ELEM_SIZE
, "NETDB")

87 #i‡
LWIP_DNS
 && 
DNS_LOCAL_HOSTLIST
 && 
DNS_LOCAL_HOSTLIST_IS_DYNAMIC


88 
LWIP_MEMPOOL
(
LOCALHOSTLIST
, 
MEMP_NUM_LOCALHOSTLIST
, 
LOCALHOSTLIST_ELEM_SIZE
, "LOCALHOSTLIST")

90 #i‡
PPP_SUPPORT
 && 
PPPOE_SUPPORT


91 
LWIP_MEMPOOL
(
PPPOE_IF
, 
MEMP_NUM_PPPOE_INTERFACES
, (
µp€_so·c
), "PPPOE_IF")

102 
LWIP_PBUF_MEMPOOL
(
PBUF
, 
MEMP_NUM_PBUF
, 0, "PBUF_REF/ROM")

103 
LWIP_PBUF_MEMPOOL
(
PBUF_POOL
, 
PBUF_POOL_SIZE
, 
PBUF_POOL_BUFSIZE
, "PBUF_POOL")

110 #i‡
MEMP_USE_CUSTOM_POOLS


111 
	~"lwùpoﬁs.h
"

118 #unde‡
LWIP_MEMPOOL


119 #unde‡
LWIP_MALLOC_MEMPOOL


120 #unde‡
LWIP_MALLOC_MEMPOOL_START


121 #unde‡
LWIP_MALLOC_MEMPOOL_END


122 #unde‡
LWIP_PBUF_MEMPOOL


	@include/lwip/netbuf.h

32 #i‚de‡
__LWIP_NETBUF_H__


33 
	#__LWIP_NETBUF_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/pbuf.h
"

37 
	~"lwù/ù_addr.h
"

39 #ifde‡
__˝lu•lus


44 
	#NETBUF_FLAG_DESTADDR
 0x01

	)

46 
	#NETBUF_FLAG_CHKSUM
 0x02

	)

48 
	s√tbuf
 {

49 
pbuf
 *
p
, *
±r
;

50 
ù_addr_t
 
addr
;

51 
u16_t
 
p‹t
;

52 #i‡
LWIP_NETBUF_RECVINFO
 || 
LWIP_CHECKSUM_ON_COPY


53 #i‡
LWIP_CHECKSUM_ON_COPY


54 
u8_t
 
Êags
;

56 
u16_t
 
t›‹t_chksum
;

57 #i‡
LWIP_NETBUF_RECVINFO


58 
ù_addr_t
 
tﬂddr
;

64 
√tbuf
 * 
√tbuf_√w
 ();

65 
√tbuf_dñëe
 (
√tbuf
 *
buf
);

66 * 
√tbuf_Æloc
 (
√tbuf
 *
buf
, 
u16_t
 
size
);

67 
√tbuf_‰ì
 (
√tbuf
 *
buf
);

68 
îr_t
 
√tbuf_ªf
 (
√tbuf
 *
buf
,

69 c⁄° *
d©≠å
, 
u16_t
 
size
);

70 
√tbuf_chaö
 (
√tbuf
 *
hód
,

71 
√tbuf
 *
èû
);

73 
îr_t
 
√tbuf_d©a
 (
√tbuf
 *
buf
,

74 **
d©≠å
, 
u16_t
 *
Àn
);

75 
s8_t
 
√tbuf_√xt
 (
√tbuf
 *
buf
);

76 
√tbuf_fú°
 (
√tbuf
 *
buf
);

79 
	#√tbuf_c›y_∑πül
(
buf
, 
d©≠å
, 
Àn
, 
off£t
) \

80 
	`pbuf_c›y_∑πül
((
buf
)->
p
, (
d©≠å
), (
Àn
), (
off£t
))

	)

81 
	#√tbuf_c›y
(
buf
,
d©≠å
,
Àn
Ë
	`√tbuf_c›y_∑πül
(buf, d©≠å,Üí, 0)

	)

82 
	#√tbuf_èke
(
buf
, 
d©≠å
, 
Àn
Ë
	`pbuf_èke
((buf)->
p
, d©≠å,Üí)

	)

83 
	#√tbuf_Àn
(
buf
Ë((buf)->
p
->
tŸ_Àn
)

	)

84 
	#√tbuf_‰omaddr
(
buf
Ë(&((buf)->
addr
))

	)

85 
	#√tbuf_£t_‰omaddr
(
buf
, 
‰omaddr
Ë
	`ù_addr_£t
((&(buf)->
addr
), fromaddr)

	)

86 
	#√tbuf_‰omp‹t
(
buf
Ë((buf)->
p‹t
)

	)

87 #i‡
LWIP_NETBUF_RECVINFO


88 
	#√tbuf_de°addr
(
buf
Ë(&((buf)->
tﬂddr
))

	)

89 
	#√tbuf_£t_de°addr
(
buf
, 
de°addr
Ë
	`ù_addr_£t
((&(buf)->
addr
), de°addr)

	)

90 
	#√tbuf_de°p‹t
(
buf
Ë(((buf)->
Êags
 & 
NETBUF_FLAG_DESTADDR
Ë? (buf)->
t›‹t_chksum
 : 0)

	)

92 #i‡
LWIP_CHECKSUM_ON_COPY


93 
	#√tbuf_£t_chksum
(
buf
, 
chksum
Ëdÿ{ (buf)->
Êags
 = 
NETBUF_FLAG_CHKSUM
; \

94 (
buf
)->
t›‹t_chksum
 = 
chksum
; } 0)

	)

97 #ifde‡
__˝lu•lus


	@include/lwip/netdb.h

29 #i‚de‡
__LWIP_NETDB_H__


30 
	#__LWIP_NETDB_H__


	)

32 
	~"lwù/›t.h
"

34 #i‡
LWIP_DNS
 && 
LWIP_SOCKET


36 
	~<°ddef.h
>

38 
	~"lwù/öë.h
"

39 
	~"lwù/sockës.h
"

41 #ifde‡
__˝lu•lus


46 #i‚de‡
LWIP_DNS_API_DECLARE_H_ERRNO


47 
	#LWIP_DNS_API_DECLARE_H_ERRNO
 1

	)

50 #i‚de‡
LWIP_DNS_API_DEFINE_ERRORS


51 
	#LWIP_DNS_API_DEFINE_ERRORS
 1

	)

54 #i‚de‡
LWIP_DNS_API_DECLARE_STRUCTS


55 
	#LWIP_DNS_API_DECLARE_STRUCTS
 1

	)

58 #i‡
LWIP_DNS_API_DEFINE_ERRORS


60 
	#EAI_NONAME
 200

	)

61 
	#EAI_SERVICE
 201

	)

62 
	#EAI_FAIL
 202

	)

63 
	#EAI_MEMORY
 203

	)

65 
	#HOST_NOT_FOUND
 210

	)

66 
	#NO_DATA
 211

	)

67 
	#NO_RECOVERY
 212

	)

68 
	#TRY_AGAIN
 213

	)

71 #i‡
LWIP_DNS_API_DECLARE_STRUCTS


72 
	sho°ít
 {

73 *
h_«me
;

74 **
h_Æü£s
;

76 
h_addπy≥
;

77 
h_Àngth
;

78 **
h_addr_li°
;

80 
	#h_addr
 
h_addr_li°
[0]

	)

83 
	saddröfo
 {

84 
	mai_Êags
;

85 
	mai_Ámûy
;

86 
	mai_sockty≥
;

87 
	mai_¥Ÿocﬁ
;

88 
sockÀn_t
 
	mai_addæí
;

89 
sockaddr
 *
	mai_addr
;

90 *
	mai_ˇn⁄«me
;

91 
addröfo
 *
	mai_√xt
;

95 #i‡
LWIP_DNS_API_DECLARE_H_ERRNO


97 
h_î∫o
;

100 
ho°ít
 *
lwù_gëho°by«me
(c⁄° *
«me
);

101 
lwù_gëho°by«me_r
(c⁄° *
«me
, 
ho°ít
 *
ªt
, *
buf
,

102 
size_t
 
buÊí
, 
ho°ít
 **
ªsu…
, *
h_î∫›
);

103 
lwù_‰ìaddröfo
(
addröfo
 *
ai
);

104 
lwù_gëaddröfo
(c⁄° *
nodíame
,

105 c⁄° *
£rv«me
,

106 c⁄° 
addröfo
 *
höts
,

107 
addröfo
 **
ªs
);

109 #i‡
LWIP_COMPAT_SOCKETS


110 
	#gëho°by«me
(
«me
Ë
	`lwù_gëho°by«me
“ame)

	)

111 
	#gëho°by«me_r
(
«me
, 
ªt
, 
buf
, 
buÊí
, 
ªsu…
, 
h_î∫›
) \

112 
	`lwù_gëho°by«me_r
(
«me
, 
ªt
, 
buf
, 
buÊí
, 
ªsu…
, 
h_î∫›
)

	)

113 
	#‰ìaddröfo
(
addröfo
Ë
	`lwù_‰ìaddröfo
◊ddröfo)

	)

114 
	#gëaddröfo
(
nod«me
, 
£rv«me
, 
höts
, 
ªs
) \

115 
	`lwù_gëaddröfo
(
nod«me
, 
£rv«me
, 
höts
, 
ªs
)

	)

118 #ifde‡
__˝lu•lus


	@include/lwip/netif.h

32 #i‚de‡
__LWIP_NETIF_H__


33 
	#__LWIP_NETIF_H__


	)

35 
	~"lwù/›t.h
"

37 
	#ENABLE_LOOPBACK
 (
LWIP_NETIF_LOOPBACK
 || 
LWIP_HAVE_LOOPIF
)

	)

39 
	~"lwù/îr.h
"

41 
	~"lwù/ù_addr.h
"

43 
	~"lwù/def.h
"

44 
	~"lwù/pbuf.h
"

45 #i‡
LWIP_DHCP


46 
	gdh˝
;

48 #i‡
LWIP_AUTOIP


49 
	gautoù
;

52 #ifde‡
__˝lu•lus


61 
	#NETIF_MAX_HWADDR_LEN
 6U

	)

69 
	#NETIF_FLAG_UP
 0x01U

	)

72 
	#NETIF_FLAG_BROADCAST
 0x02U

	)

75 
	#NETIF_FLAG_POINTTOPOINT
 0x04U

	)

78 
	#NETIF_FLAG_DHCP
 0x08U

	)

84 
	#NETIF_FLAG_LINK_UP
 0x10U

	)

88 
	#NETIF_FLAG_ETHARP
 0x20U

	)

92 
	#NETIF_FLAG_ETHERNET
 0x40U

	)

95 
	#NETIF_FLAG_IGMP
 0x80U

	)

102 
îr_t
 (*
	t√tif_öô_‚
)(
	t√tif
 *netif);

109 
îr_t
 (*
	t√tif_öput_‚
)(
	tpbuf
 *
	tp
, 
	t√tif
 *
	töp
);

118 
îr_t
 (*
	t√tif_ouçut_‚
)(
	t√tif
 *√tif, 
	tpbuf
 *
	tp
,

119 
	tù_addr_t
 *
	tùaddr
);

126 
îr_t
 (*
	t√tif_lökouçut_‚
)(
	t√tif
 *√tif, 
	tpbuf
 *
	tp
);

128 (*
√tif_°©us_ˇŒback_‚
)(
	t√tif
 *netif);

130 
îr_t
 (*
	t√tif_igmp_mac_fûãr_‚
)(
	t√tif
 *netif,

131 
	tù_addr_t
 *
	tgroup
, 
	tu8_t
 
	ta˘i⁄
);

136 
	s√tif
 {

138 
√tif
 *
√xt
;

141 
ù_addr_t
 
ù_addr
;

142 
ù_addr_t
 
√tmask
;

143 
ù_addr_t
 
gw
;

147 
√tif_öput_‚
 
öput
;

151 
√tif_ouçut_‚
 
ouçut
;

155 
√tif_lökouçut_‚
 
lökouçut
;

156 #i‡
LWIP_NETIF_STATUS_CALLBACK


159 
√tif_°©us_ˇŒback_‚
 
°©us_ˇŒback
;

161 #i‡
LWIP_NETIF_LINK_CALLBACK


164 
√tif_°©us_ˇŒback_‚
 
lök_ˇŒback
;

168 *
°©e
;

169 #i‡
LWIP_DHCP


171 
dh˝
 *dhcp;

173 #i‡
LWIP_AUTOIP


175 
autoù
 *autoip;

177 #i‡
LWIP_NETIF_HOSTNAME


179 * 
ho°«me
;

182 
u16_t
 
mtu
;

184 
u8_t
 
hwaddr_Àn
;

186 
u8_t
 
hwaddr
[
NETIF_MAX_HWADDR_LEN
];

188 
u8_t
 
Êags
;

190 
«me
[2];

192 
u8_t
 
num
;

193 #i‡
LWIP_SNMP


195 
u8_t
 
lök_ty≥
;

197 
u32_t
 
lök_•ìd
;

199 
u32_t
 
ts
;

201 
u32_t
 
iföo˘ës
;

202 
u32_t
 
iföuˇ°pkts
;

203 
u32_t
 
ifönuˇ°pkts
;

204 
u32_t
 
ifödisˇrds
;

205 
u32_t
 
ifouto˘ës
;

206 
u32_t
 
ifoutuˇ°pkts
;

207 
u32_t
 
ifouäuˇ°pkts
;

208 
u32_t
 
ifoutdisˇrds
;

210 #i‡
LWIP_IGMP


213 
√tif_igmp_mac_fûãr_‚
 
igmp_mac_fûãr
;

215 #i‡
LWIP_NETIF_HWADDRHINT


216 
u8_t
 *
addr_höt
;

218 #i‡
ENABLE_LOOPBACK


220 
pbuf
 *
lo›_fú°
;

221 
pbuf
 *
lo›_œ°
;

222 #i‡
LWIP_LOOPBACK_MAX_PBUFS


223 
u16_t
 
lo›_˙t_cuºít
;

228 #i‡
LWIP_SNMP


229 
	#NETIF_INIT_SNMP
(
√tif
, 
ty≥
, 
•ìd
) \

231 (
√tif
)->
lök_ty≥
 = (
ty≥
); \

233 (
√tif
)->
lök_•ìd
 = (
•ìd
); \

234 (
√tif
)->
ts
 = 0; \

235 (
√tif
)->
iföo˘ës
 = 0; \

236 (
√tif
)->
iföuˇ°pkts
 = 0; \

237 (
√tif
)->
ifönuˇ°pkts
 = 0; \

238 (
√tif
)->
ifödisˇrds
 = 0; \

239 (
√tif
)->
ifouto˘ës
 = 0; \

240 (
√tif
)->
ifoutuˇ°pkts
 = 0; \

241 (
√tif
)->
ifouäuˇ°pkts
 = 0; \

242 (
√tif
)->
ifoutdisˇrds
 = 0

	)

244 
	#NETIF_INIT_SNMP
(
√tif
, 
ty≥
, 
•ìd
)

	)

249 
√tif
 *
√tif_li°
;

251 
√tif
 *
√tif_deÁu…
;

253 
√tif_öô
();

255 
√tif
 *
√tif_add
(√ti‡*√tif, 
ù_addr_t
 *
ùaddr
, ip_addr_à*
√tmask
,

256 
ù_addr_t
 *
gw
, *
°©e
, 
√tif_öô_‚
 
öô
, 
√tif_öput_‚
 
öput
);

259 
√tif_£t_addr
(
√tif
 *√tif, 
ù_addr_t
 *
ùaddr
, ip_addr_à*
√tmask
,

260 
ù_addr_t
 *
gw
);

261 
√tif_ªmove
(
√tif
 *Çetif);

267 
√tif
 *
√tif_föd
(*
«me
);

269 
√tif_£t_deÁu…
(
√tif
 *netif);

271 
√tif_£t_ùaddr
(
√tif
 *√tif, 
ù_addr_t
 *
ùaddr
);

272 
√tif_£t_√tmask
(
√tif
 *√tif, 
ù_addr_t
 *
√tmask
);

273 
√tif_£t_gw
(
√tif
 *√tif, 
ù_addr_t
 *
gw
);

275 
√tif_£t_up
(
√tif
 *netif);

276 
√tif_£t_down
(
√tif
 *netif);

278 
	#√tif_is_up
(
√tif
Ë((“ëif)->
Êags
 & 
NETIF_FLAG_UP
Ë? (
u8_t
)1 : (u8_t)0)

	)

280 #i‡
LWIP_NETIF_STATUS_CALLBACK


281 
√tif_£t_°©us_ˇŒback
(
√tif
 *√tif, 
√tif_°©us_ˇŒback_‚
 
°©us_ˇŒback
);

284 
√tif_£t_lök_up
(
√tif
 *netif);

285 
√tif_£t_lök_down
(
√tif
 *netif);

287 
	#√tif_is_lök_up
(
√tif
Ë((“ëif)->
Êags
 & 
NETIF_FLAG_LINK_UP
Ë? (
u8_t
)1 : (u8_t)0)

	)

289 #i‡
LWIP_NETIF_LINK_CALLBACK


290 
√tif_£t_lök_ˇŒback
(
√tif
 *√tif, 
√tif_°©us_ˇŒback_‚
 
lök_ˇŒback
);

293 #i‡
LWIP_NETIF_HOSTNAME


294 
	#√tif_£t_ho°«me
(
√tif
, 
«me
Ëdÿ{ if(“ëifË!
NULL
Ë{ (√tif)->
ho°«me
 =Çame; }}0)

	)

295 
	#√tif_gë_ho°«me
(
√tif
Ë((“ëifË!
NULL
Ë? (“ëif)->
ho°«me
Ë: NULL)

	)

298 #i‡
LWIP_IGMP


299 
	#√tif_£t_igmp_mac_fûãr
(
√tif
, 
fun˘i⁄
Ëdÿ{ if(“ëifË!
NULL
Ë{ (√tif)->
igmp_mac_fûãr
 = fun˘i⁄; }}0)

	)

300 
	#√tif_gë_igmp_mac_fûãr
(
√tif
Ë((“ëifË!
NULL
Ë? (“ëif)->
igmp_mac_fûãr
Ë: NULL)

	)

303 #i‡
ENABLE_LOOPBACK


304 
îr_t
 
√tif_lo›_ouçut
(
√tif
 *√tif, 
pbuf
 *
p
, 
ù_addr_t
 *
de°_ù
);

305 
√tif_pﬁl
(
√tif
 *netif);

306 #i‡!
LWIP_NETIF_LOOPBACK_MULTITHREADING


307 
√tif_pﬁl_Æl
();

311 #ifde‡
__˝lu•lus


	@include/lwip/netifapi.h

28 #i‚de‡
__LWIP_NETIFAPI_H__


29 
	#__LWIP_NETIFAPI_H__


	)

31 
	~"lwù/›t.h
"

33 #i‡
LWIP_NETIF_API


35 
	~"lwù/sys.h
"

36 
	~"lwù/√tif.h
"

37 
	~"lwù/dh˝.h
"

38 
	~"lwù/autoù.h
"

40 #ifde‡
__˝lu•lus


44 (*
√tiÁpi_void_‚
)(
	t√tif
 *netif);

45 
îr_t
 (*
	t√tiÁpi_îπ_‚
)(
	t√tif
 *netif);

47 
	s√tiÁpi_msg_msg
 {

48 #i‡!
LWIP_TCPIP_CORE_LOCKING


49 
sys_£m_t
 
£m
;

51 
îr_t
 
îr
;

52 
√tif
 *netif;

55 
ù_addr_t
 *
ùaddr
;

56 
ù_addr_t
 *
√tmask
;

57 
ù_addr_t
 *
gw
;

58 *
°©e
;

59 
√tif_öô_‚
 
öô
;

60 
√tif_öput_‚
 
öput
;

61 } 
add
;

63 
√tiÁpi_void_‚
 
voidfunc
;

64 
√tiÁpi_îπ_‚
 
îπfunc
;

65 } 
comm⁄
;

66 } 
msg
;

69 
	s√tiÁpi_msg
 {

70 (* 
fun˘i⁄
)(
√tiÁpi_msg_msg
 *
msg
);

71 
√tiÁpi_msg_msg
 
msg
;

76 
îr_t
 
√tiÁpi_√tif_add
 ( 
√tif
 *netif,

77 
ù_addr_t
 *
ùaddr
,

78 
ù_addr_t
 *
√tmask
,

79 
ù_addr_t
 *
gw
,

80 *
°©e
,

81 
√tif_öô_‚
 
öô
,

82 
√tif_öput_‚
 
öput
);

84 
îr_t
 
√tiÁpi_√tif_£t_addr
 ( 
√tif
 *netif,

85 
ù_addr_t
 *
ùaddr
,

86 
ù_addr_t
 *
√tmask
,

87 
ù_addr_t
 *
gw
 );

89 
îr_t
 
√tiÁpi_√tif_comm⁄
 ( 
√tif
 *netif,

90 
√tiÁpi_void_‚
 
voidfunc
,

91 
√tiÁpi_îπ_‚
 
îπfunc
);

93 
	#√tiÁpi_√tif_ªmove
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_ªmove
, 
NULL
)

	)

94 
	#√tiÁpi_√tif_£t_up
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_£t_up
, 
NULL
)

	)

95 
	#√tiÁpi_√tif_£t_down
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_£t_down
, 
NULL
)

	)

96 
	#√tiÁpi_√tif_£t_deÁu…
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_£t_deÁu…
, 
NULL
)

	)

97 
	#√tiÁpi_dh˝_°¨t
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
NULL
, 
dh˝_°¨t
)

	)

98 
	#√tiÁpi_dh˝_°›
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
dh˝_°›
, 
NULL
)

	)

99 
	#√tiÁpi_autoù_°¨t
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
NULL
, 
autoù_°¨t
)

	)

100 
	#√tiÁpi_autoù_°›
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
NULL
, 
autoù_°›
)

	)

102 #ifde‡
__˝lu•lus


	@include/lwip/opt.h

38 #i‚de‡
__LWIP_OPT_H__


39 
	#__LWIP_OPT_H__


	)

45 
	~"lwù›ts.h
"

46 
	~"lwù/debug.h
"

59 #i‚de‡
SYS_LIGHTWEIGHT_PROT


60 
	#SYS_LIGHTWEIGHT_PROT
 0

	)

67 #i‚de‡
NO_SYS


68 
	#NO_SYS
 0

	)

75 #i‚de‡
NO_SYS_NO_TIMERS


76 
	#NO_SYS_NO_TIMERS
 0

	)

83 #i‚de‡
MEMCPY


84 
	#MEMCPY
(
d°
,
§c
,
Àn
Ë
	`mem˝y
(d°,§c,Àn)

	)

91 #i‚de‡
SMEMCPY


92 
	#SMEMCPY
(
d°
,
§c
,
Àn
Ë
	`mem˝y
(d°,§c,Àn)

	)

105 #i‚de‡
MEM_LIBC_MALLOC


106 
	#MEM_LIBC_MALLOC
 0

	)

114 #i‚de‡
MEMP_MEM_MALLOC


115 
	#MEMP_MEM_MALLOC
 0

	)

123 #i‚de‡
MEM_ALIGNMENT


124 
	#MEM_ALIGNMENT
 1

	)

131 #i‚de‡
MEM_SIZE


132 
	#MEM_SIZE
 1600

	)

140 #i‚de‡
MEMP_SEPARATE_POOLS


141 
	#MEMP_SEPARATE_POOLS
 0

	)

153 #i‚de‡
MEMP_OVERFLOW_CHECK


154 
	#MEMP_OVERFLOW_CHECK
 0

	)

161 #i‚de‡
MEMP_SANITY_CHECK


162 
	#MEMP_SANITY_CHECK
 0

	)

171 #i‚de‡
MEM_USE_POOLS


172 
	#MEM_USE_POOLS
 0

	)

179 #i‚de‡
MEM_USE_POOLS_TRY_BIGGER_POOL


180 
	#MEM_USE_POOLS_TRY_BIGGER_POOL
 0

	)

189 #i‚de‡
MEMP_USE_CUSTOM_POOLS


190 
	#MEMP_USE_CUSTOM_POOLS
 0

	)

211 #i‚de‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


212 
	#LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
 0

	)

225 #i‚de‡
MEMP_NUM_PBUF


226 
	#MEMP_NUM_PBUF
 16

	)

233 #i‚de‡
MEMP_NUM_RAW_PCB


234 
	#MEMP_NUM_RAW_PCB
 4

	)

242 #i‚de‡
MEMP_NUM_UDP_PCB


243 
	#MEMP_NUM_UDP_PCB
 4

	)

250 #i‚de‡
MEMP_NUM_TCP_PCB


251 
	#MEMP_NUM_TCP_PCB
 5

	)

258 #i‚de‡
MEMP_NUM_TCP_PCB_LISTEN


259 
	#MEMP_NUM_TCP_PCB_LISTEN
 8

	)

266 #i‚de‡
MEMP_NUM_TCP_SEG


267 
	#MEMP_NUM_TCP_SEG
 16

	)

274 #i‚de‡
MEMP_NUM_REASSDATA


275 
	#MEMP_NUM_REASSDATA
 5

	)

285 #i‚de‡
MEMP_NUM_FRAG_PBUF


286 
	#MEMP_NUM_FRAG_PBUF
 15

	)

295 #i‚de‡
MEMP_NUM_ARP_QUEUE


296 
	#MEMP_NUM_ARP_QUEUE
 30

	)

305 #i‚de‡
MEMP_NUM_IGMP_GROUP


306 
	#MEMP_NUM_IGMP_GROUP
 8

	)

313 #i‚de‡
MEMP_NUM_SYS_TIMEOUT


314 
	#MEMP_NUM_SYS_TIMEOUT
 3

	)

321 #i‚de‡
MEMP_NUM_NETBUF


322 
	#MEMP_NUM_NETBUF
 2

	)

329 #i‚de‡
MEMP_NUM_NETCONN


330 
	#MEMP_NUM_NETCONN
 4

	)

338 #i‚de‡
MEMP_NUM_TCPIP_MSG_API


339 
	#MEMP_NUM_TCPIP_MSG_API
 8

	)

347 #i‚de‡
MEMP_NUM_TCPIP_MSG_INPKT


348 
	#MEMP_NUM_TCPIP_MSG_INPKT
 8

	)

354 #i‚de‡
MEMP_NUM_SNMP_NODE


355 
	#MEMP_NUM_SNMP_NODE
 50

	)

362 #i‚de‡
MEMP_NUM_SNMP_ROOTNODE


363 
	#MEMP_NUM_SNMP_ROOTNODE
 30

	)

371 #i‚de‡
MEMP_NUM_SNMP_VARBIND


372 
	#MEMP_NUM_SNMP_VARBIND
 2

	)

380 #i‚de‡
MEMP_NUM_SNMP_VALUE


381 
	#MEMP_NUM_SNMP_VALUE
 3

	)

388 #i‚de‡
MEMP_NUM_NETDB


389 
	#MEMP_NUM_NETDB
 1

	)

396 #i‚de‡
MEMP_NUM_LOCALHOSTLIST


397 
	#MEMP_NUM_LOCALHOSTLIST
 1

	)

404 #i‚de‡
MEMP_NUM_PPPOE_INTERFACES


405 
	#MEMP_NUM_PPPOE_INTERFACES
 1

	)

411 #i‚de‡
PBUF_POOL_SIZE


412 
	#PBUF_POOL_SIZE
 16

	)

423 #i‚de‡
LWIP_ARP


424 
	#LWIP_ARP
 1

	)

430 #i‚de‡
ARP_TABLE_SIZE


431 
	#ARP_TABLE_SIZE
 10

	)

441 #i‚de‡
ARP_QUEUEING


442 
	#ARP_QUEUEING
 0

	)

455 #i‚de‡
ETHARP_TRUST_IP_MAC


456 
	#ETHARP_TRUST_IP_MAC
 0

	)

465 #i‚de‡
ETHARP_SUPPORT_VLAN


466 
	#ETHARP_SUPPORT_VLAN
 0

	)

472 #i‚de‡
LWIP_ETHERNET


473 
	#LWIP_ETHERNET
 (
LWIP_ARP
 || 
PPPOE_SUPPORT
)

	)

481 #i‚de‡
ETH_PAD_SIZE


482 
	#ETH_PAD_SIZE
 0

	)

488 #i‚de‡
ETHARP_SUPPORT_STATIC_ENTRIES


489 
	#ETHARP_SUPPORT_STATIC_ENTRIES
 0

	)

503 #i‚de‡
IP_FORWARD


504 
	#IP_FORWARD
 0

	)

512 #i‚de‡
IP_OPTIONS_ALLOWED


513 
	#IP_OPTIONS_ALLOWED
 1

	)

521 #i‚de‡
IP_REASSEMBLY


522 
	#IP_REASSEMBLY
 1

	)

530 #i‚de‡
IP_FRAG


531 
	#IP_FRAG
 1

	)

539 #i‚de‡
IP_REASS_MAXAGE


540 
	#IP_REASS_MAXAGE
 3

	)

549 #i‚de‡
IP_REASS_MAX_PBUFS


550 
	#IP_REASS_MAX_PBUFS
 10

	)

560 #i‚de‡
IP_FRAG_USES_STATIC_BUF


561 
	#IP_FRAG_USES_STATIC_BUF
 0

	)

568 #i‡
IP_FRAG_USES_STATIC_BUF
 && !
deföed
(
IP_FRAG_MAX_MTU
)

569 
	#IP_FRAG_MAX_MTU
 1500

	)

575 #i‚de‡
IP_DEFAULT_TTL


576 
	#IP_DEFAULT_TTL
 255

	)

584 #i‚de‡
IP_SOF_BROADCAST


585 
	#IP_SOF_BROADCAST
 0

	)

592 #i‚de‡
IP_SOF_BROADCAST_RECV


593 
	#IP_SOF_BROADCAST_RECV
 0

	)

605 #i‚de‡
LWIP_ICMP


606 
	#LWIP_ICMP
 1

	)

612 #i‚de‡
ICMP_TTL


613 
	#ICMP_TTL
 (
IP_DEFAULT_TTL
)

	)

619 #i‚de‡
LWIP_BROADCAST_PING


620 
	#LWIP_BROADCAST_PING
 0

	)

626 #i‚de‡
LWIP_MULTICAST_PING


627 
	#LWIP_MULTICAST_PING
 0

	)

638 #i‚de‡
LWIP_RAW


639 
	#LWIP_RAW
 1

	)

645 #i‚de‡
RAW_TTL


646 
	#RAW_TTL
 (
IP_DEFAULT_TTL
)

	)

657 #i‚de‡
LWIP_DHCP


658 
	#LWIP_DHCP
 0

	)

664 #i‚de‡
DHCP_DOES_ARP_CHECK


665 
	#DHCP_DOES_ARP_CHECK
 ((
LWIP_DHCP
Ë&& (
LWIP_ARP
))

	)

676 #i‚de‡
LWIP_AUTOIP


677 
	#LWIP_AUTOIP
 0

	)

684 #i‚de‡
LWIP_DHCP_AUTOIP_COOP


685 
	#LWIP_DHCP_AUTOIP_COOP
 0

	)

695 #i‚de‡
LWIP_DHCP_AUTOIP_COOP_TRIES


696 
	#LWIP_DHCP_AUTOIP_COOP_TRIES
 9

	)

708 #i‚de‡
LWIP_SNMP


709 
	#LWIP_SNMP
 0

	)

717 #i‚de‡
SNMP_CONCURRENT_REQUESTS


718 
	#SNMP_CONCURRENT_REQUESTS
 1

	)

725 #i‚de‡
SNMP_TRAP_DESTINATIONS


726 
	#SNMP_TRAP_DESTINATIONS
 1

	)

734 #i‚de‡
SNMP_PRIVATE_MIB


735 
	#SNMP_PRIVATE_MIB
 0

	)

743 #i‚de‡
SNMP_SAFE_REQUESTS


744 
	#SNMP_SAFE_REQUESTS
 1

	)

751 #i‚de‡
SNMP_MAX_OCTET_STRING_LEN


752 
	#SNMP_MAX_OCTET_STRING_LEN
 127

	)

760 #i‚de‡
SNMP_MAX_TREE_DEPTH


761 
	#SNMP_MAX_TREE_DEPTH
 15

	)

768 #i‚de‡
SNMP_MAX_VALUE_SIZE


769 
	#SNMP_MAX_VALUE_SIZE
 
	`LWIP_MAX
((
SNMP_MAX_OCTET_STRING_LEN
)+1, (
s32_t
)*(
SNMP_MAX_TREE_DEPTH
))

	)

780 #i‚de‡
LWIP_IGMP


781 
	#LWIP_IGMP
 0

	)

793 #i‚de‡
LWIP_DNS


794 
	#LWIP_DNS
 0

	)

798 #i‚de‡
DNS_TABLE_SIZE


799 
	#DNS_TABLE_SIZE
 4

	)

803 #i‚de‡
DNS_MAX_NAME_LENGTH


804 
	#DNS_MAX_NAME_LENGTH
 256

	)

808 #i‚de‡
DNS_MAX_SERVERS


809 
	#DNS_MAX_SERVERS
 2

	)

813 #i‚de‡
DNS_DOES_NAME_CHECK


814 
	#DNS_DOES_NAME_CHECK
 1

	)

818 #i‚de‡
DNS_MSG_SIZE


819 
	#DNS_MSG_SIZE
 512

	)

832 #i‚de‡
DNS_LOCAL_HOSTLIST


833 
	#DNS_LOCAL_HOSTLIST
 0

	)

838 #i‚de‡
DNS_LOCAL_HOSTLIST_IS_DYNAMIC


839 
	#DNS_LOCAL_HOSTLIST_IS_DYNAMIC
 0

	)

850 #i‚de‡
LWIP_UDP


851 
	#LWIP_UDP
 1

	)

857 #i‚de‡
LWIP_UDPLITE


858 
	#LWIP_UDPLITE
 0

	)

864 #i‚de‡
UDP_TTL


865 
	#UDP_TTL
 (
IP_DEFAULT_TTL
)

	)

871 #i‚de‡
LWIP_NETBUF_RECVINFO


872 
	#LWIP_NETBUF_RECVINFO
 0

	)

883 #i‚de‡
LWIP_TCP


884 
	#LWIP_TCP
 1

	)

890 #i‚de‡
TCP_TTL


891 
	#TCP_TTL
 (
IP_DEFAULT_TTL
)

	)

898 #i‚de‡
TCP_WND


899 
	#TCP_WND
 (4 * 
TCP_MSS
)

	)

905 #i‚de‡
TCP_MAXRTX


906 
	#TCP_MAXRTX
 12

	)

912 #i‚de‡
TCP_SYNMAXRTX


913 
	#TCP_SYNMAXRTX
 6

	)

920 #i‚de‡
TCP_QUEUE_OOSEQ


921 
	#TCP_QUEUE_OOSEQ
 (
LWIP_TCP
)

	)

931 #i‚de‡
TCP_MSS


932 
	#TCP_MSS
 536

	)

943 #i‚de‡
TCP_CALCULATE_EFF_SEND_MSS


944 
	#TCP_CALCULATE_EFF_SEND_MSS
 1

	)

951 #i‚de‡
TCP_SND_BUF


952 
	#TCP_SND_BUF
 256

	)

959 #i‚de‡
TCP_SND_QUEUELEN


960 
	#TCP_SND_QUEUELEN
 ((4 * (
TCP_SND_BUF
Ë+ (
TCP_MSS
 - 1))/(TCP_MSS))

	)

968 #i‚de‡
TCP_SNDLOWAT


969 
	#TCP_SNDLOWAT
 ((
TCP_SND_BUF
)/2)

	)

977 #i‚de‡
TCP_SNDQUEUELOWAT


978 
	#TCP_SNDQUEUELOWAT
 ((
TCP_SND_QUEUELEN
)/2)

	)

984 #i‚de‡
TCP_LISTEN_BACKLOG


985 
	#TCP_LISTEN_BACKLOG
 0

	)

993 #i‚de‡
TCP_DEFAULT_LISTEN_BACKLOG


994 
	#TCP_DEFAULT_LISTEN_BACKLOG
 0xff

	)

1011 #i‚de‡
TCP_OVERSIZE


1012 
	#TCP_OVERSIZE
 
TCP_MSS


	)

1018 #i‚de‡
LWIP_TCP_TIMESTAMPS


1019 
	#LWIP_TCP_TIMESTAMPS
 0

	)

1026 #i‚de‡
TCP_WND_UPDATE_THRESHOLD


1027 
	#TCP_WND_UPDATE_THRESHOLD
 (
TCP_WND
 / 4)

	)

1037 #i‚de‡
LWIP_EVENT_API


1038 
	#LWIP_EVENT_API
 0

	)

1039 
	#LWIP_CALLBACK_API
 1

	)

1041 
	#LWIP_EVENT_API
 1

	)

1042 
	#LWIP_CALLBACK_API
 0

	)

1056 #i‚de‡
PBUF_LINK_HLEN


1057 
	#PBUF_LINK_HLEN
 (14 + 
ETH_PAD_SIZE
)

	)

1065 #i‚de‡
PBUF_POOL_BUFSIZE


1066 
	#PBUF_POOL_BUFSIZE
 
	`LWIP_MEM_ALIGN_SIZE
(
TCP_MSS
+40+
PBUF_LINK_HLEN
)

	)

1078 #i‚de‡
LWIP_NETIF_HOSTNAME


1079 
	#LWIP_NETIF_HOSTNAME
 0

	)

1085 #i‚de‡
LWIP_NETIF_API


1086 
	#LWIP_NETIF_API
 0

	)

1093 #i‚de‡
LWIP_NETIF_STATUS_CALLBACK


1094 
	#LWIP_NETIF_STATUS_CALLBACK
 0

	)

1101 #i‚de‡
LWIP_NETIF_LINK_CALLBACK


1102 
	#LWIP_NETIF_LINK_CALLBACK
 0

	)

1112 #i‚de‡
LWIP_NETIF_HWADDRHINT


1113 
	#LWIP_NETIF_HWADDRHINT
 0

	)

1120 #i‚de‡
LWIP_NETIF_LOOPBACK


1121 
	#LWIP_NETIF_LOOPBACK
 0

	)

1128 #i‚de‡
LWIP_LOOPBACK_MAX_PBUFS


1129 
	#LWIP_LOOPBACK_MAX_PBUFS
 0

	)

1145 #i‚de‡
LWIP_NETIF_LOOPBACK_MULTITHREADING


1146 
	#LWIP_NETIF_LOOPBACK_MULTITHREADING
 (!
NO_SYS
)

	)

1158 #i‚de‡
LWIP_NETIF_TX_SINGLE_PBUF


1159 
	#LWIP_NETIF_TX_SINGLE_PBUF
 0

	)

1170 #i‚de‡
LWIP_HAVE_LOOPIF


1171 
	#LWIP_HAVE_LOOPIF
 0

	)

1182 #i‚de‡
LWIP_HAVE_SLIPIF


1183 
	#LWIP_HAVE_SLIPIF
 0

	)

1194 #i‚de‡
TCPIP_THREAD_NAME


1195 
	#TCPIP_THREAD_NAME
 "t˝ù_thªad"

	)

1203 #i‚de‡
TCPIP_THREAD_STACKSIZE


1204 
	#TCPIP_THREAD_STACKSIZE
 0

	)

1212 #i‚de‡
TCPIP_THREAD_PRIO


1213 
	#TCPIP_THREAD_PRIO
 1

	)

1221 #i‚de‡
TCPIP_MBOX_SIZE


1222 
	#TCPIP_MBOX_SIZE
 0

	)

1228 #i‚de‡
SLIPIF_THREAD_NAME


1229 
	#SLIPIF_THREAD_NAME
 "¶ùif_lo›"

	)

1237 #i‚de‡
SLIPIF_THREAD_STACKSIZE


1238 
	#SLIPIF_THREAD_STACKSIZE
 0

	)

1246 #i‚de‡
SLIPIF_THREAD_PRIO


1247 
	#SLIPIF_THREAD_PRIO
 1

	)

1253 #i‚de‡
PPP_THREAD_NAME


1254 
	#PPP_THREAD_NAME
 "µpI≈utThªad"

	)

1262 #i‚de‡
PPP_THREAD_STACKSIZE


1263 
	#PPP_THREAD_STACKSIZE
 0

	)

1271 #i‚de‡
PPP_THREAD_PRIO


1272 
	#PPP_THREAD_PRIO
 1

	)

1278 #i‚de‡
DEFAULT_THREAD_NAME


1279 
	#DEFAULT_THREAD_NAME
 "lwIP"

	)

1287 #i‚de‡
DEFAULT_THREAD_STACKSIZE


1288 
	#DEFAULT_THREAD_STACKSIZE
 0

	)

1296 #i‚de‡
DEFAULT_THREAD_PRIO


1297 
	#DEFAULT_THREAD_PRIO
 1

	)

1305 #i‚de‡
DEFAULT_RAW_RECVMBOX_SIZE


1306 
	#DEFAULT_RAW_RECVMBOX_SIZE
 0

	)

1314 #i‚de‡
DEFAULT_UDP_RECVMBOX_SIZE


1315 
	#DEFAULT_UDP_RECVMBOX_SIZE
 0

	)

1323 #i‚de‡
DEFAULT_TCP_RECVMBOX_SIZE


1324 
	#DEFAULT_TCP_RECVMBOX_SIZE
 0

	)

1332 #i‚de‡
DEFAULT_ACCEPTMBOX_SIZE


1333 
	#DEFAULT_ACCEPTMBOX_SIZE
 0

	)

1345 #i‚de‡
LWIP_TCPIP_CORE_LOCKING


1346 
	#LWIP_TCPIP_CORE_LOCKING
 0

	)

1353 #i‚de‡
LWIP_TCPIP_CORE_LOCKING_INPUT


1354 
	#LWIP_TCPIP_CORE_LOCKING_INPUT
 0

	)

1360 #i‚de‡
LWIP_NETCONN


1361 
	#LWIP_NETCONN
 1

	)

1367 #i‚de‡
LWIP_TCPIP_TIMEOUT


1368 
	#LWIP_TCPIP_TIMEOUT
 1

	)

1379 #i‚de‡
LWIP_SOCKET


1380 
	#LWIP_SOCKET
 1

	)

1387 #i‚de‡
LWIP_COMPAT_SOCKETS


1388 
	#LWIP_COMPAT_SOCKETS
 1

	)

1396 #i‚de‡
LWIP_POSIX_SOCKETS_IO_NAMES


1397 
	#LWIP_POSIX_SOCKETS_IO_NAMES
 1

	)

1405 #i‚de‡
LWIP_TCP_KEEPALIVE


1406 
	#LWIP_TCP_KEEPALIVE
 0

	)

1412 #i‚de‡
LWIP_SO_RCVTIMEO


1413 
	#LWIP_SO_RCVTIMEO
 0

	)

1419 #i‚de‡
LWIP_SO_RCVBUF


1420 
	#LWIP_SO_RCVBUF
 0

	)

1426 #i‚de‡
RECV_BUFSIZE_DEFAULT


1427 
	#RECV_BUFSIZE_DEFAULT
 
INT_MAX


	)

1433 #i‚de‡
SO_REUSE


1434 
	#SO_REUSE
 0

	)

1442 #i‚de‡
SO_REUSE_RXTOALL


1443 
	#SO_REUSE_RXTOALL
 0

	)

1454 #i‚de‡
LWIP_STATS


1455 
	#LWIP_STATS
 1

	)

1458 #i‡
LWIP_STATS


1463 #i‚de‡
LWIP_STATS_DISPLAY


1464 
	#LWIP_STATS_DISPLAY
 0

	)

1470 #i‚de‡
LINK_STATS


1471 
	#LINK_STATS
 1

	)

1477 #i‚de‡
ETHARP_STATS


1478 
	#ETHARP_STATS
 (
LWIP_ARP
)

	)

1484 #i‚de‡
IP_STATS


1485 
	#IP_STATS
 1

	)

1492 #i‚de‡
IPFRAG_STATS


1493 
	#IPFRAG_STATS
 (
IP_REASSEMBLY
 || 
IP_FRAG
)

	)

1499 #i‚de‡
ICMP_STATS


1500 
	#ICMP_STATS
 1

	)

1506 #i‚de‡
IGMP_STATS


1507 
	#IGMP_STATS
 (
LWIP_IGMP
)

	)

1514 #i‚de‡
UDP_STATS


1515 
	#UDP_STATS
 (
LWIP_UDP
)

	)

1522 #i‚de‡
TCP_STATS


1523 
	#TCP_STATS
 (
LWIP_TCP
)

	)

1529 #i‚de‡
MEM_STATS


1530 
	#MEM_STATS
 ((
MEM_LIBC_MALLOC
 =0Ë&& (
MEM_USE_POOLS
 =0))

	)

1536 #i‚de‡
MEMP_STATS


1537 
	#MEMP_STATS
 (
MEMP_MEM_MALLOC
 =0)

	)

1543 #i‚de‡
SYS_STATS


1544 
	#SYS_STATS
 (
NO_SYS
 =0)

	)

1549 
	#LINK_STATS
 0

	)

1550 
	#IP_STATS
 0

	)

1551 
	#IPFRAG_STATS
 0

	)

1552 
	#ICMP_STATS
 0

	)

1553 
	#IGMP_STATS
 0

	)

1554 
	#UDP_STATS
 0

	)

1555 
	#TCP_STATS
 0

	)

1556 
	#MEM_STATS
 0

	)

1557 
	#MEMP_STATS
 0

	)

1558 
	#SYS_STATS
 0

	)

1559 
	#LWIP_STATS_DISPLAY
 0

	)

1571 #i‚de‡
PPP_SUPPORT


1572 
	#PPP_SUPPORT
 0

	)

1578 #i‚de‡
PPPOE_SUPPORT


1579 
	#PPPOE_SUPPORT
 0

	)

1585 #i‚de‡
PPPOS_SUPPORT


1586 
	#PPPOS_SUPPORT
 
PPP_SUPPORT


	)

1589 #i‡
PPP_SUPPORT


1594 #i‚de‡
NUM_PPP


1595 
	#NUM_PPP
 1

	)

1601 #i‚de‡
PAP_SUPPORT


1602 
	#PAP_SUPPORT
 0

	)

1608 #i‚de‡
CHAP_SUPPORT


1609 
	#CHAP_SUPPORT
 0

	)

1615 #i‚de‡
MSCHAP_SUPPORT


1616 
	#MSCHAP_SUPPORT
 0

	)

1622 #i‚de‡
CBCP_SUPPORT


1623 
	#CBCP_SUPPORT
 0

	)

1629 #i‚de‡
CCP_SUPPORT


1630 
	#CCP_SUPPORT
 0

	)

1636 #i‚de‡
VJ_SUPPORT


1637 
	#VJ_SUPPORT
 0

	)

1643 #i‚de‡
MD5_SUPPORT


1644 
	#MD5_SUPPORT
 0

	)

1650 #i‚de‡
FSM_DEFTIMEOUT


1651 
	#FSM_DEFTIMEOUT
 6

	)

1654 #i‚de‡
FSM_DEFMAXTERMREQS


1655 
	#FSM_DEFMAXTERMREQS
 2

	)

1658 #i‚de‡
FSM_DEFMAXCONFREQS


1659 
	#FSM_DEFMAXCONFREQS
 10

	)

1662 #i‚de‡
FSM_DEFMAXNAKLOOPS


1663 
	#FSM_DEFMAXNAKLOOPS
 5

	)

1666 #i‚de‡
UPAP_DEFTIMEOUT


1667 
	#UPAP_DEFTIMEOUT
 6

	)

1670 #i‚de‡
UPAP_DEFREQTIME


1671 
	#UPAP_DEFREQTIME
 30

	)

1674 #i‚de‡
CHAP_DEFTIMEOUT


1675 
	#CHAP_DEFTIMEOUT
 6

	)

1678 #i‚de‡
CHAP_DEFTRANSMITS


1679 
	#CHAP_DEFTRANSMITS
 10

	)

1683 #i‚de‡
LCP_ECHOINTERVAL


1684 
	#LCP_ECHOINTERVAL
 0

	)

1688 #i‚de‡
LCP_MAXECHOFAILS


1689 
	#LCP_MAXECHOFAILS
 3

	)

1693 #i‚de‡
PPP_MAXIDLEFLAG


1694 
	#PPP_MAXIDLEFLAG
 100

	)

1705 
	#PPP_MTU
 1500

	)

1706 #i‚de‡
PPP_MAXMTU


1708 
	#PPP_MAXMTU
 1500

	)

1710 
	#PPP_MINMTU
 64

	)

1711 
	#PPP_MRU
 1500

	)

1712 
	#PPP_MAXMRU
 1500

	)

1713 #i‚de‡
PPP_DEFMRU


1714 
	#PPP_DEFMRU
 296

	)

1716 
	#PPP_MINMRU
 128

	)

1718 #i‚de‡
MAXNAMELEN


1719 
	#MAXNAMELEN
 256

	)

1721 #i‚de‡
MAXSECRETLEN


1722 
	#MAXSECRETLEN
 256

	)

1735 #i‚de‡
CHECKSUM_GEN_IP


1736 
	#CHECKSUM_GEN_IP
 1

	)

1742 #i‚de‡
CHECKSUM_GEN_UDP


1743 
	#CHECKSUM_GEN_UDP
 1

	)

1749 #i‚de‡
CHECKSUM_GEN_TCP


1750 
	#CHECKSUM_GEN_TCP
 1

	)

1756 #i‚de‡
CHECKSUM_CHECK_IP


1757 
	#CHECKSUM_CHECK_IP
 1

	)

1763 #i‚de‡
CHECKSUM_CHECK_UDP


1764 
	#CHECKSUM_CHECK_UDP
 1

	)

1770 #i‚de‡
CHECKSUM_CHECK_TCP


1771 
	#CHECKSUM_CHECK_TCP
 1

	)

1778 #i‚de‡
LWIP_CHECKSUM_ON_COPY


1779 
	#LWIP_CHECKSUM_ON_COPY
 0

	)

1792 #i‚de‡
LWIP_DBG_MIN_LEVEL


1793 
	#LWIP_DBG_MIN_LEVEL
 
LWIP_DBG_LEVEL_ALL


	)

1800 #i‚de‡
LWIP_DBG_TYPES_ON


1801 
	#LWIP_DBG_TYPES_ON
 
LWIP_DBG_ON


	)

1807 #i‚de‡
ETHARP_DEBUG


1808 
	#ETHARP_DEBUG
 
LWIP_DBG_OFF


	)

1814 #i‚de‡
NETIF_DEBUG


1815 
	#NETIF_DEBUG
 
LWIP_DBG_OFF


	)

1821 #i‚de‡
PBUF_DEBUG


1822 
	#PBUF_DEBUG
 
LWIP_DBG_OFF


	)

1828 #i‚de‡
API_LIB_DEBUG


1829 
	#API_LIB_DEBUG
 
LWIP_DBG_OFF


	)

1835 #i‚de‡
API_MSG_DEBUG


1836 
	#API_MSG_DEBUG
 
LWIP_DBG_OFF


	)

1842 #i‚de‡
SOCKETS_DEBUG


1843 
	#SOCKETS_DEBUG
 
LWIP_DBG_OFF


	)

1849 #i‚de‡
ICMP_DEBUG


1850 
	#ICMP_DEBUG
 
LWIP_DBG_OFF


	)

1856 #i‚de‡
IGMP_DEBUG


1857 
	#IGMP_DEBUG
 
LWIP_DBG_OFF


	)

1863 #i‚de‡
INET_DEBUG


1864 
	#INET_DEBUG
 
LWIP_DBG_OFF


	)

1870 #i‚de‡
IP_DEBUG


1871 
	#IP_DEBUG
 
LWIP_DBG_OFF


	)

1877 #i‚de‡
IP_REASS_DEBUG


1878 
	#IP_REASS_DEBUG
 
LWIP_DBG_OFF


	)

1884 #i‚de‡
RAW_DEBUG


1885 
	#RAW_DEBUG
 
LWIP_DBG_OFF


	)

1891 #i‚de‡
MEM_DEBUG


1892 
	#MEM_DEBUG
 
LWIP_DBG_OFF


	)

1898 #i‚de‡
MEMP_DEBUG


1899 
	#MEMP_DEBUG
 
LWIP_DBG_OFF


	)

1905 #i‚de‡
SYS_DEBUG


1906 
	#SYS_DEBUG
 
LWIP_DBG_OFF


	)

1912 #i‚de‡
TIMERS_DEBUG


1913 
	#TIMERS_DEBUG
 
LWIP_DBG_OFF


	)

1919 #i‚de‡
TCP_DEBUG


1920 
	#TCP_DEBUG
 
LWIP_DBG_OFF


	)

1926 #i‚de‡
TCP_INPUT_DEBUG


1927 
	#TCP_INPUT_DEBUG
 
LWIP_DBG_OFF


	)

1933 #i‚de‡
TCP_FR_DEBUG


1934 
	#TCP_FR_DEBUG
 
LWIP_DBG_OFF


	)

1941 #i‚de‡
TCP_RTO_DEBUG


1942 
	#TCP_RTO_DEBUG
 
LWIP_DBG_OFF


	)

1948 #i‚de‡
TCP_CWND_DEBUG


1949 
	#TCP_CWND_DEBUG
 
LWIP_DBG_OFF


	)

1955 #i‚de‡
TCP_WND_DEBUG


1956 
	#TCP_WND_DEBUG
 
LWIP_DBG_OFF


	)

1962 #i‚de‡
TCP_OUTPUT_DEBUG


1963 
	#TCP_OUTPUT_DEBUG
 
LWIP_DBG_OFF


	)

1969 #i‚de‡
TCP_RST_DEBUG


1970 
	#TCP_RST_DEBUG
 
LWIP_DBG_OFF


	)

1976 #i‚de‡
TCP_QLEN_DEBUG


1977 
	#TCP_QLEN_DEBUG
 
LWIP_DBG_OFF


	)

1983 #i‚de‡
UDP_DEBUG


1984 
	#UDP_DEBUG
 
LWIP_DBG_OFF


	)

1990 #i‚de‡
TCPIP_DEBUG


1991 
	#TCPIP_DEBUG
 
LWIP_DBG_OFF


	)

1997 #i‚de‡
PPP_DEBUG


1998 
	#PPP_DEBUG
 
LWIP_DBG_OFF


	)

2004 #i‚de‡
SLIP_DEBUG


2005 
	#SLIP_DEBUG
 
LWIP_DBG_OFF


	)

2011 #i‚de‡
DHCP_DEBUG


2012 
	#DHCP_DEBUG
 
LWIP_DBG_OFF


	)

2018 #i‚de‡
AUTOIP_DEBUG


2019 
	#AUTOIP_DEBUG
 
LWIP_DBG_OFF


	)

2025 #i‚de‡
SNMP_MSG_DEBUG


2026 
	#SNMP_MSG_DEBUG
 
LWIP_DBG_OFF


	)

2032 #i‚de‡
SNMP_MIB_DEBUG


2033 
	#SNMP_MIB_DEBUG
 
LWIP_DBG_OFF


	)

2039 #i‚de‡
DNS_DEBUG


2040 
	#DNS_DEBUG
 
LWIP_DBG_OFF


	)

	@include/lwip/pbuf.h

33 #i‚de‡
__LWIP_PBUF_H__


34 
	#__LWIP_PBUF_H__


	)

36 
	~"lwù/›t.h
"

37 
	~"lwù/îr.h
"

39 #ifde‡
__˝lu•lus


45 
	#LWIP_SUPPORT_CUSTOM_PBUF
 (
IP_FRAG
 && !
IP_FRAG_USES_STATIC_BUF
 && !
LWIP_NETIF_TX_SINGLE_PBUF
)

	)

47 
	#PBUF_TRANSPORT_HLEN
 20

	)

48 
	#PBUF_IP_HLEN
 20

	)

51 
PBUF_TRANSPORT
,

52 
PBUF_IP
,

53 
PBUF_LINK
,

54 
PBUF_RAW


55 } 
	tpbuf_œyî
;

58 
PBUF_RAM
,

59 
PBUF_ROM
,

60 
PBUF_REF
,

61 
PBUF_POOL


62 } 
	tpbuf_ty≥
;

66 
	#PBUF_FLAG_PUSH
 0x01U

	)

69 
	#PBUF_FLAG_IS_CUSTOM
 0x02U

	)

71 
	#PBUF_FLAG_MCASTLOOP
 0x04U

	)

73 
	spbuf
 {

75 
pbuf
 *
√xt
;

78 *
∑ylﬂd
;

87 
u16_t
 
tŸ_Àn
;

90 
u16_t
 
Àn
;

93 
u8_t
 
ty≥
;

96 
u8_t
 
Êags
;

103 
u16_t
 
ªf
;

106 #i‡
LWIP_SUPPORT_CUSTOM_PBUF


108 (*
pbuf_‰ì_cu°om_‚
)(
	tpbuf
 *
	tp
);

111 
	spbuf_cu°om
 {

113 
pbuf
Öbuf;

115 
pbuf_‰ì_cu°om_‚
 
cu°om_‰ì_fun˘i⁄
;

120 
	#pbuf_öô
()

	)

122 
pbuf
 *
pbuf_Æloc
(
pbuf_œyî
 
l
, 
u16_t
 
Àngth
, 
pbuf_ty≥
 
ty≥
);

123 #i‡
LWIP_SUPPORT_CUSTOM_PBUF


124 
pbuf
 *
pbuf_Ælo˚d_cu°om
(
pbuf_œyî
 
l
, 
u16_t
 
Àngth
, 
pbuf_ty≥
 
ty≥
,

125 
pbuf_cu°om
 *
p
, *
∑ylﬂd_mem
,

126 
u16_t
 
∑ylﬂd_mem_Àn
);

128 
pbuf_ªÆloc
(
pbuf
 *
p
, 
u16_t
 
size
);

129 
u8_t
 
pbuf_hódî
(
pbuf
 *
p
, 
s16_t
 
hódî_size
);

130 
pbuf_ªf
(
pbuf
 *
p
);

131 
u8_t
 
pbuf_‰ì
(
pbuf
 *
p
);

132 
u8_t
 
pbuf_˛í
(
pbuf
 *
p
);

133 
pbuf_ˇt
(
pbuf
 *
hód
, pbu‡*
èû
);

134 
pbuf_chaö
(
pbuf
 *
hód
, pbu‡*
èû
);

135 
pbuf
 *
pbuf_dechaö
(pbu‡*
p
);

136 
îr_t
 
pbuf_c›y
(
pbuf
 *
p_to
, pbu‡*
p_‰om
);

137 
u16_t
 
pbuf_c›y_∑πül
(
pbuf
 *
p
, *
d©≠å
, u16_à
Àn
, u16_à
off£t
);

138 
îr_t
 
pbuf_èke
(
pbuf
 *
buf
, c⁄° *
d©≠å
, 
u16_t
 
Àn
);

139 
pbuf
 *
pbuf_cﬂÀs˚
(pbu‡*
p
, 
pbuf_œyî
 
œyî
);

140 #i‡
LWIP_CHECKSUM_ON_COPY


141 
îr_t
 
pbuf_fûl_chksum
(
pbuf
 *
p
, 
u16_t
 
°¨t_off£t
, c⁄° *
d©≠å
,

142 
u16_t
 
Àn
, u16_à*
chksum
);

145 
u8_t
 
pbuf_gë_©
(
pbuf
* 
p
, 
u16_t
 
off£t
);

146 
u16_t
 
pbuf_memcmp
(
pbuf
* 
p
, u16_à
off£t
, c⁄° * 
s2
, u16_à
n
);

147 
u16_t
 
pbuf_memföd
(
pbuf
* 
p
, c⁄° * 
mem
, u16_à
mem_Àn
, u16_à
°¨t_off£t
);

148 
u16_t
 
pbuf_°r°r
(
pbuf
* 
p
, c⁄° * 
sub°r
);

150 #ifde‡
__˝lu•lus


	@include/lwip/raw.h

32 #i‚de‡
__LWIP_RAW_H__


33 
	#__LWIP_RAW_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_RAW


39 
	~"lwù/pbuf.h
"

40 
	~"lwù/def.h
"

41 
	~"lwù/ù.h
"

42 
	~"lwù/ù_addr.h
"

44 #ifde‡
__˝lu•lus


48 
øw_pcb
;

60 
u8_t
 (*
	tøw_ªcv_‚
)(*
	t¨g
, 
	tøw_pcb
 *
	tpcb
, 
	tpbuf
 *
	tp
,

61 
	tù_addr_t
 *
	taddr
);

63 
	søw_pcb
 {

65 
IP_PCB
;

67 
øw_pcb
 *
√xt
;

69 
u8_t
 
¥Ÿocﬁ
;

72 
øw_ªcv_‚
 
ªcv
;

74 *
ªcv_¨g
;

79 
øw_pcb
 * 
øw_√w
 (
u8_t
 
¥Ÿo
);

80 
øw_ªmove
 (
øw_pcb
 *
pcb
);

81 
îr_t
 
øw_böd
 (
øw_pcb
 *
pcb
, 
ù_addr_t
 *
ùaddr
);

82 
îr_t
 
øw_c⁄√˘
 (
øw_pcb
 *
pcb
, 
ù_addr_t
 *
ùaddr
);

84 
øw_ªcv
 (
øw_pcb
 *
pcb
, 
øw_ªcv_‚
 
ªcv
, *
ªcv_¨g
);

85 
îr_t
 
øw_£ndto
 (
øw_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr_t
 *
ùaddr
);

86 
îr_t
 
øw_£nd
 (
øw_pcb
 *
pcb
, 
pbuf
 *
p
);

89 
u8_t
 
øw_öput
 (
pbuf
 *
p
, 
√tif
 *
öp
);

90 
	#øw_öô
(Ë

	)

92 #ifde‡
__˝lu•lus


	@include/lwip/sio.h

35 #i‚de‡
__SIO_H__


36 
	#__SIO_H__


	)

38 
	~"lwù/¨ch.h
"

40 #ifde‡
__˝lu•lus


46 #i‚de‡
__sio_fd_t_deföed


47 * 
	tsio_fd_t
;

53 #i‚de‡
sio_›í


60 
sio_fd_t
 
sio_›í
(
u8_t
 
devnum
);

63 #i‚de‡
sio_£nd


72 
sio_£nd
(
u8_t
 
c
, 
sio_fd_t
 
fd
);

75 #i‚de‡
sio_ªcv


83 
u8_t
 
sio_ªcv
(
sio_fd_t
 
fd
);

86 #i‚de‡
sio_ªad


98 
u32_t
 
sio_ªad
(
sio_fd_t
 
fd
, 
u8_t
 *
d©a
, u32_à
Àn
);

101 #i‚de‡
sio_åyªad


111 
u32_t
 
sio_åyªad
(
sio_fd_t
 
fd
, 
u8_t
 *
d©a
, u32_à
Àn
);

114 #i‚de‡
sio_wrôe


125 
u32_t
 
sio_wrôe
(
sio_fd_t
 
fd
, 
u8_t
 *
d©a
, u32_à
Àn
);

128 #i‚de‡
sio_ªad_ab‹t


134 
sio_ªad_ab‹t
(
sio_fd_t
 
fd
);

137 #ifde‡
__˝lu•lus


	@include/lwip/snmp.h

33 #i‚de‡
__LWIP_SNMP_H__


34 
	#__LWIP_SNMP_H__


	)

36 
	~"lwù/›t.h
"

38 #ifde‡
__˝lu•lus


42 
	~"lwù/ù_addr.h
"

44 
udp_pcb
;

45 
√tif
;

50 
	e¢mp_ifTy≥
 {

51 
¢mp_ifTy≥_Ÿhî
=1,

52 
¢mp_ifTy≥_ªguœr1822
,

53 
¢mp_ifTy≥_hdh1822
,

54 
¢mp_ifTy≥_ddn_x25
,

55 
¢mp_ifTy≥_rfc877_x25
,

56 
¢mp_ifTy≥_ëhî√t_csmacd
,

57 
¢mp_ifTy≥_iso88023_csmacd
,

58 
¢mp_ifTy≥_iso88024_tokíBus
,

59 
¢mp_ifTy≥_iso88025_tokíRög
,

60 
¢mp_ifTy≥_iso88026_m™
,

61 
¢mp_ifTy≥_°¨L™
,

62 
¢mp_ifTy≥_¥Ÿe⁄_10Mbô
,

63 
¢mp_ifTy≥_¥Ÿe⁄_80Mbô
,

64 
¢mp_ifTy≥_hy≥rch™√l
,

65 
¢mp_ifTy≥_fddi
,

66 
¢mp_ifTy≥_œpb
,

67 
¢mp_ifTy≥_sdlc
,

68 
¢mp_ifTy≥_ds1
,

69 
¢mp_ifTy≥_e1
,

70 
¢mp_ifTy≥_basicISDN
,

71 
¢mp_ifTy≥_¥im¨yISDN
,

72 
¢mp_ifTy≥_¥›PoötToPoötSîül
,

73 
¢mp_ifTy≥_µp
,

74 
¢mp_ifTy≥_so·w¨eLo›back
,

75 
¢mp_ifTy≥_e⁄
,

76 
¢mp_ifTy≥_ëhî√t_3Mbô
,

77 
¢mp_ifTy≥_nsù
,

78 
¢mp_ifTy≥_¶ù
,

79 
¢mp_ifTy≥_u…ø
,

80 
¢mp_ifTy≥_ds3
,

81 
¢mp_ifTy≥_sù
,

82 
¢mp_ifTy≥_‰ame_ªœy


85 #i‡
LWIP_SNMP


88 
	#SNMP_SYSUPTIME_INTERVAL
 10

	)

91 
	#LWIP_SNMP_OBJ_ID_LEN
 32

	)

94 
	s¢mp_obj_id


96 
u8_t
 
Àn
;

97 
s32_t
 
id
[
LWIP_SNMP_OBJ_ID_LEN
];

101 
¢mp_£t_sysde§
(
u8_t
* 
°r
, u8_t* 
Àn
);

102 
¢mp_£t_sysobjid
(
¢mp_obj_id
 *
oid
);

103 
¢mp_gë_sysobjid_±r
(
¢mp_obj_id
 **
oid
);

104 
¢mp_öc_sysu±ime
();

105 
¢mp_add_sysu±ime
(
u32_t
 
vÆue
);

106 
¢mp_gë_sysu±ime
(
u32_t
 *
vÆue
);

107 
¢mp_£t_sysc⁄è˘
(
u8_t
 *
oc°r
, u8_à*
oc°æí
);

108 
¢mp_£t_sy¢ame
(
u8_t
 *
oc°r
, u8_à*
oc°æí
);

109 
¢mp_£t_sy¶oˇti⁄
(
u8_t
 *
oc°r
, u8_à*
oc°æí
);

112 
¢mp_add_iföo˘ës
(
√tif
 *
ni
, 
u32_t
 
vÆue
);

113 
¢mp_öc_iföuˇ°pkts
(
√tif
 *
ni
);

114 
¢mp_öc_ifönuˇ°pkts
(
√tif
 *
ni
);

115 
¢mp_öc_ifödisˇrds
(
√tif
 *
ni
);

116 
¢mp_add_ifouto˘ës
(
√tif
 *
ni
, 
u32_t
 
vÆue
);

117 
¢mp_öc_ifoutuˇ°pkts
(
√tif
 *
ni
);

118 
¢mp_öc_ifouäuˇ°pkts
(
√tif
 *
ni
);

119 
¢mp_öc_ifoutdisˇrds
(
√tif
 *
ni
);

120 
¢mp_öc_iÊi°
();

121 
¢mp_dec_iÊi°
();

124 
¢mp_ö£π_¨pidx_åì
(
√tif
 *
ni
, 
ù_addr_t
 *
ù
);

125 
¢mp_dñëe_¨pidx_åì
(
√tif
 *
ni
, 
ù_addr_t
 *
ù
);

128 
¢mp_öc_ùöª˚ives
();

129 
¢mp_öc_ùöhdªº‹s
();

130 
¢mp_öc_ùöaddªº‹s
();

131 
¢mp_öc_ùf‹wd©agøms
();

132 
¢mp_öc_ùöunknow≈rŸos
();

133 
¢mp_öc_ùödisˇrds
();

134 
¢mp_öc_ùödñivîs
();

135 
¢mp_öc_ùouåeque°s
();

136 
¢mp_öc_ùoutdisˇrds
();

137 
¢mp_öc_ùouä‹ouãs
();

138 
¢mp_öc_ùªasmªqds
();

139 
¢mp_öc_ùªasmoks
();

140 
¢mp_öc_ùªasmÁûs
();

141 
¢mp_öc_ù‰agoks
();

142 
¢mp_öc_ù‰agÁûs
();

143 
¢mp_öc_ù‰ag¸óãs
();

144 
¢mp_öc_ùroutögdisˇrds
();

145 
¢mp_ö£π_ùaddridx_åì
(
√tif
 *
ni
);

146 
¢mp_dñëe_ùaddridx_åì
(
√tif
 *
ni
);

147 
¢mp_ö£π_ùπeidx_åì
(
u8_t
 
dÊt
, 
√tif
 *
ni
);

148 
¢mp_dñëe_ùπeidx_åì
(
u8_t
 
dÊt
, 
√tif
 *
ni
);

151 
¢mp_öc_icmpömsgs
();

152 
¢mp_öc_icmpöîr‹s
();

153 
¢mp_öc_icmpöde°uƒóchs
();

154 
¢mp_öc_icmpötimìxcds
();

155 
¢mp_öc_icmpö∑rm¥obs
();

156 
¢mp_öc_icmpö§cquíchs
();

157 
¢mp_öc_icmpöªdúe˘s
();

158 
¢mp_öc_icmpöechos
();

159 
¢mp_öc_icmpöech‹ïs
();

160 
¢mp_öc_icmpötime°amps
();

161 
¢mp_öc_icmpötime°am¥ïs
();

162 
¢mp_öc_icmpöaddrmasks
();

163 
¢mp_öc_icmpöaddrmaskªps
();

164 
¢mp_öc_icmpoutmsgs
();

165 
¢mp_öc_icmpouãº‹s
();

166 
¢mp_öc_icmpoutde°uƒóchs
();

167 
¢mp_öc_icmpouâimìxcds
();

168 
¢mp_öc_icmpouç¨m¥obs
();

169 
¢mp_öc_icmpout§cquíchs
();

170 
¢mp_öc_icmpouåedúe˘s
();

171 
¢mp_öc_icmpouãchos
();

172 
¢mp_öc_icmpouãch‹ïs
();

173 
¢mp_öc_icmpouâime°amps
();

174 
¢mp_öc_icmpouâime°am¥ïs
();

175 
¢mp_öc_icmpouèddrmasks
();

176 
¢mp_öc_icmpouèddrmaskªps
();

179 
¢mp_öc_t˝a˘ive›ís
();

180 
¢mp_öc_t˝∑ssive›ís
();

181 
¢mp_öc_t˝©ãm±Áûs
();

182 
¢mp_öc_t˝e°abª£ts
();

183 
¢mp_öc_t˝ö£gs
();

184 
¢mp_öc_t˝out£gs
();

185 
¢mp_öc_t˝ªå™s£gs
();

186 
¢mp_öc_t˝öîrs
();

187 
¢mp_öc_t˝ouå°s
();

190 
¢mp_öc_udpöd©agøms
();

191 
¢mp_öc_ud≤›‹ts
();

192 
¢mp_öc_udpöîr‹s
();

193 
¢mp_öc_udpoutd©agøms
();

194 
¢mp_ö£π_udpidx_åì
(
udp_pcb
 *
pcb
);

195 
¢mp_dñëe_udpidx_åì
(
udp_pcb
 *
pcb
);

198 
¢mp_öc_¢mpöpkts
();

199 
¢mp_öc_¢mpouçkts
();

200 
¢mp_öc_¢mpöbadvîsi⁄s
();

201 
¢mp_öc_¢mpöbadcommunôy«mes
();

202 
¢mp_öc_¢mpöbadcommunôyu£s
();

203 
¢mp_öc_¢mpöa¢∑r£îrs
();

204 
¢mp_öc_¢mpötoobigs
();

205 
¢mp_öc_¢mpönosuch«mes
();

206 
¢mp_öc_¢mpöbadvÆues
();

207 
¢mp_öc_¢mpöªad⁄lys
();

208 
¢mp_öc_¢mpögíîrs
();

209 
¢mp_add_¢mpötŸÆªqv¨s
(
u8_t
 
vÆue
);

210 
¢mp_add_¢mpötŸÆ£tv¨s
(
u8_t
 
vÆue
);

211 
¢mp_öc_¢mpögëªque°s
();

212 
¢mp_öc_¢mpögë√xts
();

213 
¢mp_öc_¢mpö£åeque°s
();

214 
¢mp_öc_¢mpögëª•⁄£s
();

215 
¢mp_öc_¢mpöå≠s
();

216 
¢mp_öc_¢mpouâoobigs
();

217 
¢mp_öc_¢mpouäosuch«mes
();

218 
¢mp_öc_¢mpoutbadvÆues
();

219 
¢mp_öc_¢mpoutgíîrs
();

220 
¢mp_öc_¢mpoutgëªque°s
();

221 
¢mp_öc_¢mpoutgë√xts
();

222 
¢mp_öc_¢mpout£åeque°s
();

223 
¢mp_öc_¢mpoutgëª•⁄£s
();

224 
¢mp_öc_¢mpouâøps
();

225 
¢mp_gë_¢mpgΩid_±r
(
¢mp_obj_id
 **
oid
);

226 
¢mp_£t_¢m≥«bÀauthíå≠s
(
u8_t
 *
vÆue
);

227 
¢mp_gë_¢m≥«bÀauthíå≠s
(
u8_t
 *
vÆue
);

234 
	#¢mp_£t_sysde§
(
°r
, 
Àn
)

	)

235 
	#¢mp_£t_sysobjid
(
oid
);

	)

236 
	#¢mp_gë_sysobjid_±r
(
oid
)

	)

237 
	#¢mp_öc_sysu±ime
()

	)

238 
	#¢mp_add_sysu±ime
(
vÆue
)

	)

239 
	#¢mp_gë_sysu±ime
(
vÆue
)

	)

240 
	#¢mp_£t_sysc⁄è˘
(
oc°r
, 
oc°æí
);

	)

241 
	#¢mp_£t_sy¢ame
(
oc°r
, 
oc°æí
);

	)

242 
	#¢mp_£t_sy¶oˇti⁄
(
oc°r
, 
oc°æí
);

	)

245 
	#¢mp_add_iföo˘ës
(
ni
,
vÆue
)

	)

246 
	#¢mp_öc_iföuˇ°pkts
(
ni
)

	)

247 
	#¢mp_öc_ifönuˇ°pkts
(
ni
)

	)

248 
	#¢mp_öc_ifödisˇrds
(
ni
)

	)

249 
	#¢mp_add_ifouto˘ës
(
ni
,
vÆue
)

	)

250 
	#¢mp_öc_ifoutuˇ°pkts
(
ni
)

	)

251 
	#¢mp_öc_ifouäuˇ°pkts
(
ni
)

	)

252 
	#¢mp_öc_ifoutdisˇrds
(
ni
)

	)

253 
	#¢mp_öc_iÊi°
()

	)

254 
	#¢mp_dec_iÊi°
()

	)

257 
	#¢mp_ö£π_¨pidx_åì
(
ni
,
ù
)

	)

258 
	#¢mp_dñëe_¨pidx_åì
(
ni
,
ù
)

	)

261 
	#¢mp_öc_ùöª˚ives
()

	)

262 
	#¢mp_öc_ùöhdªº‹s
()

	)

263 
	#¢mp_öc_ùöaddªº‹s
()

	)

264 
	#¢mp_öc_ùf‹wd©agøms
()

	)

265 
	#¢mp_öc_ùöunknow≈rŸos
()

	)

266 
	#¢mp_öc_ùödisˇrds
()

	)

267 
	#¢mp_öc_ùödñivîs
()

	)

268 
	#¢mp_öc_ùouåeque°s
()

	)

269 
	#¢mp_öc_ùoutdisˇrds
()

	)

270 
	#¢mp_öc_ùouä‹ouãs
()

	)

271 
	#¢mp_öc_ùªasmªqds
()

	)

272 
	#¢mp_öc_ùªasmoks
()

	)

273 
	#¢mp_öc_ùªasmÁûs
()

	)

274 
	#¢mp_öc_ù‰agoks
()

	)

275 
	#¢mp_öc_ù‰agÁûs
()

	)

276 
	#¢mp_öc_ù‰ag¸óãs
()

	)

277 
	#¢mp_öc_ùroutögdisˇrds
()

	)

278 
	#¢mp_ö£π_ùaddridx_åì
(
ni
)

	)

279 
	#¢mp_dñëe_ùaddridx_åì
(
ni
)

	)

280 
	#¢mp_ö£π_ùπeidx_åì
(
dÊt
, 
ni
)

	)

281 
	#¢mp_dñëe_ùπeidx_åì
(
dÊt
, 
ni
)

	)

284 
	#¢mp_öc_icmpömsgs
()

	)

285 
	#¢mp_öc_icmpöîr‹s
()

	)

286 
	#¢mp_öc_icmpöde°uƒóchs
()

	)

287 
	#¢mp_öc_icmpötimìxcds
()

	)

288 
	#¢mp_öc_icmpö∑rm¥obs
()

	)

289 
	#¢mp_öc_icmpö§cquíchs
()

	)

290 
	#¢mp_öc_icmpöªdúe˘s
()

	)

291 
	#¢mp_öc_icmpöechos
()

	)

292 
	#¢mp_öc_icmpöech‹ïs
()

	)

293 
	#¢mp_öc_icmpötime°amps
()

	)

294 
	#¢mp_öc_icmpötime°am¥ïs
()

	)

295 
	#¢mp_öc_icmpöaddrmasks
()

	)

296 
	#¢mp_öc_icmpöaddrmaskªps
()

	)

297 
	#¢mp_öc_icmpoutmsgs
()

	)

298 
	#¢mp_öc_icmpouãº‹s
()

	)

299 
	#¢mp_öc_icmpoutde°uƒóchs
()

	)

300 
	#¢mp_öc_icmpouâimìxcds
()

	)

301 
	#¢mp_öc_icmpouç¨m¥obs
()

	)

302 
	#¢mp_öc_icmpout§cquíchs
()

	)

303 
	#¢mp_öc_icmpouåedúe˘s
()

	)

304 
	#¢mp_öc_icmpouãchos
()

	)

305 
	#¢mp_öc_icmpouãch‹ïs
()

	)

306 
	#¢mp_öc_icmpouâime°amps
()

	)

307 
	#¢mp_öc_icmpouâime°am¥ïs
()

	)

308 
	#¢mp_öc_icmpouèddrmasks
()

	)

309 
	#¢mp_öc_icmpouèddrmaskªps
()

	)

311 
	#¢mp_öc_t˝a˘ive›ís
()

	)

312 
	#¢mp_öc_t˝∑ssive›ís
()

	)

313 
	#¢mp_öc_t˝©ãm±Áûs
()

	)

314 
	#¢mp_öc_t˝e°abª£ts
()

	)

315 
	#¢mp_öc_t˝ö£gs
()

	)

316 
	#¢mp_öc_t˝out£gs
()

	)

317 
	#¢mp_öc_t˝ªå™s£gs
()

	)

318 
	#¢mp_öc_t˝öîrs
()

	)

319 
	#¢mp_öc_t˝ouå°s
()

	)

322 
	#¢mp_öc_udpöd©agøms
()

	)

323 
	#¢mp_öc_ud≤›‹ts
()

	)

324 
	#¢mp_öc_udpöîr‹s
()

	)

325 
	#¢mp_öc_udpoutd©agøms
()

	)

326 
	#¢mp_ö£π_udpidx_åì
(
pcb
)

	)

327 
	#¢mp_dñëe_udpidx_åì
(
pcb
)

	)

330 
	#¢mp_öc_¢mpöpkts
()

	)

331 
	#¢mp_öc_¢mpouçkts
()

	)

332 
	#¢mp_öc_¢mpöbadvîsi⁄s
()

	)

333 
	#¢mp_öc_¢mpöbadcommunôy«mes
()

	)

334 
	#¢mp_öc_¢mpöbadcommunôyu£s
()

	)

335 
	#¢mp_öc_¢mpöa¢∑r£îrs
()

	)

336 
	#¢mp_öc_¢mpötoobigs
()

	)

337 
	#¢mp_öc_¢mpönosuch«mes
()

	)

338 
	#¢mp_öc_¢mpöbadvÆues
()

	)

339 
	#¢mp_öc_¢mpöªad⁄lys
()

	)

340 
	#¢mp_öc_¢mpögíîrs
()

	)

341 
	#¢mp_add_¢mpötŸÆªqv¨s
(
vÆue
)

	)

342 
	#¢mp_add_¢mpötŸÆ£tv¨s
(
vÆue
)

	)

343 
	#¢mp_öc_¢mpögëªque°s
()

	)

344 
	#¢mp_öc_¢mpögë√xts
()

	)

345 
	#¢mp_öc_¢mpö£åeque°s
()

	)

346 
	#¢mp_öc_¢mpögëª•⁄£s
()

	)

347 
	#¢mp_öc_¢mpöå≠s
()

	)

348 
	#¢mp_öc_¢mpouâoobigs
()

	)

349 
	#¢mp_öc_¢mpouäosuch«mes
()

	)

350 
	#¢mp_öc_¢mpoutbadvÆues
()

	)

351 
	#¢mp_öc_¢mpoutgíîrs
()

	)

352 
	#¢mp_öc_¢mpoutgëªque°s
()

	)

353 
	#¢mp_öc_¢mpoutgë√xts
()

	)

354 
	#¢mp_öc_¢mpout£åeque°s
()

	)

355 
	#¢mp_öc_¢mpoutgëª•⁄£s
()

	)

356 
	#¢mp_öc_¢mpouâøps
()

	)

357 
	#¢mp_gë_¢mpgΩid_±r
(
oid
)

	)

358 
	#¢mp_£t_¢m≥«bÀauthíå≠s
(
vÆue
)

	)

359 
	#¢mp_gë_¢m≥«bÀauthíå≠s
(
vÆue
)

	)

363 #ifde‡
__˝lu•lus


	@include/lwip/snmp_asn1.h

35 #i‚de‡
__LWIP_SNMP_ASN1_H__


36 
	#__LWIP_SNMP_ASN1_H__


	)

38 
	~"lwù/›t.h
"

39 
	~"lwù/îr.h
"

40 
	~"lwù/pbuf.h
"

41 
	~"lwù/¢mp.h
"

43 #i‡
LWIP_SNMP


45 #ifde‡
__˝lu•lus


49 
	#SNMP_ASN1_UNIV
 (0Ë

	)

50 
	#SNMP_ASN1_APPLIC
 (0x40Ë

	)

51 
	#SNMP_ASN1_CONTXT
 (0x80Ë

	)

53 
	#SNMP_ASN1_CONSTR
 (0x20Ë

	)

54 
	#SNMP_ASN1_PRIMIT
 (0Ë

	)

57 
	#SNMP_ASN1_INTEG
 2

	)

58 
	#SNMP_ASN1_OC_STR
 4

	)

59 
	#SNMP_ASN1_NUL
 5

	)

60 
	#SNMP_ASN1_OBJ_ID
 6

	)

61 
	#SNMP_ASN1_SEQ
 16

	)

64 
	#SNMP_ASN1_IPADDR
 0

	)

65 
	#SNMP_ASN1_COUNTER
 1

	)

66 
	#SNMP_ASN1_GAUGE
 2

	)

67 
	#SNMP_ASN1_TIMETICKS
 3

	)

68 
	#SNMP_ASN1_OPAQUE
 4

	)

71 
	#SNMP_ASN1_PDU_GET_REQ
 0

	)

72 
	#SNMP_ASN1_PDU_GET_NEXT_REQ
 1

	)

73 
	#SNMP_ASN1_PDU_GET_RESP
 2

	)

74 
	#SNMP_ASN1_PDU_SET_REQ
 3

	)

75 
	#SNMP_ASN1_PDU_TRAP
 4

	)

77 
îr_t
 
¢mp_a¢1_dec_ty≥
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 *
ty≥
);

78 
îr_t
 
¢mp_a¢1_dec_Àngth
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 *
o˘ës_u£d
, u16_à*
Àngth
);

79 
îr_t
 
¢mp_a¢1_dec_u32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
u32_t
 *
vÆue
);

80 
îr_t
 
¢mp_a¢1_dec_s32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
s32_t
 *
vÆue
);

81 
îr_t
 
¢mp_a¢1_dec_oid
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
¢mp_obj_id
 *
oid
);

82 
îr_t
 
¢mp_a¢1_dec_øw
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, u16_à
øw_Àn
, 
u8_t
 *
øw
);

84 
¢mp_a¢1_íc_Àngth_˙t
(
u16_t
 
Àngth
, 
u8_t
 *
o˘ës_√eded
);

85 
¢mp_a¢1_íc_u32t_˙t
(
u32_t
 
vÆue
, 
u16_t
 *
o˘ës_√eded
);

86 
¢mp_a¢1_íc_s32t_˙t
(
s32_t
 
vÆue
, 
u16_t
 *
o˘ës_√eded
);

87 
¢mp_a¢1_íc_oid_˙t
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
u16_t
 *
o˘ës_√eded
);

88 
îr_t
 
¢mp_a¢1_íc_ty≥
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
ty≥
);

89 
îr_t
 
¢mp_a¢1_íc_Àngth
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àngth
);

90 
îr_t
 
¢mp_a¢1_íc_u32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
o˘ës_√eded
, 
u32_t
 
vÆue
);

91 
îr_t
 
¢mp_a¢1_íc_s32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
o˘ës_√eded
, 
s32_t
 
vÆue
);

92 
îr_t
 
¢mp_a¢1_íc_oid
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
);

93 
îr_t
 
¢mp_a¢1_íc_øw
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
øw_Àn
, 
u8_t
 *
øw
);

95 #ifde‡
__˝lu•lus


	@include/lwip/snmp_msg.h

35 #i‚de‡
__LWIP_SNMP_MSG_H__


36 
	#__LWIP_SNMP_MSG_H__


	)

38 
	~"lwù/›t.h
"

39 
	~"lwù/¢mp.h
"

40 
	~"lwù/¢mp_°ru˘s.h
"

41 
	~"lwù/ù_addr.h
"

42 
	~"lwù/îr.h
"

44 #i‡
LWIP_SNMP


46 #i‡
SNMP_PRIVATE_MIB


49 
	~"¥iv©e_mib.h
"

52 #ifde‡
__˝lu•lus


58 #i‚de‡
SNMP_IN_PORT


59 
	#SNMP_IN_PORT
 161

	)

63 #i‚de‡
SNMP_TRAP_PORT


64 
	#SNMP_TRAP_PORT
 162

	)

67 
	#SNMP_ES_NOERROR
 0

	)

68 
	#SNMP_ES_TOOBIG
 1

	)

69 
	#SNMP_ES_NOSUCHNAME
 2

	)

70 
	#SNMP_ES_BADVALUE
 3

	)

71 
	#SNMP_ES_READONLY
 4

	)

72 
	#SNMP_ES_GENERROR
 5

	)

74 
	#SNMP_GENTRAP_COLDSTART
 0

	)

75 
	#SNMP_GENTRAP_WARMSTART
 1

	)

76 
	#SNMP_GENTRAP_AUTHFAIL
 4

	)

77 
	#SNMP_GENTRAP_ENTERPRISESPC
 6

	)

79 
	s¢mp_v¨böd


82 
¢mp_v¨böd
 *
√xt
;

84 
¢mp_v¨böd
 *
¥ev
;

87 
u8_t
 
idít_Àn
;

89 
s32_t
 *
idít
;

92 
u8_t
 
vÆue_ty≥
;

94 
u8_t
 
vÆue_Àn
;

96 *
vÆue
;

99 
u8_t
 
£qÀ∆í
;

101 
u8_t
 
ﬁíÀn
;

103 
u8_t
 
vÀ∆í
;

105 
u16_t
 
£qÀn
;

107 
u16_t
 
ﬁí
;

109 
u16_t
 
vÀn
;

112 
	s¢mp_v¨böd_roŸ


114 
¢mp_v¨böd
 *
hód
;

115 
¢mp_v¨böd
 *
èû
;

117 
u8_t
 
cou¡
;

119 
u8_t
 
£qÀ∆í
;

121 
u16_t
 
£qÀn
;

125 
	s¢mp_ª•_hódî_Àngths


128 
u8_t
 
îridxÀ∆í
;

130 
u8_t
 
îr°©À∆í
;

132 
u8_t
 
ridÀ∆í
;

134 
u8_t
 
pduÀ∆í
;

136 
u8_t
 
comÀ∆í
;

138 
u8_t
 
vîÀ∆í
;

140 
u8_t
 
£qÀ∆í
;

143 
u16_t
 
îridxÀn
;

145 
u16_t
 
îr°©Àn
;

147 
u16_t
 
ridÀn
;

149 
u16_t
 
pduÀn
;

151 
u16_t
 
comÀn
;

153 
u16_t
 
vîÀn
;

155 
u16_t
 
£qÀn
;

159 
	s¢mp_å≠_hódî_Àngths


162 
u8_t
 
t¶íÀn
;

164 
u8_t
 
°ΩÀ∆í
;

166 
u8_t
 
gå∂íÀn
;

168 
u8_t
 
ØddæíÀn
;

170 
u8_t
 
eidÀ∆í
;

172 
u8_t
 
pduÀ∆í
;

174 
u8_t
 
comÀ∆í
;

176 
u8_t
 
vîÀ∆í
;

178 
u8_t
 
£qÀ∆í
;

181 
u16_t
 
t¶í
;

183 
u16_t
 
°ΩÀn
;

185 
u16_t
 
gå∂í
;

187 
u16_t
 
Øddæí
;

189 
u16_t
 
eidÀn
;

191 
u16_t
 
pduÀn
;

193 
u16_t
 
comÀn
;

195 
u16_t
 
vîÀn
;

197 
u16_t
 
£qÀn
;

201 
	#SNMP_MSG_EMPTY
 0

	)

203 
	#SNMP_MSG_SEARCH_OBJ
 1

	)

206 
	#SNMP_MSG_INTERNAL_GET_OBJDEF
 2

	)

207 
	#SNMP_MSG_INTERNAL_GET_VALUE
 3

	)

208 
	#SNMP_MSG_INTERNAL_SET_TEST
 4

	)

209 
	#SNMP_MSG_INTERNAL_GET_OBJDEF_S
 5

	)

210 
	#SNMP_MSG_INTERNAL_SET_VALUE
 6

	)

214 
	#SNMP_MSG_EXTERNAL_GET_OBJDEF
 7

	)

215 
	#SNMP_MSG_EXTERNAL_GET_VALUE
 8

	)

216 
	#SNMP_MSG_EXTERNAL_SET_TEST
 9

	)

217 
	#SNMP_MSG_EXTERNAL_GET_OBJDEF_S
 10

	)

218 
	#SNMP_MSG_EXTERNAL_SET_VALUE
 11

	)

220 
	#SNMP_COMMUNITY_STR_LEN
 64

	)

221 
	s¢mp_msg_p°©


224 
udp_pcb
 *
pcb
;

226 
ù_addr_t
 
sù
;

228 
u16_t
 
•
;

230 
u8_t
 
π
;

232 
s32_t
 
rid
;

234 
s32_t
 
îr‹_°©us
;

236 
s32_t
 
îr‹_ödex
;

238 
u8_t
 
communôy
[
SNMP_COMMUNITY_STR_LEN
 + 1];

240 
u8_t
 
com_°æí
;

242 
u8_t
 
°©e
;

244 
mib_exã∫Æ_node
 *
ext_mib_node
;

245 
¢mp_«me_±r
 
ext_«me_±r
;

246 
obj_def
 
ext_obje˘_def
;

247 
¢mp_obj_id
 
ext_oid
;

249 
u8_t
 
vb_idx
;

251 
¢mp_v¨böd
 *
vb_±r
;

253 
¢mp_v¨böd_roŸ
 
övb
;

255 
¢mp_v¨böd_roŸ
 
outvb
;

257 
¢mp_ª•_hódî_Àngths
 
rhl
;

260 
	s¢mp_msg_å≠


263 
udp_pcb
 *
pcb
;

265 
ù_addr_t
 
dù
;

268 
¢mp_obj_id
 *
íãΩri£
;

270 
u8_t
 
sù_øw
[4];

272 
u32_t
 
gí_å≠
;

274 
u32_t
 
•c_å≠
;

276 
u32_t
 
ts
;

278 
¢mp_v¨böd_roŸ
 
outvb
;

280 
¢mp_å≠_hódî_Àngths
 
thl
;

284 c⁄° 
s32_t
 
¢mp_vîsi⁄
;

286 c⁄° 
¢mp_publiccommunôy
[7];

288 
¢mp_msg_å≠
 
å≠_msg
;

291 
¢mp_öô
();

292 
¢mp_å≠_d°_íabÀ
(
u8_t
 
d°_idx
, u8_à
íabÀ
);

293 
¢mp_å≠_d°_ù_£t
(
u8_t
 
d°_idx
, 
ù_addr_t
 *
d°
);

296 
¢mp_v¨böd
* 
¢mp_v¨böd_Æloc
(
¢mp_obj_id
 *
oid
, 
u8_t
 
ty≥
, u8_à
Àn
);

297 
¢mp_v¨böd_‰ì
(
¢mp_v¨böd
 *
vb
);

298 
¢mp_v¨böd_li°_‰ì
(
¢mp_v¨böd_roŸ
 *
roŸ
);

299 
¢mp_v¨böd_èû_add
(
¢mp_v¨böd_roŸ
 *
roŸ
, 
¢mp_v¨böd
 *
vb
);

300 
¢mp_v¨böd
* 
¢mp_v¨böd_èû_ªmove
(
¢mp_v¨böd_roŸ
 *
roŸ
);

303 
¢mp_msg_evít
(
u8_t
 
ªque°_id
);

304 
îr_t
 
¢mp_£nd_ª•⁄£
(
¢mp_msg_p°©
 *
m_°©
);

305 
îr_t
 
¢mp_£nd_å≠
(
s8_t
 
gíîic_å≠
, 
¢mp_obj_id
 *
eoid
, 
s32_t
 
•ecific_å≠
);

306 
¢mp_cﬁd°¨t_å≠
();

307 
¢mp_authÁû_å≠
();

309 #ifde‡
__˝lu•lus


	@include/lwip/snmp_structs.h

37 #i‚de‡
__LWIP_SNMP_STRUCTS_H__


38 
	#__LWIP_SNMP_STRUCTS_H__


	)

40 
	~"lwù/›t.h
"

42 #i‡
LWIP_SNMP


44 
	~"lwù/¢mp.h
"

46 #i‡
SNMP_PRIVATE_MIB


49 
	~"¥iv©e_mib.h
"

52 #ifde‡
__˝lu•lus


57 
	#MIB_OBJECT_NONE
 0

	)

58 
	#MIB_OBJECT_SCALAR
 1

	)

59 
	#MIB_OBJECT_TAB
 2

	)

62 
	#MIB_ACCESS_READ
 1

	)

63 
	#MIB_ACCESS_WRITE
 2

	)

66 
	#MIB_OBJECT_READ_ONLY
 
MIB_ACCESS_READ


	)

67 
	#MIB_OBJECT_READ_WRITE
 (
MIB_ACCESS_READ
 | 
MIB_ACCESS_WRITE
)

	)

68 
	#MIB_OBJECT_WRITE_ONLY
 
MIB_ACCESS_WRITE


	)

69 
	#MIB_OBJECT_NOT_ACCESSIBLE
 0

	)

72 
	sobj_def


75 
u8_t
 
ö°™˚
;

77 
u8_t
 
ac˚ss
;

79 
u8_t
 
a¢_ty≥
;

81 
u16_t
 
v_Àn
;

83 
u8_t
 
id_ö°_Àn
;

85 
s32_t
 *
id_ö°_±r
;

88 
	s¢mp_«me_±r


90 
u8_t
 
idít_Àn
;

91 
s32_t
 *
idít
;

95 
	#MIB_NODE_SC
 0x01

	)

97 
	#MIB_NODE_AR
 0x02

	)

99 
	#MIB_NODE_RA
 0x03

	)

101 
	#MIB_NODE_LR
 0x04

	)

103 
	#MIB_NODE_EX
 0x05

	)

106 
	smib_node


109 (*
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

112 (*
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

114 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

116 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

118 
u8_t
 
node_ty≥
;

120 
u16_t
 
maxÀngth
;

124 
mib_node
 
	tmib_sˇœr_node
;

128 
	smib_¨øy_node


131 (*
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

132 (*
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

133 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

134 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

136 
u8_t
 
node_ty≥
;

137 
u16_t
 
maxÀngth
;

140 c⁄° 
s32_t
 *
objid
;

141 
mib_node
* c⁄° *
≈å
;

146 
	smib_øm_¨øy_node


149 (*
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

150 (*
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

151 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

152 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

154 
u8_t
 
node_ty≥
;

155 
u16_t
 
maxÀngth
;

158 
s32_t
 *
objid
;

159 
mib_node
 **
≈å
;

162 
	smib_li°_node


164 
mib_li°_node
 *
¥ev
;

165 
mib_li°_node
 *
√xt
;

166 
s32_t
 
objid
;

167 
mib_node
 *
≈å
;

172 
	smib_li°_roŸnode


175 (*
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

176 (*
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

177 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

178 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

180 
u8_t
 
node_ty≥
;

181 
u16_t
 
maxÀngth
;

184 
mib_li°_node
 *
hód
;

185 
mib_li°_node
 *
èû
;

187 
u16_t
 
cou¡
;

192 
	smib_exã∫Æ_node


195 (*
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

196 (*
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

197 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

198 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

200 
u8_t
 
node_ty≥
;

201 
u16_t
 
maxÀngth
;

206 * 
addr_öf
;

208 
u8_t
 
åì_Àvñs
;

210 
u16_t
 (*
Àvñ_Àngth
)(* 
addr_öf
, 
u8_t
 
Àvñ
);

213 
s32_t
 (*
idít_cmp
)(* 
addr_öf
, 
u8_t
 
Àvñ
, 
u16_t
 
idx
, s32_à
sub_id
);

214 (*
gë_objid
)(* 
addr_öf
, 
u8_t
 
Àvñ
, 
u16_t
 
idx
, 
s32_t
 *
sub_id
);

217 (*
gë_obje˘_def_q
)(* 
addr_öf
, 
u8_t
 
rid
, u8_à
idít_Àn
, 
s32_t
 *
idít
);

218 (*
gë_vÆue_q
)(
u8_t
 
rid
, 
obj_def
 *
od
);

219 (*
£t_ã°_q
)(
u8_t
 
rid
, 
obj_def
 *
od
);

220 (*
£t_vÆue_q
)(
u8_t
 
rid
, 
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

222 (*
gë_obje˘_def_a
)(
u8_t
 
rid
, u8_à
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

223 (*
gë_vÆue_a
)(
u8_t
 
rid
, 
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

224 
u8_t
 (*
£t_ã°_a
)(u8_à
rid
, 
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

225 (*
£t_vÆue_a
)(
u8_t
 
rid
, 
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

228 (*
gë_obje˘_def_pc
)(
u8_t
 
rid
, u8_à
idít_Àn
, 
s32_t
 *
idít
);

229 (*
gë_vÆue_pc
)(
u8_t
 
rid
, 
obj_def
 *
od
);

230 (*
£t_ã°_pc
)(
u8_t
 
rid
, 
obj_def
 *
od
);

231 (*
£t_vÆue_pc
)(
u8_t
 
rid
, 
obj_def
 *
od
);

235 c⁄° 
mib_¨øy_node
 
öã∫ë
;

238 
nﬁófs_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

239 
nﬁófs_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

240 
u8_t
 
nﬁófs_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

241 
nﬁófs_£t_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

243 
¢mp_oidtoù
(
s32_t
 *
idít
, 
ù_addr_t
 *
ù
);

244 
¢mp_ùtooid
(
ù_addr_t
 *
ù
, 
s32_t
 *
idít
);

245 
¢mp_ifödext⁄ëif
(
s32_t
 
ifödex
, 
√tif
 **netif);

246 
¢mp_√ti·oifödex
(
√tif
 *√tif, 
s32_t
 *
ifidx
);

248 
mib_li°_node
* 
¢mp_mib_ _Æloc
(
s32_t
 
id
);

249 
¢mp_mib_ _‰ì
(
mib_li°_node
 *
 
);

250 
mib_li°_roŸnode
* 
¢mp_mib_Ãn_Æloc
();

251 
¢mp_mib_Ãn_‰ì
(
mib_li°_roŸnode
 *
Ãn
);

253 
s8_t
 
¢mp_mib_node_ö£π
(
mib_li°_roŸnode
 *
∫
, 
s32_t
 
objid
, 
mib_li°_node
 **
ö¢
);

254 
s8_t
 
¢mp_mib_node_föd
(
mib_li°_roŸnode
 *
∫
, 
s32_t
 
objid
, 
mib_li°_node
 **
‚
);

255 
mib_li°_roŸnode
 *
¢mp_mib_node_dñëe
(mib_li°_roŸnodê*
∫
, 
mib_li°_node
 *
n
);

257 
mib_node
* 
¢mp_£¨ch_åì
(mib_nodê*
node
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_«me_±r
 *
≈
);

258 
mib_node
* 
¢mp_ex∑nd_åì
(mib_nodê*
node
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_obj_id
 *
oidªt
);

259 
u8_t
 
¢mp_iso_¥efix_t°
(u8_à
idít_Àn
, 
s32_t
 *
idít
);

260 
u8_t
 
¢mp_iso_¥efix_ex∑nd
(u8_à
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_obj_id
 *
oidªt
);

262 #ifde‡
__˝lu•lus


	@include/lwip/sockets.h

34 #i‚de‡
__LWIP_SOCKETS_H__


35 
	#__LWIP_SOCKETS_H__


	)

37 
	~"lwù/›t.h
"

39 #i‡
LWIP_SOCKET


41 
	~<°ddef.h
>

43 
	~"lwù/ù_addr.h
"

44 
	~"lwù/öë.h
"

46 #ifde‡
__˝lu•lus


51 
	ssockaddr_ö
 {

52 
u8_t
 
sö_Àn
;

53 
u8_t
 
sö_Ámûy
;

54 
u16_t
 
sö_p‹t
;

55 
ö_addr
 
sö_addr
;

56 
sö_zîo
[8];

59 
	ssockaddr
 {

60 
u8_t
 
ß_Àn
;

61 
u8_t
 
ß_Ámûy
;

62 
ß_d©a
[14];

65 #i‚de‡
sockÀn_t


66 
	#sockÀn_t
 
u32_t


	)

70 
	#SOCK_STREAM
 1

	)

71 
	#SOCK_DGRAM
 2

	)

72 
	#SOCK_RAW
 3

	)

77 
	#SO_DEBUG
 0x0001

	)

78 
	#SO_ACCEPTCONN
 0x0002

	)

79 
	#SO_REUSEADDR
 0x0004

	)

80 
	#SO_KEEPALIVE
 0x0008

	)

81 
	#SO_DONTROUTE
 0x0010

	)

82 
	#SO_BROADCAST
 0x0020

	)

83 
	#SO_USELOOPBACK
 0x0040

	)

84 
	#SO_LINGER
 0x0080

	)

85 
	#SO_OOBINLINE
 0x0100

	)

86 
	#SO_REUSEPORT
 0x0200

	)

88 
	#SO_DONTLINGER
 (()(~
SO_LINGER
))

	)

93 
	#SO_SNDBUF
 0x1001

	)

94 
	#SO_RCVBUF
 0x1002

	)

95 
	#SO_SNDLOWAT
 0x1003

	)

96 
	#SO_RCVLOWAT
 0x1004

	)

97 
	#SO_SNDTIMEO
 0x1005

	)

98 
	#SO_RCVTIMEO
 0x1006

	)

99 
	#SO_ERROR
 0x1007

	)

100 
	#SO_TYPE
 0x1008

	)

101 
	#SO_CONTIMEO
 0x1009

	)

102 
	#SO_NO_CHECK
 0x100®

	)

108 
	slögî
 {

109 
l_⁄off
;

110 
l_lögî
;

116 
	#SOL_SOCKET
 0xff‡

	)

119 
	#AF_UNSPEC
 0

	)

120 
	#AF_INET
 2

	)

121 
	#PF_INET
 
AF_INET


	)

122 
	#PF_UNSPEC
 
AF_UNSPEC


	)

124 
	#IPPROTO_IP
 0

	)

125 
	#IPPROTO_TCP
 6

	)

126 
	#IPPROTO_UDP
 17

	)

127 
	#IPPROTO_UDPLITE
 136

	)

130 
	#MSG_PEEK
 0x01

	)

131 
	#MSG_WAITALL
 0x02

	)

132 
	#MSG_OOB
 0x04

	)

133 
	#MSG_DONTWAIT
 0x08

	)

134 
	#MSG_MORE
 0x10

	)

140 
	#IP_TOS
 1

	)

141 
	#IP_TTL
 2

	)

143 #i‡
LWIP_TCP


147 
	#TCP_NODELAY
 0x01

	)

148 
	#TCP_KEEPALIVE
 0x02

	)

149 
	#TCP_KEEPIDLE
 0x03

	)

150 
	#TCP_KEEPINTVL
 0x04

	)

151 
	#TCP_KEEPCNT
 0x05

	)

154 #i‡
LWIP_UDP
 && 
LWIP_UDPLITE


158 
	#UDPLITE_SEND_CSCOV
 0x01

	)

159 
	#UDPLITE_RECV_CSCOV
 0x02

	)

163 #i‡
LWIP_IGMP


167 
	#IP_ADD_MEMBERSHIP
 3

	)

168 
	#IP_DROP_MEMBERSHIP
 4

	)

169 
	#IP_MULTICAST_TTL
 5

	)

170 
	#IP_MULTICAST_IF
 6

	)

171 
	#IP_MULTICAST_LOOP
 7

	)

173 
	sù_mªq
 {

174 
ö_addr
 
imr_mu…üddr
;

175 
ö_addr
 
imr_öãrÁ˚
;

176 } 
	tù_mªq
;

195 
	#IPTOS_TOS_MASK
 0x1E

	)

196 
	#IPTOS_TOS
(
tos
Ë(—osË& 
IPTOS_TOS_MASK
)

	)

197 
	#IPTOS_LOWDELAY
 0x10

	)

198 
	#IPTOS_THROUGHPUT
 0x08

	)

199 
	#IPTOS_RELIABILITY
 0x04

	)

200 
	#IPTOS_LOWCOST
 0x02

	)

201 
	#IPTOS_MINCOST
 
IPTOS_LOWCOST


	)

212 
	#IPTOS_PREC_MASK
 0xe0

	)

213 
	#IPTOS_PREC
(
tos
Ë(—osË& 
IPTOS_PREC_MASK
)

	)

214 
	#IPTOS_PREC_NETCONTROL
 0xe0

	)

215 
	#IPTOS_PREC_INTERNETCONTROL
 0xc0

	)

216 
	#IPTOS_PREC_CRITIC_ECP
 0xa0

	)

217 
	#IPTOS_PREC_FLASHOVERRIDE
 0x80

	)

218 
	#IPTOS_PREC_FLASH
 0x60

	)

219 
	#IPTOS_PREC_IMMEDIATE
 0x40

	)

220 
	#IPTOS_PREC_PRIORITY
 0x20

	)

221 
	#IPTOS_PREC_ROUTINE
 0x00

	)

234 #i‡!
deföed
(
FIONREAD
Ë|| !deföed(
FIONBIO
)

235 
	#IOCPARM_MASK
 0x7fU

	)

236 
	#IOC_VOID
 0x20000000UL

	)

237 
	#IOC_OUT
 0x40000000UL

	)

238 
	#IOC_IN
 0x80000000UL

	)

239 
	#IOC_INOUT
 (
IOC_IN
|
IOC_OUT
)

	)

242 
	#_IO
(
x
,
y
Ë(
IOC_VOID
|((x)<<8)|(y))

	)

244 
	#_IOR
(
x
,
y
,
t
Ë(
IOC_OUT
|((()—)&
IOCPARM_MASK
)<<16)|((x)<<8)|(y))

	)

246 
	#_IOW
(
x
,
y
,
t
Ë(
IOC_IN
|((()—)&
IOCPARM_MASK
)<<16)|((x)<<8)|(y))

	)

249 #i‚de‡
FIONREAD


250 
	#FIONREAD
 
	`_IOR
('f', 127, Ë

	)

252 #i‚de‡
FIONBIO


253 
	#FIONBIO
 
	`_IOW
('f', 126, Ë

	)

257 #i‚de‡
SIOCSHIWAT


258 
	#SIOCSHIWAT
 
	`_IOW
('s', 0, Ë

	)

259 
	#SIOCGHIWAT
 
	`_IOR
('s', 1, Ë

	)

260 
	#SIOCSLOWAT
 
	`_IOW
('s', 2, Ë

	)

261 
	#SIOCGLOWAT
 
	`_IOR
('s', 3, Ë

	)

262 
	#SIOCATMARK
 
	`_IOR
('s', 7, Ë

	)

266 #i‚de‡
F_GETFL


267 
	#F_GETFL
 3

	)

269 #i‚de‡
F_SETFL


270 
	#F_SETFL
 4

	)

275 #i‚de‡
O_NONBLOCK


276 
	#O_NONBLOCK
 1

	)

278 #i‚de‡
O_NDELAY


279 
	#O_NDELAY
 1

	)

282 #i‚de‡
SHUT_RD


283 
	#SHUT_RD
 0

	)

284 
	#SHUT_WR
 1

	)

285 
	#SHUT_RDWR
 2

	)

289 #i‚de‡
FD_SET


290 #unde‡
FD_SETSIZE


292 
	#FD_SETSIZE
 
MEMP_NUM_NETCONN


	)

293 
	#FD_SET
(
n
, 
p
Ë(’)->
fd_bôs
[“)/8] |(1 << (“Ë& 7)))

	)

294 
	#FD_CLR
(
n
, 
p
Ë(’)->
fd_bôs
[“)/8] &~(1 << (“Ë& 7)))

	)

295 
	#FD_ISSET
(
n
,
p
Ë(’)->
fd_bôs
[“)/8] & (1 << (“Ë& 7)))

	)

296 
	#FD_ZERO
(
p
Ë
	`mem£t
((*)’),0,(*’)))

	)

298 
	sfd_£t
 {

299 
fd_bôs
 [(
FD_SETSIZE
+7)/8];

300 } 
	tfd_£t
;

306 #i‚de‡
LWIP_TIMEVAL_PRIVATE


307 
	#LWIP_TIMEVAL_PRIVATE
 1

	)

310 #i‡
LWIP_TIMEVAL_PRIVATE


311 
	stimevÆ
 {

312 
tv_£c
;

313 
tv_u£c
;

317 
lwù_sockë_öô
();

319 
lwù_ac˚±
(
s
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
);

320 
lwù_böd
(
s
, c⁄° 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
);

321 
lwù_shutdown
(
s
, 
how
);

322 
lwù_gë≥î«me
 (
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 *
«mñí
);

323 
lwù_gësock«me
 (
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 *
«mñí
);

324 
lwù_gësock›t
 (
s
, 
Àvñ
, 
›äame
, *
›tvÆ
, 
sockÀn_t
 *
›éí
);

325 
lwù_£tsock›t
 (
s
, 
Àvñ
, 
›äame
, c⁄° *
›tvÆ
, 
sockÀn_t
 
›éí
);

326 
lwù_˛o£
(
s
);

327 
lwù_c⁄√˘
(
s
, c⁄° 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
);

328 
lwù_li°í
(
s
, 
backlog
);

329 
lwù_ªcv
(
s
, *
mem
, 
size_t
 
Àn
, 
Êags
);

330 
lwù_ªad
(
s
, *
mem
, 
size_t
 
Àn
);

331 
lwù_ªcv‰om
(
s
, *
mem
, 
size_t
 
Àn
, 
Êags
,

332 
sockaddr
 *
‰om
, 
sockÀn_t
 *
‰omÀn
);

333 
lwù_£nd
(
s
, c⁄° *
d©≠å
, 
size_t
 
size
, 
Êags
);

334 
lwù_£ndto
(
s
, c⁄° *
d©≠å
, 
size_t
 
size
, 
Êags
,

335 c⁄° 
sockaddr
 *
to
, 
sockÀn_t
 
tﬁí
);

336 
lwù_sockë
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
);

337 
lwù_wrôe
(
s
, c⁄° *
d©≠å
, 
size_t
 
size
);

338 
lwù_£À˘
(
maxfdp1
, 
fd_£t
 *
ªad£t
, fd_£à*
wrôe£t
, fd_£à*
ex˚±£t
,

339 
timevÆ
 *
timeout
);

340 
lwù_io˘l
(
s
, 
cmd
, *
¨gp
);

341 
lwù_f˙é
(
s
, 
cmd
, 
vÆ
);

343 #i‡
LWIP_COMPAT_SOCKETS


344 
	#ac˚±
(
a
,
b
,
c
Ë
	`lwù_ac˚±
◊,b,c)

	)

345 
	#böd
(
a
,
b
,
c
Ë
	`lwù_böd
◊,b,c)

	)

346 
	#shutdown
(
a
,
b
Ë
	`lwù_shutdown
◊,b)

	)

347 
	#˛o£sockë
(
s
Ë
	`lwù_˛o£
(s)

	)

348 
	#c⁄√˘
(
a
,
b
,
c
Ë
	`lwù_c⁄√˘
◊,b,c)

	)

349 
	#gësock«me
(
a
,
b
,
c
Ë
	`lwù_gësock«me
◊,b,c)

	)

350 
	#gë≥î«me
(
a
,
b
,
c
Ë
	`lwù_gë≥î«me
◊,b,c)

	)

351 
	#£tsock›t
(
a
,
b
,
c
,
d
,
e
Ë
	`lwù_£tsock›t
◊,b,c,d,e)

	)

352 
	#gësock›t
(
a
,
b
,
c
,
d
,
e
Ë
	`lwù_gësock›t
◊,b,c,d,e)

	)

353 
	#li°í
(
a
,
b
Ë
	`lwù_li°í
◊,b)

	)

354 
	#ªcv
(
a
,
b
,
c
,
d
Ë
	`lwù_ªcv
◊,b,c,d)

	)

355 
	#ªcv‰om
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`lwù_ªcv‰om
◊,b,c,d,e,f)

	)

356 
	#£nd
(
a
,
b
,
c
,
d
Ë
	`lwù_£nd
◊,b,c,d)

	)

357 
	#£ndto
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`lwù_£ndto
◊,b,c,d,e,f)

	)

358 
	#sockë
(
a
,
b
,
c
Ë
	`lwù_sockë
◊,b,c)

	)

359 
	#£À˘
(
a
,
b
,
c
,
d
,
e
Ë
	`lwù_£À˘
◊,b,c,d,e)

	)

360 
	#io˘lsockë
(
a
,
b
,
c
Ë
	`lwù_io˘l
◊,b,c)

	)

362 #i‡
LWIP_POSIX_SOCKETS_IO_NAMES


363 
	#ªad
(
a
,
b
,
c
Ë
	`lwù_ªad
◊,b,c)

	)

364 
	#wrôe
(
a
,
b
,
c
Ë
	`lwù_wrôe
◊,b,c)

	)

365 
	#˛o£
(
s
Ë
	`lwù_˛o£
(s)

	)

370 #ifde‡
__˝lu•lus


	@include/lwip/stats.h

32 #i‚de‡
__LWIP_STATS_H__


33 
	#__LWIP_STATS_H__


	)

35 
	~"lwù/›t.h
"

37 
	~"lwù/mem.h
"

38 
	~"lwù/memp.h
"

40 #ifde‡
__˝lu•lus


44 #i‡
LWIP_STATS


46 #i‚de‡
LWIP_STATS_LARGE


47 
	#LWIP_STATS_LARGE
 0

	)

50 #i‡
LWIP_STATS_LARGE


51 
	#STAT_COUNTER
 
u32_t


	)

52 
	#STAT_COUNTER_F
 
U32_F


	)

54 
	#STAT_COUNTER
 
u16_t


	)

55 
	#STAT_COUNTER_F
 
U16_F


	)

58 
	s°©s_¥Ÿo
 {

59 
STAT_COUNTER
 
xmô
;

60 
STAT_COUNTER
 
ªcv
;

61 
STAT_COUNTER
 
fw
;

62 
STAT_COUNTER
 
dr›
;

63 
STAT_COUNTER
 
chkîr
;

64 
STAT_COUNTER
 
À√º
;

65 
STAT_COUNTER
 
memîr
;

66 
STAT_COUNTER
 
πîr
;

67 
STAT_COUNTER
 
¥Ÿîr
;

68 
STAT_COUNTER
 
›ãº
;

69 
STAT_COUNTER
 
îr
;

70 
STAT_COUNTER
 
ˇchehô
;

73 
	s°©s_igmp
 {

74 
STAT_COUNTER
 
	mxmô
;

75 
STAT_COUNTER
 
	mªcv
;

76 
STAT_COUNTER
 
	mdr›
;

77 
STAT_COUNTER
 
	mchkîr
;

78 
STAT_COUNTER
 
	mÀ√º
;

79 
STAT_COUNTER
 
	mmemîr
;

80 
STAT_COUNTER
 
	m¥Ÿîr
;

81 
STAT_COUNTER
 
	mrx_v1
;

82 
STAT_COUNTER
 
	mrx_group
;

83 
STAT_COUNTER
 
	mrx_gíîÆ
;

84 
STAT_COUNTER
 
	mrx_ªp‹t
;

85 
STAT_COUNTER
 
	mtx_joö
;

86 
STAT_COUNTER
 
	mtx_Àave
;

87 
STAT_COUNTER
 
	mtx_ªp‹t
;

90 
	s°©s_mem
 {

91 #ifde‡
LWIP_DEBUG


92 c⁄° *
	m«me
;

94 
mem_size_t
 
	mavaû
;

95 
mem_size_t
 
	mu£d
;

96 
mem_size_t
 
	mmax
;

97 
STAT_COUNTER
 
	mîr
;

98 
STAT_COUNTER
 
	mûÀgÆ
;

101 
	s°©s_sy£Àm
 {

102 
STAT_COUNTER
 
	mu£d
;

103 
STAT_COUNTER
 
	mmax
;

104 
STAT_COUNTER
 
	mîr
;

107 
	s°©s_sys
 {

108 
°©s_sy£Àm
 
	m£m
;

109 
°©s_sy£Àm
 
	mmuãx
;

110 
°©s_sy£Àm
 
	mmbox
;

113 
	s°©s_
 {

114 #i‡
LINK_STATS


115 
°©s_¥Ÿo
 
	mlök
;

117 #i‡
ETHARP_STATS


118 
°©s_¥Ÿo
 
	mëh¨p
;

120 #i‡
IPFRAG_STATS


121 
°©s_¥Ÿo
 
	mù_‰ag
;

123 #i‡
IP_STATS


124 
°©s_¥Ÿo
 
	mù
;

126 #i‡
ICMP_STATS


127 
°©s_¥Ÿo
 
	micmp
;

129 #i‡
IGMP_STATS


130 
°©s_igmp
 
	migmp
;

132 #i‡
UDP_STATS


133 
°©s_¥Ÿo
 
	mudp
;

135 #i‡
TCP_STATS


136 
°©s_¥Ÿo
 
	mt˝
;

138 #i‡
MEM_STATS


139 
°©s_mem
 
	mmem
;

141 #i‡
MEMP_STATS


142 
°©s_mem
 
	mmemp
[
MEMP_MAX
];

144 #i‡
SYS_STATS


145 
°©s_sys
 
	msys
;

149 
°©s_
 
lwù_°©s
;

151 
°©s_öô
();

153 
	#STATS_INC
(
x
Ë++
lwù_°©s
.
	)
x

154 
	#STATS_DEC
(
x
Ë--
lwù_°©s
.
	)
x

155 
	#STATS_INC_USED
(
x
, 
y
Ëdÿ{ 
lwù_°©s
.x.
u£d
 += y; \

156 i‡(
lwù_°©s
.
x
.
max
 <Üwù_°©s.x.
u£d
) { \

157 
lwù_°©s
.
x
.
max
 =Üwù_°©s.x.
u£d
; \

159 } 0)

	)

161 
	#°©s_öô
()

	)

162 
	#STATS_INC
(
x
)

	)

163 
	#STATS_DEC
(
x
)

	)

164 
	#STATS_INC_USED
(
x
)

	)

167 #i‡
TCP_STATS


168 
	#TCP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

169 
	#TCP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
t˝
, "TCP")

	)

171 
	#TCP_STATS_INC
(
x
)

	)

172 
	#TCP_STATS_DISPLAY
()

	)

175 #i‡
UDP_STATS


176 
	#UDP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

177 
	#UDP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
udp
, "UDP")

	)

179 
	#UDP_STATS_INC
(
x
)

	)

180 
	#UDP_STATS_DISPLAY
()

	)

183 #i‡
ICMP_STATS


184 
	#ICMP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

185 
	#ICMP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
icmp
, "ICMP")

	)

187 
	#ICMP_STATS_INC
(
x
)

	)

188 
	#ICMP_STATS_DISPLAY
()

	)

191 #i‡
IGMP_STATS


192 
	#IGMP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

193 
	#IGMP_STATS_DISPLAY
(Ë
	`°©s_di•œy_igmp
(&
lwù_°©s
.
igmp
)

	)

195 
	#IGMP_STATS_INC
(
x
)

	)

196 
	#IGMP_STATS_DISPLAY
()

	)

199 #i‡
IP_STATS


200 
	#IP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

201 
	#IP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
ù
, "IP")

	)

203 
	#IP_STATS_INC
(
x
)

	)

204 
	#IP_STATS_DISPLAY
()

	)

207 #i‡
IPFRAG_STATS


208 
	#IPFRAG_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

209 
	#IPFRAG_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
ù_‰ag
, "IP_FRAG")

	)

211 
	#IPFRAG_STATS_INC
(
x
)

	)

212 
	#IPFRAG_STATS_DISPLAY
()

	)

215 #i‡
ETHARP_STATS


216 
	#ETHARP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

217 
	#ETHARP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
ëh¨p
, "ETHARP")

	)

219 
	#ETHARP_STATS_INC
(
x
)

	)

220 
	#ETHARP_STATS_DISPLAY
()

	)

223 #i‡
LINK_STATS


224 
	#LINK_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

225 
	#LINK_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
lök
, "LINK")

	)

227 
	#LINK_STATS_INC
(
x
)

	)

228 
	#LINK_STATS_DISPLAY
()

	)

231 #i‡
MEM_STATS


232 
	#MEM_STATS_AVAIL
(
x
, 
y
Ë
lwù_°©s
.
mem
.x = 
	)
y

233 
	#MEM_STATS_INC
(
x
Ë
	`STATS_INC
(
mem
.x)

	)

234 
	#MEM_STATS_INC_USED
(
x
, 
y
Ë
	`STATS_INC_USED
(
mem
, y)

	)

235 
	#MEM_STATS_DEC_USED
(
x
, 
y
Ë
lwù_°©s
.
mem
.x -
	)
y

236 
	#MEM_STATS_DISPLAY
(Ë
	`°©s_di•œy_mem
(&
lwù_°©s
.
mem
, "HEAP")

	)

238 
	#MEM_STATS_AVAIL
(
x
, 
y
)

	)

239 
	#MEM_STATS_INC
(
x
)

	)

240 
	#MEM_STATS_INC_USED
(
x
, 
y
)

	)

241 
	#MEM_STATS_DEC_USED
(
x
, 
y
)

	)

242 
	#MEM_STATS_DISPLAY
()

	)

245 #i‡
MEMP_STATS


246 
	#MEMP_STATS_AVAIL
(
x
, 
i
, 
y
Ë
lwù_°©s
.
memp
[i].x = 
	)
y

247 
	#MEMP_STATS_INC
(
x
, 
i
Ë
	`STATS_INC
(
memp
[i].x)

	)

248 
	#MEMP_STATS_DEC
(
x
, 
i
Ë
	`STATS_DEC
(
memp
[i].x)

	)

249 
	#MEMP_STATS_INC_USED
(
x
, 
i
Ë
	`STATS_INC_USED
(
memp
[i], 1)

	)

250 
	#MEMP_STATS_DISPLAY
(
i
Ë
	`°©s_di•œy_memp
(&
lwù_°©s
.
memp
[i], i)

	)

252 
	#MEMP_STATS_AVAIL
(
x
, 
i
, 
y
)

	)

253 
	#MEMP_STATS_INC
(
x
, 
i
)

	)

254 
	#MEMP_STATS_DEC
(
x
, 
i
)

	)

255 
	#MEMP_STATS_INC_USED
(
x
, 
i
)

	)

256 
	#MEMP_STATS_DISPLAY
(
i
)

	)

259 #i‡
SYS_STATS


260 
	#SYS_STATS_INC
(
x
Ë
	`STATS_INC
(
sys
.x)

	)

261 
	#SYS_STATS_DEC
(
x
Ë
	`STATS_DEC
(
sys
.x)

	)

262 
	#SYS_STATS_INC_USED
(
x
Ë
	`STATS_INC_USED
(
sys
.x, 1)

	)

263 
	#SYS_STATS_DISPLAY
(Ë
	`°©s_di•œy_sys
(&
lwù_°©s
.
sys
)

	)

265 
	#SYS_STATS_INC
(
x
)

	)

266 
	#SYS_STATS_DEC
(
x
)

	)

267 
	#SYS_STATS_INC_USED
(
x
)

	)

268 
	#SYS_STATS_DISPLAY
()

	)

272 #i‡
LWIP_STATS_DISPLAY


273 
°©s_di•œy
();

274 
°©s_di•œy_¥Ÿo
(
°©s_¥Ÿo
 *
¥Ÿo
, *
«me
);

275 
°©s_di•œy_igmp
(
°©s_igmp
 *
igmp
);

276 
°©s_di•œy_mem
(
°©s_mem
 *
mem
, *
«me
);

277 
°©s_di•œy_memp
(
°©s_mem
 *
mem
, 
ödex
);

278 
°©s_di•œy_sys
(
°©s_sys
 *
sys
);

280 
	#°©s_di•œy
()

	)

281 
	#°©s_di•œy_¥Ÿo
(
¥Ÿo
, 
«me
)

	)

282 
	#°©s_di•œy_igmp
(
igmp
)

	)

283 
	#°©s_di•œy_mem
(
mem
, 
«me
)

	)

284 
	#°©s_di•œy_memp
(
mem
, 
ödex
)

	)

285 
	#°©s_di•œy_sys
(
sys
)

	)

288 #ifde‡
__˝lu•lus


	@include/lwip/sys.h

32 #i‚de‡
__LWIP_SYS_H__


33 
	#__LWIP_SYS_H__


	)

35 
	~"lwù/›t.h
"

37 #ifde‡
__˝lu•lus


41 #i‡
NO_SYS


45 
u8_t
 
	tsys_£m_t
;

46 
u8_t
 
	tsys_muãx_t
;

47 
u8_t
 
	tsys_mbox_t
;

49 
	#sys_£m_√w
(
s
, 
c
Ë
ERR_OK


	)

50 
	#sys_£m_sig«l
(
s
)

	)

51 
	#sys_£m_waô
(
s
)

	)

52 
	#sys_¨ch_£m_waô
(
s
,
t
)

	)

53 
	#sys_£m_‰ì
(
s
)

	)

54 
	#sys_muãx_√w
(
mu
Ë
ERR_OK


	)

55 
	#sys_muãx_lock
(
mu
)

	)

56 
	#sys_muãx_u∆ock
(
mu
)

	)

57 
	#sys_muãx_‰ì
(
mu
)

	)

58 
	#sys_mbox_√w
(
m
, 
s
Ë
ERR_OK


	)

59 
	#sys_mbox_„tch
(
m
,
d
)

	)

60 
	#sys_mbox_åy„tch
(
m
,
d
)

	)

61 
	#sys_mbox_po°
(
m
,
d
)

	)

62 
	#sys_mbox_åypo°
(
m
,
d
)

	)

63 
	#sys_mbox_‰ì
(
m
)

	)

65 
	#sys_thªad_√w
(
n
,
t
,
a
,
s
,
p
)

	)

67 
	#sys_m¶ìp
(
t
)

	)

72 
	#SYS_ARCH_TIMEOUT
 0xffffffffUL

	)

77 
	#SYS_MBOX_EMPTY
 
SYS_ARCH_TIMEOUT


	)

79 
	~"lwù/îr.h
"

80 
	~"¨ch/sys_¨ch.h
"

83 (*
	tlwù_thªad_‚
)(*
	t¨g
);

92 #i‡
LWIP_COMPAT_MUTEX


94 
	#sys_muãx_t
 
sys_£m_t


	)

95 
	#sys_muãx_√w
(
muãx
Ë
	`sys_£m_√w
(muãx, 1)

	)

96 
	#sys_muãx_lock
(
muãx
Ë
	`sys_£m_waô
(muãx)

	)

97 
	#sys_muãx_u∆ock
(
muãx
Ë
	`sys_£m_sig«l
(muãx)

	)

98 
	#sys_muãx_‰ì
(
muãx
Ë
	`sys_£m_‰ì
(muãx)

	)

99 
	#sys_muãx_vÆid
(
muãx
Ë
	`sys_£m_vÆid
(muãx)

	)

100 
	#sys_muãx_£t_övÆid
(
muãx
Ë
	`sys_£m_£t_övÆid
(muãx)

	)

107 
îr_t
 
	`sys_muãx_√w
(
sys_muãx_t
 *
muãx
);

110 
	`sys_muãx_lock
(
sys_muãx_t
 *
muãx
);

113 
	`sys_muãx_u∆ock
(
sys_muãx_t
 *
muãx
);

116 
	`sys_muãx_‰ì
(
sys_muãx_t
 *
muãx
);

117 #i‚de‡
sys_muãx_vÆid


119 
	`sys_muãx_vÆid
(
sys_muãx_t
 *
muãx
);

121 #i‚de‡
sys_muãx_£t_övÆid


123 
	`sys_muãx_£t_övÆid
(
sys_muãx_t
 *
muãx
);

133 
îr_t
 
	`sys_£m_√w
(
sys_£m_t
 *
£m
, 
u8_t
 
cou¡
);

136 
	`sys_£m_sig«l
(
sys_£m_t
 *
£m
);

142 
u32_t
 
	`sys_¨ch_£m_waô
(
sys_£m_t
 *
£m
, u32_à
timeout
);

145 
	`sys_£m_‰ì
(
sys_£m_t
 *
£m
);

147 
	#sys_£m_waô
(
£m
Ë
	`sys_¨ch_£m_waô
(£m, 0)

	)

148 #i‚de‡
sys_£m_vÆid


150 
	`sys_£m_vÆid
(
sys_£m_t
 *
£m
);

152 #i‚de‡
sys_£m_£t_övÆid


154 
	`sys_£m_£t_övÆid
(
sys_£m_t
 *
£m
);

158 #i‚de‡
sys_m¶ìp


159 
	`sys_m¶ìp
(
u32_t
 
ms
);

168 
îr_t
 
	`sys_mbox_√w
(
sys_mbox_t
 *
mbox
, 
size
);

173 
	`sys_mbox_po°
(
sys_mbox_t
 *
mbox
, *
msg
);

177 
îr_t
 
	`sys_mbox_åypo°
(
sys_mbox_t
 *
mbox
, *
msg
);

185 
u32_t
 
	`sys_¨ch_mbox_„tch
(
sys_mbox_t
 *
mbox
, **
msg
, u32_à
timeout
);

187 #i‚de‡
sys_¨ch_mbox_åy„tch


194 
u32_t
 
	`sys_¨ch_mbox_åy„tch
(
sys_mbox_t
 *
mbox
, **
msg
);

197 
	#sys_mbox_åy„tch
(
mbox
, 
msg
Ë
	`sys_¨ch_mbox_åy„tch
(mbox, msg)

	)

200 
	`sys_mbox_‰ì
(
sys_mbox_t
 *
mbox
);

201 
	#sys_mbox_„tch
(
mbox
, 
msg
Ë
	`sys_¨ch_mbox_„tch
(mbox, msg, 0)

	)

202 #i‚de‡
sys_mbox_vÆid


204 
	`sys_mbox_vÆid
(
sys_mbox_t
 *
mbox
);

206 #i‚de‡
sys_mbox_£t_övÆid


208 
	`sys_mbox_£t_övÆid
(
sys_mbox_t
 *
mbox
);

218 
sys_thªad_t
 
	`sys_thªad_√w
(c⁄° *
«me
, 
lwù_thªad_‚
 
thªad
, *
¨g
, 
°acksize
, 
¥io
);

223 
	`sys_öô
();

225 #i‚de‡
sys_jiffõs


227 
u32_t
 
	`sys_jiffõs
();

232 
u32_t
 
	`sys_now
();

239 #i‚de‡
SYS_ARCH_PROTECT


245 #i‡
SYS_LIGHTWEIGHT_PROT


252 
	#SYS_ARCH_DECL_PROTECT
(
Àv
Ë
sys_¥Ÿ_t
 
	)
lev

262 
	#SYS_ARCH_PROTECT
(
Àv
ËÀv = 
	`sys_¨ch_¥Ÿe˘
()

	)

271 
	#SYS_ARCH_UNPROTECT
(
Àv
Ë
	`sys_¨ch_u≈rŸe˘
÷ev)

	)

272 
sys_¥Ÿ_t
 
	`sys_¨ch_¥Ÿe˘
();

273 
	`sys_¨ch_u≈rŸe˘
(
sys_¥Ÿ_t
 
pvÆ
);

277 
	#SYS_ARCH_DECL_PROTECT
(
Àv
)

	)

278 
	#SYS_ARCH_PROTECT
(
Àv
)

	)

279 
	#SYS_ARCH_UNPROTECT
(
Àv
)

	)

290 #i‚de‡
SYS_ARCH_INC


291 
	#SYS_ARCH_INC
(
v¨
, 
vÆ
) do { \

292 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
); \

293 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
); \

294 
v¨
 +
vÆ
; \

295 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
); \

296 } 0)

	)

299 #i‚de‡
SYS_ARCH_DEC


300 
	#SYS_ARCH_DEC
(
v¨
, 
vÆ
) do { \

301 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
); \

302 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
); \

303 
v¨
 -
vÆ
; \

304 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
); \

305 } 0)

	)

308 #i‚de‡
SYS_ARCH_GET


309 
	#SYS_ARCH_GET
(
v¨
, 
ªt
) do { \

310 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
); \

311 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
); \

312 
ªt
 = 
v¨
; \

313 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
); \

314 } 0)

	)

317 #i‚de‡
SYS_ARCH_SET


318 
	#SYS_ARCH_SET
(
v¨
, 
vÆ
) do { \

319 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
); \

320 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
); \

321 
v¨
 = 
vÆ
; \

322 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
); \

323 } 0)

	)

327 #ifde‡
__˝lu•lus


328 
	}
}

	@include/lwip/tcp.h

32 #i‚de‡
__LWIP_TCP_H__


33 
	#__LWIP_TCP_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_TCP


39 
	~"lwù/sys.h
"

40 
	~"lwù/mem.h
"

41 
	~"lwù/pbuf.h
"

42 
	~"lwù/ù.h
"

43 
	~"lwù/icmp.h
"

44 
	~"lwù/îr.h
"

46 #ifde‡
__˝lu•lus


50 
t˝_pcb
;

61 
îr_t
 (*
	tt˝_ac˚±_‚
)(*
	t¨g
, 
	tt˝_pcb
 *
	t√wpcb
, 
	tîr_t
 
	tîr
);

73 
îr_t
 (*
	tt˝_ªcv_‚
)(*
	t¨g
, 
	tt˝_pcb
 *
	tçcb
,

74 
	tpbuf
 *
	tp
, 
	tîr_t
 
	tîr
);

87 
îr_t
 (*
	tt˝_£¡_‚
)(*
	t¨g
, 
	tt˝_pcb
 *
	tçcb
,

88 
	tu16_t
 
	tÀn
);

99 
îr_t
 (*
	tt˝_pﬁl_‚
)(*
	t¨g
, 
	tt˝_pcb
 *
	tçcb
);

111 (*
t˝_îr_‚
)(*
	t¨g
, 
	tîr_t
 
	tîr
);

125 
îr_t
 (*
	tt˝_c⁄√˘ed_‚
)(*
	t¨g
, 
	tt˝_pcb
 *
	tçcb
, 
	tîr_t
 
	tîr
);

127 
	et˝_°©e
 {

128 
CLOSED
 = 0,

129 
LISTEN
 = 1,

130 
SYN_SENT
 = 2,

131 
SYN_RCVD
 = 3,

132 
ESTABLISHED
 = 4,

133 
FIN_WAIT_1
 = 5,

134 
FIN_WAIT_2
 = 6,

135 
CLOSE_WAIT
 = 7,

136 
CLOSING
 = 8,

137 
LAST_ACK
 = 9,

138 
TIME_WAIT
 = 10

141 #i‡
LWIP_CALLBACK_API


149 
	#DEF_ACCEPT_CALLBACK
 
t˝_ac˚±_‚
 
ac˚±
;

	)

151 
	#DEF_ACCEPT_CALLBACK


	)

157 
	#TCP_PCB_COMMON
(
ty≥
) \

158 
ty≥
 *
√xt
; \

159 
t˝_°©e
 
°©e
; \

160 
u8_t
 
¥io
; \

161 *
ˇŒback_¨g
; \

163 
DEF_ACCEPT_CALLBACK
 \

165 
u16_t
 
loˇl_p‹t


	)

169 
	st˝_pcb
 {

171 
IP_PCB
;

173 
TCP_PCB_COMMON
(
t˝_pcb
);

176 
u16_t
 
ªmŸe_p‹t
;

178 
u8_t
 
Êags
;

179 
	#TF_ACK_DELAY
 ((
u8_t
)0x01UË

	)

180 
	#TF_ACK_NOW
 ((
u8_t
)0x02UË

	)

181 
	#TF_INFR
 ((
u8_t
)0x04UË

	)

182 
	#TF_TIMESTAMP
 ((
u8_t
)0x08UË

	)

183 
	#TF_RXCLOSED
 ((
u8_t
)0x10UË

	)

184 
	#TF_FIN
 ((
u8_t
)0x20UË

	)

185 
	#TF_NODELAY
 ((
u8_t
)0x40UË

	)

186 
	#TF_NAGLEMEMERR
 ((
u8_t
)0x80UË

	)

191 
u32_t
 
rcv_nxt
;

192 
u16_t
 
rcv_wnd
;

193 
u16_t
 
rcv_™n_wnd
;

194 
u32_t
 
rcv_™n_right_edge
;

197 
u32_t
 
tmr
;

198 
u8_t
 
pﬁ…mr
, 
pﬁlöãrvÆ
;

201 
s16_t
 
πime
;

203 
u16_t
 
mss
;

206 
u32_t
 
πã°
;

207 
u32_t
 
π£q
;

208 
s16_t
 
ß
, 
sv
;

210 
s16_t
 
πo
;

211 
u8_t
 
ƒtx
;

214 
u32_t
 
œ°ack
;

215 
u8_t
 
du∑cks
;

218 
u16_t
 
cwnd
;

219 
u16_t
 
s°hªsh
;

222 
u32_t
 
¢d_nxt
;

223 
u16_t
 
¢d_wnd
;

224 
u32_t
 
¢d_wl1
, 
¢d_wl2
;

226 
u32_t
 
¢d_lbb
;

228 
u16_t
 
acked
;

230 
u16_t
 
¢d_buf
;

231 
	#TCP_SNDQUEUELEN_OVERFLOW
 (0xffffU-3)

	)

232 
u16_t
 
¢d_queuñí
;

234 #i‡
TCP_OVERSIZE


236 
u16_t
 
un£¡_ovîsize
;

240 
t˝_£g
 *
un£¡
;

241 
t˝_£g
 *
u«cked
;

242 #i‡
TCP_QUEUE_OOSEQ


243 
t˝_£g
 *
oo£q
;

246 
pbuf
 *
ªfu£d_d©a
;

248 #i‡
LWIP_CALLBACK_API


250 
t˝_£¡_‚
 
£¡
;

252 
t˝_ªcv_‚
 
ªcv
;

254 
t˝_c⁄√˘ed_‚
 
c⁄√˘ed
;

256 
t˝_pﬁl_‚
 
pﬁl
;

258 
t˝_îr_‚
 
îrf
;

261 #i‡
LWIP_TCP_TIMESTAMPS


262 
u32_t
 
ts_œ°ack£¡
;

263 
u32_t
 
ts_ª˚¡
;

267 
u32_t
 
kìp_idÀ
;

268 #i‡
LWIP_TCP_KEEPALIVE


269 
u32_t
 
kìp_ötvl
;

270 
u32_t
 
kìp_˙t
;

274 
u32_t
 
≥rsi°_˙t
;

276 
u8_t
 
≥rsi°_backoff
;

279 
u8_t
 
kìp_˙t_£¡
;

282 
	st˝_pcb_li°í
 {

284 
IP_PCB
;

286 
TCP_PCB_COMMON
(
t˝_pcb_li°í
);

288 #i‡
TCP_LISTEN_BACKLOG


289 
u8_t
 
backlog
;

290 
u8_t
 
ac˚±s_≥ndög
;

294 #i‡
LWIP_EVENT_API


296 
	elwù_evít
 {

297 
LWIP_EVENT_ACCEPT
,

298 
LWIP_EVENT_SENT
,

299 
LWIP_EVENT_RECV
,

300 
LWIP_EVENT_CONNECTED
,

301 
LWIP_EVENT_POLL
,

302 
LWIP_EVENT_ERR


305 
îr_t
 
lwù_t˝_evít
(*
¨g
, 
t˝_pcb
 *
pcb
,

306 
lwù_evít
,

307 
pbuf
 *
p
,

308 
u16_t
 
size
,

309 
îr_t
 
îr
);

314 
t˝_pcb
 * 
t˝_√w
 ();

316 
t˝_¨g
 (
t˝_pcb
 *
pcb
, *
¨g
);

317 
t˝_ac˚±
 (
t˝_pcb
 *
pcb
, 
t˝_ac˚±_‚
 
ac˚±
);

318 
t˝_ªcv
 (
t˝_pcb
 *
pcb
, 
t˝_ªcv_‚
 
ªcv
);

319 
t˝_£¡
 (
t˝_pcb
 *
pcb
, 
t˝_£¡_‚
 
£¡
);

320 
t˝_pﬁl
 (
t˝_pcb
 *
pcb
, 
t˝_pﬁl_‚
 
pﬁl
, 
u8_t
 
öãrvÆ
);

321 
t˝_îr
 (
t˝_pcb
 *
pcb
, 
t˝_îr_‚
 
îr
);

323 
	#t˝_mss
(
pcb
Ë((’cb)->
Êags
 & 
TF_TIMESTAMP
Ë? (’cb)->
mss
 - 12Ë: (pcb)->mss)

	)

324 
	#t˝_¢dbuf
(
pcb
Ë(’cb)->
¢d_buf
)

	)

325 
	#t˝_¢dqueuñí
(
pcb
Ë(’cb)->
¢d_queuñí
)

	)

326 
	#t˝_«gÀ_dißbÀ
(
pcb
Ë(’cb)->
Êags
 |
TF_NODELAY
)

	)

327 
	#t˝_«gÀ_íabÀ
(
pcb
Ë(’cb)->
Êags
 &~
TF_NODELAY
)

	)

328 
	#t˝_«gÀ_dißbÀd
(
pcb
Ë((’cb)->
Êags
 & 
TF_NODELAY
Ë!0)

	)

330 #i‡
TCP_LISTEN_BACKLOG


331 
	#t˝_ac˚±ed
(
pcb
) do { \

332 
	`LWIP_ASSERT
("pcb->°©ê=LISTEN (ˇŒed f‹ wr⁄gÖcb?)", 
pcb
->
°©e
 =
LISTEN
); \

333 (((
t˝_pcb_li°í
 *)(
pcb
))->
ac˚±s_≥ndög
--); } 0)

	)

335 
	#t˝_ac˚±ed
(
pcb
Ë
	`LWIP_ASSERT
("pcb->state == LISTEN (called for wrongÖcb?)", \

336 
pcb
->
°©e
 =
LISTEN
)

	)

339 
t˝_ªcved
 (
t˝_pcb
 *
pcb
, 
u16_t
 
Àn
);

340 
îr_t
 
t˝_böd
 (
t˝_pcb
 *
pcb
, 
ù_addr_t
 *
ùaddr
,

341 
u16_t
 
p‹t
);

342 
îr_t
 
t˝_c⁄√˘
 (
t˝_pcb
 *
pcb
, 
ù_addr_t
 *
ùaddr
,

343 
u16_t
 
p‹t
, 
t˝_c⁄√˘ed_‚
 
c⁄√˘ed
);

345 
t˝_pcb
 * 
t˝_li°í_wôh_backlog
(t˝_pcb *
pcb
, 
u8_t
 
backlog
);

346 
	#t˝_li°í
(
pcb
Ë
	`t˝_li°í_wôh_backlog
’cb, 
TCP_DEFAULT_LISTEN_BACKLOG
)

	)

348 
t˝_ab‹t
 (
t˝_pcb
 *
pcb
);

349 
îr_t
 
t˝_˛o£
 (
t˝_pcb
 *
pcb
);

350 
îr_t
 
t˝_shutdown
(
t˝_pcb
 *
pcb
, 
shut_rx
, 
shut_tx
);

353 
	#TCP_WRITE_FLAG_COPY
 0x01

	)

354 
	#TCP_WRITE_FLAG_MORE
 0x02

	)

356 
îr_t
 
t˝_wrôe
 (
t˝_pcb
 *
pcb
, c⁄° *
d©≠å
, 
u16_t
 
Àn
,

357 
u8_t
 
≠iÊags
);

359 
t˝_£çrio
 (
t˝_pcb
 *
pcb
, 
u8_t
 
¥io
);

361 
	#TCP_PRIO_MIN
 1

	)

362 
	#TCP_PRIO_NORMAL
 64

	)

363 
	#TCP_PRIO_MAX
 127

	)

365 
îr_t
 
t˝_ouçut
 (
t˝_pcb
 *
pcb
);

368 c⁄° * 
t˝_debug_°©e_°r
(
t˝_°©e
 
s
);

371 #ifde‡
__˝lu•lus


	@include/lwip/tcp_impl.h

32 #i‚de‡
__LWIP_TCP_IMPL_H__


33 
	#__LWIP_TCP_IMPL_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_TCP


39 
	~"lwù/t˝.h
"

40 
	~"lwù/sys.h
"

41 
	~"lwù/mem.h
"

42 
	~"lwù/pbuf.h
"

43 
	~"lwù/ù.h
"

44 
	~"lwù/icmp.h
"

45 
	~"lwù/îr.h
"

47 #ifde‡
__˝lu•lus


54 
	#t˝_öô
(Ë

	)

55 
t˝_tmr
 ();

60 
t˝_¶owtmr
 ();

61 
t˝_Á°tmr
 ();

65 
t˝_öput
 (
pbuf
 *
p
, 
√tif
 *
öp
);

67 
t˝_pcb
 * 
t˝_Æloc
 (
u8_t
 
¥io
);

68 
t˝_ab™d⁄
 (
t˝_pcb
 *
pcb
, 
ª£t
);

69 
îr_t
 
t˝_£nd_em±y_ack
(
t˝_pcb
 *
pcb
);

70 
t˝_ªxmô
 (
t˝_pcb
 *
pcb
);

71 
t˝_ªxmô_πo
 (
t˝_pcb
 *
pcb
);

72 
t˝_ªxmô_Á°
 (
t˝_pcb
 *
pcb
);

73 
u32_t
 
t˝_upd©e_rcv_™n_wnd
(
t˝_pcb
 *
pcb
);

84 
	#t˝_do_ouçut_«gÀ
(
çcb
Ë(((—pcb)->
u«cked
 =
NULL
) || \

85 ((
çcb
)->
Êags
 & (
TF_NODELAY
 | 
TF_INFR
)) || \

86 (((
çcb
)->
un£¡
 !
NULL
Ë&& ((—pcb)->un£¡->
√xt
 != NULL) || \

87 ((
çcb
)->
un£¡
->
Àn
 >—pcb)->
mss
))) \

88 Ë? 1 : 0)

	)

89 
	#t˝_ouçut_«gÀ
(
çcb
Ë(
	`t˝_do_ouçut_«gÀ
—pcbË? 
	`t˝_ouçut
—pcbË: 
ERR_OK
)

	)

92 
	#TCP_SEQ_LT
(
a
,
b
Ë((
s32_t
)(◊)-(b)Ë< 0)

	)

93 
	#TCP_SEQ_LEQ
(
a
,
b
Ë((
s32_t
)(◊)-(b)Ë<0)

	)

94 
	#TCP_SEQ_GT
(
a
,
b
Ë((
s32_t
)(◊)-(b)Ë> 0)

	)

95 
	#TCP_SEQ_GEQ
(
a
,
b
Ë((
s32_t
)(◊)-(b)Ë>0)

	)

98 
	#TCP_SEQ_BETWEEN
(
a
,
b
,
c
Ë((c)-(bË>◊)-(b))

	)

100 
	#TCP_SEQ_BETWEEN
(
a
,
b
,
c
Ë(
	`TCP_SEQ_GEQ
◊,bË&& 
	`TCP_SEQ_LEQ
◊,c))

	)

101 
	#TCP_FIN
 0x01U

	)

102 
	#TCP_SYN
 0x02U

	)

103 
	#TCP_RST
 0x04U

	)

104 
	#TCP_PSH
 0x08U

	)

105 
	#TCP_ACK
 0x10U

	)

106 
	#TCP_URG
 0x20U

	)

107 
	#TCP_ECE
 0x40U

	)

108 
	#TCP_CWR
 0x80U

	)

110 
	#TCP_FLAGS
 0x3fU

	)

113 
	#TCP_HLEN
 20

	)

115 #i‚de‡
TCP_TMR_INTERVAL


116 
	#TCP_TMR_INTERVAL
 250

	)

119 #i‚de‡
TCP_FAST_INTERVAL


120 
	#TCP_FAST_INTERVAL
 
TCP_TMR_INTERVAL


	)

123 #i‚de‡
TCP_SLOW_INTERVAL


124 
	#TCP_SLOW_INTERVAL
 (2*
TCP_TMR_INTERVAL
Ë

	)

127 
	#TCP_FIN_WAIT_TIMEOUT
 20000

	)

128 
	#TCP_SYN_RCVD_TIMEOUT
 20000

	)

130 
	#TCP_OOSEQ_TIMEOUT
 6U

	)

132 #i‚de‡
TCP_MSL


133 
	#TCP_MSL
 60000UL

	)

137 #i‚de‡ 
TCP_KEEPIDLE_DEFAULT


138 
	#TCP_KEEPIDLE_DEFAULT
 7200000UL

	)

141 #i‚de‡ 
TCP_KEEPINTVL_DEFAULT


142 
	#TCP_KEEPINTVL_DEFAULT
 75000UL

	)

145 #i‚de‡ 
TCP_KEEPCNT_DEFAULT


146 
	#TCP_KEEPCNT_DEFAULT
 9U

	)

149 
	#TCP_MAXIDLE
 
TCP_KEEPCNT_DEFAULT
 * 
TCP_KEEPINTVL_DEFAULT


	)

154 #ifde‡
PACK_STRUCT_USE_INCLUDES


155 
	~"¨ch/bp°ru˘.h
"

157 
PACK_STRUCT_BEGIN


158 
	st˝_hdr
 {

159 
PACK_STRUCT_FIELD
(
u16_t
 
§c
);

160 
PACK_STRUCT_FIELD
(
u16_t
 
de°
);

161 
PACK_STRUCT_FIELD
(
u32_t
 
£qno
);

162 
PACK_STRUCT_FIELD
(
u32_t
 
ackno
);

163 
PACK_STRUCT_FIELD
(
u16_t
 
_hdæí_rsvd_Êags
);

164 
PACK_STRUCT_FIELD
(
u16_t
 
wnd
);

165 
PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

166 
PACK_STRUCT_FIELD
(
u16_t
 
urgp
);

167 } 
PACK_STRUCT_STRUCT
;

168 
PACK_STRUCT_END


169 #ifde‡
PACK_STRUCT_USE_INCLUDES


170 
	~"¨ch/ï°ru˘.h
"

173 
	#TCPH_OFFSET
(
phdr
Ë(
	`¡ohs
(’hdr)->
_hdæí_rsvd_Êags
Ë>> 8)

	)

174 
	#TCPH_HDRLEN
(
phdr
Ë(
	`¡ohs
(’hdr)->
_hdæí_rsvd_Êags
Ë>> 12)

	)

175 
	#TCPH_FLAGS
(
phdr
Ë(
	`¡ohs
(’hdr)->
_hdæí_rsvd_Êags
Ë& 
TCP_FLAGS
)

	)

177 
	#TCPH_OFFSET_SET
(
phdr
, 
off£t
Ë’hdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
(((off£tË<< 8Ë| 
	`TCPH_FLAGS
’hdr))

	)

178 
	#TCPH_HDRLEN_SET
(
phdr
, 
Àn
Ë’hdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
((÷íË<< 12Ë| 
	`TCPH_FLAGS
’hdr))

	)

179 
	#TCPH_FLAGS_SET
(
phdr
, 
Êags
Ë’hdr)->
_hdæí_rsvd_Êags
 = ((’hdr)->_hdæí_rsvd_Êag†& 
	`PP_HTONS
((
u16_t
)(~(u16_t)(
TCP_FLAGS
)))Ë| 
	`ht⁄s
(Êags))

	)

180 
	#TCPH_HDRLEN_FLAGS_SET
(
phdr
, 
Àn
, 
Êags
Ë’hdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
((÷íË<< 12Ë| (Êags))

	)

182 
	#TCPH_SET_FLAG
(
phdr
, 
Êags
 ) (phdr)->
_hdæí_rsvd_Êags
 = (’hdr)->_hdæí_rsvd_Êag†| 
	`ht⁄s
(Êags))

	)

183 
	#TCPH_UNSET_FLAG
(
phdr
, 
Êags
Ë’hdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
(
	`¡ohs
(’hdr)->_hdæí_rsvd_ÊagsË| (
	`TCPH_FLAGS
’hdrË& ~(Êags)Ë)

	)

185 
	#TCP_TCPLEN
(
£g
Ë((£g)->
Àn
 + ((
	`TCPH_FLAGS
((£g)->
t˝hdr
Ë& (
TCP_FIN
 | 
TCP_SYN
)Ë!0))

	)

189 
	#TF_RESET
 (
u8_t
)0x08U

	)

190 
	#TF_CLOSED
 (
u8_t
)0x10U

	)

191 
	#TF_GOT_FIN
 (
u8_t
)0x20U

	)

194 #i‡
LWIP_EVENT_API


196 
	#TCP_EVENT_ACCEPT
(
pcb
,
îr
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

197 
LWIP_EVENT_ACCEPT
, 
NULL
, 0, 
îr
)

	)

198 
	#TCP_EVENT_SENT
(
pcb
,
•a˚
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

199 
LWIP_EVENT_SENT
, 
NULL
, 
•a˚
, 
ERR_OK
)

	)

200 
	#TCP_EVENT_RECV
(
pcb
,
p
,
îr
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

201 
LWIP_EVENT_RECV
, (
p
), 0, (
îr
))

	)

202 
	#TCP_EVENT_CLOSED
(
pcb
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

203 
LWIP_EVENT_RECV
, 
NULL
, 0, 
ERR_OK
)

	)

204 
	#TCP_EVENT_CONNECTED
(
pcb
,
îr
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

205 
LWIP_EVENT_CONNECTED
, 
NULL
, 0, (
îr
))

	)

206 
	#TCP_EVENT_POLL
(
pcb
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

207 
LWIP_EVENT_POLL
, 
NULL
, 0, 
ERR_OK
)

	)

208 
	#TCP_EVENT_ERR
(
îrf
,
¨g
,
îr
Ë
	`lwù_t˝_evít
(◊rg), 
NULL
, \

209 
LWIP_EVENT_ERR
, 
NULL
, 0, (
îr
))

	)

213 
	#TCP_EVENT_ACCEPT
(
pcb
,
îr
,
ªt
) \

215 if((
pcb
)->
ac˚±
 !
NULL
) \

216 (
ªt
Ë(
pcb
)->
	`ac˚±
(’cb)->
ˇŒback_¨g
,’cb),(
îr
)); \

217 (
ªt
Ë
ERR_ARG
; \

218 } 0)

	)

220 
	#TCP_EVENT_SENT
(
pcb
,
•a˚
,
ªt
) \

222 if((
pcb
)->
£¡
 !
NULL
) \

223 (
ªt
Ë(
pcb
)->
	`£¡
(’cb)->
ˇŒback_¨g
,’cb),(
•a˚
)); \

224 (
ªt
Ë
ERR_OK
; \

225 } 0)

	)

227 
	#TCP_EVENT_RECV
(
pcb
,
p
,
îr
,
ªt
) \

229 if((
pcb
)->
ªcv
 !
NULL
) { \

230 (
ªt
Ë(
pcb
)->
	`ªcv
(’cb)->
ˇŒback_¨g
,’cb),(
p
),(
îr
));\

232 (
ªt
Ë
	`t˝_ªcv_nuŒ
(
NULL
, (
pcb
), (
p
), (
îr
)); \

234 } 0)

	)

236 
	#TCP_EVENT_CLOSED
(
pcb
,
ªt
) \

238 if(((
pcb
)->
ªcv
 !
NULL
)) { \

239 (
ªt
Ë(
pcb
)->
	`ªcv
(’cb)->
ˇŒback_¨g
,’cb),
NULL
,
ERR_OK
);\

241 (
ªt
Ë
ERR_OK
; \

243 } 0)

	)

245 
	#TCP_EVENT_CONNECTED
(
pcb
,
îr
,
ªt
) \

247 if((
pcb
)->
c⁄√˘ed
 !
NULL
) \

248 (
ªt
Ë(
pcb
)->
	`c⁄√˘ed
(’cb)->
ˇŒback_¨g
,’cb),(
îr
)); \

249 (
ªt
Ë
ERR_OK
; \

250 } 0)

	)

252 
	#TCP_EVENT_POLL
(
pcb
,
ªt
) \

254 if((
pcb
)->
pﬁl
 !
NULL
) \

255 (
ªt
Ë(
pcb
)->
	`pﬁl
(’cb)->
ˇŒback_¨g
,(pcb)); \

256 (
ªt
Ë
ERR_OK
; \

257 } 0)

	)

259 
	#TCP_EVENT_ERR
(
îrf
,
¨g
,
îr
) \

261 if((
îrf
Ë!
NULL
) \

262 (
îrf
)((
¨g
),(
îr
)); \

263 } 0)

	)

268 #i‡
TCP_OVERSIZE
 && 
deföed
(
LWIP_DEBUG
)

269 
	#TCP_OVERSIZE_DBGCHECK
 1

	)

271 
	#TCP_OVERSIZE_DBGCHECK
 0

	)

275 
	#TCP_CHECKSUM_ON_COPY
 (
LWIP_CHECKSUM_ON_COPY
 && 
CHECKSUM_GEN_TCP
)

	)

278 
	st˝_£g
 {

279 
t˝_£g
 *
√xt
;

280 
pbuf
 *
p
;

281 
u16_t
 
Àn
;

282 #i‡
TCP_OVERSIZE_DBGCHECK


283 
u16_t
 
ovîsize_À·
;

287 #i‡
TCP_CHECKSUM_ON_COPY


288 
u16_t
 
chksum
;

289 
u8_t
 
chksum_sw≠≥d
;

291 
u8_t
 
Êags
;

292 
	#TF_SEG_OPTS_MSS
 (
u8_t
)0x01U

	)

293 
	#TF_SEG_OPTS_TS
 (
u8_t
)0x02U

	)

294 
	#TF_SEG_DATA_CHECKSUMMED
 (
u8_t
)0x04U

	)

296 
t˝_hdr
 *
t˝hdr
;

299 
	#LWIP_TCP_OPT_LENGTH
(
Êags
) \

300 (
Êags
 & 
TF_SEG_OPTS_MSS
 ? 4 : 0) + \

301 (
Êags
 & 
TF_SEG_OPTS_TS
 ? 12 : 0)

	)

304 
	#TCP_BUILD_MSS_OPTION
(
x
Ë(xË
	`PP_HTONL
(((
u32_t
)2 << 24) | \

305 ((
u32_t
)4 << 16) | \

306 (((
u32_t
)
TCP_MSS
 / 256) << 8) | \

307 (
TCP_MSS
 & 255))

	)

310 
t˝_pcb
 *
t˝_öput_pcb
;

311 
u32_t
 
t˝_ticks
;

314 
	ut˝_li°í_pcbs_t
 {

315 
t˝_pcb_li°í
 *
	gli°í_pcbs
;

316 
t˝_pcb
 *
	gpcbs
;

318 
t˝_pcb
 *
t˝_bound_pcbs
;

319 
t˝_li°í_pcbs_t
 
t˝_li°í_pcbs
;

320 
t˝_pcb
 *
t˝_a˘ive_pcbs
;

323 
t˝_pcb
 *
t˝_tw_pcbs
;

325 
t˝_pcb
 *
t˝_tmp_pcb
;

335 #i‚de‡
TCP_DEBUG_PCB_LISTS


336 
	#TCP_DEBUG_PCB_LISTS
 0

	)

338 #i‡
TCP_DEBUG_PCB_LISTS


339 
	#TCP_REG
(
pcbs
, 
≈cb
) do {\

340 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP_REG %∞loˇ»p‹à%d\n", (
≈cb
), (≈cb)->
loˇl_p‹t
)); \

341 
t˝_tmp_pcb
 = *(
pcbs
); \

342 
t˝_tmp_pcb
 !
NULL
; \

343 
t˝_tmp_pcb
 =Å˝_tmp_pcb->
√xt
) { \

344 
	`LWIP_ASSERT
("TCP_REG:áÃódyÑegi°îed\n", 
t˝_tmp_pcb
 !(
≈cb
)); \

346 
	`LWIP_ASSERT
("TCP_REG:Öcb->°©ê!CLOSED", ((
pcbs
Ë=&
t˝_bound_pcbs
Ë|| ((
≈cb
)->
°©e
 !
CLOSED
)); \

347 (
≈cb
)->
√xt
 = *(
pcbs
); \

348 
	`LWIP_ASSERT
("TCP_REG:Çpcb->√xà!≈cb", (
≈cb
)->
√xt
 != (npcb)); \

349 *(
pcbs
Ë(
≈cb
); \

350 
	`LWIP_ASSERT
("TCP_RMV:Å˝_pcb†ß√", 
	`t˝_pcbs_ß√
()); \

351 
	`t˝_timî_√eded
(); \

352 } 0)

	)

353 
	#TCP_RMV
(
pcbs
, 
≈cb
) do { \

354 
	`LWIP_ASSERT
("TCP_RMV:Öcb†!NULL", *(
pcbs
Ë!
NULL
); \

355 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP_RMV:Ñemovög %∞‰om %p\n", (
≈cb
), *(
pcbs
))); \

356 if(*(
pcbs
Ë=(
≈cb
)) { \

357 *(
pcbs
Ë(*pcbs)->
√xt
; \

358 } 
t˝_tmp_pcb
 = *(
pcbs
);Å˝_tmp_pcb !
NULL
;Å˝_tmp_pcb =Å˝_tmp_pcb->
√xt
) { \

359 if(
t˝_tmp_pcb
->
√xt
 =(
≈cb
)) { \

360 
t˝_tmp_pcb
->
√xt
 = (
≈cb
)->next; \

364 (
≈cb
)->
√xt
 = 
NULL
; \

365 
	`LWIP_ASSERT
("TCP_RMV:Å˝_pcb†ß√", 
	`t˝_pcbs_ß√
()); \

366 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP_RMV:Ñemoved %∞‰om %p\n", (
≈cb
), *(
pcbs
))); \

367 } 0)

	)

371 
	#TCP_REG
(
pcbs
, 
≈cb
) \

373 (
≈cb
)->
√xt
 = *
pcbs
; \

374 *(
pcbs
Ë(
≈cb
); \

375 
	`t˝_timî_√eded
(); \

376 } 0)

	)

378 
	#TCP_RMV
(
pcbs
, 
≈cb
) \

380 if(*(
pcbs
Ë=(
≈cb
)) { \

381 (*(
pcbs
)Ë(*pcbs)->
√xt
; \

384 
t˝_tmp_pcb
 = *
pcbs
; \

385 
t˝_tmp_pcb
 !
NULL
; \

386 
t˝_tmp_pcb
 =Å˝_tmp_pcb->
√xt
) { \

387 if(
t˝_tmp_pcb
->
√xt
 =(
≈cb
)) { \

388 
t˝_tmp_pcb
->
√xt
 = (
≈cb
)->next; \

393 (
≈cb
)->
√xt
 = 
NULL
; \

394 } 0)

	)

400 
t˝_pcb
 *
t˝_pcb_c›y
(t˝_pcb *
pcb
);

401 
t˝_pcb_purge
(
t˝_pcb
 *
pcb
);

402 
t˝_pcb_ªmove
(
t˝_pcb
 **
pcbli°
, t˝_pcb *
pcb
);

404 
t˝_£gs_‰ì
(
t˝_£g
 *
£g
);

405 
t˝_£g_‰ì
(
t˝_£g
 *
£g
);

406 
t˝_£g
 *
t˝_£g_c›y
(t˝_£g *
£g
);

408 
	#t˝_ack
(
pcb
) \

410 if((
pcb
)->
Êags
 & 
TF_ACK_DELAY
) { \

411 (
pcb
)->
Êags
 &~
TF_ACK_DELAY
; \

412 (
pcb
)->
Êags
 |
TF_ACK_NOW
; \

415 (
pcb
)->
Êags
 |
TF_ACK_DELAY
; \

417 } 0)

	)

419 
	#t˝_ack_now
(
pcb
) \

421 (
pcb
)->
Êags
 |
TF_ACK_NOW
; \

422 } 0)

	)

424 
îr_t
 
t˝_£nd_fö
(
t˝_pcb
 *
pcb
);

425 
îr_t
 
t˝_íqueue_Êags
(
t˝_pcb
 *
pcb
, 
u8_t
 
Êags
);

427 
t˝_ªxmô_£g
(
t˝_pcb
 *
pcb
, 
t˝_£g
 *
£g
);

429 
t˝_r°
(
u32_t
 
£qno
, u32_à
ackno
,

430 
ù_addr_t
 *
loˇl_ù
, ip_addr_à*
ªmŸe_ù
,

431 
u16_t
 
loˇl_p‹t
, u16_à
ªmŸe_p‹t
);

433 
u32_t
 
t˝_√xt_iss
();

435 
t˝_kì∑live
(
t˝_pcb
 *
pcb
);

436 
t˝_zîo_wödow_¥obe
(
t˝_pcb
 *
pcb
);

438 #i‡
TCP_CALCULATE_EFF_SEND_MSS


439 
u16_t
 
t˝_eff_£nd_mss
(u16_à
£ndmss
, 
ù_addr_t
 *
addr
);

442 #i‡
LWIP_CALLBACK_API


443 
îr_t
 
t˝_ªcv_nuŒ
(*
¨g
, 
t˝_pcb
 *
pcb
, 
pbuf
 *
p
,Éº_à
îr
);

446 #i‡
TCP_DEBUG
 || 
TCP_INPUT_DEBUG
 || 
TCP_OUTPUT_DEBUG


447 
t˝_debug_¥öt
(
t˝_hdr
 *
t˝hdr
);

448 
t˝_debug_¥öt_Êags
(
u8_t
 
Êags
);

449 
t˝_debug_¥öt_°©e
(
t˝_°©e
 
s
);

450 
t˝_debug_¥öt_pcbs
();

451 
s16_t
 
t˝_pcbs_ß√
();

453 
	#t˝_debug_¥öt
(
t˝hdr
)

	)

454 
	#t˝_debug_¥öt_Êags
(
Êags
)

	)

455 
	#t˝_debug_¥öt_°©e
(
s
)

	)

456 
	#t˝_debug_¥öt_pcbs
()

	)

457 
	#t˝_pcbs_ß√
(Ë1

	)

462 
t˝_timî_√eded
();

465 #ifde‡
__˝lu•lus


	@include/lwip/tcpip.h

32 #i‚de‡
__LWIP_TCPIP_H__


33 
	#__LWIP_TCPIP_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡!
NO_SYS


39 
	~"lwù/≠i_msg.h
"

40 
	~"lwù/√tiÁpi.h
"

41 
	~"lwù/pbuf.h
"

42 
	~"lwù/≠i.h
"

43 
	~"lwù/sys.h
"

44 
	~"lwù/timîs.h
"

45 
	~"lwù/√tif.h
"

47 #ifde‡
__˝lu•lus


53 #i‚de‡
LWIP_TCPIP_THREAD_ALIVE


54 
	#LWIP_TCPIP_THREAD_ALIVE
()

	)

57 #i‡
LWIP_TCPIP_CORE_LOCKING


59 
sys_muãx_t
 
lock_t˝ù_c‹e
;

60 
	#LOCK_TCPIP_CORE
(Ë
	`sys_muãx_lock
(&
lock_t˝ù_c‹e
)

	)

61 
	#UNLOCK_TCPIP_CORE
(Ë
	`sys_muãx_u∆ock
(&
lock_t˝ù_c‹e
)

	)

62 
	#TCPIP_APIMSG
(
m
Ë
	`t˝ù_≠imsg_lock
(m)

	)

63 
	#TCPIP_APIMSG_ACK
(
m
)

	)

64 
	#TCPIP_NETIFAPI
(
m
Ë
	`t˝ù_√tiÁpi_lock
(m)

	)

65 
	#TCPIP_NETIFAPI_ACK
(
m
)

	)

67 
	#LOCK_TCPIP_CORE
()

	)

68 
	#UNLOCK_TCPIP_CORE
()

	)

69 
	#TCPIP_APIMSG
(
m
Ë
	`t˝ù_≠imsg
(m)

	)

70 
	#TCPIP_APIMSG_ACK
(
m
Ë
	`sys_£m_sig«l
(&m->
c⁄n
->
›_com∂ëed
)

	)

71 
	#TCPIP_NETIFAPI
(
m
Ë
	`t˝ù_√tiÁpi
(m)

	)

72 
	#TCPIP_NETIFAPI_ACK
(
m
Ë
	`sys_£m_sig«l
(&m->
£m
)

	)

76 (*
	gt˝ù_öô_d⁄e_‚
)(*
	t¨g
);

78 (*
	gt˝ù_ˇŒback_‚
)(*
	t˘x
);

80 
t˝ù_öô
(
t˝ù_öô_d⁄e_‚
 
t˝ù_öô_d⁄e
, *
¨g
);

82 #i‡
LWIP_NETCONN


83 
îr_t
 
t˝ù_≠imsg
(
≠i_msg
 *
≠imsg
);

84 #i‡
LWIP_TCPIP_CORE_LOCKING


85 
îr_t
 
t˝ù_≠imsg_lock
(
≠i_msg
 *
≠imsg
);

89 
îr_t
 
t˝ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

91 #i‡
LWIP_NETIF_API


92 
îr_t
 
t˝ù_√tiÁpi
(
√tiÁpi_msg
 *
√tiÁpimsg
);

93 #i‡
LWIP_TCPIP_CORE_LOCKING


94 
îr_t
 
t˝ù_√tiÁpi_lock
(
√tiÁpi_msg
 *
√tiÁpimsg
);

98 
îr_t
 
t˝ù_ˇŒback_wôh_block
(
t˝ù_ˇŒback_‚
 
fun˘i⁄
, *
˘x
, 
u8_t
 
block
);

99 
	#t˝ù_ˇŒback
(
f
, 
˘x
Ë
	`t˝ù_ˇŒback_wôh_block
(f, ctx, 1)

	)

102 
îr_t
 
pbuf_‰ì_ˇŒback
(
pbuf
 *
p
);

103 
îr_t
 
mem_‰ì_ˇŒback
(*
m
);

105 #i‡
LWIP_TCPIP_TIMEOUT


106 
îr_t
 
t˝ù_timeout
(
u32_t
 
m£cs
, 
sys_timeout_h™dÀr
 
h
, *
¨g
);

107 
îr_t
 
t˝ù_u¡imeout
(
sys_timeout_h™dÀr
 
h
, *
¨g
);

110 
	et˝ù_msg_ty≥
 {

111 #i‡
LWIP_NETCONN


112 
	gTCPIP_MSG_API
,

114 
	gTCPIP_MSG_INPKT
,

115 #i‡
LWIP_NETIF_API


116 
	gTCPIP_MSG_NETIFAPI
,

118 #i‡
LWIP_TCPIP_TIMEOUT


119 
	gTCPIP_MSG_TIMEOUT
,

120 
	gTCPIP_MSG_UNTIMEOUT
,

122 
	gTCPIP_MSG_CALLBACK


125 
	st˝ù_msg
 {

126 
t˝ù_msg_ty≥
 
	gty≥
;

127 
sys_£m_t
 *
	g£m
;

129 #i‡
LWIP_NETCONN


130 
≠i_msg
 *
	g≠imsg
;

132 #i‡
LWIP_NETIF_API


133 
√tiÁpi_msg
 *
	g√tiÁpimsg
;

136 
pbuf
 *
	gp
;

137 
√tif
 *
	g√tif
;

138 } 
	göp
;

140 
t˝ù_ˇŒback_‚
 
	gfun˘i⁄
;

141 *
	g˘x
;

142 } 
	gcb
;

143 #i‡
LWIP_TCPIP_TIMEOUT


145 
u32_t
 
	gm£cs
;

146 
sys_timeout_h™dÀr
 
	gh
;

147 *
	g¨g
;

148 } 
	gtmo
;

150 } 
	gmsg
;

153 #ifde‡
__˝lu•lus


	@include/lwip/timers.h

33 #i‚de‡
__LWIP_TIMERS_H__


34 
	#__LWIP_TIMERS_H__


	)

36 
	~"lwù/›t.h
"

39 
	#LWIP_TIMERS
 (!
NO_SYS
 || (NO_SYS && !
NO_SYS_NO_TIMERS
))

	)

41 #i‡
LWIP_TIMERS


43 
	~"lwù/îr.h
"

44 
	~"lwù/sys.h
"

46 #ifde‡
__˝lu•lus


50 #i‚de‡
LWIP_DEBUG_TIMERNAMES


51 #ifde‡
LWIP_DEBUG


52 
	#LWIP_DEBUG_TIMERNAMES
 
SYS_DEBUG


	)

54 
	#LWIP_DEBUG_TIMERNAMES
 0

	)

63 (* 
sys_timeout_h™dÀr
)(*
	t¨g
);

65 
	ssys_timeo
 {

66 
sys_timeo
 *
√xt
;

67 
u32_t
 
time
;

68 
sys_timeout_h™dÀr
 
h
;

69 *
¨g
;

70 #i‡
LWIP_DEBUG_TIMERNAMES


71 c⁄° * 
h™dÀr_«me
;

75 
sys_timeouts_öô
();

77 #i‡
LWIP_DEBUG_TIMERNAMES


78 
sys_timeout_debug
(
u32_t
 
m£cs
, 
sys_timeout_h™dÀr
 
h™dÀr
, *
¨g
, c⁄° * 
h™dÀr_«me
);

79 
	#sys_timeout
(
m£cs
, 
h™dÀr
, 
¨g
Ë
	`sys_timeout_debug
(m£cs, h™dÀr,árg, #h™dÀr)

	)

81 
sys_timeout
(
u32_t
 
m£cs
, 
sys_timeout_h™dÀr
 
h™dÀr
, *
¨g
);

84 
sys_u¡imeout
(
sys_timeout_h™dÀr
 
h™dÀr
, *
¨g
);

85 #i‡
NO_SYS


86 
sys_check_timeouts
();

87 
sys_ª°¨t_timeouts
();

89 
sys_timeouts_mbox_„tch
(
sys_mbox_t
 *
mbox
, **
msg
);

93 #ifde‡
__˝lu•lus


	@include/lwip/udp.h

32 #i‚de‡
__LWIP_UDP_H__


33 
	#__LWIP_UDP_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_UDP


39 
	~"lwù/pbuf.h
"

40 
	~"lwù/√tif.h
"

41 
	~"lwù/ù_addr.h
"

42 
	~"lwù/ù.h
"

44 #ifde‡
__˝lu•lus


48 
	#UDP_HLEN
 8

	)

51 #ifde‡
PACK_STRUCT_USE_INCLUDES


52 
	~"¨ch/bp°ru˘.h
"

54 
PACK_STRUCT_BEGIN


55 
	sudp_hdr
 {

56 
PACK_STRUCT_FIELD
(
u16_t
 
§c
);

57 
PACK_STRUCT_FIELD
(
u16_t
 
de°
);

58 
PACK_STRUCT_FIELD
(
u16_t
 
Àn
);

59 
PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

60 } 
PACK_STRUCT_STRUCT
;

61 
PACK_STRUCT_END


62 #ifde‡
PACK_STRUCT_USE_INCLUDES


63 
	~"¨ch/ï°ru˘.h
"

66 
	#UDP_FLAGS_NOCHKSUM
 0x01U

	)

67 
	#UDP_FLAGS_UDPLITE
 0x02U

	)

68 
	#UDP_FLAGS_CONNECTED
 0x04U

	)

69 
	#UDP_FLAGS_MULTICAST_LOOP
 0x08U

	)

71 
udp_pcb
;

87 (*
udp_ªcv_‚
)(*
	t¨g
, 
	tudp_pcb
 *
	tpcb
, 
	tpbuf
 *
	tp
,

88 
	tù_addr_t
 *
	taddr
, 
	tu16_t
 
	tp‹t
);

91 
	sudp_pcb
 {

93 
IP_PCB
;

97 
udp_pcb
 *
√xt
;

99 
u8_t
 
Êags
;

101 
u16_t
 
loˇl_p‹t
, 
ªmŸe_p‹t
;

103 #i‡
LWIP_IGMP


105 
ù_addr_t
 
mu…iˇ°_ù
;

108 #i‡
LWIP_UDPLITE


110 
u16_t
 
chksum_Àn_rx
, 
chksum_Àn_tx
;

114 
udp_ªcv_‚
 
ªcv
;

116 *
ªcv_¨g
;

119 
udp_pcb
 *
udp_pcbs
;

123 
udp_pcb
 * 
udp_√w
 ();

124 
udp_ªmove
 (
udp_pcb
 *
pcb
);

125 
îr_t
 
udp_böd
 (
udp_pcb
 *
pcb
, 
ù_addr_t
 *
ùaddr
,

126 
u16_t
 
p‹t
);

127 
îr_t
 
udp_c⁄√˘
 (
udp_pcb
 *
pcb
, 
ù_addr_t
 *
ùaddr
,

128 
u16_t
 
p‹t
);

129 
udp_disc⁄√˘
 (
udp_pcb
 *
pcb
);

130 
udp_ªcv
 (
udp_pcb
 *
pcb
, 
udp_ªcv_‚
 
ªcv
,

131 *
ªcv_¨g
);

132 
îr_t
 
udp_£ndto_if
 (
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

133 
ù_addr_t
 *
d°_ù
, 
u16_t
 
d°_p‹t
,

134 
√tif
 *netif);

135 
îr_t
 
udp_£ndto
 (
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

136 
ù_addr_t
 *
d°_ù
, 
u16_t
 
d°_p‹t
);

137 
îr_t
 
udp_£nd
 (
udp_pcb
 *
pcb
, 
pbuf
 *
p
);

139 #i‡
LWIP_CHECKSUM_ON_COPY


140 
îr_t
 
udp_£ndto_if_chksum
(
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

141 
ù_addr_t
 *
d°_ù
, 
u16_t
 
d°_p‹t
,

142 
√tif
 *√tif, 
u8_t
 
have_chksum
,

143 
u16_t
 
chksum
);

144 
îr_t
 
udp_£ndto_chksum
(
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

145 
ù_addr_t
 *
d°_ù
, 
u16_t
 
d°_p‹t
,

146 
u8_t
 
have_chksum
, 
u16_t
 
chksum
);

147 
îr_t
 
udp_£nd_chksum
(
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

148 
u8_t
 
have_chksum
, 
u16_t
 
chksum
);

151 
	#udp_Êags
(
pcb
Ë(’cb)->
Êags
)

	)

152 
	#udp_£tÊags
(
pcb
, 
f
Ë(’cb)->
Êags
 = (f))

	)

155 
udp_öput
 (
pbuf
 *
p
, 
√tif
 *
öp
);

157 
	#udp_öô
(Ë

	)

159 #i‡
UDP_DEBUG


160 
udp_debug_¥öt
(
udp_hdr
 *
udphdr
);

162 
	#udp_debug_¥öt
(
udphdr
)

	)

165 #ifde‡
__˝lu•lus


	@include/netif/etharp.h

35 #i‚de‡
__NETIF_ETHARP_H__


36 
	#__NETIF_ETHARP_H__


	)

38 
	~"lwù/›t.h
"

40 #i‡
LWIP_ARP
 || 
LWIP_ETHERNET


42 
	~"lwù/pbuf.h
"

43 
	~"lwù/ù_addr.h
"

44 
	~"lwù/√tif.h
"

45 
	~"lwù/ù.h
"

47 #ifde‡
__˝lu•lus


51 #i‚de‡
ETHARP_HWADDR_LEN


52 
	#ETHARP_HWADDR_LEN
 6

	)

55 #ifde‡
PACK_STRUCT_USE_INCLUDES


56 
	~"¨ch/bp°ru˘.h
"

58 
PACK_STRUCT_BEGIN


59 
	sëh_addr
 {

60 
PACK_STRUCT_FIELD
(
u8_t
 
addr
[
ETHARP_HWADDR_LEN
]);

61 } 
PACK_STRUCT_STRUCT
;

62 
PACK_STRUCT_END


63 #ifde‡
PACK_STRUCT_USE_INCLUDES


64 
	~"¨ch/ï°ru˘.h
"

67 #ifde‡
PACK_STRUCT_USE_INCLUDES


68 
	~"¨ch/bp°ru˘.h
"

70 
PACK_STRUCT_BEGIN


72 
	sëh_hdr
 {

73 #i‡
ETH_PAD_SIZE


74 
PACK_STRUCT_FIELD
(
u8_t
 
∑ddög
[
ETH_PAD_SIZE
]);

76 
PACK_STRUCT_FIELD
(
ëh_addr
 
de°
);

77 
PACK_STRUCT_FIELD
(
ëh_addr
 
§c
);

78 
PACK_STRUCT_FIELD
(
u16_t
 
ty≥
);

79 } 
PACK_STRUCT_STRUCT
;

80 
PACK_STRUCT_END


81 #ifde‡
PACK_STRUCT_USE_INCLUDES


82 
	~"¨ch/ï°ru˘.h
"

85 
	#SIZEOF_ETH_HDR
 (14 + 
ETH_PAD_SIZE
)

	)

87 #i‡
ETHARP_SUPPORT_VLAN


89 #ifde‡
PACK_STRUCT_USE_INCLUDES


90 
	~"¨ch/bp°ru˘.h
"

92 
PACK_STRUCT_BEGIN


96 
	sëh_vœn_hdr
 {

97 
PACK_STRUCT_FIELD
(
u16_t
 
¥io_vid
);

98 
PACK_STRUCT_FIELD
(
u16_t
 
çid
);

99 } 
PACK_STRUCT_STRUCT
;

100 
PACK_STRUCT_END


101 #ifde‡
PACK_STRUCT_USE_INCLUDES


102 
	~"¨ch/ï°ru˘.h
"

105 
	#SIZEOF_VLAN_HDR
 4

	)

106 
	#VLAN_ID
(
vœn_hdr
Ë(
	`ht⁄s
((vœn_hdr)->
¥io_vid
Ë& 0xFFF)

	)

110 #ifde‡
PACK_STRUCT_USE_INCLUDES


111 
	~"¨ch/bp°ru˘.h
"

113 
PACK_STRUCT_BEGIN


115 
	sëh¨p_hdr
 {

116 
PACK_STRUCT_FIELD
(
u16_t
 
hwty≥
);

117 
PACK_STRUCT_FIELD
(
u16_t
 
¥Ÿo
);

118 
PACK_STRUCT_FIELD
(
u8_t
 
hwÀn
);

119 
PACK_STRUCT_FIELD
(
u8_t
 
¥Ÿﬁí
);

120 
PACK_STRUCT_FIELD
(
u16_t
 
›code
);

121 
PACK_STRUCT_FIELD
(
ëh_addr
 
shwaddr
);

122 
PACK_STRUCT_FIELD
(
ù_addr2
 
sùaddr
);

123 
PACK_STRUCT_FIELD
(
ëh_addr
 
dhwaddr
);

124 
PACK_STRUCT_FIELD
(
ù_addr2
 
dùaddr
);

125 } 
PACK_STRUCT_STRUCT
;

126 
PACK_STRUCT_END


127 #ifde‡
PACK_STRUCT_USE_INCLUDES


128 
	~"¨ch/ï°ru˘.h
"

131 
	#SIZEOF_ETHARP_HDR
 28

	)

132 
	#SIZEOF_ETHARP_PACKET
 (
SIZEOF_ETH_HDR
 + 
SIZEOF_ETHARP_HDR
)

	)

135 
	#ARP_TMR_INTERVAL
 5000

	)

137 
	#ETHTYPE_ARP
 0x0806U

	)

138 
	#ETHTYPE_IP
 0x0800U

	)

139 
	#ETHTYPE_VLAN
 0x8100U

	)

140 
	#ETHTYPE_PPPOEDISC
 0x8863U

	)

141 
	#ETHTYPE_PPPOE
 0x8864U

	)

145 #i‚de‡
ETHADDR32_COPY


146 
	#ETHADDR32_COPY
(
§c
, 
d°
Ë
	`SMEMCPY
(§c, d°, 
ETHARP_HWADDR_LEN
)

	)

151 #i‚de‡
ETHADDR16_COPY


152 
	#ETHADDR16_COPY
(
§c
, 
d°
Ë
	`SMEMCPY
(§c, d°, 
ETHARP_HWADDR_LEN
)

	)

155 #i‡
LWIP_ARP


158 
	#ARP_REQUEST
 1

	)

159 
	#ARP_REPLY
 2

	)

167 #i‚de‡
LWIP_ARP_FILTER_NETIF


168 
	#LWIP_ARP_FILTER_NETIF
 0

	)

171 #i‡
ARP_QUEUEING


175 
	sëh¨p_q_íåy
 {

176 
ëh¨p_q_íåy
 *
√xt
;

177 
pbuf
 *
p
;

181 
	#ëh¨p_öô
(Ë

	)

182 
ëh¨p_tmr
();

183 
s8_t
 
ëh¨p_föd_addr
(
√tif
 *√tif, 
ù_addr_t
 *
ùaddr
,

184 
ëh_addr
 **
ëh_ªt
, 
ù_addr_t
 **
ù_ªt
);

185 
îr_t
 
ëh¨p_ouçut
(
√tif
 *√tif, 
pbuf
 *
q
, 
ù_addr_t
 *
ùaddr
);

186 
îr_t
 
ëh¨p_quîy
(
√tif
 *√tif, 
ù_addr_t
 *
ùaddr
, 
pbuf
 *
q
);

187 
îr_t
 
ëh¨p_ªque°
(
√tif
 *√tif, 
ù_addr_t
 *
ùaddr
);

192 
	#ëh¨p_gøtuôous
(
√tif
Ë
	`ëh¨p_ªque°
(“ëif), &“ëif)->
ù_addr
)

	)

194 #i‡
ETHARP_SUPPORT_STATIC_ENTRIES


195 
îr_t
 
ëh¨p_add_°©ic_íåy
(
ù_addr_t
 *
ùaddr
, 
ëh_addr
 *
ëhaddr
);

196 
îr_t
 
ëh¨p_ªmove_°©ic_íåy
(
ù_addr_t
 *
ùaddr
);

199 #i‡
LWIP_AUTOIP


200 
îr_t
 
ëh¨p_øw
(
√tif
 *√tif, c⁄° 
ëh_addr
 *
ëh§c_addr
,

201 c⁄° 
ëh_addr
 *
ëhd°_addr
,

202 c⁄° 
ëh_addr
 *
hw§c_addr
, c⁄° 
ù_addr_t
 *
ù§c_addr
,

203 c⁄° 
ëh_addr
 *
hwd°_addr
, c⁄° 
ù_addr_t
 *
ùd°_addr
,

204 c⁄° 
u16_t
 
›code
);

209 
îr_t
 
ëhî√t_öput
(
pbuf
 *
p
, 
√tif
 *netif);

211 
	#ëh_addr_cmp
(
addr1
, 
addr2
Ë(
	`memcmp
(◊ddr1)->
addr
, (addr2)->addr, 
ETHARP_HWADDR_LEN
Ë=0)

	)

213 c⁄° 
ëh_addr
 
ëhbrﬂdˇ°
, 
ëhzîo
;

217 #ifde‡
__˝lu•lus


	@include/netif/ethernetif.h

1 #i‚de‡
__NETIF_ETHERNETIF_H__


2 
	#__NETIF_ETHERNETIF_H__


	)

4 
	~"¨ch/cc.h
"

6 
îr_t
 
ëhî√tif_öô
(
√tif
);

	@include/netif/ppp_oe.h

70 #i‚de‡
PPP_OE_H


71 
	#PPP_OE_H


	)

73 
	~"lwù/›t.h
"

75 #i‡
PPPOE_SUPPORT
 > 0

77 
	~"√tif/ëh¨p.h
"

79 #ifde‡
PACK_STRUCT_USE_INCLUDES


80 
	~"¨ch/bp°ru˘.h
"

82 
PACK_STRUCT_BEGIN


83 
	sµp€hdr
 {

84 
PACK_STRUCT_FIELD
(
u8_t
 
vîty≥
);

85 
PACK_STRUCT_FIELD
(
u8_t
 
code
);

86 
PACK_STRUCT_FIELD
(
u16_t
 
£ssi⁄
);

87 
PACK_STRUCT_FIELD
(
u16_t
 
∂í
);

88 } 
	gPACK_STRUCT_STRUCT
;

89 
	gPACK_STRUCT_END


90 #ifde‡
PACK_STRUCT_USE_INCLUDES


91 
	~"¨ch/ï°ru˘.h
"

94 #ifde‡
PACK_STRUCT_USE_INCLUDES


95 
	~"¨ch/bp°ru˘.h
"

97 
PACK_STRUCT_BEGIN


98 
	sµp€èg
 {

99 
PACK_STRUCT_FIELD
(
u16_t
 
èg
);

100 
PACK_STRUCT_FIELD
(
u16_t
 
Àn
);

101 } 
	gPACK_STRUCT_STRUCT
;

102 
	gPACK_STRUCT_END


103 #ifde‡
PACK_STRUCT_USE_INCLUDES


104 
	~"¨ch/ï°ru˘.h
"

108 
	#PPPOE_STATE_INITIAL
 0

	)

109 
	#PPPOE_STATE_PADI_SENT
 1

	)

110 
	#PPPOE_STATE_PADR_SENT
 2

	)

111 
	#PPPOE_STATE_SESSION
 3

	)

112 
	#PPPOE_STATE_CLOSING
 4

	)

114 
	#PPPOE_STATE_PADO_SENT
 1

	)

116 
	#PPPOE_HEADERLEN
 (
µp€hdr
)

	)

117 
	#PPPOE_VERTYPE
 0x11

	)

119 
	#PPPOE_TAG_EOL
 0x0000

	)

120 
	#PPPOE_TAG_SNAME
 0x0101

	)

121 
	#PPPOE_TAG_ACNAME
 0x0102

	)

122 
	#PPPOE_TAG_HUNIQUE
 0x0103

	)

123 
	#PPPOE_TAG_ACCOOKIE
 0x0104

	)

124 
	#PPPOE_TAG_VENDOR
 0x0105

	)

125 
	#PPPOE_TAG_RELAYSID
 0x0110

	)

126 
	#PPPOE_TAG_SNAME_ERR
 0x0201

	)

127 
	#PPPOE_TAG_ACSYS_ERR
 0x0202

	)

128 
	#PPPOE_TAG_GENERIC_ERR
 0x0203

	)

130 
	#PPPOE_CODE_PADI
 0x09

	)

131 
	#PPPOE_CODE_PADO
 0x07

	)

132 
	#PPPOE_CODE_PADR
 0x19

	)

133 
	#PPPOE_CODE_PADS
 0x65

	)

134 
	#PPPOE_CODE_PADT
 0xA7

	)

136 #i‚de‡
ETHERMTU


137 
	#ETHERMTU
 1500

	)

141 
	#PPPOE_MAXMTU
 (
ETHERMTU
-
PPPOE_HEADERLEN
-2)

	)

143 #i‚de‡
PPPOE_MAX_AC_COOKIE_LEN


144 
	#PPPOE_MAX_AC_COOKIE_LEN
 64

	)

147 
	sµp€_so·c
 {

148 
µp€_so·c
 *
	m√xt
;

149 
√tif
 *
	msc_ëhif
;

150 
	msc_pd
;

151 (*
	msc_lökSètusCB
)(
	mpd
, 
	mup
);

153 
	msc_°©e
;

154 
ëh_addr
 
	msc_de°
;

155 
u16_t
 
	msc_£ssi⁄
;

157 #ifde‡
PPPOE_TODO


158 *
	msc_£rvi˚_«me
;

159 *
	msc_c⁄˚¡øt‹_«me
;

161 
u8_t
 
	msc_ac_cookõ
[
PPPOE_MAX_AC_COOKIE_LEN
];

162 
size_t
 
	msc_ac_cookõ_Àn
;

163 #ifde‡
PPPOE_SERVER


164 
u8_t
 *
	msc_hunique
;

165 
size_t
 
	msc_hunique_Àn
;

167 
	msc_∑di_ªåõd
;

168 
	msc_∑dr_ªåõd
;

172 
	#µp€_öô
(Ë

	)

174 
îr_t
 
µp€_¸óã
(
√tif
 *
ëhif
, 
pd
, (*
lökSètusCB
)(pd, 
up
), 
µp€_so·c
 **
s˝å
);

175 
îr_t
 
	`µp€_de°roy
(
√tif
 *
iÂ
);

177 
	`µp€_c⁄√˘
(
µp€_so·c
 *
sc
);

178 
	`µp€_disc⁄√˘
(
µp€_so·c
 *
sc
);

180 
	`µp€_disc_öput
(
√tif
 *√tif, 
pbuf
 *
p
);

181 
	`µp€_d©a_öput
(
√tif
 *√tif, 
pbuf
 *
p
);

183 
îr_t
 
	`µp€_xmô
(
µp€_so·c
 *
sc
, 
pbuf
 *
pb
);

186 
	#PPPOE_HDRLEN
 ((
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
)

	)

	@include/netif/slipif.h

34 #i‚de‡
__NETIF_SLIPIF_H__


35 
	#__NETIF_SLIPIF_H__


	)

37 
	~"lwù/√tif.h
"

39 #ifde‡
__˝lu•lus


43 
îr_t
 
¶ùif_öô
(
√tif
 *Çetif);

44 
¶ùif_pﬁl
(
√tif
 *netif);

46 #ifde‡
__˝lu•lus


	@lwipopts.h

5 #i‚de‡
__LWIP_LWIOPTS_H__


6 
	#__LWIP_LWIOPTS_H__


	)

9 
	#MEM_ALIGNMENT
 4

	)

12 
	#NO_SYS
 1

	)

15 
	#ETHARP_TMR_INTERVAL
 5000

	)

26 
	#PBUF_POOL_SIZE
 16

27 
	#PBUF_POOL_BUFSIZE
 64

29 
	#IP_REASS_BUFSIZE
 600

	)

	@netif/etharp.c

46 
	~"lwù/›t.h
"

48 #i‡
LWIP_ARP
 || 
LWIP_ETHERNET


50 
	~"lwù/ù_addr.h
"

51 
	~"lwù/def.h
"

52 
	~"lwù/ù.h
"

53 
	~"lwù/°©s.h
"

54 
	~"lwù/¢mp.h
"

55 
	~"lwù/dh˝.h
"

56 
	~"lwù/autoù.h
"

57 
	~"√tif/ëh¨p.h
"

59 #i‡
PPPOE_SUPPORT


60 
	~"√tif/µp_€.h
"

63 
	~<°rög.h
>

65 c⁄° 
ëh_addr
 
	gëhbrﬂdˇ°
 = {{0xff,0xff,0xff,0xff,0xff,0xff}};

66 c⁄° 
ëh_addr
 
	gëhzîo
 = {{0,0,0,0,0,0}};

68 #i‡
LWIP_ARP


74 
	#ARP_MAXAGE
 240

	)

82 
	#ARP_MAXPENDING
 2

	)

84 
	#HWTYPE_ETHERNET
 1

	)

86 
	eëh¨p_°©e
 {

87 
	mETHARP_STATE_EMPTY
 = 0,

88 
	mETHARP_STATE_PENDING
,

89 
	mETHARP_STATE_STABLE


92 
	sëh¨p_íåy
 {

93 #i‡
ARP_QUEUEING


95 
ëh¨p_q_íåy
 *
	mq
;

98 
pbuf
 *
	mq
;

100 
ù_addr_t
 
	mùaddr
;

101 
ëh_addr
 
	mëhaddr
;

102 #i‡
LWIP_SNMP


103 
√tif
 *
	m√tif
;

105 
u8_t
 
	m°©e
;

106 
u8_t
 
	m˘ime
;

107 #i‡
ETHARP_SUPPORT_STATIC_ENTRIES


108 
u8_t
 
	m°©ic_íåy
;

112 
ëh¨p_íåy
 
	g¨p_èbÀ
[
ARP_TABLE_SIZE
];

114 #i‡!
LWIP_NETIF_HWADDRHINT


115 
u8_t
 
	gëh¨p_ˇched_íåy
;

120 
	#ETHARP_FLAG_TRY_HARD
 1

	)

121 
	#ETHARP_FLAG_FIND_ONLY
 2

	)

122 
	#ETHARP_FLAG_STATIC_ENTRY
 4

	)

124 #i‡
LWIP_NETIF_HWADDRHINT


125 
	#ETHARP_SET_HINT
(
√tif
, 
höt
Ëi‡((“ëifË!
NULL
Ë&& (“ëif)->
addr_höt
 != NULL)) \

126 *((
√tif
)->
addr_höt
Ë(
höt
);

	)

128 
	#ETHARP_SET_HINT
(
√tif
, 
höt
Ë(
ëh¨p_ˇched_íåy
 = (höt))

	)

131 
îr_t
 
upd©e_¨p_íåy
(
√tif
 *√tif, 
ù_addr_t
 *
ùaddr
, 
ëh_addr
 *
ëhaddr
, 
u8_t
 
Êags
);

135 #i‡(
LWIP_ARP
 && (
ARP_TABLE_SIZE
 > 0x7f))

140 #i‡
ARP_QUEUEING


147 
	$‰ì_ëh¨p_q
(
ëh¨p_q_íåy
 *
q
)

149 
ëh¨p_q_íåy
 *
r
;

150 
	`LWIP_ASSERT
("q !NULL", 
q
 !
NULL
);

151 
	`LWIP_ASSERT
("q->∞!NULL", 
q
->
p
 !
NULL
);

152 
q
) {

153 
r
 = 
q
;

154 
q
 = q->
√xt
;

155 
	`LWIP_ASSERT
("r->∞!NULL", (
r
->
p
 !
NULL
));

156 
	`pbuf_‰ì
(
r
->
p
);

157 
	`memp_‰ì
(
MEMP_ARP_QUEUE
, 
r
);

159 
	}
}

163 
	#‰ì_ëh¨p_q
(
q
Ë
	`pbuf_‰ì
(q)

	)

169 
	$‰ì_íåy
(
i
)

172 
	`¢mp_dñëe_¨pidx_åì
(
¨p_èbÀ
[
i
].
√tif
, &¨p_èbÀ[i].
ùaddr
);

174 i‡(
¨p_èbÀ
[
i
].
q
 !
NULL
) {

176 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
, ("ëh¨p_timî: fªeögÉ¡ry %"
U16_F
",Öackë queuê%p.\n", (
u16_t
)
i
, (*)(
¨p_èbÀ
[i].
q
)));

177 
	`‰ì_ëh¨p_q
(
¨p_èbÀ
[
i
].
q
);

178 
¨p_èbÀ
[
i
].
q
 = 
NULL
;

181 
¨p_èbÀ
[
i
].
°©e
 = 
ETHARP_STATE_EMPTY
;

182 #i‡
ETHARP_SUPPORT_STATIC_ENTRIES


183 
¨p_èbÀ
[
i
].
°©ic_íåy
 = 0;

185 #ifde‡
LWIP_DEBUG


187 
¨p_èbÀ
[
i
].
˘ime
 = 0;

188 #i‡
LWIP_SNMP


189 
¨p_èbÀ
[
i
].
√tif
 = 
NULL
;

191 
	`ù_addr_£t_zîo
(&
¨p_èbÀ
[
i
].
ùaddr
);

192 
¨p_èbÀ
[
i
].
ëhaddr
 = 
ëhzîo
;

194 
	}
}

203 
	$ëh¨p_tmr
()

205 
u8_t
 
i
;

207 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
, ("etharp_timer\n"));

209 
i
 = 0; i < 
ARP_TABLE_SIZE
; ++i) {

210 
u8_t
 
°©e
 = 
¨p_èbÀ
[
i
].state;

211 i‡(
°©e
 !
ETHARP_STATE_EMPTY


212 #i‡
ETHARP_SUPPORT_STATIC_ENTRIES


213 && (
¨p_èbÀ
[
i
].
°©ic_íåy
 == 0)

216 
¨p_èbÀ
[
i
].
˘ime
++;

217 i‡((
¨p_èbÀ
[
i
].
˘ime
 >
ARP_MAXAGE
) ||

218 ((
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_PENDING
) &&

219 (
¨p_èbÀ
[
i
].
˘ime
 >
ARP_MAXPENDING
))) {

221 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
, ("ëh¨p_timî:Éxpúed %†íåy %"
U16_F
".\n",

222 
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_STABLE
 ? "°abÀ" : "≥ndög", (
u16_t
)i));

224 
	`‰ì_íåy
(
i
);

226 #i‡
ARP_QUEUEING


228 i‡(
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_PENDING
) {

234 
	}
}

257 
s8_t


258 
	$föd_íåy
(
ù_addr_t
 *
ùaddr
, 
u8_t
 
Êags
)

260 
s8_t
 
ﬁd_≥ndög
 = 
ARP_TABLE_SIZE
, 
ﬁd_°abÀ
 = ARP_TABLE_SIZE;

261 
s8_t
 
em±y
 = 
ARP_TABLE_SIZE
;

262 
u8_t
 
i
 = 0, 
age_≥ndög
 = 0, 
age_°abÀ
 = 0;

264 
s8_t
 
ﬁd_queue
 = 
ARP_TABLE_SIZE
;

266 
u8_t
 
age_queue
 = 0;

283 
i
 = 0; i < 
ARP_TABLE_SIZE
; ++i) {

284 
u8_t
 
°©e
 = 
¨p_èbÀ
[
i
].state;

286 i‡((
em±y
 =
ARP_TABLE_SIZE
Ë&& (
°©e
 =
ETHARP_STATE_EMPTY
)) {

287 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
, ("föd_íåy: foundÉm±yÉ¡ry %"
U16_F
"\n", (
u16_t
)
i
));

289 
em±y
 = 
i
;

290 } i‡(
°©e
 !
ETHARP_STATE_EMPTY
) {

291 
	`LWIP_ASSERT
("state == ETHARP_STATE_PENDING || state == ETHARP_STATE_STABLE",

292 
°©e
 =
ETHARP_STATE_PENDING
 || sèã =
ETHARP_STATE_STABLE
);

294 i‡(
ùaddr
 && 
	`ù_addr_cmp
(ùaddr, &
¨p_èbÀ
[
i
].ipaddr)) {

295 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("föd_íåy: found m©chögÉ¡ry %"
U16_F
"\n", (
u16_t
)
i
));

297  
i
;

300 i‡(
°©e
 =
ETHARP_STATE_PENDING
) {

302 i‡(
¨p_èbÀ
[
i
].
q
 !
NULL
) {

303 i‡(
¨p_èbÀ
[
i
].
˘ime
 >
age_queue
) {

304 
ﬁd_queue
 = 
i
;

305 
age_queue
 = 
¨p_èbÀ
[
i
].
˘ime
;

310 i‡(
¨p_èbÀ
[
i
].
˘ime
 >
age_≥ndög
) {

311 
ﬁd_≥ndög
 = 
i
;

312 
age_≥ndög
 = 
¨p_èbÀ
[
i
].
˘ime
;

316 } i‡(
°©e
 =
ETHARP_STATE_STABLE
) {

317 #i‡
ETHARP_SUPPORT_STATIC_ENTRIES


319 i‡(
¨p_èbÀ
[
i
].
°©ic_íåy
 == 0)

323 i‡(
¨p_èbÀ
[
i
].
˘ime
 >
age_°abÀ
) {

324 
ﬁd_°abÀ
 = 
i
;

325 
age_°abÀ
 = 
¨p_èbÀ
[
i
].
˘ime
;

334 i‡(((
Êags
 & 
ETHARP_FLAG_FIND_ONLY
) != 0) ||

336 ((
em±y
 =
ARP_TABLE_SIZE
Ë&& ((
Êags
 & 
ETHARP_FLAG_TRY_HARD
) == 0))) {

337 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("find_entry:ÇoÉmptyÉntry foundándÇotállowedÅoÑecycle\n"));

338  (
s8_t
)
ERR_MEM
;

351 i‡(
em±y
 < 
ARP_TABLE_SIZE
) {

352 
i
 = 
em±y
;

353 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("föd_íåy: sñe˘ögÉm±yÉ¡ry %"
U16_F
"\n", (
u16_t
)
i
));

356 i‡(
ﬁd_°abÀ
 < 
ARP_TABLE_SIZE
) {

358 
i
 = 
ﬁd_°abÀ
;

359 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("föd_íåy: sñe˘ög olde° sèbÀÉ¡ry %"
U16_F
"\n", (
u16_t
)
i
));

361 
	`LWIP_ASSERT
("¨p_èbÀ[i].q =NULL", 
¨p_èbÀ
[
i
].
q
 =
NULL
);

363 } i‡(
ﬁd_≥ndög
 < 
ARP_TABLE_SIZE
) {

365 
i
 = 
ﬁd_≥ndög
;

366 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("föd_íåy: sñe˘ög olde°ÖídögÉ¡ry %"
U16_F
" (wôhouàqueue)\n", (
u16_t
)
i
));

368 } i‡(
ﬁd_queue
 < 
ARP_TABLE_SIZE
) {

370 
i
 = 
ﬁd_queue
;

371 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("föd_íåy: sñe˘ög olde°ÖídögÉ¡ry %"
U16_F
", fªeögÖackë queuê%p\n", (
u16_t
)
i
, (*)(
¨p_èbÀ
[i].
q
)));

374 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("find_entry:ÇoÉmpty orÑecyclableÉntries found\n"));

375  (
s8_t
)
ERR_MEM
;

379 
	`LWIP_ASSERT
("ò< ARP_TABLE_SIZE", 
i
 < 
ARP_TABLE_SIZE
);

380 
	`‰ì_íåy
(
i
);

383 
	`LWIP_ASSERT
("ò< ARP_TABLE_SIZE", 
i
 < 
ARP_TABLE_SIZE
);

384 
	`LWIP_ASSERT
("arp_table[i].state == ETHARP_STATE_EMPTY",

385 
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_EMPTY
);

388 i‡(
ùaddr
 !
NULL
) {

390 
	`ù_addr_c›y
(
¨p_èbÀ
[
i
].
ùaddr
, *ipaddr);

392 
¨p_èbÀ
[
i
].
˘ime
 = 0;

393 #i‡
ETHARP_SUPPORT_STATIC_ENTRIES


394 
¨p_èbÀ
[
i
].
°©ic_íåy
 = 0;

396  (
îr_t
)
i
;

397 
	}
}

409 
îr_t


410 
	$ëh¨p_£nd_ù
(
√tif
 *√tif, 
pbuf
 *
p
, 
ëh_addr
 *
§c
, ëh_add∏*
d°
)

412 
ëh_hdr
 *
ëhhdr
 = (ëh_hd∏*)
p
->
∑ylﬂd
;

414 
	`LWIP_ASSERT
("netif->hwaddr_len must beÅhe sameás ETHARP_HWADDR_LEN forÉtharp!",

415 (
√tif
->
hwaddr_Àn
 =
ETHARP_HWADDR_LEN
));

416 
	`ETHADDR32_COPY
(&
ëhhdr
->
de°
, 
d°
);

417 
	`ETHADDR16_COPY
(&
ëhhdr
->
§c
, src);

418 
ëhhdr
->
ty≥
 = 
	`PP_HTONS
(
ETHTYPE_IP
);

419 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_£nd_ù: sídögÖackë %p\n", (*)
p
));

421  
√tif
->
	`lökouçut
“ëif, 
p
);

422 
	}
}

442 
îr_t


443 
	$upd©e_¨p_íåy
(
√tif
 *√tif, 
ù_addr_t
 *
ùaddr
, 
ëh_addr
 *
ëhaddr
, 
u8_t
 
Êags
)

445 
s8_t
 
i
;

446 
	`LWIP_ASSERT
("√tif->hwaddr_À¿=ETHARP_HWADDR_LEN", 
√tif
->
hwaddr_Àn
 =
ETHARP_HWADDR_LEN
);

447 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("upd©e_¨p_íåy: %"
U16_F
".%"U16_F".%"U16_F".%"U16_F" - %02"
X16_F
":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",

448 
	`ù4_addr1_16
(
ùaddr
), 
	`ù4_addr2_16
(ùaddr), 
	`ù4_addr3_16
(ùaddr), 
	`ù4_addr4_16
(ipaddr),

449 
ëhaddr
->
addr
[0],Éthaddr->addr[1],Éthaddr->addr[2],

450 
ëhaddr
->
addr
[3],Éthaddr->addr[4],Éthaddr->addr[5]));

452 i‡(
	`ù_addr_ißny
(
ùaddr
) ||

453 
	`ù_addr_isbrﬂdˇ°
(
ùaddr
, 
√tif
) ||

454 
	`ù_addr_ismu…iˇ°
(
ùaddr
)) {

455 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("update_arp_entry: willÇotáddÇon-unicast IPáddressÅo ARP cache\n"));

456  
ERR_ARG
;

459 
i
 = 
	`föd_íåy
(
ùaddr
, 
Êags
);

461 i‡(
i
 < 0) {

462  (
îr_t
)
i
;

465 #i‡
ETHARP_SUPPORT_STATIC_ENTRIES


466 i‡(
Êags
 & 
ETHARP_FLAG_STATIC_ENTRY
) {

468 
¨p_èbÀ
[
i
].
°©ic_íåy
 = 1;

473 
¨p_èbÀ
[
i
].
°©e
 = 
ETHARP_STATE_STABLE
;

475 #i‡
LWIP_SNMP


477 
¨p_èbÀ
[
i
].
√tif
 =Çetif;

480 
	`¢mp_ö£π_¨pidx_åì
(
√tif
, &
¨p_èbÀ
[
i
].
ùaddr
);

482 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("upd©e_¨p_íåy: upd©ög sèbÀÉ¡ry %"
S16_F
"\n", (
s16_t
)
i
));

484 
	`ETHADDR32_COPY
(&
¨p_èbÀ
[
i
].
ëhaddr
,Éthaddr);

486 
¨p_èbÀ
[
i
].
˘ime
 = 0;

488 #i‡
ARP_QUEUEING


489 
¨p_èbÀ
[
i
].
q
 !
NULL
) {

490 
pbuf
 *
p
;

492 
ëh¨p_q_íåy
 *
q
 = 
¨p_èbÀ
[
i
].q;

494 
¨p_èbÀ
[
i
].
q
 = q->
√xt
;

496 
p
 = 
q
->p;

498 
	`memp_‰ì
(
MEMP_ARP_QUEUE
, 
q
);

500 i‡(
¨p_èbÀ
[
i
].
q
 !
NULL
) {

501 
pbuf
 *
p
 = 
¨p_èbÀ
[
i
].
q
;

502 
¨p_èbÀ
[
i
].
q
 = 
NULL
;

505 
	`ëh¨p_£nd_ù
(
√tif
, 
p
, (
ëh_addr
*)“ëif->
hwaddr
), 
ëhaddr
);

507 
	`pbuf_‰ì
(
p
);

509  
ERR_OK
;

510 
	}
}

512 #i‡
ETHARP_SUPPORT_STATIC_ENTRIES


521 
îr_t


522 
	$ëh¨p_add_°©ic_íåy
(
ù_addr_t
 *
ùaddr
, 
ëh_addr
 *
ëhaddr
)

524 
√tif
 *netif;

525 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_add_°©ic_íåy: %"
U16_F
".%"U16_F".%"U16_F".%"U16_F" - %02"
X16_F
":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",

526 
	`ù4_addr1_16
(
ùaddr
), 
	`ù4_addr2_16
(ùaddr), 
	`ù4_addr3_16
(ùaddr), 
	`ù4_addr4_16
(ipaddr),

527 
ëhaddr
->
addr
[0],Éthaddr->addr[1],Éthaddr->addr[2],

528 
ëhaddr
->
addr
[3],Éthaddr->addr[4],Éthaddr->addr[5]));

530 
√tif
 = 
	`ù_rouã
(
ùaddr
);

531 i‡(
√tif
 =
NULL
) {

532  
ERR_RTE
;

535  
	`upd©e_¨p_íåy
(
√tif
, 
ùaddr
, 
ëhaddr
, 
ETHARP_FLAG_TRY_HARD
 | 
ETHARP_FLAG_STATIC_ENTRY
);

536 
	}
}

546 
îr_t


547 
	$ëh¨p_ªmove_°©ic_íåy
(
ù_addr_t
 *
ùaddr
)

549 
s8_t
 
i
;

550 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_ªmove_°©ic_íåy: %"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

551 
	`ù4_addr1_16
(
ùaddr
), 
	`ù4_addr2_16
(ùaddr), 
	`ù4_addr3_16
(ùaddr), 
	`ù4_addr4_16
(ipaddr)));

554 
i
 = 
	`föd_íåy
(
ùaddr
, 
ETHARP_FLAG_FIND_ONLY
);

556 i‡(
i
 < 0) {

557  (
îr_t
)
i
;

560 i‡((
¨p_èbÀ
[
i
].
°©e
 !
ETHARP_STATE_STABLE
) ||

561 (
¨p_èbÀ
[
i
].
°©ic_íåy
 == 0)) {

563  
ERR_ARG
;

566 
	`‰ì_íåy
(
i
);

567  
ERR_OK
;

568 
	}
}

582 
s8_t


583 
	$ëh¨p_föd_addr
(
√tif
 *√tif, 
ù_addr_t
 *
ùaddr
,

584 
ëh_addr
 **
ëh_ªt
, 
ù_addr_t
 **
ù_ªt
)

586 
s8_t
 
i
;

588 
	`LWIP_ASSERT
("eth_ret != NULL && ip_ret != NULL",

589 
ëh_ªt
 !
NULL
 && 
ù_ªt
 != NULL);

591 
	`LWIP_UNUSED_ARG
(
√tif
);

593 
i
 = 
	`föd_íåy
(
ùaddr
, 
ETHARP_FLAG_FIND_ONLY
);

594 if((
i
 >0Ë&& 
¨p_èbÀ
[i].
°©e
 =
ETHARP_STATE_STABLE
) {

595 *
ëh_ªt
 = &
¨p_èbÀ
[
i
].
ëhaddr
;

596 *
ù_ªt
 = &
¨p_èbÀ
[
i
].
ùaddr
;

597  
i
;

600 
	}
}

602 #i‡
ETHARP_TRUST_IP_MAC


619 
	$ëh¨p_ù_öput
(
√tif
 *√tif, 
pbuf
 *
p
)

621 
ëh_hdr
 *
ëhhdr
;

622 
ù_hdr
 *
ùhdr
;

623 
ù_addr_t
 
ùhdr_§c
;

624 
	`LWIP_ERROR
("√ti‡!NULL", (
√tif
 !
NULL
), ;);

628 
ëhhdr
 = (
ëh_hdr
 *)
p
->
∑ylﬂd
;

629 
ùhdr
 = (
ù_hdr
 *)((
u8_t
*)
ëhhdr
 + 
SIZEOF_ETH_HDR
);

630 #i‡
ETHARP_SUPPORT_VLAN


631 i‡(
ëhhdr
->
ty≥
 =
	`PP_HTONS
(
ETHTYPE_VLAN
)) {

632 
ùhdr
 = (
ù_hdr
 *)((
u8_t
*)
ëhhdr
 + 
SIZEOF_ETH_HDR
 + 
SIZEOF_VLAN_HDR
);

636 
	`ù_addr_c›y
(
ùhdr_§c
, 
ùhdr
->
§c
);

639 i‡(!
	`ù_addr_√tcmp
(&
ùhdr_§c
, &(
√tif
->
ù_addr
), &“ëif->
√tmask
))) {

644 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_ip_input: updating ETHARPÅable.\n"));

648 
	`upd©e_¨p_íåy
(
√tif
, &
ùhdr_§c
, &(
ëhhdr
->
§c
), 
ETHARP_FLAG_FIND_ONLY
);

649 
	}
}

668 
	$ëh¨p_¨p_öput
(
√tif
 *√tif, 
ëh_addr
 *
ëhaddr
, 
pbuf
 *
p
)

670 
ëh¨p_hdr
 *
hdr
;

671 
ëh_hdr
 *
ëhhdr
;

673 
ù_addr_t
 
sùaddr
, 
dùaddr
;

674 
u8_t
 
f‹_us
;

675 #i‡
LWIP_AUTOIP


676 c⁄° 
u8_t
 * 
ëhd°_hwaddr
;

679 
	`LWIP_ERROR
("√ti‡!NULL", (
√tif
 !
NULL
), ;);

683 i‡(
p
->
Àn
 < 
SIZEOF_ETHARP_PACKET
) {

684 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_LEVEL_WARNING
,

685 ("ëh¨p_¨p_öput:Öackë dr›≥d,Åoÿsh‹à(%"
S16_F
"/%"S16_F")\n", 
p
->
tŸ_Àn
,

686 (
s16_t
)
SIZEOF_ETHARP_PACKET
));

687 
	`ETHARP_STATS_INC
(
ëh¨p
.
À√º
);

688 
	`ETHARP_STATS_INC
(
ëh¨p
.
dr›
);

689 
	`pbuf_‰ì
(
p
);

693 
ëhhdr
 = (
ëh_hdr
 *)
p
->
∑ylﬂd
;

694 
hdr
 = (
ëh¨p_hdr
 *)((
u8_t
*)
ëhhdr
 + 
SIZEOF_ETH_HDR
);

695 #i‡
ETHARP_SUPPORT_VLAN


696 i‡(
ëhhdr
->
ty≥
 =
	`PP_HTONS
(
ETHTYPE_VLAN
)) {

697 
hdr
 = (
ëh¨p_hdr
 *)(((
u8_t
*)
ëhhdr
Ë+ 
SIZEOF_ETH_HDR
 + 
SIZEOF_VLAN_HDR
);

702 i‡((
hdr
->
hwty≥
 !
	`PP_HTONS
(
HWTYPE_ETHERNET
)) ||

703 (
hdr
->
hwÀn
 !
ETHARP_HWADDR_LEN
) ||

704 (
hdr
->
¥Ÿﬁí
 !(
ù_addr_t
)) ||

705 (
hdr
->
¥Ÿo
 !
	`PP_HTONS
(
ETHTYPE_IP
))) {

706 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_LEVEL_WARNING
,

707 ("ëh¨p_¨p_öput:Öackë dr›≥d, wr⁄g hwÅy≥, hwÀn,ÖrŸo,ÖrŸﬁí o∏ëhî√àty≥ (%"
U16_F
"/%"U16_F"/%"U16_F"/%"U16_F")\n",

708 
hdr
->
hwty≥
, hdr->
hwÀn
, hdr->
¥Ÿo
, hdr->
¥Ÿﬁí
));

709 
	`ETHARP_STATS_INC
(
ëh¨p
.
¥Ÿîr
);

710 
	`ETHARP_STATS_INC
(
ëh¨p
.
dr›
);

711 
	`pbuf_‰ì
(
p
);

714 
	`ETHARP_STATS_INC
(
ëh¨p
.
ªcv
);

716 #i‡
LWIP_AUTOIP


720 
	`autoù_¨p_ª∂y
(
√tif
, 
hdr
);

725 
	`IPADDR2_COPY
(&
sùaddr
, &
hdr
->sipaddr);

726 
	`IPADDR2_COPY
(&
dùaddr
, &
hdr
->dipaddr);

729 i‡(
	`ù_addr_ißny
(&
√tif
->
ù_addr
)) {

730 
f‹_us
 = 0;

733 
f‹_us
 = (
u8_t
)
	`ù_addr_cmp
(&
dùaddr
, &(
√tif
->
ù_addr
));

741 
	`upd©e_¨p_íåy
(
√tif
, &
sùaddr
, &(
hdr
->
shwaddr
),

742 
f‹_us
 ? 
ETHARP_FLAG_TRY_HARD
 : 
ETHARP_FLAG_FIND_ONLY
);

745 
hdr
->
›code
) {

747 
	`PP_HTONS
(
ARP_REQUEST
):

752 
	`LWIP_DEBUGF
 (
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_arp_input: incoming ARPÑequest\n"));

754 i‡(
f‹_us
) {

756 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_arp_input:ÑeplyingÅo ARPÑequest for our IPáddress\n"));

760 
hdr
->
›code
 = 
	`ht⁄s
(
ARP_REPLY
);

762 
	`IPADDR2_COPY
(&
hdr
->
dùaddr
, &hdr->
sùaddr
);

763 
	`IPADDR2_COPY
(&
hdr
->
sùaddr
, &
√tif
->
ù_addr
);

765 
	`LWIP_ASSERT
("netif->hwaddr_len must beÅhe sameás ETHARP_HWADDR_LEN forÉtharp!",

766 (
√tif
->
hwaddr_Àn
 =
ETHARP_HWADDR_LEN
));

767 #i‡
LWIP_AUTOIP


771 
ëhd°_hwaddr
 = 
	`ù_addr_i¶ökloˇl
(&
√tif
->
ù_addr
Ë? (
u8_t
*)(
ëhbrﬂdˇ°
.
addr
Ë: 
hdr
->
shwaddr
.addr;

774 
	`ETHADDR16_COPY
(&
hdr
->
dhwaddr
, &hdr->
shwaddr
);

775 #i‡
LWIP_AUTOIP


776 
	`ETHADDR16_COPY
(&
ëhhdr
->
de°
, 
ëhd°_hwaddr
);

778 
	`ETHADDR16_COPY
(&
ëhhdr
->
de°
, &
hdr
->
shwaddr
);

780 
	`ETHADDR16_COPY
(&
hdr
->
shwaddr
, 
ëhaddr
);

781 
	`ETHADDR16_COPY
(&
ëhhdr
->
§c
, 
ëhaddr
);

787 
√tif
->
	`lökouçut
“ëif, 
p
);

789 } i‡(
	`ù_addr_ißny
(&
√tif
->
ù_addr
)) {

791 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_arp_input: weáre unconfigured, ARPÑequest ignored.\n"));

795 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_arp_input: ARPÑequest wasÇot for us.\n"));

798 
	`PP_HTONS
(
ARP_REPLY
):

800 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_arp_input: incoming ARPÑeply\n"));

801 #i‡(
LWIP_DHCP
 && 
DHCP_DOES_ARP_CHECK
)

806 
	`dh˝_¨p_ª∂y
(
√tif
, &
sùaddr
);

810 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_¨p_öput: ARP unknow¿›codêty≥ %"
S16_F
"\n", 
	`ht⁄s
(
hdr
->
›code
)));

811 
	`ETHARP_STATS_INC
(
ëh¨p
.
îr
);

815 
	`pbuf_‰ì
(
p
);

816 
	}
}

836 
îr_t


837 
	$ëh¨p_ouçut
(
√tif
 *√tif, 
pbuf
 *
q
, 
ù_addr_t
 *
ùaddr
)

839 
ëh_addr
 *
de°
, 
mˇ°addr
;

842 i‡(
	`pbuf_hódî
(
q
, (
ëh_hdr
)) != 0) {

844 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_LEVEL_SERIOUS
,

846 
	`LINK_STATS_INC
(
lök
.
À√º
);

847  
ERR_BUF
;

851 
de°
 = 
NULL
;

856 i‡(
	`ù_addr_isbrﬂdˇ°
(
ùaddr
, 
√tif
)) {

858 
de°
 = (
ëh_addr
 *)&
ëhbrﬂdˇ°
;

860 } i‡(
	`ù_addr_ismu…iˇ°
(
ùaddr
)) {

862 
mˇ°addr
.
addr
[0] = 0x01;

863 
mˇ°addr
.
addr
[1] = 0x00;

864 
mˇ°addr
.
addr
[2] = 0x5e;

865 
mˇ°addr
.
addr
[3] = 
	`ù4_addr2
(
ùaddr
) & 0x7f;

866 
mˇ°addr
.
addr
[4] = 
	`ù4_addr3
(
ùaddr
);

867 
mˇ°addr
.
addr
[5] = 
	`ù4_addr4
(
ùaddr
);

869 
de°
 = &
mˇ°addr
;

873 i‡(!
	`ù_addr_√tcmp
(
ùaddr
, &(
√tif
->
ù_addr
), &“ëif->
√tmask
)) &&

874 !
	`ù_addr_i¶ökloˇl
(
ùaddr
)) {

875 #i‡
LWIP_AUTOIP


876 
ù_hdr
 *
ùhdr
 = (ù_hdr*)((
u8_t
*)
q
->
∑ylﬂd
 +

877 (
ëh_hdr
));

882 i‡(!
	`ù_addr_i¶ökloˇl
(&
ùhdr
->
§c
))

886 i‡(!
	`ù_addr_ißny
(&
√tif
->
gw
)) {

888 
ùaddr
 = &(
√tif
->
gw
);

892  
ERR_RTE
;

896 #i‡
LWIP_NETIF_HWADDRHINT


897 i‡(
√tif
->
addr_höt
 !
NULL
) {

899 
u8_t
 
ëh¨p_ˇched_íåy
 = *(
√tif
->
addr_höt
);

900 i‡(
ëh¨p_ˇched_íåy
 < 
ARP_TABLE_SIZE
) {

902 i‡((
¨p_èbÀ
[
ëh¨p_ˇched_íåy
].
°©e
 =
ETHARP_STATE_STABLE
) &&

903 (
	`ù_addr_cmp
(
ùaddr
, &
¨p_èbÀ
[
ëh¨p_ˇched_íåy
].ipaddr))) {

905 
	`ETHARP_STATS_INC
(
ëh¨p
.
ˇchehô
);

906  
	`ëh¨p_£nd_ù
(
√tif
, 
q
, (
ëh_addr
*)“ëif->
hwaddr
),

907 &
¨p_èbÀ
[
ëh¨p_ˇched_íåy
].
ëhaddr
);

909 #i‡
LWIP_NETIF_HWADDRHINT


914  
	`ëh¨p_quîy
(
√tif
, 
ùaddr
, 
q
);

920  
	`ëh¨p_£nd_ù
(
√tif
, 
q
, (
ëh_addr
*)“ëif->
hwaddr
), 
de°
);

921 
	}
}

956 
îr_t


957 
	$ëh¨p_quîy
(
√tif
 *√tif, 
ù_addr_t
 *
ùaddr
, 
pbuf
 *
q
)

959 
ëh_addr
 * 
§ˇddr
 = (ëh_add∏*)
√tif
->
hwaddr
;

960 
îr_t
 
ªsu…
 = 
ERR_MEM
;

961 
s8_t
 
i
;

964 i‡(
	`ù_addr_isbrﬂdˇ°
(
ùaddr
, 
√tif
) ||

965 
	`ù_addr_ismu…iˇ°
(
ùaddr
) ||

966 
	`ù_addr_ißny
(
ùaddr
)) {

967 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_query: willÇotáddÇon-unicast IPáddressÅo ARP cache\n"));

968  
ERR_ARG
;

972 
i
 = 
	`föd_íåy
(
ùaddr
, 
ETHARP_FLAG_TRY_HARD
);

975 i‡(
i
 < 0) {

976 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_query: couldÇot create ARPÉntry\n"));

977 i‡(
q
) {

978 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_query:Öacket dropped\n"));

979 
	`ETHARP_STATS_INC
(
ëh¨p
.
memîr
);

981  (
îr_t
)
i
;

985 i‡(
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_EMPTY
) {

986 
¨p_èbÀ
[
i
].
°©e
 = 
ETHARP_STATE_PENDING
;

990 
	`LWIP_ASSERT
("arp_table[i].state == PENDING or STABLE",

991 ((
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_PENDING
) ||

992 (
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_STABLE
)));

995 i‡((
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_PENDING
Ë|| (
q
 =
NULL
)) {

997 
ªsu…
 = 
	`ëh¨p_ªque°
(
√tif
, 
ùaddr
);

998 i‡(
ªsu…
 !
ERR_OK
) {

1004 i‡(
q
 =
NULL
) {

1005  
ªsu…
;

1010 
	`LWIP_ASSERT
("q !NULL", 
q
 !
NULL
);

1012 i‡(
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_STABLE
) {

1014 
	`ETHARP_SET_HINT
(
√tif
, 
i
);

1016 
ªsu…
 = 
	`ëh¨p_£nd_ù
(
√tif
, 
q
, 
§ˇddr
, &(
¨p_èbÀ
[
i
].
ëhaddr
));

1018 } i‡(
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_PENDING
) {

1020 
pbuf
 *
p
;

1021 
c›y_√eded
 = 0;

1025 
p
 = 
q
;

1026 
p
) {

1027 
	`LWIP_ASSERT
("nÿ∑ckë queue†Ælowed!", (
p
->
Àn
 !p->
tŸ_Àn
Ë|| (p->
√xt
 == 0));

1028 if(
p
->
ty≥
 !
PBUF_ROM
) {

1029 
c›y_√eded
 = 1;

1032 
p
 =Ö->
√xt
;

1034 if(
c›y_√eded
) {

1036 
p
 = 
	`pbuf_Æloc
(
PBUF_RAW
,Ö->
tŸ_Àn
, 
PBUF_RAM
);

1037 if(
p
 !
NULL
) {

1038 i‡(
	`pbuf_c›y
(
p
, 
q
Ë!
ERR_OK
) {

1039 
	`pbuf_‰ì
(
p
);

1040 
p
 = 
NULL
;

1045 
p
 = 
q
;

1046 
	`pbuf_ªf
(
p
);

1049 i‡(
p
 !
NULL
) {

1051 #i‡
ARP_QUEUEING


1052 
ëh¨p_q_íåy
 *
√w_íåy
;

1054 
√w_íåy
 = (
ëh¨p_q_íåy
 *)
	`memp_mÆloc
(
MEMP_ARP_QUEUE
);

1055 i‡(
√w_íåy
 !
NULL
) {

1056 
√w_íåy
->
√xt
 = 0;

1057 
√w_íåy
->
p
 =Ö;

1058 if(
¨p_èbÀ
[
i
].
q
 !
NULL
) {

1060 
ëh¨p_q_íåy
 *
r
;

1061 
r
 = 
¨p_èbÀ
[
i
].
q
;

1062 
r
->
√xt
 !
NULL
) {

1063 
r
 =Ñ->
√xt
;

1065 
r
->
√xt
 = 
√w_íåy
;

1068 
¨p_èbÀ
[
i
].
q
 = 
√w_íåy
;

1070 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_quîy: queuedÖackë %∞⁄ ARPÉ¡ry %"
S16_F
"\n", (*)
q
, (
s16_t
)
i
));

1071 
ªsu…
 = 
ERR_OK
;

1074 
	`pbuf_‰ì
(
p
);

1075 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_quîy: couldÇŸ queuê®c›y o‡PBUF_REFÖackë %∞(ouào‡mem‹y)\n", (*)
q
));

1076 
ªsu…
 = 
ERR_MEM
;

1080 i‡(
¨p_èbÀ
[
i
].
q
 !
NULL
) {

1081 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_quîy: dr›≥dÖªviou¶y queuedÖackë %∞f‹ ARPÉ¡ry %"
S16_F
"\n", (*)
q
, (
s16_t
)
i
));

1082 
	`pbuf_‰ì
(
¨p_èbÀ
[
i
].
q
);

1084 
¨p_èbÀ
[
i
].
q
 = 
p
;

1085 
ªsu…
 = 
ERR_OK
;

1086 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_quîy: queuedÖackë %∞⁄ ARPÉ¡ry %"
S16_F
"\n", (*)
q
, (
s16_t
)
i
));

1089 
	`ETHARP_STATS_INC
(
ëh¨p
.
memîr
);

1090 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_quîy: couldÇŸ queuê®c›y o‡PBUF_REFÖackë %∞(ouào‡mem‹y)\n", (*)
q
));

1091 
ªsu…
 = 
ERR_MEM
;

1094  
ªsu…
;

1095 
	}
}

1112 #i‡!
LWIP_AUTOIP


1115 
îr_t


1116 
	$ëh¨p_øw
(
√tif
 *√tif, c⁄° 
ëh_addr
 *
ëh§c_addr
,

1117 c⁄° 
ëh_addr
 *
ëhd°_addr
,

1118 c⁄° 
ëh_addr
 *
hw§c_addr
, c⁄° 
ù_addr_t
 *
ù§c_addr
,

1119 c⁄° 
ëh_addr
 *
hwd°_addr
, c⁄° 
ù_addr_t
 *
ùd°_addr
,

1120 c⁄° 
u16_t
 
›code
)

1122 
pbuf
 *
p
;

1123 
îr_t
 
ªsu…
 = 
ERR_OK
;

1124 
ëh_hdr
 *
ëhhdr
;

1125 
ëh¨p_hdr
 *
hdr
;

1126 #i‡
LWIP_AUTOIP


1127 c⁄° 
u8_t
 * 
ëhd°_hwaddr
;

1131 
p
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
SIZEOF_ETHARP_PACKET
, 
PBUF_RAM
);

1133 i‡(
p
 =
NULL
) {

1134 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_LEVEL_SERIOUS
,

1136 
	`ETHARP_STATS_INC
(
ëh¨p
.
memîr
);

1137  
ERR_MEM
;

1139 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold structÉtharp_hdr",

1140 (
p
->
Àn
 >
SIZEOF_ETHARP_PACKET
));

1142 
ëhhdr
 = (
ëh_hdr
 *)
p
->
∑ylﬂd
;

1143 
hdr
 = (
ëh¨p_hdr
 *)((
u8_t
*)
ëhhdr
 + 
SIZEOF_ETH_HDR
);

1144 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_raw: sendingÑaw ARPÖacket.\n"));

1145 
hdr
->
›code
 = 
	`ht⁄s
(opcode);

1147 
	`LWIP_ASSERT
("netif->hwaddr_len must beÅhe sameás ETHARP_HWADDR_LEN forÉtharp!",

1148 (
√tif
->
hwaddr_Àn
 =
ETHARP_HWADDR_LEN
));

1149 #i‡
LWIP_AUTOIP


1153 
ëhd°_hwaddr
 = 
	`ù_addr_i¶ökloˇl
(
ù§c_addr
Ë? (
u8_t
*)(
ëhbrﬂdˇ°
.
addr
Ë: 
ëhd°_addr
->addr;

1156 
	`ETHADDR16_COPY
(&
hdr
->
shwaddr
, 
hw§c_addr
);

1157 
	`ETHADDR16_COPY
(&
hdr
->
dhwaddr
, 
hwd°_addr
);

1159 #i‡
LWIP_AUTOIP


1160 
	`ETHADDR16_COPY
(&
ëhhdr
->
de°
, 
ëhd°_hwaddr
);

1162 
	`ETHADDR16_COPY
(&
ëhhdr
->
de°
, 
ëhd°_addr
);

1164 
	`ETHADDR16_COPY
(&
ëhhdr
->
§c
, 
ëh§c_addr
);

1167 
	`IPADDR2_COPY
(&
hdr
->
sùaddr
, 
ù§c_addr
);

1168 
	`IPADDR2_COPY
(&
hdr
->
dùaddr
, 
ùd°_addr
);

1170 
hdr
->
hwty≥
 = 
	`PP_HTONS
(
HWTYPE_ETHERNET
);

1171 
hdr
->
¥Ÿo
 = 
	`PP_HTONS
(
ETHTYPE_IP
);

1173 
hdr
->
hwÀn
 = 
ETHARP_HWADDR_LEN
;

1174 
hdr
->
¥Ÿﬁí
 = (
ù_addr_t
);

1176 
ëhhdr
->
ty≥
 = 
	`PP_HTONS
(
ETHTYPE_ARP
);

1178 
ªsu…
 = 
√tif
->
	`lökouçut
“ëif, 
p
);

1179 
	`ETHARP_STATS_INC
(
ëh¨p
.
xmô
);

1181 
	`pbuf_‰ì
(
p
);

1182 
p
 = 
NULL
;

1185  
ªsu…
;

1186 
	}
}

1197 
îr_t


1198 
	$ëh¨p_ªque°
(
√tif
 *√tif, 
ù_addr_t
 *
ùaddr
)

1200 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_request: sending ARPÑequest.\n"));

1201  
	`ëh¨p_øw
(
√tif
, (
ëh_addr
 *Íëif->
hwaddr
, &
ëhbrﬂdˇ°
,

1202 (
ëh_addr
 *)
√tif
->
hwaddr
, &√tif->
ù_addr
, &
ëhzîo
,

1203 
ùaddr
, 
ARP_REQUEST
);

1204 
	}
}

1215 
îr_t


1216 
	$ëhî√t_öput
(
pbuf
 *
p
, 
√tif
 *netif)

1218 
ëh_hdr
* 
ëhhdr
;

1219 
u16_t
 
ty≥
;

1220 
s16_t
 
ù_hdr_off£t
 = 
SIZEOF_ETH_HDR
;

1222 i‡(
p
->
Àn
 <
SIZEOF_ETH_HDR
) {

1224 
	`ETHARP_STATS_INC
(
ëh¨p
.
¥Ÿîr
);

1225 
	`ETHARP_STATS_INC
(
ëh¨p
.
dr›
);

1226 
‰ì_™d_ªtu∫
;

1230 
ëhhdr
 = (
ëh_hdr
 *)
p
->
∑ylﬂd
;

1231 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
,

1232 ("ëhî√t_öput: de°:%"
X8_F
":%"X8_F":%"X8_F":%"X8_F":%"X8_F":%"X8_F", src:%"X8_F":%"X8_F":%"X8_F":%"X8_F":%"X8_F":%"X8_F",Åy≥:%"
X16_F
"\n",

1233 ()
ëhhdr
->
de°
.
addr
[0], ()ethhdr->dest.addr[1], ()ethhdr->dest.addr[2],

1234 ()
ëhhdr
->
de°
.
addr
[3], ()ethhdr->dest.addr[4], ()ethhdr->dest.addr[5],

1235 ()
ëhhdr
->
§c
.
addr
[0], ()ethhdr->src.addr[1], ()ethhdr->src.addr[2],

1236 ()
ëhhdr
->
§c
.
addr
[3], ()ethhdr->src.addr[4], ()ethhdr->src.addr[5],

1237 ()
	`ht⁄s
(
ëhhdr
->
ty≥
)));

1239 
ty≥
 = 
ëhhdr
->type;

1240 #i‡
ETHARP_SUPPORT_VLAN


1241 i‡(
ty≥
 =
	`PP_HTONS
(
ETHTYPE_VLAN
)) {

1242 
ëh_vœn_hdr
 *
vœn
 = (ëh_vœn_hdr*)(((*)
ëhhdr
Ë+ 
SIZEOF_ETH_HDR
);

1243 i‡(
p
->
Àn
 <
SIZEOF_ETH_HDR
 + 
SIZEOF_VLAN_HDR
) {

1245 
	`ETHARP_STATS_INC
(
ëh¨p
.
¥Ÿîr
);

1246 
	`ETHARP_STATS_INC
(
ëh¨p
.
dr›
);

1247 
‰ì_™d_ªtu∫
;

1249 #ifde‡
ETHARP_VLAN_CHECK


1250 i‡(
	`VLAN_ID
(
vœn
Ë!
ETHARP_VLAN_CHECK
) {

1252 
	`pbuf_‰ì
(
p
);

1253  
ERR_OK
;

1256 
ty≥
 = 
vœn
->
çid
;

1257 
ù_hdr_off£t
 = 
SIZEOF_ETH_HDR
 + 
SIZEOF_VLAN_HDR
;

1261 #i‡
LWIP_ARP_FILTER_NETIF


1262 
√tif
 = 
	`LWIP_ARP_FILTER_NETIF_FN
(
p
,Çëif, 
	`ht⁄s
(
ty≥
));

1265 
ty≥
) {

1266 #i‡
LWIP_ARP


1268 
	`PP_HTONS
(
ETHTYPE_IP
):

1269 i‡(!(
√tif
->
Êags
 & 
NETIF_FLAG_ETHARP
)) {

1270 
‰ì_™d_ªtu∫
;

1272 #i‡
ETHARP_TRUST_IP_MAC


1274 
	`ëh¨p_ù_öput
(
√tif
, 
p
);

1277 if(
	`pbuf_hódî
(
p
, -
ù_hdr_off£t
)) {

1278 
	`LWIP_ASSERT
("Can't move over header inÖacket", 0);

1279 
‰ì_™d_ªtu∫
;

1282 
	`ù_öput
(
p
, 
√tif
);

1286 
	`PP_HTONS
(
ETHTYPE_ARP
):

1287 i‡(!(
√tif
->
Êags
 & 
NETIF_FLAG_ETHARP
)) {

1288 
‰ì_™d_ªtu∫
;

1291 
	`ëh¨p_¨p_öput
(
√tif
, (
ëh_addr
*)“ëif->
hwaddr
), 
p
);

1294 #i‡
PPPOE_SUPPORT


1295 
	`PP_HTONS
(
ETHTYPE_PPPOEDISC
):

1296 
	`µp€_disc_öput
(
√tif
, 
p
);

1299 
	`PP_HTONS
(
ETHTYPE_PPPOE
):

1300 
	`µp€_d©a_öput
(
√tif
, 
p
);

1305 
	`ETHARP_STATS_INC
(
ëh¨p
.
¥Ÿîr
);

1306 
	`ETHARP_STATS_INC
(
ëh¨p
.
dr›
);

1307 
‰ì_™d_ªtu∫
;

1312  
ERR_OK
;

1314 
‰ì_™d_ªtu∫
:

1315 
	`pbuf_‰ì
(
p
);

1316  
ERR_OK
;

1317 
	}
}

	@netif/ethernetif.c

46 
	~"lwù/›t.h
"

50 
	~"lwù/def.h
"

51 
	~"lwù/mem.h
"

52 
	~"lwù/pbuf.h
"

53 
	~"lwù/sys.h
"

54 
	~<lwù/°©s.h
>

55 
	~<lwù/¢mp.h
>

56 
	~"√tif/ëh¨p.h
"

57 
	~"√tif/µp_€.h
"

60 
	#IFNAME0
 'e'

	)

61 
	#IFNAME1
 'n'

	)

69 
	sëhî√tif
 {

70 
ëh_addr
 *
	mëhaddr
;

75 
ëhî√tif_öput
(
√tif
 *netif);

85 
	$low_Àvñ_öô
(
√tif
 *netif)

87 
ëhî√tif
 *ëhî√ti‡
√tif
->
°©e
;

90 
√tif
->
hwaddr_Àn
 = 
ETHARP_HWADDR_LEN
;

93 
√tif
->
hwaddr
[0] = ;

95 
√tif
->
hwaddr
[5] = ;

98 
√tif
->
mtu
 = 1500;

102 
√tif
->
Êags
 = 
NETIF_FLAG_BROADCAST
 | 
NETIF_FLAG_ETHARP
 | 
NETIF_FLAG_LINK_UP
;

105 
	}
}

123 
îr_t


124 
	$low_Àvñ_ouçut
(
√tif
 *√tif, 
pbuf
 *
p
)

126 
ëhî√tif
 *ëhî√ti‡
√tif
->
°©e
;

127 
pbuf
 *
q
;

129 
öôüã
 
	`å™s„r
();

131 #i‡
ETH_PAD_SIZE


132 
	`pbuf_hódî
(
p
, -
ETH_PAD_SIZE
);

135 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

139 
£nd
 
d©a
 
	`‰om
(
q
->
∑ylﬂd
, q->
Àn
);

142 
sig«l
 
th©
 
∑ckë
 
should
 
be
 
	`£¡
();

144 #i‡
ETH_PAD_SIZE


145 
	`pbuf_hódî
(
p
, 
ETH_PAD_SIZE
);

148 
	`LINK_STATS_INC
(
lök
.
xmô
);

150  
ERR_OK
;

151 
	}
}

161 
pbuf
 *

162 
	$low_Àvñ_öput
(
√tif
 *netif)

164 
ëhî√tif
 *ëhî√ti‡
√tif
->
°©e
;

165 
pbuf
 *
p
, *
q
;

166 
u16_t
 
Àn
;

170 
Àn
 = ;

172 #i‡
ETH_PAD_SIZE


173 
Àn
 +
ETH_PAD_SIZE
;

177 
p
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
Àn
, 
PBUF_POOL
);

179 i‡(
p
 !
NULL
) {

181 #i‡
ETH_PAD_SIZE


182 
	`pbuf_hódî
(
p
, -
ETH_PAD_SIZE
);

187 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

196 
ªad
 
d©a
 
	`öto
(
q
->
∑ylﬂd
, q->
Àn
);

198 
acknowÀdge
 
th©
 
∑ckë
 
has
 
bìn
 
	`ªad
();

200 #i‡
ETH_PAD_SIZE


201 
	`pbuf_hódî
(
p
, 
ETH_PAD_SIZE
);

204 
	`LINK_STATS_INC
(
lök
.
ªcv
);

206 
dr›
 
	`∑ckë
();

207 
	`LINK_STATS_INC
(
lök
.
memîr
);

208 
	`LINK_STATS_INC
(
lök
.
dr›
);

211  
p
;

212 
	}
}

224 
	$ëhî√tif_öput
(
√tif
 *netif)

226 
ëhî√tif
 *ethernetif;

227 
ëh_hdr
 *
ëhhdr
;

228 
pbuf
 *
p
;

230 
ëhî√tif
 = 
√tif
->
°©e
;

233 
p
 = 
	`low_Àvñ_öput
(
√tif
);

235 i‡(
p
 =
NULL
) ;

237 
ëhhdr
 = 
p
->
∑ylﬂd
;

239 
	`ht⁄s
(
ëhhdr
->
ty≥
)) {

241 
ETHTYPE_IP
:

242 
ETHTYPE_ARP
:

243 #i‡
PPPOE_SUPPORT


245 
ETHTYPE_PPPOEDISC
:

246 
ETHTYPE_PPPOE
:

249 i‡(
√tif
->
	`öput
(
p
,Çëif)!=
ERR_OK
)

250 { 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("ethernetif_input: IP inputÉrror\n"));

251 
	`pbuf_‰ì
(
p
);

252 
p
 = 
NULL
;

257 
	`pbuf_‰ì
(
p
);

258 
p
 = 
NULL
;

261 
	}
}

275 
îr_t


276 
	$ëhî√tif_öô
(
√tif
 *netif)

278 
ëhî√tif
 *ethernetif;

280 
	`LWIP_ASSERT
("√ti‡!NULL", (
√tif
 !
NULL
));

282 
ëhî√tif
 = 
	`mem_mÆloc
((ethernetif));

283 i‡(
ëhî√tif
 =
NULL
) {

284 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("ethernetif_init: out of memory\n"));

285  
ERR_MEM
;

288 #i‡
LWIP_NETIF_HOSTNAME


290 
√tif
->
ho°«me
 = "lwip";

298 
	`NETIF_INIT_SNMP
(
√tif
, 
¢mp_ifTy≥_ëhî√t_csmacd
, 
LINK_SPEED_OF_YOUR_NETIF_IN_BPS
);

300 
√tif
->
°©e
 = 
ëhî√tif
;

301 
√tif
->
«me
[0] = 
IFNAME0
;

302 
√tif
->
«me
[1] = 
IFNAME1
;

307 
√tif
->
ouçut
 = 
ëh¨p_ouçut
;

308 
√tif
->
lökouçut
 = 
low_Àvñ_ouçut
;

310 
ëhî√tif
->
ëhaddr
 = (
ëh_addr
 *)&(
√tif
->
hwaddr
[0]);

313 
	`low_Àvñ_öô
(
√tif
);

315  
ERR_OK
;

316 
	}
}

	@netif/ppp/auth.c

67 
	~"lwù/›t.h
"

69 #i‡
PPP_SUPPORT


71 
	~"µp.h
"

72 
	~"µpdebug.h
"

74 
	~"fsm.h
"

75 
	~"l˝.h
"

76 
	~"∑p.h
"

77 
	~"ch≠.h
"

78 
	~"auth.h
"

79 
	~"ù˝.h
"

81 #i‡
CBCP_SUPPORT


82 
	~"cb˝.h
"

85 
	~"lwù/öë.h
"

87 
	~<°rög.h
>

91 
	#NONWILD_SERVER
 1

	)

92 
	#NONWILD_CLIENT
 2

	)

94 
	#ISWILD
(
w‹d
Ë(w‹d[0] ='*' && w‹d[1] =0)

	)

97 #i‡
PAP_SUPPORT
 || 
CHAP_SUPPORT


99 
	g≥î_auth«me
[
MAXNAMELEN
];

103 
	gauth_≥ndög
[
NUM_PPP
];

106 
	glogged_ö
;

109 
	gdid_authup
;

112 
w‹dli°
 *
	gaddªs£s
[
NUM_PPP
];

117 
w‹dli°
 *
	gnﬂuth_addrs
;

120 
w‹dli°
 *
	gexåa_›ti⁄s
;

124 
	gnum_≈_›í
;

127 
	gnum_≈_up
;

129 #i‡
PAP_SUPPORT
 || 
CHAP_SUPPORT


131 
	g∑sswd_‰om_fûe
;

136 
boﬁ
 
	gdeÁu…_auth
;

139 (*
idÀ_time_hook
Ë
	`__P
((
µp_idÀ
 *)Ë
NULL
;

142 (*
∑p_check_hook
Ë
	`__P
(()Ë
NULL
;

145 (*
∑p_auth_hook
Ë
	`__P
((*
u£r
, *
∑sswd
, **
msgp
,

146 
w‹dli°
 **
∑ddrs
,

147 
w‹dli°
 **
p›ts
)Ë
NULL
;

150 (*
∑p_logout_hook
Ë
	`__P
(()Ë
NULL
;

153 (*
∑p_∑sswd_hook
Ë
	`__P
((*
u£r
, *
∑sswd
)Ë
NULL
;

159 
	es¸ùt_°©e
 {

160 
s_down
,

161 
s_up


164 
s¸ùt_°©e
 
auth_°©e
 = 
s_down
;

165 
s¸ùt_°©e
 
auth_s¸ùt_°©e
 = 
s_down
;

166 
pid_t
 
auth_s¸ùt_pid
 = 0;

172 
boﬁ
 
u£logö
 = 0;

173 
boﬁ
 
¸y±∑p
 = 0;

174 
boﬁ
 
ªfu£_∑p
 = 0;

175 
boﬁ
 
ªfu£_ch≠
 = 0;

176 
boﬁ
 
u£ho°«me
 = 0;

177 
boﬁ
 
auth_ªquúed
 = 0;

178 
boﬁ
 
Ælow_™y_ù
 = 0;

179 
boﬁ
 
ex∂icô_ªmŸe
 = 0;

180 
ªmŸe_«me
[
MAXNAMELEN
];

185 
	#PAP_WITHPEER
 1

	)

186 
	#PAP_PEER
 2

	)

187 
	#CHAP_WITHPEER
 4

	)

188 
	#CHAP_PEER
 8

	)

192 
	sw‹dli°
 {

193 
w‹dli°
 *
√xt
;

194 
w‹d
[1];

198 *
	`¸y±
 (const *, const *);

202 
	`√tw‹k_pha£
 ();

203 
	`check_idÀ
 (*);

204 
	`c⁄√˘_time_expúed
 (*);

206 
	`∂ogö
 (*, *, **, *);

208 
	`∂ogout
 ();

209 
	`nuŒ_logö
 ();

210 
	`gë_∑p_∑sswd
 (, *, *);

211 
	`have_∑p_£¸ë
 ();

212 
	`have_ch≠_£¸ë
 (*, *, 
u32_t
);

213 
	`ù_addr_check
 (
u32_t
, 
w‹dli°
 *);

216 
	`sˇn_authfûe
 (
FILE
 *, *, *, *,

217 
w‹dli°
 **, wordlist **,

219 
	`‰ì_w‹dli°
 (
w‹dli°
 *);

220 
	`auth_s¸ùt
 (*);

221 
	`auth_s¸ùt_d⁄e
 (*);

222 
	`£t_Ælowed_addrs
 (
unô
, 
w‹dli°
 *
addrs
);

223 
	`some_ù_ok
 (
w‹dli°
 *);

224 
	`£tu∑pfûe
 (**);

225 
	`¥ivgroup
 (**);

226 
	`£t_nﬂuth_addr
 (**);

227 
	`check_ac˚ss
 (
FILE
 *, *);

234 
›ti⁄_t
 
auth_›ti⁄s
[] = {

235 { "ªquúe-∑p", 
o_boﬁ
, &
l˝_w™t›ti⁄s
[0].
√g_u∑p
,

236 "RequúêPAPáuthítiˇti⁄ fromÖìr", 1, &
auth_ªquúed
 },

237 { "+∑p", 
o_boﬁ
, &
l˝_w™t›ti⁄s
[0].
√g_u∑p
,

238 "RequúêPAPáuthítiˇti⁄ fromÖìr", 1, &
auth_ªquúed
 },

239 { "ªfu£-∑p", 
o_boﬁ
, &
ªfu£_∑p
,

241 { "-∑p", 
o_boﬁ
, &
ªfu£_∑p
,

243 { "ªquúe-ch≠", 
o_boﬁ
, &
l˝_w™t›ti⁄s
[0].
√g_ch≠
,

244 "RequúêCHAPáuthítiˇti⁄ fromÖìr", 1, &
auth_ªquúed
 },

245 { "+ch≠", 
o_boﬁ
, &
l˝_w™t›ti⁄s
[0].
√g_ch≠
,

246 "RequúêCHAPáuthítiˇti⁄ fromÖìr", 1, &
auth_ªquúed
 },

247 { "ªfu£-ch≠", 
o_boﬁ
, &
ªfu£_ch≠
,

249 { "-ch≠", 
o_boﬁ
, &
ªfu£_ch≠
,

251 { "«me", 
o_°rög
, 
our_«me
,

253 
OPT_PRIV
|
OPT_STATIC
, 
NULL
, 
MAXNAMELEN
 },

254 { "u£r", 
o_°rög
, 
u£r
,

255 "SëÇamêf‹áuth wôhÖìr", 
OPT_STATIC
, 
NULL
, 
MAXNAMELEN
 },

256 { "u£ho°«me", 
o_boﬁ
, &
u£ho°«me
,

258 { "ªmŸíame", 
o_°rög
, 
ªmŸe_«me
,

259 "SëÑemŸê«mêf‹áuthítiˇti⁄", 
OPT_STATIC
,

260 &
ex∂icô_ªmŸe
, 
MAXNAMELEN
 },

261 { "auth", 
o_boﬁ
, &
auth_ªquúed
,

263 { "nﬂuth", 
o_boﬁ
, &
auth_ªquúed
,

264 "D⁄'àªquúê≥îÅÿauthítiˇã", 
OPT_PRIV
, &
Ælow_™y_ù
 },

265 { "logö", 
o_boﬁ
, &
u£logö
,

267 { "∑p¸y±", 
o_boﬁ
, &
¸y±∑p
,

269 { "+ua", 
o_•ecül
, (*)
£tu∑pfûe
,

271 { "∑ssw‹d", 
o_°rög
, 
∑sswd
,

272 "Passw‹d f‹áuthítiˇtög u†tÿthê≥î", 
OPT_STATIC
,

273 
NULL
, 
MAXSECRETLEN
 },

274 { "¥ivgroup", 
o_•ecül
, (*)
¥ivgroup
,

275 "AŒow grou∞membî†tÿu£Örivûeged o±i⁄s", 
OPT_PRIV
 },

276 { "Ælow-ù", 
o_•ecül
, (*)
£t_nﬂuth_addr
,

278 
OPT_PRIV
 },

279 { 
NULL
 }

280 
	}
};

287 
	$£tu∑pfûe
(**
¨gv
)

289 
FILE
 * 
ufûe
;

290 
l
;

292 
l˝_Ælow›ti⁄s
[0].
√g_u∑p
 = 1;

295 
	`£ãuid
(
	`gëuid
());

296 
ufûe
 = 
	`f›í
(*
¨gv
, "r");

297 
	`£ãuid
(0);

298 i‡(
ufûe
 =
NULL
) {

299 
	`›ti⁄_îr‹
("u«bÀÅÿ›í u£∏logö d©®fûê%s", *
¨gv
);

302 
	`check_ac˚ss
(
ufûe
, *
¨gv
);

305 i‡(
	`fgës
(
u£r
, 
MAXNAMELEN
 - 1, 
ufûe
Ë=
NULL


306 || 
	`fgës
(
∑sswd
, 
MAXSECRETLEN
 - 1, 
ufûe
Ë=
NULL
){

307 
	`›ti⁄_îr‹
("u«bÀÅÿªad u£∏logö d©®fûê%s", *
¨gv
);

310 
	`f˛o£
(
ufûe
);

313 
l
 = 
	`°æí
(
u£r
);

314 i‡(
l
 > 0 && 
u£r
[l-1] == '\n')

315 
u£r
[
l
-1] = 0;

316 
l
 = 
	`°æí
(
∑sswd
);

317 i‡(
l
 > 0 && 
∑sswd
[l-1] == '\n')

318 
∑sswd
[
l
-1] = 0;

321 
	}
}

329 
	$¥ivgroup
(**
¨gv
)

331 
group
 *
g
;

332 
i
;

334 
g
 = 
	`gëg∫am
(*
¨gv
);

335 i‡(
g
 == 0) {

336 
	`›ti⁄_îr‹
("grou∞%†i†unknown", *
¨gv
);

339 
i
 = 0; i < 
ngroups
; ++i) {

340 i‡(
groups
[
i
] =
g
->
gr_gid
) {

341 
¥ivûeged
 = 1;

346 
	}
}

355 
	$£t_nﬂuth_addr
(**
¨gv
)

357 *
addr
 = *
¨gv
;

358 
l
 = 
	`°æí
(
addr
);

359 
w‹dli°
 *
wp
;

361 
wp
 = (
w‹dli°
 *Ë
	`mÆloc
((w‹dli°Ë+ 
l
 + 1);

362 i‡(
wp
 =
NULL
)

363 
	`novm
("allow-ipárgument");

364 
wp
->
w‹d
 = (*) (wp + 1);

365 
wp
->
√xt
 = 
nﬂuth_addrs
;

366 
	`BCOPY
(
addr
, 
wp
->
w‹d
, 
l
);

367 
nﬂuth_addrs
 = 
wp
;

369 
	}
}

377 
	$lök_ªquúed
(
unô
)

379 
	`LWIP_UNUSED_ARG
(
unô
);

381 
	`AUTHDEBUG
(
LOG_INFO
, ("lök_ªquúed: %d\n", 
unô
));

382 
	}
}

389 
	$lök_ãrmö©ed
(
unô
)

391 
	`AUTHDEBUG
(
LOG_INFO
, ("lök_ãrmö©ed: %d\n", 
unô
));

392 i‡(
l˝_pha£
[
unô
] =
PHASE_DEAD
) {

395 i‡(
logged_ö
) {

396 
	`∂ogout
();

398 
l˝_pha£
[
unô
] = 
PHASE_DEAD
;

399 
	`AUTHDEBUG
(
LOG_NOTICE
, ("ConnectionÅerminated.\n"));

400 
	`µpLökTîmö©ed
(
unô
);

401 
	}
}

407 
	$lök_down
(
unô
)

409 
i
;

410 
¥Ÿít
 *
¥Ÿp
;

412 
	`AUTHDEBUG
(
LOG_INFO
, ("lök_down: %d\n", 
unô
));

414 i‡(
did_authup
) {

416 
did_authup
 = 0;

418 
i
 = 0; (
¥Ÿp
 = 
µp_¥Ÿocﬁs
[i]Ë!
NULL
; ++i) {

419 i‡(!
¥Ÿp
->
íabÀd_Êag
) {

422 i‡(
¥Ÿp
->
¥Ÿocﬁ
 !
PPP_LCP
 &&ÖrŸp->
lowîdown
 !
NULL
) {

423 (*
¥Ÿp
->
lowîdown
)(
unô
);

425 i‡(
¥Ÿp
->
¥Ÿocﬁ
 < 0xC000 &&ÖrŸp->
˛o£
 !
NULL
) {

426 (*
¥Ÿp
->
˛o£
)(
unô
, "LCP down");

429 
num_≈_›í
 = 0;

430 
num_≈_up
 = 0;

432 i‡(
l˝_pha£
[
unô
] !
PHASE_DEAD
) {

433 
l˝_pha£
[
unô
] = 
PHASE_TERMINATE
;

435 
	`µpLökDown
(
unô
);

436 
	}
}

443 
	$lök_e°ablished
(
unô
)

445 
auth
;

446 
i
;

447 
¥Ÿít
 *
¥Ÿp
;

448 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
unô
];

449 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
unô
];

450 #i‡
PAP_SUPPORT
 || 
CHAP_SUPPORT


451 
l˝_›ti⁄s
 *
ho
 = &
l˝_his›ti⁄s
[
unô
];

454 
	`AUTHDEBUG
(
LOG_INFO
, ("lök_e°ablished: unô %d; Lowîög u∞Æ»¥Ÿocﬁs...\n", 
unô
));

458 
i
 = 0; (
¥Ÿp
 = 
µp_¥Ÿocﬁs
[i]Ë!
NULL
; ++i) {

459 i‡(
¥Ÿp
->
¥Ÿocﬁ
 !
PPP_LCP
 &&ÖrŸp->
íabÀd_Êag
 &&ÖrŸp->
lowîup
 !
NULL
) {

460 (*
¥Ÿp
->
lowîup
)(
unô
);

463 i‡(
µp_£âögs
.
auth_ªquúed
 && !(
go
->
√g_ch≠
 || go->
√g_u∑p
)) {

469 i‡(!
wo
->
√g_u∑p
 || !
	`nuŒ_logö
(
unô
)) {

470 
	`AUTHDEBUG
(
LOG_WARNING
, ("peerÑefusedÅoáuthenticate\n"));

471 
	`l˝_˛o£
(
unô
, "peerÑefusedÅoáuthenticate");

476 
l˝_pha£
[
unô
] = 
PHASE_AUTHENTICATE
;

477 
auth
 = 0;

478 #i‡
CHAP_SUPPORT


479 i‡(
go
->
√g_ch≠
) {

480 
	`Ch≠AuthPìr
(
unô
, 
µp_£âögs
.
our_«me
, 
go
->
ch≠_mdty≥
);

481 
auth
 |
CHAP_PEER
;

484 #i‡
PAP_SUPPORT
 && 
CHAP_SUPPORT


487 #i‡
PAP_SUPPORT


488 i‡(
go
->
√g_u∑p
) {

489 
	`u∑p_auth≥î
(
unô
);

490 
auth
 |
PAP_PEER
;

493 #i‡
CHAP_SUPPORT


494 i‡(
ho
->
√g_ch≠
) {

495 
	`Ch≠AuthWôhPìr
(
unô
, 
µp_£âögs
.
u£r
, 
ho
->
ch≠_mdty≥
);

496 
auth
 |
CHAP_WITHPEER
;

499 #i‡
PAP_SUPPORT
 && 
CHAP_SUPPORT


502 #i‡
PAP_SUPPORT


503 i‡(
ho
->
√g_u∑p
) {

504 i‡(
µp_£âögs
.
∑sswd
[0] == 0) {

505 
∑sswd_‰om_fûe
 = 1;

506 i‡(!
	`gë_∑p_∑sswd
(
unô
, 
µp_£âögs
.
u£r
,Öµ_£âögs.
∑sswd
)) {

507 
	`AUTHDEBUG
(
LOG_ERR
, ("No secret found for PAPÜogin\n"));

510 
	`u∑p_authwôh≥î
(
unô
, 
µp_£âögs
.
u£r
,Öµ_£âögs.
∑sswd
);

511 
auth
 |
PAP_WITHPEER
;

514 
auth_≥ndög
[
unô
] = 
auth
;

516 i‡(!
auth
) {

517 
	`√tw‹k_pha£
(
unô
);

519 
	}
}

525 
	$√tw‹k_pha£
(
unô
)

527 
i
;

528 
¥Ÿít
 *
¥Ÿp
;

529 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
unô
];

534 i‡((
go
->
√g_ch≠
 || go->
√g_u∑p
Ë&& !
did_authup
) {

536 
did_authup
 = 1;

539 #i‡
CBCP_SUPPORT


543 i‡(
go
->
√g_cb˝
) {

544 
l˝_pha£
[
unô
] = 
PHASE_CALLBACK
;

545 (*
cb˝_¥Ÿít
.
›í
)(
unô
);

550 
l˝_pha£
[
unô
] = 
PHASE_NETWORK
;

551 
i
 = 0; (
¥Ÿp
 = 
µp_¥Ÿocﬁs
[i]Ë!
NULL
; ++i) {

552 i‡(
¥Ÿp
->
¥Ÿocﬁ
 < 0xC000 &&ÖrŸp->
íabÀd_Êag
 &&ÖrŸp->
›í
 !
NULL
) {

553 (*
¥Ÿp
->
›í
)(
unô
);

554 i‡(
¥Ÿp
->
¥Ÿocﬁ
 !
PPP_CCP
) {

555 ++
num_≈_›í
;

560 i‡(
num_≈_›í
 == 0) {

562 
	`l˝_˛o£
(0, "NoÇetworkÖrotocolsÑunning");

564 
	}
}

571 
	$auth_≥î_Áû
(
unô
, 
u16_t
 
¥Ÿocﬁ
)

573 
	`LWIP_UNUSED_ARG
(
¥Ÿocﬁ
);

575 
	`AUTHDEBUG
(
LOG_INFO
, ("auth_≥î_Áû: %dÖrŸo=%X\n", 
unô
, 
¥Ÿocﬁ
));

579 
	`l˝_˛o£
(
unô
, "Authentication failed");

580 
	}
}

583 #i‡
PAP_SUPPORT
 || 
CHAP_SUPPORT


588 
	$auth_≥î_suc˚ss
(
unô
, 
u16_t
 
¥Ÿocﬁ
, *
«me
, 
«mñí
)

590 
pbô
;

592 
	`AUTHDEBUG
(
LOG_INFO
, ("auth_≥î_suc˚ss: %dÖrŸo=%X\n", 
unô
, 
¥Ÿocﬁ
));

593 
¥Ÿocﬁ
) {

594 
PPP_CHAP
:

595 
pbô
 = 
CHAP_PEER
;

597 
PPP_PAP
:

598 
pbô
 = 
PAP_PEER
;

601 
	`AUTHDEBUG
(
LOG_WARNING
, ("auth_≥î_suc˚ss: unknow¿¥Ÿocﬁ %x\n", 
¥Ÿocﬁ
));

608 i‡(
«mñí
 > ()(
≥î_auth«me
) - 1) {

609 
«mñí
 = (
≥î_auth«me
) - 1;

611 
	`BCOPY
(
«me
, 
≥î_auth«me
, 
«mñí
);

612 
≥î_auth«me
[
«mñí
] = 0;

618 i‡((
auth_≥ndög
[
unô
] &~
pbô
) == 0) {

619 
	`√tw‹k_pha£
(
unô
);

621 
	}
}

627 
	$auth_wôh≥î_Áû
(
unô
, 
u16_t
 
¥Ÿocﬁ
)

629 
îrCode
 = 
PPPERR_AUTHFAIL
;

631 
	`LWIP_UNUSED_ARG
(
¥Ÿocﬁ
);

633 
	`AUTHDEBUG
(
LOG_INFO
, ("auth_wôh≥î_Áû: %dÖrŸo=%X\n", 
unô
, 
¥Ÿocﬁ
));

634 i‡(
∑sswd_‰om_fûe
) {

635 
	`BZERO
(
µp_£âögs
.
∑sswd
, 
MAXSECRETLEN
);

643 
	`µpIOCé
(
unô
, 
PPPCTLS_ERRCODE
, &
îrCode
);

644 
	`l˝_˛o£
(
unô
, "FailedÅoáuthenticate ourselvesÅoÖeer");

645 
	}
}

651 
	$auth_wôh≥î_suc˚ss
(
unô
, 
u16_t
 
¥Ÿocﬁ
)

653 
pbô
;

655 
	`AUTHDEBUG
(
LOG_INFO
, ("auth_wôh≥î_suc˚ss: %dÖrŸo=%X\n", 
unô
, 
¥Ÿocﬁ
));

656 
¥Ÿocﬁ
) {

657 
PPP_CHAP
:

658 
pbô
 = 
CHAP_WITHPEER
;

660 
PPP_PAP
:

661 i‡(
∑sswd_‰om_fûe
) {

662 
	`BZERO
(
µp_£âögs
.
∑sswd
, 
MAXSECRETLEN
);

664 
pbô
 = 
PAP_WITHPEER
;

667 
	`AUTHDEBUG
(
LOG_WARNING
, ("auth_≥î_suc˚ss: unknow¿¥Ÿocﬁ %x\n", 
¥Ÿocﬁ
));

668 
pbô
 = 0;

675 i‡((
auth_≥ndög
[
unô
] &~
pbô
) == 0) {

676 
	`√tw‹k_pha£
(
unô
);

678 
	}
}

686 
	$≈_up
(
unô
, 
u16_t
 
¥Ÿo
)

688 
	`LWIP_UNUSED_ARG
(
unô
);

689 
	`LWIP_UNUSED_ARG
(
¥Ÿo
);

691 
	`AUTHDEBUG
(
LOG_INFO
, ("≈_up: %dÖrŸo=%X\n", 
unô
, 
¥Ÿo
));

692 i‡(
num_≈_up
 == 0) {

693 
	`AUTHDEBUG
(
LOG_INFO
, ("≈_up: maxc⁄√˘=%d idÀ_time_limô=%d\n",
µp_£âögs
.
maxc⁄√˘
,µp_£âögs.
idÀ_time_limô
));

697 i‡(
µp_£âögs
.
idÀ_time_limô
 > 0) {

698 
	`TIMEOUT
(
check_idÀ
, 
NULL
, 
µp_£âögs
.
idÀ_time_limô
);

705 i‡(
µp_£âögs
.
maxc⁄√˘
 > 0) {

706 
	`TIMEOUT
(
c⁄√˘_time_expúed
, 0, 
µp_£âögs
.
maxc⁄√˘
);

709 ++
num_≈_up
;

710 
	}
}

716 
	$≈_down
(
unô
, 
u16_t
 
¥Ÿo
)

718 
	`LWIP_UNUSED_ARG
(
unô
);

719 
	`LWIP_UNUSED_ARG
(
¥Ÿo
);

721 
	`AUTHDEBUG
(
LOG_INFO
, ("≈_down: %dÖrŸo=%X\n", 
unô
, 
¥Ÿo
));

722 i‡(--
num_≈_up
 =0 && 
µp_£âögs
.
idÀ_time_limô
 > 0) {

723 
	`UNTIMEOUT
(
check_idÀ
, 
NULL
);

725 
	}
}

731 
	$≈_föished
(
unô
, 
u16_t
 
¥Ÿo
)

733 
	`LWIP_UNUSED_ARG
(
unô
);

734 
	`LWIP_UNUSED_ARG
(
¥Ÿo
);

736 
	`AUTHDEBUG
(
LOG_INFO
, ("≈_föished: %dÖrŸo=%X\n", 
unô
, 
¥Ÿo
));

737 i‡(--
num_≈_›í
 <= 0) {

739 
	`l˝_˛o£
(0, "NoÇetworkÖrotocolsÑunning");

741 
	}
}

748 
	$check_idÀ
(*
¨g
)

750 
µp_idÀ
 
idÀ
;

751 
u_sh‹t
 
ôime
;

753 
	`LWIP_UNUSED_ARG
(
¨g
);

754 i‡(!
	`gë_idÀ_time
(0, &
idÀ
)) {

757 
ôime
 = 
	`LWIP_MIN
(
idÀ
.
xmô_idÀ
, idÀ.
ªcv_idÀ
);

758 i‡(
ôime
 >
µp_£âögs
.
idÀ_time_limô
) {

760 
	`AUTHDEBUG
(
LOG_INFO
, ("Terminating connection dueÅoÜack ofáctivity.\n"));

761 
	`l˝_˛o£
(0, "Link inactive");

763 
	`TIMEOUT
(
check_idÀ
, 
NULL
, 
µp_£âögs
.
idÀ_time_limô
 - 
ôime
);

765 
	}
}

771 
	$c⁄√˘_time_expúed
(*
¨g
)

773 
	`LWIP_UNUSED_ARG
(
¨g
);

775 
	`AUTHDEBUG
(
LOG_INFO
, ("ConnectÅimeÉxpired\n"));

776 
	`l˝_˛o£
(0, "ConnectÅimeÉxpired");

777 
	}
}

784 
	$auth_check_›ti⁄s
()

786 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[0];

787 
ˇn_auth
;

788 
ù˝_›ti⁄s
 *
ùwo
 = &
ù˝_w™t›ti⁄s
[0];

789 
u32_t
 
ªmŸe
;

792 i‡(
µp_£âögs
.
our_«me
[0] =0 ||Öµ_£âögs.
u£ho°«me
) {

793 
	`°r˝y
(
µp_£âögs
.
our_«me
,Öµ_£âögs.
ho°«me
);

796 i‡(
µp_£âögs
.
u£r
[0] == 0) {

797 
	`°r˝y
(
µp_£âögs
.
u£r
,Öµ_£âögs.
our_«me
);

801 i‡(
µp_£âögs
.
auth_ªquúed
 && !
wo
->
√g_ch≠
 && !wo->
√g_u∑p
) {

802 
wo
->
√g_ch≠
 = 1;

803 
wo
->
√g_u∑p
 = 1;

810 
ˇn_auth
 = 
wo
->
√g_u∑p
 && 
	`have_∑p_£¸ë
();

811 i‡(!
ˇn_auth
 && 
wo
->
√g_ch≠
) {

812 
ªmŸe
 = 
ùwo
->
ac˚±_ªmŸe
? 0: ipwo->
hißddr
;

813 
ˇn_auth
 = 
	`have_ch≠_£¸ë
(
µp_£âögs
.
ªmŸe_«me
,Öµ_£âögs.
our_«me
, 
ªmŸe
);

816 i‡(
µp_£âögs
.
auth_ªquúed
 && !
ˇn_auth
) {

817 
	`µp_∑nic
("Noáuth secret");

819 
	}
}

828 
	$auth_ª£t
(
unô
)

830 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
unô
];

831 
l˝_›ti⁄s
 *
ao
 = &
l˝_Ælow›ti⁄s
[0];

832 
ù˝_›ti⁄s
 *
ùwo
 = &
ù˝_w™t›ti⁄s
[0];

833 
u32_t
 
ªmŸe
;

835 
	`AUTHDEBUG
(
LOG_INFO
, ("auth_ª£t: %d\n", 
unô
));

836 
ao
->
√g_u∑p
 = !
µp_£âögs
.
ªfu£_∑p
 && (µp_£âögs.
∑sswd
[0] !0 || 
	`gë_∑p_∑sswd
(
unô
, 
NULL
, NULL));

837 
ao
->
√g_ch≠
 = !
µp_£âögs
.
ªfu£_ch≠
 &&Öµ_£âögs.
∑sswd
[0] != 0 ;

839 i‡(
go
->
√g_u∑p
 && !
	`have_∑p_£¸ë
()) {

840 
go
->
√g_u∑p
 = 0;

842 i‡(
go
->
√g_ch≠
) {

843 
ªmŸe
 = 
ùwo
->
ac˚±_ªmŸe
? 0: ipwo->
hißddr
;

844 i‡(!
	`have_ch≠_£¸ë
(
µp_£âögs
.
ªmŸe_«me
,Öµ_£âögs.
our_«me
, 
ªmŸe
)) {

845 
go
->
√g_ch≠
 = 0;

848 
	}
}

850 #i‡
PAP_SUPPORT


861 
u_ch¨


862 
	$check_∑sswd
–
unô
, *
au£r
, 
u£æí
, *
≠asswd
, 
∑sswdÀn
, **
msg
, *
msgÀn
)

865 
	`LWIP_UNUSED_ARG
(
unô
);

866 
	`LWIP_UNUSED_ARG
(
au£r
);

867 
	`LWIP_UNUSED_ARG
(
u£æí
);

868 
	`LWIP_UNUSED_ARG
(
≠asswd
);

869 
	`LWIP_UNUSED_ARG
(
∑sswdÀn
);

870 
	`LWIP_UNUSED_ARG
(
msgÀn
);

871 *
msg
 = (*) 0;

872  
UPAP_AUTHACK
;

874 
u_ch¨
 
ªt
 = 0;

875 
w‹dli°
 *
addrs
 = 
NULL
;

876 
∑sswd
[256], 
u£r
[256];

877 
£¸ë
[
MAXWORDLEN
];

878 
u_sh‹t
 
©ãm±s
 = 0;

883 
	`BCOPY
(
≠asswd
, 
∑sswd
, 
∑sswdÀn
);

884 
∑sswd
[
∑sswdÀn
] = '\0';

885 
	`BCOPY
(
au£r
, 
u£r
, 
u£æí
);

886 
u£r
[
u£æí
] = '\0';

887 *
msg
 = (*) 0;

890 
ªt
 = 
UPAP_AUTHACK
;

892 i‡(
ªt
 =
UPAP_AUTHNAK
) {

893 i‡(*
msg
 == (*) 0) {

894 *
msg
 = "Login incorrect";

896 *
msgÀn
 = 
	`°æí
(*
msg
);

902 i‡(
©ãm±s
++ >= 10) {

903 
	`AUTHDEBUG
(
LOG_WARNING
, ("%d LOGIN FAILURES BY %s\n", 
©ãm±s
, 
u£r
));

906 i‡(
©ãm±s
 > 3) {

912 i‡(
addrs
 !
NULL
) {

913 
	`‰ì_w‹dli°
(
addrs
);

916 
©ãm±s
 = 0;

917 i‡(*
msg
 == (*) 0) {

918 *
msg
 = "Login ok";

920 *
msgÀn
 = 
	`°æí
(*
msg
);

921 
	`£t_Ælowed_addrs
(
unô
, 
addrs
);

924 
	`BZERO
(
∑sswd
, (passwd));

925 
	`BZERO
(
£¸ë
, (secret));

927  
ªt
;

929 
	}
}

937 #ifde‡
USE_PAM


957 
	$∂ogö
(*
u£r
, *
∑sswd
, **
msg
, *
msgÀn
)

960 
	`LWIP_UNUSED_ARG
(
u£r
);

961 
	`LWIP_UNUSED_ARG
(
∑sswd
);

962 
	`LWIP_UNUSED_ARG
(
msg
);

963 
	`LWIP_UNUSED_ARG
(
msgÀn
);

985  (
UPAP_AUTHNAK
);

986 
	}
}

995 
	$∂ogout
()

997 
logged_ö
 = 0;

998 
	}
}

1006 
	$nuŒ_logö
(
unô
)

1008 
	`LWIP_UNUSED_ARG
(
unô
);

1011 
	}
}

1020 
	$gë_∑p_∑sswd
(
unô
, *
u£r
, *
∑sswd
)

1022 
	`LWIP_UNUSED_ARG
(
unô
);

1030 if(
u£r
) {

1031 
	`°r˝y
(
u£r
, "none");

1033 if(
∑sswd
) {

1034 
	`°r˝y
(
∑sswd
, "none");

1037 
	}
}

1044 
	$have_∑p_£¸ë
()

1048 
	}
}

1057 
	$have_ch≠_£¸ë
(*
˛õ¡
, *
£rvî
, 
u32_t
 
ªmŸe
)

1059 
	`LWIP_UNUSED_ARG
(
˛õ¡
);

1060 
	`LWIP_UNUSED_ARG
(
£rvî
);

1061 
	`LWIP_UNUSED_ARG
(
ªmŸe
);

1065 
	}
}

1066 #i‡
CHAP_SUPPORT


1074 
	$gë_£¸ë
(
unô
, *
˛õ¡
, *
£rvî
, *
£¸ë
, *
£¸ë_Àn
, 
ßve_addrs
)

1077 
Àn
;

1078 
w‹dli°
 *
addrs
;

1080 
	`LWIP_UNUSED_ARG
(
unô
);

1081 
	`LWIP_UNUSED_ARG
(
£rvî
);

1082 
	`LWIP_UNUSED_ARG
(
ßve_addrs
);

1084 
addrs
 = 
NULL
;

1086 if(!
˛õ¡
 || !˛õ¡[0] || 
	`°rcmp
(˛õ¡, 
µp_£âögs
.
u£r
)) {

1090 
Àn
 = ()
	`°æí
(
µp_£âögs
.
∑sswd
);

1091 i‡(
Àn
 > 
MAXSECRETLEN
) {

1092 
	`AUTHDEBUG
(
LOG_ERR
, ("Se¸ë f‹ %†⁄ %†i†toÿl⁄g\n", 
˛õ¡
, 
£rvî
));

1093 
Àn
 = 
MAXSECRETLEN
;

1096 
	`BCOPY
(
µp_£âögs
.
∑sswd
, 
£¸ë
, 
Àn
);

1097 *
£¸ë_Àn
 = 
Àn
;

1101 
ªt
 = 0, 
Àn
;

1102 
w‹dli°
 *
addrs
;

1103 
£cbuf
[
MAXWORDLEN
];

1105 
addrs
 = 
NULL
;

1106 
£cbuf
[0] = 0;

1109 i‡(
ªt
 < 0) {

1113 i‡(
ßve_addrs
) {

1114 
	`£t_Ælowed_addrs
(
unô
, 
addrs
);

1117 
Àn
 = 
	`°æí
(
£cbuf
);

1118 i‡(
Àn
 > 
MAXSECRETLEN
) {

1119 
	`AUTHDEBUG
(
LOG_ERR
, ("Se¸ë f‹ %†⁄ %†i†toÿl⁄g\n", 
˛õ¡
, 
£rvî
));

1120 
Àn
 = 
MAXSECRETLEN
;

1123 
	`BCOPY
(
£cbuf
, 
£¸ë
, 
Àn
);

1124 
	`BZERO
(
£cbuf
, (secbuf));

1125 *
£¸ë_Àn
 = 
Àn
;

1129 
	}
}

1138 
	$£t_Ælowed_addrs
(
unô
, 
w‹dli°
 *
addrs
)

1140 i‡(
addªs£s
[
unô
] !
NULL
) {

1141 
	`‰ì_w‹dli°
(
addªs£s
[
unô
]);

1143 
addªs£s
[
unô
] = 
addrs
;

1150 i‡(
addrs
 !
NULL
 &&áddrs->
√xt
 == NULL) {

1151 *
p
 = 
addrs
->
w‹d
;

1152 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
unô
];

1153 
u32_t
 
a
;

1154 
ho°ít
 *
hp
;

1156 i‡(
wo
->
hißddr
 =0 && *
p
 !'!' && *∞!'-' && 
	`°rchr
’, '/'Ë=
NULL
) {

1157 
hp
 = 
	`gëho°by«me
(
p
);

1158 i‡(
hp
 !
NULL
 && hp->
h_addπy≥
 =
AF_INET
) {

1159 
a
 = *(
u32_t
 *)
hp
->
h_addr
;

1161 
a
 = 
	`öë_addr
(
p
);

1163 i‡(
a
 !(
u32_t
) -1) {

1164 
wo
->
hißddr
 = 
a
;

1169 
	}
}

1177 
	$auth_ù_addr
(
unô
, 
u32_t
 
addr
)

1179  
	`ù_addr_check
(
addr
, 
addªs£s
[
unô
]);

1180 
	}
}

1183 
	$ù_addr_check
(
u32_t
 
addr
, 
w‹dli°
 *
addrs
)

1186 i‡(
	`bad_ù_adrs
(
addr
)) {

1190 i‡(
addrs
 =
NULL
) {

1191  !
µp_£âögs
.
auth_ªquúed
;

1196 
	}
}

1204 
	$bad_ù_adrs
(
u32_t
 
addr
)

1206 
addr
 = 
	`¡ohl
(addr);

1207  (
addr
 >> 
IN_CLASSA_NSHIFT
Ë=
IN_LOOPBACKNET


1208 || 
	`IN_MULTICAST
(
addr
Ë|| 
	`IN_BADCLASS
(addr);

1209 
	}
}

1217 
	$some_ù_ok
(
w‹dli°
 *
addrs
)

1219 ; 
addrs
 !0;áddr†addrs->
√xt
) {

1220 i‡(
addrs
->
w‹d
[0] == '-')

1222 i‡(
addrs
->
w‹d
[0] != '!')

1226 
	}
}

1232 
	$check_ac˚ss
(
FILE
 *
f
, *
fûíame
)

1234 
°©
 
sbuf
;

1236 i‡(
	`f°©
(
	`fûío
(
f
), &
sbuf
) < 0) {

1237 
	`w¨n
("ˇ¬Ÿ sèà£¸ë fûê%s: %m", 
fûíame
);

1238 } i‡((
sbuf
.
°_mode
 & (
S_IRWXG
 | 
S_IRWXO
)) != 0) {

1239 
	`w¨n
("Warning - secret file %s has worldánd/or groupáccess",

1240 
fûíame
);

1242 
	}
}

1258 
	$sˇn_authfûe
(
FILE
 *
f
, *
˛õ¡
, *
£rvî
, *
£¸ë
, 
w‹dli°
 **
addrs
, w‹dli° **
›ts
, *
fûíame
)

1262 
	}
}

1267 
	$‰ì_w‹dli°
(
w‹dli°
 *
wp
)

1269 
w‹dli°
 *
√xt
;

1271 
wp
 !
NULL
) {

1272 
√xt
 = 
wp
->next;

1273 
	`‰ì
(
wp
);

1274 
wp
 = 
√xt
;

1276 
	}
}

1283 
	$auth_s¸ùt_d⁄e
(*
¨g
)

1285 
auth_s¸ùt_pid
 = 0;

1286 
auth_s¸ùt_°©e
) {

1287 
s_up
:

1288 i‡(
auth_°©e
 =
s_down
) {

1289 
auth_s¸ùt_°©e
 = 
s_down
;

1290 
	`auth_s¸ùt
(
_PATH_AUTHDOWN
);

1293 
s_down
:

1294 i‡(
auth_°©e
 =
s_up
) {

1295 
auth_s¸ùt_°©e
 = 
s_up
;

1296 
	`auth_s¸ùt
(
_PATH_AUTHUP
);

1300 
	}
}

1307 
	$auth_s¸ùt
(*
s¸ùt
)

1309 
°r•ìd
[32];

1310 
∑sswd
 *
pw
;

1311 
°ruid
[32];

1312 *
u£r_«me
;

1313 *
¨gv
[8];

1315 i‡((
pw
 = 
	`gëpwuid
(
	`gëuid
())Ë!
NULL
 &&Öw->
pw_«me
 != NULL)

1316 
u£r_«me
 = 
pw
->
pw_«me
;

1318 
	`¶¥ötf
(
°ruid
, (°ruid), "%d", 
	`gëuid
());

1319 
u£r_«me
 = 
°ruid
;

1321 
	`¶¥ötf
(
°r•ìd
, (°r•ìd), "%d", 
baud_øã
);

1323 
¨gv
[0] = 
s¸ùt
;

1324 
¨gv
[1] = 
i‚ame
;

1325 
¨gv
[2] = 
≥î_auth«me
;

1326 
¨gv
[3] = 
u£r_«me
;

1327 
¨gv
[4] = 
dev«m
;

1328 
¨gv
[5] = 
°r•ìd
;

1329 
¨gv
[6] = 
NULL
;

1331 
auth_s¸ùt_pid
 = 
	`run_¥ogøm
(
s¸ùt
, 
¨gv
, 0, 
auth_s¸ùt_d⁄e
, 
NULL
);

1332 
	}
}

	@netif/ppp/auth.h

53 #i‚de‡
AUTH_H


54 
	#AUTH_H


	)

61 
lök_ªquúed
 ();

64 
lök_ãrmö©ed
 ();

67 
lök_down
 ();

70 
lök_e°ablished
 ();

73 
≈_up
 (, 
u16_t
);

76 
≈_down
 (, 
u16_t
);

79 
≈_föished
 (, 
u16_t
);

82 
auth_≥î_Áû
 (, 
u16_t
);

85 
auth_≥î_suc˚ss
 (, 
u16_t
, *, );

88 
auth_wôh≥î_Áû
 (, 
u16_t
);

91 
auth_wôh≥î_suc˚ss
 (, 
u16_t
);

94 
auth_check_›ti⁄s
 ();

97 
auth_ª£t
 ();

100 
u_ch¨
 
check_∑sswd
 (, *, , *, , **, *);

103 
gë_£¸ë
 (, *, *, *, *, );

106 
auth_ù_addr
 (, 
u32_t
);

109 
bad_ù_adrs
 (
u32_t
);

	@netif/ppp/chap.c

69 
	~"lwù/›t.h
"

71 #i‡
PPP_SUPPORT


73 #i‡
CHAP_SUPPORT


75 
	~"µp.h
"

76 
	~"µpdebug.h
"

78 
	~"magic.h
"

79 
	~"øndm.h
"

80 
	~"auth.h
"

81 
	~"md5.h
"

82 
	~"ch≠.h
"

83 
	~"chpms.h
"

85 
	~<°rög.h
>

91 
›ti⁄_t
 
	gch≠_›ti⁄_li°
[] = {

92 { "ch≠-ª°¨t", 
o_öt
, &
ch≠
[0].
timeouâime
,

94 { "ch≠-max-chÆÀnge", 
o_öt
, &
ch≠
[0].
max_å™smôs
,

96 { "ch≠-öãrvÆ", 
o_öt
, &
ch≠
[0].
chÆ_öãrvÆ
,

98 #ifde‡
MSLANMAN


99 { "ms-œnm™", 
o_boﬁ
, &
ms_œnm™
,

102 { 
NULL
 }

109 
Ch≠Inô
 ();

110 
Ch≠LowîUp
 ();

111 
Ch≠LowîDown
 ();

112 
Ch≠I≈ut
 (, 
u_ch¨
 *, );

113 
Ch≠PrŸocﬁReje˘
 ();

114 #i‡
PPP_ADDITIONAL_CALLBACKS


115 
Ch≠PrötPkt
 (
u_ch¨
 *, , (*) (*, *, ...), *);

118 
¥Ÿít
 
ch≠_¥Ÿít
 = {

119 
PPP_CHAP
,

120 
Ch≠Inô
,

121 
Ch≠I≈ut
,

122 
Ch≠PrŸocﬁReje˘
,

123 
Ch≠LowîUp
,

124 
Ch≠LowîDown
,

125 
NULL
,

126 
NULL
,

127 #i‡
PPP_ADDITIONAL_CALLBACKS


128 
Ch≠PrötPkt
,

129 
NULL
,

133 #i‡
PPP_ADDITIONAL_CALLBACKS


134 
NULL
,

135 
NULL
,

136 
NULL


138 
	}
};

140 
ch≠_°©e
 
	gch≠
[
NUM_PPP
];

142 
Ch≠ChÆÀngeTimeout
 (*);

143 
Ch≠Re•⁄£Timeout
 (*);

144 
Ch≠Re˚iveChÆÀnge
 (
ch≠_°©e
 *, 
u_ch¨
 *, u_char, );

145 
Ch≠RechÆÀnge
 (*);

146 
Ch≠Re˚iveRe•⁄£
 (
ch≠_°©e
 *, 
u_ch¨
 *, , );

147 
Ch≠Re˚iveSuc˚ss
(
ch≠_°©e
 *
c°©e
, 
u_ch¨
 *
öp
, u_ch¨ 
id
, 
Àn
);

148 
Ch≠Re˚iveFaûuª
(
ch≠_°©e
 *
c°©e
, 
u_ch¨
 *
öp
, u_ch¨ 
id
, 
Àn
);

149 
Ch≠SídSètus
 (
ch≠_°©e
 *, );

150 
Ch≠SídChÆÀnge
 (
ch≠_°©e
 *);

151 
Ch≠SídRe•⁄£
 (
ch≠_°©e
 *);

152 
Ch≠GíChÆÀnge
 (
ch≠_°©e
 *);

158 
	$Ch≠Inô
(
unô
)

160 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

162 
	`BZERO
(
c°©e
, (*cstate));

163 
c°©e
->
unô
 = unit;

164 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_INITIAL
;

165 
c°©e
->
£rvî°©e
 = 
CHAPSS_INITIAL
;

166 
c°©e
->
timeouâime
 = 
CHAP_DEFTIMEOUT
;

167 
c°©e
->
max_å™smôs
 = 
CHAP_DEFTRANSMITS
;

169 
	}
}

177 
	$Ch≠AuthWôhPìr
(
unô
, *
our_«me
, 
u_ch¨
 
dige°
)

179 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

181 
c°©e
->
ª•_«me
 = 
our_«me
;

182 
c°©e
->
ª•_ty≥
 = 
dige°
;

184 i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_INITIAL
 ||

185 
c°©e
->
˛õ¡°©e
 =
CHAPCS_PENDING
) {

187 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_PENDING
;

196 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_LISTEN
;

197 
	}
}

204 
	$Ch≠AuthPìr
(
unô
, *
our_«me
, 
u_ch¨
 
dige°
)

206 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

208 
c°©e
->
chÆ_«me
 = 
our_«me
;

209 
c°©e
->
chÆ_ty≥
 = 
dige°
;

211 i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_INITIAL
 ||

212 
c°©e
->
£rvî°©e
 =
CHAPSS_PENDING
) {

214 
c°©e
->
£rvî°©e
 = 
CHAPSS_PENDING
;

218 
	`Ch≠GíChÆÀnge
(
c°©e
);

219 
	`Ch≠SídChÆÀnge
(
c°©e
);

220 
c°©e
->
£rvî°©e
 = 
CHAPSS_INITIAL_CHAL
;

221 
	}
}

228 
	$Ch≠ChÆÀngeTimeout
(*
¨g
)

230 
ch≠_°©e
 *
c°©e
 = (ch≠_°©ê*Ë
¨g
;

234 i‡(
c°©e
->
£rvî°©e
 !
CHAPSS_INITIAL_CHAL
 &&

235 
c°©e
->
£rvî°©e
 !
CHAPSS_RECHALLENGE
) {

239 i‡(
c°©e
->
chÆ_å™smôs
 >c°©e->
max_å™smôs
) {

241 
	`CHAPDEBUG
(
LOG_ERR
, ("Peer failedÅoÑespondÅo CHAP challenge\n"));

242 
c°©e
->
£rvî°©e
 = 
CHAPSS_BADAUTH
;

243 
	`auth_≥î_Áû
(
c°©e
->
unô
, 
PPP_CHAP
);

247 
	`Ch≠SídChÆÀnge
(
c°©e
);

248 
	}
}

255 
	$Ch≠Re•⁄£Timeout
(*
¨g
)

257 
ch≠_°©e
 *
c°©e
 = (ch≠_°©ê*Ë
¨g
;

260 i‡(
c°©e
->
˛õ¡°©e
 !
CHAPCS_RESPONSE
) {

264 
	`Ch≠SídRe•⁄£
(
c°©e
);

265 
	}
}

272 
	$Ch≠RechÆÀnge
(*
¨g
)

274 
ch≠_°©e
 *
c°©e
 = (ch≠_°©ê*Ë
¨g
;

277 i‡(
c°©e
->
£rvî°©e
 !
CHAPSS_OPEN
) {

281 
	`Ch≠GíChÆÀnge
(
c°©e
);

282 
	`Ch≠SídChÆÀnge
(
c°©e
);

283 
c°©e
->
£rvî°©e
 = 
CHAPSS_RECHALLENGE
;

284 
	}
}

293 
	$Ch≠LowîUp
(
unô
)

295 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

297 i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_INITIAL
) {

298 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_CLOSED
;

299 } i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_PENDING
) {

300 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_LISTEN
;

303 i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_INITIAL
) {

304 
c°©e
->
£rvî°©e
 = 
CHAPSS_CLOSED
;

305 } i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_PENDING
) {

306 
	`Ch≠GíChÆÀnge
(
c°©e
);

307 
	`Ch≠SídChÆÀnge
(
c°©e
);

308 
c°©e
->
£rvî°©e
 = 
CHAPSS_INITIAL_CHAL
;

310 
	}
}

319 
	$Ch≠LowîDown
(
unô
)

321 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

324 i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_INITIAL_CHAL
 ||

325 
c°©e
->
£rvî°©e
 =
CHAPSS_RECHALLENGE
) {

326 
	`UNTIMEOUT
(
Ch≠ChÆÀngeTimeout
, 
c°©e
);

327 } i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_OPEN


328 && 
c°©e
->
chÆ_öãrvÆ
 != 0) {

329 
	`UNTIMEOUT
(
Ch≠RechÆÀnge
, 
c°©e
);

331 i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_RESPONSE
) {

332 
	`UNTIMEOUT
(
Ch≠Re•⁄£Timeout
, 
c°©e
);

334 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_INITIAL
;

335 
c°©e
->
£rvî°©e
 = 
CHAPSS_INITIAL
;

336 
	}
}

343 
	$Ch≠PrŸocﬁReje˘
(
unô
)

345 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

347 i‡(
c°©e
->
£rvî°©e
 !
CHAPSS_INITIAL
 &&

348 
c°©e
->
£rvî°©e
 !
CHAPSS_CLOSED
) {

349 
	`auth_≥î_Áû
(
unô
, 
PPP_CHAP
);

351 i‡(
c°©e
->
˛õ¡°©e
 !
CHAPCS_INITIAL
 &&

352 
c°©e
->
˛õ¡°©e
 !
CHAPCS_CLOSED
) {

353 
	`auth_wôh≥î_Áû
(
unô
, 
PPP_CHAP
);

355 
	`Ch≠LowîDown
(
unô
);

356 
	}
}

363 
	$Ch≠I≈ut
(
unô
, 
u_ch¨
 *
ö∑ckë
, 
∑ckë_Àn
)

365 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

366 
u_ch¨
 *
öp
;

367 
u_ch¨
 
code
, 
id
;

368 
Àn
;

374 
öp
 = 
ö∑ckë
;

375 i‡(
∑ckë_Àn
 < 
CHAP_HEADERLEN
) {

376 
	`CHAPDEBUG
(
LOG_INFO
, ("ChapInput:Ñcvd short header.\n"));

379 
	`GETCHAR
(
code
, 
öp
);

380 
	`GETCHAR
(
id
, 
öp
);

381 
	`GETSHORT
(
Àn
, 
öp
);

382 i‡(
Àn
 < 
CHAP_HEADERLEN
) {

383 
	`CHAPDEBUG
(
LOG_INFO
, ("ChapInput:Ñcvd illegalÜength.\n"));

386 i‡(
Àn
 > 
∑ckë_Àn
) {

387 
	`CHAPDEBUG
(
LOG_INFO
, ("ChapInput:Ñcvd shortÖacket.\n"));

390 
Àn
 -
CHAP_HEADERLEN
;

395 
code
) {

396 
CHAP_CHALLENGE
:

397 
	`Ch≠Re˚iveChÆÀnge
(
c°©e
, 
öp
, 
id
, 
Àn
);

400 
CHAP_RESPONSE
:

401 
	`Ch≠Re˚iveRe•⁄£
(
c°©e
, 
öp
, 
id
, 
Àn
);

404 
CHAP_FAILURE
:

405 
	`Ch≠Re˚iveFaûuª
(
c°©e
, 
öp
, 
id
, 
Àn
);

408 
CHAP_SUCCESS
:

409 
	`Ch≠Re˚iveSuc˚ss
(
c°©e
, 
öp
, 
id
, 
Àn
);

413 
	`CHAPDEBUG
(
LOG_WARNING
, ("Unknow¿CHAP codê(%dËª˚ived.\n", 
code
));

416 
	}
}

423 
	$Ch≠Re˚iveChÆÀnge
(
ch≠_°©e
 *
c°©e
, 
u_ch¨
 *
öp
, u_ch¨ 
id
, 
Àn
)

425 
rchÆÀnge_Àn
;

426 
u_ch¨
 *
rchÆÀnge
;

427 
£¸ë_Àn
;

428 
£¸ë
[
MAXSECRETLEN
];

429 
rho°«me
[256];

430 
MD5_CTX
 
mdC⁄ãxt
;

431 
u_ch¨
 
hash
[
MD5_SIGNATURE_SIZE
];

433 
	`CHAPDEBUG
(
LOG_INFO
, ("Ch≠Re˚iveChÆÀnge: Rcvd id %d.\n", 
id
));

434 i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_CLOSED
 ||

435 
c°©e
->
˛õ¡°©e
 =
CHAPCS_PENDING
) {

436 
	`CHAPDEBUG
(
LOG_INFO
, ("ChapReceiveChallenge: in state %d\n",

437 
c°©e
->
˛õ¡°©e
));

441 i‡(
Àn
 < 2) {

442 
	`CHAPDEBUG
(
LOG_INFO
, ("ChapReceiveChallenge:Ñcvd shortÖacket.\n"));

446 
	`GETCHAR
(
rchÆÀnge_Àn
, 
öp
);

447 
Àn
 - (
u_ch¨
Ë+ 
rchÆÀnge_Àn
;

448 i‡(
Àn
 < 0) {

449 
	`CHAPDEBUG
(
LOG_INFO
, ("ChapReceiveChallenge:Ñcvd shortÖacket.\n"));

452 
rchÆÀnge
 = 
öp
;

453 
	`INCPTR
(
rchÆÀnge_Àn
, 
öp
);

455 i‡(
Àn
 >()(
rho°«me
)) {

456 
Àn
 = (
rho°«me
) - 1;

458 
	`BCOPY
(
öp
, 
rho°«me
, 
Àn
);

459 
rho°«me
[
Àn
] = '\000';

461 
	`CHAPDEBUG
(
LOG_INFO
, ("ChapReceiveChallenge:ÑeceivedÇame field '%s'\n",

462 
rho°«me
));

465 i‡(
µp_£âögs
.
ªmŸe_«me
[0] !0 && (µp_£âögs.
ex∂icô_ªmŸe
 || 
rho°«me
[0] == 0)) {

466 
	`°∫˝y
(
rho°«me
, 
µp_£âögs
.
ªmŸe_«me
, (rhostname));

467 
rho°«me
[(rhostname) - 1] = 0;

468 
	`CHAPDEBUG
(
LOG_INFO
, ("ChapReceiveChallenge: using '%s'ásÑemoteÇame\n",

469 
rho°«me
));

473 i‡(!
	`gë_£¸ë
(
c°©e
->
unô
, c°©e->
ª•_«me
, 
rho°«me
,

474 
£¸ë
, &
£¸ë_Àn
, 0)) {

475 
£¸ë_Àn
 = 0;

476 
	`CHAPDEBUG
(
LOG_WARNING
, ("No CHAP secret found foráuthenticating usÅo %s\n",

477 
rho°«me
));

481 i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_RESPONSE
) {

482 
	`UNTIMEOUT
(
Ch≠Re•⁄£Timeout
, 
c°©e
);

485 
c°©e
->
ª•_id
 = 
id
;

486 
c°©e
->
ª•_å™smôs
 = 0;

489 
c°©e
->
ª•_ty≥
) {

491 
CHAP_DIGEST_MD5
:

492 
	`MD5Inô
(&
mdC⁄ãxt
);

493 
	`MD5Upd©e
(&
mdC⁄ãxt
, &
c°©e
->
ª•_id
, 1);

494 
	`MD5Upd©e
(&
mdC⁄ãxt
, (
u_ch¨
*)
£¸ë
, 
£¸ë_Àn
);

495 
	`MD5Upd©e
(&
mdC⁄ãxt
, 
rchÆÀnge
, 
rchÆÀnge_Àn
);

496 
	`MD5FöÆ
(
hash
, &
mdC⁄ãxt
);

497 
	`BCOPY
(
hash
, 
c°©e
->
ª•⁄£
, 
MD5_SIGNATURE_SIZE
);

498 
c°©e
->
ª•_Àngth
 = 
MD5_SIGNATURE_SIZE
;

501 #i‡
MSCHAP_SUPPORT


502 
CHAP_MICROSOFT
:

503 
	`Ch≠MS
(
c°©e
, 
rchÆÀnge
, 
rchÆÀnge_Àn
, 
£¸ë
, 
£¸ë_Àn
);

508 
	`CHAPDEBUG
(
LOG_INFO
, ("unknow¿dige°Åy≥ %d\n", 
c°©e
->
ª•_ty≥
));

512 
	`BZERO
(
£¸ë
, (secret));

513 
	`Ch≠SídRe•⁄£
(
c°©e
);

514 
	}
}

521 
	$Ch≠Re˚iveRe•⁄£
(
ch≠_°©e
 *
c°©e
, 
u_ch¨
 *
öp
, 
id
, 
Àn
)

523 
u_ch¨
 *
ªmmd
, 
ªmmd_Àn
;

524 
£¸ë_Àn
, 
ﬁd_°©e
;

525 
code
;

526 
rho°«me
[256];

527 
MD5_CTX
 
mdC⁄ãxt
;

528 
£¸ë
[
MAXSECRETLEN
];

529 
u_ch¨
 
hash
[
MD5_SIGNATURE_SIZE
];

531 
	`CHAPDEBUG
(
LOG_INFO
, ("Ch≠Re˚iveRe•⁄£: Rcvd id %d.\n", 
id
));

533 i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_CLOSED
 ||

534 
c°©e
->
£rvî°©e
 =
CHAPSS_PENDING
) {

535 
	`CHAPDEBUG
(
LOG_INFO
, ("ChapReceiveResponse: in state %d\n",

536 
c°©e
->
£rvî°©e
));

540 i‡(
id
 !
c°©e
->
chÆ_id
) {

549 i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_OPEN
) {

550 
	`Ch≠SídSètus
(
c°©e
, 
CHAP_SUCCESS
);

553 i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_BADAUTH
) {

554 
	`Ch≠SídSètus
(
c°©e
, 
CHAP_FAILURE
);

558 i‡(
Àn
 < 2) {

559 
	`CHAPDEBUG
(
LOG_INFO
, ("ChapReceiveResponse:Ñcvd shortÖacket.\n"));

562 
	`GETCHAR
(
ªmmd_Àn
, 
öp
);

563 
ªmmd
 = 
öp
;

564 
	`INCPTR
(
ªmmd_Àn
, 
öp
);

566 
Àn
 - (
u_ch¨
Ë+ 
ªmmd_Àn
;

567 i‡(
Àn
 < 0) {

568 
	`CHAPDEBUG
(
LOG_INFO
, ("ChapReceiveResponse:Ñcvd shortÖacket.\n"));

572 
	`UNTIMEOUT
(
Ch≠ChÆÀngeTimeout
, 
c°©e
);

574 i‡(
Àn
 >()(
rho°«me
)) {

575 
Àn
 = (
rho°«me
) - 1;

577 
	`BCOPY
(
öp
, 
rho°«me
, 
Àn
);

578 
rho°«me
[
Àn
] = '\000';

580 
	`CHAPDEBUG
(
LOG_INFO
, ("ChapReceiveResponse:ÑeceivedÇame field: %s\n",

581 
rho°«me
));

587 
code
 = 
CHAP_FAILURE
;

588 i‡(!
	`gë_£¸ë
(
c°©e
->
unô
, 
rho°«me
, c°©e->
chÆ_«me
,

589 
£¸ë
, &
£¸ë_Àn
, 1)) {

590 
	`CHAPDEBUG
(
LOG_WARNING
, ("No CHAP secret found foráuthenticating %s\n",

591 
rho°«me
));

594 
c°©e
->
chÆ_ty≥
) {

596 
CHAP_DIGEST_MD5
:

597 i‡(
ªmmd_Àn
 !
MD5_SIGNATURE_SIZE
) {

600 
	`MD5Inô
(&
mdC⁄ãxt
);

601 
	`MD5Upd©e
(&
mdC⁄ãxt
, &
c°©e
->
chÆ_id
, 1);

602 
	`MD5Upd©e
(&
mdC⁄ãxt
, (
u_ch¨
*)
£¸ë
, 
£¸ë_Àn
);

603 
	`MD5Upd©e
(&
mdC⁄ãxt
, 
c°©e
->
chÆÀnge
, c°©e->
chÆ_Àn
);

604 
	`MD5FöÆ
(
hash
, &
mdC⁄ãxt
);

607 i‡(
	`memcmp
 (
hash
, 
ªmmd
, 
MD5_SIGNATURE_SIZE
) == 0) {

608 
code
 = 
CHAP_SUCCESS
;

613 
	`CHAPDEBUG
(
LOG_INFO
, ("unknow¿dige°Åy≥ %d\n", 
c°©e
->
chÆ_ty≥
));

617 
	`BZERO
(
£¸ë
, (secret));

618 
	`Ch≠SídSètus
(
c°©e
, 
code
);

620 i‡(
code
 =
CHAP_SUCCESS
) {

621 
ﬁd_°©e
 = 
c°©e
->
£rvî°©e
;

622 
c°©e
->
£rvî°©e
 = 
CHAPSS_OPEN
;

623 i‡(
ﬁd_°©e
 =
CHAPSS_INITIAL_CHAL
) {

624 
	`auth_≥î_suc˚ss
(
c°©e
->
unô
, 
PPP_CHAP
, 
rho°«me
, 
Àn
);

626 i‡(
c°©e
->
chÆ_öãrvÆ
 != 0) {

627 
	`TIMEOUT
(
Ch≠RechÆÀnge
, 
c°©e
, c°©e->
chÆ_öãrvÆ
);

630 
	`CHAPDEBUG
(
LOG_ERR
, ("CHAPÖeeráuthentication failed\n"));

631 
c°©e
->
£rvî°©e
 = 
CHAPSS_BADAUTH
;

632 
	`auth_≥î_Áû
(
c°©e
->
unô
, 
PPP_CHAP
);

634 
	}
}

640 
	$Ch≠Re˚iveSuc˚ss
(
ch≠_°©e
 *
c°©e
, 
u_ch¨
 *
öp
, u_ch¨ 
id
, 
Àn
)

642 
	`LWIP_UNUSED_ARG
(
id
);

643 
	`LWIP_UNUSED_ARG
(
öp
);

645 
	`CHAPDEBUG
(
LOG_INFO
, ("Ch≠Re˚iveSuc˚ss: Rcvd id %d.\n", 
id
));

647 i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_OPEN
) {

652 i‡(
c°©e
->
˛õ¡°©e
 !
CHAPCS_RESPONSE
) {

654 
	`CHAPDEBUG
(
LOG_INFO
, ("ChapReceiveSuccess: in state %d\n",

655 
c°©e
->
˛õ¡°©e
));

659 
	`UNTIMEOUT
(
Ch≠Re•⁄£Timeout
, 
c°©e
);

664 i‡(
Àn
 > 0) {

665 
	`PRINTMSG
(
öp
, 
Àn
);

668 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_OPEN
;

670 
	`auth_wôh≥î_suc˚ss
(
c°©e
->
unô
, 
PPP_CHAP
);

671 
	}
}

678 
	$Ch≠Re˚iveFaûuª
(
ch≠_°©e
 *
c°©e
, 
u_ch¨
 *
öp
, u_ch¨ 
id
, 
Àn
)

680 
	`LWIP_UNUSED_ARG
(
id
);

681 
	`LWIP_UNUSED_ARG
(
öp
);

683 
	`CHAPDEBUG
(
LOG_INFO
, ("Ch≠Re˚iveFaûuª: Rcvd id %d.\n", 
id
));

685 i‡(
c°©e
->
˛õ¡°©e
 !
CHAPCS_RESPONSE
) {

687 
	`CHAPDEBUG
(
LOG_INFO
, ("ChapReceiveFailure: in state %d\n",

688 
c°©e
->
˛õ¡°©e
));

692 
	`UNTIMEOUT
(
Ch≠Re•⁄£Timeout
, 
c°©e
);

697 i‡(
Àn
 > 0) {

698 
	`PRINTMSG
(
öp
, 
Àn
);

701 
	`CHAPDEBUG
(
LOG_ERR
, ("CHAPáuthentication failed\n"));

702 
	`auth_wôh≥î_Áû
(
c°©e
->
unô
, 
PPP_CHAP
);

703 
	}
}

710 
	$Ch≠SídChÆÀnge
(
ch≠_°©e
 *
c°©e
)

712 
u_ch¨
 *
ouç
;

713 
chÆ_Àn
, 
«me_Àn
;

714 
ouéí
;

716 
chÆ_Àn
 = 
c°©e
->chal_len;

717 
«me_Àn
 = ()
	`°æí
(
c°©e
->
chÆ_«me
);

718 
ouéí
 = 
CHAP_HEADERLEN
 +  (
u_ch¨
Ë+ 
chÆ_Àn
 + 
«me_Àn
;

719 
ouç
 = 
ouçackë_buf
[
c°©e
->
unô
];

721 
	`MAKEHEADER
(
ouç
, 
PPP_CHAP
);

723 
	`PUTCHAR
(
CHAP_CHALLENGE
, 
ouç
);

724 
	`PUTCHAR
(
c°©e
->
chÆ_id
, 
ouç
);

725 
	`PUTSHORT
(
ouéí
, 
ouç
);

727 
	`PUTCHAR
(
chÆ_Àn
, 
ouç
);

728 
	`BCOPY
(
c°©e
->
chÆÀnge
, 
ouç
, 
chÆ_Àn
);

729 
	`INCPTR
(
chÆ_Àn
, 
ouç
);

731 
	`BCOPY
(
c°©e
->
chÆ_«me
, 
ouç
, 
«me_Àn
);

733 
	`µpWrôe
(
c°©e
->
unô
, 
ouçackë_buf
[c°©e->unô], 
ouéí
 + 
PPP_HDRLEN
);

735 
	`CHAPDEBUG
(
LOG_INFO
, ("Ch≠SídChÆÀnge: Síàid %d.\n", 
c°©e
->
chÆ_id
));

737 
	`TIMEOUT
(
Ch≠ChÆÀngeTimeout
, 
c°©e
, c°©e->
timeouâime
);

738 ++
c°©e
->
chÆ_å™smôs
;

739 
	}
}

746 
	$Ch≠SídSètus
(
ch≠_°©e
 *
c°©e
, 
code
)

748 
u_ch¨
 *
ouç
;

749 
ouéí
, 
msgÀn
;

750 
msg
[256];

752 i‡(
code
 =
CHAP_SUCCESS
) {

753 
	`°r˝y
(
msg
, "Welcome!");

755 
	`°r˝y
(
msg
, "I don'tÜike you. Go 'way.");

757 
msgÀn
 = ()
	`°æí
(
msg
);

759 
ouéí
 = 
CHAP_HEADERLEN
 + 
msgÀn
;

760 
ouç
 = 
ouçackë_buf
[
c°©e
->
unô
];

762 
	`MAKEHEADER
(
ouç
, 
PPP_CHAP
);

764 
	`PUTCHAR
(
code
, 
ouç
);

765 
	`PUTCHAR
(
c°©e
->
chÆ_id
, 
ouç
);

766 
	`PUTSHORT
(
ouéí
, 
ouç
);

767 
	`BCOPY
(
msg
, 
ouç
, 
msgÀn
);

768 
	`µpWrôe
(
c°©e
->
unô
, 
ouçackë_buf
[c°©e->unô], 
ouéí
 + 
PPP_HDRLEN
);

770 
	`CHAPDEBUG
(
LOG_INFO
, ("Ch≠SídSètus: Síàcodê%d, id %d.\n", 
code
,

771 
c°©e
->
chÆ_id
));

772 
	}
}

782 
	$Ch≠GíChÆÀnge
(
ch≠_°©e
 *
c°©e
)

784 
chÆ_Àn
;

785 
u_ch¨
 *
±r
 = 
c°©e
->
chÆÀnge
;

786 
i
;

790 
chÆ_Àn
 = ()

791 ((((
	`magic
() >> 16) *

792 (
MAX_CHALLENGE_LENGTH
 - 
MIN_CHALLENGE_LENGTH
)) >> 16)

793 + 
MIN_CHALLENGE_LENGTH
);

794 
	`LWIP_ASSERT
("chÆ_À¿<0xff", 
chÆ_Àn
 <= 0xffff);

795 
c°©e
->
chÆ_Àn
 = (
u_ch¨
)chal_len;

796 
c°©e
->
chÆ_id
 = ++c°©e->
id
;

797 
c°©e
->
chÆ_å™smôs
 = 0;

800 
i
 = 0; i < 
chÆ_Àn
; i++ ) {

801 *
±r
++ = (Ë(
	`magic
() & 0xff);

803 
	}
}

811 
	$Ch≠SídRe•⁄£
(
ch≠_°©e
 *
c°©e
)

813 
u_ch¨
 *
ouç
;

814 
ouéí
, 
md_Àn
, 
«me_Àn
;

816 
md_Àn
 = 
c°©e
->
ª•_Àngth
;

817 
«me_Àn
 = ()
	`°æí
(
c°©e
->
ª•_«me
);

818 
ouéí
 = 
CHAP_HEADERLEN
 +  (
u_ch¨
Ë+ 
md_Àn
 + 
«me_Àn
;

819 
ouç
 = 
ouçackë_buf
[
c°©e
->
unô
];

821 
	`MAKEHEADER
(
ouç
, 
PPP_CHAP
);

823 
	`PUTCHAR
(
CHAP_RESPONSE
, 
ouç
);

824 
	`PUTCHAR
(
c°©e
->
ª•_id
, 
ouç
);

825 
	`PUTSHORT
(
ouéí
, 
ouç
);

827 
	`PUTCHAR
(
md_Àn
, 
ouç
);

828 
	`BCOPY
(
c°©e
->
ª•⁄£
, 
ouç
, 
md_Àn
);

829 
	`INCPTR
(
md_Àn
, 
ouç
);

831 
	`BCOPY
(
c°©e
->
ª•_«me
, 
ouç
, 
«me_Àn
);

834 
	`µpWrôe
(
c°©e
->
unô
, 
ouçackë_buf
[c°©e->unô], 
ouéí
 + 
PPP_HDRLEN
);

836 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_RESPONSE
;

837 
	`TIMEOUT
(
Ch≠Re•⁄£Timeout
, 
c°©e
, c°©e->
timeouâime
);

838 ++
c°©e
->
ª•_å™smôs
;

839 
	}
}

841 #i‡
PPP_ADDITIONAL_CALLBACKS


842 *
	gCh≠Codíames
[] = {

849 
Ch≠PrötPkt
–
u_ch¨
 *
p
, 
∂í
, (*
¥öãr
Ë(*, *, ...), *
¨g
)

851 
code
, 
id
, 
Àn
;

852 
˛í
, 
∆í
;

853 
u_ch¨
 
x
;

855 i‡(
∂í
 < 
CHAP_HEADERLEN
) {

858 
	`GETCHAR
(
code
, 
p
);

859 
	`GETCHAR
(
id
, 
p
);

860 
	`GETSHORT
(
Àn
, 
p
);

861 i‡(
Àn
 < 
CHAP_HEADERLEN
 ||Üí > 
∂í
) {

865 i‡(
code
 >1 && codê<(
Ch≠Codíames
) / (*)) {

866 
	`¥öãr
(
¨g
, " %s", 
Ch≠Codíames
[
code
-1]);

868 
	`¥öãr
(
¨g
, " code=0x%x", 
code
);

870 
	`¥öãr
(
¨g
, " id=0x%x", 
id
);

871 
Àn
 -
CHAP_HEADERLEN
;

872 
code
) {

873 
CHAP_CHALLENGE
:

874 
CHAP_RESPONSE
:

875 i‡(
Àn
 < 1) {

878 
˛í
 = 
p
[0];

879 i‡(
Àn
 < 
˛í
 + 1) {

882 ++
p
;

883 
∆í
 = 
Àn
 - 
˛í
 - 1;

884 
	`¥öãr
(
¨g
, " <");

885 ; 
˛í
 > 0; --clen) {

886 
	`GETCHAR
(
x
, 
p
);

887 
	`¥öãr
(
¨g
, "%.2x", 
x
);

889 
	`¥öãr
(
¨g
, ">,Çamê%.*Z", 
∆í
, 
p
);

891 
CHAP_FAILURE
:

892 
CHAP_SUCCESS
:

893 
	`¥öãr
(
¨g
, " %.*Z", 
Àn
, 
p
);

896 
˛í
 = 
Àn
; clen > 0; --clen) {

897 
	`GETCHAR
(
x
, 
p
);

898 
	`¥öãr
(
¨g
, " %.2x", 
x
);

902  
Àn
 + 
CHAP_HEADERLEN
;

903 
	}
}

	@netif/ppp/chap.h

68 #i‚de‡
CHAP_H


69 
	#CHAP_H


	)

72 
	#CHAP_HEADERLEN
 4

	)

78 
	#CHAP_DIGEST_MD5
 5

	)

79 
	#MD5_SIGNATURE_SIZE
 16

	)

80 
	#CHAP_MICROSOFT
 0x80

	)

81 
	#MS_CHAP_RESPONSE_LEN
 49

	)

83 
	#CHAP_CHALLENGE
 1

	)

84 
	#CHAP_RESPONSE
 2

	)

85 
	#CHAP_SUCCESS
 3

	)

86 
	#CHAP_FAILURE
 4

	)

91 
	#MIN_CHALLENGE_LENGTH
 32

	)

92 
	#MAX_CHALLENGE_LENGTH
 64

	)

93 
	#MAX_RESPONSE_LENGTH
 64

	)

99 
	sch≠_°©e
 {

100 
	munô
;

101 
	m˛õ¡°©e
;

102 
	m£rvî°©e
;

103 
u_ch¨
 
	mchÆÀnge
[
MAX_CHALLENGE_LENGTH
];

104 
u_ch¨
 
	mchÆ_Àn
;

105 
u_ch¨
 
	mchÆ_id
;

106 
u_ch¨
 
	mchÆ_ty≥
;

107 
u_ch¨
 
	mid
;

108 *
	mchÆ_«me
;

109 
	mchÆ_öãrvÆ
;

110 
	mtimeouâime
;

111 
	mmax_å™smôs
;

112 
	mchÆ_å™smôs
;

113 
	mª•_å™smôs
;

114 
u_ch¨
 
	mª•⁄£
[
MAX_RESPONSE_LENGTH
];

115 
u_ch¨
 
	mª•_Àngth
;

116 
u_ch¨
 
	mª•_id
;

117 
u_ch¨
 
	mª•_ty≥
;

118 *
	mª•_«me
;

119 } 
	tch≠_°©e
;

125 
	#CHAPCS_INITIAL
 0

	)

126 
	#CHAPCS_CLOSED
 1

	)

127 
	#CHAPCS_PENDING
 2

	)

128 
	#CHAPCS_LISTEN
 3

	)

129 
	#CHAPCS_RESPONSE
 4

	)

130 
	#CHAPCS_OPEN
 5

	)

135 
	#CHAPSS_INITIAL
 0

	)

136 
	#CHAPSS_CLOSED
 1

	)

137 
	#CHAPSS_PENDING
 2

	)

138 
	#CHAPSS_INITIAL_CHAL
 3

	)

139 
	#CHAPSS_OPEN
 4

	)

140 
	#CHAPSS_RECHALLENGE
 5

	)

141 
	#CHAPSS_BADAUTH
 6

	)

143 
ch≠_°©e
 
ch≠
[];

145 
Ch≠AuthWôhPìr
 (, *, 
u_ch¨
);

146 
Ch≠AuthPìr
 (, *, 
u_ch¨
);

148 
¥Ÿít
 
ch≠_¥Ÿít
;

	@netif/ppp/chpms.c

70 
	#USE_CRYPT


	)

72 
	~"lwù/›t.h
"

74 #i‡
PPP_SUPPORT


76 #i‡
MSCHAP_SUPPORT


78 
	~"µp.h
"

79 
	~"µpdebug.h
"

81 
	~"md4.h
"

82 #i‚de‡
USE_CRYPT


83 
	~"des.h
"

85 
	~"ch≠.h
"

86 
	~"chpms.h
"

88 
	~<°rög.h
>

100 
u_ch¨
 
	mLANM™Re•
[24];

101 
u_ch¨
 
	mNTRe•
[24];

102 
u_ch¨
 
	mU£NT
;

103 } 
	tMS_Ch≠Re•⁄£
;

114 
£tkey
(const *);

115 
í¸y±
(*, );

117 
DesEn¸y±
 (
u_ch¨
 *, u_char *, u_char *);

118 
MakeKey
 (
u_ch¨
 *, u_char *);

120 #ifde‡
USE_CRYPT


121 
Ex∑nd
 (
u_ch¨
 *, u_char *);

122 
Cﬁœp£
 (
u_ch¨
 *, u_char *);

125 
ChÆÀngeRe•⁄£
(

126 
u_ch¨
 *
chÆÀnge
,

127 
u_ch¨
 *
pwHash
,

128 
u_ch¨
 *
ª•⁄£


130 
Ch≠MS_NT
(

131 *
rchÆÀnge
,

132 
rchÆÀnge_Àn
,

133 *
£¸ë
,

134 
£¸ë_Àn
,

135 
MS_Ch≠Re•⁄£
 *
ª•⁄£


137 
u_ch¨
 
Gë7Bôs
(

138 
u_ch¨
 *
öput
,

139 
°¨tBô


143 
	$ChÆÀngeRe•⁄£
–
u_ch¨
 *
chÆÀnge
,

144 
u_ch¨
 *
pwHash
,

145 
u_ch¨
 *
ª•⁄£
 )

147 
u_ch¨
 
ZPassw‹dHash
[21];

149 
	`BZERO
(
ZPassw‹dHash
, (ZPasswordHash));

150 
	`BCOPY
(
pwHash
, 
ZPassw‹dHash
, 16);

153 
	`log_∑ckë
(
ZPassw‹dHash
, (ZPassw‹dHash), "ChÆÀngeRe•⁄£ - ZPassw‹dHash", 
LOG_DEBUG
);

156 
	`DesEn¸y±
(
chÆÀnge
, 
ZPassw‹dHash
 + 0, 
ª•⁄£
 + 0);

157 
	`DesEn¸y±
(
chÆÀnge
, 
ZPassw‹dHash
 + 7, 
ª•⁄£
 + 8);

158 
	`DesEn¸y±
(
chÆÀnge
, 
ZPassw‹dHash
 + 14, 
ª•⁄£
 + 16);

161 
	`log_∑ckë
(
ª•⁄£
, 24, "ChÆÀngeRe•⁄£ -Ñe•⁄£", 
LOG_DEBUG
);

163 
	}
}

166 #ifde‡
USE_CRYPT


168 
	$DesEn¸y±
–
u_ch¨
 *
˛ór
,

169 
u_ch¨
 *
key
,

170 
u_ch¨
 *
cùhî
 )

172 
u_ch¨
 
des_key
[8];

173 
u_ch¨
 
¸y±_key
[66];

174 
u_ch¨
 
des_öput
[66];

176 
	`MakeKey
(
key
, 
des_key
);

178 
	`Ex∑nd
(
des_key
, 
¸y±_key
);

179 
	`£tkey
((*)
¸y±_key
);

182 
	`CHAPDEBUG
(
LOG_INFO
, ("DesEncrypt: 8 octet input : %02X%02X%02X%02X%02X%02X%02X%02X\n",

183 
˛ór
[0], clear[1], clear[2], clear[3], clear[4], clear[5], clear[6], clear[7]));

186 
	`Ex∑nd
(
˛ór
, 
des_öput
);

187 
	`í¸y±
((*)
des_öput
, 0);

188 
	`Cﬁœp£
(
des_öput
, 
cùhî
);

191 
	`CHAPDEBUG
(
LOG_INFO
, ("DesEncrypt: 8 octet output: %02X%02X%02X%02X%02X%02X%02X%02X\n",

192 
cùhî
[0], cipher[1], cipher[2], cipher[3], cipher[4], cipher[5], cipher[6], cipher[7]));

194 
	}
}

199 
	$DesEn¸y±
–
u_ch¨
 *
˛ór
,

200 
u_ch¨
 *
key
,

201 
u_ch¨
 *
cùhî
 )

203 
des_cblock
 
des_key
;

204 
des_key_scheduÀ
 
key_scheduÀ
;

206 
	`MakeKey
(
key
, 
des_key
);

208 
	`des_£t_key
(&
des_key
, 
key_scheduÀ
);

211 
	`CHAPDEBUG
(
LOG_INFO
, ("DesEncrypt: 8 octet input : %02X%02X%02X%02X%02X%02X%02X%02X\n",

212 
˛ór
[0], clear[1], clear[2], clear[3], clear[4], clear[5], clear[6], clear[7]));

215 
	`des_ecb_í¸y±
((
des_cblock
 *)
˛ór
, (des_cblock *)
cùhî
, 
key_scheduÀ
, 1);

218 
	`CHAPDEBUG
(
LOG_INFO
, ("DesEncrypt: 8 octet output: %02X%02X%02X%02X%02X%02X%02X%02X\n",

219 
cùhî
[0], cipher[1], cipher[2], cipher[3], cipher[4], cipher[5], cipher[6], cipher[7]));

221 
	}
}

226 
u_ch¨


227 
	$Gë7Bôs
–
u_ch¨
 *
öput
, 
°¨tBô
)

229 
w‹d
;

231 
w‹d
 = ()
öput
[
°¨tBô
 / 8] << 8;

232 
w‹d
 |()
öput
[
°¨tBô
 / 8 + 1];

234 
w‹d
 >>15 - (
°¨tBô
 % 8 + 7);

236  
w‹d
 & 0xFE;

237 
	}
}

239 #ifde‡
USE_CRYPT


246 
	$Ex∑nd
(
u_ch¨
 *
ö
, u_ch¨ *
out
)

248 
j
, 
c
;

249 
i
;

251 
i
 = 0; i < 64; 
ö
++){

252 
c
 = *
ö
;

253 
j
 = 7; j >= 0; j--) {

254 *
out
++ = (
c
 >> 
j
) & 01;

256 
i
 += 8;

258 
	}
}

263 
	$Cﬁœp£
(
u_ch¨
 *
ö
, u_ch¨ *
out
)

265 
j
;

266 
i
;

267 
c
;

269 
i
 = 0; i < 64; i +8, 
out
++) {

270 
c
 = 0;

271 
j
 = 7; j >0; j--, 
ö
++) {

272 
c
 |*
ö
 << 
j
;

274 *
out
 = 
c
 & 0xff;

276 
	}
}

280 
	$MakeKey
–
u_ch¨
 *
key
,

281 
u_ch¨
 *
des_key
 )

283 
des_key
[0] = 
	`Gë7Bôs
(
key
, 0);

284 
des_key
[1] = 
	`Gë7Bôs
(
key
, 7);

285 
des_key
[2] = 
	`Gë7Bôs
(
key
, 14);

286 
des_key
[3] = 
	`Gë7Bôs
(
key
, 21);

287 
des_key
[4] = 
	`Gë7Bôs
(
key
, 28);

288 
des_key
[5] = 
	`Gë7Bôs
(
key
, 35);

289 
des_key
[6] = 
	`Gë7Bôs
(
key
, 42);

290 
des_key
[7] = 
	`Gë7Bôs
(
key
, 49);

292 #i‚de‡
USE_CRYPT


293 
	`des_£t_odd_∑rôy
((
des_cblock
 *)
des_key
);

297 
	`CHAPDEBUG
(
LOG_INFO
, ("MakeKey: 56-bit input : %02X%02X%02X%02X%02X%02X%02X\n",

298 
key
[0], key[1], key[2], key[3], key[4], key[5], key[6]));

299 
	`CHAPDEBUG
(
LOG_INFO
, ("MakeKey: 64-bit output: %02X%02X%02X%02X%02X%02X%02X%02X\n",

300 
des_key
[0], des_key[1], des_key[2], des_key[3], des_key[4], des_key[5], des_key[6], des_key[7]));

302 
	}
}

305 
	$Ch≠MS_NT
–*
rchÆÀnge
,

306 
rchÆÀnge_Àn
,

307 *
£¸ë
,

308 
£¸ë_Àn
,

309 
MS_Ch≠Re•⁄£
 *
ª•⁄£
)

311 
i
;

312 
MD°ru˘
 
md4C⁄ãxt
;

313 
u_ch¨
 
unicodePassw‹d
[
MAX_NT_PASSWORD
 * 2];

314 
low_byã_fú°
 = -1;

316 
	`LWIP_UNUSED_ARG
(
rchÆÀnge_Àn
);

320 
	`BZERO
(
unicodePassw‹d
, (unicodePassword));

321 
i
 = 0; i < 
£¸ë_Àn
; i++) {

322 
unicodePassw‹d
[
i
 * 2] = (
u_ch¨
)
£¸ë
[i];

324 
	`MDbegö
(&
md4C⁄ãxt
);

325 
	`MDupd©e
(&
md4C⁄ãxt
, 
unicodePassw‹d
, 
£¸ë_Àn
 * 2 * 8);

327 i‡(
low_byã_fú°
 == -1) {

328 
low_byã_fú°
 = (
	`PP_HTONS
(()1) != 1);

330 i‡(
low_byã_fú°
 == 0) {

332 
	`MDªvî£
((*)&
md4C⁄ãxt
);

335 
	`MDupd©e
(&
md4C⁄ãxt
, 
NULL
, 0);

337 
	`ChÆÀngeRe•⁄£
((
u_ch¨
*)
rchÆÀnge
, (u_ch¨*)
md4C⁄ãxt
.
buf„r
, 
ª•⁄£
->
NTRe•
);

338 
	}
}

340 #ifde‡
MSLANMAN


341 
u_ch¨
 *
	gStdText
 = (u_char *)"KGS!@#$%";

344 
	$Ch≠MS_LANM™
–*
rchÆÀnge
,

345 
rchÆÀnge_Àn
,

346 *
£¸ë
,

347 
£¸ë_Àn
,

348 
MS_Ch≠Re•⁄£
 *
ª•⁄£
)

350 
i
;

351 
u_ch¨
 
Uˇ£Passw‹d
[
MAX_NT_PASSWORD
];

352 
u_ch¨
 
Passw‹dHash
[16];

355 
	`BZERO
(
Uˇ£Passw‹d
, (UcasePassword));

356 
i
 = 0; i < 
£¸ë_Àn
; i++) {

357 
Uˇ£Passw‹d
[
i
] = (
u_ch¨
)
	`touµî
(
£¸ë
[i]);

359 
	`DesEn¸y±
–
StdText
, 
Uˇ£Passw‹d
 + 0, 
Passw‹dHash
 + 0 );

360 
	`DesEn¸y±
–
StdText
, 
Uˇ£Passw‹d
 + 7, 
Passw‹dHash
 + 8 );

361 
	`ChÆÀngeRe•⁄£
(
rchÆÀnge
, 
Passw‹dHash
, 
ª•⁄£
->
LANM™Re•
);

362 
	}
}

366 
	$Ch≠MS
–
ch≠_°©e
 *
c°©e
, *
rchÆÀnge
, 
rchÆÀnge_Àn
, *
£¸ë
, 
£¸ë_Àn
)

368 
MS_Ch≠Re•⁄£
 
ª•⁄£
;

369 #ifde‡
MSLANMAN


370 
ms_œnm™
;

374 
	`CHAPDEBUG
(
LOG_INFO
, ("Ch≠MS: se¸ë i†'%.*s'\n", 
£¸ë_Àn
, 
£¸ë
));

376 
	`BZERO
(&
ª•⁄£
, (response));

379 
	`Ch≠MS_NT
(
rchÆÀnge
, 
rchÆÀnge_Àn
, 
£¸ë
, 
£¸ë_Àn
, &
ª•⁄£
);

381 #ifde‡
MSLANMAN


382 
	`Ch≠MS_LANM™
(
rchÆÀnge
, 
rchÆÀnge_Àn
, 
£¸ë
, 
£¸ë_Àn
, &
ª•⁄£
);

385 
ª•⁄£
.
U£NT
 = !
ms_œnm™
;

387 
ª•⁄£
.
U£NT
 = 1;

390 
	`BCOPY
(&
ª•⁄£
, 
c°©e
->ª•⁄£, 
MS_CHAP_RESPONSE_LEN
);

391 
c°©e
->
ª•_Àngth
 = 
MS_CHAP_RESPONSE_LEN
;

392 
	}
}

	@netif/ppp/chpms.h

57 #i‚de‡
CHPMS_H


58 
	#CHPMS_H


	)

60 
	#MAX_NT_PASSWORD
 256

	)

62 
Ch≠MS
 (
ch≠_°©e
 *, *, , *, );

	@netif/ppp/fsm.c

58 
	~"lwù/›t.h
"

60 #i‡
PPP_SUPPORT


62 
	~"µp.h
"

63 
	~"µpdebug.h
"

65 
	~"fsm.h
"

67 
	~<°rög.h
>

69 #i‡
PPP_DEBUG


70 c⁄° *
	gµ≥º_°ªº
[] = {

84 
fsm_timeout
 (*);

85 
fsm_rc⁄‰eq
 (
fsm
 *, 
u_ch¨
, u_char *, );

86 
fsm_rc⁄Áck
 (
fsm
 *, , 
u_ch¨
 *, );

87 
fsm_rc⁄‚akªj
 (
fsm
 *, , , 
u_ch¨
 *, );

88 
fsm_πîmªq
 (
fsm
 *, , 
u_ch¨
 *, );

89 
fsm_πîmack
 (
fsm
 *);

90 
fsm_rcodîej
 (
fsm
 *, 
u_ch¨
 *, );

91 
fsm_sc⁄‰eq
 (
fsm
 *, );

93 
	#PROTO_NAME
(
f
Ë((f)->
ˇŒbacks
->
¥Ÿo_«me
)

	)

95 
	g≥î_mru
[
NUM_PPP
];

104 
	$fsm_öô
(
fsm
 *
f
)

106 
f
->
°©e
 = 
LS_INITIAL
;

107 
f
->
Êags
 = 0;

108 
f
->
id
 = 0;

109 
f
->
timeouâime
 = 
FSM_DEFTIMEOUT
;

110 
f
->
maxc⁄‰eqå™smôs
 = 
FSM_DEFMAXCONFREQS
;

111 
f
->
maxãrmå™smôs
 = 
FSM_DEFMAXTERMREQS
;

112 
f
->
max«klo›s
 = 
FSM_DEFMAXNAKLOOPS
;

113 
f
->
ãrm_ªas⁄_Àn
 = 0;

114 
	}
}

121 
	$fsm_lowîup
(
fsm
 *
f
)

123 
ﬁdSèã
 = 
f
->
°©e
;

125 
	`LWIP_UNUSED_ARG
(
ﬁdSèã
);

127  
f
->
°©e
 ) {

128 
LS_INITIAL
:

129 
f
->
°©e
 = 
LS_CLOSED
;

132 
LS_STARTING
:

133 if–
f
->
Êags
 & 
OPT_SILENT
 ) {

134 
f
->
°©e
 = 
LS_STOPPED
;

137 
	`fsm_sc⁄‰eq
(
f
, 0);

138 
f
->
°©e
 = 
LS_REQSENT
;

143 
	`FSMDEBUG
(
LOG_INFO
, ("%s: UpÉvent in state %d (%s)!\n",

144 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

147 
	`FSMDEBUG
(
LOG_INFO
, ("%s:Üowerup state %d (%s) -> %d (%s)\n",

148 
	`PROTO_NAME
(
f
), 
ﬁdSèã
, 
µ≥º_°ªº
[ﬁdSèã], f->
°©e
,Öpperr_strerr[f->state]));

149 
	}
}

158 
	$fsm_lowîdown
(
fsm
 *
f
)

160 
ﬁdSèã
 = 
f
->
°©e
;

162 
	`LWIP_UNUSED_ARG
(
ﬁdSèã
);

164  
f
->
°©e
 ) {

165 
LS_CLOSED
:

166 
f
->
°©e
 = 
LS_INITIAL
;

169 
LS_STOPPED
:

170 
f
->
°©e
 = 
LS_STARTING
;

171 if–
f
->
ˇŒbacks
->
°¨tög
 ) {

172 (*
f
->
ˇŒbacks
->
°¨tög
)(f);

176 
LS_CLOSING
:

177 
f
->
°©e
 = 
LS_INITIAL
;

178 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

181 
LS_STOPPING
:

182 
LS_REQSENT
:

183 
LS_ACKRCVD
:

184 
LS_ACKSENT
:

185 
f
->
°©e
 = 
LS_STARTING
;

186 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

189 
LS_OPENED
:

190 if–
f
->
ˇŒbacks
->
down
 ) {

191 (*
f
->
ˇŒbacks
->
down
)(f);

193 
f
->
°©e
 = 
LS_STARTING
;

197 
	`FSMDEBUG
(
LOG_INFO
, ("%s: DownÉvent in state %d (%s)!\n",

198 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

201 
	`FSMDEBUG
(
LOG_INFO
, ("%s:Üowerdown state %d (%s) -> %d (%s)\n",

202 
	`PROTO_NAME
(
f
), 
ﬁdSèã
, 
µ≥º_°ªº
[ﬁdSèã], f->
°©e
,Öpperr_strerr[f->state]));

203 
	}
}

210 
	$fsm_›í
(
fsm
 *
f
)

212 
ﬁdSèã
 = 
f
->
°©e
;

214 
	`LWIP_UNUSED_ARG
(
ﬁdSèã
);

216  
f
->
°©e
 ) {

217 
LS_INITIAL
:

218 
f
->
°©e
 = 
LS_STARTING
;

219 if–
f
->
ˇŒbacks
->
°¨tög
 ) {

220 (*
f
->
ˇŒbacks
->
°¨tög
)(f);

224 
LS_CLOSED
:

225 if–
f
->
Êags
 & 
OPT_SILENT
 ) {

226 
f
->
°©e
 = 
LS_STOPPED
;

229 
	`fsm_sc⁄‰eq
(
f
, 0);

230 
f
->
°©e
 = 
LS_REQSENT
;

234 
LS_CLOSING
:

235 
f
->
°©e
 = 
LS_STOPPING
;

237 
LS_STOPPED
:

238 
LS_OPENED
:

239 if–
f
->
Êags
 & 
OPT_RESTART
 ) {

240 
	`fsm_lowîdown
(
f
);

241 
	`fsm_lowîup
(
f
);

246 
	`FSMDEBUG
(
LOG_INFO
, ("%s: open state %d (%s) -> %d (%s)\n",

247 
	`PROTO_NAME
(
f
), 
ﬁdSèã
, 
µ≥º_°ªº
[ﬁdSèã], f->
°©e
,Öpperr_strerr[f->state]));

248 
	}
}

258 
	$ãrmö©e_œyî
(
fsm
 *
f
, 
√xt°©e
)

261 
	}
}

271 
	$fsm_˛o£
(
fsm
 *
f
, *
ªas⁄
)

273 
ﬁdSèã
 = 
f
->
°©e
;

275 
	`LWIP_UNUSED_ARG
(
ﬁdSèã
);

277 
f
->
ãrm_ªas⁄
 = 
ªas⁄
;

278 
f
->
ãrm_ªas⁄_Àn
 = (
ªas⁄
 =
NULL
 ? 0 : ()
	`°æí
(reason));

279  
f
->
°©e
 ) {

280 
LS_STARTING
:

281 
f
->
°©e
 = 
LS_INITIAL
;

283 
LS_STOPPED
:

284 
f
->
°©e
 = 
LS_CLOSED
;

286 
LS_STOPPING
:

287 
f
->
°©e
 = 
LS_CLOSING
;

290 
LS_REQSENT
:

291 
LS_ACKRCVD
:

292 
LS_ACKSENT
:

293 
LS_OPENED
:

294 if–
f
->
°©e
 !
LS_OPENED
 ) {

295 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

296 } if–
f
->
ˇŒbacks
->
down
 ) {

297 (*
f
->
ˇŒbacks
->
down
)(f);

300 
f
->
ªå™smôs
 = f->
maxãrmå™smôs
;

301 
	`fsm_sd©a
(
f
, 
TERMREQ
, f->
ªqid
 = ++f->
id
,

302 (
u_ch¨
 *Ë
f
->
ãrm_ªas⁄
, f->
ãrm_ªas⁄_Àn
);

303 
	`TIMEOUT
(
fsm_timeout
, 
f
, f->
timeouâime
);

304 --
f
->
ªå™smôs
;

306 
f
->
°©e
 = 
LS_CLOSING
;

310 
	`FSMDEBUG
(
LOG_INFO
, ("%s: closeÑeason=%s state %d (%s) -> %d (%s)\n",

311 
	`PROTO_NAME
(
f
), 
ªas⁄
, 
ﬁdSèã
, 
µ≥º_°ªº
[ﬁdSèã], f->
°©e
,Öpperr_strerr[f->state]));

312 
	}
}

319 
	$fsm_timeout
(*
¨g
)

321 
fsm
 *
f
 = (fsm *Ë
¨g
;

323 
f
->
°©e
) {

324 
LS_CLOSING
:

325 
LS_STOPPING
:

326 if–
f
->
ªå™smôs
 <= 0 ) {

327 
	`FSMDEBUG
(
LOG_WARNING
, ("%s:Åimeout sending Terminate-Request state=%d (%s)\n",

328 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

332 
f
->
°©e
 = (f->°©ê=
LS_CLOSING
)? 
LS_CLOSED
: 
LS_STOPPED
;

333 if–
f
->
ˇŒbacks
->
föished
 ) {

334 (*
f
->
ˇŒbacks
->
föished
)(f);

337 
	`FSMDEBUG
(
LOG_WARNING
, ("%s:ÅimeoutÑesending Terminate-Requests state=%d (%s)\n",

338 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

340 
	`fsm_sd©a
(
f
, 
TERMREQ
, f->
ªqid
 = ++f->
id
,

341 (
u_ch¨
 *Ë
f
->
ãrm_ªas⁄
, f->
ãrm_ªas⁄_Àn
);

342 
	`TIMEOUT
(
fsm_timeout
, 
f
, f->
timeouâime
);

343 --
f
->
ªå™smôs
;

347 
LS_REQSENT
:

348 
LS_ACKRCVD
:

349 
LS_ACKSENT
:

350 i‡(
f
->
ªå™smôs
 <= 0) {

351 
	`FSMDEBUG
(
LOG_WARNING
, ("%s:Åimeout sending Config-Requests state=%d (%s)\n",

352 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

353 
f
->
°©e
 = 
LS_STOPPED
;

354 if–(
f
->
Êags
 & 
OPT_PASSIVE
Ë=0 && f->
ˇŒbacks
->
föished
 ) {

355 (*
f
->
ˇŒbacks
->
föished
)(f);

358 
	`FSMDEBUG
(
LOG_WARNING
, ("%s:ÅimeoutÑesending Config-Request state=%d (%s)\n",

359 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

361 i‡(
f
->
ˇŒbacks
->
ªå™smô
) {

362 (*
f
->
ˇŒbacks
->
ªå™smô
)(f);

364 
	`fsm_sc⁄‰eq
(
f
, 1);

365 if–
f
->
°©e
 =
LS_ACKRCVD
 ) {

366 
f
->
°©e
 = 
LS_REQSENT
;

372 
	`FSMDEBUG
(
LOG_INFO
, ("%s: UNHANDLEDÅimeoutÉvent in state %d (%s)!\n",

373 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

375 
	}
}

382 
	$fsm_öput
(
fsm
 *
f
, 
u_ch¨
 *
ö∑ckë
, 
l
)

384 
u_ch¨
 *
öp
 = 
ö∑ckë
;

385 
u_ch¨
 
code
, 
id
;

386 
Àn
;

392 i‡(
l
 < 
HEADERLEN
) {

393 
	`FSMDEBUG
(
LOG_WARNING
, ("fsm_input(%x): Rcvd short header.\n",

394 
f
->
¥Ÿocﬁ
));

397 
	`GETCHAR
(
code
, 
öp
);

398 
	`GETCHAR
(
id
, 
öp
);

399 
	`GETSHORT
(
Àn
, 
öp
);

400 i‡(
Àn
 < 
HEADERLEN
) {

401 
	`FSMDEBUG
(
LOG_INFO
, ("fsm_input(%x): Rcvd illegalÜength.\n",

402 
f
->
¥Ÿocﬁ
));

405 i‡(
Àn
 > 
l
) {

406 
	`FSMDEBUG
(
LOG_INFO
, ("fsm_input(%x): Rcvd shortÖacket.\n",

407 
f
->
¥Ÿocﬁ
));

410 
Àn
 -
HEADERLEN
;

412 if–
f
->
°©e
 =
LS_INITIAL
 || f->°©ê=
LS_STARTING
 ) {

413 
	`FSMDEBUG
(
LOG_INFO
, ("fsm_input(%x): RcvdÖacket in state %d (%s).\n",

414 
f
->
¥Ÿocﬁ
, f->
°©e
, 
µ≥º_°ªº
[f->state]));

417 
	`FSMDEBUG
(
LOG_INFO
, ("fsm_öput(%s):%d,%d,%d\n", 
	`PROTO_NAME
(
f
), 
code
, 
id
, 
l
));

421 
code
) {

422 
CONFREQ
:

423 
	`fsm_rc⁄‰eq
(
f
, 
id
, 
öp
, 
Àn
);

426 
CONFACK
:

427 
	`fsm_rc⁄Áck
(
f
, 
id
, 
öp
, 
Àn
);

430 
CONFNAK
:

431 
CONFREJ
:

432 
	`fsm_rc⁄‚akªj
(
f
, 
code
, 
id
, 
öp
, 
Àn
);

435 
TERMREQ
:

436 
	`fsm_πîmªq
(
f
, 
id
, 
öp
, 
Àn
);

439 
TERMACK
:

440 
	`fsm_πîmack
(
f
);

443 
CODEREJ
:

444 
	`fsm_rcodîej
(
f
, 
öp
, 
Àn
);

448 
	`FSMDEBUG
(
LOG_INFO
, ("fsm_öput(%s): deÁu…: \n", 
	`PROTO_NAME
(
f
)));

449 if–!
f
->
ˇŒbacks
->
extcode
 ||

450 !(*
f
->
ˇŒbacks
->
extcode
)(f, 
code
, 
id
, 
öp
, 
Àn
) ) {

451 
	`fsm_sd©a
(
f
, 
CODEREJ
, ++f->
id
, 
ö∑ckë
, 
Àn
 + 
HEADERLEN
);

455 
	}
}

462 
	$fsm_rc⁄‰eq
(
fsm
 *
f
, 
u_ch¨
 
id
, u_ch¨ *
öp
, 
Àn
)

464 
code
, 
ªje˘_if_dißgªe
;

466 
	`FSMDEBUG
(
LOG_INFO
, ("fsm_rconfreq(%s): Rcvd id %d state=%d (%s)\n",

467 
	`PROTO_NAME
(
f
), 
id
, f->
°©e
, 
µ≥º_°ªº
[f->state]));

468  
f
->
°©e
 ) {

469 
LS_CLOSED
:

471 
	`fsm_sd©a
(
f
, 
TERMACK
, 
id
, 
NULL
, 0);

473 
LS_CLOSING
:

474 
LS_STOPPING
:

477 
LS_OPENED
:

479 if–
f
->
ˇŒbacks
->
down
 ) {

480 (*
f
->
ˇŒbacks
->
down
)(f);

482 
	`fsm_sc⁄‰eq
(
f
, 0);

485 
LS_STOPPED
:

487 
	`fsm_sc⁄‰eq
(
f
, 0);

488 
f
->
°©e
 = 
LS_REQSENT
;

496 i‡(
f
->
ˇŒbacks
->
ªqci
) {

497 
ªje˘_if_dißgªe
 = (
f
->
«klo›s
 >f->
max«klo›s
);

498 
code
 = (*
f
->
ˇŒbacks
->
ªqci
)(f, 
öp
, &
Àn
, 
ªje˘_if_dißgªe
);

499 } i‡(
Àn
) {

500 
code
 = 
CONFREJ
;

502 
code
 = 
CONFACK
;

506 
	`fsm_sd©a
(
f
, (
u_ch¨
)
code
, 
id
, 
öp
, 
Àn
);

508 i‡(
code
 =
CONFACK
) {

509 i‡(
f
->
°©e
 =
LS_ACKRCVD
) {

510 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

511 
f
->
°©e
 = 
LS_OPENED
;

512 i‡(
f
->
ˇŒbacks
->
up
) {

513 (*
f
->
ˇŒbacks
->
up
)(f);

516 
f
->
°©e
 = 
LS_ACKSENT
;

518 
f
->
«klo›s
 = 0;

521 i‡(
f
->
°©e
 !
LS_ACKRCVD
) {

522 
f
->
°©e
 = 
LS_REQSENT
;

524 if–
code
 =
CONFNAK
 ) {

525 ++
f
->
«klo›s
;

528 
	}
}

535 
	$fsm_rc⁄Áck
(
fsm
 *
f
, 
id
, 
u_ch¨
 *
öp
, 
Àn
)

537 
	`FSMDEBUG
(
LOG_INFO
, ("fsm_rconfack(%s): Rcvd id %d state=%d (%s)\n",

538 
	`PROTO_NAME
(
f
), 
id
, f->
°©e
, 
µ≥º_°ªº
[f->state]));

540 i‡(
id
 !
f
->
ªqid
 || f->
£í_ack
) {

543 if–!(
f
->
ˇŒbacks
->
ackci
? (*f->ˇŒbacks->ackci)(f, 
öp
, 
Àn
): (len == 0)) ) {

545 
	`FSMDEBUG
(
LOG_INFO
, ("%s:Ñeceived bad Ack (length %d)\n",

546 
	`PROTO_NAME
(
f
), 
Àn
));

549 
f
->
£í_ack
 = 1;

551 
f
->
°©e
) {

552 
LS_CLOSED
:

553 
LS_STOPPED
:

554 
	`fsm_sd©a
(
f
, 
TERMACK
, (
u_ch¨
)
id
, 
NULL
, 0);

557 
LS_REQSENT
:

558 
f
->
°©e
 = 
LS_ACKRCVD
;

559 
f
->
ªå™smôs
 = f->
maxc⁄‰eqå™smôs
;

562 
LS_ACKRCVD
:

564 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

565 
	`fsm_sc⁄‰eq
(
f
, 0);

566 
f
->
°©e
 = 
LS_REQSENT
;

569 
LS_ACKSENT
:

570 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

571 
f
->
°©e
 = 
LS_OPENED
;

572 
f
->
ªå™smôs
 = f->
maxc⁄‰eqå™smôs
;

573 i‡(
f
->
ˇŒbacks
->
up
) {

574 (*
f
->
ˇŒbacks
->
up
)(f);

578 
LS_OPENED
:

580 i‡(
f
->
ˇŒbacks
->
down
) {

581 (*
f
->
ˇŒbacks
->
down
)(f);

583 
	`fsm_sc⁄‰eq
(
f
, 0);

584 
f
->
°©e
 = 
LS_REQSENT
;

587 
	}
}

594 
	$fsm_rc⁄‚akªj
(
fsm
 *
f
, 
code
, 
id
, 
u_ch¨
 *
öp
, 
Àn
)

596 (*
¥oc
Ë(
fsm
 *, 
u_ch¨
 *, );

597 
ªt
;

599 
	`FSMDEBUG
(
LOG_INFO
, ("fsm_rconfnakrej(%s): Rcvd id %d state=%d (%s)\n",

600 
	`PROTO_NAME
(
f
), 
id
, f->
°©e
, 
µ≥º_°ªº
[f->state]));

602 i‡(
id
 !
f
->
ªqid
 || f->
£í_ack
) {

605 
¥oc
 = (
code
 =
CONFNAK
)? 
f
->
ˇŒbacks
->
«kci
: f->ˇŒbacks->
ªjci
;

606 i‡(!
¥oc
 || !((
ªt
 = 
	`¥oc
(
f
, 
öp
, 
Àn
)))) {

608 
	`FSMDEBUG
(
LOG_INFO
, ("%s:Ñeceived bad %s (length %d)\n",

609 
	`PROTO_NAME
(
f
), (
code
==
CONFNAK
? "Nak": "ªje˘"), 
Àn
));

612 
f
->
£í_ack
 = 1;

614 
f
->
°©e
) {

615 
LS_CLOSED
:

616 
LS_STOPPED
:

617 
	`fsm_sd©a
(
f
, 
TERMACK
, (
u_ch¨
)
id
, 
NULL
, 0);

620 
LS_REQSENT
:

621 
LS_ACKSENT
:

623 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

624 i‡(
ªt
 < 0) {

625 
f
->
°©e
 = 
LS_STOPPED
;

627 
	`fsm_sc⁄‰eq
(
f
, 0);

631 
LS_ACKRCVD
:

633 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

634 
	`fsm_sc⁄‰eq
(
f
, 0);

635 
f
->
°©e
 = 
LS_REQSENT
;

638 
LS_OPENED
:

640 i‡(
f
->
ˇŒbacks
->
down
) {

641 (*
f
->
ˇŒbacks
->
down
)(f);

643 
	`fsm_sc⁄‰eq
(
f
, 0);

644 
f
->
°©e
 = 
LS_REQSENT
;

647 
	}
}

654 
	$fsm_πîmªq
(
fsm
 *
f
, 
id
, 
u_ch¨
 *
p
, 
Àn
)

656 
	`LWIP_UNUSED_ARG
(
p
);

658 
	`FSMDEBUG
(
LOG_INFO
, ("fsm_rtermreq(%s): Rcvd id %d state=%d (%s)\n",

659 
	`PROTO_NAME
(
f
), 
id
, f->
°©e
, 
µ≥º_°ªº
[f->state]));

661 
f
->
°©e
) {

662 
LS_ACKRCVD
:

663 
LS_ACKSENT
:

664 
f
->
°©e
 = 
LS_REQSENT
;

667 
LS_OPENED
:

668 i‡(
Àn
 > 0) {

669 
	`FSMDEBUG
(
LOG_INFO
, ("%†ãrmö©ed byÖì∏(%p)\n", 
	`PROTO_NAME
(
f
), 
p
));

671 
	`FSMDEBUG
(
LOG_INFO
, ("%†ãrmö©ed byÖìr\n", 
	`PROTO_NAME
(
f
)));

673 i‡(
f
->
ˇŒbacks
->
down
) {

674 (*
f
->
ˇŒbacks
->
down
)(f);

676 
f
->
ªå™smôs
 = 0;

677 
f
->
°©e
 = 
LS_STOPPING
;

678 
	`TIMEOUT
(
fsm_timeout
, 
f
, f->
timeouâime
);

682 
	`fsm_sd©a
(
f
, 
TERMACK
, (
u_ch¨
)
id
, 
NULL
, 0);

683 
	}
}

690 
	$fsm_πîmack
(
fsm
 *
f
)

692 
	`FSMDEBUG
(
LOG_INFO
, ("fsm_rtermack(%s): state=%d (%s)\n",

693 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

695 
f
->
°©e
) {

696 
LS_CLOSING
:

697 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

698 
f
->
°©e
 = 
LS_CLOSED
;

699 if–
f
->
ˇŒbacks
->
föished
 ) {

700 (*
f
->
ˇŒbacks
->
föished
)(f);

704 
LS_STOPPING
:

705 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

706 
f
->
°©e
 = 
LS_STOPPED
;

707 if–
f
->
ˇŒbacks
->
föished
 ) {

708 (*
f
->
ˇŒbacks
->
föished
)(f);

712 
LS_ACKRCVD
:

713 
f
->
°©e
 = 
LS_REQSENT
;

716 
LS_OPENED
:

717 i‡(
f
->
ˇŒbacks
->
down
) {

718 (*
f
->
ˇŒbacks
->
down
)(f);

720 
	`fsm_sc⁄‰eq
(
f
, 0);

723 
	`FSMDEBUG
(
LOG_INFO
, ("fsm_rtermack(%s): UNHANDLED state=%d (%s)!!!\n",

724 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

726 
	}
}

733 
	$fsm_rcodîej
(
fsm
 *
f
, 
u_ch¨
 *
öp
, 
Àn
)

735 
u_ch¨
 
code
, 
id
;

737 
	`FSMDEBUG
(
LOG_INFO
, ("fsm_rcoderej(%s): state=%d (%s)\n",

738 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

740 i‡(
Àn
 < 
HEADERLEN
) {

741 
	`FSMDEBUG
(
LOG_INFO
, ("fsm_rcoderej: Rcvd short Code-RejectÖacket!\n"));

744 
	`GETCHAR
(
code
, 
öp
);

745 
	`GETCHAR
(
id
, 
öp
);

746 
	`FSMDEBUG
(
LOG_WARNING
, ("%s: Rcvd Code-Reject for code %d, id %d\n",

747 
	`PROTO_NAME
(
f
), 
code
, 
id
));

749 if–
f
->
°©e
 =
LS_ACKRCVD
 ) {

750 
f
->
°©e
 = 
LS_REQSENT
;

752 
	}
}

761 
	$fsm_¥Ÿªje˘
(
fsm
 *
f
)

763  
f
->
°©e
 ) {

764 
LS_CLOSING
:

765 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

767 
LS_CLOSED
:

768 
f
->
°©e
 = 
LS_CLOSED
;

769 if–
f
->
ˇŒbacks
->
föished
 ) {

770 (*
f
->
ˇŒbacks
->
föished
)(f);

774 
LS_STOPPING
:

775 
LS_REQSENT
:

776 
LS_ACKRCVD
:

777 
LS_ACKSENT
:

778 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

780 
LS_STOPPED
:

781 
f
->
°©e
 = 
LS_STOPPED
;

782 if–
f
->
ˇŒbacks
->
föished
 ) {

783 (*
f
->
ˇŒbacks
->
föished
)(f);

787 
LS_OPENED
:

788 if–
f
->
ˇŒbacks
->
down
 ) {

789 (*
f
->
ˇŒbacks
->
down
)(f);

792 
f
->
ªå™smôs
 = f->
maxãrmå™smôs
;

793 
	`fsm_sd©a
(
f
, 
TERMREQ
, f->
ªqid
 = ++f->
id
,

794 (
u_ch¨
 *Ë
f
->
ãrm_ªas⁄
, f->
ãrm_ªas⁄_Àn
);

795 
	`TIMEOUT
(
fsm_timeout
, 
f
, f->
timeouâime
);

796 --
f
->
ªå™smôs
;

798 
f
->
°©e
 = 
LS_STOPPING
;

802 
	`FSMDEBUG
(
LOG_INFO
, ("%s: Protocol-rejectÉvent in state %d (%s)!\n",

803 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

805 
	}
}

812 
	$fsm_sc⁄‰eq
(
fsm
 *
f
, 
ªå™smô
)

814 
u_ch¨
 *
ouç
;

815 
cûí
;

817 if–
f
->
°©e
 !
LS_REQSENT
 && f->°©ê!
LS_ACKRCVD
 && f->°©ê!
LS_ACKSENT
 ) {

819 if–
f
->
ˇŒbacks
->
ª£tci
 ) {

820 (*
f
->
ˇŒbacks
->
ª£tci
)(f);

822 
f
->
«klo›s
 = 0;

825 if–!
ªå™smô
 ) {

827 
f
->
ªå™smôs
 = f->
maxc⁄‰eqå™smôs
;

828 
f
->
ªqid
 = ++f->
id
;

831 
f
->
£í_ack
 = 0;

836 
ouç
 = 
ouçackë_buf
[
f
->
unô
] + 
PPP_HDRLEN
 + 
HEADERLEN
;

837 if–
f
->
ˇŒbacks
->
cûí
 && f->ˇŒbacks->
addci
 ) {

838 
cûí
 = (*
f
->
ˇŒbacks
->cilen)(f);

839 if–
cûí
 > 
≥î_mru
[
f
->
unô
] - ()
HEADERLEN
 ) {

840 
cûí
 = 
≥î_mru
[
f
->
unô
] - 
HEADERLEN
;

842 i‡(
f
->
ˇŒbacks
->
addci
) {

843 (*
f
->
ˇŒbacks
->
addci
)(f, 
ouç
, &
cûí
);

846 
cûí
 = 0;

850 
	`fsm_sd©a
(
f
, 
CONFREQ
, f->
ªqid
, 
ouç
, 
cûí
);

853 --
f
->
ªå™smôs
;

854 
	`TIMEOUT
(
fsm_timeout
, 
f
, f->
timeouâime
);

856 
	`FSMDEBUG
(
LOG_INFO
, ("%s: sending Configure-Request, id %d\n",

857 
	`PROTO_NAME
(
f
), f->
ªqid
));

858 
	}
}

867 
	$fsm_sd©a
–
fsm
 *
f
, 
u_ch¨
 
code
, u_ch¨ 
id
, u_ch¨ *
d©a
, 
d©Æí
)

869 
u_ch¨
 *
ouç
;

870 
ouéí
;

873 
ouç
 = 
ouçackë_buf
[
f
->
unô
];

874 i‡(
d©Æí
 > 
≥î_mru
[
f
->
unô
] - ()
HEADERLEN
) {

875 
d©Æí
 = 
≥î_mru
[
f
->
unô
] - 
HEADERLEN
;

877 i‡(
d©Æí
 && 
d©a
 !
ouç
 + 
PPP_HDRLEN
 + 
HEADERLEN
) {

878 
	`BCOPY
(
d©a
, 
ouç
 + 
PPP_HDRLEN
 + 
HEADERLEN
, 
d©Æí
);

880 
ouéí
 = 
d©Æí
 + 
HEADERLEN
;

881 
	`MAKEHEADER
(
ouç
, 
f
->
¥Ÿocﬁ
);

882 
	`PUTCHAR
(
code
, 
ouç
);

883 
	`PUTCHAR
(
id
, 
ouç
);

884 
	`PUTSHORT
(
ouéí
, 
ouç
);

885 
	`µpWrôe
(
f
->
unô
, 
ouçackë_buf
[f->unô], 
ouéí
 + 
PPP_HDRLEN
);

886 
	`FSMDEBUG
(
LOG_INFO
, ("fsm_sdata(%s): Sent code %d,%d,%d.\n",

887 
	`PROTO_NAME
(
f
), 
code
, 
id
, 
ouéí
));

888 
	}
}

	@netif/ppp/fsm.h

54 #i‚de‡
FSM_H


55 
	#FSM_H


	)

60 
	#HEADERLEN
 ( (
u_ch¨
Ë+  (u_ch¨Ë+  (
u_sh‹t
))

	)

66 
	#CONFREQ
 1

	)

67 
	#CONFACK
 2

	)

68 
	#CONFNAK
 3

	)

69 
	#CONFREJ
 4

	)

70 
	#TERMREQ
 5

	)

71 
	#TERMACK
 6

	)

72 
	#CODEREJ
 7

	)

78 
	sfsm
 {

79 
	munô
;

80 
u_sh‹t
 
	m¥Ÿocﬁ
;

81 
	m°©e
;

82 
	mÊags
;

83 
u_ch¨
 
	mid
;

84 
u_ch¨
 
	mªqid
;

85 
u_ch¨
 
	m£í_ack
;

86 
	mtimeouâime
;

87 
	mmaxc⁄‰eqå™smôs
;

88 
	mªå™smôs
;

89 
	mmaxãrmå™smôs
;

90 
	m«klo›s
;

91 
	mmax«klo›s
;

92 
fsm_ˇŒbacks
* 
	mˇŒbacks
;

93 * 
	mãrm_ªas⁄
;

94 
	mãrm_ªas⁄_Àn
;

95 } 
	tfsm
;

98 
	sfsm_ˇŒbacks
 {

99 (*
	mª£tci
)(
	mfsm
*);

100 (*
	mcûí
)(
	mfsm
*);

101 (*
	maddci
)(
	mfsm
*, 
	mu_ch¨
*, *);

102 (*
	mackci
)(
	mfsm
*, 
	mu_ch¨
*, );

103 (*
	m«kci
)(
	mfsm
*, 
	mu_ch¨
*, );

104 (*
	mªjci
)(
	mfsm
*, 
	mu_ch¨
*, );

105 (*
	mªqci
)(
	mfsm
*, 
	mu_ch¨
*, *, );

106 (*
	mup
)(
	mfsm
*);

107 (*
	mdown
)(
	mfsm
*);

108 (*
	m°¨tög
)(
	mfsm
*);

109 (*
	mföished
)(
	mfsm
*);

110 (*
	m¥Ÿªje˘
)();

111 (*
	mªå™smô
)(
	mfsm
*);

112 (*
	mextcode
)(
	mfsm
*, , 
	mu_ch¨
, u_char*, );

113 *
	m¥Ÿo_«me
;

114 } 
	tfsm_ˇŒbacks
;

120 
	#LS_INITIAL
 0

	)

121 
	#LS_STARTING
 1

	)

122 
	#LS_CLOSED
 2

	)

123 
	#LS_STOPPED
 3

	)

124 
	#LS_CLOSING
 4

	)

125 
	#LS_STOPPING
 5

	)

126 
	#LS_REQSENT
 6

	)

127 
	#LS_ACKRCVD
 7

	)

128 
	#LS_ACKSENT
 8

	)

129 
	#LS_OPENED
 9

	)

134 
	#OPT_PASSIVE
 1

	)

135 
	#OPT_RESTART
 2

	)

136 
	#OPT_SILENT
 4

	)

142 
fsm_öô
 (
fsm
*);

143 
fsm_lowîup
 (
fsm
*);

144 
fsm_lowîdown
 (
fsm
*);

145 
fsm_›í
 (
fsm
*);

146 
fsm_˛o£
 (
fsm
*, *);

147 
fsm_öput
 (
fsm
*, 
u_ch¨
*, );

148 
fsm_¥Ÿªje˘
 (
fsm
*);

149 
fsm_sd©a
 (
fsm
*, 
u_ch¨
, u_char, u_char*, );

155 
≥î_mru
[];

	@netif/ppp/ipcp.c

54 
	~"lwù/›t.h
"

56 #i‡
PPP_SUPPORT


58 
	~"µp.h
"

59 
	~"µpdebug.h
"

61 
	~"auth.h
"

62 
	~"fsm.h
"

63 
	~"vj.h
"

64 
	~"ù˝.h
"

66 
	~"lwù/öë.h
"

68 
	~<°rög.h
>

73 
ù˝_›ti⁄s
 
	gù˝_w™t›ti⁄s
[
NUM_PPP
];

74 
ù˝_›ti⁄s
 
	gù˝_gŸ›ti⁄s
[
NUM_PPP
];

75 
ù˝_›ti⁄s
 
	gù˝_Ælow›ti⁄s
[
NUM_PPP
];

76 
ù˝_›ti⁄s
 
	gù˝_his›ti⁄s
[
NUM_PPP
];

79 
	gdeÁu…_rouã_£t
[
NUM_PPP
];

80 
	gcis_ª˚ived
[
NUM_PPP
];

86 
ù˝_ª£tci
 (
fsm
 *);

87 
ù˝_cûí
 (
fsm
 *);

88 
ù˝_addci
 (
fsm
 *, 
u_ch¨
 *, *);

89 
ù˝_ackci
 (
fsm
 *, 
u_ch¨
 *, );

90 
ù˝_«kci
 (
fsm
 *, 
u_ch¨
 *, );

91 
ù˝_ªjci
 (
fsm
 *, 
u_ch¨
 *, );

92 
ù˝_ªqci
 (
fsm
 *, 
u_ch¨
 *, *, );

93 
ù˝_up
 (
fsm
 *);

94 
ù˝_down
 (
fsm
 *);

95 #i‡
PPP_ADDITIONAL_CALLBACKS


96 
ù˝_s¸ùt
 (
fsm
 *, *);

98 
ù˝_föished
 (
fsm
 *);

101 
fsm
 
	gù˝_fsm
[
NUM_PPP
];

104 
fsm_ˇŒbacks
 
	gù˝_ˇŒbacks
 = {

105 
ù˝_ª£tci
,

106 
ù˝_cûí
,

107 
ù˝_addci
,

108 
ù˝_ackci
,

109 
ù˝_«kci
,

110 
ù˝_ªjci
,

111 
ù˝_ªqci
,

112 
ù˝_up
,

113 
ù˝_down
,

114 
NULL
,

115 
ù˝_föished
,

116 
NULL
,

117 
NULL
,

118 
NULL
,

125 
ù˝_öô
 ();

126 
ù˝_›í
 ();

127 
ù˝_˛o£
 (, *);

128 
ù˝_lowîup
 ();

129 
ù˝_lowîdown
 ();

130 
ù˝_öput
 (, 
u_ch¨
 *, );

131 
ù˝_¥Ÿªj
 ();

134 
¥Ÿít
 
	gù˝_¥Ÿít
 = {

135 
PPP_IPCP
,

136 
ù˝_öô
,

137 
ù˝_öput
,

138 
ù˝_¥Ÿªj
,

139 
ù˝_lowîup
,

140 
ù˝_lowîdown
,

141 
ù˝_›í
,

142 
ù˝_˛o£
,

143 #i‡
PPP_ADDITIONAL_CALLBACKS


144 
ù˝_¥öçkt
,

145 
NULL
,

149 #i‡
PPP_ADDITIONAL_CALLBACKS


150 
ù_check_›ti⁄s
,

151 
NULL
,

152 
ù_a˘ive_pkt


156 
ù˝_˛ór_addrs
 ();

161 
	#CILEN_VOID
 2

	)

162 
	#CILEN_COMPRESS
 4

	)

163 
	#CILEN_VJ
 6

	)

164 
	#CILEN_ADDR
 6

	)

165 
	#CILEN_ADDRS
 10

	)

168 
	#CODENAME
(
x
Ë((xË=
CONFACK
 ? "ACK" : \

169 (
x
Ë=
CONFNAK
 ? "NAK" : "REJ")

	)

176 
	$ù˝_öô
(
unô
)

178 
fsm
 *
f
 = &
ù˝_fsm
[
unô
];

179 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
unô
];

180 
ù˝_›ti⁄s
 *
ao
 = &
ù˝_Ælow›ti⁄s
[
unô
];

182 
f
->
unô
 = unit;

183 
f
->
¥Ÿocﬁ
 = 
PPP_IPCP
;

184 
f
->
ˇŒbacks
 = &
ù˝_ˇŒbacks
;

185 
	`fsm_öô
(&
ù˝_fsm
[
unô
]);

187 
	`mem£t
(
wo
, 0, (*wo));

188 
	`mem£t
(
ao
, 0, (*ao));

190 
wo
->
√g_addr
 = 1;

191 
wo
->
ouøddr
 = 0;

192 #i‡
VJ_SUPPORT


193 
wo
->
√g_vj
 = 1;

195 
wo
->
√g_vj
 = 0;

197 
wo
->
vj_¥Ÿocﬁ
 = 
IPCP_VJ_COMP
;

198 
wo
->
max¶Ÿödex
 = 
MAX_SLOTS
 - 1;

199 
wo
->
cÊag
 = 0;

200 
wo
->
deÁu…_rouã
 = 1;

202 
ao
->
√g_addr
 = 1;

203 #i‡
VJ_SUPPORT


204 
ao
->
√g_vj
 = 1;

206 
ao
->
√g_vj
 = 0;

208 
ao
->
max¶Ÿödex
 = 
MAX_SLOTS
 - 1;

209 
ao
->
cÊag
 = 1;

210 
ao
->
deÁu…_rouã
 = 1;

211 
	}
}

218 
	$ù˝_›í
(
unô
)

220 
	`fsm_›í
(&
ù˝_fsm
[
unô
]);

221 
	}
}

228 
	$ù˝_˛o£
(
unô
, *
ªas⁄
)

230 
	`fsm_˛o£
(&
ù˝_fsm
[
unô
], 
ªas⁄
);

231 
	}
}

238 
	$ù˝_lowîup
(
unô
)

240 
	`fsm_lowîup
(&
ù˝_fsm
[
unô
]);

241 
	}
}

248 
	$ù˝_lowîdown
(
unô
)

250 
	`fsm_lowîdown
(&
ù˝_fsm
[
unô
]);

251 
	}
}

258 
	$ù˝_öput
(
unô
, 
u_ch¨
 *
p
, 
Àn
)

260 
	`fsm_öput
(&
ù˝_fsm
[
unô
], 
p
, 
Àn
);

261 
	}
}

270 
	$ù˝_¥Ÿªj
(
unô
)

272 
	`fsm_lowîdown
(&
ù˝_fsm
[
unô
]);

273 
	}
}

280 
	$ù˝_ª£tci
(
fsm
 *
f
)

282 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
f
->
unô
];

284 
wo
->
ªq_addr
 = wo->
√g_addr
 && 
ù˝_Ælow›ti⁄s
[
f
->
unô
].neg_addr;

285 i‡(
wo
->
ouøddr
 == 0) {

286 
wo
->
ac˚±_loˇl
 = 1;

288 i‡(
wo
->
hißddr
 == 0) {

289 
wo
->
ac˚±_ªmŸe
 = 1;

292 
wo
->
ªq_dns1
 = 
µp_£âögs
.
u£≥îdns
;

293 
wo
->
ªq_dns2
 = 
µp_£âögs
.
u£≥îdns
;

294 
ù˝_gŸ›ti⁄s
[
f
->
unô
] = *
wo
;

295 
cis_ª˚ived
[
f
->
unô
] = 0;

296 
	}
}

303 
	$ù˝_cûí
(
fsm
 *
f
)

305 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

306 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
f
->
unô
];

307 
ù˝_›ti⁄s
 *
ho
 = &
ù˝_his›ti⁄s
[
f
->
unô
];

309 
	#LENCIVJ
(
√g
, 
ﬁd
Ë“eg ? (ﬁd? 
CILEN_COMPRESS
 : 
CILEN_VJ
Ë: 0)

	)

310 
	#LENCIADDR
(
√g
, 
ﬁd
Ë“eg ? (ﬁd? 
CILEN_ADDRS
 : 
CILEN_ADDR
Ë: 0)

	)

311 
	#LENCIDNS
(
√g
Ë“eg ? (
CILEN_ADDR
Ë: 0)

	)

317 i‡(
wo
->
√g_addr
 && !
go
->√g_add∏&& !go->
ﬁd_addrs
) {

319 
go
->
√g_addr
 = 1;

320 
go
->
ﬁd_addrs
 = 1;

322 i‡(
wo
->
√g_vj
 && !
go
->√g_vj && !go->
ﬁd_vj
) {

324 i‡(
cis_ª˚ived
[
f
->
unô
] == 0) {

326 
go
->
√g_vj
 = 1;

329 i‡(
ho
->
√g_vj
 && ho->
ﬁd_vj
) {

330 
go
->
√g_vj
 = 1;

331 
go
->
ﬁd_vj
 = 1;

332 
go
->
vj_¥Ÿocﬁ
 = 
ho
->vj_protocol;

337  (
	`LENCIADDR
(
go
->
√g_addr
, go->
ﬁd_addrs
) +

338 
	`LENCIVJ
(
go
->
√g_vj
, go->
ﬁd_vj
) +

339 
	`LENCIDNS
(
go
->
ªq_dns1
) +

340 
	`LENCIDNS
(
go
->
ªq_dns2
));

341 
	}
}

348 
	$ù˝_addci
(
fsm
 *
f
, 
u_ch¨
 *
u˝
, *
À≈
)

350 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

351 
Àn
 = *
À≈
;

353 
	#ADDCIVJ
(
›t
, 
√g
, 
vÆ
, 
ﬁd
, 
max¶Ÿödex
, 
cÊag
) \

354 i‡(
√g
) { \

355 
vjÀn
 = 
ﬁd
? 
CILEN_COMPRESS
 : 
CILEN_VJ
; \

356 i‡(
Àn
 >
vjÀn
) { \

357 
	`PUTCHAR
(
›t
, 
u˝
); \

358 
	`PUTCHAR
(
vjÀn
, 
u˝
); \

359 
	`PUTSHORT
(
vÆ
, 
u˝
); \

360 i‡(!
ﬁd
) { \

361 
	`PUTCHAR
(
max¶Ÿödex
, 
u˝
); \

362 
	`PUTCHAR
(
cÊag
, 
u˝
); \

364 
Àn
 -
vjÀn
; \

366 
√g
 = 0; \

368 }

	)

370 
	#ADDCIADDR
(
›t
, 
√g
, 
ﬁd
, 
vÆ1
, 
vÆ2
) \

371 i‡(
√g
) { \

372 
addæí
 = (
ﬁd
? 
CILEN_ADDRS
: 
CILEN_ADDR
); \

373 i‡(
Àn
 >
addæí
) { \

374 
u32_t
 
l
; \

375 
	`PUTCHAR
(
›t
, 
u˝
); \

376 
	`PUTCHAR
(
addæí
, 
u˝
); \

377 
l
 = 
	`¡ohl
(
vÆ1
); \

378 
	`PUTLONG
(
l
, 
u˝
); \

379 i‡(
ﬁd
) { \

380 
l
 = 
	`¡ohl
(
vÆ2
); \

381 
	`PUTLONG
(
l
, 
u˝
); \

383 
Àn
 -
addæí
; \

385 
√g
 = 0; \

387 }

	)

389 
	#ADDCIDNS
(
›t
, 
√g
, 
addr
) \

390 i‡(
√g
) { \

391 i‡(
Àn
 >
CILEN_ADDR
) { \

392 
u32_t
 
l
; \

393 
	`PUTCHAR
(
›t
, 
u˝
); \

394 
	`PUTCHAR
(
CILEN_ADDR
, 
u˝
); \

395 
l
 = 
	`¡ohl
(
addr
); \

396 
	`PUTLONG
(
l
, 
u˝
); \

397 
Àn
 -
CILEN_ADDR
; \

399 
√g
 = 0; \

401 }

	)

403 
	`ADDCIADDR
((
go
->
ﬁd_addrs
? 
CI_ADDRS
: 
CI_ADDR
), go->
√g_addr
,

404 
go
->
ﬁd_addrs
, go->
ouøddr
, go->
hißddr
);

406 
	`ADDCIVJ
(
CI_COMPRESSTYPE
, 
go
->
√g_vj
, go->
vj_¥Ÿocﬁ
, go->
ﬁd_vj
,

407 
go
->
max¶Ÿödex
, go->
cÊag
);

409 
	`ADDCIDNS
(
CI_MS_DNS1
, 
go
->
ªq_dns1
, go->
dnßddr
[0]);

411 
	`ADDCIDNS
(
CI_MS_DNS2
, 
go
->
ªq_dns2
, go->
dnßddr
[1]);

413 *
À≈
 -
Àn
;

414 
	}
}

425 
	$ù˝_ackci
(
fsm
 *
f
, 
u_ch¨
 *
p
, 
Àn
)

427 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

428 
u_sh‹t
 
cûí
, 
côy≥
, 
cish‹t
;

429 
u32_t
 
cû⁄g
;

430 
u_ch¨
 
cimax¶Ÿödex
, 
cicÊag
;

438 
	#ACKCIVJ
(
›t
, 
√g
, 
vÆ
, 
ﬁd
, 
max¶Ÿödex
, 
cÊag
) \

439 i‡(
√g
) { \

440 
vjÀn
 = 
ﬁd
? 
CILEN_COMPRESS
 : 
CILEN_VJ
; \

441 i‡((
Àn
 -
vjÀn
) < 0) { \

442 
bad
; \

444 
	`GETCHAR
(
côy≥
, 
p
); \

445 
	`GETCHAR
(
cûí
, 
p
); \

446 i‡(
cûí
 !
vjÀn
 || \

447 
côy≥
 !
›t
) { \

448 
bad
; \

450 
	`GETSHORT
(
cish‹t
, 
p
); \

451 i‡(
cish‹t
 !
vÆ
) { \

452 
bad
; \

454 i‡(!
ﬁd
) { \

455 
	`GETCHAR
(
cimax¶Ÿödex
, 
p
); \

456 i‡(
cimax¶Ÿödex
 !
max¶Ÿödex
) { \

457 
bad
; \

459 
	`GETCHAR
(
cicÊag
, 
p
); \

460 i‡(
cicÊag
 !
cÊag
) { \

461 
bad
; \

464 }

	)

466 
	#ACKCIADDR
(
›t
, 
√g
, 
ﬁd
, 
vÆ1
, 
vÆ2
) \

467 i‡(
√g
) { \

468 
addæí
 = (
ﬁd
? 
CILEN_ADDRS
: 
CILEN_ADDR
); \

469 
u32_t
 
l
; \

470 i‡((
Àn
 -
addæí
) < 0) { \

471 
bad
; \

473 
	`GETCHAR
(
côy≥
, 
p
); \

474 
	`GETCHAR
(
cûí
, 
p
); \

475 i‡(
cûí
 !
addæí
 || \

476 
côy≥
 !
›t
) { \

477 
bad
; \

479 
	`GETLONG
(
l
, 
p
); \

480 
cû⁄g
 = 
	`ht⁄l
(
l
); \

481 i‡(
vÆ1
 !
cû⁄g
) { \

482 
bad
; \

484 i‡(
ﬁd
) { \

485 
	`GETLONG
(
l
, 
p
); \

486 
cû⁄g
 = 
	`ht⁄l
(
l
); \

487 i‡(
vÆ2
 !
cû⁄g
) { \

488 
bad
; \

491 }

	)

493 
	#ACKCIDNS
(
›t
, 
√g
, 
addr
) \

494 i‡(
√g
) { \

495 
u32_t
 
l
; \

496 i‡((
Àn
 -
CILEN_ADDR
) < 0) { \

497 
bad
; \

499 
	`GETCHAR
(
côy≥
, 
p
); \

500 
	`GETCHAR
(
cûí
, 
p
); \

501 i‡(
cûí
 !
CILEN_ADDR
 || \

502 
côy≥
 !
›t
) { \

503 
bad
; \

505 
	`GETLONG
(
l
, 
p
); \

506 
cû⁄g
 = 
	`ht⁄l
(
l
); \

507 i‡(
addr
 !
cû⁄g
) { \

508 
bad
; \

510 }

	)

512 
	`ACKCIADDR
((
go
->
ﬁd_addrs
? 
CI_ADDRS
: 
CI_ADDR
), go->
√g_addr
,

513 
go
->
ﬁd_addrs
, go->
ouøddr
, go->
hißddr
);

515 
	`ACKCIVJ
(
CI_COMPRESSTYPE
, 
go
->
√g_vj
, go->
vj_¥Ÿocﬁ
, go->
ﬁd_vj
,

516 
go
->
max¶Ÿödex
, go->
cÊag
);

518 
	`ACKCIDNS
(
CI_MS_DNS1
, 
go
->
ªq_dns1
, go->
dnßddr
[0]);

520 
	`ACKCIDNS
(
CI_MS_DNS2
, 
go
->
ªq_dns2
, go->
dnßddr
[1]);

525 i‡(
Àn
 != 0) {

526 
bad
;

530 
bad
:

531 
	`IPCPDEBUG
(
LOG_INFO
, ("ipcp_ackci:Ñeceived bad Ack!\n"));

533 
	}
}

545 
	$ù˝_«kci
(
fsm
 *
f
, 
u_ch¨
 *
p
, 
Àn
)

547 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

548 
u_ch¨
 
cimax¶Ÿödex
, 
cicÊag
;

549 
u_ch¨
 
côy≥
, 
cûí
, *
√xt
;

550 
u_sh‹t
 
cish‹t
;

551 
u32_t
 
cüddr1
, 
cüddr2
, 
l
, 
cidnßddr
;

552 
ù˝_›ti⁄s
 
no
;

553 
ù˝_›ti⁄s
 
åy
;

555 
	`BZERO
(&
no
, (no));

556 
åy
 = *
go
;

563 
	#NAKCIADDR
(
›t
, 
√g
, 
ﬁd
, 
code
) \

564 i‡(
go
->
√g
 && \

565 
Àn
 >(
cûí
 = (
ﬁd
? 
CILEN_ADDRS
: 
CILEN_ADDR
)) && \

566 
p
[1] =
cûí
 && \

567 
p
[0] =
›t
) { \

568 
Àn
 -
cûí
; \

569 
	`INCPTR
(2, 
p
); \

570 
	`GETLONG
(
l
, 
p
); \

571 
cüddr1
 = 
	`ht⁄l
(
l
); \

572 i‡(
ﬁd
) { \

573 
	`GETLONG
(
l
, 
p
); \

574 
cüddr2
 = 
	`ht⁄l
(
l
); \

575 
no
.
ﬁd_addrs
 = 1; \

577 
cüddr2
 = 0; \

579 
no
.
√g
 = 1; \

580 
code
 \

581 }

	)

583 
	#NAKCIVJ
(
›t
, 
√g
, 
code
) \

584 i‡(
go
->
√g
 && \

585 ((
cûí
 = 
p
[1]Ë=
CILEN_COMPRESS
 || cûí =
CILEN_VJ
) && \

586 
Àn
 >
cûí
 && \

587 
p
[0] =
›t
) { \

588 
Àn
 -
cûí
; \

589 
	`INCPTR
(2, 
p
); \

590 
	`GETSHORT
(
cish‹t
, 
p
); \

591 
no
.
√g
 = 1; \

592 
code
 \

593 }

	)

595 
	#NAKCIDNS
(
›t
, 
√g
, 
code
) \

596 i‡(
go
->
√g
 && \

597 ((
cûí
 = 
p
[1]Ë=
CILEN_ADDR
) && \

598 
Àn
 >
cûí
 && \

599 
p
[0] =
›t
) { \

600 
Àn
 -
cûí
; \

601 
	`INCPTR
(2, 
p
); \

602 
	`GETLONG
(
l
, 
p
); \

603 
cidnßddr
 = 
	`ht⁄l
(
l
); \

604 
no
.
√g
 = 1; \

605 
code
 \

606 }

	)

612 
	`NAKCIADDR
((
go
->
ﬁd_addrs
? 
CI_ADDRS
: 
CI_ADDR
), 
√g_addr
, go->old_addrs,

613 i‡(
go
->
ac˚±_loˇl
 && 
cüddr1
) {

614 
åy
.
ouøddr
 = 
cüddr1
;

615 
	`IPCPDEBUG
(
LOG_INFO
, ("local IPáddress %s\n",

616 
	`öë_¡ﬂ
(
cüddr1
)));

618 i‡(
go
->
ac˚±_ªmŸe
 && 
cüddr2
) {

619 
åy
.
hißddr
 = 
cüddr2
;

620 
	`IPCPDEBUG
(
LOG_INFO
, ("remote IPáddress %s\n",

621 
	`öë_¡ﬂ
(
cüddr2
)));

631 
	`NAKCIVJ
(
CI_COMPRESSTYPE
, 
√g_vj
,

632 i‡(
cûí
 =
CILEN_VJ
) {

633 
	`GETCHAR
(
cimax¶Ÿödex
, 
p
);

634 
	`GETCHAR
(
cicÊag
, 
p
);

635 i‡(
cish‹t
 =
IPCP_VJ_COMP
) {

636 
åy
.
ﬁd_vj
 = 0;

637 i‡(
cimax¶Ÿödex
 < 
go
->
max¶Ÿödex
) {

638 
åy
.
max¶Ÿödex
 = 
cimax¶Ÿödex
;

640 i‡(!
cicÊag
) {

641 
åy
.
cÊag
 = 0;

644 
åy
.
√g_vj
 = 0;

647 i‡(
cish‹t
 =
IPCP_VJ_COMP
 || cish‹à=
IPCP_VJ_COMP_OLD
) {

648 
åy
.
ﬁd_vj
 = 1;

649 
åy
.
vj_¥Ÿocﬁ
 = 
cish‹t
;

651 
åy
.
√g_vj
 = 0;

656 
	`NAKCIDNS
(
CI_MS_DNS1
, 
ªq_dns1
,

657 
åy
.
dnßddr
[0] = 
cidnßddr
;

658 
	`IPCPDEBUG
(
LOG_INFO
, ("¥im¨y DNSáddªs†%s\n", 
	`öë_¡ﬂ
(
cidnßddr
)));

661 
	`NAKCIDNS
(
CI_MS_DNS2
, 
ªq_dns2
,

662 
åy
.
dnßddr
[1] = 
cidnßddr
;

663 
	`IPCPDEBUG
(
LOG_INFO
, ("£c⁄d¨y DNSáddªs†%s\n", 
	`öë_¡ﬂ
(
cidnßddr
)));

672 
Àn
 > 
CILEN_VOID
) {

673 
	`GETCHAR
(
côy≥
, 
p
);

674 
	`GETCHAR
(
cûí
, 
p
);

675 if–(
Àn
 -
cûí
) < 0 ) {

676 
bad
;

678 
√xt
 = 
p
 + 
cûí
 - 2;

680 
côy≥
) {

681 
CI_COMPRESSTYPE
:

682 i‡(
go
->
√g_vj
 || 
no
.neg_vj ||

683 (
cûí
 !
CILEN_VJ
 && cûí !
CILEN_COMPRESS
)) {

684 
bad
;

686 
no
.
√g_vj
 = 1;

688 
CI_ADDRS
:

689 i‡((
go
->
√g_addr
 && go->
ﬁd_addrs
Ë|| 
no
.old_addrs

690 || 
cûí
 !
CILEN_ADDRS
) {

691 
bad
;

693 
åy
.
√g_addr
 = 1;

694 
åy
.
ﬁd_addrs
 = 1;

695 
	`GETLONG
(
l
, 
p
);

696 
cüddr1
 = 
	`ht⁄l
(
l
);

697 i‡(
cüddr1
 && 
go
->
ac˚±_loˇl
) {

698 
åy
.
ouøddr
 = 
cüddr1
;

700 
	`GETLONG
(
l
, 
p
);

701 
cüddr2
 = 
	`ht⁄l
(
l
);

702 i‡(
cüddr2
 && 
go
->
ac˚±_ªmŸe
) {

703 
åy
.
hißddr
 = 
cüddr2
;

705 
no
.
ﬁd_addrs
 = 1;

707 
CI_ADDR
:

708 i‡(
go
->
√g_addr
 || 
no
.√g_add∏|| 
cûí
 !
CILEN_ADDR
) {

709 
bad
;

711 
åy
.
ﬁd_addrs
 = 0;

712 
	`GETLONG
(
l
, 
p
);

713 
cüddr1
 = 
	`ht⁄l
(
l
);

714 i‡(
cüddr1
 && 
go
->
ac˚±_loˇl
) {

715 
åy
.
ouøddr
 = 
cüddr1
;

717 i‡(
åy
.
ouøddr
 != 0) {

718 
åy
.
√g_addr
 = 1;

720 
no
.
√g_addr
 = 1;

723 
p
 = 
√xt
;

727 i‡(
Àn
 != 0) {

728 
bad
;

734 i‡(
f
->
°©e
 !
LS_OPENED
) {

735 *
go
 = 
åy
;

740 
bad
:

741 
	`IPCPDEBUG
(
LOG_INFO
, ("ipcp_nakci:Ñeceived bad Nak!\n"));

743 
	}
}

750 
	$ù˝_ªjci
(
fsm
 *
f
, 
u_ch¨
 *
p
, 
Àn
)

752 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

753 
u_ch¨
 
cimax¶Ÿödex
, 
ciÊag
, 
cûí
;

754 
u_sh‹t
 
cish‹t
;

755 
u32_t
 
cû⁄g
;

756 
ù˝_›ti⁄s
 
åy
;

758 
åy
 = *
go
;

764 
	#REJCIADDR
(
›t
, 
√g
, 
ﬁd
, 
vÆ1
, 
vÆ2
) \

765 i‡(
go
->
√g
 && \

766 
Àn
 >(
cûí
 = 
ﬁd
? 
CILEN_ADDRS
: 
CILEN_ADDR
) && \

767 
p
[1] =
cûí
 && \

768 
p
[0] =
›t
) { \

769 
u32_t
 
l
; \

770 
Àn
 -
cûí
; \

771 
	`INCPTR
(2, 
p
); \

772 
	`GETLONG
(
l
, 
p
); \

773 
cû⁄g
 = 
	`ht⁄l
(
l
); \

775 i‡(
cû⁄g
 !
vÆ1
) { \

776 
bad
; \

778 i‡(
ﬁd
) { \

779 
	`GETLONG
(
l
, 
p
); \

780 
cû⁄g
 = 
	`ht⁄l
(
l
); \

782 i‡(
cû⁄g
 !
vÆ2
) { \

783 
bad
; \

786 
åy
.
√g
 = 0; \

787 }

	)

789 
	#REJCIVJ
(
›t
, 
√g
, 
vÆ
, 
ﬁd
, 
max¶Ÿ
, 
cÊag
) \

790 i‡(
go
->
√g
 && \

791 
p
[1] =(
ﬁd
? 
CILEN_COMPRESS
 : 
CILEN_VJ
) && \

792 
Àn
 >
p
[1] && \

793 
p
[0] =
›t
) { \

794 
Àn
 -
p
[1]; \

795 
	`INCPTR
(2, 
p
); \

796 
	`GETSHORT
(
cish‹t
, 
p
); \

798 i‡(
cish‹t
 !
vÆ
) { \

799 
bad
; \

801 i‡(!
ﬁd
) { \

802 
	`GETCHAR
(
cimax¶Ÿödex
, 
p
); \

803 i‡(
cimax¶Ÿödex
 !
max¶Ÿ
) { \

804 
bad
; \

806 
	`GETCHAR
(
ciÊag
, 
p
); \

807 i‡(
ciÊag
 !
cÊag
) { \

808 
bad
; \

811 
åy
.
√g
 = 0; \

812 }

	)

814 
	#REJCIDNS
(
›t
, 
√g
, 
dnßddr
) \

815 i‡(
go
->
√g
 && \

816 ((
cûí
 = 
p
[1]Ë=
CILEN_ADDR
) && \

817 
Àn
 >
cûí
 && \

818 
p
[0] =
›t
) { \

819 
u32_t
 
l
; \

820 
Àn
 -
cûí
; \

821 
	`INCPTR
(2, 
p
); \

822 
	`GETLONG
(
l
, 
p
); \

823 
cû⁄g
 = 
	`ht⁄l
(
l
); \

825 i‡(
cû⁄g
 !
dnßddr
) { \

826 
bad
; \

828 
åy
.
√g
 = 0; \

829 }

	)

831 
	`REJCIADDR
((
go
->
ﬁd_addrs
? 
CI_ADDRS
: 
CI_ADDR
), 
√g_addr
,

832 
go
->
ﬁd_addrs
, go->
ouøddr
, go->
hißddr
);

834 
	`REJCIVJ
(
CI_COMPRESSTYPE
, 
√g_vj
, 
go
->
vj_¥Ÿocﬁ
, go->
ﬁd_vj
,

835 
go
->
max¶Ÿödex
, go->
cÊag
);

837 
	`REJCIDNS
(
CI_MS_DNS1
, 
ªq_dns1
, 
go
->
dnßddr
[0]);

839 
	`REJCIDNS
(
CI_MS_DNS2
, 
ªq_dns2
, 
go
->
dnßddr
[1]);

844 i‡(
Àn
 != 0) {

845 
bad
;

850 i‡(
f
->
°©e
 !
LS_OPENED
) {

851 *
go
 = 
åy
;

855 
bad
:

856 
	`IPCPDEBUG
(
LOG_INFO
, ("ipcp_rejci:Ñeceived bad Reject!\n"));

858 
	}
}

869 
	$ù˝_ªqci
(
fsm
 *
f
, 
u_ch¨
 *
öp
 ,*
Àn
 ,
ªje˘_if_dißgªe
)

871 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
f
->
unô
];

872 
ù˝_›ti⁄s
 *
ho
 = &
ù˝_his›ti⁄s
[
f
->
unô
];

873 
ù˝_›ti⁄s
 *
ao
 = &
ù˝_Ælow›ti⁄s
[
f
->
unô
];

874 #ifde‡
OLD_CI_ADDRS


875 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

877 
u_ch¨
 *
cù
, *
√xt
;

878 
u_sh‹t
 
cûí
, 
côy≥
;

879 
u_sh‹t
 
cish‹t
;

880 
u32_t
 
é
, 
cüddr1
;

881 #ifde‡
OLD_CI_ADDRS


882 
u32_t
 
cüddr2
;

884 
rc
 = 
CONFACK
;

885 
‹c
;

886 
u_ch¨
 *
p
;

887 
u_ch¨
 *
u˝
 = 
öp
;

888 
l
 = *
Àn
;

889 
u_ch¨
 
max¶Ÿödex
, 
cÊag
;

890 
d
;

892 
cis_ª˚ived
[
f
->
unô
] = 1;

897 
	`BZERO
(
ho
, (*ho));

902 
√xt
 = 
öp
;

903 
l
) {

904 
‹c
 = 
CONFACK
;

905 
cù
 = 
p
 = 
√xt
;

906 i‡(
l
 < 2 ||

907 
p
[1] < 2 ||

908 
p
[1] > 
l
) {

909 
	`IPCPDEBUG
(
LOG_INFO
, ("ipcp_reqci: bad CIÜength!\n"));

910 
‹c
 = 
CONFREJ
;

911 
cûí
 = (
u_sh‹t
)
l
;

912 
l
 = 0;

913 
ídswôch
;

915 
	`GETCHAR
(
côy≥
, 
p
);

916 
	`GETCHAR
(
cûí
, 
p
);

917 
l
 -
cûí
;

918 
√xt
 +
cûí
;

920 
côy≥
) {

921 #ifde‡
OLD_CI_ADDRS


922 
CI_ADDRS
:

923 
	`IPCPDEBUG
(
LOG_INFO
, ("ipcp_reqci:Ñeceived ADDRS\n"));

924 i‡(!
ao
->
√g_addr
 ||

925 
cûí
 !
CILEN_ADDRS
) {

926 
‹c
 = 
CONFREJ
;

936 
	`GETLONG
(
é
, 
p
);

937 
cüddr1
 = 
	`ht⁄l
(
é
);

938 
	`IPCPDEBUG
(
LOG_INFO
, ("hi†add∏%s\n", 
	`öë_¡ﬂ
(
cüddr1
)));

939 i‡(
cüddr1
 !
wo
->
hißddr


940 && (
cüddr1
 =0 || !
wo
->
ac˚±_ªmŸe
)) {

941 
‹c
 = 
CONFNAK
;

942 i‡(!
ªje˘_if_dißgªe
) {

943 
	`DECPTR
((
u32_t
), 
p
);

944 
é
 = 
	`¡ohl
(
wo
->
hißddr
);

945 
	`PUTLONG
(
é
, 
p
);

947 } i‡(
cüddr1
 =0 && 
wo
->
hißddr
 == 0) {

951 
‹c
 = 
CONFREJ
;

952 
wo
->
ªq_addr
 = 0;

960 
	`GETLONG
(
é
, 
p
);

961 
cüddr2
 = 
	`ht⁄l
(
é
);

962 
	`IPCPDEBUG
(
LOG_INFO
, ("ou∏add∏%s\n", 
	`öë_¡ﬂ
(
cüddr2
)));

963 i‡(
cüddr2
 !
wo
->
ouøddr
) {

964 i‡(
cüddr2
 =0 || !
wo
->
ac˚±_loˇl
) {

965 
‹c
 = 
CONFNAK
;

966 i‡(!
ªje˘_if_dißgªe
) {

967 
	`DECPTR
((
u32_t
), 
p
);

968 
é
 = 
	`¡ohl
(
wo
->
ouøddr
);

969 
	`PUTLONG
(
é
, 
p
);

972 
go
->
ouøddr
 = 
cüddr2
;

976 
ho
->
√g_addr
 = 1;

977 
ho
->
ﬁd_addrs
 = 1;

978 
ho
->
hißddr
 = 
cüddr1
;

979 
ho
->
ouøddr
 = 
cüddr2
;

983 
CI_ADDR
:

984 i‡(!
ao
->
√g_addr
) {

985 
	`IPCPDEBUG
(
LOG_INFO
, ("ipcp_reqci: Reject ADDRÇotállowed\n"));

986 
‹c
 = 
CONFREJ
;

988 } i‡(
cûí
 !
CILEN_ADDR
) {

989 
	`IPCPDEBUG
(
LOG_INFO
, ("ipcp_reqci: Reject ADDR badÜen\n"));

990 
‹c
 = 
CONFREJ
;

1000 
	`GETLONG
(
é
, 
p
);

1001 
cüddr1
 = 
	`ht⁄l
(
é
);

1002 i‡(
cüddr1
 !
wo
->
hißddr


1003 && (
cüddr1
 =0 || !
wo
->
ac˚±_ªmŸe
)) {

1004 
‹c
 = 
CONFNAK
;

1005 i‡(!
ªje˘_if_dißgªe
) {

1006 
	`DECPTR
((
u32_t
), 
p
);

1007 
é
 = 
	`¡ohl
(
wo
->
hißddr
);

1008 
	`PUTLONG
(
é
, 
p
);

1010 
	`IPCPDEBUG
(
LOG_INFO
, ("ù˝_ªqci: Nak ADDR %s\n", 
	`öë_¡ﬂ
(
cüddr1
)));

1011 } i‡(
cüddr1
 =0 && 
wo
->
hißddr
 == 0) {

1015 
	`IPCPDEBUG
(
LOG_INFO
, ("ù˝_ªqci: Reje˘ ADDR %s\n", 
	`öë_¡ﬂ
(
cüddr1
)));

1016 
‹c
 = 
CONFREJ
;

1017 
wo
->
ªq_addr
 = 0;

1021 
ho
->
√g_addr
 = 1;

1022 
ho
->
hißddr
 = 
cüddr1
;

1023 
	`IPCPDEBUG
(
LOG_INFO
, ("ù˝_ªqci: ADDR %s\n", 
	`öë_¡ﬂ
(
cüddr1
)));

1026 
CI_MS_DNS1
:

1027 
CI_MS_DNS2
:

1029 
d
 = 
côy≥
 =
CI_MS_DNS2
;

1032 i‡(
ao
->
dnßddr
[
d
] == 0 ||

1033 
cûí
 !
CILEN_ADDR
) {

1034 
	`IPCPDEBUG
(
LOG_INFO
, ("ù˝_ªqci: Reje˘ög DNS%d Reque°\n", 
d
+1));

1035 
‹c
 = 
CONFREJ
;

1038 
	`GETLONG
(
é
, 
p
);

1039 i‡(
	`ht⁄l
(
é
Ë!
ao
->
dnßddr
[
d
]) {

1040 
	`IPCPDEBUG
(
LOG_INFO
, ("ipcp_reqci: Naking DNS%d Request %s\n",

1041 
d
+1, 
	`öë_¡ﬂ
(
é
)));

1042 
	`DECPTR
((
u32_t
), 
p
);

1043 
é
 = 
	`¡ohl
(
ao
->
dnßddr
[
d
]);

1044 
	`PUTLONG
(
é
, 
p
);

1045 
‹c
 = 
CONFNAK
;

1047 
	`IPCPDEBUG
(
LOG_INFO
, ("ù˝_ªqci:Ñe˚ived DNS%d Reque°\n", 
d
+1));

1050 
CI_MS_WINS1
:

1051 
CI_MS_WINS2
:

1053 
d
 = 
côy≥
 =
CI_MS_WINS2
;

1054 
	`IPCPDEBUG
(
LOG_INFO
, ("ù˝_ªqci:Ñe˚ived WINS%d Reque°\n", 
d
+1));

1057 i‡(
ao
->
wößddr
[
d
] == 0 ||

1058 
cûí
 !
CILEN_ADDR
) {

1059 
‹c
 = 
CONFREJ
;

1062 
	`GETLONG
(
é
, 
p
);

1063 i‡(
	`ht⁄l
(
é
Ë!
ao
->
wößddr
[
d
]) {

1064 
	`DECPTR
((
u32_t
), 
p
);

1065 
é
 = 
	`¡ohl
(
ao
->
wößddr
[
d
]);

1066 
	`PUTLONG
(
é
, 
p
);

1067 
‹c
 = 
CONFNAK
;

1071 
CI_COMPRESSTYPE
:

1072 i‡(!
ao
->
√g_vj
) {

1073 
	`IPCPDEBUG
(
LOG_INFO
, ("ipcp_reqci: Rejecting COMPRESSTYPEÇotállowed\n"));

1074 
‹c
 = 
CONFREJ
;

1076 } i‡(
cûí
 !
CILEN_VJ
 && cûí !
CILEN_COMPRESS
) {

1077 
	`IPCPDEBUG
(
LOG_INFO
, ("ù˝_ªqci: Reje˘ög COMPRESSTYPEÜí=%d\n", 
cûí
));

1078 
‹c
 = 
CONFREJ
;

1081 
	`GETSHORT
(
cish‹t
, 
p
);

1083 i‡(!(
cish‹t
 =
IPCP_VJ_COMP
 ||

1084 (
cish‹t
 =
IPCP_VJ_COMP_OLD
 && 
cûí
 =
CILEN_COMPRESS
))) {

1085 
	`IPCPDEBUG
(
LOG_INFO
, ("ù˝_ªqci: Reje˘ög COMPRESSTYPE %d\n", 
cish‹t
));

1086 
‹c
 = 
CONFREJ
;

1090 
ho
->
√g_vj
 = 1;

1091 
ho
->
vj_¥Ÿocﬁ
 = 
cish‹t
;

1092 i‡(
cûí
 =
CILEN_VJ
) {

1093 
	`GETCHAR
(
max¶Ÿödex
, 
p
);

1094 i‡(
max¶Ÿödex
 > 
ao
->maxslotindex) {

1095 
	`IPCPDEBUG
(
LOG_INFO
, ("ù˝_ªqci: Nakög VJ max slŸ %d\n", 
max¶Ÿödex
));

1096 
‹c
 = 
CONFNAK
;

1097 i‡(!
ªje˘_if_dißgªe
) {

1098 
	`DECPTR
(1, 
p
);

1099 
	`PUTCHAR
(
ao
->
max¶Ÿödex
, 
p
);

1102 
	`GETCHAR
(
cÊag
, 
p
);

1103 i‡(
cÊag
 && !
ao
->cflag) {

1104 
	`IPCPDEBUG
(
LOG_INFO
, ("ù˝_ªqci: Nakög VJ cÊag %d\n", 
cÊag
));

1105 
‹c
 = 
CONFNAK
;

1106 i‡(!
ªje˘_if_dißgªe
) {

1107 
	`DECPTR
(1, 
p
);

1108 
	`PUTCHAR
(
wo
->
cÊag
, 
p
);

1111 
ho
->
max¶Ÿödex
 = maxslotindex;

1112 
ho
->
cÊag
 = cflag;

1114 
ho
->
ﬁd_vj
 = 1;

1115 
ho
->
max¶Ÿödex
 = 
MAX_SLOTS
 - 1;

1116 
ho
->
cÊag
 = 1;

1118 
	`IPCPDEBUG
(
LOG_INFO
, (

1120 
ho
->
vj_¥Ÿocﬁ
, ho->
ﬁd_vj
, ho->
max¶Ÿödex
, ho->
cÊag
));

1124 
	`IPCPDEBUG
(
LOG_INFO
, ("ù˝_ªqci: Reje˘ög unknow¿CIÅy≥ %d\n", 
côy≥
));

1125 
‹c
 = 
CONFREJ
;

1129 
ídswôch
:

1130 i‡(
‹c
 =
CONFACK
 &&

1131 
rc
 !
CONFACK
) {

1135 i‡(
‹c
 =
CONFNAK
) {

1136 i‡(
ªje˘_if_dißgªe
) {

1137 
	`IPCPDEBUG
(
LOG_INFO
, ("ipcp_reqci: RejectingÅoo manyÇaks\n"));

1138 
‹c
 = 
CONFREJ
;

1140 i‡(
rc
 =
CONFREJ
) {

1143 i‡(
rc
 =
CONFACK
) {

1144 
rc
 = 
CONFNAK
;

1145 
u˝
 = 
öp
;

1150 i‡(
‹c
 =
CONFREJ
 &&

1151 
rc
 !
CONFREJ
) {

1152 
rc
 = 
CONFREJ
;

1153 
u˝
 = 
öp
;

1157 i‡(
u˝
 !
cù
) {

1158 
	`BCOPY
(
cù
, 
u˝
, 
cûí
);

1162 
	`INCPTR
(
cûí
, 
u˝
);

1172 i‡(
rc
 !
CONFREJ
 && !
ho
->
√g_addr
 &&

1173 
wo
->
ªq_addr
 && !
ªje˘_if_dißgªe
) {

1174 
	`IPCPDEBUG
(
LOG_INFO
, ("ipcp_reqci: RequestingÖeeráddress\n"));

1175 i‡(
rc
 =
CONFACK
) {

1176 
rc
 = 
CONFNAK
;

1177 
u˝
 = 
öp
;

1178 
wo
->
ªq_addr
 = 0;

1180 
	`PUTCHAR
(
CI_ADDR
, 
u˝
);

1181 
	`PUTCHAR
(
CILEN_ADDR
, 
u˝
);

1182 
é
 = 
	`¡ohl
(
wo
->
hißddr
);

1183 
	`PUTLONG
(
é
, 
u˝
);

1186 *
Àn
 = ()(
u˝
 - 
öp
);

1187 
	`IPCPDEBUG
(
LOG_INFO
, ("ù˝_ªqci:Ñëu∫ög C⁄figuª-%s\n", 
	`CODENAME
(
rc
)));

1188  (
rc
);

1189 
	}
}

1198 
	$ù_check_›ti⁄s
(
u_l⁄g
 
loˇlAddr
)

1200 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[0];

1206 i‡(
wo
->
ouøddr
 =0 && !
µp_£âögs
.
dißbÀ_deÁu…ù
) {

1207 
wo
->
ac˚±_loˇl
 = 1;

1208 
wo
->
ouøddr
 = 
	`ht⁄l
(
loˇlAddr
);

1210 
	}
}

1220 
	$ù˝_up
(
fsm
 *
f
)

1222 
u32_t
 
mask
;

1223 
ù˝_›ti⁄s
 *
ho
 = &
ù˝_his›ti⁄s
[
f
->
unô
];

1224 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

1225 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
f
->
unô
];

1227 
	`≈_up
(
f
->
unô
, 
PPP_IP
);

1228 
	`IPCPDEBUG
(
LOG_INFO
, ("ipcp: up\n"));

1233 i‡(!
ho
->
√g_addr
) {

1234 
ho
->
hißddr
 = 
wo
->hisaddr;

1237 i‡(
ho
->
hißddr
 == 0) {

1238 
	`IPCPDEBUG
(
LOG_ERR
, ("CouldÇot determineÑemote IPáddress\n"));

1239 
	`ù˝_˛o£
(
f
->
unô
, "CouldÇot determineÑemote IPáddress");

1242 i‡(
go
->
ouøddr
 == 0) {

1243 
	`IPCPDEBUG
(
LOG_ERR
, ("CouldÇot determineÜocal IPáddress\n"));

1244 
	`ù˝_˛o£
(
f
->
unô
, "CouldÇot determineÜocal IPáddress");

1248 i‡(
µp_£âögs
.
u£≥îdns
 && (
go
->
dnßddr
[0] || go->dnsaddr[1])) {

1255 i‡(!
	`auth_ù_addr
(
f
->
unô
, 
ho
->
hißddr
)) {

1256 
	`IPCPDEBUG
(
LOG_ERR
, ("Peer isÇotáuthorizedÅo useÑemoteáddress %s\n",

1257 
	`öë_¡ﬂ
(
ho
->
hißddr
)));

1258 
	`ù˝_˛o£
(
f
->
unô
, "UnauthorizedÑemote IPáddress");

1263 
	`sifvjcomp
(
f
->
unô
, 
ho
->
√g_vj
, ho->
cÊag
, ho->
max¶Ÿödex
);

1268 
mask
 = 
	`GëMask
(
go
->
ouøddr
);

1270 i‡(!
	`siÁddr
(
f
->
unô
, 
go
->
ouøddr
, 
ho
->
hißddr
, 
mask
, go->
dnßddr
[0], go->dnsaddr[1])) {

1271 
	`IPCPDEBUG
(
LOG_WARNING
, ("sifaddr failed\n"));

1272 
	`ù˝_˛o£
(
f
->
unô
, "Interface configuration failed");

1277 i‡(!
	`sifup
(
f
->
unô
)) {

1278 
	`IPCPDEBUG
(
LOG_WARNING
, ("sifup failed\n"));

1279 
	`ù˝_˛o£
(
f
->
unô
, "Interface configuration failed");

1283 
	`si‚pmode
(
f
->
unô
, 
PPP_IP
, 
NPMODE_PASS
);

1286 i‡(
ù˝_w™t›ti⁄s
[
f
->
unô
].
deÁu…_rouã
) {

1287 i‡(
	`sifdeÁu…rouã
(
f
->
unô
, 
go
->
ouøddr
, 
ho
->
hißddr
)) {

1288 
deÁu…_rouã_£t
[
f
->
unô
] = 1;

1292 
	`IPCPDEBUG
(
LOG_NOTICE
, ("loˇ» IPáddªs†%s\n", 
	`öë_¡ﬂ
(
go
->
ouøddr
)));

1293 
	`IPCPDEBUG
(
LOG_NOTICE
, ("ªmŸêIPáddªs†%s\n", 
	`öë_¡ﬂ
(
ho
->
hißddr
)));

1294 i‡(
go
->
dnßddr
[0]) {

1295 
	`IPCPDEBUG
(
LOG_NOTICE
, ("¥im¨y DNSáddªs†%s\n", 
	`öë_¡ﬂ
(
go
->
dnßddr
[0])));

1297 i‡(
go
->
dnßddr
[1]) {

1298 
	`IPCPDEBUG
(
LOG_NOTICE
, ("£c⁄d¨y DNSáddªs†%s\n", 
	`öë_¡ﬂ
(
go
->
dnßddr
[1])));

1300 
	}
}

1310 
	$ù˝_down
(
fsm
 *
f
)

1312 
	`IPCPDEBUG
(
LOG_INFO
, ("ipcp: down\n"));

1313 
	`≈_down
(
f
->
unô
, 
PPP_IP
);

1314 
	`sifvjcomp
(
f
->
unô
, 0, 0, 0);

1316 
	`sifdown
(
f
->
unô
);

1317 
	`ù˝_˛ór_addrs
(
f
->
unô
);

1318 
	}
}

1325 
	$ù˝_˛ór_addrs
(
unô
)

1327 
u32_t
 
ouøddr
, 
hißddr
;

1329 
ouøddr
 = 
ù˝_gŸ›ti⁄s
[
unô
].ouraddr;

1330 
hißddr
 = 
ù˝_his›ti⁄s
[
unô
].hisaddr;

1331 i‡(
deÁu…_rouã_£t
[
unô
]) {

1332 
	`cifdeÁu…rouã
(
unô
, 
ouøddr
, 
hißddr
);

1333 
deÁu…_rouã_£t
[
unô
] = 0;

1335 
	`ciÁddr
(
unô
, 
ouøddr
, 
hißddr
);

1336 
	}
}

1343 
	$ù˝_föished
(
fsm
 *
f
)

1345 
	`≈_föished
(
f
->
unô
, 
PPP_IP
);

1346 
	}
}

1348 #i‡
PPP_ADDITIONAL_CALLBACKS


1350 
ù˝_¥öçkt
(
u_ch¨
 *
p
, 
∂í
, (*
¥öãr
Ë(*, *, ...), *
¨g
)

1352 
	`LWIP_UNUSED_ARG
(
p
);

1353 
	`LWIP_UNUSED_ARG
(
∂í
);

1354 
	`LWIP_UNUSED_ARG
(
¥öãr
);

1355 
	`LWIP_UNUSED_ARG
(
¨g
);

1357 
	}
}

1364 
	#IP_HDRLEN
 20

	)

1365 
	#IP_OFFMASK
 0x1fff

	)

1366 
	#IPPROTO_TCP
 6

	)

1367 
	#TCP_HDRLEN
 20

	)

1368 
	#TH_FIN
 0x01

	)

1375 
	#√t_sh‹t
(
x
Ë(((x)[0] << 8Ë+ (x)[1])

	)

1376 
	#gë_ùhl
(
x
Ë(((*)(x))[0] & 0xF)

	)

1377 
	#gë_ùoff
(
x
Ë
	`√t_sh‹t
((*)(xË+ 6)

	)

1378 
	#gë_ù¥Ÿo
(
x
Ë(((*)(x))[9])

	)

1379 
	#gë_t˝off
(
x
Ë(((*)(x))[12] >> 4)

	)

1380 
	#gë_t˝Êags
(
x
Ë(((*)(x))[13])

	)

1383 
	$ù_a˘ive_pkt
(
u_ch¨
 *
pkt
, 
Àn
)

1385 
u_ch¨
 *
t˝
;

1386 
hÀn
;

1388 
Àn
 -
PPP_HDRLEN
;

1389 
pkt
 +
PPP_HDRLEN
;

1390 i‡(
Àn
 < 
IP_HDRLEN
) {

1393 i‡((
	`gë_ùoff
(
pkt
Ë& 
IP_OFFMASK
) != 0) {

1396 i‡(
	`gë_ù¥Ÿo
(
pkt
Ë!
IPPROTO_TCP
) {

1399 
hÀn
 = 
	`gë_ùhl
(
pkt
) * 4;

1400 i‡(
Àn
 < 
hÀn
 + 
TCP_HDRLEN
) {

1403 
t˝
 = 
pkt
 + 
hÀn
;

1404 i‡((
	`gë_t˝Êags
(
t˝
Ë& 
TH_FIN
Ë!0 && 
Àn
 =
hÀn
 + 
	`gë_t˝off
(tcp) * 4) {

1408 
	}
}

	@netif/ppp/ipcp.h

54 #i‚de‡
IPCP_H


55 
	#IPCP_H


	)

60 
	#CI_ADDRS
 1

	)

61 
	#CI_COMPRESSTYPE
 2

	)

62 
	#CI_ADDR
 3

	)

64 
	#CI_MS_DNS1
 129

	)

65 
	#CI_MS_WINS1
 128

	)

66 
	#CI_MS_DNS2
 131

	)

67 
	#CI_MS_WINS2
 130

	)

69 
	#IPCP_VJMODE_OLD
 1

	)

70 
	#IPCP_VJMODE_RFC1172
 2

	)

71 
	#IPCP_VJMODE_RFC1332
 3

	)

74 
	#IPCP_VJ_COMP
 0x002d

	)

75 
	#IPCP_VJ_COMP_OLD
 0x0037

	)

78 
	sù˝_›ti⁄s
 {

79 
u_öt
 
	m√g_addr
 : 1;

80 
u_öt
 
	mﬁd_addrs
 : 1;

81 
u_öt
 
	mªq_addr
 : 1;

82 
u_öt
 
	mdeÁu…_rouã
 : 1;

83 
u_öt
 
	m¥oxy_¨p
 : 1;

84 
u_öt
 
	m√g_vj
 : 1;

85 
u_öt
 
	mﬁd_vj
 : 1;

86 
u_öt
 
	mac˚±_loˇl
 : 1;

87 
u_öt
 
	mac˚±_ªmŸe
 : 1;

88 
u_öt
 
	mªq_dns1
 : 1;

89 
u_öt
 
	mªq_dns2
 : 1;

90 
u_sh‹t
 
	mvj_¥Ÿocﬁ
;

91 
u_ch¨
 
	mmax¶Ÿödex
;

92 
u_ch¨
 
	mcÊag
;

93 
u32_t
 
	mouøddr
, 
	mhißddr
;

94 
u32_t
 
	mdnßddr
[2];

95 
u32_t
 
	mwößddr
[2];

96 } 
	tù˝_›ti⁄s
;

98 
fsm
 
ù˝_fsm
[];

99 
ù˝_›ti⁄s
 
ù˝_w™t›ti⁄s
[];

100 
ù˝_›ti⁄s
 
ù˝_gŸ›ti⁄s
[];

101 
ù˝_›ti⁄s
 
ù˝_Ælow›ti⁄s
[];

102 
ù˝_›ti⁄s
 
ù˝_his›ti⁄s
[];

104 
¥Ÿít
 
ù˝_¥Ÿít
;

	@netif/ppp/lcp.c

54 
	~"lwù/›t.h
"

56 #i‡
PPP_SUPPORT


58 
	~"µp.h
"

59 
	~"µpdebug.h
"

61 
	~"fsm.h
"

62 
	~"ch≠.h
"

63 
	~"magic.h
"

64 
	~"auth.h
"

65 
	~"l˝.h
"

67 
	~<°rög.h
>

69 #i‡
PPPOE_SUPPORT


70 
	~"√tif/µp_€.h
"

72 
	#PPPOE_MAXMTU
 
PPP_MAXMRU


	)

79 
	gl˝_echo_öãrvÆ
 = 0;

80 
	gl˝_echo_Áûs
 = 0;

81 
boﬁ
 
	gœx_ªcv
 = 0;

83 
£ãsˇ≥
 (**);

85 
›ti⁄_t
 
	gl˝_›ti⁄_li°
[] = {

88 {
NULL
}

93 
LökPha£
 
	gl˝_pha£
[
NUM_PPP
];

94 
u_öt
 
	gl˝_echo_öãrvÆ
 = 
LCP_ECHOINTERVAL
;

95 
u_öt
 
	gl˝_echo_Áûs
 = 
LCP_MAXECHOFAILS
;

98 
fsm
 
	gl˝_fsm
[
NUM_PPP
];

99 
l˝_›ti⁄s
 
	gl˝_w™t›ti⁄s
[
NUM_PPP
];

100 
l˝_›ti⁄s
 
	gl˝_gŸ›ti⁄s
[
NUM_PPP
];

101 
l˝_›ti⁄s
 
	gl˝_Ælow›ti⁄s
[
NUM_PPP
];

102 
l˝_›ti⁄s
 
	gl˝_his›ti⁄s
[
NUM_PPP
];

103 
ext_accm
 
	gxmô_accm
[
NUM_PPP
];

105 
u32_t
 
	gl˝_echos_≥ndög
 = 0;

106 
u32_t
 
	gl˝_echo_numbî
 = 0;

107 
u32_t
 
	gl˝_echo_timî_ru¬ög
 = 0;

110 
u_ch¨
 
	g«k_buf„r
[
PPP_MRU
];

115 
l˝_ª£tci
 (
fsm
*);

116 
l˝_cûí
 (
fsm
*);

117 
l˝_addci
 (
fsm
*, 
u_ch¨
*, *);

118 
l˝_ackci
 (
fsm
*, 
u_ch¨
*, );

119 
l˝_«kci
 (
fsm
*, 
u_ch¨
*, );

120 
l˝_ªjci
 (
fsm
*, 
u_ch¨
*, );

121 
l˝_ªqci
 (
fsm
*, 
u_ch¨
*, *, );

122 
l˝_up
 (
fsm
*);

123 
l˝_down
 (
fsm
*);

124 
l˝_°¨tög
 (
fsm
*);

125 
l˝_föished
 (
fsm
*);

126 
l˝_extcode
 (
fsm
*, , 
u_ch¨
, u_char*, );

127 
l˝_ΩrŸªj
 (
fsm
*, 
u_ch¨
*, );

133 
l˝_echo_lowîup
 ();

134 
l˝_echo_lowîdown
 ();

135 
L˝EchoTimeout
 (*);

136 
l˝_ª˚ived_echo_ª∂y
 (
fsm
*, , 
u_ch¨
*, );

137 
L˝SídEchoReque°
 (
fsm
*);

138 
L˝LökFaûuª
 (
fsm
*);

139 
L˝EchoCheck
 (
fsm
*);

141 
fsm_ˇŒbacks
 
	gl˝_ˇŒbacks
 = {

142 
l˝_ª£tci
,

143 
l˝_cûí
,

144 
l˝_addci
,

145 
l˝_ackci
,

146 
l˝_«kci
,

147 
l˝_ªjci
,

148 
l˝_ªqci
,

149 
l˝_up
,

150 
l˝_down
,

151 
l˝_°¨tög
,

152 
l˝_föished
,

153 
NULL
,

154 
NULL
,

155 
l˝_extcode
,

164 
l˝_öput
 (, 
u_ch¨
 *, );

165 
l˝_¥Ÿªj
 ();

167 
¥Ÿít
 
	gl˝_¥Ÿít
 = {

168 
PPP_LCP
,

169 
l˝_öô
,

170 
l˝_öput
,

171 
l˝_¥Ÿªj
,

172 
l˝_lowîup
,

173 
l˝_lowîdown
,

174 
l˝_›í
,

175 
l˝_˛o£
,

176 #i‡
PPP_ADDITIONAL_CALLBACKS


177 
l˝_¥öçkt
,

178 
NULL
,

182 #i‡
PPP_ADDITIONAL_CALLBACKS


183 
NULL
,

184 
NULL
,

185 
NULL


189 
	gl˝_lo›backÁû
 = 
DEFLOOPBACKFAIL
;

194 
	#CILEN_VOID
 2

	)

195 
	#CILEN_CHAR
 3

	)

196 
	#CILEN_SHORT
 4

	)

197 
	#CILEN_CHAP
 5

	)

198 
	#CILEN_LONG
 6

	)

199 
	#CILEN_LQR
 8

	)

200 
	#CILEN_CBCP
 3

	)

202 
	#CODENAME
(
x
Ë((xË=
CONFACK
 ? "ACK" : (xË=
CONFNAK
 ? "NAK" : "REJ")

	)

209 
	$£ãsˇ≥
(
¨gv
)

210 **
¨gv
;

212 
n
, 
ªt
;

213 *
p
, *
ídp
;

215 
p
 = *
¨gv
;

216 
ªt
 = 1;

217 *
p
) {

218 
n
 = 
	`°πﬁ
(
p
, &
ídp
, 16);

219 i‡(
p
 =
ídp
) {

220 
	`›ti⁄_îr‹
("esˇ≥Ö¨amëî c⁄èö†övÆid hexÇumbî '%s'", 
p
);

223 
p
 = 
ídp
;

224 i‡(
n
 < 0 ||Ç == 0x5E ||Ç > 0xFF) {

225 
	`›ti⁄_îr‹
("ˇn'àesˇ≥ ch¨a˘î 0x%x", 
n
);

226 
ªt
 = 0;

228 
xmô_accm
[0][
n
 >> 5] |= 1 << (n & 0x1F);

229 *
p
 == ',' || *p == ' ')

230 ++
p
;

232  
ªt
;

233 
	}
}

240 
	$l˝_öô
(
unô
)

242 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

243 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
unô
];

244 
l˝_›ti⁄s
 *
ao
 = &
l˝_Ælow›ti⁄s
[
unô
];

246 
f
->
unô
 = unit;

247 
f
->
¥Ÿocﬁ
 = 
PPP_LCP
;

248 
f
->
ˇŒbacks
 = &
l˝_ˇŒbacks
;

250 
	`fsm_öô
(
f
);

252 
wo
->
∑ssive
 = 0;

253 
wo
->
sûít
 = 0;

254 
wo
->
ª°¨t
 = 0;

255 
wo
->
√g_mru
 = 1;

256 
wo
->
mru
 = 
PPP_DEFMRU
;

257 
wo
->
√g_asyncm≠
 = 1;

258 
wo
->
asyncm≠
 = 0x00000000l;

259 
wo
->
√g_ch≠
 = 0;

260 
wo
->
√g_u∑p
 = 0;

261 
wo
->
ch≠_mdty≥
 = 
CHAP_DIGEST_MD5
;

262 
wo
->
√g_magi˙umbî
 = 1;

263 
wo
->
√g_pcom¥essi⁄
 = 1;

264 
wo
->
√g_accom¥essi⁄
 = 1;

265 
wo
->
√g_lqr
 = 0;

266 
wo
->
√g_cb˝
 = 0;

268 
ao
->
√g_mru
 = 1;

269 
ao
->
mru
 = 
PPP_MAXMRU
;

270 
ao
->
√g_asyncm≠
 = 1;

271 
ao
->
asyncm≠
 = 0x00000000l;

272 
ao
->
√g_ch≠
 = (
CHAP_SUPPORT
 != 0);

273 
ao
->
ch≠_mdty≥
 = 
CHAP_DIGEST_MD5
;

274 
ao
->
√g_u∑p
 = (
PAP_SUPPORT
 != 0);

275 
ao
->
√g_magi˙umbî
 = 1;

276 
ao
->
√g_pcom¥essi⁄
 = 1;

277 
ao
->
√g_accom¥essi⁄
 = 1;

278 
ao
->
√g_lqr
 = 0;

279 
ao
->
√g_cb˝
 = (
CBCP_SUPPORT
 != 0);

285 
	`mem£t
(
xmô_accm
[
unô
], 0, (xmit_accm[0]));

286 
xmô_accm
[
unô
][15] = 0x60;

287 
xmô_accm
[
unô
][0] = (
u_ch¨
)((
ao
->
asyncm≠
 & 0xFF));

288 
xmô_accm
[
unô
][1] = (
u_ch¨
)((
ao
->
asyncm≠
 >> 8) & 0xFF);

289 
xmô_accm
[
unô
][2] = (
u_ch¨
)((
ao
->
asyncm≠
 >> 16) & 0xFF);

290 
xmô_accm
[
unô
][3] = (
u_ch¨
)((
ao
->
asyncm≠
 >> 24) & 0xFF);

291 
	`LCPDEBUG
(
LOG_INFO
, ("lcp_init: xmit_accm=%X %X %X %X\n",

292 
xmô_accm
[
unô
][0],

293 
xmô_accm
[
unô
][1],

294 
xmô_accm
[
unô
][2],

295 
xmô_accm
[
unô
][3]));

297 
l˝_pha£
[
unô
] = 
PHASE_INITIALIZE
;

298 
	}
}

305 
	$l˝_›í
(
unô
)

307 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

308 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
unô
];

310 
f
->
Êags
 = 0;

311 i‡(
wo
->
∑ssive
) {

312 
f
->
Êags
 |
OPT_PASSIVE
;

314 i‡(
wo
->
sûít
) {

315 
f
->
Êags
 |
OPT_SILENT
;

317 
	`fsm_›í
(
f
);

319 
l˝_pha£
[
unô
] = 
PHASE_ESTABLISH
;

320 
	}
}

327 
	$l˝_˛o£
(
unô
, *
ªas⁄
)

329 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

331 i‡(
l˝_pha£
[
unô
] !
PHASE_DEAD
) {

332 
l˝_pha£
[
unô
] = 
PHASE_TERMINATE
;

334 i‡(
f
->
°©e
 =
LS_STOPPED
 && f->
Êags
 & (
OPT_PASSIVE
|
OPT_SILENT
)) {

341 
f
->
°©e
 = 
LS_CLOSED
;

342 
	`l˝_föished
(
f
);

344 
	`fsm_˛o£
(
f
, 
ªas⁄
);

346 
	}
}

353 
	$l˝_lowîup
(
unô
)

355 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
unô
];

362 
	`µp_£t_xaccm
(
unô
, &
xmô_accm
[unit]);

363 
	`µp_£nd_c⁄fig
(
unô
, 
PPP_MRU
, 0xffffffffl, 0, 0);

364 
	`µp_ªcv_c⁄fig
(
unô
, 
PPP_MRU
, 0x00000000l,

365 
wo
->
√g_pcom¥essi⁄
, wo->
√g_accom¥essi⁄
);

366 
≥î_mru
[
unô
] = 
PPP_MRU
;

367 
l˝_Ælow›ti⁄s
[
unô
].
asyncm≠
 = (
u_l⁄g
)
xmô_accm
[unit][0]

368 | ((
u_l⁄g
)
xmô_accm
[
unô
][1] << 8)

369 | ((
u_l⁄g
)
xmô_accm
[
unô
][2] << 16)

370 | ((
u_l⁄g
)
xmô_accm
[
unô
][3] << 24);

371 
	`LCPDEBUG
(
LOG_INFO
, ("lcp_lowerup:ásyncmap=%X %X %X %X\n",

372 
xmô_accm
[
unô
][3],

373 
xmô_accm
[
unô
][2],

374 
xmô_accm
[
unô
][1],

375 
xmô_accm
[
unô
][0]));

377 
	`fsm_lowîup
(&
l˝_fsm
[
unô
]);

378 
	}
}

385 
	$l˝_lowîdown
(
unô
)

387 
	`fsm_lowîdown
(&
l˝_fsm
[
unô
]);

388 
	}
}

395 
	$l˝_öput
(
unô
, 
u_ch¨
 *
p
, 
Àn
)

397 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

399 
	`fsm_öput
(
f
, 
p
, 
Àn
);

400 
	}
}

407 
	$l˝_extcode
(
fsm
 *
f
, 
code
, 
u_ch¨
 
id
, u_ch¨ *
öp
, 
Àn
)

409 
u_ch¨
 *
magp
;

411  
code
 ){

412 
PROTREJ
:

413 
	`l˝_ΩrŸªj
(
f
, 
öp
, 
Àn
);

416 
ECHOREQ
:

417 i‡(
f
->
°©e
 !
LS_OPENED
) {

420 
	`LCPDEBUG
(
LOG_INFO
, ("l˝: Echo-Reque°, Rcvd id %d\n", 
id
));

421 
magp
 = 
öp
;

422 
	`PUTLONG
(
l˝_gŸ›ti⁄s
[
f
->
unô
].
magi˙umbî
, 
magp
);

423 
	`fsm_sd©a
(
f
, 
ECHOREP
, 
id
, 
öp
, 
Àn
);

426 
ECHOREP
:

427 
	`l˝_ª˚ived_echo_ª∂y
(
f
, 
id
, 
öp
, 
Àn
);

430 
DISCREQ
:

437 
	}
}

446 
	$l˝_ΩrŸªj
(
fsm
 *
f
, 
u_ch¨
 *
öp
, 
Àn
)

448 
i
;

449 
¥Ÿít
 *
¥Ÿp
;

450 
u_sh‹t
 
¥Ÿ
;

452 i‡(
Àn
 < () (
u_sh‹t
)) {

453 
	`LCPDEBUG
(
LOG_INFO
, ("lcp_rprotrej: Rcvd short Protocol-RejectÖacket!\n"));

457 
	`GETSHORT
(
¥Ÿ
, 
öp
);

459 
	`LCPDEBUG
(
LOG_INFO
, ("l˝_ΩrŸªj: Rcvd PrŸocﬁ-Reje˘Öackë f‹ %x!\n", 
¥Ÿ
));

465 if–
f
->
°©e
 !
LS_OPENED
 ) {

466 
	`LCPDEBUG
(
LOG_INFO
, ("PrŸocﬁ-Reje˘ disˇrded: LCP i¿°©ê%d\n", 
f
->
°©e
));

473 
i
 = 0; (
¥Ÿp
 = 
µp_¥Ÿocﬁs
[i]Ë!
NULL
; ++i) {

474 i‡(
¥Ÿp
->
¥Ÿocﬁ
 =
¥Ÿ
 &&ÖrŸp->
íabÀd_Êag
) {

475 (*
¥Ÿp
->
¥Ÿªj
)(
f
->
unô
);

480 
	`LCPDEBUG
(
LOG_WARNING
, ("PrŸocﬁ-Reje˘ f‹ unsuµ‹ãdÖrŸocﬁ 0x%x\n", 
¥Ÿ
));

481 
	}
}

488 
	$l˝_¥Ÿªj
(
unô
)

490 
	`LWIP_UNUSED_ARG
(
unô
);

494 
	`LCPDEBUG
(
LOG_WARNING
, ("lcp_protrej: Received Protocol-Reject for LCP!\n"));

495 
	`fsm_¥Ÿªje˘
(&
l˝_fsm
[
unô
]);

496 
	}
}

503 
	$l˝_•rŸªj
(
unô
, 
u_ch¨
 *
p
, 
Àn
)

510 
	`fsm_sd©a
(&
l˝_fsm
[
unô
], 
PROTREJ
, ++l˝_fsm[unô].
id
, 
p
, 
Àn
);

511 
	}
}

518 
	$l˝_ª£tci
(
fsm
 *
f
)

520 
l˝_w™t›ti⁄s
[
f
->
unô
].
magi˙umbî
 = 
	`magic
();

521 
l˝_w™t›ti⁄s
[
f
->
unô
].
numlo›s
 = 0;

522 
l˝_gŸ›ti⁄s
[
f
->
unô
] = 
l˝_w™t›ti⁄s
[f->unit];

523 
≥î_mru
[
f
->
unô
] = 
PPP_MRU
;

524 
	`auth_ª£t
(
f
->
unô
);

525 
	}
}

532 
	$l˝_cûí
(
fsm
 *
f
)

534 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

536 
	#LENCIVOID
(
√g
Ë(“egË? 
CILEN_VOID
 : 0)

	)

537 
	#LENCICHAP
(
√g
Ë(“egË? 
CILEN_CHAP
 : 0)

	)

538 
	#LENCISHORT
(
√g
Ë(“egË? 
CILEN_SHORT
 : 0)

	)

539 
	#LENCILONG
(
√g
Ë(“egË? 
CILEN_LONG
 : 0)

	)

540 
	#LENCILQR
(
√g
Ë(“egË? 
CILEN_LQR
: 0)

	)

541 
	#LENCICBCP
(
√g
Ë(“egË? 
CILEN_CBCP
: 0)

	)

546  (
	`LENCISHORT
(
go
->
√g_mru
 && go->
mru
 !
PPP_DEFMRU
) +

547 
	`LENCILONG
(
go
->
√g_asyncm≠
 && go->
asyncm≠
 != 0xFFFFFFFFl) +

548 
	`LENCICHAP
(
go
->
√g_ch≠
) +

549 
	`LENCISHORT
(!
go
->
√g_ch≠
 && go->
√g_u∑p
) +

550 
	`LENCILQR
(
go
->
√g_lqr
) +

551 
	`LENCICBCP
(
go
->
√g_cb˝
) +

552 
	`LENCILONG
(
go
->
√g_magi˙umbî
) +

553 
	`LENCIVOID
(
go
->
√g_pcom¥essi⁄
) +

554 
	`LENCIVOID
(
go
->
√g_accom¥essi⁄
));

555 
	}
}

562 
	$l˝_addci
(
fsm
 *
f
, 
u_ch¨
 *
u˝
, *
À≈
)

564 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

565 
u_ch¨
 *
°¨t_u˝
 = 
u˝
;

567 
	#ADDCIVOID
(
›t
, 
√g
) \

568 i‡(
√g
) { \

569 
	`LCPDEBUG
(
LOG_INFO
, ("l˝_addci: o±=%d\n", 
›t
)); \

570 
	`PUTCHAR
(
›t
, 
u˝
); \

571 
	`PUTCHAR
(
CILEN_VOID
, 
u˝
); \

572 }

	)

573 
	#ADDCISHORT
(
›t
, 
√g
, 
vÆ
) \

574 i‡(
√g
) { \

575 
	`LCPDEBUG
(
LOG_INFO
, ("l˝_addci: INT o±=%d %X\n", 
›t
, 
vÆ
)); \

576 
	`PUTCHAR
(
›t
, 
u˝
); \

577 
	`PUTCHAR
(
CILEN_SHORT
, 
u˝
); \

578 
	`PUTSHORT
(
vÆ
, 
u˝
); \

579 }

	)

580 
	#ADDCICHAP
(
›t
, 
√g
, 
vÆ
, 
dige°
) \

581 i‡(
√g
) { \

582 
	`LCPDEBUG
(
LOG_INFO
, ("l˝_addci: CHAP o±=%d %X\n", 
›t
, 
vÆ
)); \

583 
	`PUTCHAR
(
›t
, 
u˝
); \

584 
	`PUTCHAR
(
CILEN_CHAP
, 
u˝
); \

585 
	`PUTSHORT
(
vÆ
, 
u˝
); \

586 
	`PUTCHAR
(
dige°
, 
u˝
); \

587 }

	)

588 
	#ADDCILONG
(
›t
, 
√g
, 
vÆ
) \

589 i‡(
√g
) { \

590 
	`LCPDEBUG
(
LOG_INFO
, ("l˝_addci: L o±=%d %lX\n", 
›t
, 
vÆ
)); \

591 
	`PUTCHAR
(
›t
, 
u˝
); \

592 
	`PUTCHAR
(
CILEN_LONG
, 
u˝
); \

593 
	`PUTLONG
(
vÆ
, 
u˝
); \

594 }

	)

595 
	#ADDCILQR
(
›t
, 
√g
, 
vÆ
) \

596 i‡(
√g
) { \

597 
	`LCPDEBUG
(
LOG_INFO
, ("l˝_addci: LQR o±=%d %lX\n", 
›t
, 
vÆ
)); \

598 
	`PUTCHAR
(
›t
, 
u˝
); \

599 
	`PUTCHAR
(
CILEN_LQR
, 
u˝
); \

600 
	`PUTSHORT
(
PPP_LQR
, 
u˝
); \

601 
	`PUTLONG
(
vÆ
, 
u˝
); \

602 }

	)

603 
	#ADDCICHAR
(
›t
, 
√g
, 
vÆ
) \

604 i‡(
√g
) { \

605 
	`LCPDEBUG
(
LOG_INFO
, ("l˝_addci: CHAR o±=%d %X '%z'\n", 
›t
, 
vÆ
, val)); \

606 
	`PUTCHAR
(
›t
, 
u˝
); \

607 
	`PUTCHAR
(
CILEN_CHAR
, 
u˝
); \

608 
	`PUTCHAR
(
vÆ
, 
u˝
); \

609 }

	)

611 
	`ADDCISHORT
(
CI_MRU
, 
go
->
√g_mru
 && go->
mru
 !
PPP_DEFMRU
, go->mru);

612 
	`ADDCILONG
(
CI_ASYNCMAP
, 
go
->
√g_asyncm≠
 && go->
asyncm≠
 != 0xFFFFFFFFl, go->asyncmap);

613 
	`ADDCICHAP
(
CI_AUTHTYPE
, 
go
->
√g_ch≠
, 
PPP_CHAP
, go->
ch≠_mdty≥
);

614 
	`ADDCISHORT
(
CI_AUTHTYPE
, !
go
->
√g_ch≠
 && go->
√g_u∑p
, 
PPP_PAP
);

615 
	`ADDCILQR
(
CI_QUALITY
, 
go
->
√g_lqr
, go->
lqr_≥riod
);

616 
	`ADDCICHAR
(
CI_CALLBACK
, 
go
->
√g_cb˝
, 
CBCP_OPT
);

617 
	`ADDCILONG
(
CI_MAGICNUMBER
, 
go
->
√g_magi˙umbî
, go->
magi˙umbî
);

618 
	`ADDCIVOID
(
CI_PCOMPRESSION
, 
go
->
√g_pcom¥essi⁄
);

619 
	`ADDCIVOID
(
CI_ACCOMPRESSION
, 
go
->
√g_accom¥essi⁄
);

621 i‡(
u˝
 - 
°¨t_u˝
 !*
À≈
) {

623 
	`LCPDEBUG
(
LOG_ERR
, ("Bug inÜcp_addci: wrongÜength\n"));

625 
	}
}

637 
	$l˝_ackci
(
fsm
 *
f
, 
u_ch¨
 *
p
, 
Àn
)

639 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

640 
u_ch¨
 
cûí
, 
côy≥
, 
cich¨
;

641 
u_sh‹t
 
cish‹t
;

642 
u32_t
 
cû⁄g
;

649 
	#ACKCIVOID
(
›t
, 
√g
) \

650 i‡(
√g
) { \

651 i‡((
Àn
 -
CILEN_VOID
) < 0) \

652 
bad
; \

653 
	`GETCHAR
(
côy≥
, 
p
); \

654 
	`GETCHAR
(
cûí
, 
p
); \

655 i‡(
cûí
 !
CILEN_VOID
 || 
côy≥
 !
›t
) \

656 
bad
; \

657 }

	)

658 
	#ACKCISHORT
(
›t
, 
√g
, 
vÆ
) \

659 i‡(
√g
) { \

660 i‡((
Àn
 -
CILEN_SHORT
) < 0) \

661 
bad
; \

662 
	`GETCHAR
(
côy≥
, 
p
); \

663 
	`GETCHAR
(
cûí
, 
p
); \

664 i‡(
cûí
 !
CILEN_SHORT
 || 
côy≥
 !
›t
) \

665 
bad
; \

666 
	`GETSHORT
(
cish‹t
, 
p
); \

667 i‡(
cish‹t
 !
vÆ
) \

668 
bad
; \

669 }

	)

670 
	#ACKCICHAR
(
›t
, 
√g
, 
vÆ
) \

671 i‡(
√g
) { \

672 i‡((
Àn
 -
CILEN_CHAR
) < 0) \

673 
bad
; \

674 
	`GETCHAR
(
côy≥
, 
p
); \

675 
	`GETCHAR
(
cûí
, 
p
); \

676 i‡(
cûí
 !
CILEN_CHAR
 || 
côy≥
 !
›t
) \

677 
bad
; \

678 
	`GETCHAR
(
cich¨
, 
p
); \

679 i‡(
cich¨
 !
vÆ
) \

680 
bad
; \

681 }

	)

682 
	#ACKCICHAP
(
›t
, 
√g
, 
vÆ
, 
dige°
) \

683 i‡(
√g
) { \

684 i‡((
Àn
 -
CILEN_CHAP
) < 0) \

685 
bad
; \

686 
	`GETCHAR
(
côy≥
, 
p
); \

687 
	`GETCHAR
(
cûí
, 
p
); \

688 i‡(
cûí
 !
CILEN_CHAP
 || 
côy≥
 !
›t
) \

689 
bad
; \

690 
	`GETSHORT
(
cish‹t
, 
p
); \

691 i‡(
cish‹t
 !
vÆ
) \

692 
bad
; \

693 
	`GETCHAR
(
cich¨
, 
p
); \

694 i‡(
cich¨
 !
dige°
) \

695 
bad
; \

696 }

	)

697 
	#ACKCILONG
(
›t
, 
√g
, 
vÆ
) \

698 i‡(
√g
) { \

699 i‡((
Àn
 -
CILEN_LONG
) < 0) \

700 
bad
; \

701 
	`GETCHAR
(
côy≥
, 
p
); \

702 
	`GETCHAR
(
cûí
, 
p
); \

703 i‡(
cûí
 !
CILEN_LONG
 || 
côy≥
 !
›t
) \

704 
bad
; \

705 
	`GETLONG
(
cû⁄g
, 
p
); \

706 i‡(
cû⁄g
 !
vÆ
) \

707 
bad
; \

708 }

	)

709 
	#ACKCILQR
(
›t
, 
√g
, 
vÆ
) \

710 i‡(
√g
) { \

711 i‡((
Àn
 -
CILEN_LQR
) < 0) \

712 
bad
; \

713 
	`GETCHAR
(
côy≥
, 
p
); \

714 
	`GETCHAR
(
cûí
, 
p
); \

715 i‡(
cûí
 !
CILEN_LQR
 || 
côy≥
 !
›t
) \

716 
bad
; \

717 
	`GETSHORT
(
cish‹t
, 
p
); \

718 i‡(
cish‹t
 !
PPP_LQR
) \

719 
bad
; \

720 
	`GETLONG
(
cû⁄g
, 
p
); \

721 i‡(
cû⁄g
 !
vÆ
) \

722 
bad
; \

723 }

	)

725 
	`ACKCISHORT
(
CI_MRU
, 
go
->
√g_mru
 && go->
mru
 !
PPP_DEFMRU
, go->mru);

726 
	`ACKCILONG
(
CI_ASYNCMAP
, 
go
->
√g_asyncm≠
 && go->
asyncm≠
 != 0xFFFFFFFFl, go->asyncmap);

727 
	`ACKCICHAP
(
CI_AUTHTYPE
, 
go
->
√g_ch≠
, 
PPP_CHAP
, go->
ch≠_mdty≥
);

728 
	`ACKCISHORT
(
CI_AUTHTYPE
, !
go
->
√g_ch≠
 && go->
√g_u∑p
, 
PPP_PAP
);

729 
	`ACKCILQR
(
CI_QUALITY
, 
go
->
√g_lqr
, go->
lqr_≥riod
);

730 
	`ACKCICHAR
(
CI_CALLBACK
, 
go
->
√g_cb˝
, 
CBCP_OPT
);

731 
	`ACKCILONG
(
CI_MAGICNUMBER
, 
go
->
√g_magi˙umbî
, go->
magi˙umbî
);

732 
	`ACKCIVOID
(
CI_PCOMPRESSION
, 
go
->
√g_pcom¥essi⁄
);

733 
	`ACKCIVOID
(
CI_ACCOMPRESSION
, 
go
->
√g_accom¥essi⁄
);

738 i‡(
Àn
 != 0) {

739 
bad
;

741 
	`LCPDEBUG
(
LOG_INFO
, ("lcp_acki: Ack\n"));

743 
bad
:

744 
	`LCPDEBUG
(
LOG_WARNING
, ("lcp_acki:Ñeceived bad Ack!\n"));

746 
	}
}

759 
	$l˝_«kci
(
fsm
 *
f
, 
u_ch¨
 *
p
, 
Àn
)

761 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

762 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
f
->
unô
];

763 
u_ch¨
 
côy≥
, 
cich¨
, *
√xt
;

764 
u_sh‹t
 
cish‹t
;

765 
u32_t
 
cû⁄g
;

766 
l˝_›ti⁄s
 
no
;

767 
l˝_›ti⁄s
 
åy
;

768 
lo›ed_back
 = 0;

769 
cûí
;

771 
	`BZERO
(&
no
, (no));

772 
åy
 = *
go
;

779 
	#NAKCIVOID
(
›t
, 
√g
, 
code
) \

780 i‡(
go
->
√g
 && \

781 
Àn
 >
CILEN_VOID
 && \

782 
p
[1] =
CILEN_VOID
 && \

783 
p
[0] =
›t
) { \

784 
Àn
 -
CILEN_VOID
; \

785 
	`INCPTR
(
CILEN_VOID
, 
p
); \

786 
no
.
√g
 = 1; \

787 
code
 \

788 }

	)

789 
	#NAKCICHAP
(
›t
, 
√g
, 
code
) \

790 i‡(
go
->
√g
 && \

791 
Àn
 >
CILEN_CHAP
 && \

792 
p
[1] =
CILEN_CHAP
 && \

793 
p
[0] =
›t
) { \

794 
Àn
 -
CILEN_CHAP
; \

795 
	`INCPTR
(2, 
p
); \

796 
	`GETSHORT
(
cish‹t
, 
p
); \

797 
	`GETCHAR
(
cich¨
, 
p
); \

798 
no
.
√g
 = 1; \

799 
code
 \

800 }

	)

801 
	#NAKCICHAR
(
›t
, 
√g
, 
code
) \

802 i‡(
go
->
√g
 && \

803 
Àn
 >
CILEN_CHAR
 && \

804 
p
[1] =
CILEN_CHAR
 && \

805 
p
[0] =
›t
) { \

806 
Àn
 -
CILEN_CHAR
; \

807 
	`INCPTR
(2, 
p
); \

808 
	`GETCHAR
(
cich¨
, 
p
); \

809 
no
.
√g
 = 1; \

810 
code
 \

811 }

	)

812 
	#NAKCISHORT
(
›t
, 
√g
, 
code
) \

813 i‡(
go
->
√g
 && \

814 
Àn
 >
CILEN_SHORT
 && \

815 
p
[1] =
CILEN_SHORT
 && \

816 
p
[0] =
›t
) { \

817 
Àn
 -
CILEN_SHORT
; \

818 
	`INCPTR
(2, 
p
); \

819 
	`GETSHORT
(
cish‹t
, 
p
); \

820 
no
.
√g
 = 1; \

821 
code
 \

822 }

	)

823 
	#NAKCILONG
(
›t
, 
√g
, 
code
) \

824 i‡(
go
->
√g
 && \

825 
Àn
 >
CILEN_LONG
 && \

826 
p
[1] =
CILEN_LONG
 && \

827 
p
[0] =
›t
) { \

828 
Àn
 -
CILEN_LONG
; \

829 
	`INCPTR
(2, 
p
); \

830 
	`GETLONG
(
cû⁄g
, 
p
); \

831 
no
.
√g
 = 1; \

832 
code
 \

833 }

	)

834 
	#NAKCILQR
(
›t
, 
√g
, 
code
) \

835 i‡(
go
->
√g
 && \

836 
Àn
 >
CILEN_LQR
 && \

837 
p
[1] =
CILEN_LQR
 && \

838 
p
[0] =
›t
) { \

839 
Àn
 -
CILEN_LQR
; \

840 
	`INCPTR
(2, 
p
); \

841 
	`GETSHORT
(
cish‹t
, 
p
); \

842 
	`GETLONG
(
cû⁄g
, 
p
); \

843 
no
.
√g
 = 1; \

844 
code
 \

845 }

	)

854 i‡(
go
->
√g_mru
 && go->
mru
 !
PPP_DEFMRU
) {

855 
	`NAKCISHORT
(
CI_MRU
, 
√g_mru
,

856 i‡(
cish‹t
 <
wo
->
mru
 || cish‹à< 
PPP_DEFMRU
) {

857 
åy
.
mru
 = 
cish‹t
;

865 i‡(
go
->
√g_asyncm≠
 && go->
asyncm≠
 != 0xFFFFFFFFl) {

866 
	`NAKCILONG
(
CI_ASYNCMAP
, 
√g_asyncm≠
,

867 
åy
.
asyncm≠
 = 
go
->asyncm≠ | 
cû⁄g
;

876 i‡((
go
->
√g_ch≠
 || go->
√g_u∑p
)

877 && 
Àn
 >
CILEN_SHORT


878 && 
p
[0] =
CI_AUTHTYPE
 &&Ö[1] >
CILEN_SHORT
 &&Ö[1] <
Àn
) {

879 
cûí
 = 
p
[1];

880 
Àn
 -
cûí
;

881 
no
.
√g_ch≠
 = 
go
->neg_chap;

882 
no
.
√g_u∑p
 = 
go
->neg_upap;

883 
	`INCPTR
(2, 
p
);

884 
	`GETSHORT
(
cish‹t
, 
p
);

885 i‡(
cish‹t
 =
PPP_PAP
 && 
cûí
 =
CILEN_SHORT
) {

891 i‡(!
go
->
√g_ch≠
) {

892 
bad
;

894 
åy
.
√g_ch≠
 = 0;

896 } i‡(
cish‹t
 =
PPP_CHAP
 && 
cûí
 =
CILEN_CHAP
) {

897 
	`GETCHAR
(
cich¨
, 
p
);

898 i‡(
go
->
√g_ch≠
) {

904 i‡(
cich¨
 !
go
->
ch≠_mdty≥
) {

905 
åy
.
√g_ch≠
 = 0;

911 
åy
.
√g_u∑p
 = 0;

919 i‡(
go
->
√g_ch≠
) {

920 
åy
.
√g_ch≠
 = 0;

922 
åy
.
√g_u∑p
 = 0;

924 
p
 +
cûí
 - 
CILEN_SHORT
;

933 
	`NAKCILQR
(
CI_QUALITY
, 
√g_lqr
,

934 i‡(
cish‹t
 !
PPP_LQR
) {

935 
åy
.
√g_lqr
 = 0;

937 
åy
.
lqr_≥riod
 = 
cû⁄g
;

944 
	`NAKCICHAR
(
CI_CALLBACK
, 
√g_cb˝
,

945 
åy
.
√g_cb˝
 = 0;

951 
	`NAKCILONG
(
CI_MAGICNUMBER
, 
√g_magi˙umbî
,

952 
åy
.
magi˙umbî
 = 
	`magic
();

953 
lo›ed_back
 = 1;

961 
	`NAKCIVOID
(
CI_PCOMPRESSION
, 
√g_pcom¥essi⁄
,

962 
åy
.
√g_pcom¥essi⁄
 = 0;

964 
	`NAKCIVOID
(
CI_ACCOMPRESSION
, 
√g_accom¥essi⁄
,

965 
åy
.
√g_accom¥essi⁄
 = 0;

984 
Àn
 > 
CILEN_VOID
) {

985 
	`GETCHAR
(
côy≥
, 
p
);

986 
	`GETCHAR
(
cûí
, 
p
);

987 i‡(
cûí
 < 
CILEN_VOID
 || (
Àn
 -= cilen) < 0) {

988 
bad
;

990 
√xt
 = 
p
 + 
cûí
 - 2;

992 
côy≥
) {

993 
CI_MRU
:

994 i‡((
go
->
√g_mru
 && go->
mru
 !
PPP_DEFMRU
)

995 || 
no
.
√g_mru
 || 
cûí
 !
CILEN_SHORT
) {

996 
bad
;

998 
	`GETSHORT
(
cish‹t
, 
p
);

999 i‡(
cish‹t
 < 
PPP_DEFMRU
) {

1000 
åy
.
mru
 = 
cish‹t
;

1003 
CI_ASYNCMAP
:

1004 i‡((
go
->
√g_asyncm≠
 && go->
asyncm≠
 != 0xFFFFFFFFl)

1005 || 
no
.
√g_asyncm≠
 || 
cûí
 !
CILEN_LONG
) {

1006 
bad
;

1009 
CI_AUTHTYPE
:

1010 i‡(
go
->
√g_ch≠
 || 
no
.√g_ch≠ || go->
√g_u∑p
 ||Ço.neg_upap) {

1011 
bad
;

1014 
CI_MAGICNUMBER
:

1015 i‡(
go
->
√g_magi˙umbî
 || 
no
.neg_magicnumber ||

1016 
cûí
 !
CILEN_LONG
) {

1017 
bad
;

1020 
CI_PCOMPRESSION
:

1021 i‡(
go
->
√g_pcom¥essi⁄
 || 
no
.neg_pcompression

1022 || 
cûí
 !
CILEN_VOID
) {

1023 
bad
;

1026 
CI_ACCOMPRESSION
:

1027 i‡(
go
->
√g_accom¥essi⁄
 || 
no
.neg_accompression

1028 || 
cûí
 !
CILEN_VOID
) {

1029 
bad
;

1032 
CI_QUALITY
:

1033 i‡(
go
->
√g_lqr
 || 
no
.√g_lq∏|| 
cûí
 !
CILEN_LQR
) {

1034 
bad
;

1038 
p
 = 
√xt
;

1042 i‡(
Àn
 != 0) {

1043 
bad
;

1049 i‡(
f
->
°©e
 !
LS_OPENED
) {

1050 i‡(
lo›ed_back
) {

1051 i‡(++
åy
.
numlo›s
 >
l˝_lo›backÁû
) {

1052 
	`LCPDEBUG
(
LOG_NOTICE
, ("SerialÜine isÜooped back.\n"));

1053 
	`l˝_˛o£
(
f
->
unô
, "Loopback detected");

1056 
åy
.
numlo›s
 = 0;

1058 *
go
 = 
åy
;

1063 
bad
:

1064 
	`LCPDEBUG
(
LOG_WARNING
, ("lcp_nakci:Ñeceived bad Nak!\n"));

1066 
	}
}

1079 
	$l˝_ªjci
(
fsm
 *
f
, 
u_ch¨
 *
p
, 
Àn
)

1081 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

1082 
u_ch¨
 
cich¨
;

1083 
u_sh‹t
 
cish‹t
;

1084 
u32_t
 
cû⁄g
;

1085 
l˝_›ti⁄s
 
åy
;

1087 
åy
 = *
go
;

1094 
	#REJCIVOID
(
›t
, 
√g
) \

1095 i‡(
go
->
√g
 && \

1096 
Àn
 >
CILEN_VOID
 && \

1097 
p
[1] =
CILEN_VOID
 && \

1098 
p
[0] =
›t
) { \

1099 
Àn
 -
CILEN_VOID
; \

1100 
	`INCPTR
(
CILEN_VOID
, 
p
); \

1101 
åy
.
√g
 = 0; \

1102 
	`LCPDEBUG
(
LOG_INFO
, ("l˝_ªjci: void o± %dÑeje˘ed\n", 
›t
)); \

1103 }

	)

1104 
	#REJCISHORT
(
›t
, 
√g
, 
vÆ
) \

1105 i‡(
go
->
√g
 && \

1106 
Àn
 >
CILEN_SHORT
 && \

1107 
p
[1] =
CILEN_SHORT
 && \

1108 
p
[0] =
›t
) { \

1109 
Àn
 -
CILEN_SHORT
; \

1110 
	`INCPTR
(2, 
p
); \

1111 
	`GETSHORT
(
cish‹t
, 
p
); \

1113 i‡(
cish‹t
 !
vÆ
) { \

1114 
bad
; \

1116 
åy
.
√g
 = 0; \

1117 
	`LCPDEBUG
(
LOG_INFO
, ("l˝_ªjci: sh‹à›à%dÑeje˘ed\n", 
›t
)); \

1118 }

	)

1119 
	#REJCICHAP
(
›t
, 
√g
, 
vÆ
, 
dige°
) \

1120 i‡(
go
->
√g
 && \

1121 
Àn
 >
CILEN_CHAP
 && \

1122 
p
[1] =
CILEN_CHAP
 && \

1123 
p
[0] =
›t
) { \

1124 
Àn
 -
CILEN_CHAP
; \

1125 
	`INCPTR
(2, 
p
); \

1126 
	`GETSHORT
(
cish‹t
, 
p
); \

1127 
	`GETCHAR
(
cich¨
, 
p
); \

1129 i‡(
cish‹t
 !
vÆ
 || 
cich¨
 !
dige°
) { \

1130 
bad
; \

1132 
åy
.
√g
 = 0; \

1133 
åy
.
√g_u∑p
 = 0; \

1134 
	`LCPDEBUG
(
LOG_INFO
, ("l˝_ªjci: ch≠ o± %dÑeje˘ed\n", 
›t
)); \

1135 }

	)

1136 
	#REJCILONG
(
›t
, 
√g
, 
vÆ
) \

1137 i‡(
go
->
√g
 && \

1138 
Àn
 >
CILEN_LONG
 && \

1139 
p
[1] =
CILEN_LONG
 && \

1140 
p
[0] =
›t
) { \

1141 
Àn
 -
CILEN_LONG
; \

1142 
	`INCPTR
(2, 
p
); \

1143 
	`GETLONG
(
cû⁄g
, 
p
); \

1145 i‡(
cû⁄g
 !
vÆ
) { \

1146 
bad
; \

1148 
åy
.
√g
 = 0; \

1149 
	`LCPDEBUG
(
LOG_INFO
, ("l˝_ªjci:Ü⁄g o± %dÑeje˘ed\n", 
›t
)); \

1150 }

	)

1151 
	#REJCILQR
(
›t
, 
√g
, 
vÆ
) \

1152 i‡(
go
->
√g
 && \

1153 
Àn
 >
CILEN_LQR
 && \

1154 
p
[1] =
CILEN_LQR
 && \

1155 
p
[0] =
›t
) { \

1156 
Àn
 -
CILEN_LQR
; \

1157 
	`INCPTR
(2, 
p
); \

1158 
	`GETSHORT
(
cish‹t
, 
p
); \

1159 
	`GETLONG
(
cû⁄g
, 
p
); \

1161 i‡(
cish‹t
 !
PPP_LQR
 || 
cû⁄g
 !
vÆ
) { \

1162 
bad
; \

1164 
åy
.
√g
 = 0; \

1165 
	`LCPDEBUG
(
LOG_INFO
, ("l˝_ªjci: LQR o± %dÑeje˘ed\n", 
›t
)); \

1166 }

	)

1167 
	#REJCICBCP
(
›t
, 
√g
, 
vÆ
) \

1168 i‡(
go
->
√g
 && \

1169 
Àn
 >
CILEN_CBCP
 && \

1170 
p
[1] =
CILEN_CBCP
 && \

1171 
p
[0] =
›t
) { \

1172 
Àn
 -
CILEN_CBCP
; \

1173 
	`INCPTR
(2, 
p
); \

1174 
	`GETCHAR
(
cich¨
, 
p
); \

1176 i‡(
cich¨
 !
vÆ
) { \

1177 
bad
; \

1179 
åy
.
√g
 = 0; \

1180 
	`LCPDEBUG
(
LOG_INFO
, ("l˝_ªjci: CÆlback o± %dÑeje˘ed\n", 
›t
)); \

1181 }

	)

1183 
	`REJCISHORT
(
CI_MRU
, 
√g_mru
, 
go
->
mru
);

1184 
	`REJCILONG
(
CI_ASYNCMAP
, 
√g_asyncm≠
, 
go
->
asyncm≠
);

1185 
	`REJCICHAP
(
CI_AUTHTYPE
, 
√g_ch≠
, 
PPP_CHAP
, 
go
->
ch≠_mdty≥
);

1186 i‡(!
go
->
√g_ch≠
) {

1187 
	`REJCISHORT
(
CI_AUTHTYPE
, 
√g_u∑p
, 
PPP_PAP
);

1189 
	`REJCILQR
(
CI_QUALITY
, 
√g_lqr
, 
go
->
lqr_≥riod
);

1190 
	`REJCICBCP
(
CI_CALLBACK
, 
√g_cb˝
, 
CBCP_OPT
);

1191 
	`REJCILONG
(
CI_MAGICNUMBER
, 
√g_magi˙umbî
, 
go
->
magi˙umbî
);

1192 
	`REJCIVOID
(
CI_PCOMPRESSION
, 
√g_pcom¥essi⁄
);

1193 
	`REJCIVOID
(
CI_ACCOMPRESSION
, 
√g_accom¥essi⁄
);

1198 i‡(
Àn
 != 0) {

1199 
bad
;

1204 i‡(
f
->
°©e
 !
LS_OPENED
) {

1205 *
go
 = 
åy
;

1209 
bad
:

1210 
	`LCPDEBUG
(
LOG_WARNING
, ("lcp_rejci:Ñeceived bad Reject!\n"));

1212 
	}
}

1223 
	$l˝_ªqci
(
fsm
 *
f
,

1224 
u_ch¨
 *
öp
,

1225 *
À≈
,

1226 
ªje˘_if_dißgªe
)

1228 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

1229 
l˝_›ti⁄s
 *
ho
 = &
l˝_his›ti⁄s
[
f
->
unô
];

1230 
l˝_›ti⁄s
 *
ao
 = &
l˝_Ælow›ti⁄s
[
f
->
unô
];

1231 
u_ch¨
 *
cù
, *
√xt
;

1232 
cûí
, 
côy≥
;

1233 
u_ch¨
 
cich¨
;

1234 
u_sh‹t
 
cish‹t
;

1235 
u32_t
 
cû⁄g
;

1236 
rc
 = 
CONFACK
;

1237 
‹c
;

1238 
u_ch¨
 *
p
;

1239 
u_ch¨
 *
ªjp
;

1240 
u_ch¨
 *
«kp
;

1241 
l
 = *
À≈
;

1242 #i‡
TRACELCP
 > 0

1243 
åa˚Buf
[80];

1244 
size_t
 
åa˚Ndx
 = 0;

1250 
	`BZERO
(
ho
, (*ho));

1255 
√xt
 = 
öp
;

1256 
«kp
 = 
«k_buf„r
;

1257 
ªjp
 = 
öp
;

1258 
l
) {

1259 
‹c
 = 
CONFACK
;

1260 
cù
 = 
p
 = 
√xt
;

1261 i‡(
l
 < 2 ||

1262 
p
[1] < 2 ||

1263 
p
[1] > 
l
) {

1264 
	`LCPDEBUG
(
LOG_WARNING
, ("lcp_reqci: bad CIÜength!\n"));

1265 
‹c
 = 
CONFREJ
;

1266 
cûí
 = 
l
;

1267 
l
 = 0;

1268 
côy≥
 = 0;

1269 
ídswôch
;

1271 
	`GETCHAR
(
côy≥
, 
p
);

1272 
	`GETCHAR
(
cûí
, 
p
);

1273 
l
 -
cûí
;

1274 
√xt
 +
cûí
;

1276 
côy≥
) {

1277 
CI_MRU
:

1278 i‡(!
ao
->
√g_mru
) {

1279 
	`LCPDEBUG
(
LOG_INFO
, ("lcp_reqci: Reject MRU -Çotállowed\n"));

1280 
‹c
 = 
CONFREJ
;

1282 } i‡(
cûí
 !
CILEN_SHORT
) {

1283 
	`LCPDEBUG
(
LOG_INFO
, ("lcp_reqci: Reject MRU - badÜength\n"));

1284 
‹c
 = 
CONFREJ
;

1287 
	`GETSHORT
(
cish‹t
, 
p
);

1294 i‡(
cish‹t
 < 
PPP_MINMRU
) {

1295 
	`LCPDEBUG
(
LOG_INFO
, ("lcp_reqci: Nak - MRUÅoo small\n"));

1296 
‹c
 = 
CONFNAK
;

1297 
	`PUTCHAR
(
CI_MRU
, 
«kp
);

1298 
	`PUTCHAR
(
CILEN_SHORT
, 
«kp
);

1299 
	`PUTSHORT
(
PPP_MINMRU
, 
«kp
);

1302 
ho
->
√g_mru
 = 1;

1303 
ho
->
mru
 = 
cish‹t
;

1304 #i‡
TRACELCP
 > 0

1305 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " MRU %d", 
cish‹t
);

1306 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1310 
CI_ASYNCMAP
:

1311 i‡(!
ao
->
√g_asyncm≠
) {

1312 
	`LCPDEBUG
(
LOG_INFO
, ("lcp_reqci: Reject ASYNCMAPÇotállowed\n"));

1313 
‹c
 = 
CONFREJ
;

1315 } i‡(
cûí
 !
CILEN_LONG
) {

1316 
	`LCPDEBUG
(
LOG_INFO
, ("lcp_reqci: Reject ASYNCMAP badÜength\n"));

1317 
‹c
 = 
CONFREJ
;

1320 
	`GETLONG
(
cû⁄g
, 
p
);

1326 i‡((
ao
->
asyncm≠
 & ~
cû⁄g
) != 0) {

1327 
	`LCPDEBUG
(
LOG_INFO
, ("lcp_reqci: Nak ASYNCMAP %lX missing %lX\n",

1328 
cû⁄g
, 
ao
->
asyncm≠
));

1329 
‹c
 = 
CONFNAK
;

1330 
	`PUTCHAR
(
CI_ASYNCMAP
, 
«kp
);

1331 
	`PUTCHAR
(
CILEN_LONG
, 
«kp
);

1332 
	`PUTLONG
(
ao
->
asyncm≠
 | 
cû⁄g
, 
«kp
);

1335 
ho
->
√g_asyncm≠
 = 1;

1336 
ho
->
asyncm≠
 = 
cû⁄g
;

1337 #i‡
TRACELCP
 > 0

1338 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " ASYNCMAP=%lX", 
cû⁄g
);

1339 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1343 
CI_AUTHTYPE
:

1344 i‡(
cûí
 < 
CILEN_SHORT
) {

1345 
	`LCPDEBUG
(
LOG_INFO
, ("lcp_reqci: Reject AUTHTYPE missingárg\n"));

1346 
‹c
 = 
CONFREJ
;

1348 } i‡(!(
ao
->
√g_u∑p
 ||áo->
√g_ch≠
)) {

1352 
	`LCPDEBUG
(
LOG_INFO
, ("lcp_reqci: Reject AUTHTYPEÇotállowed\n"));

1353 
‹c
 = 
CONFREJ
;

1356 
	`GETSHORT
(
cish‹t
, 
p
);

1369 i‡(
cish‹t
 =
PPP_PAP
) {

1370 i‡(
ho
->
√g_ch≠
) {

1371 
	`LCPDEBUG
(
LOG_WARNING
, ("lcp_reqci: Reject AUTHTYPE PAPálreadyáccepted\n"));

1372 
‹c
 = 
CONFREJ
;

1374 } i‡(
cûí
 !
CILEN_SHORT
) {

1375 
	`LCPDEBUG
(
LOG_WARNING
, ("lcp_reqci: Reject AUTHTYPE PAP badÜen\n"));

1376 
‹c
 = 
CONFREJ
;

1379 i‡(!
ao
->
√g_u∑p
) {

1380 
	`LCPDEBUG
(
LOG_WARNING
, ("lcp_reqci: Nak AUTHTYPE PAPÇotállowed\n"));

1381 
‹c
 = 
CONFNAK
;

1382 
	`PUTCHAR
(
CI_AUTHTYPE
, 
«kp
);

1383 
	`PUTCHAR
(
CILEN_CHAP
, 
«kp
);

1384 
	`PUTSHORT
(
PPP_CHAP
, 
«kp
);

1385 
	`PUTCHAR
(
ao
->
ch≠_mdty≥
, 
«kp
);

1388 
ho
->
√g_u∑p
 = 1;

1389 #i‡
TRACELCP
 > 0

1390 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " PAP (%X)", 
cish‹t
);

1391 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1395 i‡(
cish‹t
 =
PPP_CHAP
) {

1396 i‡(
ho
->
√g_u∑p
) {

1397 
	`LCPDEBUG
(
LOG_WARNING
, ("lcp_reqci: Reject AUTHTYPE CHAPáccepted PAP\n"));

1398 
‹c
 = 
CONFREJ
;

1400 } i‡(
cûí
 !
CILEN_CHAP
) {

1401 
	`LCPDEBUG
(
LOG_WARNING
, ("lcp_reqci: Reject AUTHTYPE CHAP badÜen\n"));

1402 
‹c
 = 
CONFREJ
;

1405 i‡(!
ao
->
√g_ch≠
) {

1406 
	`LCPDEBUG
(
LOG_WARNING
, ("lcp_reqci: Nak AUTHTYPE CHAPÇotállowed\n"));

1407 
‹c
 = 
CONFNAK
;

1408 
	`PUTCHAR
(
CI_AUTHTYPE
, 
«kp
);

1409 
	`PUTCHAR
(
CILEN_SHORT
, 
«kp
);

1410 
	`PUTSHORT
(
PPP_PAP
, 
«kp
);

1413 
	`GETCHAR
(
cich¨
, 
p
);

1414 i‡(
cich¨
 !
CHAP_DIGEST_MD5


1415 #i‡
MSCHAP_SUPPORT


1416 && 
cich¨
 !
CHAP_MICROSOFT


1419 
	`LCPDEBUG
(
LOG_WARNING
, ("l˝_ªqci: Nak AUTHTYPE CHAP dige°=%d\n", ()
cich¨
));

1420 
‹c
 = 
CONFNAK
;

1421 
	`PUTCHAR
(
CI_AUTHTYPE
, 
«kp
);

1422 
	`PUTCHAR
(
CILEN_CHAP
, 
«kp
);

1423 
	`PUTSHORT
(
PPP_CHAP
, 
«kp
);

1424 
	`PUTCHAR
(
ao
->
ch≠_mdty≥
, 
«kp
);

1427 #i‡
TRACELCP
 > 0

1428 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " CHAP %X,%d", 
cish‹t
, ()
cich¨
);

1429 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1431 
ho
->
ch≠_mdty≥
 = 
cich¨
;

1432 
ho
->
√g_ch≠
 = 1;

1441 
‹c
 = 
CONFNAK
;

1442 
	`PUTCHAR
(
CI_AUTHTYPE
, 
«kp
);

1443 i‡(
ao
->
√g_ch≠
) {

1444 
	`LCPDEBUG
(
LOG_WARNING
, ("l˝_ªqci: Nak AUTHTYPE %dÑeq CHAP\n", 
cish‹t
));

1445 
	`PUTCHAR
(
CILEN_CHAP
, 
«kp
);

1446 
	`PUTSHORT
(
PPP_CHAP
, 
«kp
);

1447 
	`PUTCHAR
(
ao
->
ch≠_mdty≥
, 
«kp
);

1449 
	`LCPDEBUG
(
LOG_WARNING
, ("l˝_ªqci: Nak AUTHTYPE %dÑeq PAP\n", 
cish‹t
));

1450 
	`PUTCHAR
(
CILEN_SHORT
, 
«kp
);

1451 
	`PUTSHORT
(
PPP_PAP
, 
«kp
);

1455 
CI_QUALITY
:

1456 
	`GETSHORT
(
cish‹t
, 
p
);

1457 
	`GETLONG
(
cû⁄g
, 
p
);

1458 #i‡
TRACELCP
 > 0

1459 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " QUALITY (%x %x)", 
cish‹t
, (Ë
cû⁄g
);

1460 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1463 i‡(!
ao
->
√g_lqr
 ||

1464 
cûí
 !
CILEN_LQR
) {

1465 
‹c
 = 
CONFREJ
;

1473 i‡(
cish‹t
 !
PPP_LQR
) {

1474 
‹c
 = 
CONFNAK
;

1475 
	`PUTCHAR
(
CI_QUALITY
, 
«kp
);

1476 
	`PUTCHAR
(
CILEN_LQR
, 
«kp
);

1477 
	`PUTSHORT
(
PPP_LQR
, 
«kp
);

1478 
	`PUTLONG
(
ao
->
lqr_≥riod
, 
«kp
);

1483 
CI_MAGICNUMBER
:

1484 i‡(!(
ao
->
√g_magi˙umbî
 || 
go
->neg_magicnumber) ||

1485 
cûí
 !
CILEN_LONG
) {

1486 
‹c
 = 
CONFREJ
;

1489 
	`GETLONG
(
cû⁄g
, 
p
);

1490 #i‡
TRACELCP
 > 0

1491 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " MAGICNUMBER (%lX)", 
cû⁄g
);

1492 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1498 i‡(
go
->
√g_magi˙umbî
 &&

1499 
cû⁄g
 =
go
->
magi˙umbî
) {

1500 
cû⁄g
 = 
	`magic
();

1501 
‹c
 = 
CONFNAK
;

1502 
	`PUTCHAR
(
CI_MAGICNUMBER
, 
«kp
);

1503 
	`PUTCHAR
(
CILEN_LONG
, 
«kp
);

1504 
	`PUTLONG
(
cû⁄g
, 
«kp
);

1507 
ho
->
√g_magi˙umbî
 = 1;

1508 
ho
->
magi˙umbî
 = 
cû⁄g
;

1512 
CI_PCOMPRESSION
:

1513 #i‡
TRACELCP
 > 0

1514 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], (traceBuf), " PCOMPRESSION");

1515 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1517 i‡(!
ao
->
√g_pcom¥essi⁄
 ||

1518 
cûí
 !
CILEN_VOID
) {

1519 
‹c
 = 
CONFREJ
;

1522 
ho
->
√g_pcom¥essi⁄
 = 1;

1525 
CI_ACCOMPRESSION
:

1526 #i‡
TRACELCP
 > 0

1527 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], (traceBuf), " ACCOMPRESSION");

1528 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1530 i‡(!
ao
->
√g_accom¥essi⁄
 ||

1531 
cûí
 !
CILEN_VOID
) {

1532 
‹c
 = 
CONFREJ
;

1535 
ho
->
√g_accom¥essi⁄
 = 1;

1538 
CI_MRRU
:

1539 #i‡
TRACELCP
 > 0

1540 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], (traceBuf), " CI_MRRU");

1541 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1543 
‹c
 = 
CONFREJ
;

1546 
CI_SSNHF
:

1547 #i‡
TRACELCP
 > 0

1548 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], (traceBuf), " CI_SSNHF");

1549 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1551 
‹c
 = 
CONFREJ
;

1554 
CI_EPDISC
:

1555 #i‡
TRACELCP
 > 0

1556 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], (traceBuf), " CI_EPDISC");

1557 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1559 
‹c
 = 
CONFREJ
;

1563 #i‡
TRACELCP


1564 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " unknow¿%d", 
côy≥
);

1565 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1567 
‹c
 = 
CONFREJ
;

1571 
ídswôch
:

1572 #i‡
TRACELCP


1573 i‡(
åa˚Ndx
 >= 80 - 32) {

1574 
	`LCPDEBUG
(
LOG_INFO
, ("l˝_ªqci:Ñcvd%s\n", 
åa˚Buf
));

1575 
åa˚Ndx
 = 0;

1578 i‡(
‹c
 =
CONFACK
 &&

1579 
rc
 !
CONFACK
) {

1583 i‡(
‹c
 =
CONFNAK
) {

1584 i‡(
ªje˘_if_dißgªe


1585 && 
côy≥
 !
CI_MAGICNUMBER
) {

1586 
‹c
 = 
CONFREJ
;

1588 i‡(
rc
 =
CONFREJ
) {

1591 
rc
 = 
CONFNAK
;

1594 i‡(
‹c
 =
CONFREJ
) {

1595 
rc
 = 
CONFREJ
;

1596 i‡(
cù
 !
ªjp
) {

1597 
	`BCOPY
(
cù
, 
ªjp
, 
cûí
);

1599 
	`INCPTR
(
cûí
, 
ªjp
);

1610 
rc
) {

1611 
CONFACK
:

1612 *
À≈
 = ()(
√xt
 - 
öp
);

1614 
CONFNAK
:

1618 *
À≈
 = ()(
«kp
 - 
«k_buf„r
);

1619 
	`BCOPY
(
«k_buf„r
, 
öp
, *
À≈
);

1621 
CONFREJ
:

1622 *
À≈
 = ()(
ªjp
 - 
öp
);

1626 #i‡
TRACELCP
 > 0

1627 i‡(
åa˚Ndx
 > 0) {

1628 
	`LCPDEBUG
(
LOG_INFO
, ("l˝_ªqci: %s\n", 
åa˚Buf
));

1631 
	`LCPDEBUG
(
LOG_INFO
, ("l˝_ªqci:Ñëu∫ög CONF%s.\n", 
	`CODENAME
(
rc
)));

1632  (
rc
);

1633 
	}
}

1640 
	$l˝_up
(
fsm
 *
f
)

1642 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
f
->
unô
];

1643 
l˝_›ti⁄s
 *
ho
 = &
l˝_his›ti⁄s
[
f
->
unô
];

1644 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

1645 
l˝_›ti⁄s
 *
ao
 = &
l˝_Ælow›ti⁄s
[
f
->
unô
];

1647 i‡(!
go
->
√g_magi˙umbî
) {

1648 
go
->
magi˙umbî
 = 0;

1650 i‡(!
ho
->
√g_magi˙umbî
) {

1651 
ho
->
magi˙umbî
 = 0;

1660 
	`µp_£nd_c⁄fig
(
f
->
unô
, 
	`LWIP_MIN
(
ao
->
mru
, (
ho
->
√g_mru
? ho->mru: 
PPP_MRU
)),

1661 (
ho
->
√g_asyncm≠
? ho->
asyncm≠
: 0xffffffffl),

1662 
ho
->
√g_pcom¥essi⁄
, ho->
√g_accom¥essi⁄
);

1668 
	`µp_ªcv_c⁄fig
(
f
->
unô
, (
go
->
√g_mru
? 
	`LWIP_MAX
(
wo
->
mru
, go->mru): 
PPP_MRU
),

1669 (
go
->
√g_asyncm≠
? go->
asyncm≠
: 0x00000000),

1670 
go
->
√g_pcom¥essi⁄
, go->
√g_accom¥essi⁄
);

1672 i‡(
ho
->
√g_mru
) {

1673 
≥î_mru
[
f
->
unô
] = 
ho
->
mru
;

1676 
	`l˝_echo_lowîup
(
f
->
unô
);

1678 
	`lök_e°ablished
(
f
->
unô
);

1679 
	}
}

1688 
	$l˝_down
(
fsm
 *
f
)

1690 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

1692 
	`l˝_echo_lowîdown
(
f
->
unô
);

1694 
	`lök_down
(
f
->
unô
);

1696 
	`µp_£nd_c⁄fig
(
f
->
unô
, 
PPP_MRU
, 0xffffffffl, 0, 0);

1697 
	`µp_ªcv_c⁄fig
(
f
->
unô
, 
PPP_MRU
,

1698 (
go
->
√g_asyncm≠
? go->
asyncm≠
: 0x00000000),

1699 
go
->
√g_pcom¥essi⁄
, go->
√g_accom¥essi⁄
);

1700 
≥î_mru
[
f
->
unô
] = 
PPP_MRU
;

1701 
	}
}

1708 
	$l˝_°¨tög
(
fsm
 *
f
)

1710 
	`lök_ªquúed
(
f
->
unô
);

1711 
	}
}

1718 
	$l˝_föished
(
fsm
 *
f
)

1720 
	`lök_ãrmö©ed
(
f
->
unô
);

1721 
	}
}

1724 #i‡
PPP_ADDITIONAL_CALLBACKS


1730 
¥öt_°rög
–*
p
, 
Àn
, (*
¥öãr
Ë(*, *, ...), *
¨g
)

1732 
c
;

1734 
	`¥öãr
(
¨g
, "\"");

1735 ; 
Àn
 > 0; --len) {

1736 
c
 = *
p
++;

1737 i‡(' ' <
c
 && c <= '~') {

1738 i‡(
c
 == '\\' || c == '"') {

1739 
	`¥öãr
(
¨g
, "\\");

1741 
	`¥öãr
(
¨g
, "%c", 
c
);

1743 
c
) {

1745 
	`¥öãr
(
¨g
, "\\n");

1748 
	`¥öãr
(
¨g
, "\\r");

1751 
	`¥öãr
(
¨g
, "\\t");

1754 
	`¥öãr
(
¨g
, "\\%.3o", 
c
);

1758 
	`¥öãr
(
¨g
, "\"");

1759 
	}
}

1765 *
	gl˝_codíames
[] = {

1772 
l˝_¥öçkt
–
u_ch¨
 *
p
, 
∂í
, (*
¥öãr
Ë(*, *, ...), *
¨g
)

1774 
code
, 
id
, 
Àn
, 
ﬁí
;

1775 
u_ch¨
 *
p°¨t
, *
›ãnd
;

1776 
u_sh‹t
 
cish‹t
;

1777 
u32_t
 
cû⁄g
;

1779 i‡(
∂í
 < 
HEADERLEN
) {

1782 
p°¨t
 = 
p
;

1783 
	`GETCHAR
(
code
, 
p
);

1784 
	`GETCHAR
(
id
, 
p
);

1785 
	`GETSHORT
(
Àn
, 
p
);

1786 i‡(
Àn
 < 
HEADERLEN
 ||Üí > 
∂í
) {

1790 i‡(
code
 >1 && codê<(
l˝_codíames
) / (*)) {

1791 
	`¥öãr
(
¨g
, " %s", 
l˝_codíames
[
code
-1]);

1793 
	`¥öãr
(
¨g
, " code=0x%x", 
code
);

1795 
	`¥öãr
(
¨g
, " id=0x%x", 
id
);

1796 
Àn
 -
HEADERLEN
;

1797 
code
) {

1798 
CONFREQ
:

1799 
CONFACK
:

1800 
CONFNAK
:

1801 
CONFREJ
:

1803 
Àn
 >= 2) {

1804 
	`GETCHAR
(
code
, 
p
);

1805 
	`GETCHAR
(
ﬁí
, 
p
);

1806 
p
 -= 2;

1807 i‡(
ﬁí
 < 2 || oÀ¿> 
Àn
) {

1810 
	`¥öãr
(
¨g
, " <");

1811 
Àn
 -
ﬁí
;

1812 
›ãnd
 = 
p
 + 
ﬁí
;

1813 
code
) {

1814 
CI_MRU
:

1815 i‡(
ﬁí
 =
CILEN_SHORT
) {

1816 
p
 += 2;

1817 
	`GETSHORT
(
cish‹t
, 
p
);

1818 
	`¥öãr
(
¨g
, "mru %d", 
cish‹t
);

1821 
CI_ASYNCMAP
:

1822 i‡(
ﬁí
 =
CILEN_LONG
) {

1823 
p
 += 2;

1824 
	`GETLONG
(
cû⁄g
, 
p
);

1825 
	`¥öãr
(
¨g
, "asyncm≠ 0x%lx", 
cû⁄g
);

1828 
CI_AUTHTYPE
:

1829 i‡(
ﬁí
 >
CILEN_SHORT
) {

1830 
p
 += 2;

1831 
	`¥öãr
(
¨g
, "auth ");

1832 
	`GETSHORT
(
cish‹t
, 
p
);

1833 
cish‹t
) {

1834 
PPP_PAP
:

1835 
	`¥öãr
(
¨g
, "pap");

1837 
PPP_CHAP
:

1838 
	`¥öãr
(
¨g
, "chap");

1841 
	`¥öãr
(
¨g
, "0x%x", 
cish‹t
);

1845 
CI_QUALITY
:

1846 i‡(
ﬁí
 >
CILEN_SHORT
) {

1847 
p
 += 2;

1848 
	`¥öãr
(
¨g
, "quality ");

1849 
	`GETSHORT
(
cish‹t
, 
p
);

1850 
cish‹t
) {

1851 
PPP_LQR
:

1852 
	`¥öãr
(
¨g
, "lqr");

1855 
	`¥öãr
(
¨g
, "0x%x", 
cish‹t
);

1859 
CI_CALLBACK
:

1860 i‡(
ﬁí
 >
CILEN_CHAR
) {

1861 
p
 += 2;

1862 
	`¥öãr
(
¨g
, "callback ");

1863 
	`GETSHORT
(
cish‹t
, 
p
);

1864 
cish‹t
) {

1865 
CBCP_OPT
:

1866 
	`¥öãr
(
¨g
, "CBCP");

1869 
	`¥öãr
(
¨g
, "0x%x", 
cish‹t
);

1873 
CI_MAGICNUMBER
:

1874 i‡(
ﬁí
 =
CILEN_LONG
) {

1875 
p
 += 2;

1876 
	`GETLONG
(
cû⁄g
, 
p
);

1877 
	`¥öãr
(
¨g
, "magi¯0x%x", 
cû⁄g
);

1880 
CI_PCOMPRESSION
:

1881 i‡(
ﬁí
 =
CILEN_VOID
) {

1882 
p
 += 2;

1883 
	`¥öãr
(
¨g
, "pcomp");

1886 
CI_ACCOMPRESSION
:

1887 i‡(
ﬁí
 =
CILEN_VOID
) {

1888 
p
 += 2;

1889 
	`¥öãr
(
¨g
, "accomp");

1893 
p
 < 
›ãnd
) {

1894 
	`GETCHAR
(
code
, 
p
);

1895 
	`¥öãr
(
¨g
, " %.2x", 
code
);

1897 
	`¥öãr
(
¨g
, ">");

1901 
TERMACK
:

1902 
TERMREQ
:

1903 i‡(
Àn
 > 0 && *
p
 >= ' ' && *p < 0x7f) {

1904 
	`¥öãr
(
¨g
, " ");

1905 
	`¥öt_°rög
((*)
p
, 
Àn
, 
¥öãr
, 
¨g
);

1906 
p
 +
Àn
;

1907 
Àn
 = 0;

1911 
ECHOREQ
:

1912 
ECHOREP
:

1913 
DISCREQ
:

1914 i‡(
Àn
 >= 4) {

1915 
	`GETLONG
(
cû⁄g
, 
p
);

1916 
	`¥öãr
(
¨g
, " magic=0x%x", 
cû⁄g
);

1917 
p
 += 4;

1918 
Àn
 -= 4;

1924 ; 
Àn
 > 0; --len) {

1925 
	`GETCHAR
(
code
, 
p
);

1926 
	`¥öãr
(
¨g
, " %.2x", 
code
);

1929  ()(
p
 - 
p°¨t
);

1930 
	}
}

1937 
	$L˝LökFaûuª
 (
fsm
 *
f
)

1939 i‡(
f
->
°©e
 =
LS_OPENED
) {

1940 
	`LCPDEBUG
(
LOG_INFO
, ("Nÿª•⁄£Åÿ%dÉcho-ªque°s\n", 
l˝_echos_≥ndög
));

1941 
	`LCPDEBUG
(
LOG_NOTICE
, ("SerialÜinkáppearsÅo be disconnected.\n"));

1942 
	`l˝_˛o£
(
f
->
unô
, "PeerÇotÑesponding");

1944 
	}
}

1950 
	$L˝EchoCheck
 (
fsm
 *
f
)

1952 
	`L˝SídEchoReque°
 (
f
);

1957 
	`LWIP_ASSERT
("l˝_echo_timî_ru¬ög =0", 
l˝_echo_timî_ru¬ög
 == 0);

1959 
	`TIMEOUT
 (
L˝EchoTimeout
, 
f
, 
l˝_echo_öãrvÆ
);

1960 
l˝_echo_timî_ru¬ög
 = 1;

1961 
	}
}

1967 
	$L˝EchoTimeout
 (*
¨g
)

1969 i‡(
l˝_echo_timî_ru¬ög
 != 0) {

1970 
l˝_echo_timî_ru¬ög
 = 0;

1971 
	`L˝EchoCheck
 ((
fsm
 *Ë
¨g
);

1973 
	}
}

1979 
	$l˝_ª˚ived_echo_ª∂y
 (
fsm
 *
f
, 
id
, 
u_ch¨
 *
öp
, 
Àn
)

1981 
u32_t
 
magic
;

1983 
	`LWIP_UNUSED_ARG
(
id
);

1986 i‡(
Àn
 < 4) {

1987 
	`LCPDEBUG
(
LOG_WARNING
, ("l˝:Ñe˚ived sh‹àEcho-Rïly,Üígth %d\n", 
Àn
));

1990 
	`GETLONG
(
magic
, 
öp
);

1991 i‡(
l˝_gŸ›ti⁄s
[
f
->
unô
].
√g_magi˙umbî
 && 
magic
 =l˝_gŸ›ti⁄s[f->unô].
magi˙umbî
) {

1992 
	`LCPDEBUG
(
LOG_WARNING
, ("appearÅo haveÑeceived our ownÉcho-reply!\n"));

1997 
l˝_echos_≥ndög
 = 0;

1998 
	}
}

2004 
	$L˝SídEchoReque°
 (
fsm
 *
f
)

2006 
u32_t
 
l˝_magic
;

2007 
u_ch¨
 
pkt
[4], *
pkç
;

2012 i‡(
l˝_echo_Áûs
 != 0) {

2013 i‡(
l˝_echos_≥ndög
 >
l˝_echo_Áûs
) {

2014 
	`L˝LökFaûuª
(
f
);

2015 
l˝_echos_≥ndög
 = 0;

2022 i‡(
f
->
°©e
 =
LS_OPENED
) {

2023 
l˝_magic
 = 
l˝_gŸ›ti⁄s
[
f
->
unô
].
magi˙umbî
;

2024 
pkç
 = 
pkt
;

2025 
	`PUTLONG
(
l˝_magic
, 
pkç
);

2026 
	`fsm_sd©a
(
f
, 
ECHOREQ
, (
u_ch¨
)(
l˝_echo_numbî
++ & 0xFF), 
pkt
, ()(
pkç
 -Ökt));

2027 ++
l˝_echos_≥ndög
;

2029 
	}
}

2036 
	$l˝_echo_lowîup
 (
unô
)

2038 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

2041 
l˝_echos_≥ndög
 = 0;

2042 
l˝_echo_numbî
 = 0;

2043 
l˝_echo_timî_ru¬ög
 = 0;

2046 i‡(
l˝_echo_öãrvÆ
 != 0) {

2047 
	`L˝EchoCheck
 (
f
);

2049 
	}
}

2056 
	$l˝_echo_lowîdown
 (
unô
)

2058 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

2060 i‡(
l˝_echo_timî_ru¬ög
 != 0) {

2061 
	`UNTIMEOUT
 (
L˝EchoTimeout
, 
f
);

2062 
l˝_echo_timî_ru¬ög
 = 0;

2064 
	}
}

	@netif/ppp/lcp.h

54 #i‚de‡
LCP_H


55 
	#LCP_H


	)

59 
	#CI_MRU
 1

	)

60 
	#CI_ASYNCMAP
 2

	)

61 
	#CI_AUTHTYPE
 3

	)

62 
	#CI_QUALITY
 4

	)

63 
	#CI_MAGICNUMBER
 5

	)

64 
	#CI_PCOMPRESSION
 7

	)

65 
	#CI_ACCOMPRESSION
 8

	)

66 
	#CI_CALLBACK
 13

	)

67 
	#CI_MRRU
 17

	)

68 
	#CI_SSNHF
 18

	)

69 
	#CI_EPDISC
 19

	)

74 
	#PROTREJ
 8

	)

75 
	#ECHOREQ
 9

	)

76 
	#ECHOREP
 10

	)

77 
	#DISCREQ
 11

	)

78 
	#CBCP_OPT
 6

	)

83 
	sl˝_›ti⁄s
 {

84 
u_öt
 
	m∑ssive
 : 1;

85 
u_öt
 
	msûít
 : 1;

86 
u_öt
 
	mª°¨t
 : 1;

87 
u_öt
 
	m√g_mru
 : 1;

88 
u_öt
 
	m√g_asyncm≠
 : 1;

89 
u_öt
 
	m√g_u∑p
 : 1;

90 
u_öt
 
	m√g_ch≠
 : 1;

91 
u_öt
 
	m√g_magi˙umbî
 : 1;

92 
u_öt
 
	m√g_pcom¥essi⁄
 : 1;

93 
u_öt
 
	m√g_accom¥essi⁄
 : 1;

94 
u_öt
 
	m√g_lqr
 : 1;

95 
u_öt
 
	m√g_cb˝
 : 1;

96 #ifde‡
PPP_MULTILINK


97 
u_öt
 
	m√g_mºu
 : 1;

98 
u_öt
 
	m√g_s¢hf
 : 1;

99 
u_öt
 
	m√g_ídpoöt
 : 1;

101 
u_sh‹t
 
	mmru
;

102 #ifde‡
PPP_MULTILINK


103 
u_sh‹t
 
	mmºu
;

105 
u_ch¨
 
	mch≠_mdty≥
;

106 
u32_t
 
	masyncm≠
;

107 
u32_t
 
	mmagi˙umbî
;

108 
	mnumlo›s
;

109 
u32_t
 
	mlqr_≥riod
;

110 #ifde‡
PPP_MULTILINK


111 
ïdisc
 
	mídpoöt
;

113 } 
	tl˝_›ti⁄s
;

119 
	mPHASE_DEAD
 = 0,

120 
	mPHASE_INITIALIZE
,

121 
	mPHASE_ESTABLISH
,

122 
	mPHASE_AUTHENTICATE
,

123 
	mPHASE_CALLBACK
,

124 
	mPHASE_NETWORK
,

125 
	mPHASE_TERMINATE


126 } 
	tLökPha£
;

130 
LökPha£
 
l˝_pha£
[
NUM_PPP
];

131 
l˝_›ti⁄s
 
l˝_w™t›ti⁄s
[];

132 
l˝_›ti⁄s
 
l˝_gŸ›ti⁄s
[];

133 
l˝_›ti⁄s
 
l˝_Ælow›ti⁄s
[];

134 
l˝_›ti⁄s
 
l˝_his›ti⁄s
[];

135 
ext_accm
 
xmô_accm
[];

138 
l˝_öô
 ();

139 
l˝_›í
 ();

140 
l˝_˛o£
 (, *);

141 
l˝_lowîup
 ();

142 
l˝_lowîdown
();

143 
l˝_•rŸªj
 (, 
u_ch¨
 *, );

145 
¥Ÿít
 
l˝_¥Ÿít
;

149 
	#DEFLOOPBACKFAIL
 10

	)

	@netif/ppp/magic.c

52 
	~"lwù/›t.h
"

54 #i‡
PPP_SUPPORT


56 
	~"µp.h
"

57 
	~"øndm.h
"

58 
	~"magic.h
"

67 
	$magicInô
()

70 
	}
}

75 
u32_t
 
	$magic
()

77  
	`avR™dom
();

78 
	}
}

	@netif/ppp/magic.h

54 #i‚de‡
MAGIC_H


55 
	#MAGIC_H


	)

58 
magicInô
();

61 
u32_t
 
magic
();

	@netif/ppp/md5.c

34 
	~"lwù/›t.h
"

36 #i‡
PPP_SUPPORT


38 #i‡
CHAP_SUPPORT
 || 
MD5_SUPPORT


40 
	~"µp.h
"

41 
	~"µpdebug.h
"

43 
	~"md5.h
"

45 
	~<°rög.h
>

59 
Tønsf‹m
 (
u32_t
 *
buf
, u32_à*
ö
);

61 
	gPADDING
[64] = {

73 
	#F
(
x
, 
y
, 
z
Ë(((xË& (y)Ë| ((~xË& (z)))

	)

74 
	#G
(
x
, 
y
, 
z
Ë(((xË& (z)Ë| ((yË& (~z)))

	)

75 
	#H
(
x
, 
y
, 
z
Ë((xË^ (yË^ (z))

	)

76 
	#I
(
x
, 
y
, 
z
Ë((yË^ ((xË| (~z)))

	)

79 
	#ROTATE_LEFT
(
x
, 
n
Ë(((xË<< (n)Ë| ((xË>> (32-“))))

	)

83 
	#FF
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) \

84 {(
a
Ë+
	`F
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
u32_t
)(
ac
); \

85 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

86 (
a
Ë+(
b
); \

87 }

	)

88 
	#GG
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) \

89 {(
a
Ë+
	`G
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
u32_t
)(
ac
); \

90 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

91 (
a
Ë+(
b
); \

92 }

	)

93 
	#HH
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) \

94 {(
a
Ë+
	`H
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
u32_t
)(
ac
); \

95 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

96 (
a
Ë+(
b
); \

97 }

	)

98 
	#II
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) \

99 {(
a
Ë+
	`I
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
u32_t
)(
ac
); \

100 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

101 (
a
Ë+(
b
); \

102 }

	)

104 #ifde‡
__STDC__


105 
	#UL
(
x
Ëx##
UL


	)

107 #ifde‡
WIN32


108 
	#UL
(
x
Ëx##
UL


	)

110 
	#UL
(
x
Ë
	)
x

118 
	$MD5Inô
 (
MD5_CTX
 *
mdC⁄ãxt
)

120 
mdC⁄ãxt
->
i
[0] = mdC⁄ãxt->i[1] = (
u32_t
)0;

123 
mdC⁄ãxt
->
buf
[0] = (
u32_t
)0x67452301UL;

124 
mdC⁄ãxt
->
buf
[1] = (
u32_t
)0xefcdab89UL;

125 
mdC⁄ãxt
->
buf
[2] = (
u32_t
)0x98badcfeUL;

126 
mdC⁄ãxt
->
buf
[3] = (
u32_t
)0x10325476UL;

127 
	}
}

134 
	$MD5Upd©e
(
MD5_CTX
 *
mdC⁄ãxt
, *
öBuf
, 
öLí
)

136 
u32_t
 
ö
[16];

137 
mdi
;

138 
i
, 
ii
;

141 
	`PPPDEBUG
(
LOG_INFO
, ("MD5Upd©e: %u:%.*H\n", 
öLí
, 
	`LWIP_MIN
(öLí, 20Ë* 2, 
öBuf
));

142 
	`PPPDEBUG
(
LOG_INFO
, ("MD5Upd©e: %u:%s\n", 
öLí
, 
öBuf
));

146 
mdi
 = ()((
mdC⁄ãxt
->
i
[0] >> 3) & 0x3F);

149 i‡((
mdC⁄ãxt
->
i
[0] + ((
u32_t
)
öLí
 << 3)) < mdContext->i[0]) {

150 
mdC⁄ãxt
->
i
[1]++;

152 
mdC⁄ãxt
->
i
[0] +((
u32_t
)
öLí
 << 3);

153 
mdC⁄ãxt
->
i
[1] +((
u32_t
)
öLí
 >> 29);

155 
öLí
--) {

157 
mdC⁄ãxt
->
ö
[
mdi
++] = *
öBuf
++;

160 i‡(
mdi
 == 0x40) {

161 
i
 = 0, 
ii
 = 0; i < 16; i++, ii += 4) {

162 
ö
[
i
] = (((
u32_t
)
mdC⁄ãxt
->ö[
ii
+3]) << 24) |

163 (((
u32_t
)
mdC⁄ãxt
->
ö
[
ii
+2]) << 16) |

164 (((
u32_t
)
mdC⁄ãxt
->
ö
[
ii
+1]) << 8) |

165 ((
u32_t
)
mdC⁄ãxt
->
ö
[
ii
]);

167 
	`Tønsf‹m
 (
mdC⁄ãxt
->
buf
, 
ö
);

168 
mdi
 = 0;

171 
	}
}

177 
	$MD5FöÆ
 (
hash
[], 
MD5_CTX
 *
mdC⁄ãxt
)

179 
u32_t
 
ö
[16];

180 
mdi
;

181 
i
, 
ii
;

182 
∑dLí
;

185 
ö
[14] = 
mdC⁄ãxt
->
i
[0];

186 
ö
[15] = 
mdC⁄ãxt
->
i
[1];

189 
mdi
 = ()((
mdC⁄ãxt
->
i
[0] >> 3) & 0x3F);

192 
∑dLí
 = (
mdi
 < 56) ? (56 - mdi) : (120 - mdi);

193 
	`MD5Upd©e
 (
mdC⁄ãxt
, 
PADDING
, 
∑dLí
);

196 
i
 = 0, 
ii
 = 0; i < 14; i++, ii += 4) {

197 
ö
[
i
] = (((
u32_t
)
mdC⁄ãxt
->ö[
ii
+3]) << 24) |

198 (((
u32_t
)
mdC⁄ãxt
->
ö
[
ii
+2]) << 16) |

199 (((
u32_t
)
mdC⁄ãxt
->
ö
[
ii
+1]) << 8) |

200 ((
u32_t
)
mdC⁄ãxt
->
ö
[
ii
]);

202 
	`Tønsf‹m
 (
mdC⁄ãxt
->
buf
, 
ö
);

205 
i
 = 0, 
ii
 = 0; i < 4; i++, ii += 4) {

206 
mdC⁄ãxt
->
dige°
[
ii
] = ()(mdC⁄ãxt->
buf
[
i
] & 0xFF);

207 
mdC⁄ãxt
->
dige°
[
ii
+1] =

208 ()((
mdC⁄ãxt
->
buf
[
i
] >> 8) & 0xFF);

209 
mdC⁄ãxt
->
dige°
[
ii
+2] =

210 ()((
mdC⁄ãxt
->
buf
[
i
] >> 16) & 0xFF);

211 
mdC⁄ãxt
->
dige°
[
ii
+3] =

212 ()((
mdC⁄ãxt
->
buf
[
i
] >> 24) & 0xFF);

214 
	`SMEMCPY
(
hash
, 
mdC⁄ãxt
->
dige°
, 16);

215 
	}
}

220 
	$Tønsf‹m
 (
u32_t
 *
buf
, u32_à*
ö
)

222 
u32_t
 
a
 = 
buf
[0], 
b
 = buf[1], 
c
 = buf[2], 
d
 = buf[3];

225 
	#S11
 7

	)

226 
	#S12
 12

	)

227 
	#S13
 17

	)

228 
	#S14
 22

	)

229 
	`FF
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 0], 
S11
, 
	`UL
(3614090360));

230 
	`FF
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 1], 
S12
, 
	`UL
(3905402710));

231 
	`FF
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 2], 
S13
, 
	`UL
( 606105819));

232 
	`FF
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 3], 
S14
, 
	`UL
(3250441966));

233 
	`FF
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 4], 
S11
, 
	`UL
(4118548399));

234 
	`FF
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 5], 
S12
, 
	`UL
(1200080426));

235 
	`FF
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 6], 
S13
, 
	`UL
(2821735955));

236 
	`FF
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 7], 
S14
, 
	`UL
(4249261313));

237 
	`FF
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 8], 
S11
, 
	`UL
(1770035416));

238 
	`FF
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 9], 
S12
, 
	`UL
(2336552879));

239 
	`FF
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[10], 
S13
, 
	`UL
(4294925233));

240 
	`FF
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[11], 
S14
, 
	`UL
(2304563134));

241 
	`FF
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[12], 
S11
, 
	`UL
(1804603682));

242 
	`FF
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[13], 
S12
, 
	`UL
(4254626195));

243 
	`FF
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[14], 
S13
, 
	`UL
(2792965006));

244 
	`FF
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[15], 
S14
, 
	`UL
(1236535329));

247 
	#S21
 5

	)

248 
	#S22
 9

	)

249 
	#S23
 14

	)

250 
	#S24
 20

	)

251 
	`GG
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 1], 
S21
, 
	`UL
(4129170786));

252 
	`GG
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 6], 
S22
, 
	`UL
(3225465664));

253 
	`GG
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[11], 
S23
, 
	`UL
( 643717713));

254 
	`GG
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 0], 
S24
, 
	`UL
(3921069994));

255 
	`GG
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 5], 
S21
, 
	`UL
(3593408605));

256 
	`GG
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[10], 
S22
, 
	`UL
( 38016083));

257 
	`GG
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[15], 
S23
, 
	`UL
(3634488961));

258 
	`GG
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 4], 
S24
, 
	`UL
(3889429448));

259 
	`GG
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 9], 
S21
, 
	`UL
( 568446438));

260 
	`GG
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[14], 
S22
, 
	`UL
(3275163606));

261 
	`GG
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 3], 
S23
, 
	`UL
(4107603335));

262 
	`GG
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 8], 
S24
, 
	`UL
(1163531501));

263 
	`GG
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[13], 
S21
, 
	`UL
(2850285829));

264 
	`GG
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 2], 
S22
, 
	`UL
(4243563512));

265 
	`GG
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 7], 
S23
, 
	`UL
(1735328473));

266 
	`GG
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[12], 
S24
, 
	`UL
(2368359562));

269 
	#S31
 4

	)

270 
	#S32
 11

	)

271 
	#S33
 16

	)

272 
	#S34
 23

	)

273 
	`HH
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 5], 
S31
, 
	`UL
(4294588738));

274 
	`HH
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 8], 
S32
, 
	`UL
(2272392833));

275 
	`HH
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[11], 
S33
, 
	`UL
(1839030562));

276 
	`HH
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[14], 
S34
, 
	`UL
(4259657740));

277 
	`HH
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 1], 
S31
, 
	`UL
(2763975236));

278 
	`HH
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 4], 
S32
, 
	`UL
(1272893353));

279 
	`HH
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 7], 
S33
, 
	`UL
(4139469664));

280 
	`HH
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[10], 
S34
, 
	`UL
(3200236656));

281 
	`HH
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[13], 
S31
, 
	`UL
( 681279174));

282 
	`HH
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 0], 
S32
, 
	`UL
(3936430074));

283 
	`HH
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 3], 
S33
, 
	`UL
(3572445317));

284 
	`HH
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 6], 
S34
, 
	`UL
( 76029189));

285 
	`HH
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 9], 
S31
, 
	`UL
(3654602809));

286 
	`HH
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[12], 
S32
, 
	`UL
(3873151461));

287 
	`HH
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[15], 
S33
, 
	`UL
( 530742520));

288 
	`HH
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 2], 
S34
, 
	`UL
(3299628645));

291 
	#S41
 6

	)

292 
	#S42
 10

	)

293 
	#S43
 15

	)

294 
	#S44
 21

	)

295 
	`II
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 0], 
S41
, 
	`UL
(4096336452));

296 
	`II
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 7], 
S42
, 
	`UL
(1126891415));

297 
	`II
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[14], 
S43
, 
	`UL
(2878612391));

298 
	`II
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 5], 
S44
, 
	`UL
(4237533241));

299 
	`II
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[12], 
S41
, 
	`UL
(1700485571));

300 
	`II
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 3], 
S42
, 
	`UL
(2399980690));

301 
	`II
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[10], 
S43
, 
	`UL
(4293915773));

302 
	`II
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 1], 
S44
, 
	`UL
(2240044497));

303 
	`II
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 8], 
S41
, 
	`UL
(1873313359));

304 
	`II
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[15], 
S42
, 
	`UL
(4264355552));

305 
	`II
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 6], 
S43
, 
	`UL
(2734768916));

306 
	`II
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[13], 
S44
, 
	`UL
(1309151649));

307 
	`II
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 4], 
S41
, 
	`UL
(4149444226));

308 
	`II
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[11], 
S42
, 
	`UL
(3174756917));

309 
	`II
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 2], 
S43
, 
	`UL
( 718787259));

310 
	`II
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 9], 
S44
, 
	`UL
(3951481745));

312 
buf
[0] +
a
;

313 
buf
[1] +
b
;

314 
buf
[2] +
c
;

315 
buf
[3] +
d
;

316 
	}
}

	@netif/ppp/md5.h

40 #i‚de‡
MD5_H


41 
	#MD5_H


	)

45 
u32_t
 
	mi
[2];

46 
u32_t
 
	mbuf
[4];

47 
	mö
[64];

48 
	mdige°
[16];

49 } 
	tMD5_CTX
;

51 
MD5Inô
 ( 
MD5_CTX
 *
mdC⁄ãxt
);

52 
MD5Upd©e
–
MD5_CTX
 *
mdC⁄ãxt
, *
öBuf
, 
öLí
);

53 
MD5FöÆ
 ( 
hash
[], 
MD5_CTX
 *
mdC⁄ãxt
);

	@netif/ppp/pap.c

52 
	~"lwù/›t.h
"

54 #i‡
PPP_SUPPORT


56 #i‡
PAP_SUPPORT


58 
	~"µp.h
"

59 
	~"µpdebug.h
"

61 
	~"auth.h
"

62 
	~"∑p.h
"

64 
	~<°rög.h
>

67 
boﬁ
 
	ghide_∑ssw‹d
 = 1;

72 
›ti⁄_t
 
	g∑p_›ti⁄_li°
[] = {

73 { "hide-∑ssw‹d", 
o_boﬁ
, &
hide_∑ssw‹d
,

75 { "show-∑ssw‹d", 
o_boﬁ
, &
hide_∑ssw‹d
,

77 { "∑p-ª°¨t", 
o_öt
, &
u∑p
[0].
us_timeouâime
,

79 { "∑p-max-authªq", 
o_öt
, &
u∑p
[0].
us_maxå™smôs
,

81 { "∑p-timeout", 
o_öt
, &
u∑p
[0].
us_ªqtimeout
,

83 { 
NULL
 }

90 
u∑p_öô
 ();

91 
u∑p_lowîup
 ();

92 
u∑p_lowîdown
 ();

93 
u∑p_öput
 (, 
u_ch¨
 *, );

94 
u∑p_¥Ÿªj
 ();

95 #i‡
PPP_ADDITIONAL_CALLBACKS


96 
u∑p_¥öçkt
 (
u_ch¨
 *, , (*)(*, *, ...), *);

99 
¥Ÿít
 
∑p_¥Ÿít
 = {

100 
PPP_PAP
,

101 
u∑p_öô
,

102 
u∑p_öput
,

103 
u∑p_¥Ÿªj
,

104 
u∑p_lowîup
,

105 
u∑p_lowîdown
,

106 
NULL
,

107 
NULL
,

108 #i‡
PPP_ADDITIONAL_CALLBACKS


109 
u∑p_¥öçkt
,

110 
NULL
,

114 #i‡
PPP_ADDITIONAL_CALLBACKS


115 
NULL
,

116 
NULL
,

117 
NULL


119 
	}
};

121 
u∑p_°©e
 
	gu∑p
[
NUM_PPP
];

123 
u∑p_timeout
 (*);

124 
u∑p_ªqtimeout
(*);

125 
u∑p_øuthªq
 (
u∑p_°©e
 *, 
u_ch¨
 *, u_char, );

126 
u∑p_øuthack
 (
u∑p_°©e
 *, 
u_ch¨
 *, , );

127 
u∑p_øuth«k
 (
u∑p_°©e
 *, 
u_ch¨
 *, , );

128 
u∑p_ßuthªq
 (
u∑p_°©e
 *);

129 
u∑p_§e•
 (
u∑p_°©e
 *, 
u_ch¨
, u_char, *, );

136 
	$u∑p_öô
(
unô
)

138 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

140 
	`UPAPDEBUG
(
LOG_INFO
, ("u∑p_öô: %d\n", 
unô
));

141 
u
->
us_unô
 = 
unô
;

142 
u
->
us_u£r
 = 
NULL
;

143 
u
->
us_u£æí
 = 0;

144 
u
->
us_∑sswd
 = 
NULL
;

145 
u
->
us_∑sswdÀn
 = 0;

146 
u
->
us_˛õ¡°©e
 = 
UPAPCS_INITIAL
;

147 
u
->
us_£rvî°©e
 = 
UPAPSS_INITIAL
;

148 
u
->
us_id
 = 0;

149 
u
->
us_timeouâime
 = 
UPAP_DEFTIMEOUT
;

150 
u
->
us_maxå™smôs
 = 10;

151 
u
->
us_ªqtimeout
 = 
UPAP_DEFREQTIME
;

152 
	}
}

160 
	$u∑p_authwôh≥î
(
unô
, *
u£r
, *
∑ssw‹d
)

162 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

164 
	`UPAPDEBUG
(
LOG_INFO
, ("upap_authwithpeer: %d user=%sÖassword=%s s=%d\n",

165 
unô
, 
u£r
, 
∑ssw‹d
, 
u
->
us_˛õ¡°©e
));

168 
u
->
us_u£r
 = 
u£r
;

169 
u
->
us_u£æí
 = ()
	`°æí
(
u£r
);

170 
u
->
us_∑sswd
 = 
∑ssw‹d
;

171 
u
->
us_∑sswdÀn
 = ()
	`°æí
(
∑ssw‹d
);

173 
u
->
us_å™smôs
 = 0;

176 i‡(
u
->
us_˛õ¡°©e
 =
UPAPCS_INITIAL
 ||

177 
u
->
us_˛õ¡°©e
 =
UPAPCS_PENDING
) {

178 
u
->
us_˛õ¡°©e
 = 
UPAPCS_PENDING
;

182 
	`u∑p_ßuthªq
(
u
);

183 
	}
}

192 
	$u∑p_auth≥î
(
unô
)

194 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

197 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_INITIAL
 ||

198 
u
->
us_£rvî°©e
 =
UPAPSS_PENDING
) {

199 
u
->
us_£rvî°©e
 = 
UPAPSS_PENDING
;

203 
u
->
us_£rvî°©e
 = 
UPAPSS_LISTEN
;

204 i‡(
u
->
us_ªqtimeout
 > 0) {

205 
	`TIMEOUT
(
u∑p_ªqtimeout
, 
u
, u->
us_ªqtimeout
);

207 
	}
}

213 
	$u∑p_timeout
(*
¨g
)

215 
u∑p_°©e
 *
u
 = (u∑p_°©ê*Ë
¨g
;

217 
	`UPAPDEBUG
(
LOG_INFO
, ("upap_timeout: %dÅimeout %dÉxpired s=%d\n",

218 
u
->
us_unô
, u->
us_timeouâime
, u->
us_˛õ¡°©e
));

220 i‡(
u
->
us_˛õ¡°©e
 !
UPAPCS_AUTHREQ
) {

221 
	`UPAPDEBUG
(
LOG_INFO
, ("upap_timeout:Çot in AUTHREQ state!\n"));

225 i‡(
u
->
us_å™smôs
 >u->
us_maxå™smôs
) {

227 
	`UPAPDEBUG
(
LOG_ERR
, ("NoÑesponseÅo PAPáuthenticate-requests\n"));

228 
u
->
us_˛õ¡°©e
 = 
UPAPCS_BADAUTH
;

229 
	`auth_wôh≥î_Áû
(
u
->
us_unô
, 
PPP_PAP
);

233 
	`u∑p_ßuthªq
(
u
);

234 
	}
}

241 
	$u∑p_ªqtimeout
(*
¨g
)

243 
u∑p_°©e
 *
u
 = (u∑p_°©ê*Ë
¨g
;

245 i‡(
u
->
us_£rvî°©e
 !
UPAPSS_LISTEN
) {

249 
	`auth_≥î_Áû
(
u
->
us_unô
, 
PPP_PAP
);

250 
u
->
us_£rvî°©e
 = 
UPAPSS_BADAUTH
;

251 
	}
}

260 
	$u∑p_lowîup
(
unô
)

262 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

264 
	`UPAPDEBUG
(
LOG_INFO
, ("u∑p_lowîup: inô %d clõ¡°©ês=%d\n", 
unô
, 
u
->
us_˛õ¡°©e
));

266 i‡(
u
->
us_˛õ¡°©e
 =
UPAPCS_INITIAL
) {

267 
u
->
us_˛õ¡°©e
 = 
UPAPCS_CLOSED
;

268 } i‡(
u
->
us_˛õ¡°©e
 =
UPAPCS_PENDING
) {

269 
	`u∑p_ßuthªq
(
u
);

273 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_INITIAL
) {

274 
u
->
us_£rvî°©e
 = 
UPAPSS_CLOSED
;

275 } i‡(
u
->
us_£rvî°©e
 =
UPAPSS_PENDING
) {

276 
u
->
us_£rvî°©e
 = 
UPAPSS_LISTEN
;

277 i‡(
u
->
us_ªqtimeout
 > 0) {

278 
	`TIMEOUT
(
u∑p_ªqtimeout
, 
u
, u->
us_ªqtimeout
);

281 
	}
}

290 
	$u∑p_lowîdown
(
unô
)

292 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

294 
	`UPAPDEBUG
(
LOG_INFO
, ("u∑p_lowîdown: %d s=%d\n", 
unô
, 
u
->
us_˛õ¡°©e
));

296 i‡(
u
->
us_˛õ¡°©e
 =
UPAPCS_AUTHREQ
) {

297 
	`UNTIMEOUT
(
u∑p_timeout
, 
u
);

299 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_LISTEN
 && u->
us_ªqtimeout
 > 0) {

300 
	`UNTIMEOUT
(
u∑p_ªqtimeout
, 
u
);

303 
u
->
us_˛õ¡°©e
 = 
UPAPCS_INITIAL
;

304 
u
->
us_£rvî°©e
 = 
UPAPSS_INITIAL
;

305 
	}
}

314 
	$u∑p_¥Ÿªj
(
unô
)

316 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

318 i‡(
u
->
us_˛õ¡°©e
 =
UPAPCS_AUTHREQ
) {

319 
	`UPAPDEBUG
(
LOG_ERR
, ("PAPáuthentication failed dueÅoÖrotocol-reject\n"));

320 
	`auth_wôh≥î_Áû
(
unô
, 
PPP_PAP
);

322 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_LISTEN
) {

323 
	`UPAPDEBUG
(
LOG_ERR
, ("PAPáuthentication ofÖeer failed (protocol-reject)\n"));

324 
	`auth_≥î_Áû
(
unô
, 
PPP_PAP
);

326 
	`u∑p_lowîdown
(
unô
);

327 
	}
}

334 
	$u∑p_öput
(
unô
, 
u_ch¨
 *
ö∑ckë
, 
l
)

336 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

337 
u_ch¨
 *
öp
;

338 
u_ch¨
 
code
, 
id
;

339 
Àn
;

345 
öp
 = 
ö∑ckë
;

346 i‡(
l
 < ()
UPAP_HEADERLEN
) {

347 
	`UPAPDEBUG
(
LOG_INFO
, ("pap_input:Ñcvd short header.\n"));

350 
	`GETCHAR
(
code
, 
öp
);

351 
	`GETCHAR
(
id
, 
öp
);

352 
	`GETSHORT
(
Àn
, 
öp
);

353 i‡(
Àn
 < ()
UPAP_HEADERLEN
) {

354 
	`UPAPDEBUG
(
LOG_INFO
, ("pap_input:Ñcvd illegalÜength.\n"));

357 i‡(
Àn
 > 
l
) {

358 
	`UPAPDEBUG
(
LOG_INFO
, ("pap_input:Ñcvd shortÖacket.\n"));

361 
Àn
 -
UPAP_HEADERLEN
;

366 
code
) {

367 
UPAP_AUTHREQ
:

368 
	`u∑p_øuthªq
(
u
, 
öp
, 
id
, 
Àn
);

371 
UPAP_AUTHACK
:

372 
	`u∑p_øuthack
(
u
, 
öp
, 
id
, 
Àn
);

375 
UPAP_AUTHNAK
:

376 
	`u∑p_øuth«k
(
u
, 
öp
, 
id
, 
Àn
);

380 
	`UPAPDEBUG
(
LOG_INFO
, ("∑p_öput: UNHANDLED deÁu…: code: %d, id: %d,Üí: %d.\n", 
code
, 
id
, 
Àn
));

383 
	}
}

390 
	$u∑p_øuthªq
(
u∑p_°©e
 *
u
, 
u_ch¨
 *
öp
, u_ch¨ 
id
, 
Àn
)

392 
u_ch¨
 
ru£æí
, 
ΩasswdÀn
;

393 *
ru£r
, *
Ωasswd
;

394 
u_ch¨
 
ªtcode
;

395 *
msg
;

396 
msgÀn
;

398 
	`UPAPDEBUG
(
LOG_INFO
, ("∑p_øuth: Rcvd id %d.\n", 
id
));

400 i‡(
u
->
us_£rvî°©e
 < 
UPAPSS_LISTEN
) {

408 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_OPEN
) {

409 
	`u∑p_§e•
(
u
, 
UPAP_AUTHACK
, 
id
, "", 0);

412 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_BADAUTH
) {

413 
	`u∑p_§e•
(
u
, 
UPAP_AUTHNAK
, 
id
, "", 0);

420 i‡(
Àn
 < () (
u_ch¨
)) {

421 
	`UPAPDEBUG
(
LOG_INFO
, ("pap_rauth:Ñcvd shortÖacket.\n"));

424 
	`GETCHAR
(
ru£æí
, 
öp
);

425 
Àn
 - (
u_ch¨
Ë+ 
ru£æí
 +  (u_char);

426 i‡(
Àn
 < 0) {

427 
	`UPAPDEBUG
(
LOG_INFO
, ("pap_rauth:Ñcvd shortÖacket.\n"));

430 
ru£r
 = (*Ë
öp
;

431 
	`INCPTR
(
ru£æí
, 
öp
);

432 
	`GETCHAR
(
ΩasswdÀn
, 
öp
);

433 i‡(
Àn
 < 
ΩasswdÀn
) {

434 
	`UPAPDEBUG
(
LOG_INFO
, ("pap_rauth:Ñcvd shortÖacket.\n"));

437 
Ωasswd
 = (*Ë
öp
;

442 
ªtcode
 = 
	`check_∑sswd
(
u
->
us_unô
, 
ru£r
, 
ru£æí
, 
Ωasswd
, 
ΩasswdÀn
, &
msg
, &
msgÀn
);

444 
	`BZERO
(
Ωasswd
, 
ΩasswdÀn
);

446 
	`u∑p_§e•
(
u
, 
ªtcode
, 
id
, 
msg
, 
msgÀn
);

448 i‡(
ªtcode
 =
UPAP_AUTHACK
) {

449 
u
->
us_£rvî°©e
 = 
UPAPSS_OPEN
;

450 
	`auth_≥î_suc˚ss
(
u
->
us_unô
, 
PPP_PAP
, 
ru£r
, 
ru£æí
);

452 
u
->
us_£rvî°©e
 = 
UPAPSS_BADAUTH
;

453 
	`auth_≥î_Áû
(
u
->
us_unô
, 
PPP_PAP
);

456 i‡(
u
->
us_ªqtimeout
 > 0) {

457 
	`UNTIMEOUT
(
u∑p_ªqtimeout
, 
u
);

459 
	}
}

466 
	$u∑p_øuthack
(
u∑p_°©e
 *
u
, 
u_ch¨
 *
öp
, 
id
, 
Àn
)

468 
u_ch¨
 
msgÀn
;

469 *
msg
;

471 
	`LWIP_UNUSED_ARG
(
id
);

473 
	`UPAPDEBUG
(
LOG_INFO
, ("∑p_øuthack: Rcvd id %d s=%d\n", 
id
, 
u
->
us_˛õ¡°©e
));

475 i‡(
u
->
us_˛õ¡°©e
 !
UPAPCS_AUTHREQ
) {

476 
	`UPAPDEBUG
(
LOG_INFO
, ("pap_rauthack: us_clientstate != UPAPCS_AUTHREQ\n"));

483 i‡(
Àn
 < () (
u_ch¨
)) {

484 
	`UPAPDEBUG
(
LOG_INFO
, ("pap_rauthack: ignoring missing msg-length.\n"));

486 
	`GETCHAR
(
msgÀn
, 
öp
);

487 i‡(
msgÀn
 > 0) {

488 
Àn
 - (
u_ch¨
);

489 i‡(
Àn
 < 
msgÀn
) {

490 
	`UPAPDEBUG
(
LOG_INFO
, ("pap_rauthack:Ñcvd shortÖacket.\n"));

493 
msg
 = (*Ë
öp
;

494 
	`PRINTMSG
(
msg
, 
msgÀn
);

497 
	`UNTIMEOUT
(
u∑p_timeout
, 
u
);

498 
u
->
us_˛õ¡°©e
 = 
UPAPCS_OPEN
;

500 
	`auth_wôh≥î_suc˚ss
(
u
->
us_unô
, 
PPP_PAP
);

501 
	}
}

508 
	$u∑p_øuth«k
(
u∑p_°©e
 *
u
, 
u_ch¨
 *
öp
, 
id
, 
Àn
)

510 
u_ch¨
 
msgÀn
;

511 *
msg
;

513 
	`LWIP_UNUSED_ARG
(
id
);

515 
	`UPAPDEBUG
(
LOG_INFO
, ("∑p_øuth«k: Rcvd id %d s=%d\n", 
id
, 
u
->
us_˛õ¡°©e
));

517 i‡(
u
->
us_˛õ¡°©e
 !
UPAPCS_AUTHREQ
) {

524 i‡(
Àn
 <  (
u_ch¨
)) {

525 
	`UPAPDEBUG
(
LOG_INFO
, ("pap_rauthnak: ignoring missing msg-length.\n"));

527 
	`GETCHAR
(
msgÀn
, 
öp
);

528 if(
msgÀn
 > 0) {

529 
Àn
 - (
u_ch¨
);

530 i‡(
Àn
 < 
msgÀn
) {

531 
	`UPAPDEBUG
(
LOG_INFO
, ("pap_rauthnak:Ñcvd shortÖacket.\n"));

534 
msg
 = (*Ë
öp
;

535 
	`PRINTMSG
(
msg
, 
msgÀn
);

539 
u
->
us_˛õ¡°©e
 = 
UPAPCS_BADAUTH
;

541 
	`UPAPDEBUG
(
LOG_ERR
, ("PAPáuthentication failed\n"));

542 
	`auth_wôh≥î_Áû
(
u
->
us_unô
, 
PPP_PAP
);

543 
	}
}

550 
	$u∑p_ßuthªq
(
u∑p_°©e
 *
u
)

552 
u_ch¨
 *
ouç
;

553 
ouéí
;

555 
ouéí
 = 
UPAP_HEADERLEN
 + 2 *  (
u_ch¨
)

556 + 
u
->
us_u£æí
 + u->
us_∑sswdÀn
;

557 
ouç
 = 
ouçackë_buf
[
u
->
us_unô
];

559 
	`MAKEHEADER
(
ouç
, 
PPP_PAP
);

561 
	`PUTCHAR
(
UPAP_AUTHREQ
, 
ouç
);

562 
	`PUTCHAR
(++
u
->
us_id
, 
ouç
);

563 
	`PUTSHORT
(
ouéí
, 
ouç
);

564 
	`PUTCHAR
(
u
->
us_u£æí
, 
ouç
);

565 
	`BCOPY
(
u
->
us_u£r
, 
ouç
, u->
us_u£æí
);

566 
	`INCPTR
(
u
->
us_u£æí
, 
ouç
);

567 
	`PUTCHAR
(
u
->
us_∑sswdÀn
, 
ouç
);

568 
	`BCOPY
(
u
->
us_∑sswd
, 
ouç
, u->
us_∑sswdÀn
);

570 
	`µpWrôe
(
u
->
us_unô
, 
ouçackë_buf
[u->us_unô], 
ouéí
 + 
PPP_HDRLEN
);

572 
	`UPAPDEBUG
(
LOG_INFO
, ("∑p_ßuth: Síàid %d\n", 
u
->
us_id
));

574 
	`TIMEOUT
(
u∑p_timeout
, 
u
, u->
us_timeouâime
);

575 ++
u
->
us_å™smôs
;

576 
u
->
us_˛õ¡°©e
 = 
UPAPCS_AUTHREQ
;

577 
	}
}

584 
	$u∑p_§e•
(
u∑p_°©e
 *
u
, 
u_ch¨
 
code
, u_ch¨ 
id
, *
msg
, 
msgÀn
)

586 
u_ch¨
 *
ouç
;

587 
ouéí
;

589 
ouéí
 = 
UPAP_HEADERLEN
 +  (
u_ch¨
Ë+ 
msgÀn
;

590 
ouç
 = 
ouçackë_buf
[
u
->
us_unô
];

591 
	`MAKEHEADER
(
ouç
, 
PPP_PAP
);

593 
	`PUTCHAR
(
code
, 
ouç
);

594 
	`PUTCHAR
(
id
, 
ouç
);

595 
	`PUTSHORT
(
ouéí
, 
ouç
);

596 
	`PUTCHAR
(
msgÀn
, 
ouç
);

597 
	`BCOPY
(
msg
, 
ouç
, 
msgÀn
);

598 
	`µpWrôe
(
u
->
us_unô
, 
ouçackë_buf
[u->us_unô], 
ouéí
 + 
PPP_HDRLEN
);

600 
	`UPAPDEBUG
(
LOG_INFO
, ("∑p_§e•: Síàcodê%d, id %d s=%d\n", 
code
, 
id
, 
u
->
us_˛õ¡°©e
));

601 
	}
}

603 #i‡
PPP_ADDITIONAL_CALLBACKS


604 *
	gu∑p_codíames
[] = {

611 
u∑p_¥öçkt
(

612 
u_ch¨
 *
p
,

613 
∂í
,

614 (*
¥öãr
) (*, *, ...),

615 *
¨g


618 
	`LWIP_UNUSED_ARG
(
p
);

619 
	`LWIP_UNUSED_ARG
(
∂í
);

620 
	`LWIP_UNUSED_ARG
(
¥öãr
);

621 
	`LWIP_UNUSED_ARG
(
¨g
);

623 
	}
}

	@netif/ppp/pap.h

52 #i‚de‡
PAP_H


53 
	#PAP_H


	)

55 #i‡
PAP_SUPPORT


60 
	#UPAP_HEADERLEN
 ( (
u_ch¨
Ë+  (u_ch¨Ë+  (
u_sh‹t
))

	)

66 
	#UPAP_AUTHREQ
 1

	)

67 
	#UPAP_AUTHACK
 2

	)

68 
	#UPAP_AUTHNAK
 3

	)

73 
	su∑p_°©e
 {

74 
	mus_unô
;

75 c⁄° *
	mus_u£r
;

76 
	mus_u£æí
;

77 c⁄° *
	mus_∑sswd
;

78 
	mus_∑sswdÀn
;

79 
	mus_˛õ¡°©e
;

80 
	mus_£rvî°©e
;

81 
u_ch¨
 
	mus_id
;

82 
	mus_timeouâime
;

83 
	mus_å™smôs
;

84 
	mus_maxå™smôs
;

85 
	mus_ªqtimeout
;

86 } 
	tu∑p_°©e
;

91 
	#UPAPCS_INITIAL
 0

	)

92 
	#UPAPCS_CLOSED
 1

	)

93 
	#UPAPCS_PENDING
 2

	)

94 
	#UPAPCS_AUTHREQ
 3

	)

95 
	#UPAPCS_OPEN
 4

	)

96 
	#UPAPCS_BADAUTH
 5

	)

101 
	#UPAPSS_INITIAL
 0

	)

102 
	#UPAPSS_CLOSED
 1

	)

103 
	#UPAPSS_PENDING
 2

	)

104 
	#UPAPSS_LISTEN
 3

	)

105 
	#UPAPSS_OPEN
 4

	)

106 
	#UPAPSS_BADAUTH
 5

	)

109 
u∑p_°©e
 
u∑p
[];

111 
u∑p_authwôh≥î
 (, *, *);

112 
u∑p_auth≥î
 ();

114 
¥Ÿít
 
∑p_¥Ÿít
;

	@netif/ppp/ppp.c

82 
	~"lwù/›t.h
"

84 #i‡
PPP_SUPPORT


86 
	~"lwù/ù.h
"

88 
	~"µp.h
"

89 
	~"µpdebug.h
"

91 
	~"øndm.h
"

92 
	~"fsm.h
"

93 #i‡
PAP_SUPPORT


94 
	~"∑p.h
"

96 #i‡
CHAP_SUPPORT


97 
	~"ch≠.h
"

99 
	~"ù˝.h
"

100 
	~"l˝.h
"

101 
	~"magic.h
"

102 
	~"auth.h
"

103 #i‡
VJ_SUPPORT


104 
	~"vj.h
"

106 #i‡
PPPOE_SUPPORT


107 
	~"√tif/µp_€.h
"

110 
	~"lwù/t˝ù.h
"

111 
	~"lwù/≠i.h
"

112 
	~"lwù/¢mp.h
"

114 
	~<°rög.h
>

124 #i‚de‡
PPP_INPROC_MULTITHREADED


125 
	#PPP_INPROC_MULTITHREADED
 (
NO_SYS
==0)

	)

131 #i‚de‡
PPP_INPROC_OWNTHREAD


132 
	#PPP_INPROC_OWNTHREAD
 
PPP_INPROC_MULTITHREADED


	)

135 #i‡
PPP_INPROC_OWNTHREAD
 && !
PPP_INPROC_MULTITHREADED


142 
	#PPP_ADDRESS
(
p
Ë(((
u_ch¨
 *)’))[0])

	)

143 
	#PPP_CONTROL
(
p
Ë(((
u_ch¨
 *)’))[1])

	)

144 
	#PPP_PROTOCOL
(
p
Ë((((
u_ch¨
 *)’))[2] << 8Ë+ ((u_ch¨ *)’))[3])

	)

149 
	mPDIDLE
 = 0,

150 
	mPDSTART
,

151 
	mPDADDRESS
,

152 
	mPDCONTROL
,

153 
	mPDPROTOCOL1
,

154 
	mPDPROTOCOL2
,

155 
	mPDDATA


156 } 
	tPPPDevSèãs
;

158 
	#ESCAPE_P
(
accm
, 
c
Ë(◊ccm)[(cË>> 3] & 
µpACCMMask
[¯& 0x07])

	)

165 #i‚de‡
PPPOS_RX_BUFSIZE


166 
	#PPPOS_RX_BUFSIZE
 (
PPP_MRU
 + 
PPP_HDRLEN
)

	)

169 
	sPPPC⁄åﬁRx_s
 {

171 
	mpd
;

173 
sio_fd_t
 
	mfd
;

175 
u_ch¨
 
	mrxbuf
[
PPPOS_RX_BUFSIZE
];

178 
pbuf
 *
	möHód
, *
	möTaû
;

180 #i‡
PPPOS_SUPPORT


181 
u16_t
 
	möPrŸocﬁ
;

182 
u16_t
 
	möFCS
;

184 
PPPDevSèãs
 
	möSèã
;

185 
	möEsˇ≥d
;

186 
ext_accm
 
	möACCM
;

187 } 
	tPPPC⁄åﬁRx
;

192 
	sPPPC⁄åﬁ_s
 {

193 
PPPC⁄åﬁRx
 
	mrx
;

194 
	m›íFœg
;

195 #i‡
PPPOE_SUPPORT


196 
√tif
 *
	mëhif
;

197 
µp€_so·c
 *
	mµp€_sc
;

199 
	mif_up
;

200 
	mîrCode
;

201 #i‡
PPPOS_SUPPORT


202 
sio_fd_t
 
	mfd
;

204 
u16_t
 
	mmtu
;

205 
	mpcomp
;

206 
	maccomp
;

207 
u_l⁄g
 
	mœ°XMô
;

208 
ext_accm
 
	moutACCM
;

209 #i‡
PPPOS_SUPPORT
 && 
VJ_SUPPORT


210 
	mvjE«bÀd
;

211 
vjcom¥ess
 
	mvjComp
;

214 
√tif
 
	m√tif
;

216 
µp_addrs
 
	maddrs
;

218 (*
	mlökSètusCB
)(*
	m˘x
, 
	mîrCode
, *
	m¨g
);

219 *
	mlökSètusCtx
;

221 } 
	tPPPC⁄åﬁ
;

228 
	s≈io˘l
 {

229 
	m¥Ÿocﬁ
;

230 
NPmode
 
	mmode
;

238 #i‡
PPPOS_SUPPORT


239 #i‡
PPP_INPROC_OWNTHREAD


240 
µpI≈utThªad
(*
¨g
);

242 
µpDr›
(
PPPC⁄åﬁRx
 *
p¸x
);

243 
µpInProc
(
PPPC⁄åﬁRx
 *
p¸x
, 
u_ch¨
 *
s
, 
l
);

250 
u_l⁄g
 
	gsub√tMask
;

252 
PPPC⁄åﬁ
 
	gµpC⁄åﬁ
[
NUM_PPP
];

259 
¥Ÿít
 *
	gµp_¥Ÿocﬁs
[] = {

260 &
l˝_¥Ÿít
,

261 #i‡
PAP_SUPPORT


262 &
∑p_¥Ÿít
,

264 #i‡
CHAP_SUPPORT


265 &
ch≠_¥Ÿít
,

267 #i‡
CBCP_SUPPORT


268 &
cb˝_¥Ÿít
,

270 &
ù˝_¥Ÿít
,

271 #i‡
CCP_SUPPORT


272 &
c˝_¥Ÿít
,

274 
NULL


282 
u_ch¨
 
	gouçackë_buf
[
NUM_PPP
][
PPP_MRU
+
PPP_HDRLEN
];

289 #i‡
PPPOS_SUPPORT


294 c⁄° 
u_sh‹t
 
	gfc°ab
[256] = {

331 
u_ch¨
 
	gµpACCMMask
[] = {

344 
	$µpRecvWakeup
(
pd
)

346 
	`PPPDEBUG
(
LOG_DEBUG
, ("µpRecvWakeup: unô %d\n", 
pd
));

347 i‡(
µpC⁄åﬁ
[
pd
].
›íFœg
 != 0) {

348 
	`sio_ªad_ab‹t
(
µpC⁄åﬁ
[
pd
].
fd
);

350 
	}
}

354 
	$µpLökTîmö©ed
(
pd
)

356 
	`PPPDEBUG
(
LOG_DEBUG
, ("µpLökTîmö©ed: unô %d\n", 
pd
));

358 #i‡
PPPOE_SUPPORT


359 i‡(
µpC⁄åﬁ
[
pd
].
ëhif
) {

360 
	`µp€_disc⁄√˘
(
µpC⁄åﬁ
[
pd
].
µp€_sc
);

364 #i‡
PPPOS_SUPPORT


365 
PPPC⁄åﬁ
* 
pc
;

366 
	`µpRecvWakeup
(
pd
);

367 
pc
 = &
µpC⁄åﬁ
[
pd
];

369 
	`PPPDEBUG
(
LOG_DEBUG
, ("µpLökTîmö©ed: unô %d:ÜökSètusCB=%∞îrCode=%d\n", 
pd
, 
pc
->
lökSètusCB
,Öc->
îrCode
));

370 i‡(
pc
->
lökSètusCB
) {

371 
pc
->
	`lökSètusCB
’c->
lökSètusCtx
,Öc->
îrCode
 ?Öc->îrCodê: 
PPPERR_PROTOCOL
, 
NULL
);

374 
pc
->
›íFœg
 = 0;

377 
	`PPPDEBUG
(
LOG_DEBUG
, ("pppLinkTerminated: finished.\n"));

378 
	}
}

381 
	$µpLökDown
(
pd
)

383 
	`PPPDEBUG
(
LOG_DEBUG
, ("µpLökDown: unô %d\n", 
pd
));

385 #i‡
PPPOE_SUPPORT


386 i‡(
µpC⁄åﬁ
[
pd
].
ëhif
) {

387 
	`µp€_disc⁄√˘
(
µpC⁄åﬁ
[
pd
].
µp€_sc
);

391 #i‡
PPPOS_SUPPORT


392 
	`µpRecvWakeup
(
pd
);

395 
	}
}

399 
	$µpSèπ
(
pd
)

401 
	`PPPDEBUG
(
LOG_DEBUG
, ("µpSèπ: unô %d\n", 
pd
));

402 
	`l˝_lowîup
(
pd
);

403 
	`l˝_›í
(
pd
);

404 
	`PPPDEBUG
(
LOG_DEBUG
, ("pppStart: finished\n"));

405 
	}
}

409 
	$µpSt›
(
pd
)

411 
	`PPPDEBUG
(
LOG_DEBUG
, ("µpSt›: unô %d\n", 
pd
));

412 
	`l˝_˛o£
(
pd
, "UserÑequest");

413 
	}
}

417 
	$µpHup
(
pd
)

419 
	`PPPDEBUG
(
LOG_DEBUG
, ("µpHupCB: unô %d\n", 
pd
));

420 
	`l˝_lowîdown
(
pd
);

421 
	`lök_ãrmö©ed
(
pd
);

422 
	}
}

429 
µp_£âögs
 
	gµp_£âögs
;

432 
	$µpInô
()

434 
¥Ÿít
 *
¥Ÿp
;

435 
i
, 
j
;

437 
	`mem£t
(&
µp_£âögs
, 0, (ppp_settings));

438 
µp_£âögs
.
u£≥îdns
 = 1;

439 
	`µpSëAuth
(
PPPAUTHTYPE_NONE
, 
NULL
, NULL);

441 
	`magicInô
();

443 
sub√tMask
 = 
	`PP_HTONL
(0xffffff00UL);

445 
i
 = 0; i < 
NUM_PPP
; i++) {

447 
j
 = 0; (
¥Ÿp
 = 
µp_¥Ÿocﬁs
[j]Ë!
NULL
; ++j) {

448 (*
¥Ÿp
->
öô
)(
i
);

451 
	}
}

454 
	$µpSëAuth
(
µpAuthTy≥
 
authTy≥
, c⁄° *
u£r
, c⁄° *
∑sswd
)

456 
authTy≥
) {

457 
PPPAUTHTYPE_NONE
:

459 #ifde‡
LWIP_PPP_STRICT_PAP_REJECT


460 
µp_£âögs
.
ªfu£_∑p
 = 1;

463 
µp_£âögs
.
ªfu£_∑p
 = 0;

465 
µp_£âögs
.
ªfu£_ch≠
 = 1;

468 
PPPAUTHTYPE_ANY
:

488 
µp_£âögs
.
ªfu£_∑p
 = 0;

489 
µp_£âögs
.
ªfu£_ch≠
 = 0;

492 
PPPAUTHTYPE_PAP
:

493 
µp_£âögs
.
ªfu£_∑p
 = 0;

494 
µp_£âögs
.
ªfu£_ch≠
 = 1;

497 
PPPAUTHTYPE_CHAP
:

498 
µp_£âögs
.
ªfu£_∑p
 = 1;

499 
µp_£âögs
.
ªfu£_ch≠
 = 0;

503 if(
u£r
) {

504 
	`°∫˝y
(
µp_£âögs
.
u£r
, user, (ppp_settings.user)-1);

505 
µp_£âögs
.
u£r
[(ppp_settings.user)-1] = '\0';

507 
µp_£âögs
.
u£r
[0] = '\0';

510 if(
∑sswd
) {

511 
	`°∫˝y
(
µp_£âögs
.
∑sswd
,Öasswd, (ppp_settings.passwd)-1);

512 
µp_£âögs
.
∑sswd
[(ppp_settings.passwd)-1] = '\0';

514 
µp_£âögs
.
∑sswd
[0] = '\0';

516 
	}
}

518 #i‡
PPPOS_SUPPORT


530 
µpOvîSîülO≥n
(
sio_fd_t
 
fd
, (*
lökSètusCB
)(*
˘x
, 
îrCode
, *
¨g
), *
lökSètusCtx
)

532 
PPPC⁄åﬁ
 *
pc
;

533 
pd
;

535 i‡(
lökSètusCB
 =
NULL
) {

538  
PPPERR_PARAM
;

542 
pd
 = 0;Öd < 
NUM_PPP
 && 
µpC⁄åﬁ
[pd].
›íFœg
 != 0;Öd++);

544 i‡(
pd
 >
NUM_PPP
) {

545 
pd
 = 
PPPERR_OPEN
;

547 
pc
 = &
µpC⁄åﬁ
[
pd
];

549 
	`mem£t
(
pc
, 0, (
PPPC⁄åﬁ
));

550 
pc
->
rx
.
pd
 =Öd;

551 
pc
->
rx
.
fd
 = fd;

553 
pc
->
›íFœg
 = 1;

554 
pc
->
fd
 = fd;

556 #i‡
VJ_SUPPORT


557 
	`vj_com¥ess_öô
(&
pc
->
vjComp
);

564 
pc
->
rx
.
öACCM
[15] = 0x60;

565 
pc
->
outACCM
[15] = 0x60;

567 
pc
->
lökSètusCB
 =ÜinkStatusCB;

568 
pc
->
lökSètusCtx
 =ÜinkStatusCtx;

573 
	`PPPDEBUG
(
LOG_INFO
, ("µpOvîSîülO≥n: unô %d: C⁄√˘ög\n", 
pd
));

574 
	`µpSèπ
(
pd
);

575 #i‡
PPP_INPROC_OWNTHREAD


576 
	`sys_thªad_√w
(
PPP_THREAD_NAME
, 
µpI≈utThªad
, (*)&
pc
->
rx
, 
PPP_THREAD_STACKSIZE
, 
PPP_THREAD_PRIO
);

580  
pd
;

581 
	}
}

584 #i‡
PPPOE_SUPPORT


585 
µpOvîEthî√tLökSètusCB
(
pd
, 
up
);

588 
	$µpOvîEthî√tClo£
(
pd
)

590 
PPPC⁄åﬁ
* 
pc
 = &
µpC⁄åﬁ
[
pd
];

593 
	`l˝_˛o£
(
pd
, 
NULL
);

595 
	`µp€_de°roy
(&
pc
->
√tif
);

596 
	}
}

598 
µpOvîEthî√tO≥n
(
√tif
 *
ëhif
, c⁄° *
£rvi˚_«me
, c⁄° *
c⁄˚¡øt‹_«me
, (*
lökSètusCB
)(*
˘x
, 
îrCode
, *
¨g
), *
lökSètusCtx
)

600 
PPPC⁄åﬁ
 *
pc
;

601 
pd
;

603 
	`LWIP_UNUSED_ARG
(
£rvi˚_«me
);

604 
	`LWIP_UNUSED_ARG
(
c⁄˚¡øt‹_«me
);

606 i‡(
lökSètusCB
 =
NULL
) {

609  
PPPERR_PARAM
;

613 
pd
 = 0;Öd < 
NUM_PPP
 && 
µpC⁄åﬁ
[pd].
›íFœg
 != 0;Öd++);

614 i‡(
pd
 >
NUM_PPP
) {

615 
pd
 = 
PPPERR_OPEN
;

617 
pc
 = &
µpC⁄åﬁ
[
pd
];

618 
	`mem£t
(
pc
, 0, (
PPPC⁄åﬁ
));

619 
pc
->
›íFœg
 = 1;

620 
pc
->
ëhif
 =Éthif;

622 
pc
->
lökSètusCB
 =ÜinkStatusCB;

623 
pc
->
lökSètusCtx
 =ÜinkStatusCtx;

625 
l˝_w™t›ti⁄s
[
pd
].
mru
 = 
PPPOE_MAXMTU
;

626 
l˝_w™t›ti⁄s
[
pd
].
√g_asyncm≠
 = 0;

627 
l˝_w™t›ti⁄s
[
pd
].
√g_pcom¥essi⁄
 = 0;

628 
l˝_w™t›ti⁄s
[
pd
].
√g_accom¥essi⁄
 = 0;

630 
l˝_Ælow›ti⁄s
[
pd
].
mru
 = 
PPPOE_MAXMTU
;

631 
l˝_Ælow›ti⁄s
[
pd
].
√g_asyncm≠
 = 0;

632 
l˝_Ælow›ti⁄s
[
pd
].
√g_pcom¥essi⁄
 = 0;

633 
l˝_Ælow›ti⁄s
[
pd
].
√g_accom¥essi⁄
 = 0;

635 if(
	`µp€_¸óã
(
ëhif
, 
pd
, 
µpOvîEthî√tLökSètusCB
, &
pc
->
µp€_sc
Ë!
ERR_OK
) {

636 
pc
->
›íFœg
 = 0;

637  
PPPERR_OPEN
;

640 
	`µp€_c⁄√˘
(
pc
->
µp€_sc
);

643  
pd
;

644 
	}
}

652 
	$µpClo£
(
pd
)

654 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

655 
°
 = 0;

657 
	`PPPDEBUG
(
LOG_DEBUG
, ("pppClose() called\n"));

660 #i‡
PPPOE_SUPPORT


661 if(
pc
->
ëhif
) {

662 
	`PPPDEBUG
(
LOG_DEBUG
, ("µpClo£: unô %d kûl_lök ->ÖµSt›\n", 
pd
));

663 
pc
->
îrCode
 = 
PPPERR_USER
;

665 
	`µpSt›
(
pd
);

669 #i‡
PPPOS_SUPPORT


670 
	`PPPDEBUG
(
LOG_DEBUG
, ("µpClo£: unô %d kûl_lök ->ÖµSt›\n", 
pd
));

671 
pc
->
îrCode
 = 
PPPERR_USER
;

673 
	`µpSt›
(
pd
);

674 
	`µpRecvWakeup
(
pd
);

678  
°
;

679 
	}
}

683 
	$µpSigHUP
(
pd
)

685 
	`PPPDEBUG
(
LOG_DEBUG
, ("µpSigHUP: unô %d sig_hu∞->ÖµHupCB\n", 
pd
));

686 
	`µpHup
(
pd
);

687 
	}
}

689 #i‡
PPPOS_SUPPORT


691 
	$nPut
(
PPPC⁄åﬁ
 *
pc
, 
pbuf
 *
nb
)

693 
pbuf
 *
b
;

694 
c
;

696 
b
 = 
nb
; b !
NULL
; b = b->
√xt
) {

697 if((
c
 = 
	`sio_wrôe
(
pc
->
fd
, 
b
->
∑ylﬂd
, b->
Àn
)) != b->len) {

698 
	`PPPDEBUG
(
LOG_WARNING
,

699 ("PPPÇPut: incom∂ëêsio_wrôe(fd:%"
SZT_F
",Üí:%d, c: 0x%"
X8_F
"Ë¯%d\n", (
size_t
)
pc
->
fd
, 
b
->
Àn
, 
c
, c));

700 
	`LINK_STATS_INC
(
lök
.
îr
);

701 
pc
->
œ°XMô
 = 0;

702 
	`¢mp_öc_ifoutdisˇrds
(&
pc
->
√tif
);

703 
	`pbuf_‰ì
(
nb
);

708 
	`¢mp_add_ifouto˘ës
(&
pc
->
√tif
, 
nb
->
tŸ_Àn
);

709 
	`¢mp_öc_ifoutuˇ°pkts
(&
pc
->
√tif
);

710 
	`pbuf_‰ì
(
nb
);

711 
	`LINK_STATS_INC
(
lök
.
xmô
);

712 
	}
}

720 
pbuf
 *

721 
	$µpAµíd
(
u_ch¨
 
c
, 
pbuf
 *
nb
, 
ext_accm
 *
outACCM
)

723 
pbuf
 *
tb
 = 
nb
;

729 i‡(
nb
 && (
PBUF_POOL_BUFSIZE
 -Çb->
Àn
) < 2) {

730 
tb
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 0, 
PBUF_POOL
);

731 i‡(
tb
) {

732 
nb
->
√xt
 = 
tb
;

734 
	`LINK_STATS_INC
(
lök
.
memîr
);

736 
nb
 = 
tb
;

739 i‡(
nb
) {

740 i‡(
outACCM
 && 
	`ESCAPE_P
(*outACCM, 
c
)) {

741 *((
u_ch¨
*)
nb
->
∑ylﬂd
 +Çb->
Àn
++Ë
PPP_ESCAPE
;

742 *((
u_ch¨
*)
nb
->
∑ylﬂd
 +Çb->
Àn
++Ë
c
 ^ 
PPP_TRANS
;

744 *((
u_ch¨
*)
nb
->
∑ylﬂd
 +Çb->
Àn
++Ë
c
;

748  
tb
;

749 
	}
}

752 #i‡
PPPOE_SUPPORT


753 
îr_t


754 
	$µpifOuçutOvîEthî√t
(
pd
, 
pbuf
 *
p
)

756 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

757 
pbuf
 *
pb
;

758 
u_sh‹t
 
¥Ÿocﬁ
 = 
PPP_IP
;

759 
i
=0;

760 
u16_t
 
tŸ_Àn
;

763 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 
PPPOE_HDRLEN
 + (
¥Ÿocﬁ
), 
PBUF_RAM
);

764 if(!
pb
) {

765 
	`LINK_STATS_INC
(
lök
.
memîr
);

766 
	`LINK_STATS_INC
(
lök
.
¥Ÿîr
);

767 
	`¢mp_öc_ifoutdisˇrds
(&
pc
->
√tif
);

768  
ERR_MEM
;

771 
	`pbuf_hódî
(
pb
, -(
s16_t
)
PPPOE_HDRLEN
);

773 
pc
->
œ°XMô
 = 
	`sys_jiffõs
();

775 i‡(!
pc
->
pcomp
 || 
¥Ÿocﬁ
 > 0xFF) {

776 *((
u_ch¨
*)
pb
->
∑ylﬂd
 + 
i
++Ë(
¥Ÿocﬁ
 >> 8) & 0xFF;

778 *((
u_ch¨
*)
pb
->
∑ylﬂd
 + 
i
Ë
¥Ÿocﬁ
 & 0xFF;

780 
	`pbuf_chaö
(
pb
, 
p
);

781 
tŸ_Àn
 = 
pb
->tot_len;

783 if(
	`µp€_xmô
(
pc
->
µp€_sc
, 
pb
Ë!
ERR_OK
) {

784 
	`LINK_STATS_INC
(
lök
.
îr
);

785 
	`¢mp_öc_ifoutdisˇrds
(&
pc
->
√tif
);

786  
PPPERR_DEVICE
;

789 
	`¢mp_add_ifouto˘ës
(&
pc
->
√tif
, 
tŸ_Àn
);

790 
	`¢mp_öc_ifoutuˇ°pkts
(&
pc
->
√tif
);

791 
	`LINK_STATS_INC
(
lök
.
xmô
);

792  
ERR_OK
;

793 
	}
}

797 
îr_t


798 
	$µpifOuçut
(
√tif
 *√tif, 
pbuf
 *
pb
, 
ù_addr_t
 *
ùaddr
)

800 
pd
 = ()(
size_t
)
√tif
->
°©e
;

801 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

802 #i‡
PPPOS_SUPPORT


803 
u_sh‹t
 
¥Ÿocﬁ
 = 
PPP_IP
;

804 
u_öt
 
fcsOut
 = 
PPP_INITFCS
;

805 
pbuf
 *
hódMB
 = 
NULL
, *
èûMB
 = NULL, *
p
;

806 
u_ch¨
 
c
;

809 
	`LWIP_UNUSED_ARG
(
ùaddr
);

814 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
 || !
pb
) {

815 
	`PPPDEBUG
(
LOG_WARNING
, ("pppifOutput[%d]: badÖarmsÖrot=%dÖb=%p\n",

816 
pd
, 
PPP_IP
, 
pb
));

817 
	`LINK_STATS_INC
(
lök
.
›ãº
);

818 
	`LINK_STATS_INC
(
lök
.
dr›
);

819 
	`¢mp_öc_ifoutdisˇrds
(
√tif
);

820  
ERR_ARG
;

824 i‡(
l˝_pha£
[
pd
] =
PHASE_DEAD
) {

825 
	`PPPDEBUG
(
LOG_ERR
, ("µpifOuçut[%d]:ÜökÇŸ up\n", 
pd
));

826 
	`LINK_STATS_INC
(
lök
.
πîr
);

827 
	`LINK_STATS_INC
(
lök
.
dr›
);

828 
	`¢mp_öc_ifoutdisˇrds
(
√tif
);

829  
ERR_RTE
;

832 #i‡
PPPOE_SUPPORT


833 if(
pc
->
ëhif
) {

834  
	`µpifOuçutOvîEthî√t
(
pd
, 
pb
);

838 #i‡
PPPOS_SUPPORT


840 
hódMB
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 0, 
PBUF_POOL
);

841 i‡(
hódMB
 =
NULL
) {

842 
	`PPPDEBUG
(
LOG_WARNING
, ("µpifOuçut[%d]: fú°áŒo¯Áû\n", 
pd
));

843 
	`LINK_STATS_INC
(
lök
.
memîr
);

844 
	`LINK_STATS_INC
(
lök
.
dr›
);

845 
	`¢mp_öc_ifoutdisˇrds
(
√tif
);

846  
ERR_MEM
;

849 #i‡
VJ_SUPPORT


854 i‡(
¥Ÿocﬁ
 =
PPP_IP
 && 
pc
->
vjE«bÀd
) {

855 
	`vj_com¥ess_t˝
(&
pc
->
vjComp
, 
pb
)) {

856 
TYPE_IP
:

860 
TYPE_COMPRESSED_TCP
:

861 
¥Ÿocﬁ
 = 
PPP_VJC_COMP
;

863 
TYPE_UNCOMPRESSED_TCP
:

864 
¥Ÿocﬁ
 = 
PPP_VJC_UNCOMP
;

867 
	`PPPDEBUG
(
LOG_WARNING
, ("µpifOuçut[%d]: bad IPÖackë\n", 
pd
));

868 
	`LINK_STATS_INC
(
lök
.
¥Ÿîr
);

869 
	`LINK_STATS_INC
(
lök
.
dr›
);

870 
	`¢mp_öc_ifoutdisˇrds
(
√tif
);

871 
	`pbuf_‰ì
(
hódMB
);

872  
ERR_VAL
;

877 
èûMB
 = 
hódMB
;

880 i‡((
	`sys_jiffõs
(Ë- 
pc
->
œ°XMô
Ë>
PPP_MAXIDLEFLAG
) {

881 
èûMB
 = 
	`µpAµíd
(
PPP_FLAG
,ÅaûMB, 
NULL
);

884 
pc
->
œ°XMô
 = 
	`sys_jiffõs
();

885 i‡(!
pc
->
accomp
) {

886 
fcsOut
 = 
	`PPP_FCS
(fcsOut, 
PPP_ALLSTATIONS
);

887 
èûMB
 = 
	`µpAµíd
(
PPP_ALLSTATIONS
,ÅaûMB, &
pc
->
outACCM
);

888 
fcsOut
 = 
	`PPP_FCS
(fcsOut, 
PPP_UI
);

889 
èûMB
 = 
	`µpAµíd
(
PPP_UI
,ÅaûMB, &
pc
->
outACCM
);

891 i‡(!
pc
->
pcomp
 || 
¥Ÿocﬁ
 > 0xFF) {

892 
c
 = (
¥Ÿocﬁ
 >> 8) & 0xFF;

893 
fcsOut
 = 
	`PPP_FCS
(fcsOut, 
c
);

894 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

896 
c
 = 
¥Ÿocﬁ
 & 0xFF;

897 
fcsOut
 = 
	`PPP_FCS
(fcsOut, 
c
);

898 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

901 
p
 = 
pb
;Ö;Ö =Ö->
√xt
) {

902 
n
;

903 
u_ch¨
 *
sPå
;

905 
sPå
 = (
u_ch¨
*)
p
->
∑ylﬂd
;

906 
n
 = 
p
->
Àn
;

907 
n
-- > 0) {

908 
c
 = *
sPå
++;

911 
fcsOut
 = 
	`PPP_FCS
(fcsOut, 
c
);

914 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

919 
c
 = ~
fcsOut
 & 0xFF;

920 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

921 
c
 = (~
fcsOut
 >> 8) & 0xFF;

922 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

923 
èûMB
 = 
	`µpAµíd
(
PPP_FLAG
,ÅaûMB, 
NULL
);

926 i‡(!
èûMB
) {

927 
	`PPPDEBUG
(
LOG_WARNING
,

929 
pd
, 
¥Ÿocﬁ
));

930 
	`pbuf_‰ì
(
hódMB
);

931 
	`LINK_STATS_INC
(
lök
.
memîr
);

932 
	`LINK_STATS_INC
(
lök
.
dr›
);

933 
	`¢mp_öc_ifoutdisˇrds
(
√tif
);

934  
ERR_MEM
;

938 
	`PPPDEBUG
(
LOG_INFO
, ("µpifOuçut[%d]:ÖrŸo=0x%"
X16_F
"\n", 
pd
, 
¥Ÿocﬁ
));

940 
	`nPut
(
pc
, 
hódMB
);

943  
ERR_OK
;

944 
	}
}

949 
	$µpIOCé
(
pd
, 
cmd
, *
¨g
)

951 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

952 
°
 = 0;

954 i‡(
pd
 < 0 ||Öd >
NUM_PPP
) {

955 
°
 = 
PPPERR_PARAM
;

957 
cmd
) {

958 
PPPCTLG_UPSTATUS
:

959 i‡(
¨g
) {

960 *(*)
¨g
 = ()(
pc
->
if_up
);

962 
°
 = 
PPPERR_PARAM
;

965 
PPPCTLS_ERRCODE
:

966 i‡(
¨g
) {

967 
pc
->
îrCode
 = *(*)
¨g
;

969 
°
 = 
PPPERR_PARAM
;

972 
PPPCTLG_ERRCODE
:

973 i‡(
¨g
) {

974 *(*)
¨g
 = ()(
pc
->
îrCode
);

976 
°
 = 
PPPERR_PARAM
;

979 #i‡
PPPOS_SUPPORT


980 
PPPCTLG_FD
:

981 i‡(
¨g
) {

982 *(
sio_fd_t
 *)
¨g
 = 
pc
->
fd
;

984 
°
 = 
PPPERR_PARAM
;

989 
°
 = 
PPPERR_PARAM
;

994  
°
;

995 
	}
}

1000 
u_sh‹t


1001 
	$µpMTU
(
pd
)

1003 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1004 
u_sh‹t
 
°
;

1007 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1008 
°
 = 0;

1010 
°
 = 
pc
->
mtu
;

1013  
°
;

1014 
	}
}

1016 #i‡
PPPOE_SUPPORT


1018 
	$µpWrôeOvîEthî√t
(
pd
, c⁄° 
u_ch¨
 *
s
, 
n
)

1020 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1021 
pbuf
 *
pb
;

1024 
s
 += 2;

1025 
n
 -= 2;

1027 
	`LWIP_ASSERT
("PPPOE_HDRLEN +Ç <0xffff", 
PPPOE_HDRLEN
 + 
n
 <= 0xffff);

1028 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, (
u16_t
)(
PPPOE_HDRLEN
 + 
n
), 
PBUF_RAM
);

1029 if(!
pb
) {

1030 
	`LINK_STATS_INC
(
lök
.
memîr
);

1031 
	`LINK_STATS_INC
(
lök
.
¥Ÿîr
);

1032 
	`¢mp_öc_ifoutdisˇrds
(&
pc
->
√tif
);

1033  
PPPERR_ALLOC
;

1036 
	`pbuf_hódî
(
pb
, -(
s16_t
)
PPPOE_HDRLEN
);

1038 
pc
->
œ°XMô
 = 
	`sys_jiffõs
();

1040 
	`MEMCPY
(
pb
->
∑ylﬂd
, 
s
, 
n
);

1042 if(
	`µp€_xmô
(
pc
->
µp€_sc
, 
pb
Ë!
ERR_OK
) {

1043 
	`LINK_STATS_INC
(
lök
.
îr
);

1044 
	`¢mp_öc_ifoutdisˇrds
(&
pc
->
√tif
);

1045  
PPPERR_DEVICE
;

1048 
	`¢mp_add_ifouto˘ës
(&
pc
->
√tif
, (
u16_t
)
n
);

1049 
	`¢mp_öc_ifoutuˇ°pkts
(&
pc
->
√tif
);

1050 
	`LINK_STATS_INC
(
lök
.
xmô
);

1051  
PPPERR_NONE
;

1052 
	}
}

1061 
	$µpWrôe
(
pd
, c⁄° 
u_ch¨
 *
s
, 
n
)

1063 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1064 #i‡
PPPOS_SUPPORT


1065 
u_ch¨
 
c
;

1066 
u_öt
 
fcsOut
;

1067 
pbuf
 *
hódMB
, *
èûMB
;

1070 #i‡
PPPOE_SUPPORT


1071 if(
pc
->
ëhif
) {

1072  
	`µpWrôeOvîEthî√t
(
pd
, 
s
, 
n
);

1076 #i‡
PPPOS_SUPPORT


1077 
hódMB
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 0, 
PBUF_POOL
);

1078 i‡(
hódMB
 =
NULL
) {

1079 
	`LINK_STATS_INC
(
lök
.
memîr
);

1080 
	`LINK_STATS_INC
(
lök
.
¥Ÿîr
);

1081 
	`¢mp_öc_ifoutdisˇrds
(&
pc
->
√tif
);

1082  
PPPERR_ALLOC
;

1085 
èûMB
 = 
hódMB
;

1089 i‡((
	`sys_jiffõs
(Ë- 
pc
->
œ°XMô
Ë>
PPP_MAXIDLEFLAG
) {

1090 
èûMB
 = 
	`µpAµíd
(
PPP_FLAG
,ÅaûMB, 
NULL
);

1092 
pc
->
œ°XMô
 = 
	`sys_jiffõs
();

1094 
fcsOut
 = 
PPP_INITFCS
;

1096 
n
-- > 0) {

1097 
c
 = *
s
++;

1100 
fcsOut
 = 
	`PPP_FCS
(fcsOut, 
c
);

1103 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

1107 
c
 = ~
fcsOut
 & 0xFF;

1108 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

1109 
c
 = (~
fcsOut
 >> 8) & 0xFF;

1110 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

1111 
èûMB
 = 
	`µpAµíd
(
PPP_FLAG
,ÅaûMB, 
NULL
);

1115 i‡(!
èûMB
) {

1116 
	`PPPDEBUG
(
LOG_WARNING
,

1117 ("µpWrôe[%d]: AŒo¯î∏- dr›pögÖbu‡Àn=%d\n", 
pd
, 
hódMB
->
Àn
));

1119 
	`pbuf_‰ì
(
hódMB
);

1120 
	`LINK_STATS_INC
(
lök
.
memîr
);

1121 
	`LINK_STATS_INC
(
lök
.
¥Ÿîr
);

1122 
	`¢mp_öc_ifoutdisˇrds
(&
pc
->
√tif
);

1123  
PPPERR_ALLOC
;

1126 
	`PPPDEBUG
(
LOG_INFO
, ("µpWrôe[%d]:Üí=%d\n", 
pd
, 
hódMB
->
Àn
));

1128 
	`nPut
(
pc
, 
hódMB
);

1131  
PPPERR_NONE
;

1132 
	}
}

1139 
	$µp_£nd_c⁄fig
–
unô
, 
u16_t
 
mtu
, 
u32_t
 
asyncm≠
, 
pcomp
, 
accomp
)

1141 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
unô
];

1142 
i
;

1144 
pc
->
mtu
 = mtu;

1145 
pc
->
pcomp
 =Öcomp;

1146 
pc
->
accomp
 =áccomp;

1149 
i
 = 0; i < 32/8; i++) {

1150 
pc
->
outACCM
[
i
] = (
u_ch¨
)((
asyncm≠
 >> (8 * i)) & 0xFF);

1152 
	`PPPDEBUG
(
LOG_INFO
, ("ppp_send_config[%d]: outACCM=%X %X %X %X\n",

1153 
unô
,

1154 
pc
->
outACCM
[0],Öc->outACCM[1],Öc->outACCM[2],Öc->outACCM[3]));

1155 
	}
}

1162 
	$µp_£t_xaccm
(
unô
, 
ext_accm
 *
accm
)

1164 
	`SMEMCPY
(
µpC⁄åﬁ
[
unô
].
outACCM
, 
accm
, (
ext_accm
));

1165 
	`PPPDEBUG
(
LOG_INFO
, ("ppp_set_xaccm[%d]: outACCM=%X %X %X %X\n",

1166 
unô
,

1167 
µpC⁄åﬁ
[
unô
].
outACCM
[0],

1168 
µpC⁄åﬁ
[
unô
].
outACCM
[1],

1169 
µpC⁄åﬁ
[
unô
].
outACCM
[2],

1170 
µpC⁄åﬁ
[
unô
].
outACCM
[3]));

1171 
	}
}

1179 
	$µp_ªcv_c⁄fig
–
unô
, 
mru
, 
u32_t
 
asyncm≠
, 
pcomp
, 
accomp
)

1181 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
unô
];

1182 
i
;

1183 
	`SYS_ARCH_DECL_PROTECT
(
Àv
);

1185 
	`LWIP_UNUSED_ARG
(
accomp
);

1186 
	`LWIP_UNUSED_ARG
(
pcomp
);

1187 
	`LWIP_UNUSED_ARG
(
mru
);

1190 
	`SYS_ARCH_PROTECT
(
Àv
);

1191 
i
 = 0; i < 32 / 8; i++) {

1193 
pc
->
rx
.
öACCM
[
i
] = (
u_ch¨
)(
asyncm≠
 >> (i * 8));

1195 
	`SYS_ARCH_UNPROTECT
(
Àv
);

1196 
	`PPPDEBUG
(
LOG_INFO
, ("ppp_recv_config[%d]: inACCM=%X %X %X %X\n",

1197 
unô
,

1198 
pc
->
rx
.
öACCM
[0],Öc->rx.inACCM[1],Öc->rx.inACCM[2],Öc->rx.inACCM[3]));

1199 
	}
}

1209 
	$c˝_ã°
–
unô
, 
›t_Àn
, 
f‹_å™smô
, 
u_ch¨
 *
›t_±r
)

1212 
	}
}

1218 
	$c˝_Êags_£t
(
unô
, 
is›í
, 
isup
)

1221 
	}
}

1229 
	$c˝_Áèl_îr‹
(
unô
)

1233 
	}
}

1240 
	$gë_idÀ_time
(
u
, 
µp_idÀ
 *
ù
)

1243 
	`LWIP_UNUSED_ARG
(
u
);

1244 
	`LWIP_UNUSED_ARG
(
ù
);

1247 
	}
}

1258 
u32_t


1259 
	$GëMask
(
u32_t
 
addr
)

1261 
u32_t
 
mask
, 
nmask
;

1263 
	`ht⁄l
(
addr
);

1264 i‡(
	`IP_CLASSA
(
addr
)) {

1265 
nmask
 = 
IP_CLASSA_NET
;

1266 } i‡(
	`IP_CLASSB
(
addr
)) {

1267 
nmask
 = 
IP_CLASSB_NET
;

1269 
nmask
 = 
IP_CLASSC_NET
;

1273 
mask
 = 
sub√tMask
 | 
	`ht⁄l
(
nmask
);

1280  
mask
;

1281 
	}
}

1287 
	$sifvjcomp
(
pd
, 
vjcomp
, 
u8_t
 
cidcomp
, u8_à
maxcid
)

1289 #i‡
PPPOS_SUPPORT
 && 
VJ_SUPPORT


1290 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1292 
pc
->
vjE«bÀd
 = 
vjcomp
;

1293 
pc
->
vjComp
.
com¥essSlŸ
 = 
cidcomp
;

1294 
pc
->
vjComp
.
maxSlŸIndex
 = 
maxcid
;

1295 
	`PPPDEBUG
(
LOG_INFO
, ("sifvjcomp: VJ compressÉnable=%d slot=%d max slot=%d\n",

1296 
vjcomp
, 
cidcomp
, 
maxcid
));

1298 
	`LWIP_UNUSED_ARG
(
pd
);

1299 
	`LWIP_UNUSED_ARG
(
vjcomp
);

1300 
	`LWIP_UNUSED_ARG
(
cidcomp
);

1301 
	`LWIP_UNUSED_ARG
(
maxcid
);

1305 
	}
}

1310 
îr_t


1311 
	$µpifNëifInô
(
√tif
 *netif)

1313 
√tif
->
«me
[0] = 'p';

1314 
√tif
->
«me
[1] = 'p';

1315 
√tif
->
ouçut
 = 
µpifOuçut
;

1316 
√tif
->
mtu
 = 
	`µpMTU
(()(
size_t
Íëif->
°©e
);

1317 
√tif
->
Êags
 = 
NETIF_FLAG_POINTTOPOINT
 | 
NETIF_FLAG_LINK_UP
;

1318 #i‡
LWIP_NETIF_HOSTNAME


1322  
ERR_OK
;

1323 
	}
}

1330 
	$sifup
(
pd
)

1332 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1333 
°
 = 1;

1335 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1336 
°
 = 0;

1337 
	`PPPDEBUG
(
LOG_WARNING
, ("sifup[%d]: badÖ¨ms\n", 
pd
));

1339 
	`√tif_ªmove
(&
pc
->
√tif
);

1340 i‡(
	`√tif_add
(&
pc
->
√tif
, &pc->
addrs
.
our_ùaddr
, &pc->addrs.
√tmask
,

1341 &
pc
->
addrs
.
his_ùaddr
, (*)(
size_t
)
pd
, 
µpifNëifInô
, 
ù_öput
)) {

1342 
	`√tif_£t_up
(&
pc
->
√tif
);

1343 
pc
->
if_up
 = 1;

1344 
pc
->
îrCode
 = 
PPPERR_NONE
;

1346 
	`PPPDEBUG
(
LOG_DEBUG
, ("sifup: unô %d:ÜökSètusCB=%∞îrCode=%d\n", 
pd
, 
pc
->
lökSètusCB
,Öc->
îrCode
));

1347 i‡(
pc
->
lökSètusCB
) {

1348 
pc
->
	`lökSètusCB
’c->
lökSètusCtx
,Öc->
îrCode
, &pc->
addrs
);

1351 
°
 = 0;

1352 
	`PPPDEBUG
(
LOG_ERR
, ("sifup[%d]:Çëif_add faûed\n", 
pd
));

1356  
°
;

1357 
	}
}

1363 
	$si‚pmode
(
u
, 
¥Ÿo
, 
NPmode
 
mode
)

1365 
	`LWIP_UNUSED_ARG
(
u
);

1366 
	`LWIP_UNUSED_ARG
(
¥Ÿo
);

1367 
	`LWIP_UNUSED_ARG
(
mode
);

1369 
	}
}

1375 
	$sifdown
(
pd
)

1377 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1378 
°
 = 1;

1380 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1381 
°
 = 0;

1382 
	`PPPDEBUG
(
LOG_WARNING
, ("sifdown[%d]: badÖ¨ms\n", 
pd
));

1384 
pc
->
if_up
 = 0;

1386 
	`√tif_£t_down
(&
pc
->
√tif
);

1387 
	`√tif_ªmove
(&
pc
->
√tif
);

1388 
	`PPPDEBUG
(
LOG_DEBUG
, ("sifdown: unô %d:ÜökSètusCB=%∞îrCode=%d\n", 
pd
, 
pc
->
lökSètusCB
,Öc->
îrCode
));

1389 i‡(
pc
->
lökSètusCB
) {

1390 
pc
->
	`lökSètusCB
’c->
lökSètusCtx
, 
PPPERR_CONNECT
, 
NULL
);

1393  
°
;

1394 
	}
}

1406 
	$siÁddr
–
pd
, 
u32_t
 
o
, u32_à
h
, u32_à
m
, u32_à
ns1
, u32_à
ns2
)

1408 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1409 
°
 = 1;

1411 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1412 
°
 = 0;

1413 
	`PPPDEBUG
(
LOG_WARNING
, ("sifup[%d]: badÖ¨ms\n", 
pd
));

1415 
	`SMEMCPY
(&
pc
->
addrs
.
our_ùaddr
, &
o
, (o));

1416 
	`SMEMCPY
(&
pc
->
addrs
.
his_ùaddr
, &
h
, (h));

1417 
	`SMEMCPY
(&
pc
->
addrs
.
√tmask
, &
m
, (m));

1418 
	`SMEMCPY
(&
pc
->
addrs
.
dns1
, &
ns1
, (ns1));

1419 
	`SMEMCPY
(&
pc
->
addrs
.
dns2
, &
ns2
, (ns2));

1421  
°
;

1422 
	}
}

1432 
	$ciÁddr
–
pd
, 
u32_t
 
o
, u32_à
h
)

1434 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1435 
°
 = 1;

1437 
	`LWIP_UNUSED_ARG
(
o
);

1438 
	`LWIP_UNUSED_ARG
(
h
);

1439 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1440 
°
 = 0;

1441 
	`PPPDEBUG
(
LOG_WARNING
, ("sifup[%d]: badÖ¨ms\n", 
pd
));

1443 
	`IP4_ADDR
(&
pc
->
addrs
.
our_ùaddr
, 0,0,0,0);

1444 
	`IP4_ADDR
(&
pc
->
addrs
.
his_ùaddr
, 0,0,0,0);

1445 
	`IP4_ADDR
(&
pc
->
addrs
.
√tmask
, 255,255,255,0);

1446 
	`IP4_ADDR
(&
pc
->
addrs
.
dns1
, 0,0,0,0);

1447 
	`IP4_ADDR
(&
pc
->
addrs
.
dns2
, 0,0,0,0);

1449  
°
;

1450 
	}
}

1456 
	$sifdeÁu…rouã
(
pd
, 
u32_t
 
l
, u32_à
g
)

1458 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1459 
°
 = 1;

1461 
	`LWIP_UNUSED_ARG
(
l
);

1462 
	`LWIP_UNUSED_ARG
(
g
);

1464 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1465 
°
 = 0;

1466 
	`PPPDEBUG
(
LOG_WARNING
, ("sifup[%d]: badÖ¨ms\n", 
pd
));

1468 
	`√tif_£t_deÁu…
(&
pc
->
√tif
);

1473  
°
;

1474 
	}
}

1480 
	$cifdeÁu…rouã
(
pd
, 
u32_t
 
l
, u32_à
g
)

1482 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1483 
°
 = 1;

1485 
	`LWIP_UNUSED_ARG
(
l
);

1486 
	`LWIP_UNUSED_ARG
(
g
);

1488 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1489 
°
 = 0;

1490 
	`PPPDEBUG
(
LOG_WARNING
, ("sifup[%d]: badÖ¨ms\n", 
pd
));

1492 
	`√tif_£t_deÁu…
(
NULL
);

1495  
°
;

1496 
	}
}

1502 #i‡
PPPOS_SUPPORT
 && 
PPP_INPROC_OWNTHREAD


1506 
	$µpI≈utThªad
(*
¨g
)

1508 
cou¡
;

1509 
PPPC⁄åﬁRx
 *
p¸x
 = 
¨g
;

1511 
l˝_pha£
[
p¸x
->
pd
] !
PHASE_DEAD
) {

1512 
cou¡
 = 
	`sio_ªad
(
p¸x
->
fd
,Ö¸x->
rxbuf
, 
PPPOS_RX_BUFSIZE
);

1513 if(
cou¡
 > 0) {

1514 
	`µpInProc
(
p¸x
,Ö¸x->
rxbuf
, 
cou¡
);

1517 
	`sys_m¶ìp
(1);

1520 
	}
}

1523 #i‡
PPPOE_SUPPORT


1526 
	$µpOvîEthî√tInôFaûed
(
pd
)

1528 
PPPC⁄åﬁ
* 
pc
;

1530 
	`µpHup
(
pd
);

1531 
	`µpSt›
(
pd
);

1533 
pc
 = &
µpC⁄åﬁ
[
pd
];

1534 
	`µp€_de°roy
(&
pc
->
√tif
);

1535 
pc
->
›íFœg
 = 0;

1537 if(
pc
->
lökSètusCB
) {

1538 
pc
->
	`lökSètusCB
’c->
lökSètusCtx
,Öc->
îrCode
 ?Öc->îrCodê: 
PPPERR_PROTOCOL
, 
NULL
);

1540 
	}
}

1543 
	$µpOvîEthî√tLökSètusCB
(
pd
, 
up
)

1545 if(
up
) {

1546 
	`PPPDEBUG
(
LOG_INFO
, ("µpOvîEthî√tLökSètusCB: unô %d: C⁄√˘ög\n", 
pd
));

1547 
	`µpSèπ
(
pd
);

1549 
	`µpOvîEthî√tInôFaûed
(
pd
);

1551 
	}
}

1554 
pbuf
 *

1555 
	$µpSögÀBuf
(
pbuf
 *
p
)

1557 
pbuf
 *
q
, *
b
;

1558 
u_ch¨
 *
∂
;

1560 if(
p
->
tŸ_Àn
 =p->
Àn
) {

1561  
p
;

1564 
q
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
p
->
tŸ_Àn
, 
PBUF_RAM
);

1565 if(!
q
) {

1566 
	`PPPDEBUG
(
LOG_ERR
,

1567 ("µpSögÀBuf: u«bÀÅÿÆlo¯√w bu‡(%d)\n", 
p
->
tŸ_Àn
));

1568  
p
;

1571 
b
 = 
p
, 
∂
 = 
q
->
∑ylﬂd
; b !
NULL
; b = b->
√xt
) {

1572 
	`MEMCPY
(
∂
, 
b
->
∑ylﬂd
, b->
Àn
);

1573 
∂
 +
b
->
Àn
;

1576 
	`pbuf_‰ì
(
p
);

1578  
q
;

1579 
	}
}

1581 
	sµpI≈utHódî
 {

1582 
	munô
;

1583 
u16_t
 
	m¥Ÿo
;

1591 
	$µpI≈ut
(*
¨g
)

1593 
pbuf
 *
nb
 = (pbu‡*)
¨g
;

1594 
u16_t
 
¥Ÿocﬁ
;

1595 
pd
;

1597 
pd
 = ((
µpI≈utHódî
 *)
nb
->
∑ylﬂd
)->
unô
;

1598 
¥Ÿocﬁ
 = ((
µpI≈utHódî
 *)
nb
->
∑ylﬂd
)->
¥Ÿo
;

1600 if(
	`pbuf_hódî
(
nb
, -()(
µpI≈utHódî
))) {

1601 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

1602 
dr›
;

1605 
	`LINK_STATS_INC
(
lök
.
ªcv
);

1606 
	`¢mp_öc_iföuˇ°pkts
(&
µpC⁄åﬁ
[
pd
].
√tif
);

1607 
	`¢mp_add_iföo˘ës
(&
µpC⁄åﬁ
[
pd
].
√tif
, 
nb
->
tŸ_Àn
);

1614 if((
l˝_pha£
[
pd
] <
PHASE_AUTHENTICATE
Ë&& (
¥Ÿocﬁ
 !
PPP_LCP
)) {

1615 if(!((
¥Ÿocﬁ
 =
PPP_LQR
Ë|| (¥Ÿocﬁ =
PPP_PAP
Ë|| (¥Ÿocﬁ =
PPP_CHAP
)) ||

1616 (
l˝_pha£
[
pd
] !
PHASE_AUTHENTICATE
)) {

1617 
	`PPPDEBUG
(
LOG_INFO
, ("µpI≈ut: disˇrdögÖrŸÿ0x%"
X16_F
" i¿pha£ %d\n", 
¥Ÿocﬁ
, 
l˝_pha£
[
pd
]));

1618 
dr›
;

1622 
¥Ÿocﬁ
) {

1623 
PPP_VJC_COMP
:

1624 #i‡
PPPOS_SUPPORT
 && 
VJ_SUPPORT


1625 
	`PPPDEBUG
(
LOG_INFO
, ("µpI≈ut[%d]: vj_com∞öÖbu‡Àn=%d\n", 
pd
, 
nb
->
Àn
));

1630 i‡((
	`vj_uncom¥ess_t˝
(&
nb
, &
µpC⁄åﬁ
[
pd
].
vjComp
Ë>0Ë&& (µpC⁄åﬁ[pd].
√tif
.
öput
)) {

1631 
µpC⁄åﬁ
[
pd
].
√tif
.
	`öput
(
nb
, &pppControl[pd].netif);

1635 
	`PPPDEBUG
(
LOG_WARNING
, ("µpI≈ut[%d]: Dr›pög VJ com¥es£d\n", 
pd
));

1638 
	`PPPDEBUG
(
LOG_INFO
, ("µpI≈ut[%d]: dr› VJ Com∞ö %d:%s\n", 
pd
, 
nb
->
Àn
,Çb->
∑ylﬂd
));

1642 
PPP_VJC_UNCOMP
:

1643 #i‡
PPPOS_SUPPORT
 && 
VJ_SUPPORT


1644 
	`PPPDEBUG
(
LOG_INFO
, ("µpI≈ut[%d]: vj_u¿öÖbu‡Àn=%d\n", 
pd
, 
nb
->
Àn
));

1649 i‡((
	`vj_uncom¥ess_uncomp
(
nb
, &
µpC⁄åﬁ
[
pd
].
vjComp
Ë>0Ë&&ÖµC⁄åﬁ[pd].
√tif
.
öput
) {

1650 
µpC⁄åﬁ
[
pd
].
√tif
.
	`öput
(
nb
, &pppControl[pd].netif);

1654 
	`PPPDEBUG
(
LOG_WARNING
, ("µpI≈ut[%d]: Dr›pög VJ uncom¥es£d\n", 
pd
));

1657 
	`PPPDEBUG
(
LOG_INFO
,

1659 
pd
, 
nb
->
Àn
, 
	`LWIP_MIN
“b->À¿* 2, 40),Çb->
∑ylﬂd
));

1663 
PPP_IP
:

1664 
	`PPPDEBUG
(
LOG_INFO
, ("µpI≈ut[%d]: i∞öÖbu‡Àn=%d\n", 
pd
, 
nb
->
Àn
));

1665 i‡(
µpC⁄åﬁ
[
pd
].
√tif
.
öput
) {

1666 
µpC⁄åﬁ
[
pd
].
√tif
.
	`öput
(
nb
, &pppControl[pd].netif);

1672 
¥Ÿít
 *
¥Ÿp
;

1673 
i
;

1678 
i
 = 0; (
¥Ÿp
 = 
µp_¥Ÿocﬁs
[i]Ë!
NULL
; ++i) {

1679 i‡(
¥Ÿp
->
¥Ÿocﬁ
 =¥Ÿocﬁ &&ÖrŸp->
íabÀd_Êag
) {

1680 
	`PPPDEBUG
(
LOG_INFO
, ("µpI≈ut[%d]: %†Àn=%d\n", 
pd
, 
¥Ÿp
->
«me
, 
nb
->
Àn
));

1681 
nb
 = 
	`µpSögÀBuf
(nb);

1682 (*
¥Ÿp
->
öput
)(
pd
, 
nb
->
∑ylﬂd
,Çb->
Àn
);

1683 
	`PPPDEBUG
(
LOG_DETAIL
, ("µpI≈ut[%d]:ÖackëÖro˚s£d\n", 
pd
));

1684 
out
;

1689 
	`PPPDEBUG
(
LOG_INFO
, ("µpI≈ut[%d]:Ñeje˘ög unsuµ‹ãdÖrŸÿ0x%"
X16_F
"Üí=%d\n", 
pd
, 
¥Ÿocﬁ
, 
nb
->
Àn
));

1690 i‡(
	`pbuf_hódî
(
nb
, (
¥Ÿocﬁ
))) {

1691 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

1692 
dr›
;

1694 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


1695 
¥Ÿocﬁ
 = 
	`ht⁄s
(protocol);

1697 
	`SMEMCPY
(
nb
->
∑ylﬂd
, &
¥Ÿocﬁ
, (protocol));

1698 
	`l˝_•rŸªj
(
pd
, 
nb
->
∑ylﬂd
,Çb->
Àn
);

1703 
dr›
:

1704 
	`LINK_STATS_INC
(
lök
.
dr›
);

1705 
	`¢mp_öc_ifödisˇrds
(&
µpC⁄åﬁ
[
pd
].
√tif
);

1707 
out
:

1708 
	`pbuf_‰ì
(
nb
);

1710 
	}
}

1712 #i‡
PPPOS_SUPPORT


1717 
	$µpDr›
(
PPPC⁄åﬁRx
 *
p¸x
)

1719 i‡(
p¸x
->
öHód
 !
NULL
) {

1721 
	`PPPDEBUG
(
LOG_INFO
, ("µpDr›: %d:%.*H\n", 
p¸x
->
öHód
->
Àn
, 
	`mö
(60,Ö¸x->öHód->À¿* 2),Ö¸x->öHód->
∑ylﬂd
));

1723 
	`PPPDEBUG
(
LOG_INFO
, ("µpDr›:Öbu‡Àn=%d,ádd∏%p\n", 
p¸x
->
öHód
->
Àn
, (*)pcrx->inHead));

1724 i‡(
p¸x
->
öTaû
 && (p¸x->öTaû !p¸x->
öHód
)) {

1725 
	`pbuf_‰ì
(
p¸x
->
öTaû
);

1727 
	`pbuf_‰ì
(
p¸x
->
öHód
);

1728 
p¸x
->
öHód
 = 
NULL
;

1729 
p¸x
->
öTaû
 = 
NULL
;

1731 #i‡
VJ_SUPPORT


1732 
	`vj_uncom¥ess_îr
(&
µpC⁄åﬁ
[
p¸x
->
pd
].
vjComp
);

1735 
	`LINK_STATS_INC
(
lök
.
dr›
);

1736 
	`¢mp_öc_ifödisˇrds
(&
µpC⁄åﬁ
[
p¸x
->
pd
].
√tif
);

1737 
	}
}

1747 
	$µpos_öput
(
pd
, 
u_ch¨
* 
d©a
, 
Àn
)

1749 
	`µpInProc
(&
µpC⁄åﬁ
[
pd
].
rx
, 
d©a
, 
Àn
);

1750 
	}
}

1756 
	$µpInProc
(
PPPC⁄åﬁRx
 *
p¸x
, 
u_ch¨
 *
s
, 
l
)

1758 
pbuf
 *
√xtNBuf
;

1759 
u_ch¨
 
curCh¨
;

1760 
u_ch¨
 
esˇ≥d
;

1761 
	`SYS_ARCH_DECL_PROTECT
(
Àv
);

1763 
	`PPPDEBUG
(
LOG_DEBUG
, ("µpInProc[%d]: gŸ %d byãs\n", 
p¸x
->
pd
, 
l
));

1764 
l
-- > 0) {

1765 
curCh¨
 = *
s
++;

1767 
	`SYS_ARCH_PROTECT
(
Àv
);

1768 
esˇ≥d
 = 
	`ESCAPE_P
(
p¸x
->
öACCM
, 
curCh¨
);

1769 
	`SYS_ARCH_UNPROTECT
(
Àv
);

1771 i‡(
esˇ≥d
) {

1777 i‡(
curCh¨
 =
PPP_ESCAPE
) {

1778 
p¸x
->
öEsˇ≥d
 = 1;

1780 } i‡(
curCh¨
 =
PPP_FLAG
) {

1782 i‡(
p¸x
->
öSèã
 <
PDADDRESS
) {

1785 } i‡(
p¸x
->
öSèã
 < 
PDDATA
) {

1786 
	`PPPDEBUG
(
LOG_WARNING
,

1788 
p¸x
->
pd
,Ö¸x->
öSèã
));

1789 
	`LINK_STATS_INC
(
lök
.
À√º
);

1790 
	`µpDr›
(
p¸x
);

1792 } i‡(
p¸x
->
öFCS
 !
PPP_GOODFCS
) {

1793 
	`PPPDEBUG
(
LOG_INFO
,

1794 ("µpInProc[%d]: Dr›pög bad fc†0x%"
X16_F
"Öroto=0x%"X16_F"\n",

1795 
p¸x
->
pd
,Ö¸x->
öFCS
,Ö¸x->
öPrŸocﬁ
));

1797 
	`LINK_STATS_INC
(
lök
.
chkîr
);

1798 
	`µpDr›
(
p¸x
);

1801 
pbuf
 *
öp
;

1803 if(
p¸x
->
öTaû
->
Àn
 >= 2) {

1804 
p¸x
->
öTaû
->
Àn
 -= 2;

1806 
p¸x
->
öTaû
->
tŸ_Àn
 =Ö¸x->öTaû->
Àn
;

1807 i‡(
p¸x
->
öTaû
 !p¸x->
öHód
) {

1808 
	`pbuf_ˇt
(
p¸x
->
öHód
,Ö¸x->
öTaû
);

1811 
p¸x
->
öTaû
->
tŸ_Àn
 =Ö¸x->öTaû->
Àn
;

1812 i‡(
p¸x
->
öTaû
 !p¸x->
öHód
) {

1813 
	`pbuf_ˇt
(
p¸x
->
öHód
,Ö¸x->
öTaû
);

1816 
	`pbuf_ªÆloc
(
p¸x
->
öHód
,Ö¸x->öHód->
tŸ_Àn
 - 2);

1820 
öp
 = 
p¸x
->
öHód
;

1822 
p¸x
->
öHód
 = 
NULL
;

1823 
p¸x
->
öTaû
 = 
NULL
;

1824 #i‡
PPP_INPROC_MULTITHREADED


1825 if(
	`t˝ù_ˇŒback_wôh_block
(
µpI≈ut
, 
öp
, 0Ë!
ERR_OK
) {

1826 
	`PPPDEBUG
(
LOG_ERR
, ("µpInProc[%d]:Å˝ù_ˇŒback(ËÁûed, dr›pögÖackë\n", 
p¸x
->
pd
));

1827 
	`pbuf_‰ì
(
öp
);

1828 
	`LINK_STATS_INC
(
lök
.
dr›
);

1829 
	`¢mp_öc_ifödisˇrds
(&
µpC⁄åﬁ
[
p¸x
->
pd
].
√tif
);

1832 
	`µpI≈ut
(
öp
);

1837 
p¸x
->
öFCS
 = 
PPP_INITFCS
;

1838 
p¸x
->
öSèã
 = 
PDADDRESS
;

1839 
p¸x
->
öEsˇ≥d
 = 0;

1843 
	`PPPDEBUG
(
LOG_WARNING
,

1844 ("µpInProc[%d]: Dr›pög ACCM ch¨ <%d>\n", 
p¸x
->
pd
, 
curCh¨
));

1849 i‡(
p¸x
->
öEsˇ≥d
) {

1850 
p¸x
->
öEsˇ≥d
 = 0;

1851 
curCh¨
 ^
PPP_TRANS
;

1855 
p¸x
->
öSèã
) {

1856 
PDIDLE
:

1859 i‡(
curCh¨
 !
PPP_ALLSTATIONS
) {

1864 
PDSTART
:

1866 
p¸x
->
öFCS
 = 
PPP_INITFCS
;

1869 
PDADDRESS
:

1870 i‡(
curCh¨
 =
PPP_ALLSTATIONS
) {

1871 
p¸x
->
öSèã
 = 
PDCONTROL
;

1876 
PDCONTROL
:

1878 i‡(
curCh¨
 =
PPP_UI
) {

1879 
p¸x
->
öSèã
 = 
PDPROTOCOL1
;

1884 
	`PPPDEBUG
(
LOG_WARNING
,

1885 ("µpInProc[%d]: InvÆid c⁄åﬁ <%d>\n", 
p¸x
->
pd
, 
curCh¨
));

1886 
p¸x
->
öSèã
 = 
PDSTART
;

1889 
PDPROTOCOL1
:

1892 i‡(
curCh¨
 & 1) {

1893 
p¸x
->
öPrŸocﬁ
 = 
curCh¨
;

1894 
p¸x
->
öSèã
 = 
PDDATA
;

1896 
p¸x
->
öPrŸocﬁ
 = (
u_öt
)
curCh¨
 << 8;

1897 
p¸x
->
öSèã
 = 
PDPROTOCOL2
;

1900 
PDPROTOCOL2
:

1901 
p¸x
->
öPrŸocﬁ
 |
curCh¨
;

1902 
p¸x
->
öSèã
 = 
PDDATA
;

1904 
PDDATA
:

1906 i‡(
p¸x
->
öTaû
 =
NULL
 ||Ö¸x->öTaû->
Àn
 =
PBUF_POOL_BUFSIZE
) {

1907 i‡(
p¸x
->
öTaû
 !
NULL
) {

1908 
p¸x
->
öTaû
->
tŸ_Àn
 =Ö¸x->öTaû->
Àn
;

1909 i‡(
p¸x
->
öTaû
 !p¸x->
öHód
) {

1910 
	`pbuf_ˇt
(
p¸x
->
öHód
,Ö¸x->
öTaû
);

1912 
p¸x
->
öTaû
 = 
NULL
;

1916 
√xtNBuf
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 0, 
PBUF_POOL
);

1917 i‡(
√xtNBuf
 =
NULL
) {

1921 
	`PPPDEBUG
(
LOG_ERR
, ("µpInProc[%d]: NO FREE MBUFS!\n", 
p¸x
->
pd
));

1922 
	`LINK_STATS_INC
(
lök
.
memîr
);

1923 
	`µpDr›
(
p¸x
);

1924 
p¸x
->
öSèã
 = 
PDSTART
;

1927 i‡(
p¸x
->
öHód
 =
NULL
) {

1928 
µpI≈utHódî
 *
pih
 = 
√xtNBuf
->
∑ylﬂd
;

1930 
pih
->
unô
 = 
p¸x
->
pd
;

1931 
pih
->
¥Ÿo
 = 
p¸x
->
öPrŸocﬁ
;

1933 
√xtNBuf
->
Àn
 +(*
pih
);

1935 
p¸x
->
öHód
 = 
√xtNBuf
;

1937 
p¸x
->
öTaû
 = 
√xtNBuf
;

1940 ((
u_ch¨
*)
p¸x
->
öTaû
->
∑ylﬂd
)[p¸x->öTaû->
Àn
++] = 
curCh¨
;

1945 
p¸x
->
öFCS
 = 
	`PPP_FCS
’¸x->öFCS, 
curCh¨
);

1949 
	`avR™domize
();

1950 
	}
}

1953 #i‡
PPPOE_SUPPORT


1955 
	$µpInProcOvîEthî√t
(
pd
, 
pbuf
 *
pb
)

1957 
µpI≈utHódî
 *
pih
;

1958 
u16_t
 
öPrŸocﬁ
;

1960 if(
pb
->
Àn
 < (
öPrŸocﬁ
)) {

1961 
	`PPPDEBUG
(
LOG_ERR
, ("pppInProcOverEthernet:Åoo small forÖrotocol field\n"));

1962 
dr›
;

1965 
öPrŸocﬁ
 = (((
u8_t
 *)
pb
->
∑ylﬂd
)[0] << 8) | ((u8_t*)pb->payload)[1];

1968 i‡(
	`pbuf_hódî
(
pb
, (*
pih
Ë- (
öPrŸocﬁ
)) != 0) {

1969 
	`PPPDEBUG
(
LOG_ERR
, ("pppInProcOverEthernet: couldÇotállocateÑoom for header\n"));

1970 
dr›
;

1973 
pih
 = 
pb
->
∑ylﬂd
;

1975 
pih
->
unô
 = 
pd
;

1976 
pih
->
¥Ÿo
 = 
öPrŸocﬁ
;

1979 
	`µpI≈ut
(
pb
);

1982 
dr›
:

1983 
	`LINK_STATS_INC
(
lök
.
dr›
);

1984 
	`¢mp_öc_ifödisˇrds
(&
µpC⁄åﬁ
[
pd
].
√tif
);

1985 
	`pbuf_‰ì
(
pb
);

1987 
	}
}

1990 #i‡
LWIP_NETIF_STATUS_CALLBACK


1999 
	$µp_£t_√tif_°©usˇŒback
(
pd
, 
√tif_°©us_ˇŒback_‚
 
°©us_ˇŒback
)

2001 
	`√tif_£t_°©us_ˇŒback
(&
µpC⁄åﬁ
[
pd
].
√tif
, 
°©us_ˇŒback
);

2002 
	}
}

2005 #i‡
LWIP_NETIF_LINK_CALLBACK


2014 
	$µp_£t_√tif_lökˇŒback
(
pd
, 
√tif_°©us_ˇŒback_‚
 
lök_ˇŒback
)

2016 
	`√tif_£t_lök_ˇŒback
(&
µpC⁄åﬁ
[
pd
].
√tif
, 
lök_ˇŒback
);

2017 
	}
}

	@netif/ppp/ppp.h

34 #i‚de‡
PPP_H


35 
	#PPP_H


	)

37 
	~"lwù/›t.h
"

39 #i‡
PPP_SUPPORT


41 
	~"lwù/def.h
"

42 
	~"lwù/sio.h
"

43 
	~"lwù/°©s.h
"

44 
	~"lwù/mem.h
"

45 
	~"lwù/√tif.h
"

46 
	~"lwù/sys.h
"

47 
	~"lwù/timîs.h
"

51 
	#PPP_ADDITIONAL_CALLBACKS
 0

	)

54 #i‡
CBCP_SUPPORT


57 #i‡
CCP_SUPPORT


107 
	#TIMEOUT
(
f
, 
a
, 
t
Ëdÿ{ 
	`sys_u¡imeout
((f), (a)); 
	`sys_timeout
(—)*1000, (f), (a)); } 0)

	)

108 
	#UNTIMEOUT
(
f
, 
a
Ë
	`sys_u¡imeout
((f), (a))

	)

111 #i‚de‡
__u_ch¨_deföed


114 
	tu_l⁄g
;

115 
	tu_öt
;

116 
	tu_sh‹t
;

117 
	tu_ch¨
;

129 
	#PPP_HDRLEN
 4

	)

130 
	#PPP_FCSLEN
 2

	)

136 
	#PPP_ALLSTATIONS
 0xf‡

	)

137 
	#PPP_UI
 0x03

	)

138 
	#PPP_FLAG
 0x7ê

	)

139 
	#PPP_ESCAPE
 0x7d

	)

140 
	#PPP_TRANS
 0x20

	)

145 
	#PPP_IP
 0x21

	)

146 
	#PPP_AT
 0x29

	)

147 
	#PPP_VJC_COMP
 0x2d

	)

148 
	#PPP_VJC_UNCOMP
 0x2‡

	)

149 
	#PPP_COMP
 0xfd

	)

150 
	#PPP_IPCP
 0x8021

	)

151 
	#PPP_ATCP
 0x8029

	)

152 
	#PPP_CCP
 0x80fd

	)

153 
	#PPP_LCP
 0xc021

	)

154 
	#PPP_PAP
 0xc023

	)

155 
	#PPP_LQR
 0xc025

	)

156 
	#PPP_CHAP
 0xc223

	)

157 
	#PPP_CBCP
 0xc029

	)

162 
	#PPP_INITFCS
 0xfff‡

	)

163 
	#PPP_GOODFCS
 0xf0b8

	)

164 
	#PPP_FCS
(
fcs
, 
c
Ë(((fcsË>> 8Ë^ 
fc°ab
[((fcsË^ (c)Ë& 0xff])

	)

169 
u_ch¨
 
	text_accm
[32];

174 
	eNPmode
 {

175 
	mNPMODE_PASS
,

176 
	mNPMODE_DROP
,

177 
	mNPMODE_ERROR
,

178 
	mNPMODE_QUEUE


187 
	#GETCHAR
(
c
, 
˝
) { \

188 (
c
Ë*(
˝
)++; \

189 }

	)

190 
	#PUTCHAR
(
c
, 
˝
) { \

191 *(
˝
)++ = (
u_ch¨
Ë(
c
); \

192 }

	)

195 
	#GETSHORT
(
s
, 
˝
) { \

196 (
s
Ë*(
˝
); (cp)++; (s) <<= 8; \

197 (
s
Ë|*(
˝
); (cp)++; \

198 }

	)

199 
	#PUTSHORT
(
s
, 
˝
) { \

200 *(
˝
)++ = (
u_ch¨
Ë((
s
) >> 8); \

201 *(
˝
)++ = (
u_ch¨
Ë(
s
 & 0xff); \

202 }

	)

204 
	#GETLONG
(
l
, 
˝
) { \

205 (
l
Ë*(
˝
); (cp)++; (l) <<= 8; \

206 (
l
Ë|*(
˝
); (cp)++; (l) <<= 8; \

207 (
l
Ë|*(
˝
); (cp)++; (l) <<= 8; \

208 (
l
Ë|*(
˝
); (cp)++; \

209 }

	)

210 
	#PUTLONG
(
l
, 
˝
) { \

211 *(
˝
)++ = (
u_ch¨
Ë((
l
) >> 24); \

212 *(
˝
)++ = (
u_ch¨
Ë((
l
) >> 16); \

213 *(
˝
)++ = (
u_ch¨
Ë((
l
) >> 8); \

214 *(
˝
)++ = (
u_ch¨
Ë(
l
); \

215 }

	)

218 
	#INCPTR
(
n
, 
˝
Ë((˝Ë+“))

	)

219 
	#DECPTR
(
n
, 
˝
Ë((˝Ë-“))

	)

221 
	#BCMP
(
s0
, 
s1
, 
l
Ë
	`memcmp
((
u_ch¨
 *)(s0), (u_ch¨ *)(s1), (l))

	)

222 
	#BCOPY
(
s
, 
d
, 
l
Ë
	`MEMCPY
((d), (s), (l))

	)

223 
	#BZERO
(
s
, 
n
Ë
	`mem£t
(s, 0,Ç)

	)

225 #i‡
PPP_DEBUG


226 
	#PRINTMSG
(
m
, 
l
Ë{ m[l] = '\0'; 
	`LWIP_DEBUGF
(
LOG_INFO
, ("RemŸêmesßge: %s\n", m)); }

	)

228 
	#PRINTMSG
(
m
, 
l
)

	)

234 
	#MAKEHEADER
(
p
, 
t
) { \

235 
	`PUTCHAR
(
PPP_ALLSTATIONS
, 
p
); \

236 
	`PUTCHAR
(
PPP_UI
, 
p
); \

237 
	`PUTSHORT
(
t
, 
p
); }

	)

244 
	#PPPERR_NONE
 0

	)

245 
	#PPPERR_PARAM
 -1

	)

246 
	#PPPERR_OPEN
 -2

	)

247 
	#PPPERR_DEVICE
 -3

	)

248 
	#PPPERR_ALLOC
 -4

	)

249 
	#PPPERR_USER
 -5

	)

250 
	#PPPERR_CONNECT
 -6

	)

251 
	#PPPERR_AUTHFAIL
 -7

	)

252 
	#PPPERR_PROTOCOL
 -8

	)

261 
	#PPPCTLG_UPSTATUS
 100

	)

262 
	#PPPCTLS_ERRCODE
 101

	)

263 
	#PPPCTLG_ERRCODE
 102

	)

264 
	#PPPCTLG_FD
 103

	)

274 
	s¥Ÿít
 {

275 
u_sh‹t
 
	m¥Ÿocﬁ
;

277 (*
	möô
Ë(
	munô
);

279 (*
	möput
Ë(
	munô
, 
u_ch¨
 *
	mpkt
, 
	mÀn
);

281 (*
	m¥Ÿªj
Ë(
	munô
);

283 (*
	mlowîup
Ë(
	munô
);

285 (*
	mlowîdown
Ë(
	munô
);

287 (*
	m›í
Ë(
	munô
);

289 (*
	m˛o£
Ë(
	munô
, *
	mªas⁄
);

290 #i‡
PPP_ADDITIONAL_CALLBACKS


292 (*
	m¥öçkt
Ë(
u_ch¨
 *
	mpkt
, 
	mÀn
,

293 (*
	m¥öãr
) (*, *, ...),

294 *
	m¨g
);

296 (*
	md©aöput
Ë(
	munô
, 
u_ch¨
 *
	mpkt
, 
	mÀn
);

298 
	míabÀd_Êag
;

299 *
	m«me
;

300 #i‡
PPP_ADDITIONAL_CALLBACKS


302 (*
	mcheck_›ti⁄s
Ë(
	mu_l⁄g
);

304 (*
	mdem™d_c⁄f
Ë(
	munô
);

306 (*
	ma˘ive_pkt
Ë(
u_ch¨
 *
	mpkt
, 
	mÀn
);

314 
	sµp_idÀ
 {

315 
u_sh‹t
 
	mxmô_idÀ
;

316 
u_sh‹t
 
	mªcv_idÀ
;

319 
	sµp_£âögs
 {

321 
u_öt
 
	mdißbÀ_deÁu…ù
 : 1;

322 
u_öt
 
	mauth_ªquúed
 : 1;

323 
u_öt
 
	mex∂icô_ªmŸe
 : 1;

324 
u_öt
 
	mªfu£_∑p
 : 1;

325 
u_öt
 
	mªfu£_ch≠
 : 1;

326 
u_öt
 
	mu£ho°«me
 : 1;

327 
u_öt
 
	mu£≥îdns
 : 1;

329 
u_sh‹t
 
	midÀ_time_limô
;

330 
	mmaxc⁄√˘
;

332 
	mu£r
 [
MAXNAMELEN
 + 1];

333 
	m∑sswd
 [
MAXSECRETLEN
 + 1];

334 
	mour_«me
 [
MAXNAMELEN
 + 1];

335 
	mªmŸe_«me
[
MAXNAMELEN
 + 1];

338 
	sµp_addrs
 {

339 
ù_addr_t
 
	mour_ùaddr
, 
	mhis_ùaddr
, 
	m√tmask
, 
	mdns1
, 
	mdns2
;

347 
u_ch¨
 
ouçackë_buf
[
NUM_PPP
][
PPP_MRU
+
PPP_HDRLEN
];

349 
µp_£âögs
Öpp_settings;

351 
¥Ÿít
 *
µp_¥Ÿocﬁs
[];

359 
µpInô
();

380 
	eµpAuthTy≥
 {

381 
	mPPPAUTHTYPE_NONE
,

382 
	mPPPAUTHTYPE_ANY
,

383 
	mPPPAUTHTYPE_PAP
,

384 
	mPPPAUTHTYPE_CHAP


387 
µpSëAuth
(
µpAuthTy≥
 
authTy≥
, c⁄° *
u£r
, c⁄° *
∑sswd
);

396 
µpOvîSîülO≥n
(
sio_fd_t
 
fd
, (*
lökSètusCB
)(*
˘x
, 
îrCode
, *
¨g
), *
lökSètusCtx
);

401 
	`µpOvîEthî√tO≥n
(
√tif
 *
ëhif
, c⁄° *
£rvi˚_«me
, c⁄° *
c⁄˚¡øt‹_«me
, (*
lökSètusCB
)(*
˘x
, 
îrCode
, *
¨g
), *
lökSètusCtx
);

404 
	#µpO≥n
(
fd
,
cb
,
ls
Ë
	`µpOvîSîülO≥n
(fd,cb,ls)

	)

411 
	`µpClo£
(
pd
);

416 
	`µpSigHUP
(
pd
);

422 
	`µpIOCé
(
pd
, 
cmd
, *
¨g
);

427 
u_sh‹t
 
	`µpMTU
(
pd
);

433 
	`µpWrôe
(
pd
, c⁄° 
u_ch¨
 *
s
, 
n
);

435 
	`µpInProcOvîEthî√t
(
pd
, 
pbuf
 *
pb
);

437 
pbuf
 *
	`µpSögÀBuf
(pbu‡*
p
);

439 
	`µpLökTîmö©ed
(
pd
);

441 
	`µpLökDown
(
pd
);

443 
	`µpos_öput
(
pd
, 
u_ch¨
* 
d©a
, 
Àn
);

446 
	`µp_£nd_c⁄fig
 (, 
u16_t
, 
u32_t
, , );

448 
	`µp_£t_xaccm
 (, 
ext_accm
 *);

450 
	`µp_ªcv_c⁄fig
 (, , 
u32_t
, , );

452 
	`gë_idÀ_time
 (, 
µp_idÀ
 *);

455 
	`sifvjcomp
 (, , 
u8_t
, u8_t);

457 
	`sifup
 ();

459 
	`si‚pmode
 (
u
, 
¥Ÿo
, 
NPmode
 
mode
);

461 
	`sifdown
 ();

463 
	`siÁddr
 (, 
u32_t
, u32_t, u32_t, u32_t, u32_t);

465 
	`ciÁddr
 (, 
u32_t
, u32_t);

467 
	`sifdeÁu…rouã
 (, 
u32_t
, u32_t);

469 
	`cifdeÁu…rouã
 (, 
u32_t
, u32_t);

472 
u32_t
 
	`GëMask
 (u32_t);

474 #i‡
LWIP_NETIF_STATUS_CALLBACK


475 
	`µp_£t_√tif_°©usˇŒback
(
pd
, 
√tif_°©us_ˇŒback_‚
 
°©us_ˇŒback
);

477 #i‡
LWIP_NETIF_LINK_CALLBACK


478 
	`µp_£t_√tif_lökˇŒback
(
pd
, 
√tif_°©us_ˇŒback_‚
 
lök_ˇŒback
);

	@netif/ppp/ppp_oe.c

71 
	~"lwù/›t.h
"

73 #i‡
PPPOE_SUPPORT


75 
	~"√tif/µp_€.h
"

77 
	~"µp.h
"

78 
	~"µpdebug.h
"

80 
	~"lwù/timîs.h
"

81 
	~"lwù/memp.h
"

83 
	~<°rög.h
>

84 
	~<°dio.h
>

88 
	#PPPOE_ADD_16
(
PTR
, 
VAL
) \

89 *(
PTR
)++ = (
u8_t
)((
VAL
) / 256); \

90 *(
PTR
)++ = (
u8_t
)((
VAL
Ë% 256)

	)

93 
	#PPPOE_ADD_HEADER
(
PTR
, 
CODE
, 
SESS
, 
LEN
) \

94 *(
PTR
)++ = 
PPPOE_VERTYPE
; \

95 *(
PTR
)++ = (
CODE
); \

96 
	`PPPOE_ADD_16
(
PTR
, 
SESS
); \

97 
	`PPPOE_ADD_16
(
PTR
, 
LEN
)

	)

99 
	#PPPOE_DISC_TIMEOUT
 (5*1000Ë

	)

100 
	#PPPOE_SLOW_RETRY
 (60*1000Ë

	)

101 
	#PPPOE_DISC_MAXPADI
 4

	)

102 
	#PPPOE_DISC_MAXPADR
 2

	)

104 #ifde‡
PPPOE_SERVER


107 
	#IFF_PASSIVE
 
IFF_LINK0


	)

110 #i‚de‡
PPPOE_ERRORSTRING_LEN


111 
	#PPPOE_ERRORSTRING_LEN
 64

	)

113 
	gµp€_îr‹_tmp
[
PPPOE_ERRORSTRING_LEN
];

117 
µp€_di•©ch_disc_pkt
(
√tif
 *, 
pbuf
 *);

120 
µp€_do_disc⁄√˘
(
µp€_so·c
 *);

121 
µp€_ab‹t_c⁄√˘
(
µp€_so·c
 *);

122 
µp€_˛ór_so·c
(
µp€_so·c
 *, const *);

125 
µp€_timeout
(*);

128 
îr_t
 
µp€_£nd_∑di
(
µp€_so·c
 *);

129 
îr_t
 
µp€_£nd_∑dr
(
µp€_so·c
 *);

130 #ifde‡
PPPOE_SERVER


131 
îr_t
 
µp€_£nd_∑do
(
µp€_so·c
 *);

132 
îr_t
 
µp€_£nd_∑ds
(
µp€_so·c
 *);

134 
îr_t
 
µp€_£nd_∑dt
(
√tif
 *, 
u_öt
, c⁄° 
u8_t
 *);

137 
µp€_so·c
 * 
µp€_föd_so·c_by_£ssi⁄
(
u_öt
, 
√tif
 *);

138 
µp€_so·c
 * 
µp€_föd_so·c_by_hunique
(
u8_t
 *, 
size_t
, 
√tif
 *);

141 
µp€_so·c
 *
	gµp€_so·c_li°
;

143 
îr_t


144 
µp€_¸óã
(
√tif
 *
ëhif
, 
pd
, (*
lökSètusCB
)(pd, 
up
), 
µp€_so·c
 **
s˝å
)

146 
µp€_so·c
 *
sc
;

148 
sc
 = (
µp€_so·c
 *)
	`memp_mÆloc
(
MEMP_PPPOE_IF
);

149 i‡(
sc
 =
NULL
) {

150 *
s˝å
 = 
NULL
;

151  
ERR_MEM
;

153 
	`mem£t
(
sc
, 0, (
µp€_so·c
));

156 
	`MEMCPY
(&
sc
->
sc_de°
, 
ëhbrﬂdˇ°
.
addr
, (sc->sc_dest));

158 
sc
->
sc_pd
 = 
pd
;

159 
sc
->
sc_lökSètusCB
 = 
lökSètusCB
;

160 
sc
->
sc_ëhif
 = 
ëhif
;

163 
sc
->
√xt
 = 
µp€_so·c_li°
;

164 
µp€_so·c_li°
 = 
sc
;

166 *
s˝å
 = 
sc
;

168  
ERR_OK
;

169 
	}
}

171 
îr_t


172 
	$µp€_de°roy
(
√tif
 *
iÂ
)

174 
µp€_so·c
 *
sc
, *
¥ev
 = 
NULL
;

176 
sc
 = 
µp€_so·c_li°
; s¯!
NULL
; 
¥ev
 = sc, s¯sc->
√xt
) {

177 i‡(
sc
->
sc_ëhif
 =
iÂ
) {

182 if(!(
sc
 && (sc->
sc_ëhif
 =
iÂ
))) {

183  
ERR_IF
;

186 
	`sys_u¡imeout
(
µp€_timeout
, 
sc
);

187 i‡(
¥ev
 =
NULL
) {

189 
µp€_so·c_li°
 = 
sc
->
√xt
;

192 
¥ev
->
√xt
 = 
sc
->next;

195 #ifde‡
PPPOE_TODO


196 i‡(
sc
->
sc_c⁄˚¡øt‹_«me
) {

197 
	`mem_‰ì
(
sc
->
sc_c⁄˚¡øt‹_«me
);

199 i‡(
sc
->
sc_£rvi˚_«me
) {

200 
	`mem_‰ì
(
sc
->
sc_£rvi˚_«me
);

203 
	`memp_‰ì
(
MEMP_PPPOE_IF
, 
sc
);

205  
ERR_OK
;

206 
	}
}

214 
µp€_so·c
 *

215 
	$µp€_föd_so·c_by_£ssi⁄
(
u_öt
 
£ssi⁄
, 
√tif
 *
rcvif
)

217 
µp€_so·c
 *
sc
;

219 i‡(
£ssi⁄
 == 0) {

220  
NULL
;

223 
sc
 = 
µp€_so·c_li°
; s¯!
NULL
; s¯sc->
√xt
) {

224 i‡(
sc
->
sc_°©e
 =
PPPOE_STATE_SESSION


225 && 
sc
->
sc_£ssi⁄
 =
£ssi⁄
) {

226 i‡(
sc
->
sc_ëhif
 =
rcvif
) {

227  
sc
;

229  
NULL
;

233  
NULL
;

234 
	}
}

238 
µp€_so·c
 *

239 
	$µp€_föd_so·c_by_hunique
(
u8_t
 *
tokí
, 
size_t
 
Àn
, 
√tif
 *
rcvif
)

241 
µp€_so·c
 *
sc
, *
t
;

243 i‡(
µp€_so·c_li°
 =
NULL
) {

244  
NULL
;

247 i‡(
Àn
 ! 
sc
) {

248  
NULL
;

250 
	`MEMCPY
(&
t
, 
tokí
, 
Àn
);

252 
sc
 = 
µp€_so·c_li°
; s¯!
NULL
; s¯sc->
√xt
) {

253 i‡(
sc
 =
t
) {

258 i‡(
sc
 =
NULL
) {

259 
	`PPPDEBUG
(
LOG_DEBUG
, ("pppoe:álien host uniqueÅag,Ço session found\n"));

260  
NULL
;

264 i‡(
sc
->
sc_°©e
 < 
PPPOE_STATE_PADI_SENT
 || sc->sc_°©ê>
PPPOE_STATE_SESSION
) {

265 
	`¥ötf
("%c%c%"
U16_F
": host uniqueÅag found, but it belongsÅoá connection in state %d\n",

266 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, sc->
sc_°©e
);

267  
NULL
;

269 i‡(
sc
->
sc_ëhif
 !
rcvif
) {

270 
	`¥ötf
("%c%c%"
U16_F
": wrong interface,Çotáccepting host unique\n",

271 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
);

272  
NULL
;

274  
sc
;

275 
	}
}

278 
	$µp€_lök°©us_up
(
µp€_so·c
 *
sc
)

280 
sc
->
	`sc_lökSètusCB
(sc->
sc_pd
, 1);

281 
	}
}

285 
	$µp€_di•©ch_disc_pkt
(
√tif
 *√tif, 
pbuf
 *
pb
)

287 
u16_t
 
èg
, 
Àn
;

288 
u16_t
 
£ssi⁄
, 
∂í
;

289 
µp€_so·c
 *
sc
;

290 c⁄° *
îr_msg
;

291 
dev«me
[6];

292 
u8_t
 *
ac_cookõ
;

293 
u16_t
 
ac_cookõ_Àn
;

294 #ifde‡
PPPOE_SERVER


295 
u8_t
 *
hunique
;

296 
size_t
 
hunique_Àn
;

298 
µp€hdr
 *
ph
;

299 
µp€èg
 
±
;

300 
off
, 
îr
, 
îr‹èg
;

301 
ëh_hdr
 *
ëhhdr
;

303 
pb
 = 
	`µpSögÀBuf
(pb);

305 
	`°r˝y
(
dev«me
, "pppoe");

306 
îr_msg
 = 
NULL
;

307 
îr‹èg
 = 0;

308 i‡(
pb
->
Àn
 < (*
ëhhdr
)) {

309 
d⁄e
;

311 
ëhhdr
 = (
ëh_hdr
 *)
pb
->
∑ylﬂd
;

312 
off
 = (*
ëhhdr
);

314 
ac_cookõ
 = 
NULL
;

315 
ac_cookõ_Àn
 = 0;

316 #ifde‡
PPPOE_SERVER


317 
hunique
 = 
NULL
;

318 
hunique_Àn
 = 0;

320 
£ssi⁄
 = 0;

321 i‡(
pb
->
Àn
 - 
off
 < 
PPPOE_HEADERLEN
) {

322 
	`¥ötf
("µp€:ÖackëÅoÿsh‹t: %d\n", 
pb
->
Àn
);

323 
d⁄e
;

326 
ph
 = (
µp€hdr
 *Ë(
ëhhdr
 + 1);

327 i‡(
ph
->
vîty≥
 !
PPPOE_VERTYPE
) {

328 
	`¥ötf
("µp€: unknow¿vîsi⁄/ty≥Öackë: 0x%x\n", 
ph
->
vîty≥
);

329 
d⁄e
;

331 
£ssi⁄
 = 
	`¡ohs
(
ph
->session);

332 
∂í
 = 
	`¡ohs
(
ph
->plen);

333 
off
 +(*
ph
);

335 i‡(
∂í
 + 
off
 > 
pb
->
Àn
) {

336 
	`¥ötf
("pppoe:Öacket content doesÇot fit: dataávailable = %d,Öacket size = %u\n",

337 
pb
->
Àn
 - 
off
, 
∂í
);

338 
d⁄e
;

340 if(
pb
->
tŸ_Àn
 =pb->
Àn
) {

341 
pb
->
tŸ_Àn
 =Öb->
Àn
 = (
u16_t
)
off
 + 
∂í
;

343 
èg
 = 0;

344 
Àn
 = 0;

345 
sc
 = 
NULL
;

346 
off
 + (
±
Ë<
pb
->
Àn
) {

347 
	`MEMCPY
(&
±
, (
u8_t
*)
pb
->
∑ylﬂd
 + 
off
, (pt));

348 
èg
 = 
	`¡ohs
(
±
.tag);

349 
Àn
 = 
	`¡ohs
(
±
.len);

350 i‡(
off
 + (
±
Ë+ 
Àn
 > 
pb
->len) {

351 
	`¥ötf
("µp€:Åag 0x%xÜí 0x%x i†toÿl⁄g\n", 
èg
, 
Àn
);

352 
d⁄e
;

354 
èg
) {

355 
PPPOE_TAG_EOL
:

356 
bªakbªak
;

357 
PPPOE_TAG_SNAME
:

359 
PPPOE_TAG_ACNAME
:

361 
PPPOE_TAG_HUNIQUE
:

362 i‡(
sc
 !
NULL
) {

365 #ifde‡
PPPOE_SERVER


366 
hunique
 = (
u8_t
*)
pb
->
∑ylﬂd
 + 
off
 + (
±
);

367 
hunique_Àn
 = 
Àn
;

369 
sc
 = 
	`µp€_föd_so·c_by_hunique
((
u8_t
*)
pb
->
∑ylﬂd
 + 
off
 + (
±
), 
Àn
, 
√tif
);

370 i‡(
sc
 !
NULL
) {

371 
	`¢¥ötf
(
dev«me
, (dev«me), "%c%c%"
U16_F
, 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
);

374 
PPPOE_TAG_ACCOOKIE
:

375 i‡(
ac_cookõ
 =
NULL
) {

376 
ac_cookõ
 = (
u8_t
*)
pb
->
∑ylﬂd
 + 
off
 + (
±
);

377 
ac_cookõ_Àn
 = 
Àn
;

380 
PPPOE_TAG_SNAME_ERR
:

381 
îr_msg
 = "SERVICE NAME ERROR";

382 
îr‹èg
 = 1;

384 
PPPOE_TAG_ACSYS_ERR
:

385 
îr_msg
 = "AC SYSTEM ERROR";

386 
îr‹èg
 = 1;

388 
PPPOE_TAG_GENERIC_ERR
:

389 
îr_msg
 = "GENERIC ERROR";

390 
îr‹èg
 = 1;

393 i‡(
îr_msg
) {

394 i‡(
îr‹èg
 && 
Àn
) {

395 
u16_t
 
îr‹_Àn
 = 
	`LWIP_MIN
(
Àn
, (
µp€_îr‹_tmp
)-1);

396 
	`°∫˝y
(
µp€_îr‹_tmp
, (*)
pb
->
∑ylﬂd
 + 
off
 + (
±
), 
îr‹_Àn
);

397 
µp€_îr‹_tmp
[
îr‹_Àn
-1] = '\0';

398 
	`¥ötf
("%s: %s: %s\n", 
dev«me
, 
îr_msg
, 
µp€_îr‹_tmp
);

400 
	`¥ötf
("%s: %s\n", 
dev«me
, 
îr_msg
);

402 i‡(
îr‹èg
) {

403 
d⁄e
;

406 
off
 +(
±
Ë+ 
Àn
;

409 
bªakbªak
:;

410 
ph
->
code
) {

411 
PPPOE_CODE_PADI
:

412 #ifde‡
PPPOE_SERVER


417 i‡(
	`LIST_EMPTY
(&
µp€_so·c_li°
)) {

418 
d⁄e
;

420 
	`LIST_FOREACH
(
sc
, &
µp€_so·c_li°
, 
sc_li°
) {

421 i‡(!(
sc
->
sc_•µ
.
µ_if
.
if_Êags
 & 
IFF_UP
)) {

424 i‡(!(
sc
->
sc_•µ
.
µ_if
.
if_Êags
 & 
IFF_PASSIVE
)) {

427 i‡(
sc
->
sc_°©e
 =
PPPOE_STATE_INITIAL
) {

431 i‡(
sc
 =
NULL
) {

433 
d⁄e
;

435 i‡(
hunique
) {

436 i‡(
sc
->
sc_hunique
) {

437 
	`mem_‰ì
(
sc
->
sc_hunique
);

439 
sc
->
sc_hunique
 = 
	`mem_mÆloc
(
hunique_Àn
);

440 i‡(
sc
->
sc_hunique
 =
NULL
) {

441 
d⁄e
;

443 
sc
->
sc_hunique_Àn
 = 
hunique_Àn
;

444 
	`MEMCPY
(
sc
->
sc_hunique
, 
hunique
, 
hunique_Àn
);

446 
	`MEMCPY
(&
sc
->
sc_de°
, 
eh
->
ëhî_sho°
,  sc->sc_dest);

447 
sc
->
sc_°©e
 = 
PPPOE_STATE_PADO_SENT
;

448 
	`µp€_£nd_∑do
(
sc
);

451 
PPPOE_CODE_PADR
:

452 #ifde‡
PPPOE_SERVER


456 i‡(
ac_cookõ
 =
NULL
) {

458 
	`¥ötf
("pppoe:Ñeceived PADR butÇot includesác_cookie\n");

459 
d⁄e
;

461 
sc
 = 
	`µp€_föd_so·c_by_hunique
(
ac_cookõ
, 
ac_cookõ_Àn
, 
√tif
);

462 i‡(
sc
 =
NULL
) {

464 i‡(!
	`LIST_EMPTY
(&
µp€_so·c_li°
)) {

465 
	`¥ötf
("pppoe:Ñeceived PADR but couldÇot findÑequest for it\n");

467 
d⁄e
;

469 i‡(
sc
->
sc_°©e
 !
PPPOE_STATE_PADO_SENT
) {

470 
	`¥ötf
("%c%c%"
U16_F
":Ñe˚ived u√x≥˘ed PADR\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
);

471 
d⁄e
;

473 i‡(
hunique
) {

474 i‡(
sc
->
sc_hunique
) {

475 
	`mem_‰ì
(
sc
->
sc_hunique
);

477 
sc
->
sc_hunique
 = 
	`mem_mÆloc
(
hunique_Àn
);

478 i‡(
sc
->
sc_hunique
 =
NULL
) {

479 
d⁄e
;

481 
sc
->
sc_hunique_Àn
 = 
hunique_Àn
;

482 
	`MEMCPY
(
sc
->
sc_hunique
, 
hunique
, 
hunique_Àn
);

484 
	`µp€_£nd_∑ds
(
sc
);

485 
sc
->
sc_°©e
 = 
PPPOE_STATE_SESSION
;

486 
	`µp€_lök°©us_up
(
sc
);

490 
d⁄e
;

492 
PPPOE_CODE_PADO
:

493 i‡(
sc
 =
NULL
) {

495 i‡(
µp€_so·c_li°
 !
NULL
) {

496 
	`¥ötf
("pppoe:Ñeceived PADO but couldÇot findÑequest for it\n");

498 
d⁄e
;

500 i‡(
sc
->
sc_°©e
 !
PPPOE_STATE_PADI_SENT
) {

501 
	`¥ötf
("%c%c%"
U16_F
":Ñe˚ived u√x≥˘ed PADO\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
);

502 
d⁄e
;

504 i‡(
ac_cookõ
) {

505 
sc
->
sc_ac_cookõ_Àn
 = 
ac_cookõ_Àn
;

506 
	`MEMCPY
(
sc
->
sc_ac_cookõ
, 
ac_cookõ
, 
ac_cookõ_Àn
);

508 
	`MEMCPY
(&
sc
->
sc_de°
, 
ëhhdr
->
§c
.
addr
, (sc->sc_dest.addr));

509 
	`sys_u¡imeout
(
µp€_timeout
, 
sc
);

510 
sc
->
sc_∑dr_ªåõd
 = 0;

511 
sc
->
sc_°©e
 = 
PPPOE_STATE_PADR_SENT
;

512 i‡((
îr
 = 
	`µp€_£nd_∑dr
(
sc
)) != 0) {

513 
	`PPPDEBUG
(
LOG_DEBUG
, ("µp€: %c%c%"
U16_F
": faûedÅÿ£nd PADR,Éº‹=%d\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
îr
));

515 
	`sys_timeout
(
PPPOE_DISC_TIMEOUT
 * (1 + 
sc
->
sc_∑dr_ªåõd
), 
µp€_timeout
, sc);

517 
PPPOE_CODE_PADS
:

518 i‡(
sc
 =
NULL
) {

519 
d⁄e
;

521 
sc
->
sc_£ssi⁄
 = 
£ssi⁄
;

522 
	`sys_u¡imeout
(
µp€_timeout
, 
sc
);

523 
	`PPPDEBUG
(
LOG_DEBUG
, ("µp€: %c%c%"
U16_F
": sessi⁄ 0x%x c⁄√˘ed\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
£ssi⁄
));

524 
sc
->
sc_°©e
 = 
PPPOE_STATE_SESSION
;

525 
	`µp€_lök°©us_up
(
sc
);

527 
PPPOE_CODE_PADT
:

528 i‡(
sc
 =
NULL
) {

529 
d⁄e
;

531 
	`µp€_˛ór_so·c
(
sc
, "received PADT");

534 if(
sc
) {

535 
	`¥ötf
("%c%c%"
U16_F
": unknow¿codê(0x%"
X16_F
") session = 0x%"X16_F"\n",

536 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
,

537 (
u16_t
)
ph
->
code
, 
£ssi⁄
);

539 
	`¥ötf
("µp€: unknow¿codê(0x%"
X16_F
"Ë£ssi⁄ = 0x%"X16_F"\n", (
u16_t
)
ph
->
code
, 
£ssi⁄
);

544 
d⁄e
:

545 
	`pbuf_‰ì
(
pb
);

547 
	}
}

550 
	$µp€_disc_öput
(
√tif
 *√tif, 
pbuf
 *
p
)

553 i‡(
µp€_so·c_li°
 !
NULL
) {

554 
	`µp€_di•©ch_disc_pkt
(
√tif
, 
p
);

556 
	`pbuf_‰ì
(
p
);

558 
	}
}

561 
	$µp€_d©a_öput
(
√tif
 *√tif, 
pbuf
 *
pb
)

563 
u16_t
 
£ssi⁄
, 
∂í
;

564 
µp€_so·c
 *
sc
;

565 
µp€hdr
 *
ph
;

566 #ifde‡
PPPOE_TERM_UNKNOWN_SESSIONS


567 
u8_t
 
sho°
[
ETHER_ADDR_LEN
];

570 #ifde‡
PPPOE_TERM_UNKNOWN_SESSIONS


571 
	`MEMCPY
(
sho°
, ((
ëh_hdr
 *)
pb
->
∑ylﬂd
)->
§c
.
addr
, (shost));

573 i‡(
	`pbuf_hódî
(
pb
, -()(
ëh_hdr
)) != 0) {

575 
	`PPPDEBUG
(
LOG_ERR
, ("pppoe_data_input:Öbuf_header failed\n"));

576 
	`LINK_STATS_INC
(
lök
.
À√º
);

577 
dr›
;

580 
pb
 = 
	`µpSögÀBuf
 (pb);

582 i‡(
pb
->
Àn
 <
PPPOE_HEADERLEN
) {

583 
	`¥ötf
("µp€ (d©a): dr›pögÅoÿsh‹à∑ckë: %d byãs\n", 
pb
->
Àn
);

584 
dr›
;

587 i‡(
pb
->
Àn
 < (*
ph
)) {

588 
	`¥ötf
("pppoe_data_input: couldÇot get PPPoE header\n");

589 
dr›
;

591 
ph
 = (
µp€hdr
 *)
pb
->
∑ylﬂd
;

593 i‡(
ph
->
vîty≥
 !
PPPOE_VERTYPE
) {

594 
	`¥ötf
("µp€ (d©a): unknow¿vîsi⁄/ty≥Öackë: 0x%x\n", 
ph
->
vîty≥
);

595 
dr›
;

597 i‡(
ph
->
code
 != 0) {

598 
dr›
;

601 
£ssi⁄
 = 
	`¡ohs
(
ph
->session);

602 
sc
 = 
	`µp€_föd_so·c_by_£ssi⁄
(
£ssi⁄
, 
√tif
);

603 i‡(
sc
 =
NULL
) {

604 #ifde‡
PPPOE_TERM_UNKNOWN_SESSIONS


605 
	`¥ötf
("µp€: i≈uàf‹ unknow¿£ssi⁄ 0x%x, sídög PADT\n", 
£ssi⁄
);

606 
	`µp€_£nd_∑dt
(
√tif
, 
£ssi⁄
, 
sho°
);

608 
dr›
;

611 
∂í
 = 
	`¡ohs
(
ph
->plen);

613 i‡(
	`pbuf_hódî
(
pb
, -()(
PPPOE_HEADERLEN
)) != 0) {

615 
	`PPPDEBUG
(
LOG_ERR
, ("pppoe_data_input:Öbuf_header PPPOE_HEADERLEN failed\n"));

616 
	`LINK_STATS_INC
(
lök
.
À√º
);

617 
dr›
;

620 
	`PPPDEBUG
(
LOG_DEBUG
, ("µp€_d©a_öput: %c%c%"
U16_F
":Ökthdr.len=%d,Öppoe.len=%d\n",

621 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
,

622 
pb
->
Àn
, 
∂í
));

624 i‡(
pb
->
Àn
 < 
∂í
) {

625 
dr›
;

628 
	`µpInProcOvîEthî√t
(
sc
->
sc_pd
, 
pb
);

632 
dr›
:

633 
	`pbuf_‰ì
(
pb
);

634 
	}
}

636 
îr_t


637 
	$µp€_ouçut
(
µp€_so·c
 *
sc
, 
pbuf
 *
pb
)

639 
ëh_hdr
 *
ëhhdr
;

640 
u16_t
 
ëy≥
;

641 
îr_t
 
ªs
;

643 i‡(!
sc
->
sc_ëhif
) {

644 
	`pbuf_‰ì
(
pb
);

645  
ERR_IF
;

648 
ëhhdr
 = (
ëh_hdr
 *)
pb
->
∑ylﬂd
;

649 
ëy≥
 = 
sc
->
sc_°©e
 =
PPPOE_STATE_SESSION
 ? 
ETHTYPE_PPPOE
 : 
ETHTYPE_PPPOEDISC
;

650 
ëhhdr
->
ty≥
 = 
	`ht⁄s
(
ëy≥
);

651 
	`MEMCPY
(
ëhhdr
->
de°
.
addr
, 
sc
->
sc_de°
.addr, (ethhdr->dest.addr));

652 
	`MEMCPY
(
ëhhdr
->
§c
.
addr
, ((
ëh_addr
 *)
sc
->
sc_ëhif
->
hwaddr
)->addr, (ethhdr->src.addr));

654 
	`PPPDEBUG
(
LOG_DEBUG
, ("µp€: %c%c%"
U16_F
" (%xË°©e=%d, sessi⁄=0x%x ouçuà-> %02"
X16_F
":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F",Üen=%d\n",

655 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
ëy≥
,

656 
sc
->
sc_°©e
, sc->
sc_£ssi⁄
,

657 
sc
->
sc_de°
.
addr
[0], sc->sc_dest.addr[1], sc->sc_dest.addr[2], sc->sc_dest.addr[3], sc->sc_dest.addr[4], sc->sc_dest.addr[5],

658 
pb
->
tŸ_Àn
));

660 
ªs
 = 
sc
->
sc_ëhif
->
	`lökouçut
(sc->sc_ëhif, 
pb
);

662 
	`pbuf_‰ì
(
pb
);

664  
ªs
;

665 
	}
}

667 
îr_t


668 
	$µp€_£nd_∑di
(
µp€_so·c
 *
sc
)

670 
pbuf
 *
pb
;

671 
u8_t
 *
p
;

672 
Àn
;

673 #ifde‡
PPPOE_TODO


674 
l1
 = 0, 
l2
 = 0;

677 i‡(
sc
->
sc_°©e
 >
PPPOE_STATE_PADI_SENT
) {

678 
	`PPPDEBUG
(
LOG_ERR
, ("ERROR:Öµ€_£nd_∑dòö sèã %d", 
sc
->
sc_°©e
));

682 
Àn
 = 2 + 2 + 2 + 2 +  
sc
;

683 #ifde‡
PPPOE_TODO


684 i‡(
sc
->
sc_£rvi˚_«me
 !
NULL
) {

685 
l1
 = ()
	`°æí
(
sc
->
sc_£rvi˚_«me
);

686 
Àn
 +
l1
;

688 i‡(
sc
->
sc_c⁄˚¡øt‹_«me
 !
NULL
) {

689 
l2
 = ()
	`°æí
(
sc
->
sc_c⁄˚¡øt‹_«me
);

690 
Àn
 +2 + 2 + 
l2
;

693 
	`LWIP_ASSERT
("sizeof(structÉth_hdr) + PPPOE_HEADERLEN +Üen <= 0xffff",

694 (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
 + 
Àn
 <= 0xffff);

697 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, (
u16_t
)((
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
 + 
Àn
), 
PBUF_RAM
);

698 i‡(!
pb
) {

699  
ERR_MEM
;

701 
	`LWIP_ASSERT
("pb->tŸ_À¿=pb->Àn", 
pb
->
tŸ_Àn
 =pb->
Àn
);

703 
p
 = (
u8_t
*)
pb
->
∑ylﬂd
 +  (
ëh_hdr
);

705 
	`PPPOE_ADD_HEADER
(
p
, 
PPPOE_CODE_PADI
, 0, (
u16_t
)
Àn
);

706 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_SNAME
);

707 #ifde‡
PPPOE_TODO


708 i‡(
sc
->
sc_£rvi˚_«me
 !
NULL
) {

709 
	`PPPOE_ADD_16
(
p
, 
l1
);

710 
	`MEMCPY
(
p
, 
sc
->
sc_£rvi˚_«me
, 
l1
);

711 
p
 +
l1
;

715 
	`PPPOE_ADD_16
(
p
, 0);

717 #ifde‡
PPPOE_TODO


718 i‡(
sc
->
sc_c⁄˚¡øt‹_«me
 !
NULL
) {

719 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_ACNAME
);

720 
	`PPPOE_ADD_16
(
p
, 
l2
);

721 
	`MEMCPY
(
p
, 
sc
->
sc_c⁄˚¡øt‹_«me
, 
l2
);

722 
p
 +
l2
;

725 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_HUNIQUE
);

726 
	`PPPOE_ADD_16
(
p
, (
sc
));

727 
	`MEMCPY
(
p
, &
sc
,  sc);

730  
	`µp€_ouçut
(
sc
, 
pb
);

731 
	}
}

734 
	$µp€_timeout
(*
¨g
)

736 
ªåy_waô
, 
îr
;

737 
µp€_so·c
 *
sc
 = (µp€_so·c*)
¨g
;

739 
	`PPPDEBUG
(
LOG_DEBUG
, ("µp€: %c%c%"
U16_F
":Åimeout\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
));

741 
sc
->
sc_°©e
) {

742 
PPPOE_STATE_PADI_SENT
:

754 
ªåy_waô
 = 
PPPOE_DISC_TIMEOUT
 * (1 + 
sc
->
sc_∑di_ªåõd
);

756 
sc
->
sc_∑di_ªåõd
++;

757 i‡(
sc
->
sc_∑di_ªåõd
 >
PPPOE_DISC_MAXPADI
) {

759 i‡((
sc
->
sc_•µ
.
µ_if
.
if_Êags
 & 
IFF_LINK1
) == 0) {

761 
ªåy_waô
 = 
PPPOE_SLOW_RETRY
;

765 
	`µp€_ab‹t_c⁄√˘
(
sc
);

769 i‡((
îr
 = 
	`µp€_£nd_∑di
(
sc
)) != 0) {

770 
sc
->
sc_∑di_ªåõd
--;

771 
	`PPPDEBUG
(
LOG_DEBUG
, ("µp€: %c%c%"
U16_F
": faûedÅÿå™smô PADI,Éº‹=%d\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
îr
));

773 
	`sys_timeout
(
ªåy_waô
, 
µp€_timeout
, 
sc
);

776 
PPPOE_STATE_PADR_SENT
:

777 
sc
->
sc_∑dr_ªåõd
++;

778 i‡(
sc
->
sc_∑dr_ªåõd
 >
PPPOE_DISC_MAXPADR
) {

779 
	`MEMCPY
(&
sc
->
sc_de°
, 
ëhbrﬂdˇ°
.
addr
, (sc->sc_dest));

780 
sc
->
sc_°©e
 = 
PPPOE_STATE_PADI_SENT
;

781 
sc
->
sc_∑dr_ªåõd
 = 0;

782 i‡((
îr
 = 
	`µp€_£nd_∑di
(
sc
)) != 0) {

783 
	`PPPDEBUG
(
LOG_DEBUG
, ("µp€: %c%c%"
U16_F
": faûedÅÿ£nd PADI,Éº‹=%d\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
îr
));

785 
	`sys_timeout
(
PPPOE_DISC_TIMEOUT
 * (1 + 
sc
->
sc_∑di_ªåõd
), 
µp€_timeout
, sc);

788 i‡((
îr
 = 
	`µp€_£nd_∑dr
(
sc
)) != 0) {

789 
sc
->
sc_∑dr_ªåõd
--;

790 
	`PPPDEBUG
(
LOG_DEBUG
, ("µp€: %c%c%"
U16_F
": faûedÅÿ£nd PADR,Éº‹=%d\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
îr
));

792 
	`sys_timeout
(
PPPOE_DISC_TIMEOUT
 * (1 + 
sc
->
sc_∑dr_ªåõd
), 
µp€_timeout
, sc);

794 
PPPOE_STATE_CLOSING
:

795 
	`µp€_do_disc⁄√˘
(
sc
);

800 
	}
}

804 
	$µp€_c⁄√˘
(
µp€_so·c
 *
sc
)

806 
îr
;

808 i‡(
sc
->
sc_°©e
 !
PPPOE_STATE_INITIAL
) {

809  
EBUSY
;

812 #ifde‡
PPPOE_SERVER


814 i‡((
sc
->
sc_•µ
.
µ_if
.
if_Êags
 & 
IFF_PASSIVE
)) {

819 
sc
->
sc_°©e
 = 
PPPOE_STATE_PADI_SENT
;

820 
sc
->
sc_∑dr_ªåõd
 = 0;

821 
îr
 = 
	`µp€_£nd_∑di
(
sc
);

822 
	`PPPDEBUG
(
LOG_DEBUG
, ("µp€: %c%c%"
U16_F
": faûedÅÿ£nd PADI,Éº‹=%d\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
îr
));

823 
	`sys_timeout
(
PPPOE_DISC_TIMEOUT
, 
µp€_timeout
, 
sc
);

824  
îr
;

825 
	}
}

829 
	$µp€_disc⁄√˘
(
µp€_so·c
 *
sc
)

831 i‡(
sc
->
sc_°©e
 < 
PPPOE_STATE_SESSION
) {

839 
sc
->
sc_°©e
 = 
PPPOE_STATE_CLOSING
;

840 
	`sys_timeout
(20, 
µp€_timeout
, 
sc
);

841 
	}
}

844 
	$µp€_do_disc⁄√˘
(
µp€_so·c
 *
sc
)

846 
îr
;

848 i‡(
sc
->
sc_°©e
 < 
PPPOE_STATE_SESSION
) {

849 
îr
 = 
EBUSY
;

851 
	`PPPDEBUG
(
LOG_DEBUG
, ("µp€: %c%c%"
U16_F
": disc⁄√˘ög\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
));

852 
îr
 = 
	`µp€_£nd_∑dt
(
sc
->
sc_ëhif
, sc->
sc_£ssi⁄
, (c⁄° 
u8_t
 *)&sc->
sc_de°
);

856 
sc
->
sc_°©e
 = 
PPPOE_STATE_INITIAL
;

857 
	`MEMCPY
(&
sc
->
sc_de°
, 
ëhbrﬂdˇ°
.
addr
, (sc->sc_dest));

858 
sc
->
sc_ac_cookõ_Àn
 = 0;

859 #ifde‡
PPPOE_SERVER


860 i‡(
sc
->
sc_hunique
) {

861 
	`mem_‰ì
(
sc
->
sc_hunique
);

862 
sc
->
sc_hunique
 = 
NULL
;

864 
sc
->
sc_hunique_Àn
 = 0;

866 
sc
->
sc_£ssi⁄
 = 0;

868 
sc
->
	`sc_lökSètusCB
(sc->
sc_pd
, 0);

870  
îr
;

871 
	}
}

875 
	$µp€_ab‹t_c⁄√˘
(
µp€_so·c
 *
sc
)

877 
	`¥ötf
("%c%c%"
U16_F
": couldÇŸÉ°ablish c⁄√˘i⁄\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
);

878 
sc
->
sc_°©e
 = 
PPPOE_STATE_CLOSING
;

880 
sc
->
	`sc_lökSètusCB
(sc->
sc_pd
, 0);

883 
	`MEMCPY
(&
sc
->
sc_de°
, 
ëhbrﬂdˇ°
.
addr
, (sc->sc_dest));

884 
sc
->
sc_°©e
 = 
PPPOE_STATE_INITIAL
;

885 
	}
}

888 
îr_t


889 
	$µp€_£nd_∑dr
(
µp€_so·c
 *
sc
)

891 
pbuf
 *
pb
;

892 
u8_t
 *
p
;

893 
size_t
 
Àn
;

894 #ifde‡
PPPOE_TODO


895 
size_t
 
l1
 = 0;

898 i‡(
sc
->
sc_°©e
 !
PPPOE_STATE_PADR_SENT
) {

899  
ERR_CONN
;

902 
Àn
 = 2 + 2 + 2 + 2 + (
sc
);

903 #ifde‡
PPPOE_TODO


904 i‡(
sc
->
sc_£rvi˚_«me
 !
NULL
) {

905 
l1
 = 
	`°æí
(
sc
->
sc_£rvi˚_«me
);

906 
Àn
 +
l1
;

909 i‡(
sc
->
sc_ac_cookõ_Àn
 > 0) {

910 
Àn
 +2 + 2 + 
sc
->
sc_ac_cookõ_Àn
;

912 
	`LWIP_ASSERT
("sizeof(structÉth_hdr) + PPPOE_HEADERLEN +Üen <= 0xffff",

913 (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
 + 
Àn
 <= 0xffff);

914 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, (
u16_t
)((
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
 + 
Àn
), 
PBUF_RAM
);

915 i‡(!
pb
) {

916  
ERR_MEM
;

918 
	`LWIP_ASSERT
("pb->tŸ_À¿=pb->Àn", 
pb
->
tŸ_Àn
 =pb->
Àn
);

919 
p
 = (
u8_t
*)
pb
->
∑ylﬂd
 +  (
ëh_hdr
);

920 
	`PPPOE_ADD_HEADER
(
p
, 
PPPOE_CODE_PADR
, 0, 
Àn
);

921 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_SNAME
);

922 #ifde‡
PPPOE_TODO


923 i‡(
sc
->
sc_£rvi˚_«me
 !
NULL
) {

924 
	`PPPOE_ADD_16
(
p
, 
l1
);

925 
	`MEMCPY
(
p
, 
sc
->
sc_£rvi˚_«me
, 
l1
);

926 
p
 +
l1
;

930 
	`PPPOE_ADD_16
(
p
, 0);

932 i‡(
sc
->
sc_ac_cookõ_Àn
 > 0) {

933 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_ACCOOKIE
);

934 
	`PPPOE_ADD_16
(
p
, 
sc
->
sc_ac_cookõ_Àn
);

935 
	`MEMCPY
(
p
, 
sc
->
sc_ac_cookõ
, sc->
sc_ac_cookõ_Àn
);

936 
p
 +
sc
->
sc_ac_cookõ_Àn
;

938 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_HUNIQUE
);

939 
	`PPPOE_ADD_16
(
p
, (
sc
));

940 
	`MEMCPY
(
p
, &
sc
,  sc);

942  
	`µp€_ouçut
(
sc
, 
pb
);

943 
	}
}

946 
îr_t


947 
	$µp€_£nd_∑dt
(
√tif
 *
outgoög_if
, 
u_öt
 
£ssi⁄
, c⁄° 
u8_t
 *
de°
)

949 
pbuf
 *
pb
;

950 
ëh_hdr
 *
ëhhdr
;

951 
îr_t
 
ªs
;

952 
u8_t
 *
p
;

954 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
, 
PBUF_RAM
);

955 i‡(!
pb
) {

956  
ERR_MEM
;

958 
	`LWIP_ASSERT
("pb->tŸ_À¿=pb->Àn", 
pb
->
tŸ_Àn
 =pb->
Àn
);

960 
ëhhdr
 = (
ëh_hdr
 *)
pb
->
∑ylﬂd
;

961 
ëhhdr
->
ty≥
 = 
	`PP_HTONS
(
ETHTYPE_PPPOEDISC
);

962 
	`MEMCPY
(
ëhhdr
->
de°
.
addr
, dest, (ethhdr->dest.addr));

963 
	`MEMCPY
(
ëhhdr
->
§c
.
addr
, ((
ëh_addr
 *)
outgoög_if
->
hwaddr
)->addr, (ethhdr->src.addr));

965 
p
 = (
u8_t
*)(
ëhhdr
 + 1);

966 
	`PPPOE_ADD_HEADER
(
p
, 
PPPOE_CODE_PADT
, 
£ssi⁄
, 0);

968 
ªs
 = 
outgoög_if
->
	`lökouçut
(outgoög_if, 
pb
);

970 
	`pbuf_‰ì
(
pb
);

972  
ªs
;

973 
	}
}

975 #ifde‡
PPPOE_SERVER


976 
îr_t


977 
	$µp€_£nd_∑do
(
µp€_so·c
 *
sc
)

979 
pbuf
 *
pb
;

980 
u8_t
 *
p
;

981 
size_t
 
Àn
;

983 i‡(
sc
->
sc_°©e
 !
PPPOE_STATE_PADO_SENT
) {

984  
ERR_CONN
;

988 
Àn
 = 0;

990 
Àn
 +2 + 2 + (
sc
);

992 
Àn
 +2 + 2 + 
sc
->
sc_hunique_Àn
;

993 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
 + 
Àn
, 
PBUF_RAM
);

994 i‡(!
pb
) {

995  
ERR_MEM
;

997 
	`LWIP_ASSERT
("pb->tŸ_À¿=pb->Àn", 
pb
->
tŸ_Àn
 =pb->
Àn
);

998 
p
 = (
u8_t
*)
pb
->
∑ylﬂd
 +  (
ëh_hdr
);

999 
	`PPPOE_ADD_HEADER
(
p
, 
PPPOE_CODE_PADO
, 0, 
Àn
);

1000 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_ACCOOKIE
);

1001 
	`PPPOE_ADD_16
(
p
, (
sc
));

1002 
	`MEMCPY
(
p
, &
sc
, (sc));

1003 
p
 +(
sc
);

1004 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_HUNIQUE
);

1005 
	`PPPOE_ADD_16
(
p
, 
sc
->
sc_hunique_Àn
);

1006 
	`MEMCPY
(
p
, 
sc
->
sc_hunique
, sc->
sc_hunique_Àn
);

1007  
	`µp€_ouçut
(
sc
, 
pb
);

1008 
	}
}

1010 
îr_t


1011 
	$µp€_£nd_∑ds
(
µp€_so·c
 *
sc
)

1013 
pbuf
 *
pb
;

1014 
u8_t
 *
p
;

1015 
size_t
 
Àn
, 
l1
 = 0;

1017 i‡(
sc
->
sc_°©e
 !
PPPOE_STATE_PADO_SENT
) {

1018  
ERR_CONN
;

1021 
sc
->
sc_£ssi⁄
 = 
m⁄o_time
.
tv_£c
 % 0xff + 1;

1023 
Àn
 = 0;

1025 
Àn
 +2 + 2 + 2 + 2 + 
sc
->
sc_hunique_Àn
;

1026 i‡(
sc
->
sc_£rvi˚_«me
 !
NULL
) {

1027 
l1
 = 
	`°æí
(
sc
->
sc_£rvi˚_«me
);

1028 
Àn
 +
l1
;

1030 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
 + 
Àn
, 
PBUF_RAM
);

1031 i‡(!
pb
) {

1032  
ERR_MEM
;

1034 
	`LWIP_ASSERT
("pb->tŸ_À¿=pb->Àn", 
pb
->
tŸ_Àn
 =pb->
Àn
);

1035 
p
 = (
u8_t
*)
pb
->
∑ylﬂd
 +  (
ëh_hdr
);

1036 
	`PPPOE_ADD_HEADER
(
p
, 
PPPOE_CODE_PADS
, 
sc
->
sc_£ssi⁄
, 
Àn
);

1037 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_SNAME
);

1038 i‡(
sc
->
sc_£rvi˚_«me
 !
NULL
) {

1039 
	`PPPOE_ADD_16
(
p
, 
l1
);

1040 
	`MEMCPY
(
p
, 
sc
->
sc_£rvi˚_«me
, 
l1
);

1041 
p
 +
l1
;

1043 
	`PPPOE_ADD_16
(
p
, 0);

1045 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_HUNIQUE
);

1046 
	`PPPOE_ADD_16
(
p
, 
sc
->
sc_hunique_Àn
);

1047 
	`MEMCPY
(
p
, 
sc
->
sc_hunique
, sc->
sc_hunique_Àn
);

1048  
	`µp€_ouçut
(
sc
, 
pb
);

1049 
	}
}

1052 
îr_t


1053 
	$µp€_xmô
(
µp€_so·c
 *
sc
, 
pbuf
 *
pb
)

1055 
u8_t
 *
p
;

1056 
size_t
 
Àn
;

1059 i‡(
sc
->
sc_°©e
 < 
PPPOE_STATE_SESSION
) {

1061 
	`pbuf_‰ì
(
pb
);

1062  
ERR_CONN
;

1065 
Àn
 = 
pb
->
tŸ_Àn
;

1068 i‡(
	`pbuf_hódî
(
pb
, (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
) != 0) {

1070 
	`PPPDEBUG
(
LOG_ERR
, ("µp€: %c%c%"
U16_F
":Öµ€_xmô: couldÇŸáŒoˇãÑoom f‹ hódî\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
));

1071 
	`LINK_STATS_INC
(
lök
.
À√º
);

1072 
	`pbuf_‰ì
(
pb
);

1073  
ERR_BUF
;

1076 
p
 = (
u8_t
*)
pb
->
∑ylﬂd
 + (
ëh_hdr
);

1077 
	`PPPOE_ADD_HEADER
(
p
, 0, 
sc
->
sc_£ssi⁄
, 
Àn
);

1079  
	`µp€_ouçut
(
sc
, 
pb
);

1080 
	}
}

1084 
	$µp€_iÁâach_hook
(*
¨g
, 
pbuf
 **
mp
, 
√tif
 *
iÂ
, 
dú
)

1086 
µp€_so·c
 *
sc
;

1087 
s
;

1089 i‡(
mp
 !(
pbuf
 **)
PFIL_IFNET_DETACH
) {

1093 
	`LIST_FOREACH
(
sc
, &
µp€_so·c_li°
, 
sc_li°
) {

1094 i‡(
sc
->
sc_ëhif
 !
iÂ
) {

1097 i‡(
sc
->
sc_•µ
.
µ_if
.
if_Êags
 & 
IFF_UP
) {

1098 
sc
->
sc_•µ
.
µ_if
.
if_Êags
 &~(
IFF_UP
|
IFF_RUNNING
);

1099 
	`¥ötf
("%c%c%"
U16_F
":Éthernet interface detached, going down\n",

1100 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
);

1102 
sc
->
sc_ëhif
 = 
NULL
;

1103 
	`µp€_˛ór_so·c
(
sc
, "ethernet interface detached");

1107 
	}
}

1111 
	$µp€_˛ór_so·c
(
µp€_so·c
 *
sc
, c⁄° *
mesßge
)

1113 
	`LWIP_UNUSED_ARG
(
mesßge
);

1116 
	`sys_u¡imeout
(
µp€_timeout
, 
sc
);

1117 
	`PPPDEBUG
(
LOG_DEBUG
, ("µp€: %c%c%"
U16_F
": sessi⁄ 0x%xÅîmö©ed, %s\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, sc->
sc_£ssi⁄
, 
mesßge
));

1120 
sc
->
sc_°©e
 = 
PPPOE_STATE_INITIAL
;

1123 
sc
->
	`sc_lökSètusCB
(sc->
sc_pd
, 0);

1126 
	`MEMCPY
(&
sc
->
sc_de°
, 
ëhbrﬂdˇ°
.
addr
, (sc->sc_dest));

1127 
sc
->
sc_ac_cookõ_Àn
 = 0;

1128 
sc
->
sc_£ssi⁄
 = 0;

1129 
	}
}

	@netif/ppp/pppdebug.h

36 #i‚de‡
PPPDEBUG_H


37 
	#PPPDEBUG_H


	)

40 
	#LOG_CRITICAL
 (
PPP_DEBUG
 | 
LWIP_DBG_LEVEL_SEVERE
)

	)

41 
	#LOG_ERR
 (
PPP_DEBUG
 | 
LWIP_DBG_LEVEL_SEVERE
)

	)

42 
	#LOG_NOTICE
 (
PPP_DEBUG
 | 
LWIP_DBG_LEVEL_WARNING
)

	)

43 
	#LOG_WARNING
 (
PPP_DEBUG
 | 
LWIP_DBG_LEVEL_WARNING
)

	)

44 
	#LOG_INFO
 (
PPP_DEBUG
)

	)

45 
	#LOG_DETAIL
 (
PPP_DEBUG
)

	)

46 
	#LOG_DEBUG
 (
PPP_DEBUG
)

	)

49 
	#TRACELCP
 
PPP_DEBUG


	)

51 #i‡
PPP_DEBUG


53 
	#AUTHDEBUG
(
a
, 
b
Ë
	`LWIP_DEBUGF
◊, b)

	)

54 
	#IPCPDEBUG
(
a
, 
b
Ë
	`LWIP_DEBUGF
◊, b)

	)

55 
	#UPAPDEBUG
(
a
, 
b
Ë
	`LWIP_DEBUGF
◊, b)

	)

56 
	#LCPDEBUG
(
a
, 
b
Ë
	`LWIP_DEBUGF
◊, b)

	)

57 
	#FSMDEBUG
(
a
, 
b
Ë
	`LWIP_DEBUGF
◊, b)

	)

58 
	#CHAPDEBUG
(
a
, 
b
Ë
	`LWIP_DEBUGF
◊, b)

	)

59 
	#PPPDEBUG
(
a
, 
b
Ë
	`LWIP_DEBUGF
◊, b)

	)

63 
	#AUTHDEBUG
(
a
, 
b
)

	)

64 
	#IPCPDEBUG
(
a
, 
b
)

	)

65 
	#UPAPDEBUG
(
a
, 
b
)

	)

66 
	#LCPDEBUG
(
a
, 
b
)

	)

67 
	#FSMDEBUG
(
a
, 
b
)

	)

68 
	#CHAPDEBUG
(
a
, 
b
)

	)

69 
	#PPPDEBUG
(
a
, 
b
)

	)

	@netif/ppp/randm.c

34 
	~"lwù/›t.h
"

36 #i‡
PPP_SUPPORT


38 
	~"md5.h
"

39 
	~"øndm.h
"

41 
	~"µp.h
"

42 
	~"µpdebug.h
"

44 
	~<°rög.h
>

46 #i‡
MD5_SUPPORT


47 
	#RANDPOOLSZ
 16

	)

52 
	gøndPoﬁ
[
RANDPOOLSZ
];

53 
	gøndCou¡
 = 0;

68 
	$avR™domInô
()

70 
	`avChu∫R™d
(
NULL
, 0);

71 
	}
}

84 
	$avChu∫R™d
(*
øndD©a
, 
u32_t
 
øndLí
)

86 
MD5_CTX
 
md5
;

89 
	`MD5Inô
(&
md5
);

90 
	`MD5Upd©e
(&
md5
, (
u_ch¨
 *)
øndPoﬁ
, (randPool));

91 i‡(
øndD©a
) {

92 
	`MD5Upd©e
(&
md5
, (
u_ch¨
 *)
øndD©a
, 
øndLí
);

96 
foob¨
;

97 } 
sysD©a
;

100 
	`MD5Upd©e
(&
md5
, (
u_ch¨
 *)&
sysD©a
, (sysData));

102 
	`MD5FöÆ
((
u_ch¨
 *)
øndPoﬁ
, &
md5
);

104 
	}
}

123 
	$avGíR™d
(*
buf
, 
u32_t
 
bufLí
)

125 
MD5_CTX
 
md5
;

126 
u_ch¨
 
tmp
[16];

127 
u32_t
 
n
;

129 
bufLí
 > 0) {

130 
n
 = 
	`LWIP_MIN
(
bufLí
, 
RANDPOOLSZ
);

131 
	`MD5Inô
(&
md5
);

132 
	`MD5Upd©e
(&
md5
, (
u_ch¨
 *)
øndPoﬁ
, (randPool));

133 
	`MD5Upd©e
(&
md5
, (
u_ch¨
 *)&
øndCou¡
, (randCount));

134 
	`MD5FöÆ
(
tmp
, &
md5
);

135 
øndCou¡
++;

136 
	`MEMCPY
(
buf
, 
tmp
, 
n
);

137 
buf
 +
n
;

138 
bufLí
 -
n
;

140 
	}
}

145 
u32_t


146 
	$avR™dom
()

148 
u32_t
 
√wR™d
;

150 
	`avGíR™d
((*)&
√wR™d
, (newRand));

152  
√wR™d
;

153 
	}
}

160 
	gavR™domized
 = 0;

161 
u32_t
 
	gavR™domSìd
 = 0;

182 
	$avR™domInô
()

186 
u32_t
 *
Õå1
 = (u32_à*)((*)&
˛ockBuf
[3]);

198 
	`ªadClk
();

199 
avR™domSìd
 +*(
u32_t
 *)
˛ockBuf
 + *
Õå1
 + 
OSIdÀCå


200 + 
	`µp_mtime
(Ë+ ((
u32_t
)
TM1
 << 16) + TM1;

202 
avR™domSìd
 +
	`sys_jiffõs
();

206 
	`§™d
(()
avR™domSìd
);

207 
	}
}

217 
	$avR™domize
()

219 
u32_t
 
œ°_jiffõs
;

221 i‡(!
avR™domized
) {

222 
avR™domized
 = !0;

223 
	`avR™domInô
();

227 
avR™domSìd
 +(
	`sys_jiffõs
(Ë- 
œ°_jiffõs
);

229 
œ°_jiffõs
 = 
	`sys_jiffõs
();

230 
	}
}

241 
u32_t


242 
	$avR™dom
()

244  ((((
u32_t
)
	`ønd
(Ë<< 16Ë+Ñ™d()Ë+ 
avR™domSìd
);

245 
	}
}

	@netif/ppp/randm.h

34 #i‚de‡
RANDM_H


35 
	#RANDM_H


	)

43 
avR™domInô
();

53 
avChu∫R™d
(*
øndD©a
, 
u32_t
 
øndLí
);

59 #i‡
MD5_SUPPORT


60 
	#avR™domize
(Ë
	`avChu∫R™d
(
NULL
, 0)

	)

62 
avR™domize
();

73 
avGíR™d
(*
buf
, 
u32_t
 
bufLí
);

78 
u32_t
 
avR™dom
();

	@netif/ppp/vj.c

31 
	~"lwù/›t.h
"

33 #i‡
PPP_SUPPORT


35 
	~"µp.h
"

36 
	~"µpdebug.h
"

38 
	~"vj.h
"

40 
	~<°rög.h
>

42 #i‡
VJ_SUPPORT


44 #i‡
LINK_STATS


45 
	#INCR
(
cou¡î
Ë++
comp
->
°©s
.
	)
counter

47 
	#INCR
(
cou¡î
)

	)

51 
	$vj_com¥ess_öô
(
vjcom¥ess
 *
comp
)

53 
u_ch¨
 
i
;

54 
c°©e
 *
t°©e
 = 
comp
->tstate;

56 #i‡
MAX_SLOTS
 == 0

57 
	`mem£t
((*)
comp
, 0, (*comp));

59 
comp
->
maxSlŸIndex
 = 
MAX_SLOTS
 - 1;

60 
comp
->
com¥essSlŸ
 = 0;

61 
i
 = 
MAX_SLOTS
 - 1; i > 0; --i) {

62 
t°©e
[
i
].
cs_id
 = i;

63 
t°©e
[
i
].
cs_√xt
 = &tstate[i - 1];

65 
t°©e
[0].
cs_√xt
 = &t°©e[
MAX_SLOTS
 - 1];

66 
t°©e
[0].
cs_id
 = 0;

67 
comp
->
œ°_cs
 = &
t°©e
[0];

68 
comp
->
œ°_ªcv
 = 255;

69 
comp
->
œ°_xmô
 = 255;

70 
comp
->
Êags
 = 
VJF_TOSS
;

71 
	}
}

78 
	#ENCODE
(
n
) { \

79 i‡((
u_sh‹t
)(
n
) >= 256) { \

80 *
˝
++ = 0; \

81 
˝
[1] = (
u_ch¨
)(
n
); \

82 
˝
[0] = (
u_ch¨
)((
n
) >> 8); \

83 
˝
 += 2; \

85 *
˝
++ = (
u_ch¨
)(
n
); \

87 }

	)

88 
	#ENCODEZ
(
n
) { \

89 i‡((
u_sh‹t
)(
n
) >= 256 || (u_short)(n) == 0) { \

90 *
˝
++ = 0; \

91 
˝
[1] = (
u_ch¨
)(
n
); \

92 
˝
[0] = (
u_ch¨
)((
n
) >> 8); \

93 
˝
 += 2; \

95 *
˝
++ = (
u_ch¨
)(
n
); \

97 }

	)

99 
	#DECODEL
(
f
) { \

100 i‡(*
˝
 == 0) {\

101 
u32_t
 
tmp
 = 
	`¡ohl
(
f
Ë+ ((
˝
[1] << 8) | cp[2]); \

102 (
f
Ë
	`ht⁄l
(
tmp
); \

103 
˝
 += 3; \

105 
u32_t
 
tmp
 = 
	`¡ohl
(
f
Ë+ (u32_t)*
˝
++; \

106 (
f
Ë
	`ht⁄l
(
tmp
); \

108 }

	)

110 
	#DECODES
(
f
) { \

111 i‡(*
˝
 == 0) {\

112 
u_sh‹t
 
tmp
 = 
	`¡ohs
(
f
Ë+ (((u_sh‹t)
˝
[1] << 8) | cp[2]); \

113 (
f
Ë
	`ht⁄s
(
tmp
); \

114 
˝
 += 3; \

116 
u_sh‹t
 
tmp
 = 
	`¡ohs
(
f
Ë+ (u_sh‹t)*
˝
++; \

117 (
f
Ë
	`ht⁄s
(
tmp
); \

119 }

	)

121 
	#DECODEU
(
f
) { \

122 i‡(*
˝
 == 0) {\

123 (
f
Ë
	`ht⁄s
(((
u_sh‹t
)
˝
[1] << 8) | cp[2]); \

124 
˝
 += 3; \

126 (
f
Ë
	`ht⁄s
((
u_sh‹t
)*
˝
++); \

128 }

	)

137 
u_öt


138 
	$vj_com¥ess_t˝
(
vjcom¥ess
 *
comp
, 
pbuf
 *
pb
)

140 
ù_hdr
 *
ù
 = (ù_hd∏*)
pb
->
∑ylﬂd
;

141 
c°©e
 *
cs
 = 
comp
->
œ°_cs
->
cs_√xt
;

142 
u_sh‹t
 
hÀn
 = 
	`IPH_HL
(
ù
);

143 
t˝_hdr
 *
Ÿh
;

144 
t˝_hdr
 *
th
;

145 
u_sh‹t
 
dñèS
, 
dñèA
;

146 
u_l⁄g
 
dñèL
;

147 
u_öt
 
ch™ges
 = 0;

148 
u_ch¨
 
√w_£q
[16];

149 
u_ch¨
 *
˝
 = 
√w_£q
;

154 i‡(
	`IPH_PROTO
(
ù
Ë!
IP_PROTO_TCP
) {

155  (
TYPE_IP
);

163 i‡((
	`IPH_OFFSET
(
ù
Ë& 
	`PP_HTONS
(0x3fff)Ë|| 
pb
->
tŸ_Àn
 < 40) {

164  (
TYPE_IP
);

166 
th
 = (
t˝_hdr
 *)&((*)
ù
)[
hÀn
];

167 i‡((
	`TCPH_FLAGS
(
th
Ë& (
TCP_SYN
|
TCP_FIN
|
TCP_RST
|
TCP_ACK
)) != TCP_ACK) {

168  (
TYPE_IP
);

177 
	`INCR
(
vjs_∑ckës
);

178 i‡(!
	`ù_addr_cmp
(&
ù
->
§c
, &
cs
->
cs_ù
.src)

179 || !
	`ù_addr_cmp
(&
ù
->
de°
, &
cs
->
cs_ù
.dest)

180 || *(*)
th
 !((*)&
cs
->
cs_ù
)[
	`IPH_HL
(&cs->cs_ip)]) {

193 
c°©e
 *
lcs
;

194 
c°©e
 *
œ°cs
 = 
comp
->
œ°_cs
;

197 
lcs
 = 
cs
; c†cs->
cs_√xt
;

198 
	`INCR
(
vjs_£¨ches
);

199 i‡(
	`ù_addr_cmp
(&
ù
->
§c
, &
cs
->
cs_ù
.src)

200 && 
	`ù_addr_cmp
(&
ù
->
de°
, &
cs
->
cs_ù
.dest)

201 && *(*)
th
 =((*)&
cs
->
cs_ù
)[
	`IPH_HL
(&cs->cs_ip)]) {

202 
found
;

204 } 
cs
 !
œ°cs
);

214 
	`INCR
(
vjs_mis£s
);

215 
comp
->
œ°_cs
 = 
lcs
;

216 
hÀn
 +
	`TCPH_OFFSET
(
th
);

217 
hÀn
 <<= 2;

219 i‡(
hÀn
 > 
pb
->
Àn
) {

220  (
TYPE_IP
);

222 
uncom¥es£d
;

224 
found
:

228 i‡(
cs
 =
œ°cs
) {

229 
comp
->
œ°_cs
 = 
lcs
;

231 
lcs
->
cs_√xt
 = 
cs
->cs_next;

232 
cs
->
cs_√xt
 = 
œ°cs
->cs_next;

233 
œ°cs
->
cs_√xt
 = 
cs
;

237 
Ÿh
 = (
t˝_hdr
 *)&((*)&
cs
->
cs_ù
)[
hÀn
];

238 
dñèS
 = 
hÀn
;

239 
hÀn
 +
	`TCPH_OFFSET
(
th
);

240 
hÀn
 <<= 2;

242 i‡(
hÀn
 > 
pb
->
Àn
) {

243 
	`PPPDEBUG
(
LOG_INFO
, ("vj_com¥ess_t˝: hódîÜí %d s∑n†buf„rs\n", 
hÀn
));

244  (
TYPE_IP
);

258 i‡(((
u_sh‹t
 *)
ù
)[0] !((u_sh‹à*)&
cs
->
cs_ù
)[0]

259 || ((
u_sh‹t
 *)
ù
)[3] !((u_sh‹à*)&
cs
->
cs_ù
)[3]

260 || ((
u_sh‹t
 *)
ù
)[4] !((u_sh‹à*)&
cs
->
cs_ù
)[4]

261 || 
	`TCPH_OFFSET
(
th
Ë!TCPH_OFFSET(
Ÿh
)

262 || (
dñèS
 > 5 && 
	`BCMP
(
ù
 + 1, &
cs
->
cs_ù
 + 1, (deltaS - 5) << 2))

263 || (
	`TCPH_OFFSET
(
th
Ë> 5 && 
	`BCMP
—h + 1, 
Ÿh
 + 1, (TCPH_OFFSET(th) - 5) << 2))) {

264 
uncom¥es£d
;

273 i‡(
	`TCPH_FLAGS
(
th
Ë& 
TCP_URG
) {

274 
dñèS
 = 
	`¡ohs
(
th
->
urgp
);

275 
	`ENCODEZ
(
dñèS
);

276 
ch™ges
 |
NEW_U
;

277 } i‡(
th
->
urgp
 !
Ÿh
->urgp) {

282 
uncom¥es£d
;

285 i‡((
dñèS
 = (
u_sh‹t
)(
	`¡ohs
(
th
->
wnd
Ë-Çtohs(
Ÿh
->wnd))) != 0) {

286 
	`ENCODE
(
dñèS
);

287 
ch™ges
 |
NEW_W
;

290 i‡((
dñèL
 = 
	`¡ohl
(
th
->
ackno
Ë-Çtohl(
Ÿh
->ackno)) != 0) {

291 i‡(
dñèL
 > 0xffff) {

292 
uncom¥es£d
;

294 
dñèA
 = (
u_sh‹t
)
dñèL
;

295 
	`ENCODE
(
dñèA
);

296 
ch™ges
 |
NEW_A
;

299 i‡((
dñèL
 = 
	`¡ohl
(
th
->
£qno
Ë-Çtohl(
Ÿh
->seqno)) != 0) {

300 i‡(
dñèL
 > 0xffff) {

301 
uncom¥es£d
;

303 
dñèS
 = (
u_sh‹t
)
dñèL
;

304 
	`ENCODE
(
dñèS
);

305 
ch™ges
 |
NEW_S
;

308 
ch™ges
) {

318 i‡(
	`IPH_LEN
(
ù
Ë!IPH_LEN(&
cs
->
cs_ù
) &&

319 
	`¡ohs
(
	`IPH_LEN
(&
cs
->
cs_ù
)Ë=
hÀn
) {

325 
SPECIAL_I
:

326 
SPECIAL_D
:

331 
uncom¥es£d
;

333 
NEW_S
|
NEW_A
:

334 i‡(
dñèS
 =
dñèA
 && dñèS =
	`¡ohs
(
	`IPH_LEN
(&
cs
->
cs_ù
)Ë- 
hÀn
) {

336 
ch™ges
 = 
SPECIAL_I
;

337 
˝
 = 
√w_£q
;

341 
NEW_S
:

342 i‡(
dñèS
 =
	`¡ohs
(
	`IPH_LEN
(&
cs
->
cs_ù
)Ë- 
hÀn
) {

344 
ch™ges
 = 
SPECIAL_D
;

345 
˝
 = 
√w_£q
;

350 
dñèS
 = (
u_sh‹t
)(
	`¡ohs
(
	`IPH_ID
(
ù
)Ë-Çtohs(IPH_ID(&
cs
->
cs_ù
)));

351 i‡(
dñèS
 != 1) {

352 
	`ENCODEZ
(
dñèS
);

353 
ch™ges
 |
NEW_I
;

355 i‡(
	`TCPH_FLAGS
(
th
Ë& 
TCP_PSH
) {

356 
ch™ges
 |
TCP_PUSH_BIT
;

362 
dñèA
 = 
	`¡ohs
(
th
->
chksum
);

363 
	`BCOPY
(
ù
, &
cs
->
cs_ù
, 
hÀn
);

374 
dñèS
 = (
u_sh‹t
)(
˝
 - 
√w_£q
);

375 i‡(!
comp
->
com¥essSlŸ
 || comp->
œ°_xmô
 !
cs
->
cs_id
) {

376 
comp
->
œ°_xmô
 = 
cs
->
cs_id
;

377 
hÀn
 -
dñèS
 + 4;

378 if(
	`pbuf_hódî
(
pb
, -
hÀn
)){

380 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

382 
˝
 = (
u_ch¨
 *)
pb
->
∑ylﬂd
;

383 *
˝
++ = (
u_ch¨
)(
ch™ges
 | 
NEW_C
);

384 *
˝
++ = 
cs
->
cs_id
;

386 
hÀn
 -
dñèS
 + 3;

387 if(
	`pbuf_hódî
(
pb
, -
hÀn
)) {

389 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

391 
˝
 = (
u_ch¨
 *)
pb
->
∑ylﬂd
;

392 *
˝
++ = (
u_ch¨
)
ch™ges
;

394 *
˝
++ = (
u_ch¨
)(
dñèA
 >> 8);

395 *
˝
++ = (
u_ch¨
)
dñèA
;

396 
	`BCOPY
(
√w_£q
, 
˝
, 
dñèS
);

397 
	`INCR
(
vjs_com¥es£d
);

398  (
TYPE_COMPRESSED_TCP
);

405 
uncom¥es£d
:

406 
	`BCOPY
(
ù
, &
cs
->
cs_ù
, 
hÀn
);

407 
	`IPH_PROTO_SET
(
ù
, 
cs
->
cs_id
);

408 
comp
->
œ°_xmô
 = 
cs
->
cs_id
;

409  (
TYPE_UNCOMPRESSED_TCP
);

410 
	}
}

416 
	$vj_uncom¥ess_îr
(
vjcom¥ess
 *
comp
)

418 
comp
->
Êags
 |
VJF_TOSS
;

419 
	`INCR
(
vjs_îr‹ö
);

420 
	}
}

427 
	$vj_uncom¥ess_uncomp
(
pbuf
 *
nb
, 
vjcom¥ess
 *
comp
)

429 
u_öt
 
hÀn
;

430 
c°©e
 *
cs
;

431 
ù_hdr
 *
ù
;

433 
ù
 = (
ù_hdr
 *)
nb
->
∑ylﬂd
;

434 
hÀn
 = 
	`IPH_HL
(
ù
) << 2;

435 i‡(
	`IPH_PROTO
(
ù
Ë>
MAX_SLOTS


436 || 
hÀn
 + (
t˝_hdr
Ë> 
nb
->
Àn


437 || (
hÀn
 +
	`TCPH_OFFSET
(((
t˝_hdr
 *)&((*)
ù
)[hlen])) << 2)

438 > 
nb
->
Àn


439 || 
hÀn
 > 
MAX_HDR
) {

440 
	`PPPDEBUG
(
LOG_INFO
, ("vj_uncompress_uncomp: bad cid=%d, hlen=%d buflen=%d\n",

441 
	`IPH_PROTO
(
ù
), 
hÀn
, 
nb
->
Àn
));

442 
comp
->
Êags
 |
VJF_TOSS
;

443 
	`INCR
(
vjs_îr‹ö
);

446 
cs
 = &
comp
->
r°©e
[comp->
œ°_ªcv
 = 
	`IPH_PROTO
(
ù
)];

447 
comp
->
Êags
 &=~ 
VJF_TOSS
;

448 
	`IPH_PROTO_SET
(
ù
, 
IP_PROTO_TCP
);

449 
	`BCOPY
(
ù
, &
cs
->
cs_ù
, 
hÀn
);

450 
cs
->
cs_hÀn
 = (
u_sh‹t
)
hÀn
;

451 
	`INCR
(
vjs_uncom¥es£dö
);

453 
	}
}

464 
	$vj_uncom¥ess_t˝
(
pbuf
 **
nb
, 
vjcom¥ess
 *
comp
)

466 
u_ch¨
 *
˝
;

467 
t˝_hdr
 *
th
;

468 
c°©e
 *
cs
;

469 
u_sh‹t
 *
bp
;

470 
pbuf
 *
n0
 = *
nb
;

471 
u32_t
 
tmp
;

472 
u_öt
 
vjÀn
, 
hÀn
, 
ch™ges
;

474 
	`INCR
(
vjs_com¥es£dö
);

475 
˝
 = (
u_ch¨
 *)
n0
->
∑ylﬂd
;

476 
ch™ges
 = *
˝
++;

477 i‡(
ch™ges
 & 
NEW_C
) {

482 i‡(*
˝
 >
MAX_SLOTS
) {

483 
	`PPPDEBUG
(
LOG_INFO
, ("vj_uncom¥ess_t˝: bad cid=%d\n", *
˝
));

484 
bad
;

487 
comp
->
Êags
 &=~ 
VJF_TOSS
;

488 
comp
->
œ°_ªcv
 = *
˝
++;

495 i‡(
comp
->
Êags
 & 
VJF_TOSS
) {

496 
	`PPPDEBUG
(
LOG_INFO
, ("vj_uncompress_tcp:Åossing\n"));

497 
	`INCR
(
vjs_tos£d
);

501 
cs
 = &
comp
->
r°©e
[comp->
œ°_ªcv
];

502 
hÀn
 = 
	`IPH_HL
(&
cs
->
cs_ù
) << 2;

503 
th
 = (
t˝_hdr
 *)&((
u_ch¨
 *)&
cs
->
cs_ù
)[
hÀn
];

504 
th
->
chksum
 = 
	`ht⁄s
((*
˝
 << 8) | cp[1]);

505 
˝
 += 2;

506 i‡(
ch™ges
 & 
TCP_PUSH_BIT
) {

507 
	`TCPH_SET_FLAG
(
th
, 
TCP_PSH
);

509 
	`TCPH_UNSET_FLAG
(
th
, 
TCP_PSH
);

512 
ch™ges
 & 
SPECIALS_MASK
) {

513 
SPECIAL_I
:

515 
u32_t
 
i
 = 
	`¡ohs
(
	`IPH_LEN
(&
cs
->
cs_ù
)Ë- cs->
cs_hÀn
;

517 
tmp
 = 
	`¡ohl
(
th
->
ackno
Ë+ 
i
;

518 
th
->
ackno
 = 
	`ht⁄l
(
tmp
);

519 
tmp
 = 
	`¡ohl
(
th
->
£qno
Ë+ 
i
;

520 
th
->
£qno
 = 
	`ht⁄l
(
tmp
);

524 
SPECIAL_D
:

526 
tmp
 = 
	`¡ohl
(
th
->
£qno
Ë+ 
	`¡ohs
(
	`IPH_LEN
(&
cs
->
cs_ù
)Ë- cs->
cs_hÀn
;

527 
th
->
£qno
 = 
	`ht⁄l
(
tmp
);

531 i‡(
ch™ges
 & 
NEW_U
) {

532 
	`TCPH_SET_FLAG
(
th
, 
TCP_URG
);

533 
	`DECODEU
(
th
->
urgp
);

535 
	`TCPH_UNSET_FLAG
(
th
, 
TCP_URG
);

537 i‡(
ch™ges
 & 
NEW_W
) {

538 
	`DECODES
(
th
->
wnd
);

540 i‡(
ch™ges
 & 
NEW_A
) {

541 
	`DECODEL
(
th
->
ackno
);

543 i‡(
ch™ges
 & 
NEW_S
) {

544 
	`DECODEL
(
th
->
£qno
);

548 i‡(
ch™ges
 & 
NEW_I
) {

549 
	`DECODES
(
cs
->
cs_ù
.
_id
);

551 
	`IPH_ID_SET
(&
cs
->
cs_ù
, 
	`¡ohs
(
	`IPH_ID
(&cs->cs_ip)) + 1);

552 
	`IPH_ID_SET
(&
cs
->
cs_ù
, 
	`ht⁄s
(
	`IPH_ID
(&cs->cs_ip)));

560 
vjÀn
 = (
u_sh‹t
)(
˝
 - (
u_ch¨
*)
n0
->
∑ylﬂd
);

561 i‡(
n0
->
Àn
 < 
vjÀn
) {

566 
	`PPPDEBUG
(
LOG_INFO
, ("vj_uncompress_tcp: head buffer %dÅoo short %d\n",

567 
n0
->
Àn
, 
vjÀn
));

568 
bad
;

571 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


572 
tmp
 = 
n0
->
tŸ_Àn
 - 
vjÀn
 + 
cs
->
cs_hÀn
;

573 
	`IPH_LEN_SET
(&
cs
->
cs_ù
, 
	`ht⁄s
((
u_sh‹t
)
tmp
));

575 
	`IPH_LEN_SET
(&
cs
->
cs_ù
, 
	`ht⁄s
(
n0
->
tŸ_Àn
 - 
vjÀn
 + cs->
cs_hÀn
));

579 
bp
 = (
u_sh‹t
 *Ë&
cs
->
cs_ù
;

580 
	`IPH_CHKSUM_SET
(&
cs
->
cs_ù
, 0);

581 
tmp
 = 0; 
hÀn
 > 0; hlen -= 2) {

582 
tmp
 +*
bp
++;

584 
tmp
 = (tmp & 0xffff) + (tmp >> 16);

585 
tmp
 = (tmp & 0xffff) + (tmp >> 16);

586 
	`IPH_CHKSUM_SET
(&
cs
->
cs_ù
, (
u_sh‹t
)(~
tmp
));

589 if(
	`pbuf_hódî
(
n0
, -((
s16_t
)(
vjÀn
)))) {

591 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

592 
bad
;

595 if(
	`LWIP_MEM_ALIGN
(
n0
->
∑ylﬂd
) !=Ç0->payload) {

596 
pbuf
 *
≈
, *
q
;

597 
u8_t
 *
buÂå
;

599 
≈
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
n0
->
Àn
 + 
cs
->
cs_hÀn
, 
PBUF_POOL
);

600 if(!
≈
) {

601 
	`PPPDEBUG
(
LOG_WARNING
, ("vj_uncompress_tcp:Ñealign failed\n"));

602 
bad
;

605 if(
	`pbuf_hódî
(
≈
, -
cs
->
cs_hÀn
)) {

607 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

608 
bad
;

611 
buÂå
 = 
n0
->
∑ylﬂd
;

612 
q
 = 
≈
; q !
NULL
; q = q->
√xt
) {

613 
	`MEMCPY
(
q
->
∑ylﬂd
, 
buÂå
, q->
Àn
);

614 
buÂå
 +
q
->
Àn
;

617 if(
n0
->
√xt
) {

618 
	`pbuf_chaö
(
≈
, 
n0
->
√xt
);

619 
	`pbuf_dechaö
(
n0
);

621 
	`pbuf_‰ì
(
n0
);

622 
n0
 = 
≈
;

625 if(
	`pbuf_hódî
(
n0
, 
cs
->
cs_hÀn
)) {

626 
pbuf
 *
≈
;

628 
	`LWIP_ASSERT
("vj_uncom¥ess_t˝: cs->cs_hÀ¿<PBUF_POOL_BUFSIZE", 
cs
->
cs_hÀn
 <
PBUF_POOL_BUFSIZE
);

629 
≈
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
cs
->
cs_hÀn
, 
PBUF_POOL
);

630 if(!
≈
) {

631 
	`PPPDEBUG
(
LOG_WARNING
, ("vj_uncompress_tcp:Örepend failed\n"));

632 
bad
;

634 
	`pbuf_ˇt
(
≈
, 
n0
);

635 
n0
 = 
≈
;

637 
	`LWIP_ASSERT
("n0->À¿>cs->cs_hÀn", 
n0
->
Àn
 >
cs
->
cs_hÀn
);

638 
	`MEMCPY
(
n0
->
∑ylﬂd
, &
cs
->
cs_ù
, cs->
cs_hÀn
);

640 *
nb
 = 
n0
;

642  
vjÀn
;

644 
bad
:

645 
comp
->
Êags
 |
VJF_TOSS
;

646 
	`INCR
(
vjs_îr‹ö
);

648 
	}
}

	@netif/ppp/vj.h

25 #i‚de‡
VJ_H


26 
	#VJ_H


	)

28 
	~"lwù/ù.h
"

29 
	~"lwù/t˝_im∂.h
"

31 
	#MAX_SLOTS
 16

	)

32 
	#MAX_HDR
 128

	)

78 
	#TYPE_IP
 0x40

	)

79 
	#TYPE_UNCOMPRESSED_TCP
 0x70

	)

80 
	#TYPE_COMPRESSED_TCP
 0x80

	)

81 
	#TYPE_ERROR
 0x00

	)

84 
	#NEW_C
 0x40

	)

85 
	#NEW_I
 0x20

	)

86 
	#NEW_S
 0x08

	)

87 
	#NEW_A
 0x04

	)

88 
	#NEW_W
 0x02

	)

89 
	#NEW_U
 0x01

	)

92 
	#SPECIAL_I
 (
NEW_S
|
NEW_W
|
NEW_U
Ë

	)

93 
	#SPECIAL_D
 (
NEW_S
|
NEW_A
|
NEW_W
|
NEW_U
Ë

	)

94 
	#SPECIALS_MASK
 (
NEW_S
|
NEW_A
|
NEW_W
|
NEW_U
)

	)

96 
	#TCP_PUSH_BIT
 0x10

	)

105 
	sc°©e
 {

106 
c°©e
 *
	mcs_√xt
;

107 
u_sh‹t
 
	mcs_hÀn
;

108 
u_ch¨
 
	mcs_id
;

109 
u_ch¨
 
	mcs_fûÀr
;

111 
	mcsu_hdr
[
MAX_HDR
];

112 
ù_hdr
 
	mcsu_ù
;

113 } 
	mvjcs_u
;

115 
	#cs_ù
 
vjcs_u
.
csu_ù


	)

116 
	#cs_hdr
 
vjcs_u
.
csu_hdr


	)

119 
	svj°©
 {

120 
	mvjs_∑ckës
;

121 
	mvjs_com¥es£d
;

122 
	mvjs_£¨ches
;

123 
	mvjs_mis£s
;

124 
	mvjs_uncom¥es£dö
;

125 
	mvjs_com¥es£dö
;

126 
	mvjs_îr‹ö
;

127 
	mvjs_tos£d
;

133 
	svjcom¥ess
 {

134 
c°©e
 *
	mœ°_cs
;

135 
u_ch¨
 
	mœ°_ªcv
;

136 
u_ch¨
 
	mœ°_xmô
;

137 
u_sh‹t
 
	mÊags
;

138 
u_ch¨
 
	mmaxSlŸIndex
;

139 
u_ch¨
 
	mcom¥essSlŸ
;

140 #i‡
LINK_STATS


141 
vj°©
 
	m°©s
;

143 
c°©e
 
	mt°©e
[
MAX_SLOTS
];

144 
c°©e
 
	mr°©e
[
MAX_SLOTS
];

148 
	#VJF_TOSS
 1U

	)

150 
vj_com¥ess_öô
 (
vjcom¥ess
 *
comp
);

151 
u_öt
 
vj_com¥ess_t˝
 (
vjcom¥ess
 *
comp
, 
pbuf
 *
pb
);

152 
vj_uncom¥ess_îr
 (
vjcom¥ess
 *
comp
);

153 
vj_uncom¥ess_uncomp
(
pbuf
 *
nb
, 
vjcom¥ess
 *
comp
);

154 
vj_uncom¥ess_t˝
 (
pbuf
 **
nb
, 
vjcom¥ess
 *
comp
);

	@netif/slipif.c

45 
	~"√tif/¶ùif.h
"

46 
	~"lwù/›t.h
"

48 #i‡
LWIP_HAVE_SLIPIF


50 
	~"lwù/def.h
"

51 
	~"lwù/pbuf.h
"

52 
	~"lwù/sys.h
"

53 
	~"lwù/°©s.h
"

54 
	~"lwù/¢mp.h
"

55 
	~"lwù/sio.h
"

57 
	#SLIP_BLOCK
 1

	)

58 
	#SLIP_DONTBLOCK
 0

	)

60 
	#SLIP_END
 0300

	)

61 
	#SLIP_ESC
 0333

	)

62 
	#SLIP_ESC_END
 0334

	)

63 
	#SLIP_ESC_ESC
 0335

	)

65 
	#SLIP_MAX_SIZE
 1500

	)

67 
	e¶ùif_ªcv_°©e
 {

68 
	mSLIP_RECV_NORMAL
,

69 
	mSLIP_RECV_ESCAPE
,

72 
	s¶ùif_¥iv
 {

73 
sio_fd_t
 
	msd
;

75 
pbuf
 *
	mp
, *
	mq
;

76 
¶ùif_ªcv_°©e
 
	m°©e
;

77 
u16_t
 
	mi
, 
	mªcved
;

90 
îr_t


91 
	$¶ùif_ouçut
(
√tif
 *√tif, 
pbuf
 *
p
, 
ù_addr_t
 *
ùaddr
)

93 
¶ùif_¥iv
 *
¥iv
;

94 
pbuf
 *
q
;

95 
u16_t
 
i
;

96 
u8_t
 
c
;

98 
	`LWIP_ASSERT
("√ti‡!NULL", (
√tif
 !
NULL
));

99 
	`LWIP_ASSERT
("√tif->°©ê!NULL", (
√tif
->
°©e
 !
NULL
));

100 
	`LWIP_ASSERT
("∞!NULL", (
p
 !
NULL
));

102 
	`LWIP_UNUSED_ARG
(
ùaddr
);

104 
¥iv
 = 
√tif
->
°©e
;

107 
	`sio_£nd
(
SLIP_END
, 
¥iv
->
sd
);

109 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

110 
i
 = 0; i < 
q
->
Àn
; i++) {

111 
c
 = ((
u8_t
 *)
q
->
∑ylﬂd
)[
i
];

112 
c
) {

113 
SLIP_END
:

114 
	`sio_£nd
(
SLIP_ESC
, 
¥iv
->
sd
);

115 
	`sio_£nd
(
SLIP_ESC_END
, 
¥iv
->
sd
);

117 
SLIP_ESC
:

118 
	`sio_£nd
(
SLIP_ESC
, 
¥iv
->
sd
);

119 
	`sio_£nd
(
SLIP_ESC_ESC
, 
¥iv
->
sd
);

122 
	`sio_£nd
(
c
, 
¥iv
->
sd
);

127 
	`sio_£nd
(
SLIP_END
, 
¥iv
->
sd
);

128  
ERR_OK
;

129 
	}
}

141 
u32_t


142 
	$¶ù_sio_ªad
(
sio_fd_t
 
fd
, 
u8_t
* 
d©a
, 
u32_t
 
Àn
, u8_à
block
)

144 i‡(
block
) {

145  
	`sio_ªad
(
fd
, 
d©a
, 
Àn
);

147  
	`sio_åyªad
(
fd
, 
d©a
, 
Àn
);

149 
	}
}

162 
pbuf
 *

163 
	$¶ùif_öput
(
√tif
 *√tif, 
u8_t
 
block
)

165 
¶ùif_¥iv
 *
¥iv
;

166 
u8_t
 
c
;

167 
pbuf
 *
t
;

169 
	`LWIP_ASSERT
("√ti‡!NULL", (
√tif
 !
NULL
));

170 
	`LWIP_ASSERT
("√tif->°©ê!NULL", (
√tif
->
°©e
 !
NULL
));

172 
¥iv
 = 
√tif
->
°©e
;

174 
	`¶ù_sio_ªad
(
¥iv
->
sd
, &
c
, 1, 
block
) > 0) {

175 
¥iv
->
°©e
) {

176 
SLIP_RECV_NORMAL
:

177 
c
) {

178 
SLIP_END
:

179 i‡(
¥iv
->
ªcved
 > 0) {

182 
	`pbuf_ªÆloc
(
¥iv
->
q
,Öriv->
ªcved
);

184 
	`LINK_STATS_INC
(
lök
.
ªcv
);

186 
	`LWIP_DEBUGF
(
SLIP_DEBUG
, ("slipif: GotÖacket\n"));

187 
t
 = 
¥iv
->
q
;

188 
¥iv
->
p
 =Öriv->
q
 = 
NULL
;

189 
¥iv
->
i
 =Öriv->
ªcved
 = 0;

190  
t
;

193 
SLIP_ESC
:

194 
¥iv
->
°©e
 = 
SLIP_RECV_ESCAPE
;

198 
SLIP_RECV_ESCAPE
:

199 
c
) {

200 
SLIP_ESC_END
:

201 
c
 = 
SLIP_END
;

203 
SLIP_ESC_ESC
:

204 
c
 = 
SLIP_ESC
;

207 
¥iv
->
°©e
 = 
SLIP_RECV_NORMAL
;

212 i‡(
¥iv
->
p
 =
NULL
) {

214 
	`LWIP_DEBUGF
(
SLIP_DEBUG
, ("slipif_input:álloc\n"));

215 
¥iv
->
p
 = 
	`pbuf_Æloc
(
PBUF_LINK
, (
PBUF_POOL_BUFSIZE
 - 
PBUF_LINK_HLEN
), 
PBUF_POOL
);

217 i‡(
¥iv
->
p
 =
NULL
) {

218 
	`LINK_STATS_INC
(
lök
.
dr›
);

219 
	`LWIP_DEBUGF
(
SLIP_DEBUG
, ("slipif_input:ÇoÇewÖbuf! (DROP)\n"));

224 i‡(
¥iv
->
q
 !
NULL
) {

226 
	`pbuf_ˇt
(
¥iv
->
q
,Öriv->
p
);

229 
¥iv
->
q
 =Öriv->
p
;

234 i‡((
¥iv
->
p
 !
NULL
Ë&& (¥iv->
ªcved
 <
SLIP_MAX_SIZE
)) {

235 ((
u8_t
 *)
¥iv
->
p
->
∑ylﬂd
)[¥iv->
i
] = 
c
;

236 
¥iv
->
ªcved
++;

237 
¥iv
->
i
++;

238 i‡(
¥iv
->
i
 >¥iv->
p
->
Àn
) {

240 
¥iv
->
i
 = 0;

241 i‡(
¥iv
->
p
->
√xt
 !
NULL
 &&Öriv->p->√xt->
Àn
 > 0) {

243 
¥iv
->
p
 =Öriv->p->
√xt
;

247 
¥iv
->
p
 = 
NULL
;

253  
NULL
;

254 
	}
}

256 #i‡!
NO_SYS


265 
	$¶ùif_lo›_thªad
(*
nf
)

267 
pbuf
 *
p
;

268 
√tif
 *√ti‡(√ti‡*)
nf
;

271 
p
 = 
	`¶ùif_öput
(
√tif
, 
SLIP_BLOCK
);

272 i‡(
p
 !
NULL
) {

273 i‡(
√tif
->
	`öput
(
p
,ÇëifË!
ERR_OK
) {

274 
	`pbuf_‰ì
(
p
);

275 
p
 = 
NULL
;

279 
	}
}

296 
îr_t


297 
	$¶ùif_öô
(
√tif
 *netif)

299 
¶ùif_¥iv
 *
¥iv
;

301 
	`LWIP_DEBUGF
(
SLIP_DEBUG
, ("¶ùif_öô:Çëif->num=%"
U16_F
"\n", (
u16_t
)
√tif
->
num
));

304 
¥iv
 = 
	`mem_mÆloc
((
¶ùif_¥iv
));

305 i‡(!
¥iv
) {

306  
ERR_MEM
;

309 
√tif
->
«me
[0] = 's';

310 
√tif
->
«me
[1] = 'l';

311 
√tif
->
ouçut
 = 
¶ùif_ouçut
;

312 
√tif
->
mtu
 = 
SLIP_MAX_SIZE
;

313 
√tif
->
Êags
 |
NETIF_FLAG_POINTTOPOINT
;

316 
¥iv
->
sd
 = 
	`sio_›í
(
√tif
->
num
);

317 i‡(!
¥iv
->
sd
) {

319 
	`mem_‰ì
(
¥iv
);

320  
ERR_IF
;

324 
¥iv
->
p
 = 
NULL
;

325 
¥iv
->
q
 = 
NULL
;

326 
¥iv
->
°©e
 = 
SLIP_RECV_NORMAL
;

327 
¥iv
->
i
 = 0;

328 
¥iv
->
ªcved
 = 0;

330 
√tif
->
°©e
 = 
¥iv
;

336 
	`NETIF_INIT_SNMP
(
√tif
, 
¢mp_ifTy≥_¶ù
, 0);

339 
	`sys_thªad_√w
(
SLIPIF_THREAD_NAME
, 
¶ùif_lo›_thªad
, 
√tif
,

340 
SLIPIF_THREAD_STACKSIZE
, 
SLIPIF_THREAD_PRIO
);

341  
ERR_OK
;

342 
	}
}

350 
	$¶ùif_pﬁl
(
√tif
 *netif)

352 
pbuf
 *
p
;

353 
¶ùif_¥iv
 *
¥iv
;

355 
	`LWIP_ASSERT
("√ti‡!NULL", (
√tif
 !
NULL
));

356 
	`LWIP_ASSERT
("√tif->°©ê!NULL", (
√tif
->
°©e
 !
NULL
));

358 
¥iv
 = 
√tif
->
°©e
;

360 (
p
 = 
	`¶ùif_öput
(
√tif
, 
SLIP_DONTBLOCK
)Ë!
NULL
) {

361 i‡(
√tif
->
	`öput
(
p
,ÇëifË!
ERR_OK
) {

362 
	`pbuf_‰ì
(
p
);

365 
	}
}

	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


148 
	#P_tmpdú
 "/tmp"

	)

161 
	~<bôs/°dio_lim.h
>

165 
_IO_FILE
 *
°dö
;

166 
_IO_FILE
 *
°dout
;

167 
_IO_FILE
 *
°dîr
;

169 
	#°dö
 
°dö


	)

170 
	#°dout
 
°dout


	)

171 
	#°dîr
 
°dîr


	)

173 
__BEGIN_NAMESPACE_STD


175 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

177 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

178 
__END_NAMESPACE_STD


180 #ifde‡
__USE_ATFILE


182 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

183 
__c⁄°
 *
__√w
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


191 #i‚de‡
__USE_FILE_OFFSET64


192 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

194 #ifde‡
__REDIRECT


195 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

197 
	#tmpfûe
 
tmpfûe64


	)

201 #ifde‡
__USE_LARGEFILE64


202 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

206 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

207 
__END_NAMESPACE_STD


209 #ifde‡
__USE_MISC


212 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

216 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


224 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

225 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

229 
__BEGIN_NAMESPACE_STD


234 
	`f˛o£
 (
FILE
 *
__°ªam
);

239 
	`fÊush
 (
FILE
 *
__°ªam
);

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_MISC


249 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

252 #ifde‡
__USE_GNU


259 
	`f˛o£Æl
 ();

263 
__BEGIN_NAMESPACE_STD


264 #i‚de‡
__USE_FILE_OFFSET64


269 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

270 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

275 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

276 
__c⁄°
 *
__ª°ri˘
 
__modes
,

277 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

279 #ifde‡
__REDIRECT


280 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

281 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

282 
__wur
;

283 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

284 
__c⁄°
 *
__ª°ri˘
 
__modes
,

285 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

286 
__wur
;

288 
	#f›í
 
f›í64


	)

289 
	#‰e›í
 
‰e›í64


	)

292 
__END_NAMESPACE_STD


293 #ifde‡
__USE_LARGEFILE64


294 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

295 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

296 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

297 
__c⁄°
 *
__ª°ri˘
 
__modes
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 #ifdef 
__USE_POSIX


303 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

306 #ifdef 
__USE_GNU


309 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

310 
__c⁄°
 *
__ª°ri˘
 
__modes
,

311 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

314 #ifde‡
__USE_XOPEN2K8


316 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

317 
__THROW
 
__wur
;

322 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

326 
__BEGIN_NAMESPACE_STD


329 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

333 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

334 
__modes
, 
size_t
 
__n
Ë
__THROW
;

335 
__END_NAMESPACE_STD


337 #ifdef 
__USE_BSD


340 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

341 
size_t
 
__size
Ë
__THROW
;

344 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

348 
__BEGIN_NAMESPACE_STD


353 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

354 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

359 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

361 
	$•rötf
 (*
__ª°ri˘
 
__s
,

362 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

368 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

369 
_G_va_li°
 
__¨g
);

374 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

376 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

377 
_G_va_li°
 
__¨g
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


381 
__BEGIN_NAMESPACE_C99


383 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

384 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

385 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

387 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

388 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

389 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

390 
__END_NAMESPACE_C99


393 #ifde‡
__USE_GNU


396 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

397 
_G_va_li°
 
__¨g
)

398 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

399 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

400 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

401 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

402 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

403 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

404 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

407 #ifde‡
__USE_XOPEN2K8


414 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

415 
_G_va_li°
 
__¨g
)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

417 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

418 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

422 
__BEGIN_NAMESPACE_STD


427 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

428 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

435 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

436 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

438 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

439 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

440 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

441 #ifde‡
__REDIRECT


445 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

446 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_fsˇnf
Ë
__wur
;

448 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

449 
__isoc99_sˇnf
Ë
__wur
;

450 
	`__REDIRECT_NTH
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

451 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

452 
__isoc99_ssˇnf
);

454 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

455 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

456 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

457 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

458 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

459 
	#fsˇnf
 
__isoc99_fsˇnf


	)

460 
	#sˇnf
 
__isoc99_sˇnf


	)

461 
	#ssˇnf
 
__isoc99_ssˇnf


	)

465 
__END_NAMESPACE_STD


467 #ifdef 
__USE_ISOC99


468 
__BEGIN_NAMESPACE_C99


473 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

474 
_G_va_li°
 
__¨g
)

475 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

481 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

482 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

485 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

486 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

487 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

489 #i‡!
deföed
 
__USE_GNU
 \

490 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

491 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

492 #ifde‡
__REDIRECT


496 
	`__REDIRECT
 (
vfsˇnf
,

497 (
FILE
 *
__ª°ri˘
 
__s
,

498 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

499 
__isoc99_vfsˇnf
)

500 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

501 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

502 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

503 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

504 
	`__REDIRECT_NTH
 (
vssˇnf
,

505 (
__c⁄°
 *
__ª°ri˘
 
__s
,

506 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

507 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

508 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

510 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

511 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

514 
_G_va_li°
 
__¨g
Ë
__wur
;

515 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

516 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

517 
_G_va_li°
 
__¨g
Ë
__THROW
;

518 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

519 
	#vsˇnf
 
__isoc99_vsˇnf


	)

520 
	#vssˇnf
 
__isoc99_vssˇnf


	)

524 
__END_NAMESPACE_C99


528 
__BEGIN_NAMESPACE_STD


533 
	`fgëc
 (
FILE
 *
__°ªam
);

534 
	`gëc
 (
FILE
 *
__°ªam
);

540 
	`gëch¨
 ();

541 
__END_NAMESPACE_STD


545 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

547 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


552 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

553 
	`gëch¨_u∆ocked
 ();

556 #ifde‡
__USE_MISC


563 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

567 
__BEGIN_NAMESPACE_STD


575 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

576 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

582 
	`putch¨
 (
__c
);

583 
__END_NAMESPACE_STD


587 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

589 #ifde‡
__USE_MISC


596 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

599 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


604 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

605 
	`putch¨_u∆ocked
 (
__c
);

609 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

610 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

612 
	`gëw
 (
FILE
 *
__°ªam
);

615 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

619 
__BEGIN_NAMESPACE_STD


624 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

625 
__wur
;

632 *
	$gës
 (*
__s
Ë
__wur
;

633 
__END_NAMESPACE_STD


635 #ifde‡
__USE_GNU


642 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

643 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

647 #ifdef 
__USE_XOPEN2K8


658 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

659 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

660 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

661 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

662 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

663 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

671 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

672 
size_t
 *
__ª°ri˘
 
__n
,

673 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

677 
__BEGIN_NAMESPACE_STD


682 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

688 
	`puts
 (
__c⁄°
 *
__s
);

695 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

702 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

703 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

708 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

709 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

710 
__END_NAMESPACE_STD


712 #ifde‡
__USE_GNU


719 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

720 
FILE
 *
__ª°ri˘
 
__°ªam
);

723 #ifde‡
__USE_MISC


730 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

731 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

732 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

733 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

737 
__BEGIN_NAMESPACE_STD


742 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

747 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

752 
	`ªwöd
 (
FILE
 *
__°ªam
);

753 
__END_NAMESPACE_STD


760 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


761 #i‚de‡
__USE_FILE_OFFSET64


766 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

771 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

773 #ifde‡
__REDIRECT


774 
	`__REDIRECT
 (
f£eko
,

775 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

776 
f£eko64
);

777 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

779 
	#f£eko
 
f£eko64


	)

780 
	#·ñlo
 
·ñlo64


	)

785 
__BEGIN_NAMESPACE_STD


786 #i‚de‡
__USE_FILE_OFFSET64


791 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

796 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

798 #ifde‡
__REDIRECT


799 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

800 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

801 
	`__REDIRECT
 (
f£ços
,

802 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

804 
	#fgëpos
 
fgëpos64


	)

805 
	#f£ços
 
f£ços64


	)

808 
__END_NAMESPACE_STD


810 #ifde‡
__USE_LARGEFILE64


811 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

812 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

813 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

814 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

817 
__BEGIN_NAMESPACE_STD


819 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

821 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

823 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

824 
__END_NAMESPACE_STD


826 #ifde‡
__USE_MISC


828 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

829 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

834 
__BEGIN_NAMESPACE_STD


839 
	`≥º‹
 (
__c⁄°
 *
__s
);

840 
__END_NAMESPACE_STD


846 
	~<bôs/sys_îæi°.h
>

849 #ifdef 
__USE_POSIX


851 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

854 #ifde‡
__USE_MISC


856 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

860 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

861 
deföed
 
__USE_MISC
)

866 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

872 
	`p˛o£
 (
FILE
 *
__°ªam
);

876 #ifdef 
__USE_POSIX


878 *
	$˘îmid
 (*
__s
Ë
__THROW
;

882 #ifde‡
__USE_XOPEN


884 *
	`cu£rid
 (*
__s
);

888 #ifdef 
__USE_GNU


889 
ob°ack
;

892 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

893 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

894 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

895 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

896 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

897 
_G_va_li°
 
__¨gs
)

898 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

902 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


906 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

910 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

913 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

916 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


920 
	#__√ed_gë›t


	)

921 
	~<gë›t.h
>

926 #ifde‡
__USE_EXTERN_INLINES


927 
	~<bôs/°dio.h
>

929 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


930 
	~<bôs/°dio2.h
>

932 #ifde‡
__LDBL_COMPAT


933 
	~<bôs/°dio-ldbl.h
>

936 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/sys/time.h

20 #i‚de‡
_SYS_TIME_H


21 
	#_SYS_TIME_H
 1

	)

23 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

26 
	#__√ed_time_t


	)

27 
	~<time.h
>

28 
	#__√ed_timevÆ


	)

29 
	~<bôs/time.h
>

31 
	~<sys/£À˘.h
>

33 #i‚de‡
__su£c⁄ds_t_deföed


34 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

35 
	#__su£c⁄ds_t_deföed


	)

39 
	g__BEGIN_DECLS


41 #ifde‡
__USE_GNU


43 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

44 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

45 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

46 }

	)

47 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

48 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

49 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

50 }

	)

54 #ifde‡
__USE_BSD


57 
	stimez⁄e


59 
	mtz_möuãswe°
;

60 
	mtz_d°time
;

63 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

65 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

73 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

74 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

76 #ifde‡
__USE_BSD


79 
	$£âimeofday
 (
__c⁄°
 
timevÆ
 *
__tv
,

80 
__c⁄°
 
timez⁄e
 *
__tz
)

81 
__THROW
 
	`__n⁄nuŒ
 ((1));

87 
	$adjtime
 (
__c⁄°
 
timevÆ
 *
__dñè
,

88 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

93 
	e__ôimî_which


96 
ITIMER_REAL
 = 0,

97 
	#ITIMER_REAL
 
ITIMER_REAL


	)

99 
ITIMER_VIRTUAL
 = 1,

100 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

103 
ITIMER_PROF
 = 2

104 
	#ITIMER_PROF
 
ITIMER_PROF


	)

109 
	sôimîvÆ


112 
timevÆ
 
ô_öãrvÆ
;

114 
timevÆ
 
ô_vÆue
;

117 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


120 
__ôimî_which
 
	t__ôimî_which_t
;

122 
	t__ôimî_which_t
;

127 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

128 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

133 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

134 
__c⁄°
 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

135 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

140 
	$utimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

141 
__THROW
 
	`__n⁄nuŒ
 ((1));

143 #ifde‡
__USE_BSD


145 
	$lutimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

146 
__THROW
 
	`__n⁄nuŒ
 ((1));

149 
	$futimes
 (
__fd
, 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

152 #ifde‡
__USE_GNU


156 
	$futimeßt
 (
__fd
, 
__c⁄°
 *
__fûe
,

157 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

161 #ifde‡
__USE_BSD


164 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

165 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

166 
	#timîcmp
(
a
, 
b
, 
CMP
) \

167 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

168 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

169 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

170 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

172 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

173 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

174 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

176 ++(
ªsu…
)->
tv_£c
; \

177 (
ªsu…
)->
tv_u£c
 -= 1000000; \

179 
	}
} 0)

	)

180 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

182 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

183 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

184 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

185 --(
ªsu…
)->
tv_£c
; \

186 (
ªsu…
)->
tv_u£c
 += 1000000; \

188 } 0)

	)

191 
	g__END_DECLS


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/bits/stdio-ldbl.h

20 #i‚de‡
_STDIO_H


24 
__BEGIN_NAMESPACE_STD


25 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

26 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

27 
	$__LDBL_REDIR_DECL
 (
•rötf
)

28 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

29 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

30 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
__REDIRECT
 \

33 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

40 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

42 
__END_NAMESPACE_STD


44 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


45 
__BEGIN_NAMESPACE_C99


46 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

47 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

48 
__END_NAMESPACE_C99


51 #ifdef 
__USE_ISOC99


52 
__BEGIN_NAMESPACE_C99


53 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

54 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

55 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

57 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

61 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

63 
__END_NAMESPACE_C99


66 #ifde‡
__USE_GNU


67 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

68 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

69 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

70 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

71 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

73 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

76 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


77 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

78 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

79 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


80 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

81 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

84 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

85 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

86 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

88 #ifde‡
__USE_GNU


89 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

90 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

93 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

94 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

20 #i‚de‡
_STDIO_H


24 #i‚de‡
__exã∫_ölöe


25 
	#__STDIO_INLINE
 
ölöe


	)

27 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

31 #ifde‡
__USE_EXTERN_INLINES


34 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
)

36 
__STDIO_INLINE
 

37 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

39  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

40 
	}
}

44 
__STDIO_INLINE
 

45 
	$gëch¨
 ()

47  
	`_IO_gëc
 (
°dö
);

48 
	}
}

51 #ifde‡
__USE_MISC


53 
__STDIO_INLINE
 

54 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

56  
	`_IO_gëc_u∆ocked
 (
__Â
);

57 
	}
}

61 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


63 
__STDIO_INLINE
 

64 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

66  
	`_IO_gëc_u∆ocked
 (
__Â
);

67 
	}
}

70 
__STDIO_INLINE
 

71 
	$gëch¨_u∆ocked
 ()

73  
	`_IO_gëc_u∆ocked
 (
°dö
);

74 
	}
}

79 
__STDIO_INLINE
 

80 
	$putch¨
 (
__c
)

82  
	`_IO_putc
 (
__c
, 
°dout
);

83 
	}
}

86 #ifde‡
__USE_MISC


88 
__STDIO_INLINE
 

89 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

91  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

92 
	}
}

96 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


98 
__STDIO_INLINE
 

99 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

101  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

102 
	}
}

105 
__STDIO_INLINE
 

106 
	$putch¨_u∆ocked
 (
__c
)

108  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

109 
	}
}

113 #ifdef 
__USE_GNU


115 
__STDIO_INLINE
 
_IO_ssize_t


116 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

118  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

119 
	}
}

123 #ifde‡
__USE_MISC


125 
__STDIO_INLINE
 

126 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

128  
	`_IO_„of_u∆ocked
 (
__°ªam
);

129 
	}
}

132 
__STDIO_INLINE
 

133 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

135  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

136 
	}
}

142 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

143 && !
deföed
 
	g__˝lu•lus


145 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

146 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

147 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

148 && (
size_t
Ë(
size
) != 0) \

149 ? ({ *
__±r
 = (*Ë(
±r
); \

150 
FILE
 *
__°ªam
 = (
°ªam
); \

151 
size_t
 
__˙t
; \

152 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

153 
__˙t
 > 0; --__cnt) \

155 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

156 i‡(
__c
 =
EOF
) \

158 *
__±r
++ = 
__c
; \

160 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

161 / (
size_t
Ë(
size
); }) \

162 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

163 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

165 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

166 (Ë(
n
), (
size_t
) 0) \

167 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

169 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

170 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

171 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

172 && (
size_t
Ë(
size
) != 0) \

173 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

174 
FILE
 *
__°ªam
 = (
°ªam
); \

175 
size_t
 
__˙t
; \

176 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

177 
__˙t
 > 0; --__cnt) \

178 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

180 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

181 / (
size_t
Ë(
size
); }) \

182 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

183 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

185 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

186 (Ë(
n
), (
size_t
) 0) \

187 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

191 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #i‚de‡
_STDIO_H


24 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

25 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

26 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

28 
_G_va_li°
 
__≠
Ë
__THROW
;

30 #ifde‡
__va_¨g_∑ck


31 
__exã∫_Æways_ölöe
 

32 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

34  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

35 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

36 
	}
}

37 #ñi‡!
deföed
 
__˝lu•lus


38 
	#•rötf
(
°r
, ...) \

39 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

40 
__VA_ARGS__
)

	)

43 
__exã∫_Æways_ölöe
 

44 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

45 
_G_va_li°
 
__≠
))

47  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

48 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

49 
	}
}

51 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


53 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

54 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

55 ...Ë
__THROW
;

56 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

57 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

58 
_G_va_li°
 
__≠
Ë
__THROW
;

60 #ifde‡
__va_¨g_∑ck


61 
__exã∫_Æways_ölöe
 

62 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

63 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

65  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

66 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

67 
	}
}

68 #ñi‡!
deföed
 
__˝lu•lus


69 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

70 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

71 
__VA_ARGS__
)

	)

74 
__exã∫_Æways_ölöe
 

75 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

76 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

78  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

79 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

80 
	}
}

84 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

87 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

88 
__¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

89 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

90 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

91 
__v¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

92 
_G_va_li°
 
__≠
);

94 #ifde‡
__va_¨g_∑ck


95 
__exã∫_Æways_ölöe
 

96 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...)

98  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

99 
	`__va_¨g_∑ck
 ());

100 
	}
}

102 
__exã∫_Æways_ölöe
 

103 
	$¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

105  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

106 
	}
}

107 #ñi‡!
deföed
 
__˝lu•lus


108 
	#¥ötf
(...) \

109 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

110 
	#Ârötf
(
°ªam
, ...) \

111 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

114 
__exã∫_Æways_ölöe
 

115 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

117 #ifde‡
__USE_EXTERN_INLINES


118  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

120  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

122 
	}
}

124 
__exã∫_Æways_ölöe
 

125 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

126 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

128  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

129 
	}
}

131 #ifde‡
__USE_GNU


133 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

134 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

135 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

136 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

137 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

138 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

139 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

140 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

141 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

142 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

143 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

144 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

145 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

147 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

148 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

149 
__Êag
,

150 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

151 
_G_va_li°
 
__¨gs
)

152 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

154 #ifde‡
__va_¨g_∑ck


155 
__exã∫_Æways_ölöe
 

156 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

158  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

159 
	`__va_¨g_∑ck
 ());

160 
	}
}

162 
__exã∫_Æways_ölöe
 

163 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

166  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

167 
	`__va_¨g_∑ck
 ());

168 
	}
}

170 
__exã∫_Æways_ölöe
 

171 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

173  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

174 
	`__va_¨g_∑ck
 ());

175 
	}
}

177 
__exã∫_Æways_ölöe
 

178 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

179 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

181  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

182 
	`__va_¨g_∑ck
 ());

183 
	}
}

184 #ñi‡!
deföed
 
__˝lu•lus


185 
	#a•rötf
(
±r
, ...) \

186 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

187 
	#__a•rötf
(
±r
, ...) \

188 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

189 
	#d¥ötf
(
fd
, ...) \

190 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

191 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

192 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

195 
__exã∫_Æways_ölöe
 

196 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

197 
_G_va_li°
 
__≠
))

199  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

200 
	}
}

202 
__exã∫_Æways_ölöe
 

203 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

205  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

206 
	}
}

208 
__exã∫_Æways_ölöe
 

209 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

210 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

212  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

213 
__≠
);

214 
	}
}

220 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

221 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

222 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

225 
__exã∫_Æways_ölöe
 
__wur
 *

226 
	$gës
 (*
__°r
)

228 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

229  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

230  
	`__gës_w¨n
 (
__°r
);

231 
	}
}

233 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

234 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

235 *
	`__REDIRECT
 (
__fgës_Æüs
,

236 (*
__ª°ri˘
 
__s
, 
__n
,

237 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

238 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

239 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

241 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

244 
__exã∫_Æways_ölöe
 
__wur
 *

245 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

247 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

249 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

250  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

252 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

253  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

255  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

256 
	}
}

258 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

259 
size_t
 
__size
, size_à
__n
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

261 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

262 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

263 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

264 
‰ód
Ë
__wur
;

265 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

266 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
),

269 
__‰ód_chk
)

270 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

273 
__exã∫_Æways_ölöe
 
__wur
 
size_t


274 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
)

277 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

279 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

280 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

281 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

282  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

284 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

285  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

287  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

288 
	}
}

290 #ifde‡
__USE_GNU


291 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

292 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

293 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

294 (*
__ª°ri˘
 
__s
, 
__n
,

295 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

296 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

297 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

299 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

302 
__exã∫_Æways_ölöe
 
__wur
 *

303 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

305 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

307 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

308  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

310 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

311  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

313  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

314 
	}
}

317 #ifde‡
__USE_MISC


318 #unde‡
‰ód_u∆ocked


319 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

320 
size_t
 
__size
, size_à
__n
,

321 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

322 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

323 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

324 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

325 
‰ód_u∆ocked
Ë
__wur
;

326 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

327 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
),

330 
__‰ód_u∆ocked_chk
)

331 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

334 
__exã∫_Æways_ölöe
 
__wur
 
size_t


335 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

336 
FILE
 *
__ª°ri˘
 
__°ªam
)

338 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

340 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

341 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

342 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

343  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

344 
__°ªam
);

346 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

347  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

348 
__°ªam
);

351 #ifde‡
__USE_EXTERN_INLINES


352 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

353 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

354 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

355 && 
__size
 * 
__n
 <= 8)

357 
size_t
 
__˙t
 = 
__size
 * 
__n
;

358 *
__˝å
 = (*Ë
__±r
;

359 i‡(
__˙t
 == 0)

362 ; 
__˙t
 > 0; --__cnt)

364 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

365 i‡(
__c
 =
EOF
)

367 *
__˝å
++ = 
__c
;

369  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

372  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

373 
	}
}

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


31 
	#L_cu£rid
 9

	)

36 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


37 #unde‡
FOPEN_MAX


38 
	#FOPEN_MAX
 16

	)

41 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


42 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-ldbl.h

20 #i‚de‡
_STDLIB_H


24 #ifdef 
__USE_ISOC99


25 
__BEGIN_NAMESPACE_C99


26 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
__END_NAMESPACE_C99


30 #ifde‡
__USE_GNU


31 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

34 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

20 #i‚de‡
_STDLIB_H


24 *
	$__ªÆ∑th_chk
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

25 *
__ª°ri˘
 
__ªsﬁved
,

26 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

27 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

28 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

29 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

30 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

31 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

32 *
__ª°ri˘
 
__ªsﬁved
,

33 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


34 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

37 
__exã∫_Æways_ölöe
 
__wur
 *

38 
	`__NTH
 (
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

40 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

42 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


43 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

44  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

46  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

49  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

50 
	}
}

53 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

54 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

55 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

56 
size_t
 
__buÊí
), 
±¢ame_r
)

57 
	`__n⁄nuŒ
 ((2));

58 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

60 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

61 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

64 
__exã∫_Æways_ölöe
 

65 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

67 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

70  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

71 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

72  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

74  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

75 
	}
}

78 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

79 
__THROW
 
__wur
;

80 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

81 
w˘omb
Ë
__wur
;

83 
__exã∫_Æways_ölöe
 
__wur
 

84 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

89 
	#__STDLIB_MB_LEN_MAX
 16

	)

90 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


93 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

94  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

95  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

96 
	}
}

99 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

100 
__c⁄°
 *
__ª°ri˘
 
__§c
,

101 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

102 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

103 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

104 
__c⁄°
 *
__ª°ri˘
 
__§c
,

105 
size_t
 
__Àn
), 
mb°owcs
);

106 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

107 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

108 
__c⁄°
 *
__ª°ri˘
 
__§c
,

109 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

110 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

113 
__exã∫_Æways_ölöe
 
size_t


114 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

115 
size_t
 
__Àn
))

117 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

119 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

120  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

121 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

123 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

124  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

125 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

127  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

128 
	}
}

131 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

132 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

133 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

134 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

135 (*
__ª°ri˘
 
__d°
,

136 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

137 
size_t
 
__Àn
), 
wc°ombs
);

138 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

139 (*
__ª°ri˘
 
__d°
,

140 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

141 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

142 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

144 
__exã∫_Æways_ölöe
 
size_t


145 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__§c
,

146 
size_t
 
__Àn
))

148 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

150 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

151  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

152 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

153  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

155  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

156 
	}
}

	@/usr/include/bits/string.h

20 #i‚de‡
_STRING_H


26 
	#_STRING_ARCH_u«lig√d
 1

	)

	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE
 
ölöe


	)

46 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


98 #i‡!
__GNUC_PREREQ
 (3, 0)

99 #i‡
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
, 
c
, 
n
) \

101 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem£t_1
 (
s
, 
c
) \

104 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

107 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

110 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

112 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

122 (Ë(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

135 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (Ë
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (Ë
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

194 #i‡
__GNUC_PREREQ
 (2, 91)

195 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

203 #ifde‡
__USE_GNU


204 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


205 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


206 #i‡
__GNUC_PREREQ
 (3, 4)

207 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

208 #ñi‡
__GNUC_PREREQ
 (3, 0)

209 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

210 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

211 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

212 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

213 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

215 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

216 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

217 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

218 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

219 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

223 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

226 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


227 #i‡
_STRING_ARCH_u«lig√d


228 #i‚de‡
_FORCE_INLINES


229 
	#__memp˝y_¨gs
(
§c
) \

230 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

231 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

238 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

239 
__uöt32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__memp˝y_smÆl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

244 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

245 
size_t
 
__§˛í
)

248 
__uöt32_t
 
__ui
;

249 
__uöt16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de°1
;

253 (Ë
__§˛í
)

256 
__u
->
__c
 = 
__§c0_1
;

257 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__§c0_2
;

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__§c0_2
;

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__§c2_1
;

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__§c0_4
;

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__§c0_4
;

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__§c4_1
;

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__§c0_4
;

281 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__§c4_2
;

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__§c0_4
;

287 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__§c4_2
;

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__§c6_1
;

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__§c0_4
;

295 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__§c4_4
;

297 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

300  (*Ë
__u
;

301 
	}
}

303 #i‚de‡
_FORCE_INLINES


304 
	#__memp˝y_¨gs
(
§c
) \

305 ((
__c⁄°
 *Ë(
§c
))[0], \

306 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

308 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

310 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

311 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

313 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

314 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

316 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

317 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

318 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

320 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

321 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

322 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

327 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

329 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

330 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

331 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

333 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

342 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

343 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

344 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

345 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__sˇ2
;

350 
__STRING2_COPY_ARR3
 
__sˇ3
;

351 
__STRING2_COPY_ARR4
 
__sˇ4
;

352 
__STRING2_COPY_ARR5
 
__sˇ5
;

353 
__STRING2_COPY_ARR6
 
__sˇ6
;

354 
__STRING2_COPY_ARR7
 
__sˇ7
;

355 
__STRING2_COPY_ARR8
 
__sˇ8
;

356 } *
__u
 = 
__de°
;

357 (Ë
__§˛í
)

360 
__u
->
__c
 = 
__§c1
;

363 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

366 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

369 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

372 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

375 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

378 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

381 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

384  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

385 
	}
}

393 #i‚de‡
_HAVE_STRING_ARCH_°rchr


394 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

395 #i‡
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
, 
c
) \

397 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

400 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

402 
	#°rchr
(
s
, 
c
) \

403 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

404 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

405 : 
	`°rchr
 (
s
, 
c
)))

	)

411 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
deföed
 
	g_FORCE_INLINES


413 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°r˝y
(
de°
, 
§c
) \

415 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

416 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

417 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

418 
	`°æí
 (
§c
) + 1) \

419 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

420 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

423 #i‡
_STRING_ARCH_u«lig√d


424 #i‚de‡
_FORCE_INLINES


425 
	#__°r˝y_¨gs
(
§c
) \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

432 
__uöt32_t
, __uöt32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__°r˝y_smÆl
 (*
__de°
,

435 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

436 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

437 
size_t
 
__§˛í
)

440 
__uöt32_t
 
__ui
;

441 
__uöt16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*Ë
__de°
;

444 (Ë
__§˛í
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
->
__usi
 = 
__§c0_2
;

454 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
->
__ui
 = 
__§c0_4
;

462 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__§c0_4
;

467 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__§c4_2
;

471 
__u
->
__ui
 = 
__§c0_4
;

472 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__§c4_2
;

474 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__§c0_4
;

479 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__§c4_4
;

483  
__de°
;

484 
	}
}

486 #i‚de‡
_FORCE_INLINES


487 
	#__°r˝y_¨gs
(
§c
) \

488 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

490 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

495 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

496 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

500 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

502 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

503 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

504 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

506 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

507 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

509 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

511 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

512 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

513 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__°r˝y_smÆl
 (*
__de°
,

524 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

525 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

526 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

527 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__sˇ2
;

532 
__STRING2_COPY_ARR3
 
__sˇ3
;

533 
__STRING2_COPY_ARR4
 
__sˇ4
;

534 
__STRING2_COPY_ARR5
 
__sˇ5
;

535 
__STRING2_COPY_ARR6
 
__sˇ6
;

536 
__STRING2_COPY_ARR7
 
__sˇ7
;

537 
__STRING2_COPY_ARR8
 
__sˇ8
;

538 } *
__u
 = (*Ë
__de°
;

539 (Ë
__§˛í
)

542 
__u
->
__c
 = '\0';

545 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

548 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

551 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

554 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

557 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

560 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

563 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

566  
__de°
;

567 
	}
}

573 #ifde‡
__USE_GNU


574 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


575 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


576 #i‡
__GNUC_PREREQ
 (3, 4)

577 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

578 #ñi‡
__GNUC_PREREQ
 (3, 0)

579 
	#__°p˝y
(
de°
, 
§c
) \

580 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

581 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

582 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

583 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

585 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

587 
	#__°p˝y
(
de°
, 
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

590 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

591 
	`°æí
 (
§c
) + 1) \

592 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

594 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

598 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

601 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


602 #i‡
_STRING_ARCH_u«lig√d


603 #i‚de‡
_FORCE_INLINES


604 
	#__°p˝y_¨gs
(
§c
) \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

611 
__uöt32_t
, __uöt32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__°p˝y_smÆl
 (*
__de°
,

614 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

615 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

616 
size_t
 
__§˛í
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*Ë
__de°
;

624 (Ë
__§˛í
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__§c0_2
;

631 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__§c0_2
;

635 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__§c0_4
;

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__§c0_4
;

649 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__§c4_2
;

651 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__§c0_4
;

655 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__§c4_2
;

657 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__§c0_4
;

662 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__§c4_4
;

664 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #i‚de‡
_FORCE_INLINES


671 
	#__°p˝y_¨gs
(
§c
) \

672 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

674 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

677 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

679 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

680 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

682 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

684 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

686 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

687 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

688 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

690 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

691 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

693 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

695 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

696 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

697 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__°p˝y_smÆl
 (*
__de°
,

708 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

709 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

710 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

711 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__sˇ2
;

716 
__STRING2_COPY_ARR3
 
__sˇ3
;

717 
__STRING2_COPY_ARR4
 
__sˇ4
;

718 
__STRING2_COPY_ARR5
 
__sˇ5
;

719 
__STRING2_COPY_ARR6
 
__sˇ6
;

720 
__STRING2_COPY_ARR7
 
__sˇ7
;

721 
__STRING2_COPY_ARR8
 
__sˇ8
;

722 } *
__u
 = (*Ë
__de°
;

723 (Ë
__§˛í
)

726 
__u
->
__c
 = '\0';

729 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

732 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

735 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

738 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

741 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

744 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

747 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

750  
__de°
 + 
__§˛í
 - 1;

751 
	}
}

759 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


760 #i‡
__GNUC_PREREQ
 (3, 2)

761 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

763 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

764 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

765 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

766 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

768 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

774 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


775 #ifde‡
_USE_STRING_ARCH_°rchr


776 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

777 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

778 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

779 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

780 ? 
	`°rˇt
 (
__de°
, 
§c
) \

781 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

782 
§c
, 
n
)Ë'\0', 
__de°
)) \

783 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

784 #ñi‡
__GNUC_PREREQ
 (3, 2)

785 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

787 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

788 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

789 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

790 ? 
	`°rˇt
 (
de°
, 
§c
) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

792 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

798 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


799 #i‡
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
, 
s2
) \

801 
__exãnsi⁄__
 \

802 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

803 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

804 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), 
__s2_Àn
 = __buûtö_°æí (
s2
), \

805 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

806 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

807 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

808 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

809 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), __s1_len < 4) \

810 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

811 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

812 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

813 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

814 && (
__s2_Àn
 = 
	`__buûtö_°æí
 (
s2
), __s2_len < 4) \

815 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

816 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

817 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

818 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#°rcmp
(
s1
, 
s2
) \

821 
__exãnsi⁄__
 \

822 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

823 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

824 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

825 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

826 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

827 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

828 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

830 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

831 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

832 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

833 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

834 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

835 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

836 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

837 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

838 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

839 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

844 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

845 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

846 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

848 
__ªsu…
 = (((
__c⁄°
 *) \

849 (
__c⁄°
 *Ë(
s1
))[1] \

850 - ((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s2
))[1]); \

852 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

854 
__ªsu…
 = \

855 (((
__c⁄°
 *) \

856 (
__c⁄°
 *Ë(
s1
))[2] \

857 - ((
__c⁄°
 *) \

858 (
__c⁄°
 *Ë(
s2
))[2]); \

859 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

860 
__ªsu…
 = \

861 (((
__c⁄°
 *) \

862 (
__c⁄°
 *Ë(
s1
))[3] \

863 - ((
__c⁄°
 *) \

864 (
__c⁄°
 *Ë(
s2
))[3]); \

867 
__ªsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = \

871 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

872 
__ªsu…
 = \

873 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

874 - 
__s2
[0]); \

875 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

877 
__ªsu…
 = (((
__c⁄°
 *) \

878 (
__c⁄°
 *Ë(
s1
))[1] - 
__s2
[1]); \

879 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

881 
__ªsu…
 = (((
__c⁄°
 *) \

882 (
__c⁄°
 *Ë(
s1
))[2] - 
__s2
[2]);\

883 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

884 
__ªsu…
 = (((
__c⁄°
 *) \

885 (
__c⁄°
 *Ë(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__ªsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = \

893 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

894 
__ªsu…
 = \

895 
__s1
[0] - ((
__c⁄°
 *) \

896 (
__c⁄°
 *Ë(
s2
))[0]; \

897 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

899 
__ªsu…
 = (
__s1
[1] \

900 - ((
__c⁄°
 *) \

901 (
__c⁄°
 *Ë(
s2
))[1]); \

902 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

904 
__ªsu…
 = \

905 (
__s1
[2] - ((
__c⁄°
 *) \

906 (
__c⁄°
 *Ë(
s2
))[2]); \

907 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

908 
__ªsu…
 = \

909 (
__s1
[3] \

910 - ((
__c⁄°
 *) \

911 (
__c⁄°
 *Ë(
s2
))[3]); \

914 
__ªsu…
; }))

	)

919 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


920 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

921 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

922 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

923 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

924 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

925 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

926 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

932 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


933 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


934 #i‡
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
, 
ªje˘
) \

936 
__exãnsi⁄__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

939 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

940 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

941 : ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

942 ? 
	`°æí
 (
s
) \

943 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

944 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

946 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

948 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

950 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

952 
	#°rc•n
(
s
, 
ªje˘
) \

953 
__exãnsi⁄__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

957 ? 
	`°æí
 (
s
) \

958 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

959 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

961 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

963 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

965 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

970 
__STRING_INLINE
 
size_t


971 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

975 ++
__ªsu…
;

976  
__ªsu…
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

980 
__ªje˘2
);

981 
__STRING_INLINE
 
size_t


982 
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

984 
size_t
 
__ªsu…
 = 0;

985 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


986 && 
__s
[
__ªsu…
] !
__ªje˘2
)

987 ++
__ªsu…
;

988  
__ªsu…
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

992 
__ªje˘2
, 
__ªje˘3
);

993 
__STRING_INLINE
 
size_t


994 
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

995 
__ªje˘3
)

997 
size_t
 
__ªsu…
 = 0;

998 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


999 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

1000 ++
__ªsu…
;

1001  
__ªsu…
;

1002 
	}
}

1008 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1009 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1010 #i‡
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
, 
ac˚±
) \

1012 
__exãnsi⁄__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1015 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1016 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1017 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1018 ? ((Ë(
s
), 0) \

1019 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1020 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1022 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1024 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1026 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1028 
	#°r•n
(
s
, 
ac˚±
) \

1029 
__exãnsi⁄__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1033 ? ((Ë(
s
), 0) \

1034 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1035 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1037 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1039 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1041 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±
)

1052 ++
__ªsu…
;

1053  
__ªsu…
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1057 
__ac˚±2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1061 
size_t
 
__ªsu…
 = 0;

1063 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1064 ++
__ªsu…
;

1065  
__ªsu…
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1069 
__ac˚±2
, 
__ac˚±3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1073 
size_t
 
__ªsu…
 = 0;

1075 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1076 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1077 ++
__ªsu…
;

1078  
__ªsu…
;

1079 
	}
}

1084 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1085 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1086 #i‡
__GNUC_PREREQ
 (3, 2)

1087 
	#°Ωbrk
(
s
, 
ac˚±
) \

1088 
__exãnsi⁄__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1091 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1092 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1093 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1094 ? ((Ë(
s
), (*Ë
NULL
) \

1095 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1096 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1098 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1100 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1102 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1104 
	#°Ωbrk
(
s
, 
ac˚±
) \

1105 
__exãnsi⁄__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1109 ? ((Ë(
s
), (*Ë
NULL
) \

1110 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1111 ? 
	`°rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1113 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1115 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1117 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1121 
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1122 
__ac˚±2
);

1123 
__STRING_INLINE
 *

1124 
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1127 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1128 ++
__s
;

1129  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1133 
__ac˚±2
, 
__ac˚±3
);

1134 
__STRING_INLINE
 *

1135 
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1136 
__ac˚±3
)

1139 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1140 && *
__s
 !
__ac˚±3
)

1141 ++
__s
;

1142  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1143 
	}
}

1149 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1151 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1152 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1153 ? (*Ë(
size_t
Ë(
hay°ack
) \

1154 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1155 ? 
	`°rchr
 (
hay°ack
, \

1156 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1157 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1158 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1162 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1163 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1164 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1165 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1166 && ((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1167 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1168 ? 
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0], 
√xç
) \

1169 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1172 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1173 
__STRING_INLINE
 *

1174 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1176 *
__ªsu…
;

1177 i‡(
__s
 =
NULL
)

1178 
__s
 = *
__√xç
;

1179 *
__s
 =
__£p
)

1180 ++
__s
;

1181 
__ªsu…
 = 
NULL
;

1182 i‡(*
__s
 != '\0')

1184 
__ªsu…
 = 
__s
++;

1185 *
__s
 != '\0')

1186 i‡(*
__s
++ =
__£p
)

1188 
__s
[-1] = '\0';

1192 *
__√xç
 = 
__s
;

1193  
__ªsu…
;

1194 
	}
}

1195 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1196 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1201 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1202 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1204 *
__°r£p_g
 (**
__°rögp
, 
__c⁄°
 *
__dñim
);

1205 
	#__°r£p
(
s
, 
ªje˘
) \

1206 
__exãnsi⁄__
 \

1207 ({ 
__r0
, 
__r1
, 
__r2
; \

1208 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1209 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1210 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1211 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1212 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1213 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1214 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1215 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1216 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1217 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1218 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1219 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1222 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1223 
__STRING_INLINE
 *

1224 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1226 *
__ªtvÆ
 = *
__s
;

1227 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1228 *(*
__s
)++ = '\0';

1229  
__ªtvÆ
;

1230 
	}
}

1232 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1233 
__STRING_INLINE
 *

1234 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1236 *
__ªtvÆ
 = *
__s
;

1237 i‡(
__ªtvÆ
 !
NULL
)

1239 *
__˝
 = 
__ªtvÆ
;

1242 i‡(*
__˝
 == '\0')

1244 
__˝
 = 
NULL
;

1247 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1249 *
__˝
++ = '\0';

1252 ++
__˝
;

1254 *
__s
 = 
__˝
;

1256  
__ªtvÆ
;

1257 
	}
}

1259 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1260 
__ªje˘3
);

1261 
__STRING_INLINE
 *

1262 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1264 *
__ªtvÆ
 = *
__s
;

1265 i‡(
__ªtvÆ
 !
NULL
)

1267 *
__˝
 = 
__ªtvÆ
;

1270 i‡(*
__˝
 == '\0')

1272 
__˝
 = 
NULL
;

1275 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1277 *
__˝
++ = '\0';

1280 ++
__˝
;

1282 *
__s
 = 
__˝
;

1284  
__ªtvÆ
;

1285 
	}
}

1286 #ifde‡
__USE_BSD


1287 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1294 #ifde‡
__USE_MISC


1296 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1297 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1298 
	~<°dlib.h
>

1301 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1303 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1304 
	#__°rdup
(
s
) \

1305 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1306 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1307 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1308 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1309 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1310 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1312 
__ªtvÆ
; 
	}
})) \

1313 : 
	`__°rdup
 (
s
)))

	)

1315 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1316 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1320 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1322 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

1323 
__THROW
 
__©åibuã_mÆloc__
;

1324 
	#__°∫dup
(
s
, 
n
) \

1325 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1326 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1327 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1328 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1329 
size_t
 
__n
 = (
n
); \

1330 *
__ªtvÆ
; \

1331 i‡(
__n
 < 
__Àn
) \

1332 
__Àn
 = 
__n
 + 1; \

1333 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1334 i‡(
__ªtvÆ
 !
NULL
) \

1336 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1337 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1338 
__Àn
 - 1); \

1340 
__ªtvÆ
; 
	}
})) \

1341 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1343 #ifde‡
__USE_GNU


1344 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1350 #i‚de‡
_FORCE_INLINES


1351 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i‚de‡
_STRING_H


23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

26 #i‚de‡
__˝lu•lus


30 #unde‡
mem˝y


31 #unde‡
memmove


32 #unde‡
mem£t


33 #unde‡
°rˇt


34 #unde‡
°r˝y


35 #unde‡
°∫ˇt


36 #unde‡
°∫˝y


37 #ifde‡
__USE_GNU


38 #unde‡
memp˝y


39 #unde‡
°p˝y


41 #ifde‡
__USE_BSD


42 #unde‡
bc›y


43 #unde‡
bzîo


48 
__exã∫_Æways_ölöe
 *

49 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

50 
size_t
 
__Àn
))

52  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

53 
	}
}

55 
__exã∫_Æways_ölöe
 *

56 
__NTH
 (
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__Àn
))

58  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

59 
	}
}

61 #ifde‡
__USE_GNU


62 
__exã∫_Æways_ölöe
 *

63 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

64 
size_t
 
__Àn
))

66  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

67 
	}
}

76 
__exã∫_Æways_ölöe
 *

77 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

80 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

82 
	`__w¨n_mem£t_zîo_Àn
 ();

83  
__de°
;

85  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

86 
	}
}

88 #ifde‡
__USE_BSD


89 
__exã∫_Æways_ölöe
 

90 
__NTH
 (
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__Àn
))

92 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

93 
	}
}

95 
__exã∫_Æways_ölöe
 

96 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

98 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

99 
	}
}

102 
__exã∫_Æways_ölöe
 *

103 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

105  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

106 
	}
}

108 #ifde‡
__USE_GNU


109 
__exã∫_Æways_ölöe
 *

110 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

112  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

113 
	}
}

117 
__exã∫_Æways_ölöe
 *

118 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

119 
size_t
 
__Àn
))

121  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

122 
	}
}

125 *
	$__°≤˝y_chk
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

126 
size_t
 
__de°Àn
Ë
__THROW
;

127 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
,

128 
__c⁄°
 *
__§c
,

129 
size_t
 
__n
), 
°≤˝y
);

131 
__exã∫_Æways_ölöe
 *

132 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
))

134 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

135 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

136  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

137  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

138 
	}
}

141 
__exã∫_Æways_ölöe
 *

142 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

144  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

145 
	}
}

148 
__exã∫_Æways_ölöe
 *

149 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

150 
size_t
 
__Àn
))

152  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

153 
	}
}

	@/usr/include/bits/sys_errlist.h

20 #i‚de‡
_STDIO_H


26 #ifde‡ 
__USE_BSD


27 
sys_√º
;

28 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

30 #ifde‡ 
__USE_GNU


31 
_sys_√º
;

32 
__c⁄°
 *__c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

54 
	#CLOCK_MONOTONIC_RAW
 4

	)

56 
	#CLOCK_REALTIME_COARSE
 5

	)

58 
	#CLOCK_MONOTONIC_COARSE
 6

	)

61 
	#TIMER_ABSTIME
 1

	)

67 #ifde‡
__√ed_timevÆ


68 #unde‡
__√ed_timevÆ


69 #i‚de‡
_STRUCT_TIMEVAL


70 
	#_STRUCT_TIMEVAL
 1

	)

71 
	~<bôs/ty≥s.h
>

75 
	stimevÆ


77 
__time_t
 
	mtv_£c
;

78 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

24 #ifde‡
__WCHAR_MAX__


25 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

27 
	#__WCHAR_MAX
 (2147483647)

	)

32 #ifde‡
__WCHAR_UNSIGNED__


33 
	#__WCHAR_MIN
 
L
'\0'

	)

37 #ñi‡
L
'\0' - 1 > 0

38 
	#__WCHAR_MIN
 
L
'\0'

	)

40 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC99


98 #unde‡
__USE_ISOC95


99 #unde‡
__USE_POSIX


100 #unde‡
__USE_POSIX2


101 #unde‡
__USE_POSIX199309


102 #unde‡
__USE_POSIX199506


103 #unde‡
__USE_XOPEN


104 #unde‡
__USE_XOPEN_EXTENDED


105 #unde‡
__USE_UNIX98


106 #unde‡
__USE_XOPEN2K


107 #unde‡
__USE_XOPEN2KXSI


108 #unde‡
__USE_XOPEN2K8


109 #unde‡
__USE_XOPEN2K8XSI


110 #unde‡
__USE_LARGEFILE


111 #unde‡
__USE_LARGEFILE64


112 #unde‡
__USE_FILE_OFFSET64


113 #unde‡
__USE_BSD


114 #unde‡
__USE_SVID


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__FAVOR_BSD


121 #unde‡
__KERNEL_STRICT_NAMES


125 #i‚de‡
_LOOSE_KERNEL_NAMES


126 
	#__KERNEL_STRICT_NAMES


	)

130 
	#__USE_ANSI
 1

	)

139 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


140 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

141 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

143 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

148 #i‡
deföed
 
_BSD_SOURCE
 && \

149 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

150 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

151 
	#__FAVOR_BSD
 1

	)

155 #ifde‡
_GNU_SOURCE


156 #unde‡
_ISOC95_SOURCE


157 
	#_ISOC95_SOURCE
 1

	)

158 #unde‡
_ISOC99_SOURCE


159 
	#_ISOC99_SOURCE
 1

	)

160 #unde‡
_POSIX_SOURCE


161 
	#_POSIX_SOURCE
 1

	)

162 #unde‡
_POSIX_C_SOURCE


163 
	#_POSIX_C_SOURCE
 200809L

	)

164 #unde‡
_XOPEN_SOURCE


165 
	#_XOPEN_SOURCE
 700

	)

166 #unde‡
_XOPEN_SOURCE_EXTENDED


167 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

168 #unde‡
_LARGEFILE64_SOURCE


169 
	#_LARGEFILE64_SOURCE
 1

	)

170 #unde‡
_BSD_SOURCE


171 
	#_BSD_SOURCE
 1

	)

172 #unde‡
_SVID_SOURCE


173 
	#_SVID_SOURCE
 1

	)

174 #unde‡
_ATFILE_SOURCE


175 
	#_ATFILE_SOURCE
 1

	)

180 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

181 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

182 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

183 
	#_BSD_SOURCE
 1

	)

184 
	#_SVID_SOURCE
 1

	)

191 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

192 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

193 
	#__USE_ISOC99
 1

	)

197 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

198 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

199 
	#__USE_ISOC95
 1

	)

204 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

205 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

206 
	#_POSIX_SOURCE
 1

	)

207 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

208 
	#_POSIX_C_SOURCE
 2

	)

209 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

210 
	#_POSIX_C_SOURCE
 199506L

	)

211 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

212 
	#_POSIX_C_SOURCE
 200112L

	)

214 
	#_POSIX_C_SOURCE
 200809L

	)

216 
	#__USE_POSIX_IMPLICITLY
 1

	)

219 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


220 
	#__USE_POSIX
 1

	)

223 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


224 
	#__USE_POSIX2
 1

	)

227 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

228 
	#__USE_POSIX199309
 1

	)

231 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

232 
	#__USE_POSIX199506
 1

	)

235 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

236 
	#__USE_XOPEN2K
 1

	)

237 #unde‡
__USE_ISOC95


238 
	#__USE_ISOC95
 1

	)

239 #unde‡
__USE_ISOC99


240 
	#__USE_ISOC99
 1

	)

243 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

244 
	#__USE_XOPEN2K8
 1

	)

245 #unde‡
_ATFILE_SOURCE


246 
	#_ATFILE_SOURCE
 1

	)

249 #ifdef 
_XOPEN_SOURCE


250 
	#__USE_XOPEN
 1

	)

251 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

252 
	#__USE_XOPEN_EXTENDED
 1

	)

253 
	#__USE_UNIX98
 1

	)

254 #unde‡
_LARGEFILE_SOURCE


255 
	#_LARGEFILE_SOURCE
 1

	)

256 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

257 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

258 
	#__USE_XOPEN2K8
 1

	)

259 
	#__USE_XOPEN2K8XSI
 1

	)

261 
	#__USE_XOPEN2K
 1

	)

262 
	#__USE_XOPEN2KXSI
 1

	)

263 #unde‡
__USE_ISOC95


264 
	#__USE_ISOC95
 1

	)

265 #unde‡
__USE_ISOC99


266 
	#__USE_ISOC99
 1

	)

269 #ifde‡
_XOPEN_SOURCE_EXTENDED


270 
	#__USE_XOPEN_EXTENDED
 1

	)

275 #ifde‡
_LARGEFILE_SOURCE


276 
	#__USE_LARGEFILE
 1

	)

279 #ifde‡
_LARGEFILE64_SOURCE


280 
	#__USE_LARGEFILE64
 1

	)

283 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

284 
	#__USE_FILE_OFFSET64
 1

	)

287 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


288 
	#__USE_MISC
 1

	)

291 #ifdef 
_BSD_SOURCE


292 
	#__USE_BSD
 1

	)

295 #ifdef 
_SVID_SOURCE


296 
	#__USE_SVID
 1

	)

299 #ifdef 
_ATFILE_SOURCE


300 
	#__USE_ATFILE
 1

	)

303 #ifdef 
_GNU_SOURCE


304 
	#__USE_GNU
 1

	)

307 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


308 
	#__USE_REENTRANT
 1

	)

311 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

312 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

313 #i‡
_FORTIFY_SOURCE
 > 1

314 
	#__USE_FORTIFY_LEVEL
 2

	)

316 
	#__USE_FORTIFY_LEVEL
 1

	)

319 
	#__USE_FORTIFY_LEVEL
 0

	)

323 
	~<bôs/¥edefs.h
>

326 
	#__STDC_ISO_10646__
 200009L

	)

334 #unde‡
__GNU_LIBRARY__


335 
	#__GNU_LIBRARY__
 6

	)

339 
	#__GLIBC__
 2

	)

340 
	#__GLIBC_MINOR__
 13

	)

342 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

343 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

346 #i‡
deföed
 
__GNUC__
 \

347 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

348 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

349 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

350 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

354 #i‚de‡
__ASSEMBLER__


355 #i‚de‡
_SYS_CDEFS_H


356 
	~<sys/cdefs.h
>

361 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


362 
	#__USE_LARGEFILE
 1

	)

363 
	#__USE_LARGEFILE64
 1

	)

369 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

370 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

371 && 
deföed
 
	g__exã∫_ölöe


372 
	#__USE_EXTERN_INLINES
 1

	)

377 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

378 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

379 && 
deföed
 
	g__exã∫_ölöe


380 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

388 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
);

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

151 
	#_IO_SKIPWS
 01

	)

152 
	#_IO_LEFT
 02

	)

153 
	#_IO_RIGHT
 04

	)

154 
	#_IO_INTERNAL
 010

	)

155 
	#_IO_DEC
 020

	)

156 
	#_IO_OCT
 040

	)

157 
	#_IO_HEX
 0100

	)

158 
	#_IO_SHOWBASE
 0200

	)

159 
	#_IO_SHOWPOINT
 0400

	)

160 
	#_IO_UPPERCASE
 01000

	)

161 
	#_IO_SHOWPOS
 02000

	)

162 
	#_IO_SCIENTIFIC
 04000

	)

163 
	#_IO_FIXED
 010000

	)

164 
	#_IO_UNITBUF
 020000

	)

165 
	#_IO_STDIO
 040000

	)

166 
	#_IO_DONT_CLOSE
 0100000

	)

167 
	#_IO_BOOLALPHA
 0200000

	)

170 
_IO_jump_t
; 
	g_IO_FILE
;

173 #ifde‡
_IO_MTSAFE_IO


174 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

175 
	~<bôs/°dio-lock.h
>

180 
	t_IO_lock_t
;

186 
	s_IO_m¨kî
 {

187 
_IO_m¨kî
 *
	m_√xt
;

188 
_IO_FILE
 *
	m_sbuf
;

192 
	m_pos
;

194 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

195 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

196 
	mpublic
:

197 
°ªamm¨kî
(
°ªambuf
 *
sb
);

198 ~
°ªamm¨kî
();

199 
ßvög
(Ë{  
	m_•os
 == -2; }

200 
dñè
(
°ªamm¨kî
&);

201 
dñè
();

206 
	e__codecvt_ªsu…


208 
	m__codecvt_ok
,

209 
	m__codecvt_∑πül
,

210 
	m__codecvt_îr‹
,

211 
	m__codecvt_noc⁄v


214 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


217 
	s_IO_codecvt


219 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

220 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

221 
	m__mb°©e_t
 *,

222 c⁄° 
	mwch¨_t
 *,

223 c⁄° 
	mwch¨_t
 *,

224 c⁄° 
	mwch¨_t
 **, *,

226 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *, *,

229 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

230 
	m__mb°©e_t
 *,

232 c⁄° **, 
	mwch¨_t
 *,

233 
	mwch¨_t
 *, wchar_t **);

234 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

235 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

236 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

237 c⁄° *, c⁄° *, 
	m_IO_size_t
);

238 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

240 
_IO_ic⁄v_t
 
	m__cd_ö
;

241 
_IO_ic⁄v_t
 
	m__cd_out
;

245 
	s_IO_wide_d©a


247 
wch¨_t
 *
	m_IO_ªad_±r
;

248 
wch¨_t
 *
	m_IO_ªad_íd
;

249 
wch¨_t
 *
	m_IO_ªad_ba£
;

250 
wch¨_t
 *
	m_IO_wrôe_ba£
;

251 
wch¨_t
 *
	m_IO_wrôe_±r
;

252 
wch¨_t
 *
	m_IO_wrôe_íd
;

253 
wch¨_t
 *
	m_IO_buf_ba£
;

254 
wch¨_t
 *
	m_IO_buf_íd
;

256 
wch¨_t
 *
	m_IO_ßve_ba£
;

257 
wch¨_t
 *
	m_IO_backup_ba£
;

259 
wch¨_t
 *
	m_IO_ßve_íd
;

261 
__mb°©e_t
 
	m_IO_°©e
;

262 
__mb°©e_t
 
	m_IO_œ°_°©e
;

263 
_IO_codecvt
 
	m_codecvt
;

265 
wch¨_t
 
	m_sh‹tbuf
[1];

267 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

271 
	s_IO_FILE
 {

272 
	m_Êags
;

273 
	#_IO_fûe_Êags
 
_Êags


	)

277 * 
	m_IO_ªad_±r
;

278 * 
	m_IO_ªad_íd
;

279 * 
	m_IO_ªad_ba£
;

280 * 
	m_IO_wrôe_ba£
;

281 * 
	m_IO_wrôe_±r
;

282 * 
	m_IO_wrôe_íd
;

283 * 
	m_IO_buf_ba£
;

284 * 
	m_IO_buf_íd
;

286 *
	m_IO_ßve_ba£
;

287 *
	m_IO_backup_ba£
;

288 *
	m_IO_ßve_íd
;

290 
_IO_m¨kî
 *
	m_m¨kîs
;

292 
_IO_FILE
 *
	m_chaö
;

294 
	m_fûío
;

296 
	m_blksize
;

298 
	m_Êags2
;

300 
_IO_off_t
 
	m_ﬁd_off£t
;

302 
	#__HAVE_COLUMN


	)

304 
	m_cur_cﬁumn
;

305 sig√d 
	m_vèbÀ_off£t
;

306 
	m_sh‹tbuf
[1];

310 
_IO_lock_t
 *
	m_lock
;

311 #ifde‡
_IO_USE_OLD_IO_FILE


314 
	s_IO_FILE_com∂ëe


316 
_IO_FILE
 
	m_fûe
;

318 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

319 
_IO_off64_t
 
	m_off£t
;

320 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


322 
_IO_codecvt
 *
	m_codecvt
;

323 
_IO_wide_d©a
 *
	m_wide_d©a
;

324 
_IO_FILE
 *
	m_‰ìªs_li°
;

325 *
	m_‰ìªs_buf
;

326 
size_t
 
	m_‰ìªs_size
;

328 *
	m__∑d1
;

329 *
	m__∑d2
;

330 *
	m__∑d3
;

331 *
	m__∑d4
;

332 
size_t
 
	m__∑d5
;

334 
	m_mode
;

336 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

340 #i‚de‡
__˝lu•lus


341 
_IO_FILE
 
	t_IO_FILE
;

344 
	g_IO_FILE_∂us
;

346 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

347 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

349 #i‚de‡
_LIBC


350 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

351 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

352 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

354 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

355 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

356 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

364 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

372 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

373 
	tsize_t
 
	t__n
);

381 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

384 
	t__io_˛o£_‚
 (*
	t__cookõ
);

387 #ifde‡
_GNU_SOURCE


389 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

390 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

391 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

392 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

397 
__io_ªad_‚
 *
	mªad
;

398 
__io_wrôe_‚
 *
	mwrôe
;

399 
__io_£ek_‚
 *
	m£ek
;

400 
__io_˛o£_‚
 *
	m˛o£
;

401 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

402 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

404 
	g_IO_cookõ_fûe
;

407 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

408 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

412 #ifde‡
__˝lu•lus


416 
__undîÊow
 (
_IO_FILE
 *);

417 
__uÊow
 (
_IO_FILE
 *);

418 
__ovîÊow
 (
_IO_FILE
 *, );

419 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


420 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

421 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

422 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

425 #i‡ 
__GNUC__
 >= 3

426 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

431 
	#_IO_gëc_u∆ocked
(
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

433 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

434 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

435 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

436 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

437 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

438 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

439 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

440 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

441 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

443 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


444 
	#_IO_gëwc_u∆ocked
(
_Â
) \

445 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

446 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

447 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

448 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

449 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

450 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

451 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

452 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

453 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

454 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

457 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

458 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

460 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

461 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

462 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

463 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

468 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

469 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

471 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

472 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

473 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 #ifde‡
_IO_MTSAFE_IO


476 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

477 
	#_IO_Êockfûe
(
_Â
) \

478 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

479 
	#_IO_fu∆ockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

482 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

483 
	#_IO_Êockfûe
(
_Â
Ë

	)

484 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

485 
	#_IO_·rylockfûe
(
_Â
Ë

	)

486 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

487 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

490 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

491 
_IO_va_li°
, *
__ª°ri˘
);

492 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

493 
_IO_va_li°
);

494 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

495 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

497 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

498 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

500 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

502 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


503 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

504 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

505 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

506 #i‡
__GNUC__
 >= 2

509 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


510 
	~<shlib-com∑t.h
>

511 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

512 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

513 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

514 c⁄° 
_IO_°dö_u£d
;

515 
wók_exã∫
 (
_IO_°dö_u£d
);

518 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


519 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

523 
	#_IO_fwide
(
__Â
, 
__mode
) \

524 ({ 
__ªsu…
 = (
__mode
); \

525 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

527 i‡((
__Â
)->
_mode
 == 0) \

529 (
__Â
)->
_mode
 = -1; \

530 
__ªsu…
 = (
__Â
)->
_mode
; \

532 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

533 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

535 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

536 
__ªsu…
; })

	)

539 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

540 
_IO_va_li°
, *
__ª°ri˘
);

541 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

542 
_IO_va_li°
);

543 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

544 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

547 #ifde‡
__LDBL_COMPAT


548 
	~<bôs/libio-ldbl.h
>

551 #ifde‡
__˝lu•lus


	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


59 #unde‡
__FDELT


60 #unde‡
__FDMASK


62 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

63 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

71 #ifde‡
__USE_XOPEN


72 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

75 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

78 } 
	tfd_£t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifde‡
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

94 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

95 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

96 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

99 
__BEGIN_DECLS


109 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
);

114 #ifde‡
__USE_XOPEN2K


121 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

122 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

123 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

124 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

125 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/sys/types.h

23 #i‚def 
_SYS_TYPES_H


24 
	#_SYS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #ifdef 
__USE_BSD


33 #i‚de‡
__u_ch¨_deföed


34 
__u_ch¨
 
	tu_ch¨
;

35 
__u_sh‹t
 
	tu_sh‹t
;

36 
__u_öt
 
	tu_öt
;

37 
__u_l⁄g
 
	tu_l⁄g
;

38 
__quad_t
 
	tquad_t
;

39 
__u_quad_t
 
	tu_quad_t
;

40 
__fsid_t
 
	tfsid_t
;

41 
	#__u_ch¨_deföed


	)

45 
__loff_t
 
	tloff_t
;

47 #i‚de‡
__öo_t_deföed


48 #i‚de‡
__USE_FILE_OFFSET64


49 
__öo_t
 
	töo_t
;

51 
__öo64_t
 
	töo_t
;

53 
	#__öo_t_deföed


	)

55 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


56 
__öo64_t
 
	töo64_t
;

57 
	#__öo64_t_deföed


	)

60 #i‚de‡
__dev_t_deföed


61 
__dev_t
 
	tdev_t
;

62 
	#__dev_t_deföed


	)

65 #i‚de‡
__gid_t_deföed


66 
__gid_t
 
	tgid_t
;

67 
	#__gid_t_deföed


	)

70 #i‚de‡
__mode_t_deföed


71 
__mode_t
 
	tmode_t
;

72 
	#__mode_t_deföed


	)

75 #i‚de‡
__∆ök_t_deföed


76 
__∆ök_t
 
	t∆ök_t
;

77 
	#__∆ök_t_deföed


	)

80 #i‚de‡
__uid_t_deföed


81 
__uid_t
 
	tuid_t
;

82 
	#__uid_t_deföed


	)

85 #i‚de‡
__off_t_deföed


86 #i‚de‡
__USE_FILE_OFFSET64


87 
__off_t
 
	toff_t
;

89 
__off64_t
 
	toff_t
;

91 
	#__off_t_deföed


	)

93 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


94 
__off64_t
 
	toff64_t
;

95 
	#__off64_t_deföed


	)

98 #i‚de‡
__pid_t_deföed


99 
__pid_t
 
	tpid_t
;

100 
	#__pid_t_deföed


	)

103 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

104 && !
deföed
 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169 
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180 
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195 
	t__ötN_t
 (8, 
	t__QI__
);

196 
__ötN_t
 (16, 
__HI__
);

197 
__ötN_t
 (32, 
__SI__
);

198 
__ötN_t
 (64, 
__DI__
);

201 
__u_ötN_t
 (8, 
__QI__
);

202 
__u_ötN_t
 (16, 
__HI__
);

203 
__u_ötN_t
 (32, 
__SI__
);

204 
__u_ötN_t
 (64, 
__DI__
);

206 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

228 && !
deföed
 
__blksize_t_deföed


229 
__blksize_t
 
	tblksize_t
;

230 
	#__blksize_t_deföed


	)

234 #i‚de‡
__USE_FILE_OFFSET64


235 #i‚de‡
__blk˙t_t_deföed


236 
__blk˙t_t
 
	tblk˙t_t
;

237 
	#__blk˙t_t_deföed


	)

239 #i‚de‡
__fsblk˙t_t_deföed


240 
__fsblk˙t_t
 
	tfsblk˙t_t
;

241 
	#__fsblk˙t_t_deföed


	)

243 #i‚de‡
__fsfû˙t_t_deföed


244 
__fsfû˙t_t
 
	tfsfû˙t_t
;

245 
	#__fsfû˙t_t_deföed


	)

248 #i‚de‡
__blk˙t_t_deföed


249 
__blk˙t64_t
 
	tblk˙t_t
;

250 
	#__blk˙t_t_deföed


	)

252 #i‚de‡
__fsblk˙t_t_deföed


253 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

254 
	#__fsblk˙t_t_deföed


	)

256 #i‚de‡
__fsfû˙t_t_deföed


257 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

258 
	#__fsfû˙t_t_deföed


	)

262 #ifde‡
__USE_LARGEFILE64


263 
__blk˙t64_t
 
	tblk˙t64_t
;

264 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

265 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

270 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


271 
	~<bôs/±hªadty≥s.h
>

274 
	g__END_DECLS


	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/bits/libio-ldbl.h

20 #i‚de‡
_IO_STDIO_H


24 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

25 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/predefs.h

19 #i‚de‡
_FEATURES_H


23 #i‚de‡
_PREDEFS_H


24 
	#_PREDEFS_H


	)

27 
	#__STDC_IEC_559__
 1

	)

28 
	#__STDC_IEC_559_COMPLEX__
 1

	)

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


23 
	~<bôs/w‹dsize.h
>

26 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

28 #i‡
__WORDSIZE
 == 64

29 
	#__FD_ZERO_STOS
 "°osq"

	)

31 
	#__FD_ZERO_STOS
 "°o¶"

	)

34 
	#__FD_ZERO
(
fd•
) \

36 
__d0
, 
__d1
; \

37 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

38 : "=c" (
__d0
), "=D" (
__d1
) \

39 : "a" (0), "0" ( (
fd_£t
) \

40 /  (
__fd_mask
)), \

41 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

43 } 0)

	)

49 
	#__FD_ZERO
(
£t
) \

51 
__i
; \

52 
fd_£t
 *
__¨r
 = (
£t
); \

53 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

54 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

55 } 0)

	)

59 
	#__FD_SET
(
d
, 
£t
) \

60 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FDELT
 (
d
)] |
	`__FDMASK
 (d)))

	)

61 
	#__FD_CLR
(
d
, 
£t
) \

62 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FDELT
 (
d
)] &~
	`__FDMASK
 (d)))

	)

63 
	#__FD_ISSET
(
d
, 
£t
) \

64 ((
	`__FDS_BITS
 (
£t
)[
	`__FDELT
 (
d
)] & 
	`__FDMASK
 (d)Ë!0)

	)

	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/stdio-lock.h

20 #i‚de‡
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bôs/libc-lock.h
>

24 
	~<lowÀvñlock.h
>

28 
	#_IO_lock_öex≥nsive
 1

	)

30 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t_IO_lock_t
;

32 
	#_IO_lock_öôülizî
 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

34 
	#_IO_lock_öô
(
_«me
) \

35 ((
_«me
Ë(
_IO_lock_t
Ë
_IO_lock_öôülizî
 , 0)

	)

37 
	#_IO_lock_föi
(
_«me
) \

38 ((Ë0)

	)

40 
	#_IO_lock_lock
(
_«me
) \

42 *
__£lf
 = 
THREAD_SELF
; \

43 i‡((
_«me
).
ow√r
 !
__£lf
) \

45 
	`Œl_lock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

46 (
_«me
).
ow√r
 = 
__£lf
; \

48 ++(
_«me
).
˙t
; \

49 } 0)

	)

51 
	#_IO_lock_åylock
(
_«me
) \

53 
__ªsu…
 = 0; \

54 *
__£lf
 = 
THREAD_SELF
; \

55 i‡((
_«me
).
ow√r
 !
__£lf
) \

57 i‡(
	`Œl_åylock
 ((
_«me
).
lock
) == 0) \

59 (
_«me
).
ow√r
 = 
__£lf
; \

60 (
_«me
).
˙t
 = 1; \

63 
__ªsu…
 = 
EBUSY
; \

66 ++(
_«me
).
˙t
; \

67 
__ªsu…
; \

68 })

	)

70 
	#_IO_lock_u∆ock
(
_«me
) \

72 i‡(--(
_«me
).
˙t
 == 0) \

74 (
_«me
).
ow√r
 = 
NULL
; \

75 
	`Œl_u∆ock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

77 } 0)

	)

81 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
) \

82 
	`__libc_˛ónup_ªgi⁄_°¨t
 (((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0, 
_f˘
, _Â)

	)

83 
	#_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
_f˘
) \

84 
	`__libc_˛ónup_ªgi⁄_°¨t
 (1, 
_f˘
, 
NULL
)

	)

85 
	#_IO_˛ónup_ªgi⁄_íd
(
_doô
) \

86 
	`__libc_˛ónup_ªgi⁄_íd
 (
_doô
)

	)

88 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc


90 #ifde‡
__EXCEPTIONS


91 
	#_IO_acquúe_lock
(
_Â
) \

93 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

94 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_f˘
))) \

95 (
_Â
); \

96 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

97 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
) \

99 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

100 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_˛ór_Êags2_f˘
))) \

101 (
_Â
); \

102 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

104 
	#_IO_acquúe_lock
(
_Â
Ë
_IO_acquúe_lock_√eds_ex˚±i⁄s_íabÀd


	)

105 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
Ë
	`_IO_acquúe_lock
 (_Â)

	)

107 
	#_IO_ªÀa£_lock
(
_Â
Ë; } 0)

	)

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__exã∫_ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__exã∫_ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_XOPEN2K8


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

50 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
fct

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
fct

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
args

75 
	#__PMT
(
¨gs
Ë
	)
args

80 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef 
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
, 
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

182 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

185 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

186 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

199 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

200 
	#__©åibuã__
(
xyz
Ë

	)

206 #i‡
__GNUC_PREREQ
 (2,96)

207 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

209 
	#__©åibuã_mÆloc__


	)

215 #i‡
__GNUC_PREREQ
 (2,96)

216 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

218 
	#__©åibuã_puª__


	)

224 #i‡
__GNUC_PREREQ
 (3,1)

225 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

226 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

228 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

229 
	#__©åibuã_noölöe__


	)

233 #i‡
__GNUC_PREREQ
 (3,2)

234 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

236 
	#__©åibuã_dïªˇãd__


	)

245 #i‡
__GNUC_PREREQ
 (2,8)

246 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

248 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

255 #i‡
__GNUC_PREREQ
 (2,97)

256 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

257 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

259 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

264 #i‡
__GNUC_PREREQ
 (3,3)

265 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

267 
	#__n⁄nuŒ
(
∑øms
)

	)

272 #i‡
__GNUC_PREREQ
 (3,4)

273 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

274 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

275 #i‡
__USE_FORTIFY_LEVEL
 > 0

276 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

279 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

281 #i‚de‡
__wur


282 
	#__wur


	)

286 #i‡
__GNUC_PREREQ
 (3,2)

287 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

289 
	#__Æways_ölöe
 
__ölöe


	)

294 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3)

295 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


296 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

297 #i‡
__GNUC_PREREQ
 (4,3)

298 
	#__exã∫_Æways_ölöe
 \

299 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

301 
	#__exã∫_Æways_ölöe
 \

302 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

305 
	#__exã∫_ölöe
 
__ölöe


	)

306 #i‡
__GNUC_PREREQ
 (4,3)

307 
	#__exã∫_Æways_ölöe
 \

308 
__Æways_ölöe
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

310 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

317 #i‡
__GNUC_PREREQ
 (4,3)

318 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

319 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

326 #i‡!
__GNUC_PREREQ
 (2,8)

327 
	#__exãnsi⁄__


	)

331 #i‡!
__GNUC_PREREQ
 (2,92)

332 
	#__ª°ri˘


	)

338 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


339 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

341 #ifde‡
__GNUC__


342 
	#__ª°ri˘_¨r


	)

344 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

345 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

348 
	#__ª°ri˘_¨r


	)

353 
	~<bôs/w‹dsize.h
>

355 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


356 
	#__LDBL_COMPAT
 1

	)

357 #ifde‡
__REDIRECT


358 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

359 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

360 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

361 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

362 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

363 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

364 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

365 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

366 
	#__LDBL_REDIR_DECL
(
«me
) \

367 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

368 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

369 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

370 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

371 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

374 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


375 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

376 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

377 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

378 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

379 
	#__LDBL_REDIR_DECL
(
«me
)

	)

380 #ifde‡
__REDIRECT


381 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

382 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

383 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/sysmacros.h

21 #i‚de‡
_SYS_SYSMACROS_H


22 
	#_SYS_SYSMACROS_H
 1

	)

24 
	~<„©uªs.h
>

29 #ifde‡
__GLIBC_HAVE_LONG_LONG


30 
__exãnsi⁄__


31 
	$gnu_dev_maj‹
 (
__dev
)

32 
__THROW
;

33 
__exãnsi⁄__


34 
	$gnu_dev_mö‹
 (
__dev
)

35 
__THROW
;

36 
__exãnsi⁄__


37 
	$gnu_dev_makedev
 (
__maj‹
,

38 
__mö‹
)

39 
__THROW
;

41 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


42 
__exãnsi⁄__
 
__exã∫_ölöe
 

43 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

45  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

46 
	}
}

48 
__exãnsi⁄__
 
__exã∫_ölöe
 

49 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

51  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

52 
	}
}

54 
__exãnsi⁄__
 
__exã∫_ölöe
 

55 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

57  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

58 | (((Ë(
__mö‹
 & ~0xff)) << 12)

59 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

60 
	}
}

65 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

66 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

67 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/bits/byteswap.h

21 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


25 #i‚de‡
_BITS_BYTESWAP_H


26 
	#_BITS_BYTESWAP_H
 1

	)

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

34 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

35 
	#__bsw≠_16
(
x
) \

36 (
__exãnsi⁄__
 \

37 ({ 
__v
, 
__x
 = (Ë(
x
); \

38 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

39 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

41 
	`__asm__
 ("rorw $8, %w0" \

42 : "Ù" (
__v
) \

43 : "0" (
__x
) \

45 
__v
; }))

	)

48 
	#__bsw≠_16
(
x
) \

49 (
__exãnsi⁄__
 \

50 ({ 
__x
 = (Ë(
x
); \

51 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

56 
	#__bsw≠_c⁄°™t_32
(
x
) \

57 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

58 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

60 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

61 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

62 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

63 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

64 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

65 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

66 || 
deföed
 
	g__amdÁm10__
)

69 
	#__bsw≠_32
(
x
) \

70 (
__exãnsi⁄__
 \

71 ({ 
__v
, 
__x
 = (
x
); \

72 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

73 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

75 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

76 
__v
; }))

	)

78 
	#__bsw≠_32
(
x
) \

79 (
__exãnsi⁄__
 \

80 ({ 
__v
, 
__x
 = (
x
); \

81 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

82 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

84 
	`__asm__
 ("rorw $8, %w0;" \

87 : "Ù" (
__v
) \

88 : "0" (
__x
) \

90 
__v
; }))

	)

93 
	#__bsw≠_32
(
x
) \

94 (
__exãnsi⁄__
 \

95 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

99 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

101 
	#__bsw≠_c⁄°™t_64
(
x
) \

102 ((((
x
) & 0xff00000000000000ull) >> 56) \

103 | (((
x
) & 0x00ff000000000000ull) >> 40) \

104 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

105 | (((
x
) & 0x000000ff00000000ull) >> 8) \

106 | (((
x
) & 0x00000000ff000000ull) << 8) \

107 | (((
x
) & 0x0000000000ff0000ull) << 24) \

108 | (((
x
) & 0x000000000000ff00ull) << 40) \

109 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

111 #i‡
__WORDSIZE
 == 64

112 
	#__bsw≠_64
(
x
) \

113 (
__exãnsi⁄__
 \

114 ({ 
__v
, 
__x
 = (
x
); \

115 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

116 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

118 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

119 
__v
; }))

	)

121 
	#__bsw≠_64
(
x
) \

122 (
__exãnsi⁄__
 \

123 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

124 
__l
[2]; } 
__w
, 
__r
; \

125 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

126 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

129 
__w
.
__Œ
 = (
x
); \

130 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

131 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

133 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/libc-lock.h

20 #i‚de‡
_BITS_LIBC_LOCK_H


21 
	#_BITS_LIBC_LOCK_H
 1

	)

23 
	~<±hªad.h
>

24 
	#__√ed_NULL


	)

25 
	~<°ddef.h
>

34 #ifde‡
_LIBC


35 
	~<lowÀvñlock.h
>

36 
	~<és.h
>

37 
	~<±hªad-fun˘i⁄s.h
>

38 
	~<î∫o.h
>

39 
	~<gnu/›ti⁄-groups.h
>

43 #i‡
deföed
 
_LIBC
 || deföed 
_IO_MTSAFE_IO


44 #i‡(
deföed
 
NOT_IN_libc
 && !deföed 
IS_IN_lib±hªad
Ë|| !deföed 
_LIBC


45 
±hªad_muãx_t
 
	t__libc_lock_t
;

46 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

48 
	t__libc_lock_t
;

49 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t__libc_lock_ªcursive_t
;

51 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__πld_lock_ªcursive_t
;

52 #ifde‡
__USE_UNIX98


53 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

55 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

58 
__libc_lock_›aque__
 
	t__libc_lock_t
;

59 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

60 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

64 
±hªad_key_t
 
	t__libc_key_t
;

73 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

74 
CLASS
 
__libc_lock_t
 
NAME
;

	)

75 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

76 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

77 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

78 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

79 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

80 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

91 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

92 #i‡
LLL_LOCK_INITIALIZER
 == 0

93 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

94 
CLASS
 
__libc_lock_t
 
NAME
;

	)

96 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

97 
CLASS
 
__libc_lock_t
 
NAME
 = 
LLL_LOCK_INITIALIZER
;

	)

100 #i‡
__LT_SPINLOCK_INIT
 == 0

101 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

102 
CLASS
 
__libc_lock_t
 
NAME
;

	)

104 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

105 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

109 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

110 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

114 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

115 #i‡
LLL_LOCK_INITIALIZER
 == 0

116 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

117 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

119 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

120 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

122 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

123 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

125 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

126 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

127 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

128 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

131 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

132 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

133 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

134 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

136 
	#__πld_lock_öôülize
(
NAME
) \

137 (Ë((
NAME
Ë(
__πld_lock_ªcursive_t
Ë
_RTLD_LOCK_RECURSIVE_INITIALIZER
)

	)

144 #ifde‡
__PIC__


145 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

146 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

147 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

149 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

150 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

154 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


155 
	#PTFAVAIL
(
NAME
Ë
__libc_±hªad_fun˘i⁄s_öô


	)

156 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

157 (
__libc_±hªad_fun˘i⁄s_öô
 ? 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
Ë: 
ELSE
)

	)

158 
	#__libc_±f_ˇŒ_Æways
(
FUNC
, 
ARGS
) \

159 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
)

	)

161 
	#PTFAVAIL
(
NAME
Ë(NAME !
NULL
)

	)

162 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

163 
	`__libc_maybe_ˇŒ
 (
FUNC
, 
ARGS
, 
ELSE
)

	)

164 
	#__libc_±f_ˇŒ_Æways
(
FUNC
, 
ARGS
) \

165 
FUNC
 
ARGS


	)

171 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

172 
	#__libc_lock_öô
(
NAME
Ë((NAMEË
LLL_LOCK_INITIALIZER
, 0)

	)

174 
	#__libc_lock_öô
(
NAME
) \

175 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0)

	)

177 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


180 
	#__libc_rwlock_öô
(
NAME
) \

181 (
	`__buûtö_mem£t
 (&(
NAME
), '\0',  (NAME)), 0)

	)

183 
	#__libc_rwlock_öô
(
NAME
) \

184 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0)

	)

188 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

189 
	#__libc_lock_öô_ªcursive
(
NAME
) \

190 ((
NAME
Ë(
__libc_lock_ªcursive_t
Ë
_LIBC_LOCK_RECURSIVE_INITIALIZER
, 0)

	)

192 
	#__libc_lock_öô_ªcursive
(
NAME
) \

194 i‡(
__±hªad_muãx_öô
 !
NULL
) \

196 
±hªad_muãx©å_t
 
__©å
; \

197 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

198 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

199 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

200 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

202 } 0)

	)

205 
	#__πld_lock_öô_ªcursive
(
NAME
) \

207 i‡(
__±hªad_muãx_öô
 !
NULL
) \

209 
±hªad_muãx©å_t
 
__©å
; \

210 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

211 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

212 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

213 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

215 } 0)

	)

220 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

221 
	#__libc_lock_föi
(
NAME
Ë((Ë0)

	)

223 
	#__libc_lock_föi
(
NAME
) \

224 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

226 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


227 
	#__libc_rwlock_föi
(
NAME
Ë((Ë0)

	)

229 
	#__libc_rwlock_föi
(
NAME
) \

230 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0)

	)

234 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

235 
	#__libc_lock_föi_ªcursive
(
NAME
Ë((Ë0)

	)

237 
	#__libc_lock_föi_ªcursive
(
NAME
) \

238 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

242 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

243 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

247 
__libc_lock_lock_‚
 (
__libc_lock_t
 *);

248 
libc_hiddí_¥Ÿo
 (
__libc_lock_lock_‚
);

250 #i‡
__OPTION_EGLIBC_BIG_MACROS


251 
	#__libc_lock_lock
(
NAME
) \

252 ({ 
	`Œl_lock
 (
NAME
, 
LLL_PRIVATE
); 0; })

	)

254 
	#__libc_lock_lock
(
NAME
) \

255 
	`__libc_lock_lock_‚
 (&(
NAME
))

	)

258 
	#__libc_lock_lock
(
NAME
) \

259 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
)), 0)

	)

261 
	#__libc_rwlock_rdlock
(
NAME
) \

262 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0)

	)

263 
	#__libc_rwlock_wæock
(
NAME
) \

264 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0)

	)

267 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

268 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

272 
__libc_lock_lock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

273 
libc_hiddí_¥Ÿo
 (
__libc_lock_lock_ªcursive_‚
);

275 #i‡
__OPTION_EGLIBC_BIG_MACROS


276 
	#__libc_lock_lock_ªcursive
(
NAME
) \

278 *
£lf
 = 
THREAD_SELF
; \

279 i‡((
NAME
).
ow√r
 !
£lf
) \

281 
	`Œl_lock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

282 (
NAME
).
ow√r
 = 
£lf
; \

284 ++(
NAME
).
˙t
; \

285 } 0)

	)

287 
	#__libc_lock_lock_ªcursive
(
NAME
) \

288 
	`__libc_lock_lock_ªcursive_‚
 (&(
NAME
))

	)

291 
	#__libc_lock_lock_ªcursive
(
NAME
) \

292 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

296 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

297 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

301 
__libc_lock_åylock_‚
 (
__libc_lock_t
 *);

302 
libc_hiddí_¥Ÿo
 (
__libc_lock_åylock_‚
);

304 #i‡
__OPTION_EGLIBC_BIG_MACROS


305 
	#__libc_lock_åylock
(
NAME
) \

306 
	`Œl_åylock
 (
NAME
)

	)

308 
	#__libc_lock_åylock
(
NAME
) \

309 
	`__libc_lock_åylock_‚
 (&(
NAME
))

	)

312 
	#__libc_lock_åylock
(
NAME
) \

313 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

315 
	#__libc_rwlock_åyrdlock
(
NAME
) \

316 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0)

	)

317 
	#__libc_rwlock_åywæock
(
NAME
) \

318 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0)

	)

321 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

322 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

326 
__libc_lock_åylock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

327 
libc_hiddí_¥Ÿo
 (
__libc_lock_åylock_ªcursive_‚
);

329 #i‡
__OPTION_EGLIBC_BIG_MACROS


330 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

332 
ªsu…
 = 0; \

333 *
£lf
 = 
THREAD_SELF
; \

334 i‡((
NAME
).
ow√r
 !
£lf
) \

336 i‡(
	`Œl_åylock
 ((
NAME
).
lock
) == 0) \

338 (
NAME
).
ow√r
 = 
£lf
; \

339 (
NAME
).
˙t
 = 1; \

342 
ªsu…
 = 
EBUSY
; \

345 ++(
NAME
).
˙t
; \

346 
ªsu…
; \

347 })

	)

349 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

350 
	`__libc_lock_åylock_ªcursive_‚
 (&(
NAME
))

	)

353 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

354 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

357 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

358 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
).
muãx
), 0)

	)

361 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

362 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

366 
__libc_lock_u∆ock_‚
 (
__libc_lock_t
 *);

367 
libc_hiddí_¥Ÿo
 (
__libc_lock_u∆ock_‚
);

369 #i‡
__OPTION_EGLIBC_BIG_MACROS


370 
	#__libc_lock_u∆ock
(
NAME
) \

371 
	`Œl_u∆ock
 (
NAME
, 
LLL_PRIVATE
)

	)

373 
	#__libc_lock_u∆ock
(
NAME
) \

374 
	`__libc_lock_u∆ock_‚
 (&(
NAME
))

	)

377 
	#__libc_lock_u∆ock
(
NAME
) \

378 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

380 
	#__libc_rwlock_u∆ock
(
NAME
) \

381 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0)

	)

384 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

385 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

389 
__libc_lock_u∆ock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

390 
libc_hiddí_¥Ÿo
 (
__libc_lock_u∆ock_ªcursive_‚
);

392 #i‡
__OPTION_EGLIBC_BIG_MACROS


394 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

396 i‡(--(
NAME
).
˙t
 == 0) \

398 (
NAME
).
ow√r
 = 
NULL
; \

399 
	`Œl_u∆ock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

401 } 0)

	)

403 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

404 
	`__libc_lock_u∆ock_ªcursive_‚
 (&(
NAME
))

	)

407 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

408 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

411 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


412 
	#__πld_lock_deÁu…_lock_ªcursive
(
lock
) \

413 ++((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

415 
	#__πld_lock_deÁu…_u∆ock_ªcursive
(
lock
) \

416 --((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

418 
	#__πld_lock_lock_ªcursive
(
NAME
) \

419 
	`GL
(
dl_πld_lock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

421 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

422 
	`GL
(
dl_πld_u∆ock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

424 
	#__πld_lock_lock_ªcursive
(
NAME
) \

425 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

427 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

428 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
).
muãx
), 0)

	)

432 #i‡
PTHREAD_ONCE_INIT
 == 0

435 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

436 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

438 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

439 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

443 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

445 i‡(
	`PTFAVAIL
 (
__±hªad_⁄˚
)) \

446 
	`__libc_±f_ˇŒ_Æways
 (
__±hªad_⁄˚
, (&(
ONCE_CONTROL
), \

447 
INIT_FUNCTION
)); \

448 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

449 
	`INIT_FUNCTION
 (); \

450 (
ONCE_CONTROL
) |= 2; \

452 } 0)

	)

459 
_±hªad_˛ónup_push
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

460 (*
routöe
Ë(*), *
¨g
);

461 
	`_±hªad_˛ónup_p›
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

462 
execuã
);

463 
	`_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

464 (*
routöe
Ë(*), *
¨g
);

465 
	`_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

466 
execuã
);

469 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

470 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

471 
_avaû
; \

472 i‡(
DOIT
) { \

473 
_avaû
 = 
	`PTFAVAIL
 (
_±hªad_˛ónup_push_de„r
); \

474 i‡(
_avaû
) { \

475 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_push_de„r
, (&
_buf„r
, 
FCT
, \

476 
ARG
)); \

478 
_buf„r
.
__routöe
 = (
FCT
); \

479 
_buf„r
.
__¨g
 = (
ARG
); \

482 
_avaû
 = 0; \

483 }

	)

486 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

487 i‡(
_avaû
) { \

488 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

489 } i‡(
DOIT
) \

490 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
); \

491 
	}

	)
}

494 
	#__libc_˛ónup_íd
(
DOIT
) \

495 i‡(
_avaû
) { \

496 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

497 } i‡(
DOIT
) \

498 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
)

	)

502 
__exã∫_ölöe
 

503 
	$__libc_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
f
)

505 i‡(
f
->
__do_ô
)

506 
f
->
	`__ˇn˚l_routöe
 (f->
__ˇn˚l_¨g
);

507 
	}
}

509 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

511 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

512 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__libc_˛ónup_routöe
))) \

513 { .
__ˇn˚l_routöe
 = (
f˘
), .
__ˇn˚l_¨g
 = (
¨g
), \

514 .
__do_ô
 = 1 };

	)

516 
	#__libc_˛ónup_p›
(
execuã
) \

517 
__˛‰ame
.
__do_ô
 = (
execuã
); \

518 } 0)

	)

522 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

523 
	`__libc_±f_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1)

	)

526 
	#__libc_gë•ecific
(
KEY
) \

527 
	`__libc_±f_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
)

	)

530 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

531 
	`__libc_±f_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0)

	)

537 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

538 
	`__ªgi°î_©f‹k
 (
PREPARE
, 
PARENT
, 
CHILD
, 
NULL
)

	)

539 
__ªgi°î_©f‹k
 ((*
__¥ï¨e
) (),

540 (*
__∑ª¡
) (),

541 (*
__chûd
) (),

542 *
__dso_h™dÀ
);

547 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

548 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

550 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

552 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

554 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

556 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

558 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

560 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

562 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

563 
__köd
);

565 #ifde‡
__USE_UNIX98


566 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

567 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

569 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

571 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

573 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

575 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

577 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

579 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

582 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

583 (*
__de°r_fun˘i⁄
) (*));

585 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

586 
__c⁄°
 *
__poöãr
);

588 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

590 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

591 (*
__öô_routöe
) ());

593 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

594 (*
__∑ª¡
) (),

595 (*
__chûd
) ());

601 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


602 #ifde‡
wók_exã∫


603 #i‡
_LIBC


604 
	~<bp-sym.h
>

606 
	#BP_SYM
(
sym
Ë
	)
sym

608 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_öô
))

609 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_de°roy
))

610 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_lock
))

611 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_åylock
))

612 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_u∆ock
))

613 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_öô
))

614 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_de°roy
))

615 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_£ây≥
))

616 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_öô
))

617 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_de°roy
))

618 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_rdlock
))

619 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åyrdlock
))

620 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_wæock
))

621 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åywæock
))

622 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_u∆ock
))

623 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_key_¸óã
))

624 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_£t•ecific
))

625 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_gë•ecific
))

626 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_⁄˚
))

627 
	$wók_exã∫
 (
__±hªad_öôülize
)

628 
	$wók_exã∫
 (
__±hªad_©f‹k
)

629 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_push_de„r
))

630 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_p›_ª°‹e
))

631 
	`wók_exã∫
 (
	$BP_SYM
 (
±hªad_£tˇn˚l°©e
))

633 #¥agm®
wók
 
__±hªad_muãx_öô


634 #¥agm®
wók
 
__±hªad_muãx_de°roy


635 #¥agm®
wók
 
__±hªad_muãx_lock


636 #¥agm®
wók
 
__±hªad_muãx_åylock


637 #¥agm®
wók
 
__±hªad_muãx_u∆ock


638 #¥agm®
wók
 
__±hªad_muãx©å_öô


639 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


640 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


641 #¥agm®
wók
 
__±hªad_rwlock_de°roy


642 #¥agm®
wók
 
__±hªad_rwlock_rdlock


643 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


644 #¥agm®
wók
 
__±hªad_rwlock_wæock


645 #¥agm®
wók
 
__±hªad_rwlock_åywæock


646 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


647 #¥agm®
wók
 
__±hªad_key_¸óã


648 #¥agm®
wók
 
__±hªad_£t•ecific


649 #¥agm®
wók
 
__±hªad_gë•ecific


650 #¥agm®
wók
 
__±hªad_⁄˚


651 #¥agm®
wók
 
__±hªad_öôülize


652 #¥agm®
wók
 
__±hªad_©f‹k


653 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


654 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


655 #¥agm®
wók
 
±hªad_£tˇn˚l°©e


	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

72 
	t__c⁄°
 **, __const *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

86 
	t__c⁄°
 *,

87 
	t__c⁄°
 **,

88 
	t__c⁄°
 *, **,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

93 
	t__c⁄°
 *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 
__c⁄°
 *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

323 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

327 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

328 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

332 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

333 
__THROW
;

336 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifde‡
__USE_GNU


342 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

343 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

344 
__THROW
;

348 
__BEGIN_NAMESPACE_STD


351 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

355 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

359 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

363 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

364 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

365 
mb°©e_t
 *
__p
Ë
__THROW
;

368 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

369 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

372 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

373 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
__END_NAMESPACE_STD


378 #ifde‡
__USE_EXTERN_INLINES


384 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

385 
__exã∫_ölöe
 
wöt_t


386 
	`__NTH
 (
	$btowc
 (
__c
))

387 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

388 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

390 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

391 
__exã∫_ölöe
 

392 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

393 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

394 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

396 
__exã∫_ölöe
 
size_t


397 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

398 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

399 {  (
__ps
 !
NULL


400 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

403 
__BEGIN_NAMESPACE_STD


406 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

407 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

408 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

412 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

413 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

414 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

415 
__END_NAMESPACE_STD


418 #ifdef 
__USE_XOPEN2K8


421 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

422 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

423 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

427 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

428 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

429 
size_t
 
__nwc
, size_à
__Àn
,

430 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

435 #ifde‡
__USE_XOPEN


437 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

441 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

445 
__BEGIN_NAMESPACE_STD


448 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

449 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

450 
__END_NAMESPACE_STD


452 #ifde‡
__USE_ISOC99


453 
__BEGIN_NAMESPACE_C99


455 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

456 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

457 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
__END_NAMESPACE_C99


463 
__BEGIN_NAMESPACE_STD


466 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

467 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

471 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

473 
__THROW
;

474 
__END_NAMESPACE_STD


476 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

477 
__BEGIN_NAMESPACE_C99


480 
__exãnsi⁄__


481 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

482 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

483 
__THROW
;

487 
__exãnsi⁄__


488 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

489 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

490 
__ba£
Ë
__THROW
;

491 
__END_NAMESPACE_C99


494 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


497 
__exãnsi⁄__


498 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

499 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

500 
__THROW
;

504 
__exãnsi⁄__


505 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

506 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

507 
__ba£
Ë
__THROW
;

510 #ifde‡
__USE_GNU


524 
	~<xloˇÀ.h
>

528 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

529 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

530 
__loˇÀ_t
 
__loc
Ë
__THROW
;

532 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

533 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

534 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

536 
__exãnsi⁄__


537 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
)

545 
__THROW
;

547 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
;

551 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

552 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
;

555 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

556 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

557 
__loˇÀ_t
 
__loc
Ë
__THROW
;

562 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

563 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

567 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

568 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

569 
__THROW
;

575 #ifdef 
__USE_XOPEN2K8


578 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

581 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


582 
__BEGIN_NAMESPACE_STD


585 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

592 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

593 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

599 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

602 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

603 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
__THROW
 ;

610 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

611 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

612 
__gnuc_va_li°
 
__¨g
)

618 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

619 
__gnuc_va_li°
 
__¨g
)

623 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

624 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

625 
__gnuc_va_li°
 
__¨g
)

626 
__THROW
 ;

633 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

634 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

640 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

643 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

644 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
__THROW
 ;

647 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

648 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

649 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

650 #ifde‡
__REDIRECT


654 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

655 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

656 
__isoc99_fwsˇnf
)

658 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

659 
__isoc99_wsˇnf
)

661 
	`__REDIRECT_NTH
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

662 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

663 ...), 
__isoc99_swsˇnf
)

666 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

667 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

669 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

670 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

671 
__THROW
;

672 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

673 
	#wsˇnf
 
__isoc99_wsˇnf


	)

674 
	#swsˇnf
 
__isoc99_swsˇnf


	)

678 
__END_NAMESPACE_STD


681 #ifde‡
__USE_ISOC99


682 
__BEGIN_NAMESPACE_C99


687 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

688 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

689 
__gnuc_va_li°
 
__¨g
)

695 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

696 
__gnuc_va_li°
 
__¨g
)

699 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

700 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

702 
__THROW
 ;

704 #i‡!
deföed
 
__USE_GNU
 \

705 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

706 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

707 #ifde‡
__REDIRECT


708 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

709 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

710 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

712 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

713 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

715 
	`__REDIRECT_NTH
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

716 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

717 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

720 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

721 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
);

723 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

726 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

728 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

729 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

730 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

734 
__END_NAMESPACE_C99


738 
__BEGIN_NAMESPACE_STD


743 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

744 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

750 
wöt_t
 
	`gëwch¨
 ();

757 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

758 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

764 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

772 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

773 
__FILE
 *
__ª°ri˘
 
__°ªam
);

779 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

780 
__FILE
 *
__ª°ri˘
 
__°ªam
);

787 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

788 
__END_NAMESPACE_STD


791 #ifde‡
__USE_GNU


799 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

800 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

808 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

816 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

826 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

835 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

836 
__FILE
 *
__ª°ri˘
 
__°ªam
);

844 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

845 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
__BEGIN_NAMESPACE_C99


853 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

854 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

855 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

856 
__END_NAMESPACE_C99


858 #ifde‡
__USE_GNU


859 
	~<xloˇÀ.h
>

863 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

864 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

865 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

866 
__loˇÀ_t
 
__loc
Ë
__THROW
;

875 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


876 
	#__√ed_iswxxx


	)

877 
	~<w˘y≥.h
>

881 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


882 
	~<bôs/wch¨2.h
>

885 #ifde‡
__LDBL_COMPAT


886 
	~<bôs/wch¨-ldbl.h
>

889 
__END_DECLS


897 #unde‡
__√ed_mb°©e_t


898 #unde‡
__√ed_wöt_t


	@/usr/include/bits/wchar-ldbl.h

20 #i‚de‡
_WCHAR_H


24 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


25 
__BEGIN_NAMESPACE_C99


26 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

27 
__LDBL_REDIR_DECL
 (
w¥ötf
);

28 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

31 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

32 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

33 && !
deföed
 
	g__REDIRECT
 \

34 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

35 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

37 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

39 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

41 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

43 
__END_NAMESPACE_C99


46 #ifde‡
__USE_ISOC99


47 
__BEGIN_NAMESPACE_C99


48 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

49 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

50 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

51 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

53 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

55 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

57 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

59 
__END_NAMESPACE_C99


62 #ifde‡
__USE_GNU


63 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

66 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


67 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

68 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

69 #i‡
__USE_FORTIFY_LEVEL
 > 1

70 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

73 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

20 #i‚de‡
_WCHAR_H


25 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

26 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

27 
size_t
 
__ns1
Ë
__THROW
;

28 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

29 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

30 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

31 
wmem˝y
);

32 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

33 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

34 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

35 
size_t
 
__ns1
), 
__wmem˝y_chk
)

36 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

39 
__exã∫_Æways_ölöe
 
wch¨_t
 *

40 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

41 
size_t
 
__n
))

43 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

45 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

46  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

47 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

49 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

50  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

51 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

53  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

54 
	}
}

57 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

58 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

59 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

60 
__c⁄°
 
wch¨_t
 *
__s2
,

61 
size_t
 
__n
), 
wmemmove
);

62 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

63 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

64 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

65 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

68 
__exã∫_Æways_ölöe
 
wch¨_t
 *

69 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
))

71 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

73 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

74  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

75 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

77 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

78  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

79 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

81  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

82 
	}
}

85 #ifde‡
__USE_GNU


86 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

87 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

88 
size_t
 
__ns1
Ë
__THROW
;

89 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

90 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

91 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
,

92 
size_t
 
__n
), 
wmemp˝y
);

93 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

94 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

95 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

96 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

97 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

100 
__exã∫_Æways_ölöe
 
wch¨_t
 *

101 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

102 
size_t
 
__n
))

104 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

106 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

107  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

108 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

110 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

111  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

112 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

114  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

115 
	}
}

119 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

120 
size_t
 
__ns
Ë
__THROW
;

121 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

122 
size_t
 
__n
), 
wmem£t
);

123 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

124 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

125 
size_t
 
__ns
), 
__wmem£t_chk
)

126 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

129 
__exã∫_Æways_ölöe
 
wch¨_t
 *

130 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

132 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

134 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

135  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

137 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

138  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

139 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

141  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

142 
	}
}

145 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

146 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

147 
size_t
 
__n
Ë
__THROW
;

148 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

149 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

150 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

152 
__exã∫_Æways_ölöe
 
wch¨_t
 *

153 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

155 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

156  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

157  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

158 
	}
}

161 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

163 
size_t
 
__de°Àn
Ë
__THROW
;

164 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

165 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

166 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

168 
__exã∫_Æways_ölöe
 
wch¨_t
 *

169 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

171 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

172  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

173  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

174 
	}
}

177 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

178 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

179 
size_t
 
__de°Àn
Ë
__THROW
;

180 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

181 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

182 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

183 
size_t
 
__n
), 
wc¢˝y
);

184 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

185 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

186 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

187 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

188 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

191 
__exã∫_Æways_ölöe
 
wch¨_t
 *

192 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

193 
size_t
 
__n
))

195 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

197 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

198  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

199 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

200 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

201  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

202 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

204  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

205 
	}
}

208 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

209 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

210 
size_t
 
__de°Àn
Ë
__THROW
;

211 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

212 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

213 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

214 
size_t
 
__n
), 
w˝n˝y
);

215 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

216 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

217 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

218 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

219 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

222 
__exã∫_Æways_ölöe
 
wch¨_t
 *

223 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

224 
size_t
 
__n
))

226 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

228 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

229  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

230 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

231 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

232  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

233 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

235  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

236 
	}
}

239 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

240 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

241 
size_t
 
__de°Àn
Ë
__THROW
;

242 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

243 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

244 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

246 
__exã∫_Æways_ölöe
 
wch¨_t
 *

247 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

249 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

250  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

251  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

252 
	}
}

255 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

256 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

257 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

258 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

259 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

260 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

261 
size_t
 
__n
), 
wc¢ˇt
);

263 
__exã∫_Æways_ölöe
 
wch¨_t
 *

264 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

265 
size_t
 
__n
))

267 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

268  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

269 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

270  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

271 
	}
}

274 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

275 
__Êag
, 
size_t
 
__s_Àn
,

276 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

277 
__THROW
 ;

279 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

280 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

281 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

282 
sw¥ötf
);

284 #ifde‡
__va_¨g_∑ck


285 
__exã∫_Æways_ölöe
 

286 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

287 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

289 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

290  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

291 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

292 
__fmt
, 
	`__va_¨g_∑ck
 ());

293  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

294 
	}
}

295 #ñi‡!
deföed
 
__˝lu•lus


297 
	#sw¥ötf
(
s
, 
n
, ...) \

298 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

299 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

300 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

301 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

304 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

305 
__Êag
, 
size_t
 
__s_Àn
,

306 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

307 
__gnuc_va_li°
 
__¨g
)

308 
__THROW
 ;

310 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

311 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

312 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

313 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

315 
__exã∫_Æways_ölöe
 

316 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

317 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

319 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

320  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

321 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

322  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

323 
	}
}

326 #i‡
__USE_FORTIFY_LEVEL
 > 1

328 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

329 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

330 
__w¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

332 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

333 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

334 
__gnuc_va_li°
 
__≠
);

335 
__vw¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

336 
__gnuc_va_li°
 
__≠
);

338 #ifde‡
__va_¨g_∑ck


339 
__exã∫_Æways_ölöe
 

340 
	$w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

342  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

343 
	}
}

345 
__exã∫_Æways_ölöe
 

346 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

348  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

349 
	`__va_¨g_∑ck
 ());

350 
	}
}

351 #ñi‡!
deföed
 
__˝lu•lus


352 
	#w¥ötf
(...) \

353 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

354 
	#fw¥ötf
(
°ªam
, ...) \

355 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

358 
__exã∫_Æways_ölöe
 

359 
	$vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

361  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

362 
	}
}

364 
__exã∫_Æways_ölöe
 

365 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

366 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

368  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

369 
	}
}

373 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

374 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

375 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

376 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

377 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

378 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

379 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

380 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

381 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

384 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

385 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

387 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

389 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

390  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

391 
__n
, 
__°ªam
);

393 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

394  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

395 
__n
, 
__°ªam
);

397  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

398 
	}
}

400 #ifde‡
__USE_GNU


401 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

402 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

403 
__wur
;

404 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

405 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

406 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

407 
__wur
;

408 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

409 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

410 
__FILE
 *
__ª°ri˘
 
__°ªam
),

411 
__fgëws_u∆ocked_chk
)

412 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

415 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

416 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

418 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

420 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

421  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

422 
__n
, 
__°ªam
);

424 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

425  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

426 
__n
, 
__°ªam
);

428  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

429 
	}
}

433 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

434 
mb°©e_t
 *
__ª°ri˘
 
__p
,

435 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

436 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

437 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

438 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

440 
__exã∫_Æways_ölöe
 
__wur
 
size_t


441 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

442 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

447 
	#__WCHAR_MB_LEN_MAX
 16

	)

448 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


451 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

452  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

453  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

454 
	}
}

457 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

458 
__c⁄°
 **
__ª°ri˘
 
__§c
,

459 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

460 
size_t
 
__d°Àn
Ë
__THROW
;

461 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

462 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

463 
__c⁄°
 **
__ª°ri˘
 
__§c
,

464 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

465 
mb§towcs
);

466 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

467 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

468 
__c⁄°
 **
__ª°ri˘
 
__§c
,

469 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

470 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

471 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

474 
__exã∫_Æways_ölöe
 
size_t


475 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

476 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

478 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

480 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

481  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

482 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

484 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

485  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

486 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

488  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

489 
	}
}

492 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

493 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

494 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

495 
size_t
 
__d°Àn
Ë
__THROW
;

496 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

497 (*
__ª°ri˘
 
__d°
,

498 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

499 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

500 
wc§tombs
);

501 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

502 (*
__ª°ri˘
 
__d°
,

503 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

504 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

505 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

506 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

508 
__exã∫_Æways_ölöe
 
size_t


509 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

510 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

512 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

514 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

515  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

517 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

518  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

520  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

521 
	}
}

524 #ifde‡
__USE_GNU


525 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

526 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

527 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

528 
size_t
 
__d°Àn
Ë
__THROW
;

529 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

530 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

531 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

532 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

533 
mb¢πowcs
);

534 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

535 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

536 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

537 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

538 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

539 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

542 
__exã∫_Æways_ölöe
 
size_t


543 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

544 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

546 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

548 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

549  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

550 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

552 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

553  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

554 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

556  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

557 
	}
}

560 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

561 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

562 
size_t
 
__nwc
, size_à
__Àn
,

563 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

564 
__THROW
;

565 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

566 (*
__ª°ri˘
 
__d°
,

567 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

568 
size_t
 
__nwc
, size_à
__Àn
,

569 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

570 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

571 (*
__ª°ri˘
 
__d°
,

572 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

573 
size_t
 
__nwc
, size_à
__Àn
,

574 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

575 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

576 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

578 
__exã∫_Æways_ölöe
 
size_t


579 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

580 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

582 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

584 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

585  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

586 
	`__bos
 (
__d°
));

588 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

589  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

590 
	`__bos
 (
__d°
));

592  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

593 
	}
}

	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/gnu/option-groups.h

10 #i‚de‡
__GNU_OPTION_GROUPS_H


11 
	#__GNU_OPTION_GROUPS_H


	)

13 
	#__OPTION_EGLIBC_ADVANCED_INET6
 1

	)

14 
	#__OPTION_EGLIBC_BACKTRACE
 1

	)

15 
	#__OPTION_EGLIBC_BIG_MACROS
 1

	)

16 
	#__OPTION_EGLIBC_BSD
 1

	)

17 
	#__OPTION_EGLIBC_CATGETS
 1

	)

18 
	#__OPTION_EGLIBC_CHARSETS
 1

	)

19 
	#__OPTION_EGLIBC_CRYPT
 1

	)

20 
	#__OPTION_EGLIBC_CRYPT_UFC
 1

	)

21 
	#__OPTION_EGLIBC_CXX_TESTS
 1

	)

22 
	#__OPTION_EGLIBC_DB_ALIASES
 1

	)

23 
	#__OPTION_EGLIBC_ENVZ
 1

	)

24 
	#__OPTION_EGLIBC_FCVT
 1

	)

25 
	#__OPTION_EGLIBC_FMTMSG
 1

	)

26 
	#__OPTION_EGLIBC_FSTAB
 1

	)

27 
	#__OPTION_EGLIBC_FTRAVERSE
 1

	)

28 
	#__OPTION_EGLIBC_GETLOGIN
 1

	)

29 
	#__OPTION_EGLIBC_IDN
 1

	)

30 
	#__OPTION_EGLIBC_INET
 1

	)

31 
	#__OPTION_EGLIBC_INET_ANL
 1

	)

32 
	#__OPTION_EGLIBC_LIBM
 1

	)

33 
	#__OPTION_EGLIBC_LIBM_BIG
 1

	)

34 
	#__OPTION_EGLIBC_LOCALES
 1

	)

35 
	#__OPTION_EGLIBC_LOCALE_CODE
 1

	)

36 
	#__OPTION_EGLIBC_MEMUSAGE
 1

	)

37 
	#__OPTION_EGLIBC_NIS
 1

	)

38 
	#__OPTION_EGLIBC_NSSWITCH
 1

	)

39 
	#__OPTION_EGLIBC_RCMD
 1

	)

40 
	#__OPTION_EGLIBC_RTLD_DEBUG
 1

	)

41 
	#__OPTION_EGLIBC_SPAWN
 1

	)

42 
	#__OPTION_EGLIBC_STREAMS
 1

	)

43 
	#__OPTION_EGLIBC_SUNRPC
 1

	)

44 
	#__OPTION_EGLIBC_UTMP
 1

	)

45 
	#__OPTION_EGLIBC_UTMPX
 1

	)

46 
	#__OPTION_EGLIBC_WORDEXP
 1

	)

47 
	#__OPTION_POSIX_C_LANG_WIDE_CHAR
 1

	)

48 
	#__OPTION_POSIX_REGEXP
 1

	)

49 
	#__OPTION_POSIX_REGEXP_GLIBC
 1

	)

50 
	#__OPTION_POSIX_WIDE_CHAR_DEVICE_IO
 1

	)

	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	~<bôs/±hªadty≥s.h
>

29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/w‹dsize.h
>

36 
	mPTHREAD_CREATE_JOINABLE
,

37 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

38 
	mPTHREAD_CREATE_DETACHED


39 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

46 
	mPTHREAD_MUTEX_TIMED_NP
,

47 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

48 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

49 
	mPTHREAD_MUTEX_ADAPTIVE_NP


50 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


52 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

53 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

54 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

55 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


57 #ifde‡
__USE_GNU


59 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


64 #ifde‡
__USE_XOPEN2K


68 
	mPTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

70 
	mPTHREAD_MUTEX_ROBUST
,

71 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


76 #ifde‡
__USE_UNIX98


80 
	mPTHREAD_PRIO_NONE
,

81 
	mPTHREAD_PRIO_INHERIT
,

82 
	mPTHREAD_PRIO_PROTECT


88 #i‡
__WORDSIZE
 == 64

89 
	#PTHREAD_MUTEX_INITIALIZER
 \

90 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

91 #ifde‡
__USE_GNU


92 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

100 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 0 } } }

	)

102 #ifde‡
__USE_GNU


103 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

114 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 
	#PTHREAD_RWLOCK_INITIALIZER
 \

125 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

126 #ifde‡
__USE_GNU


127 #i‡
__WORDSIZE
 == 64

128 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

130 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

132 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


133 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

134 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

135 0, 0, 0, 0 } }

	)

137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

139 0 } }

	)

149 
	mPTHREAD_INHERIT_SCHED
,

150 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

151 
	mPTHREAD_EXPLICIT_SCHED


152 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

159 
	mPTHREAD_SCOPE_SYSTEM
,

160 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

161 
	mPTHREAD_SCOPE_PROCESS


162 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

169 
	mPTHREAD_PROCESS_PRIVATE
,

170 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

171 
	mPTHREAD_PROCESS_SHARED


172 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

178 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

182 
	s_±hªad_˛ónup_buf„r


184 (*
	m__routöe
) (*);

185 *
	m__¨g
;

186 
	m__ˇn˚…y≥
;

187 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

193 
	mPTHREAD_CANCEL_ENABLE
,

194 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

195 
	mPTHREAD_CANCEL_DISABLE


196 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

200 
	mPTHREAD_CANCEL_DEFERRED
,

201 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

202 
	mPTHREAD_CANCEL_ASYNCHRONOUS


203 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

205 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

209 
	#PTHREAD_ONCE_INIT
 0

	)

212 #ifde‡
__USE_XOPEN2K


216 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

220 
__BEGIN_DECLS


225 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

226 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

227 *(*
__°¨t_routöe
) (*),

228 *
__ª°ri˘
 
__¨g
Ë
__THROW
 
__n⁄nuŒ
 ((1, 3));

234 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

242 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

244 #ifde‡
__USE_GNU


247 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

255 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

256 
__c⁄°
 
time•ec
 *
__ab°ime
);

263 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

267 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

270 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

278 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

281 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1));

285 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

286 *
__dëach°©e
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

290 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

291 
__dëach°©e
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

297 
size_t
 *
__gu¨dsize
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

301 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

302 
size_t
 
__gu¨dsize
)

303 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


308 
__©å
,

309 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

310 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

313 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

314 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


315 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


319 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

323 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


328 
__©å
, *
__ª°ri˘
 
__öhîô
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

333 
__öhîô
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

339 *
__ª°ri˘
 
__sc›e
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

343 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

344 
__THROW
 
	`__n⁄nuŒ
 ((1));

347 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


348 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

349 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

355 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

356 *
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

360 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


361 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

367 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

368 
size_t
 
__°acksize
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1));

371 #ifde‡
__USE_XOPEN2K


373 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

374 **
__ª°ri˘
 
__°ackaddr
,

375 
size_t
 *
__ª°ri˘
 
__°acksize
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

381 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

382 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

385 #ifde‡
__USE_GNU


388 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

389 
size_t
 
__˝u£tsize
,

390 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

395 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

396 
size_t
 
__˝u£tsize
,

397 
˝u_£t_t
 *
__˝u£t
)

398 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

404 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

405 
__THROW
 
	`__n⁄nuŒ
 ((2));

413 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

414 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

415 
__THROW
 
	`__n⁄nuŒ
 ((3));

418 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

419 *
__ª°ri˘
 
__pﬁicy
,

420 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

424 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

425 
__THROW
;

428 #ifde‡
__USE_GNU


430 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

431 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

435 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, 
__c⁄°
 *
__«me
)

436 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 #ifde‡
__USE_UNIX98


442 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

445 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

448 #ifde‡
__USE_GNU


453 
	$±hªad_yõld
 (Ë
__THROW
;

458 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

459 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

460 
__THROW
 
	`__n⁄nuŒ
 ((3));

463 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

464 
˝u_£t_t
 *
__˝u£t
)

465 
__THROW
 
	`__n⁄nuŒ
 ((3));

478 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

479 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

490 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

494 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

497 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

502 
	`±hªad_ã°ˇn˚l
 ();

511 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

512 
__mask_was_ßved
;

513 } 
__ˇn˚l_jmp_buf
[1];

514 *
__∑d
[4];

515 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

518 #i‚de‡
__˛ónup_f˘_©åibuã


519 
	#__˛ónup_f˘_©åibuã


	)

524 
	s__±hªad_˛ónup_‰ame


526 (*
__ˇn˚l_routöe
) (*);

527 *
__ˇn˚l_¨g
;

528 
__do_ô
;

529 
__ˇn˚l_ty≥
;

532 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


533 #ifde‡
__˝lu•lus


535 ˛as†
	c__±hªad_˛ónup_˛ass


537 (*
__ˇn˚l_routöe
) (*);

538 *
__ˇn˚l_¨g
;

539 
__do_ô
;

540 
__ˇn˚l_ty≥
;

542 
public
:

543 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

544 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

545 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

546 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

547 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

548 &
__ˇn˚l_ty≥
); 
	}
}

549 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

559 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

561 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

565 
	#±hªad_˛ónup_p›
(
execuã
) \

566 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

567 } 0)

	)

569 #ifde‡
__USE_GNU


573 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

575 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

576 
__˛‰ame
.
	`__de„r
 ()

	)

581 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

582 
__˛‰ame
.
	`__ª°‹e
 (); \

583 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

584 } 0)

	)

591 
__exã∫_ölöe
 

592 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

594 i‡(
__‰ame
->
__do_ô
)

595 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

596 
	}
}

605 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

607 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

608 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

609 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

610 .
__do_ô
 = 1 };

	)

614 
	#±hªad_˛ónup_p›
(
execuã
) \

615 
__˛‰ame
.
__do_ô
 = (
execuã
); \

616 } 0)

	)

618 #ifde‡
__USE_GNU


622 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

624 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

625 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

626 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

627 .
__do_ô
 = 1 }; \

628 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

629 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

634 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

635 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

636 
__˛‰ame
.
__do_ô
 = (
execuã
); \

637 } 0)

	)

648 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

650 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

651 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

652 *
__ˇn˚l_¨g
 = (
¨g
); \

653 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

654 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

655 i‡(
	`__buûtö_ex≥˘
 (
__nŸ_fú°_ˇŒ
, 0)) \

657 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

658 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

662 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

663 dÿ{

	)

664 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

665 
__˛ónup_f˘_©åibuã
;

669 
	#±hªad_˛ónup_p›
(
execuã
) \

672 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

673 i‡(
execuã
) \

674 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

675 } 0)

	)

676 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

677 
__˛ónup_f˘_©åibuã
;

679 #ifde‡
__USE_GNU


683 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

685 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

686 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

687 *
__ˇn˚l_¨g
 = (
¨g
); \

688 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

689 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

690 i‡(
	`__buûtö_ex≥˘
 (
__nŸ_fú°_ˇŒ
, 0)) \

692 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

693 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

697 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

698 dÿ{

	)

699 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

700 
__˛ónup_f˘_©åibuã
;

705 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

708 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

709 i‡(
execuã
) \

710 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

711 
	}
} 0)

	)

712 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

713 
__˛ónup_f˘_©åibuã
;

717 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

718 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

719 #i‚de‡
SHARED


720 
	`__©åibuã__
 ((
__wók__
))

726 
__jmp_buf_èg
;

727 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

733 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

734 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

735 
__THROW
 
	`__n⁄nuŒ
 ((1));

738 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

739 
__THROW
 
	`__n⁄nuŒ
 ((1));

742 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

743 
__THROW
 
	`__n⁄nuŒ
 ((1));

746 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

747 
__THROW
 
	`__n⁄nuŒ
 ((1));

749 #ifde‡
__USE_XOPEN2K


751 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

752 
__c⁄°
 
time•ec
 *
__ª°ri˘


753 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

757 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

758 
__THROW
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

763 
__ª°ri˘
 
__muãx
,

764 *
__ª°ri˘
 
__¥io˚ûög
)

765 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

769 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

770 
__¥io˚ûög
,

771 *
__ª°ri˘
 
__ﬁd_˚ûög
)

772 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

775 #ifde‡
__USE_XOPEN2K8


777 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

778 
__THROW
 
	`__n⁄nuŒ
 ((1));

779 #ifde‡
__USE_GNU


780 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1));

794 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

795 
__THROW
 
	`__n⁄nuŒ
 ((1));

798 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

799 
__ª°ri˘
 
__©å
,

800 *
__ª°ri˘
 
__psh¨ed
)

801 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

804 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

805 
__psh¨ed
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1));

808 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


810 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


811 
__©å
, *
__ª°ri˘
 
__köd
)

812 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

817 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

822 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

823 
__ª°ri˘
 
__©å
,

824 *
__ª°ri˘
 
__¥Ÿocﬁ
)

825 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

829 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

830 
__¥Ÿocﬁ
)

831 
__THROW
 
	`__n⁄nuŒ
 ((1));

834 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

835 
__ª°ri˘
 
__©å
,

836 *
__ª°ri˘
 
__¥io˚ûög
)

837 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

840 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

841 
__¥io˚ûög
)

842 
__THROW
 
	`__n⁄nuŒ
 ((1));

844 #ifde‡
__USE_XOPEN2K


846 
	$±hªad_muãx©å_gërobu°
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

847 *
__robu°√ss
)

848 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

849 #ifde‡
__USE_GNU


850 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

851 *
__robu°√ss
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__robu°√ss
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

859 #ifde‡
__USE_GNU


860 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

861 
__robu°√ss
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1));

867 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


872 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

873 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


874 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

877 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

881 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

882 
__THROW
 
	`__n⁄nuŒ
 ((1));

885 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

886 
__THROW
 
	`__n⁄nuŒ
 ((1));

888 #ifde‡
__USE_XOPEN2K


890 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

891 
__c⁄°
 
time•ec
 *
__ª°ri˘


892 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

896 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

897 
__THROW
 
	`__n⁄nuŒ
 ((1));

900 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1));

903 #ifde‡
__USE_XOPEN2K


905 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

906 
__c⁄°
 
time•ec
 *
__ª°ri˘


907 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

911 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

912 
__THROW
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

922 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1));

926 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

927 
__ª°ri˘
 
__©å
,

928 *
__ª°ri˘
 
__psh¨ed
)

929 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

932 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

933 
__psh¨ed
)

934 
__THROW
 
	`__n⁄nuŒ
 ((1));

937 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

938 
__ª°ri˘
 
__©å
,

939 *
__ª°ri˘
 
__¥ef
)

940 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

943 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

944 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

952 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

953 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


954 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

957 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1));

961 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

962 
__THROW
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

966 
__THROW
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

974 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

975 
	`__n⁄nuŒ
 ((1, 2));

984 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

985 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

986 
__c⁄°
 
time•ec
 *
__ª°ri˘


987 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

992 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

993 
__THROW
 
	`__n⁄nuŒ
 ((1));

996 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1001 
__ª°ri˘
 
__©å
,

1002 *
__ª°ri˘
 
__psh¨ed
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1006 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1007 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1009 #ifde‡
__USE_XOPEN2K


1011 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1012 
__ª°ri˘
 
__©å
,

1013 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1017 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1018 
__˛ockid_t
 
__˛ock_id
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 #ifde‡
__USE_XOPEN2K


1028 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1037 
__THROW
 
	`__n⁄nuŒ
 ((1));

1040 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1041 
__THROW
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1045 
__THROW
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1053 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1054 
__©å
, 
__cou¡
)

1055 
__THROW
 
	`__n⁄nuŒ
 ((1));

1058 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1059 
__THROW
 
	`__n⁄nuŒ
 ((1));

1062 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1063 
__THROW
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1068 
__THROW
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1072 
__THROW
 
	`__n⁄nuŒ
 ((1));

1075 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1076 
__ª°ri˘
 
__©å
,

1077 *
__ª°ri˘
 
__psh¨ed
)

1078 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1081 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1082 
__psh¨ed
)

1083 
__THROW
 
	`__n⁄nuŒ
 ((1));

1095 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1096 (*
__de°r_fun˘i⁄
) (*))

1097 
__THROW
 
	`__n⁄nuŒ
 ((1));

1100 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1103 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1106 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1107 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1110 #ifde‡
__USE_XOPEN2K


1112 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1113 
__˛ockid_t
 *
__˛ock_id
)

1114 
__THROW
 
	`__n⁄nuŒ
 ((2));

1129 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1130 (*
__∑ª¡
) (),

1131 (*
__chûd
Ë()Ë
__THROW
;

1134 #ifde‡
__USE_EXTERN_INLINES


1136 
__exã∫_ölöe
 

1137 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1139  
__thªad1
 =
__thªad2
;

1140 
	}
}

1143 
	g__END_DECLS


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@/usr/include/bits/errno.h

20 #ifde‡
_ERRNO_H


22 #unde‡
EDOM


23 #unde‡
EILSEQ


24 #unde‡
ERANGE


25 
	~<löux/î∫o.h
>

28 
	#ENOTSUP
 
EOPNOTSUPP


	)

31 #i‚de‡
ECANCELED


32 
	#ECANCELED
 125

	)

36 #i‚de‡
EOWNERDEAD


37 
	#EOWNERDEAD
 130

	)

38 
	#ENOTRECOVERABLE
 131

	)

41 #i‚de‡
ERFKILL


42 
	#ERFKILL
 132

	)

45 #i‚de‡
__ASSEMBLER__


47 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

49 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


51 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

56 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


60 
	#EDOM
 33

	)

61 
	#EILSEQ
 84

	)

62 
	#ERANGE
 34

	)

	@/usr/include/bits/setjmp.h

20 #i‚de‡
_BITS_SETJMP_H


21 
	#_BITS_SETJMP_H
 1

	)

23 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/w‹dsize.h
>

29 #i‚de‡
_ASM


31 #i‡
__WORDSIZE
 == 64

32 
	t__jmp_buf
[8];

34 
	t__jmp_buf
[6];

	@/usr/include/sched.h

21 #i‚def 
_SCHED_H


22 
	#_SCHED_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

32 
	#__√ed_time_t


	)

33 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/bits/sched.h

22 #i‚de‡
__√ed_sched∑øm


24 #i‚de‡
_SCHED_H


30 
	#SCHED_OTHER
 0

	)

31 
	#SCHED_FIFO
 1

	)

32 
	#SCHED_RR
 2

	)

33 #ifde‡
__USE_GNU


34 
	#SCHED_BATCH
 3

	)

35 
	#SCHED_IDLE
 5

	)

37 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

40 #ifde‡
__USE_MISC


42 
	#CSIGNAL
 0x000000f‡

	)

43 
	#CLONE_VM
 0x00000100

	)

44 
	#CLONE_FS
 0x00000200

	)

45 
	#CLONE_FILES
 0x00000400

	)

46 
	#CLONE_SIGHAND
 0x00000800

	)

47 
	#CLONE_PTRACE
 0x00002000

	)

48 
	#CLONE_VFORK
 0x00004000

	)

50 
	#CLONE_PARENT
 0x00008000

	)

52 
	#CLONE_THREAD
 0x00010000

	)

53 
	#CLONE_NEWNS
 0x00020000

	)

54 
	#CLONE_SYSVSEM
 0x00040000

	)

55 
	#CLONE_SETTLS
 0x00080000

	)

56 
	#CLONE_PARENT_SETTID
 0x00100000

	)

58 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

60 
	#CLONE_DETACHED
 0x00400000

	)

61 
	#CLONE_UNTRACED
 0x00800000

	)

63 
	#CLONE_CHILD_SETTID
 0x01000000

	)

65 
	#CLONE_NEWUTS
 0x04000000

	)

66 
	#CLONE_NEWIPC
 0x08000000

	)

67 
	#CLONE_NEWUSER
 0x10000000

	)

68 
	#CLONE_NEWPID
 0x20000000

	)

69 
	#CLONE_NEWNET
 0x40000000

	)

70 
	#CLONE_IO
 0x80000000

	)

74 
	ssched_∑øm


76 
	m__sched_¥i‹ôy
;

79 
	g__BEGIN_DECLS


81 #ifde‡
__USE_MISC


83 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

84 
__Êags
, *
__¨g
, ...Ë
__THROW
;

87 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

90 
	$sched_gë˝u
 (Ë
__THROW
;

93 
__END_DECLS


97 #i‡!
deföed
 
__deföed_sched∑øm
 \

98 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

99 
	#__deföed_sched∑øm
 1

	)

101 
	s__sched_∑øm


103 
__sched_¥i‹ôy
;

105 #unde‡
__√ed_sched∑øm


109 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


110 
	#__˝u_£t_t_deföed


	)

112 
	#__CPU_SETSIZE
 1024

	)

113 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

116 
	t__˝u_mask
;

119 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

120 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

125 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

126 } 
	t˝u_£t_t
;

129 #i‡
	`__GNUC_PREREQ
 (2, 91)

130 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

131 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

133 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

135 
size_t
 
__i
; \

136 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

137 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

138 
__i
 = 0; __ò< 
__imax
; ++__i) \

139 
__bôs
[
__i
] = 0; \

140 
	}
} 0)

	)

142 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

143 (
__exãnsi⁄__
 \

144 ({ 
size_t
 
__˝u
 = (
˝u
); \

145 
__˝u
 < 8 * (
£tsize
) \

146 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

147 |
	`__CPUMASK
 (
__˝u
)) \

148 : 0; }))

	)

149 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

150 (
__exãnsi⁄__
 \

151 ({ 
size_t
 
__˝u
 = (
˝u
); \

152 
__˝u
 < 8 * (
£tsize
) \

153 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

154 &~
	`__CPUMASK
 (
__˝u
)) \

155 : 0; }))

	)

156 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

157 (
__exãnsi⁄__
 \

158 ({ 
size_t
 
__˝u
 = (
˝u
); \

159 
__˝u
 < 8 * (
£tsize
) \

160 ? ((((
__c⁄°
 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

161 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

162 : 0; }))

	)

164 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

165 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

167 #i‡
__GNUC_PREREQ
 (2, 91)

168 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

169 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

171 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

172 (
__exãnsi⁄__
 \

173 ({ 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

174 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

175 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

176 
size_t
 
__i
; \

177 
__i
 = 0; __ò< 
__imax
; ++__i) \

178 i‡(
__bôs
[
__i
] != __bits[__i]) \

180 
__i
 =
__imax
; }))

	)

183 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

184 (
__exãnsi⁄__
 \

185 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

186 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

187 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

188 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

189 
size_t
 
__i
; \

190 
__i
 = 0; __ò< 
__imax
; ++__i) \

191 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

192 
__de°
; }))

	)

194 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

195 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

196 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

197 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

199 
__BEGIN_DECLS


201 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

202 
__THROW
;

203 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

204 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

206 
__END_DECLS


	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@
1
.
1
/usr/include
176
3798
arch/cc.h
core/def.c
core/dhcp.c
core/dns.c
core/init.c
core/ipv4/autoip.c
core/ipv4/icmp.c
core/ipv4/igmp.c
core/ipv4/inet.c
core/ipv4/inet_chksum.c
core/ipv4/ip.c
core/ipv4/ip_addr.c
core/ipv4/ip_frag.c
core/ipv6/icmp6.c
core/ipv6/inet6.c
core/ipv6/ip6.c
core/ipv6/ip6_addr.c
core/mem.c
core/memp.c
core/netif.c
core/pbuf.c
core/raw.c
core/snmp/asn1_dec.c
core/snmp/asn1_enc.c
core/snmp/mib2.c
core/snmp/mib_structs.c
core/snmp/msg_in.c
core/snmp/msg_out.c
core/stats.c
core/sys.c
core/tcp.c
core/tcp_in.c
core/tcp_out.c
core/timers.c
core/udp.c
include/ipv4/lwip/autoip.h
include/ipv4/lwip/icmp.h
include/ipv4/lwip/igmp.h
include/ipv4/lwip/inet.h
include/ipv4/lwip/inet_chksum.h
include/ipv4/lwip/ip.h
include/ipv4/lwip/ip_addr.h
include/ipv4/lwip/ip_frag.h
include/ipv6/lwip/icmp.h
include/ipv6/lwip/inet.h
include/ipv6/lwip/ip.h
include/ipv6/lwip/ip_addr.h
include/lwip/api.h
include/lwip/api_msg.h
include/lwip/arch.h
include/lwip/debug.h
include/lwip/def.h
include/lwip/dhcp.h
include/lwip/dns.h
include/lwip/err.h
include/lwip/init.h
include/lwip/mem.h
include/lwip/memp.h
include/lwip/memp_std.h
include/lwip/netbuf.h
include/lwip/netdb.h
include/lwip/netif.h
include/lwip/netifapi.h
include/lwip/opt.h
include/lwip/pbuf.h
include/lwip/raw.h
include/lwip/sio.h
include/lwip/snmp.h
include/lwip/snmp_asn1.h
include/lwip/snmp_msg.h
include/lwip/snmp_structs.h
include/lwip/sockets.h
include/lwip/stats.h
include/lwip/sys.h
include/lwip/tcp.h
include/lwip/tcp_impl.h
include/lwip/tcpip.h
include/lwip/timers.h
include/lwip/udp.h
include/netif/etharp.h
include/netif/ethernetif.h
include/netif/ppp_oe.h
include/netif/slipif.h
lwipopts.h
netif/etharp.c
netif/ethernetif.c
netif/ppp/auth.c
netif/ppp/auth.h
netif/ppp/chap.c
netif/ppp/chap.h
netif/ppp/chpms.c
netif/ppp/chpms.h
netif/ppp/fsm.c
netif/ppp/fsm.h
netif/ppp/ipcp.c
netif/ppp/ipcp.h
netif/ppp/lcp.c
netif/ppp/lcp.h
netif/ppp/magic.c
netif/ppp/magic.h
netif/ppp/md5.c
netif/ppp/md5.h
netif/ppp/pap.c
netif/ppp/pap.h
netif/ppp/ppp.c
netif/ppp/ppp.h
netif/ppp/ppp_oe.c
netif/ppp/pppdebug.h
netif/ppp/randm.c
netif/ppp/randm.h
netif/ppp/vj.c
netif/ppp/vj.h
netif/slipif.c
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/time.h
/usr/include/alloca.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/sys/select.h
/usr/include/sys/types.h
/usr/include/time.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/predefs.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/select.h
/usr/include/bits/sigset.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/typesizes.h
/usr/include/ctype.h
/usr/include/endian.h
/usr/include/gnu/stubs.h
/usr/include/sys/cdefs.h
/usr/include/sys/sysmacros.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/libc-lock.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/wchar.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/errno.h
/usr/include/gnu/option-groups.h
/usr/include/pthread.h
/usr/include/wctype.h
/usr/include/bits/errno.h
/usr/include/bits/setjmp.h
/usr/include/sched.h
/usr/include/bits/sched.h
/usr/include/linux/errno.h
/usr/include/asm/errno.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/errno-base.h
