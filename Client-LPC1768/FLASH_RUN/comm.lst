   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"comm.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.NVIC_EnableIRQ,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	NVIC_EnableIRQ:
  25              	.LFB14:
  26              		.file 1 "./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h"
   1:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**************************************************************************//**
   2:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @file     core_cm3.h
   3:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @version  V1.30
   5:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @date     30. October 2009
   6:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
   7:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @note
   8:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
  10:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @par
  11:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * within development tools that are supporting such ARM based processors.
  14:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
  15:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @par
  16:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
  22:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  ******************************************************************************/
  23:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  24:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #ifndef __CM3_CORE_H__
  25:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __CM3_CORE_H__
  26:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  27:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_LintCinfiguration CMSIS CM3 Core Lint Configuration
  28:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
  29:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * List of Lint messages which will be suppressed and not shown:
  30:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *   - Error 10: \n
  31:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     register uint32_t __regBasePri         __asm("basepri"); \n
  32:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     Error 10: Expecting ';'
  33:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * .
  34:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *   - Error 530: \n
  35:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     return(__regBasePri); \n
  36:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     Warning 530: Symbol '__regBasePri' (line 264) not initialized
  37:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * .
  38:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *   - Error 550: \n
  39:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     __regBasePri = (basePri & 0x1ff); \n
  40:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     Warning 550: Symbol '__regBasePri' (line 271) not accessed
  41:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * .
  42:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *   - Error 754: \n
  43:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     uint32_t RESERVED0[24]; \n
  44:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     Info 754: local structure member '<some, not used in the HAL>' (line 109, file ./cm3_core.h)
  45:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * .
  46:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *   - Error 750: \n
  47:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     #define __CM3_CORE_H__ \n
  48:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     Info 750: local macro '__CM3_CORE_H__' (line 43, file./cm3_core.h) not referenced
  49:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * .
  50:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *   - Error 528: \n
  51:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     static __INLINE void NVIC_DisableIRQ(uint32_t IRQn) \n
  52:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     Warning 528: Symbol 'NVIC_DisableIRQ(unsigned int)' (line 419, file ./cm3_core.h) not refere
  53:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * .
  54:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *   - Error 751: \n
  55:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     } InterruptType_Type; \n
  56:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     Info 751: local typedef 'InterruptType_Type' (line 170, file ./cm3_core.h) not referenced
  57:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * .
  58:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  59:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
  60:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
  61:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  62:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*lint -save */
  63:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*lint -e10  */
  64:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*lint -e530 */
  65:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*lint -e550 */
  66:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*lint -e754 */
  67:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*lint -e750 */
  68:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*lint -e528 */
  69:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*lint -e751 */
  70:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  71:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  72:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_definitions CM3 Core Definitions
  73:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   This file defines all structures and symbols for CMSIS core:
  74:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****     - CMSIS version number
  75:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****     - Cortex-M core registers and bitfields
  76:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****     - Cortex-M core peripheral base address
  77:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   @{
  78:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
  79:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  80:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #ifdef __cplusplus
  81:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  extern "C" {
  82:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #endif
  83:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  84:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  85:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  86:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!<
  87:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  88:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __CORTEX_M                (0x03)                                                       /*!<
  89:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  90:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #include <stdint.h>                           /* Include standard types */
  91:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  92:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #if defined (__ICCARM__)
  93:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  94:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #endif
  95:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  96:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  97:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #ifndef __NVIC_PRIO_BITS
  98:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define __NVIC_PRIO_BITS    4               /*!< standard definition for NVIC Priority Bits */
  99:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #endif
 100:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 101:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 102:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 103:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 104:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 105:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * IO definitions
 106:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 107:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * define access restrictions to peripheral registers
 108:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 109:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 110:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #ifdef __cplusplus
 111:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
 112:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #else
 113:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
 114:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #endif
 115:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
 116:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
 117:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 118:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 119:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 120:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*******************************************************************************
 121:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *                 Register Abstraction
 122:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  ******************************************************************************/
 123:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_register CMSIS CM3 Core Register
 124:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  @{
 125:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** */
 126:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 127:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 128:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_NVIC CMSIS CM3 NVIC
 129:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
 130:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   @{
 131:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 132:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** typedef struct
 133:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 134:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t ISER[8];                      /*!< Offset: 0x000  Interrupt Set Enable Register    
 135:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED0[24];
 136:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t ICER[8];                      /*!< Offset: 0x080  Interrupt Clear Enable Register  
 137:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RSERVED1[24];
 138:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t ISPR[8];                      /*!< Offset: 0x100  Interrupt Set Pending Register   
 139:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED2[24];
 140:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t ICPR[8];                      /*!< Offset: 0x180  Interrupt Clear Pending Register 
 141:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED3[24];
 142:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t IABR[8];                      /*!< Offset: 0x200  Interrupt Active bit Register    
 143:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED4[56];
 144:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint8_t  IP[240];                      /*!< Offset: 0x300  Interrupt Priority Register (8Bit
 145:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED5[644];
 146:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __O  uint32_t STIR;                         /*!< Offset: 0xE00  Software Trigger Interrupt Regist
 147:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }  NVIC_Type;
 148:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_NVIC */
 149:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 150:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 151:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_SCB CMSIS CM3 SCB
 152:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   memory mapped structure for System Control Block (SCB)
 153:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   @{
 154:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 155:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** typedef struct
 156:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 157:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 158:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 159:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t VTOR;                         /*!< Offset: 0x08  Vector Table Offset Register      
 160:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 161:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 162:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 163:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint8_t  SHP[12];                      /*!< Offset: 0x18  System Handlers Priority Registers
 164:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 165:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t CFSR;                         /*!< Offset: 0x28  Configurable Fault Status Register
 166:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t HFSR;                         /*!< Offset: 0x2C  Hard Fault Status Register        
 167:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 168:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t MMFAR;                        /*!< Offset: 0x34  Mem Manage Address Register       
 169:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t BFAR;                         /*!< Offset: 0x38  Bus Fault Address Register        
 170:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t AFSR;                         /*!< Offset: 0x3C  Auxiliary Fault Status Register   
 171:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PFR[2];                       /*!< Offset: 0x40  Processor Feature Register        
 172:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t DFR;                          /*!< Offset: 0x48  Debug Feature Register            
 173:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t ADR;                          /*!< Offset: 0x4C  Auxiliary Feature Register        
 174:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t MMFR[4];                      /*!< Offset: 0x50  Memory Model Feature Register     
 175:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t ISAR[5];                      /*!< Offset: 0x60  ISA Feature Register              
 176:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** } SCB_Type;
 177:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 178:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SCB CPUID Register Definitions */
 179:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 180:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 181:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 182:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 183:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 184:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 185:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 186:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 187:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 188:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 189:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 190:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 191:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 192:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 193:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 194:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 195:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 196:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 197:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 198:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 199:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 200:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 201:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 202:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 203:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 204:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 205:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 206:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 207:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 208:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 209:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 210:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 211:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 212:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 213:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 214:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 215:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 216:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 217:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1ul << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 218:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 219:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 220:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 221:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 222:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 223:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 224:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (0x1FFul << SCB_VTOR_TBLBASE_Pos)              /*!< SCB 
 225:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 226:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 227:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFul << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 228:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 229:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 230:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 231:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 232:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 233:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 234:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 235:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 236:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 237:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 238:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 239:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 240:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7ul << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 241:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 242:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 243:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 244:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 245:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 246:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 247:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 248:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 249:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1ul << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 250:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 251:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SCB System Control Register Definitions */
 252:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 253:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 254:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 255:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 256:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 257:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 258:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 259:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 260:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 261:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 262:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 263:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 264:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 265:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 266:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1ul << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 267:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 268:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 269:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1ul << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 270:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 271:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 272:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 273:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 274:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 275:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1ul << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 276:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 277:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 278:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1ul << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 279:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 280:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 281:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 282:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1ul << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 283:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 284:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 285:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1ul << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 286:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 287:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 288:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1ul << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 289:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 290:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 291:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 292:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 293:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 294:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1ul << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 295:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 296:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 297:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1ul << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 298:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 299:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 300:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1ul << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 301:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 302:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 303:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1ul << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 304:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 305:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 306:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1ul << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 307:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 308:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 309:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1ul << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 310:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 311:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 312:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1ul << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 313:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 314:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 315:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1ul << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 316:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 317:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 318:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1ul << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 319:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 320:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 321:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1ul << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 322:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 323:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 324:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 325:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFul << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 326:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 327:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 328:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFul << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 329:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 330:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 331:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFul << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 332:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 333:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 334:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 335:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1ul << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 336:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 337:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 338:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1ul << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 339:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 340:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 341:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1ul << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 342:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 343:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 344:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 345:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 346:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 347:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 348:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 349:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 350:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 351:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 352:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 353:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 354:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 355:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 356:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 357:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 358:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_SCB */
 359:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 360:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 361:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_SysTick CMSIS CM3 SysTick
 362:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   memory mapped structure for SysTick
 363:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   @{
 364:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 365:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** typedef struct
 366:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 367:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 368:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 369:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 370:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 371:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** } SysTick_Type;
 372:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 373:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 374:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 375:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 376:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 377:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 378:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 379:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 380:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 381:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 382:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 383:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 384:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 385:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 386:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SysTick Reload Register Definitions */
 387:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 388:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 389:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 390:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SysTick Current Register Definitions */
 391:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 392:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 393:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 394:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SysTick Calibration Register Definitions */
 395:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 396:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 397:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 398:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 399:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 400:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 401:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 402:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 403:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_SysTick */
 404:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 405:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 406:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_ITM CMSIS CM3 ITM
 407:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   memory mapped structure for Instrumentation Trace Macrocell (ITM)
 408:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   @{
 409:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 410:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** typedef struct
 411:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 412:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __O  union
 413:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   {
 414:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****     __O  uint8_t    u8;                       /*!< Offset:       ITM Stimulus Port 8-bit           
 415:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****     __O  uint16_t   u16;                      /*!< Offset:       ITM Stimulus Port 16-bit          
 416:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****     __O  uint32_t   u32;                      /*!< Offset:       ITM Stimulus Port 32-bit          
 417:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   }  PORT [32];                               /*!< Offset: 0x00  ITM Stimulus Port Registers       
 418:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED0[864];
 419:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t TER;                          /*!< Offset:       ITM Trace Enable Register         
 420:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED1[15];
 421:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t TPR;                          /*!< Offset:       ITM Trace Privilege Register      
 422:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED2[15];
 423:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t TCR;                          /*!< Offset:       ITM Trace Control Register        
 424:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED3[29];
 425:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t IWR;                          /*!< Offset:       ITM Integration Write Register    
 426:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t IRR;                          /*!< Offset:       ITM Integration Read Register     
 427:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t IMCR;                         /*!< Offset:       ITM Integration Mode Control Regis
 428:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED4[43];
 429:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t LAR;                          /*!< Offset:       ITM Lock Access Register          
 430:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t LSR;                          /*!< Offset:       ITM Lock Status Register          
 431:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED5[6];
 432:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PID4;                         /*!< Offset:       ITM Peripheral Identification Regi
 433:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PID5;                         /*!< Offset:       ITM Peripheral Identification Regi
 434:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PID6;                         /*!< Offset:       ITM Peripheral Identification Regi
 435:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PID7;                         /*!< Offset:       ITM Peripheral Identification Regi
 436:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PID0;                         /*!< Offset:       ITM Peripheral Identification Regi
 437:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PID1;                         /*!< Offset:       ITM Peripheral Identification Regi
 438:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PID2;                         /*!< Offset:       ITM Peripheral Identification Regi
 439:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PID3;                         /*!< Offset:       ITM Peripheral Identification Regi
 440:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t CID0;                         /*!< Offset:       ITM Component  Identification Regi
 441:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t CID1;                         /*!< Offset:       ITM Component  Identification Regi
 442:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t CID2;                         /*!< Offset:       ITM Component  Identification Regi
 443:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t CID3;                         /*!< Offset:       ITM Component  Identification Regi
 444:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** } ITM_Type;
 445:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 446:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 447:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 448:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFul << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 449:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 450:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* ITM Trace Control Register Definitions */
 451:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 452:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1ul << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 453:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 454:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_ATBID_Pos                  16                                             /*!< ITM 
 455:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_ATBID_Msk                  (0x7Ful << ITM_TCR_ATBID_Pos)                  /*!< ITM 
 456:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 457:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 458:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3ul << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 459:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 460:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 461:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1ul << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 462:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 463:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 464:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1ul << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 465:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 466:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 467:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1ul << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 468:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 469:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 470:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1ul << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 471:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 472:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 473:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1ul << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 474:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 475:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* ITM Integration Write Register Definitions */
 476:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 477:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1ul << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 478:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 479:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* ITM Integration Read Register Definitions */
 480:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 481:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1ul << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 482:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 483:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 484:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 485:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1ul << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 486:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 487:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* ITM Lock Status Register Definitions */
 488:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 489:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1ul << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 490:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 491:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 492:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1ul << ITM_LSR_Access_Pos)                    /*!< ITM 
 493:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 494:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 495:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_LSR_Present_Msk                (1ul << ITM_LSR_Present_Pos)                   /*!< ITM 
 496:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_ITM */
 497:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 498:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 499:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_InterruptType CMSIS CM3 Interrupt Type
 500:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   memory mapped structure for Interrupt Type
 501:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   @{
 502:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 503:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** typedef struct
 504:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 505:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED0;
 506:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t ICTR;                         /*!< Offset: 0x04  Interrupt Control Type Register */
 507:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 508:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t ACTLR;                        /*!< Offset: 0x08  Auxiliary Control Register      */
 509:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #else
 510:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED1;
 511:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #endif
 512:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** } InterruptType_Type;
 513:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 514:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 515:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define InterruptType_ICTR_INTLINESNUM_Pos  0                                             /*!< Inte
 516:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define InterruptType_ICTR_INTLINESNUM_Msk (0x1Ful << InterruptType_ICTR_INTLINESNUM_Pos) /*!< Inte
 517:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 518:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* Auxiliary Control Register Definitions */
 519:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define InterruptType_ACTLR_DISFOLD_Pos     2                                             /*!< Inte
 520:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define InterruptType_ACTLR_DISFOLD_Msk    (1ul << InterruptType_ACTLR_DISFOLD_Pos)       /*!< Inte
 521:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 522:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define InterruptType_ACTLR_DISDEFWBUF_Pos  1                                             /*!< Inte
 523:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define InterruptType_ACTLR_DISDEFWBUF_Msk (1ul << InterruptType_ACTLR_DISDEFWBUF_Pos)    /*!< Inte
 524:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 525:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define InterruptType_ACTLR_DISMCYCINT_Pos  0                                             /*!< Inte
 526:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define InterruptType_ACTLR_DISMCYCINT_Msk (1ul << InterruptType_ACTLR_DISMCYCINT_Pos)    /*!< Inte
 527:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_InterruptType */
 528:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 529:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 530:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 531:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_MPU CMSIS CM3 MPU
 532:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   memory mapped structure for Memory Protection Unit (MPU)
 533:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   @{
 534:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 535:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** typedef struct
 536:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 537:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t TYPE;                         /*!< Offset: 0x00  MPU Type Register                 
 538:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x04  MPU Control Register              
 539:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RNR;                          /*!< Offset: 0x08  MPU Region RNRber Register        
 540:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RBAR;                         /*!< Offset: 0x0C  MPU Region Base Address Register  
 541:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RASR;                         /*!< Offset: 0x10  MPU Region Attribute and Size Regi
 542:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RBAR_A1;                      /*!< Offset: 0x14  MPU Alias 1 Region Base Address Re
 543:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RASR_A1;                      /*!< Offset: 0x18  MPU Alias 1 Region Attribute and S
 544:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RBAR_A2;                      /*!< Offset: 0x1C  MPU Alias 2 Region Base Address Re
 545:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RASR_A2;                      /*!< Offset: 0x20  MPU Alias 2 Region Attribute and S
 546:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RBAR_A3;                      /*!< Offset: 0x24  MPU Alias 3 Region Base Address Re
 547:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RASR_A3;                      /*!< Offset: 0x28  MPU Alias 3 Region Attribute and S
 548:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** } MPU_Type;
 549:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 550:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* MPU Type Register */
 551:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 552:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFul << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 553:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 554:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
 555:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFul << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 556:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 557:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
 558:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1ul << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
 559:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 560:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* MPU Control Register */
 561:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
 562:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1ul << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 563:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 564:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
 565:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1ul << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 566:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 567:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
 568:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1ul << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
 569:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 570:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* MPU Region Number Register */
 571:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
 572:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFul << MPU_RNR_REGION_Pos)                 /*!< MPU 
 573:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 574:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* MPU Region Base Address Register */
 575:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
 576:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFul << MPU_RBAR_ADDR_Pos)             /*!< MPU 
 577:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 578:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
 579:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1ul << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 580:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 581:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
 582:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFul << MPU_RBAR_REGION_Pos)                 /*!< MPU 
 583:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 584:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* MPU Region Attribute and Size Register */
 585:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
 586:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1ul << MPU_RASR_XN_Pos)                       /*!< MPU 
 587:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 588:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
 589:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_AP_Msk                    (7ul << MPU_RASR_AP_Pos)                       /*!< MPU 
 590:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 591:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
 592:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (7ul << MPU_RASR_TEX_Pos)                      /*!< MPU 
 593:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 594:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
 595:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_S_Msk                     (1ul << MPU_RASR_S_Pos)                        /*!< MPU 
 596:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 597:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
 598:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_C_Msk                     (1ul << MPU_RASR_C_Pos)                        /*!< MPU 
 599:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 600:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
 601:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_B_Msk                     (1ul << MPU_RASR_B_Pos)                        /*!< MPU 
 602:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 603:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
 604:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFul << MPU_RASR_SRD_Pos)                   /*!< MPU 
 605:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 606:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
 607:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1Ful << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 608:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 609:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_ENA_Pos                     0                                            /*!< MPU 
 610:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_ENA_Msk                    (0x1Ful << MPU_RASR_ENA_Pos)                  /*!< MPU 
 611:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 612:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_MPU */
 613:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #endif
 614:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 615:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 616:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_CoreDebug CMSIS CM3 Core Debug
 617:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   memory mapped structure for Core Debug Register
 618:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   @{
 619:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 620:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** typedef struct
 621:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 622:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 623:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 624:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 625:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 626:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** } CoreDebug_Type;
 627:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 628:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* Debug Halting Control and Status Register */
 629:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 630:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 631:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 632:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 633:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 634:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 635:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 636:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 637:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 638:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 639:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 640:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 641:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 642:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 643:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 644:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 645:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 646:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 647:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 648:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 649:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 650:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
 651:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1ul << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
 652:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 653:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 654:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 655:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 656:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 657:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 658:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 659:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 660:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 661:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 662:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 663:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 664:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 665:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* Debug Core Register Selector Register */
 666:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 667:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 668:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 669:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 670:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 671:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 672:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* Debug Exception and Monitor Control Register */
 673:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
 674:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1ul << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
 675:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 676:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
 677:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1ul << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
 678:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 679:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
 680:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1ul << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
 681:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 682:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
 683:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1ul << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
 684:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 685:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
 686:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1ul << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
 687:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 688:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 689:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 690:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 691:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
 692:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1ul << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
 693:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 694:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
 695:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1ul << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
 696:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 697:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
 698:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1ul << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
 699:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 700:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
 701:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1ul << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
 702:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 703:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
 704:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1ul << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
 705:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 706:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
 707:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1ul << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
 708:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 709:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 710:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 711:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_CoreDebug */
 712:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 713:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 714:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
 715:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 716:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_BASE            (0xE0000000)                              /*!< ITM Base Address        
 717:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 718:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 719:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 720:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 721:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 722:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register 
 723:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 724:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 725:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 726:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct
 727:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 728:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 729:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 730:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90)                      /*!< Memory Protection Unit  
 731:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit  
 732:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #endif
 733:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 734:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_core_register */
 735:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 736:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 737:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*******************************************************************************
 738:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *                Hardware Abstraction Layer
 739:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  ******************************************************************************/
 740:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 741:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #if defined ( __CC_ARM   )
 742:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 743:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 744:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 745:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #elif defined ( __ICCARM__ )
 746:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 747:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 748:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 749:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #elif defined   (  __GNUC__  )
 750:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 751:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 752:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 753:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #elif defined   (  __TASKING__  )
 754:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 755:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 756:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 757:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #endif
 758:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 759:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 760:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 761:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 762:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 763:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* ARM armcc specific functions */
 764:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 765:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __enable_fault_irq                __enable_fiq
 766:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __disable_fault_irq               __disable_fiq
 767:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 768:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __NOP                             __nop
 769:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __WFI                             __wfi
 770:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __WFE                             __wfe
 771:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __SEV                             __sev
 772:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __ISB()                           __isb(0)
 773:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __DSB()                           __dsb(0)
 774:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __DMB()                           __dmb(0)
 775:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __REV                             __rev
 776:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __RBIT                            __rbit
 777:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __LDREXB(ptr)                     ((unsigned char ) __ldrex(ptr))
 778:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __LDREXH(ptr)                     ((unsigned short) __ldrex(ptr))
 779:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __LDREXW(ptr)                     ((unsigned int  ) __ldrex(ptr))
 780:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 781:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 782:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 783:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 784:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 785:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic unsigned long long __ldrexd(volatile void *ptr) */
 786:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic int __strexd(unsigned long long val, volatile void *ptr) */
 787:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __enable_irq();     */
 788:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __disable_irq();    */
 789:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 790:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 791:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 792:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Process Stack Pointer
 793:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 794:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return ProcessStackPointer
 795:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 796:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the actual process stack pointer
 797:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 798:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_PSP(void);
 799:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 800:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 801:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Process Stack Pointer
 802:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 803:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
 804:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 805:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP
 806:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * (process stack pointer) Cortex processor register
 807:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 808:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
 809:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 810:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 811:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Main Stack Pointer
 812:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 813:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return Main Stack Pointer
 814:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 815:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
 816:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Cortex processor register
 817:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 818:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_MSP(void);
 819:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 820:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 821:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Main Stack Pointer
 822:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 823:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
 824:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 825:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Assign the value mainStackPointer to the MSP
 826:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * (main stack pointer) Cortex processor register
 827:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 828:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
 829:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 830:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 831:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
 832:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 833:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param   value  value to reverse
 834:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return         reversed value
 835:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 836:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Reverse byte order in unsigned short value
 837:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 838:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
 839:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 840:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 841:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 842:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 843:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param   value  value to reverse
 844:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return         reversed value
 845:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 846:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
 847:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 848:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern int32_t __REVSH(int16_t value);
 849:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 850:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 851:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #if (__ARMCC_VERSION < 400000)
 852:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 853:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 854:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 855:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 856:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 857:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 858:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __CLREX(void);
 859:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 860:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 861:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Base Priority value
 862:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 863:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return BasePriority
 864:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 865:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the content of the base priority register
 866:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 867:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
 868:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 869:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 870:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Base Priority value
 871:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 872:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  basePri  BasePriority
 873:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 874:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the base priority register
 875:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 876:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
 877:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 878:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 879:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Priority Mask value
 880:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 881:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return PriMask
 882:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 883:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
 884:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 885:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_PRIMASK(void);
 886:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 887:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 888:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Priority Mask value
 889:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 890:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param   priMask  PriMask
 891:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 892:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 893:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 894:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
 895:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 896:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 897:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Fault Mask value
 898:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 899:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return FaultMask
 900:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 901:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the content of the fault mask register
 902:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 903:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
 904:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 905:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 906:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Fault Mask value
 907:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 908:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  faultMask faultMask value
 909:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 910:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the fault mask register
 911:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 912:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
 913:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 914:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 915:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Control Register value
 916:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 917:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return Control value
 918:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 919:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the content of the control register
 920:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 921:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_CONTROL(void);
 922:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 923:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 924:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Control Register value
 925:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 926:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  control  Control value
 927:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 928:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the control register
 929:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 930:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
 931:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 932:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 933:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 934:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 935:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 936:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 937:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 938:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 939:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __CLREX                           __clrex
 940:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 941:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 942:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Base Priority value
 943:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 944:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return BasePriority
 945:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 946:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the content of the base priority register
 947:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 948:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE uint32_t  __get_BASEPRI(void)
 949:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 950:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 951:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   return(__regBasePri);
 952:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
 953:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 954:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 955:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Base Priority value
 956:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 957:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  basePri  BasePriority
 958:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 959:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the base priority register
 960:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 961:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __set_BASEPRI(uint32_t basePri)
 962:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 963:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 964:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __regBasePri = (basePri & 0xff);
 965:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
 966:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 967:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 968:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Priority Mask value
 969:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 970:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return PriMask
 971:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 972:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
 973:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 974:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE uint32_t __get_PRIMASK(void)
 975:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 976:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 977:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   return(__regPriMask);
 978:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
 979:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 980:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 981:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Priority Mask value
 982:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 983:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  priMask  PriMask
 984:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 985:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 986:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 987:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 988:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 989:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 990:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __regPriMask = (priMask);
 991:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
 992:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 993:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 994:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Fault Mask value
 995:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 996:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return FaultMask
 997:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 998:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the content of the fault mask register
 999:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1000:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE uint32_t __get_FAULTMASK(void)
1001:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1002:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
1003:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   return(__regFaultMask);
1004:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1005:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1006:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1007:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Fault Mask value
1008:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1009:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  faultMask  faultMask value
1010:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1011:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the fault mask register
1012:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1013:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __set_FAULTMASK(uint32_t faultMask)
1014:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1015:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
1016:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __regFaultMask = (faultMask & 1);
1017:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1018:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1019:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1020:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Control Register value
1021:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1022:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return Control value
1023:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1024:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the content of the control register
1025:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1026:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE uint32_t __get_CONTROL(void)
1027:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1028:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
1029:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   return(__regControl);
1030:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1031:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1032:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1033:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Control Register value
1034:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1035:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  control  Control value
1036:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1037:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the control register
1038:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1039:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __set_CONTROL(uint32_t control)
1040:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1041:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
1042:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __regControl = control;
1043:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1044:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1045:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #endif /* __ARMCC_VERSION  */
1046:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1047:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1048:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1049:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
1050:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* IAR iccarm specific functions */
1051:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1052:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
1053:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
1054:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1055:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
1056:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
1057:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1058:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __NOP                                     __no_operation            /*!< no operation intri
1059:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
1060:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
1061:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
1062:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE  void __CLREX()                   { __ASM ("clrex"); }
1063:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1064:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __ISB(void)                                     */
1065:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __DSB(void)                                     */
1066:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __DMB(void)                                     */
1067:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __set_PRIMASK();                                */
1068:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __get_PRIMASK();                                */
1069:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __set_FAULTMASK();                              */
1070:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __get_FAULTMASK();                              */
1071:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
1072:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
1073:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic unsigned long __STREX(unsigned long, unsigned long); */
1074:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic unsigned long __LDREX(unsigned long *);              */
1075:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1076:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1077:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1078:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Process Stack Pointer
1079:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1080:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return ProcessStackPointer
1081:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1082:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the actual process stack pointer
1083:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1084:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_PSP(void);
1085:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1086:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1087:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Process Stack Pointer
1088:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1089:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
1090:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1091:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP
1092:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * (process stack pointer) Cortex processor register
1093:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1094:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
1095:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1096:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1097:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Main Stack Pointer
1098:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1099:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return Main Stack Pointer
1100:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1101:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
1102:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Cortex processor register
1103:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1104:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_MSP(void);
1105:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1106:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1107:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Main Stack Pointer
1108:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1109:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
1110:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1111:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Assign the value mainStackPointer to the MSP
1112:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * (main stack pointer) Cortex processor register
1113:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1114:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
1115:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1116:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1117:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
1118:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1119:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to reverse
1120:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        reversed value
1121:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1122:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Reverse byte order in unsigned short value
1123:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1124:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
1125:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1126:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1127:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Reverse bit order of value
1128:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1129:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to reverse
1130:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        reversed value
1131:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1132:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Reverse bit order of value
1133:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1134:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
1135:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1136:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1137:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  LDR Exclusive (8 bit)
1138:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1139:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1140:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        value of (*address)
1141:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1142:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive LDR command for 8 bit values)
1143:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1144:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
1145:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1146:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1147:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  LDR Exclusive (16 bit)
1148:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1149:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1150:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        value of (*address)
1151:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1152:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive LDR command for 16 bit values
1153:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1154:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
1155:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1156:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1157:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  LDR Exclusive (32 bit)
1158:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1159:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1160:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        value of (*address)
1161:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1162:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive LDR command for 32 bit values
1163:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1164:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
1165:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1166:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1167:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  STR Exclusive (8 bit)
1168:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1169:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to store
1170:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1171:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        successful / failed
1172:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1173:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive STR command for 8 bit values
1174:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1175:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
1176:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1177:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1178:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  STR Exclusive (16 bit)
1179:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1180:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to store
1181:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1182:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        successful / failed
1183:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1184:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive STR command for 16 bit values
1185:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1186:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
1187:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1188:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1189:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  STR Exclusive (32 bit)
1190:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1191:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to store
1192:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1193:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        successful / failed
1194:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1195:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive STR command for 32 bit values
1196:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1197:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
1198:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1199:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1200:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1201:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
1202:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* GNU gcc specific functions */
1203:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1204:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
1205:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
1206:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1207:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
1208:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
1209:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1210:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
1211:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
1212:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
1213:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
1214:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
1215:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
1216:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
1217:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __CLREX()                    { __ASM volatile ("clrex"); }
1218:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1219:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1220:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1221:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Process Stack Pointer
1222:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1223:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return ProcessStackPointer
1224:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1225:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the actual process stack pointer
1226:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1227:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_PSP(void);
1228:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1229:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1230:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Process Stack Pointer
1231:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1232:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
1233:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1234:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP
1235:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * (process stack pointer) Cortex processor register
1236:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1237:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
1238:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1239:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1240:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Main Stack Pointer
1241:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1242:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return Main Stack Pointer
1243:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1244:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
1245:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Cortex processor register
1246:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1247:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_MSP(void);
1248:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1249:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1250:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Main Stack Pointer
1251:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1252:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
1253:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1254:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Assign the value mainStackPointer to the MSP
1255:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * (main stack pointer) Cortex processor register
1256:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1257:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
1258:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1259:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1260:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Base Priority value
1261:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1262:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return BasePriority
1263:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1264:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the content of the base priority register
1265:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1266:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
1267:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1268:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1269:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Base Priority value
1270:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1271:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  basePri  BasePriority
1272:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1273:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the base priority register
1274:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1275:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
1276:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1277:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1278:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Priority Mask value
1279:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1280:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return PriMask
1281:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1282:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
1283:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1284:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t  __get_PRIMASK(void);
1285:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1286:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1287:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Priority Mask value
1288:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1289:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  priMask  PriMask
1290:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1291:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the priority mask bit in the priority mask register
1292:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1293:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
1294:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1295:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1296:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Fault Mask value
1297:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1298:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return FaultMask
1299:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1300:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the content of the fault mask register
1301:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1302:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
1303:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1304:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1305:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Fault Mask value
1306:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1307:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  faultMask  faultMask value
1308:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1309:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the fault mask register
1310:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1311:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
1312:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1313:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1314:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Control Register value
1315:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** *
1316:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** *  @return Control value
1317:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1318:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the content of the control register
1319:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1320:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_CONTROL(void);
1321:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1322:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1323:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Control Register value
1324:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1325:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  control  Control value
1326:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1327:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the control register
1328:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1329:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
1330:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1331:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1332:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Reverse byte order in integer value
1333:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1334:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to reverse
1335:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        reversed value
1336:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1337:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Reverse byte order in integer value
1338:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1339:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __REV(uint32_t value);
1340:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1341:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1342:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
1343:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1344:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to reverse
1345:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        reversed value
1346:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1347:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Reverse byte order in unsigned short value
1348:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1349:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
1350:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1351:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1352:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
1353:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1354:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to reverse
1355:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        reversed value
1356:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1357:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
1358:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1359:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern int32_t __REVSH(int16_t value);
1360:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1361:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1362:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Reverse bit order of value
1363:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1364:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to reverse
1365:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        reversed value
1366:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1367:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Reverse bit order of value
1368:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1369:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
1370:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1371:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1372:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  LDR Exclusive (8 bit)
1373:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1374:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1375:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        value of (*address)
1376:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1377:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive LDR command for 8 bit value
1378:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1379:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
1380:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1381:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1382:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  LDR Exclusive (16 bit)
1383:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1384:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1385:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        value of (*address)
1386:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1387:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive LDR command for 16 bit values
1388:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1389:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
1390:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1391:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1392:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  LDR Exclusive (32 bit)
1393:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1394:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1395:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        value of (*address)
1396:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1397:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive LDR command for 32 bit values
1398:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1399:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
1400:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1401:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1402:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  STR Exclusive (8 bit)
1403:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1404:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to store
1405:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1406:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        successful / failed
1407:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1408:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive STR command for 8 bit values
1409:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1410:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
1411:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1412:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1413:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  STR Exclusive (16 bit)
1414:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1415:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to store
1416:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1417:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        successful / failed
1418:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1419:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive STR command for 16 bit values
1420:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1421:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
1422:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1423:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1424:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  STR Exclusive (32 bit)
1425:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1426:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to store
1427:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1428:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        successful / failed
1429:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1430:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive STR command for 32 bit values
1431:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1432:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
1433:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1434:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1435:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
1436:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* TASKING carm specific functions */
1437:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1438:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*
1439:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
1440:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
1441:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Including the CMSIS ones.
1442:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1443:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1444:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #endif
1445:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1446:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1447:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_Core_FunctionInterface CMSIS CM3 Core Function Interface
1448:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   Core  Function Interface containing:
1449:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   - Core NVIC Functions
1450:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   - Core SysTick Functions
1451:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   - Core Reset Functions
1452:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** */
1453:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*@{*/
1454:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1455:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1456:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1457:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1458:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Priority Grouping in NVIC Interrupt Controller
1459:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1460:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  PriorityGroup is priority grouping field
1461:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1462:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the priority grouping field using the required unlock sequence.
1463:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * The parameter priority_grouping is assigned to the field
1464:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * SCB->AIRCR [10:8] PRIGROUP field. Only values from 0..7 are used.
1465:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * In case of a conflict between priority grouping and available
1466:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1467:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1468:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1469:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1470:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   uint32_t reg_value;
1471:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 a
1472:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1473:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1474:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
1475:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   reg_value  =  (reg_value                       |
1476:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****                 (0x5FA << SCB_AIRCR_VECTKEY_Pos) |
1477:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
1478:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   SCB->AIRCR =  reg_value;
1479:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1480:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1481:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1482:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Get the Priority Grouping from NVIC Interrupt Controller
1483:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1484:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return priority grouping field
1485:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1486:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Get the priority grouping from NVIC Interrupt Controller.
1487:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
1488:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1489:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
1490:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1491:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
1492:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1493:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1494:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1495:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
1496:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1497:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  IRQn   The positive number of the external interrupt to enable
1498:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1499:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
1500:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * The interrupt number cannot be a negative value.
1501:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1502:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1503:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
  27              		.loc 1 1503 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 80B4     		push	{r7}
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 83B0     		sub	sp, sp, #12
  36              		.cfi_def_cfa_offset 16
  37 0004 00AF     		add	r7, sp, #0
  38              		.cfi_def_cfa_register 7
  39 0006 0346     		mov	r3, r0
  40 0008 FB71     		strb	r3, [r7, #7]
1504:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  41              		.loc 1 1504 0
  42 000a 0849     		ldr	r1, .L2
  43 000c 97F90730 		ldrsb	r3, [r7, #7]
  44 0010 5B09     		lsrs	r3, r3, #5
  45 0012 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
  46 0014 02F01F02 		and	r2, r2, #31
  47 0018 0120     		movs	r0, #1
  48 001a 00FA02F2 		lsl	r2, r0, r2
  49 001e 41F82320 		str	r2, [r1, r3, lsl #2]
1505:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
  50              		.loc 1 1505 0
  51 0022 00BF     		nop
  52 0024 0C37     		adds	r7, r7, #12
  53              		.cfi_def_cfa_offset 4
  54 0026 BD46     		mov	sp, r7
  55              		.cfi_def_cfa_register 13
  56              		@ sp needed
  57 0028 80BC     		pop	{r7}
  58              		.cfi_restore 7
  59              		.cfi_def_cfa_offset 0
  60 002a 7047     		bx	lr
  61              	.L3:
  62              		.align	2
  63              	.L2:
  64 002c 00E100E0 		.word	-536813312
  65              		.cfi_endproc
  66              	.LFE14:
  68              		.section	.text.NVIC_SetPriority,"ax",%progbits
  69              		.align	2
  70              		.thumb
  71              		.thumb_func
  73              	NVIC_SetPriority:
  74              	.LFB20:
1506:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1507:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1508:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Disable the interrupt line for external interrupt specified
1509:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1510:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  IRQn   The positive number of the external interrupt to disable
1511:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1512:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
1513:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * The interrupt number cannot be a negative value.
1514:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1515:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1516:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1517:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
1518:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1519:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1520:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1521:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Read the interrupt pending bit for a device specific interrupt source
1522:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1523:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  IRQn    The number of the device specifc interrupt
1524:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return         1 = interrupt pending, 0 = interrupt not pending
1525:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1526:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Read the pending register in NVIC and return 1 if its status is pending,
1527:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * otherwise it returns 0
1528:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1529:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1530:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1531:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
1532:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1533:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1534:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1535:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the pending bit for an external interrupt
1536:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1537:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  IRQn    The number of the interrupt for set pending
1538:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1539:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the pending bit for the specified interrupt.
1540:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * The interrupt number cannot be a negative value.
1541:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1542:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1543:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1544:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
1545:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1546:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1547:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1548:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Clear the pending bit for an external interrupt
1549:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1550:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  IRQn    The number of the interrupt for clear pending
1551:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1552:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Clear the pending bit for the specified interrupt.
1553:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * The interrupt number cannot be a negative value.
1554:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1555:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1556:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1557:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
1558:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1559:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1560:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1561:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Read the active bit for an external interrupt
1562:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1563:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  IRQn    The number of the interrupt for read active bit
1564:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return         1 = interrupt active, 0 = interrupt not active
1565:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1566:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Read the active register in NVIC and returns 1 if its status is active,
1567:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * otherwise it returns 0.
1568:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1569:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1570:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1571:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /
1572:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1573:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1574:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1575:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the priority for an interrupt
1576:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1577:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  IRQn      The number of the interrupt for set priority
1578:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  priority  The priority to set
1579:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1580:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the priority for the specified interrupt. The interrupt
1581:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * number can be positive to specify an external (device specific)
1582:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * interrupt, or negative to specify an internal (core) interrupt.
1583:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1584:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Note: The priority cannot be set for every core interrupt.
1585:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1586:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1587:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
  75              		.loc 1 1587 0
  76              		.cfi_startproc
  77              		@ args = 0, pretend = 0, frame = 8
  78              		@ frame_needed = 1, uses_anonymous_args = 0
  79              		@ link register save eliminated.
  80 0000 80B4     		push	{r7}
  81              		.cfi_def_cfa_offset 4
  82              		.cfi_offset 7, -4
  83 0002 83B0     		sub	sp, sp, #12
  84              		.cfi_def_cfa_offset 16
  85 0004 00AF     		add	r7, sp, #0
  86              		.cfi_def_cfa_register 7
  87 0006 0346     		mov	r3, r0
  88 0008 3960     		str	r1, [r7]
  89 000a FB71     		strb	r3, [r7, #7]
1588:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   if(IRQn < 0) {
  90              		.loc 1 1588 0
  91 000c 97F90730 		ldrsb	r3, [r7, #7]
  92 0010 002B     		cmp	r3, #0
  93 0012 0BDA     		bge	.L5
1589:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
  94              		.loc 1 1589 0
  95 0014 0D49     		ldr	r1, .L8
  96 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  97 0018 03F00F03 		and	r3, r3, #15
  98 001c 043B     		subs	r3, r3, #4
  99 001e 3A68     		ldr	r2, [r7]
 100 0020 D2B2     		uxtb	r2, r2
 101 0022 D200     		lsls	r2, r2, #3
 102 0024 D2B2     		uxtb	r2, r2
 103 0026 0B44     		add	r3, r3, r1
 104 0028 1A76     		strb	r2, [r3, #24]
1590:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   else {
1591:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****     NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set 
1592:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
 105              		.loc 1 1592 0
 106 002a 09E0     		b	.L7
 107              	.L5:
1591:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
 108              		.loc 1 1591 0
 109 002c 0849     		ldr	r1, .L8+4
 110 002e 97F90730 		ldrsb	r3, [r7, #7]
 111 0032 3A68     		ldr	r2, [r7]
 112 0034 D2B2     		uxtb	r2, r2
 113 0036 D200     		lsls	r2, r2, #3
 114 0038 D2B2     		uxtb	r2, r2
 115 003a 0B44     		add	r3, r3, r1
 116 003c 83F80023 		strb	r2, [r3, #768]
 117              	.L7:
 118              		.loc 1 1592 0
 119 0040 00BF     		nop
 120 0042 0C37     		adds	r7, r7, #12
 121              		.cfi_def_cfa_offset 4
 122 0044 BD46     		mov	sp, r7
 123              		.cfi_def_cfa_register 13
 124              		@ sp needed
 125 0046 80BC     		pop	{r7}
 126              		.cfi_restore 7
 127              		.cfi_def_cfa_offset 0
 128 0048 7047     		bx	lr
 129              	.L9:
 130 004a 00BF     		.align	2
 131              	.L8:
 132 004c 00ED00E0 		.word	-536810240
 133 0050 00E100E0 		.word	-536813312
 134              		.cfi_endproc
 135              	.LFE20:
 137              		.section	.bss.rb,"aw",%nobits
 138              		.align	2
 141              	rb:
 142 0000 00000000 		.space	528
 142      00000000 
 142      00000000 
 142      00000000 
 142      00000000 
 143              		.section	.bss.TxIntStat,"aw",%nobits
 146              	TxIntStat:
 147 0000 00       		.space	1
 148              		.section	.text.UART0_IRQHandler,"ax",%progbits
 149              		.align	2
 150              		.global	UART0_IRQHandler
 151              		.thumb
 152              		.thumb_func
 154              	UART0_IRQHandler:
 155              	.LFB29:
 156              		.file 2 "comm.c"
   1:comm.c        **** /**
   2:comm.c        ****  * @file	: comm.c
   3:comm.c        ****  * @purpose	: UART using interrupt mode to test the UART driver
   4:comm.c        ****  * @version	: 1.0
   5:comm.c        ****  * @date	: 18. Mar. 2009 (NXP), July 2010 (mthomas)
   6:comm.c        ****  * @author	: HieuNguyen (NXP example), Martin Thomas (adapted as "library")
   7:comm.c        ****  *----------------------------------------------------------------------------
   8:comm.c        ****  * Software that is described herein is for illustrative purposes only
   9:comm.c        ****  * which provides customers with programming information regarding the
  10:comm.c        ****  * products. This software is supplied "AS IS" without any warranties.
  11:comm.c        ****  * NXP Semiconductors assumes no responsibility or liability for the
  12:comm.c        ****  * use of the software, conveys no license or title under any patent,
  13:comm.c        ****  * copyright, or mask work right to the product. NXP Semiconductors
  14:comm.c        ****  * reserves the right to make changes in the software without
  15:comm.c        ****  * notification. NXP Semiconductors also make no representation or
  16:comm.c        ****  * warranty that such application will be suitable for the specified
  17:comm.c        ****  * use without further testing or modification.
  18:comm.c        ****  **********************************************************************/
  19:comm.c        **** 
  20:comm.c        **** #include "lpc17xx.h"
  21:comm.c        **** #include "lpc17xx_uart.h"
  22:comm.c        **** #include "lpc17xx_nvic.h"
  23:comm.c        **** #include "lpc17xx_pinsel.h"
  24:comm.c        **** 
  25:comm.c        **** #include "comm.h"
  26:comm.c        **** #include "uart.h"
  27:comm.c        **** 
  28:comm.c        **** #define UART_PORT 0
  29:comm.c        **** 
  30:comm.c        **** #if (UART_PORT == 0)
  31:comm.c        **** #define TEST_UART LPC_UART0
  32:comm.c        **** #elif (UART_PORT == 1)
  33:comm.c        **** #define TEST_UART LPC_UART1
  34:comm.c        **** #endif
  35:comm.c        **** 
  36:comm.c        **** 
  37:comm.c        **** /************************** PRIVATE VARIABLES *************************/
  38:comm.c        **** // UART Ring buffer
  39:comm.c        **** static UART_RING_BUFFER_T rb;
  40:comm.c        **** // Current Tx Interrupt enable state
  41:comm.c        **** static __IO FlagStatus TxIntStat;
  42:comm.c        **** 
  43:comm.c        **** /************************** PRIVATE FUNCTIONS *************************/
  44:comm.c        **** #if (UART_PORT == 0)
  45:comm.c        **** void UART0_IRQHandler(void);
  46:comm.c        **** #elif (UART_PORT == 1)
  47:comm.c        **** void UART1_IRQHandler(void);
  48:comm.c        **** #endif
  49:comm.c        **** 
  50:comm.c        **** static void UART_IntTransmit(void);
  51:comm.c        **** static void UART_IntReceive(void);
  52:comm.c        **** static uint32_t UARTReceive(LPC_UART_TypeDef *UARTPort, uint8_t *rxbuf, uint8_t buflen);
  53:comm.c        **** static uint32_t UARTSend(LPC_UART_TypeDef *UARTPort, uint8_t *txbuf, uint8_t buflen);
  54:comm.c        **** 
  55:comm.c        **** #if (UART_PORT == 0)
  56:comm.c        **** /*********************************************************************//**
  57:comm.c        ****  * @brief	UART0 interrupt handler sub-routine reference, just to call the
  58:comm.c        ****  * 				standard interrupt handler in uart driver
  59:comm.c        ****  * @param	None
  60:comm.c        ****  * @return	None
  61:comm.c        ****  **********************************************************************/
  62:comm.c        **** void UART0_IRQHandler(void)
  63:comm.c        **** {
 157              		.loc 2 63 0
 158              		.cfi_startproc
 159              		@ args = 0, pretend = 0, frame = 0
 160              		@ frame_needed = 1, uses_anonymous_args = 0
 161 0000 80B5     		push	{r7, lr}
 162              		.cfi_def_cfa_offset 8
 163              		.cfi_offset 7, -8
 164              		.cfi_offset 14, -4
 165 0002 00AF     		add	r7, sp, #0
 166              		.cfi_def_cfa_register 7
  64:comm.c        **** 	// Call Standard UART 0 interrupt handler
  65:comm.c        **** 	UART0_StdIntHandler();
 167              		.loc 2 65 0
 168 0004 FFF7FEFF 		bl	UART0_StdIntHandler
  66:comm.c        **** }
 169              		.loc 2 66 0
 170 0008 00BF     		nop
 171 000a 80BD     		pop	{r7, pc}
 172              		.cfi_endproc
 173              	.LFE29:
 175              		.section	.text.UART_IntReceive,"ax",%progbits
 176              		.align	2
 177              		.thumb
 178              		.thumb_func
 180              	UART_IntReceive:
 181              	.LFB30:
  67:comm.c        **** #endif
  68:comm.c        **** 
  69:comm.c        **** #if (UART_PORT == 1)
  70:comm.c        **** /*********************************************************************//**
  71:comm.c        ****  * @brief	UART1 interrupt handler sub-routine reference, just to call the
  72:comm.c        ****  * 				standard interrupt handler in uart driver
  73:comm.c        ****  * @param	None
  74:comm.c        ****  * @return	None
  75:comm.c        ****  **********************************************************************/
  76:comm.c        **** static void UART1_IRQHandler(void)
  77:comm.c        **** {
  78:comm.c        **** 	// Call Standard UART 0 interrupt handler
  79:comm.c        **** 	UART1_StdIntHandler();
  80:comm.c        **** }
  81:comm.c        **** #endif
  82:comm.c        **** 
  83:comm.c        **** /********************************************************************//**
  84:comm.c        ****  * @brief 		UART receive function (ring buffer used)
  85:comm.c        ****  * @param[in]	None
  86:comm.c        ****  * @return 		None
  87:comm.c        ****  *********************************************************************/
  88:comm.c        **** static void UART_IntReceive(void)
  89:comm.c        **** {
 182              		.loc 2 89 0
 183              		.cfi_startproc
 184              		@ args = 0, pretend = 0, frame = 8
 185              		@ frame_needed = 1, uses_anonymous_args = 0
 186 0000 80B5     		push	{r7, lr}
 187              		.cfi_def_cfa_offset 8
 188              		.cfi_offset 7, -8
 189              		.cfi_offset 14, -4
 190 0002 82B0     		sub	sp, sp, #8
 191              		.cfi_def_cfa_offset 16
 192 0004 00AF     		add	r7, sp, #0
 193              		.cfi_def_cfa_register 7
 194              	.L16:
  90:comm.c        **** 	uint8_t tmpc;
  91:comm.c        **** 	uint32_t rLen;
  92:comm.c        **** 
  93:comm.c        **** 	while (1)
  94:comm.c        **** 	{
  95:comm.c        **** 		// Call UART read function in UART driver
  96:comm.c        **** 		rLen = UART_Receive(TEST_UART, &tmpc, 1, NONE_BLOCKING);
 195              		.loc 2 96 0
 196 0006 F91C     		adds	r1, r7, #3
 197 0008 0023     		movs	r3, #0
 198 000a 0122     		movs	r2, #1
 199 000c 1148     		ldr	r0, .L18
 200 000e FFF7FEFF 		bl	UART_Receive
 201 0012 7860     		str	r0, [r7, #4]
  97:comm.c        **** 		// If data received
  98:comm.c        **** 		if (rLen)
 202              		.loc 2 98 0
 203 0014 7B68     		ldr	r3, [r7, #4]
 204 0016 002B     		cmp	r3, #0
 205 0018 17D0     		beq	.L17
  99:comm.c        **** 		{
 100:comm.c        **** 			/* Check if buffer is more space
 101:comm.c        **** 			 * If no more space, remaining character will be trimmed out
 102:comm.c        **** 			 */
 103:comm.c        **** 			if (!__BUF_IS_FULL(rb.rx_head,rb.rx_tail))
 206              		.loc 2 103 0
 207 001a 0F4B     		ldr	r3, .L18+4
 208 001c DA68     		ldr	r2, [r3, #12]
 209 001e 0E4B     		ldr	r3, .L18+4
 210 0020 9B68     		ldr	r3, [r3, #8]
 211 0022 0133     		adds	r3, r3, #1
 212 0024 5340     		eors	r3, r3, r2
 213 0026 DBB2     		uxtb	r3, r3
 214 0028 002B     		cmp	r3, #0
 215 002a ECD0     		beq	.L16
 104:comm.c        **** 			{
 105:comm.c        **** 				rb.rx[rb.rx_head] = tmpc;
 216              		.loc 2 105 0
 217 002c 0A4B     		ldr	r3, .L18+4
 218 002e 9B68     		ldr	r3, [r3, #8]
 219 0030 F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 220 0032 094A     		ldr	r2, .L18+4
 221 0034 1344     		add	r3, r3, r2
 222 0036 0A46     		mov	r2, r1
 223 0038 83F81021 		strb	r2, [r3, #272]
 106:comm.c        **** 				__BUF_INCR(rb.rx_head);
 224              		.loc 2 106 0
 225 003c 064B     		ldr	r3, .L18+4
 226 003e 9B68     		ldr	r3, [r3, #8]
 227 0040 0133     		adds	r3, r3, #1
 228 0042 DBB2     		uxtb	r3, r3
 229 0044 044A     		ldr	r2, .L18+4
 230 0046 9360     		str	r3, [r2, #8]
 107:comm.c        **** 			}
 108:comm.c        **** 		}
 109:comm.c        **** 		// no more data
 110:comm.c        **** 		else
 111:comm.c        **** 		{
 112:comm.c        **** 			break;
 113:comm.c        **** 		}
 114:comm.c        **** 	}
 231              		.loc 2 114 0
 232 0048 DDE7     		b	.L16
 233              	.L17:
 112:comm.c        **** 		}
 234              		.loc 2 112 0
 235 004a 00BF     		nop
 115:comm.c        **** }
 236              		.loc 2 115 0
 237 004c 00BF     		nop
 238 004e 0837     		adds	r7, r7, #8
 239              		.cfi_def_cfa_offset 8
 240 0050 BD46     		mov	sp, r7
 241              		.cfi_def_cfa_register 13
 242              		@ sp needed
 243 0052 80BD     		pop	{r7, pc}
 244              	.L19:
 245              		.align	2
 246              	.L18:
 247 0054 00C00040 		.word	1073790976
 248 0058 00000000 		.word	rb
 249              		.cfi_endproc
 250              	.LFE30:
 252              		.section	.text.UART_IntTransmit,"ax",%progbits
 253              		.align	2
 254              		.thumb
 255              		.thumb_func
 257              	UART_IntTransmit:
 258              	.LFB31:
 116:comm.c        **** 
 117:comm.c        **** /********************************************************************//**
 118:comm.c        ****  * @brief 		UART transmit function (ring buffer used)
 119:comm.c        ****  * @param[in]	None
 120:comm.c        ****  * @return 		None
 121:comm.c        ****  *********************************************************************/
 122:comm.c        **** static void UART_IntTransmit(void)
 123:comm.c        **** {
 259              		.loc 2 123 0
 260              		.cfi_startproc
 261              		@ args = 0, pretend = 0, frame = 0
 262              		@ frame_needed = 1, uses_anonymous_args = 0
 263 0000 80B5     		push	{r7, lr}
 264              		.cfi_def_cfa_offset 8
 265              		.cfi_offset 7, -8
 266              		.cfi_offset 14, -4
 267 0002 00AF     		add	r7, sp, #0
 268              		.cfi_def_cfa_register 7
 124:comm.c        **** 	// Disable THRE interrupt
 125:comm.c        **** 	UART_IntConfig(TEST_UART, UART_INTCFG_THRE, DISABLE);
 269              		.loc 2 125 0
 270 0004 0022     		movs	r2, #0
 271 0006 0121     		movs	r1, #1
 272 0008 2148     		ldr	r0, .L30
 273 000a FFF7FEFF 		bl	UART_IntConfig
 126:comm.c        **** 
 127:comm.c        **** 	/* Wait for FIFO buffer empty, transfer UART_TX_FIFO_SIZE bytes
 128:comm.c        **** 	 * of data or break whenever ring buffers are empty */
 129:comm.c        **** 	/* Wait until THR empty */
 130:comm.c        **** 	while (UART_CheckBusy(TEST_UART) == SET)
 274              		.loc 2 130 0
 275 000e 00BF     		nop
 276              	.L21:
 277              		.loc 2 130 0 is_stmt 0 discriminator 1
 278 0010 1F48     		ldr	r0, .L30
 279 0012 FFF7FEFF 		bl	UART_CheckBusy
 280 0016 0346     		mov	r3, r0
 281 0018 012B     		cmp	r3, #1
 282 001a F9D0     		beq	.L21
 131:comm.c        **** 		;
 132:comm.c        **** 
 133:comm.c        **** 	while (!__BUF_IS_EMPTY(rb.tx_head,rb.tx_tail))
 283              		.loc 2 133 0 is_stmt 1
 284 001c 12E0     		b	.L22
 285              	.L25:
 134:comm.c        **** 	{
 135:comm.c        **** 		/* Move a piece of data into the transmit FIFO */
 136:comm.c        **** 		if (UART_Send(TEST_UART, (uint8_t *) &rb.tx[rb.tx_tail], 1,
 286              		.loc 2 136 0
 287 001e 1D4B     		ldr	r3, .L30+4
 288 0020 5B68     		ldr	r3, [r3, #4]
 289 0022 1033     		adds	r3, r3, #16
 290 0024 1B4A     		ldr	r2, .L30+4
 291 0026 9918     		adds	r1, r3, r2
 292 0028 0023     		movs	r3, #0
 293 002a 0122     		movs	r2, #1
 294 002c 1848     		ldr	r0, .L30
 295 002e FFF7FEFF 		bl	UART_Send
 296 0032 0346     		mov	r3, r0
 297 0034 002B     		cmp	r3, #0
 298 0036 0ED0     		beq	.L28
 137:comm.c        **** 				NONE_BLOCKING))
 138:comm.c        **** 		{
 139:comm.c        **** 			/* Update transmit ring FIFO tail pointer */
 140:comm.c        **** 			__BUF_INCR(rb.tx_tail);
 299              		.loc 2 140 0
 300 0038 164B     		ldr	r3, .L30+4
 301 003a 5B68     		ldr	r3, [r3, #4]
 302 003c 0133     		adds	r3, r3, #1
 303 003e DBB2     		uxtb	r3, r3
 304 0040 144A     		ldr	r2, .L30+4
 305 0042 5360     		str	r3, [r2, #4]
 306              	.L22:
 133:comm.c        **** 	{
 307              		.loc 2 133 0
 308 0044 134B     		ldr	r3, .L30+4
 309 0046 1A68     		ldr	r2, [r3]
 310 0048 124B     		ldr	r3, .L30+4
 311 004a 5B68     		ldr	r3, [r3, #4]
 312 004c 5340     		eors	r3, r3, r2
 313 004e DBB2     		uxtb	r3, r3
 314 0050 002B     		cmp	r3, #0
 315 0052 E4D1     		bne	.L25
 316 0054 00E0     		b	.L24
 317              	.L28:
 141:comm.c        **** 		}
 142:comm.c        **** 		else
 143:comm.c        **** 		{
 144:comm.c        **** 			break;
 318              		.loc 2 144 0
 319 0056 00BF     		nop
 320              	.L24:
 145:comm.c        **** 		}
 146:comm.c        **** 	}
 147:comm.c        **** 
 148:comm.c        **** 	/* If there is no more data to send, disable the transmit
 149:comm.c        **** 	 interrupt - else enable it or keep it enabled */
 150:comm.c        **** 	if (__BUF_IS_EMPTY(rb.tx_head, rb.tx_tail))
 321              		.loc 2 150 0
 322 0058 0E4B     		ldr	r3, .L30+4
 323 005a 1A68     		ldr	r2, [r3]
 324 005c 0D4B     		ldr	r3, .L30+4
 325 005e 5B68     		ldr	r3, [r3, #4]
 326 0060 5340     		eors	r3, r3, r2
 327 0062 DBB2     		uxtb	r3, r3
 328 0064 002B     		cmp	r3, #0
 329 0066 08D1     		bne	.L26
 151:comm.c        **** 	{
 152:comm.c        **** 		UART_IntConfig(TEST_UART, UART_INTCFG_THRE, DISABLE);
 330              		.loc 2 152 0
 331 0068 0022     		movs	r2, #0
 332 006a 0121     		movs	r1, #1
 333 006c 0848     		ldr	r0, .L30
 334 006e FFF7FEFF 		bl	UART_IntConfig
 153:comm.c        **** 		// Reset Tx Interrupt state
 154:comm.c        **** 		TxIntStat = RESET;
 335              		.loc 2 154 0
 336 0072 094B     		ldr	r3, .L30+8
 337 0074 0022     		movs	r2, #0
 338 0076 1A70     		strb	r2, [r3]
 155:comm.c        **** 	}
 156:comm.c        **** 	else
 157:comm.c        **** 	{
 158:comm.c        **** 		// Set Tx Interrupt state
 159:comm.c        **** 		TxIntStat = SET;
 160:comm.c        **** 		UART_IntConfig(TEST_UART, UART_INTCFG_THRE, ENABLE);
 161:comm.c        **** 	}
 162:comm.c        **** }
 339              		.loc 2 162 0
 340 0078 07E0     		b	.L29
 341              	.L26:
 159:comm.c        **** 		UART_IntConfig(TEST_UART, UART_INTCFG_THRE, ENABLE);
 342              		.loc 2 159 0
 343 007a 074B     		ldr	r3, .L30+8
 344 007c 0122     		movs	r2, #1
 345 007e 1A70     		strb	r2, [r3]
 160:comm.c        **** 	}
 346              		.loc 2 160 0
 347 0080 0122     		movs	r2, #1
 348 0082 0121     		movs	r1, #1
 349 0084 0248     		ldr	r0, .L30
 350 0086 FFF7FEFF 		bl	UART_IntConfig
 351              	.L29:
 352              		.loc 2 162 0
 353 008a 00BF     		nop
 354 008c 80BD     		pop	{r7, pc}
 355              	.L31:
 356 008e 00BF     		.align	2
 357              	.L30:
 358 0090 00C00040 		.word	1073790976
 359 0094 00000000 		.word	rb
 360 0098 00000000 		.word	TxIntStat
 361              		.cfi_endproc
 362              	.LFE31:
 364              		.section	.text.UART_IntErr,"ax",%progbits
 365              		.align	2
 366              		.thumb
 367              		.thumb_func
 369              	UART_IntErr:
 370              	.LFB32:
 163:comm.c        **** 
 164:comm.c        **** /*********************************************************************//**
 165:comm.c        ****  * @brief		UART Line Status Error callback
 166:comm.c        ****  * @param[in]	bLSErrType	UART Line Status Error Type
 167:comm.c        ****  * @return		None
 168:comm.c        ****  **********************************************************************/
 169:comm.c        **** static void UART_IntErr(uint8_t bLSErrType)
 170:comm.c        **** {
 371              		.loc 2 170 0
 372              		.cfi_startproc
 373              		@ args = 0, pretend = 0, frame = 16
 374              		@ frame_needed = 1, uses_anonymous_args = 0
 375              		@ link register save eliminated.
 376 0000 80B4     		push	{r7}
 377              		.cfi_def_cfa_offset 4
 378              		.cfi_offset 7, -4
 379 0002 85B0     		sub	sp, sp, #20
 380              		.cfi_def_cfa_offset 24
 381 0004 00AF     		add	r7, sp, #0
 382              		.cfi_def_cfa_register 7
 383 0006 0346     		mov	r3, r0
 384 0008 FB71     		strb	r3, [r7, #7]
 385              	.L33:
 171:comm.c        **** 	uint8_t test;
 172:comm.c        **** 	// Loop forever
 173:comm.c        **** 	while (1)
 174:comm.c        **** 	{
 175:comm.c        **** 		// For testing purpose
 176:comm.c        **** 		test = bLSErrType;
 386              		.loc 2 176 0 discriminator 1
 387 000a FB79     		ldrb	r3, [r7, #7]
 388 000c FB73     		strb	r3, [r7, #15]
 177:comm.c        **** 	}
 389              		.loc 2 177 0 discriminator 1
 390 000e FCE7     		b	.L33
 391              		.cfi_endproc
 392              	.LFE32:
 394              		.section	.text.UARTSend,"ax",%progbits
 395              		.align	2
 396              		.thumb
 397              		.thumb_func
 399              	UARTSend:
 400              	.LFB33:
 178:comm.c        **** }
 179:comm.c        **** 
 180:comm.c        **** /*********************************************************************//**
 181:comm.c        ****  * @brief		UART transmit function for interrupt mode (using ring buffers)
 182:comm.c        ****  * @param[in]	UARTPort	Selected UART peripheral used to send data,
 183:comm.c        ****  * 				should be UART0
 184:comm.c        ****  * @param[out]	txbuf Pointer to Transmit buffer
 185:comm.c        ****  * @param[in]	buflen Length of Transmit buffer
 186:comm.c        ****  * @return 		Number of bytes actually sent to the ring buffer
 187:comm.c        ****  **********************************************************************/
 188:comm.c        **** static uint32_t UARTSend(LPC_UART_TypeDef *UARTPort, uint8_t txbuf[], uint8_t buflen)
 189:comm.c        **** {
 401              		.loc 2 189 0
 402              		.cfi_startproc
 403              		@ args = 0, pretend = 0, frame = 24
 404              		@ frame_needed = 1, uses_anonymous_args = 0
 405 0000 80B5     		push	{r7, lr}
 406              		.cfi_def_cfa_offset 8
 407              		.cfi_offset 7, -8
 408              		.cfi_offset 14, -4
 409 0002 86B0     		sub	sp, sp, #24
 410              		.cfi_def_cfa_offset 32
 411 0004 00AF     		add	r7, sp, #0
 412              		.cfi_def_cfa_register 7
 413 0006 F860     		str	r0, [r7, #12]
 414 0008 B960     		str	r1, [r7, #8]
 415 000a 1346     		mov	r3, r2
 416 000c FB71     		strb	r3, [r7, #7]
 190:comm.c        **** 	uint8_t* data = &txbuf[0];
 417              		.loc 2 190 0
 418 000e BB68     		ldr	r3, [r7, #8]
 419 0010 7B61     		str	r3, [r7, #20]
 191:comm.c        **** 	uint32_t bytes = 0;
 420              		.loc 2 191 0
 421 0012 0023     		movs	r3, #0
 422 0014 3B61     		str	r3, [r7, #16]
 192:comm.c        **** 
 193:comm.c        **** 	/* Temporarily lock out UART transmit interrupts during this
 194:comm.c        **** 	 read so the UART transmit interrupt won't cause problems
 195:comm.c        **** 	 with the index values */
 196:comm.c        **** 	UART_IntConfig(UARTPort, UART_INTCFG_THRE, DISABLE);
 423              		.loc 2 196 0
 424 0016 0022     		movs	r2, #0
 425 0018 0121     		movs	r1, #1
 426 001a F868     		ldr	r0, [r7, #12]
 427 001c FFF7FEFF 		bl	UART_IntConfig
 197:comm.c        **** 
 198:comm.c        **** 	/* Loop until transmit run buffer is full or until n_bytes
 199:comm.c        **** 	 expires */
 200:comm.c        **** 	while ((buflen > 0) && (!__BUF_IS_FULL(rb.tx_head, rb.tx_tail)))
 428              		.loc 2 200 0
 429 0020 16E0     		b	.L35
 430              	.L37:
 201:comm.c        **** 	{
 202:comm.c        **** 		/* Write data from buffer into ring buffer */
 203:comm.c        **** 		rb.tx[rb.tx_head] = *data;
 431              		.loc 2 203 0
 432 0022 1A4B     		ldr	r3, .L41
 433 0024 1B68     		ldr	r3, [r3]
 434 0026 7A69     		ldr	r2, [r7, #20]
 435 0028 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 436 002a 184A     		ldr	r2, .L41
 437 002c 1344     		add	r3, r3, r2
 438 002e 0A46     		mov	r2, r1
 439 0030 1A74     		strb	r2, [r3, #16]
 204:comm.c        **** 		data++;
 440              		.loc 2 204 0
 441 0032 7B69     		ldr	r3, [r7, #20]
 442 0034 0133     		adds	r3, r3, #1
 443 0036 7B61     		str	r3, [r7, #20]
 205:comm.c        **** 
 206:comm.c        **** 		/* Increment head pointer */
 207:comm.c        **** 		__BUF_INCR(rb.tx_head);
 444              		.loc 2 207 0
 445 0038 144B     		ldr	r3, .L41
 446 003a 1B68     		ldr	r3, [r3]
 447 003c 0133     		adds	r3, r3, #1
 448 003e DBB2     		uxtb	r3, r3
 449 0040 124A     		ldr	r2, .L41
 450 0042 1360     		str	r3, [r2]
 208:comm.c        **** 
 209:comm.c        **** 		/* Increment data count and decrement buffer size count */
 210:comm.c        **** 		bytes++;
 451              		.loc 2 210 0
 452 0044 3B69     		ldr	r3, [r7, #16]
 453 0046 0133     		adds	r3, r3, #1
 454 0048 3B61     		str	r3, [r7, #16]
 211:comm.c        **** 		buflen--;
 455              		.loc 2 211 0
 456 004a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 457 004c 013B     		subs	r3, r3, #1
 458 004e FB71     		strb	r3, [r7, #7]
 459              	.L35:
 200:comm.c        **** 	{
 460              		.loc 2 200 0
 461 0050 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 462 0052 002B     		cmp	r3, #0
 463 0054 08D0     		beq	.L36
 200:comm.c        **** 	{
 464              		.loc 2 200 0 is_stmt 0 discriminator 1
 465 0056 0D4B     		ldr	r3, .L41
 466 0058 5A68     		ldr	r2, [r3, #4]
 467 005a 0C4B     		ldr	r3, .L41
 468 005c 1B68     		ldr	r3, [r3]
 469 005e 0133     		adds	r3, r3, #1
 470 0060 5340     		eors	r3, r3, r2
 471 0062 DBB2     		uxtb	r3, r3
 472 0064 002B     		cmp	r3, #0
 473 0066 DCD1     		bne	.L37
 474              	.L36:
 212:comm.c        **** 	}
 213:comm.c        **** 
 214:comm.c        **** 	/*
 215:comm.c        **** 	 * Check if current Tx interrupt enable is reset,
 216:comm.c        **** 	 * that means the Tx interrupt must be re-enabled
 217:comm.c        **** 	 * due to call UART_IntTransmit() function to trigger
 218:comm.c        **** 	 * this interrupt type
 219:comm.c        **** 	 */
 220:comm.c        **** 	if (TxIntStat == RESET)
 475              		.loc 2 220 0 is_stmt 1
 476 0068 094B     		ldr	r3, .L41+4
 477 006a 1B78     		ldrb	r3, [r3]
 478 006c DBB2     		uxtb	r3, r3
 479 006e 002B     		cmp	r3, #0
 480 0070 02D1     		bne	.L38
 221:comm.c        **** 	{
 222:comm.c        **** 		UART_IntTransmit();
 481              		.loc 2 222 0
 482 0072 FFF7FEFF 		bl	UART_IntTransmit
 483 0076 04E0     		b	.L39
 484              	.L38:
 223:comm.c        **** 	}
 224:comm.c        **** 	/*
 225:comm.c        **** 	 * Otherwise, re-enables Tx Interrupt
 226:comm.c        **** 	 */
 227:comm.c        **** 	else
 228:comm.c        **** 	{
 229:comm.c        **** 		UART_IntConfig(UARTPort, UART_INTCFG_THRE, ENABLE);
 485              		.loc 2 229 0
 486 0078 0122     		movs	r2, #1
 487 007a 0121     		movs	r1, #1
 488 007c F868     		ldr	r0, [r7, #12]
 489 007e FFF7FEFF 		bl	UART_IntConfig
 490              	.L39:
 230:comm.c        **** 	}
 231:comm.c        **** 
 232:comm.c        **** 	return bytes;
 491              		.loc 2 232 0
 492 0082 3B69     		ldr	r3, [r7, #16]
 233:comm.c        **** }
 493              		.loc 2 233 0
 494 0084 1846     		mov	r0, r3
 495 0086 1837     		adds	r7, r7, #24
 496              		.cfi_def_cfa_offset 8
 497 0088 BD46     		mov	sp, r7
 498              		.cfi_def_cfa_register 13
 499              		@ sp needed
 500 008a 80BD     		pop	{r7, pc}
 501              	.L42:
 502              		.align	2
 503              	.L41:
 504 008c 00000000 		.word	rb
 505 0090 00000000 		.word	TxIntStat
 506              		.cfi_endproc
 507              	.LFE33:
 509              		.section	.text.UARTReceive,"ax",%progbits
 510              		.align	2
 511              		.thumb
 512              		.thumb_func
 514              	UARTReceive:
 515              	.LFB34:
 234:comm.c        **** 
 235:comm.c        **** /*********************************************************************//**
 236:comm.c        ****  * @brief		UART read function for interrupt mode (using ring buffers)
 237:comm.c        ****  * @param[in]	UARTPort	Selected UART peripheral used to send data,
 238:comm.c        ****  * 				should be UART0
 239:comm.c        ****  * @param[out]	rxbuf Pointer to Received buffer
 240:comm.c        ****  * @param[in]	buflen Length of Received buffer
 241:comm.c        ****  * @return 		Number of bytes actually read from the ring buffer
 242:comm.c        ****  **********************************************************************/
 243:comm.c        **** static uint32_t UARTReceive(LPC_UART_TypeDef *UARTPort, uint8_t *rxbuf, uint8_t buflen)
 244:comm.c        **** {
 516              		.loc 2 244 0
 517              		.cfi_startproc
 518              		@ args = 0, pretend = 0, frame = 24
 519              		@ frame_needed = 1, uses_anonymous_args = 0
 520 0000 80B5     		push	{r7, lr}
 521              		.cfi_def_cfa_offset 8
 522              		.cfi_offset 7, -8
 523              		.cfi_offset 14, -4
 524 0002 86B0     		sub	sp, sp, #24
 525              		.cfi_def_cfa_offset 32
 526 0004 00AF     		add	r7, sp, #0
 527              		.cfi_def_cfa_register 7
 528 0006 F860     		str	r0, [r7, #12]
 529 0008 B960     		str	r1, [r7, #8]
 530 000a 1346     		mov	r3, r2
 531 000c FB71     		strb	r3, [r7, #7]
 245:comm.c        **** 	uint8_t *data = (uint8_t *) rxbuf;
 532              		.loc 2 245 0
 533 000e BB68     		ldr	r3, [r7, #8]
 534 0010 7B61     		str	r3, [r7, #20]
 246:comm.c        **** 	uint32_t bytes = 0;
 535              		.loc 2 246 0
 536 0012 0023     		movs	r3, #0
 537 0014 3B61     		str	r3, [r7, #16]
 247:comm.c        **** 
 248:comm.c        **** 	/* Temporarily lock out UART receive interrupts during this
 249:comm.c        **** 	 read so the UART receive interrupt won't cause problems
 250:comm.c        **** 	 with the index values */
 251:comm.c        **** 	UART_IntConfig(UARTPort, UART_INTCFG_RBR, DISABLE);
 538              		.loc 2 251 0
 539 0016 0022     		movs	r2, #0
 540 0018 0021     		movs	r1, #0
 541 001a F868     		ldr	r0, [r7, #12]
 542 001c FFF7FEFF 		bl	UART_IntConfig
 252:comm.c        **** 
 253:comm.c        **** 	/* Loop until receive buffer ring is empty or
 254:comm.c        **** 	 until max_bytes expires */
 255:comm.c        **** 	while ((buflen > 0) && (!(__BUF_IS_EMPTY(rb.rx_head, rb.rx_tail))))
 543              		.loc 2 255 0
 544 0020 17E0     		b	.L44
 545              	.L46:
 256:comm.c        **** 	{
 257:comm.c        **** 		/* Read data from ring buffer into user buffer */
 258:comm.c        **** 		*data = rb.rx[rb.rx_tail];
 546              		.loc 2 258 0
 547 0022 164B     		ldr	r3, .L48
 548 0024 DB68     		ldr	r3, [r3, #12]
 549 0026 154A     		ldr	r2, .L48
 550 0028 1344     		add	r3, r3, r2
 551 002a 93F81031 		ldrb	r3, [r3, #272]
 552 002e DAB2     		uxtb	r2, r3
 553 0030 7B69     		ldr	r3, [r7, #20]
 554 0032 1A70     		strb	r2, [r3]
 259:comm.c        **** 		data++;
 555              		.loc 2 259 0
 556 0034 7B69     		ldr	r3, [r7, #20]
 557 0036 0133     		adds	r3, r3, #1
 558 0038 7B61     		str	r3, [r7, #20]
 260:comm.c        **** 
 261:comm.c        **** 		/* Update tail pointer */
 262:comm.c        **** 		__BUF_INCR(rb.rx_tail);
 559              		.loc 2 262 0
 560 003a 104B     		ldr	r3, .L48
 561 003c DB68     		ldr	r3, [r3, #12]
 562 003e 0133     		adds	r3, r3, #1
 563 0040 DBB2     		uxtb	r3, r3
 564 0042 0E4A     		ldr	r2, .L48
 565 0044 D360     		str	r3, [r2, #12]
 263:comm.c        **** 
 264:comm.c        **** 		/* Increment data count and decrement buffer size count */
 265:comm.c        **** 		bytes++;
 566              		.loc 2 265 0
 567 0046 3B69     		ldr	r3, [r7, #16]
 568 0048 0133     		adds	r3, r3, #1
 569 004a 3B61     		str	r3, [r7, #16]
 266:comm.c        **** 		buflen--;
 570              		.loc 2 266 0
 571 004c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 572 004e 013B     		subs	r3, r3, #1
 573 0050 FB71     		strb	r3, [r7, #7]
 574              	.L44:
 255:comm.c        **** 	{
 575              		.loc 2 255 0
 576 0052 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 577 0054 002B     		cmp	r3, #0
 578 0056 07D0     		beq	.L45
 255:comm.c        **** 	{
 579              		.loc 2 255 0 is_stmt 0 discriminator 1
 580 0058 084B     		ldr	r3, .L48
 581 005a 9A68     		ldr	r2, [r3, #8]
 582 005c 074B     		ldr	r3, .L48
 583 005e DB68     		ldr	r3, [r3, #12]
 584 0060 5340     		eors	r3, r3, r2
 585 0062 DBB2     		uxtb	r3, r3
 586 0064 002B     		cmp	r3, #0
 587 0066 DCD1     		bne	.L46
 588              	.L45:
 267:comm.c        **** 	}
 268:comm.c        **** 
 269:comm.c        **** 	/* Re-enable UART interrupts */
 270:comm.c        **** 	UART_IntConfig(UARTPort, UART_INTCFG_RBR, ENABLE);
 589              		.loc 2 270 0 is_stmt 1
 590 0068 0122     		movs	r2, #1
 591 006a 0021     		movs	r1, #0
 592 006c F868     		ldr	r0, [r7, #12]
 593 006e FFF7FEFF 		bl	UART_IntConfig
 271:comm.c        **** 
 272:comm.c        **** 	return bytes;
 594              		.loc 2 272 0
 595 0072 3B69     		ldr	r3, [r7, #16]
 273:comm.c        **** }
 596              		.loc 2 273 0
 597 0074 1846     		mov	r0, r3
 598 0076 1837     		adds	r7, r7, #24
 599              		.cfi_def_cfa_offset 8
 600 0078 BD46     		mov	sp, r7
 601              		.cfi_def_cfa_register 13
 602              		@ sp needed
 603 007a 80BD     		pop	{r7, pc}
 604              	.L49:
 605              		.align	2
 606              	.L48:
 607 007c 00000000 		.word	rb
 608              		.cfi_endproc
 609              	.LFE34:
 611              		.section	.text.uart_init_intern,"ax",%progbits
 612              		.align	2
 613              		.thumb
 614              		.thumb_func
 616              	uart_init_intern:
 617              	.LFB35:
 274:comm.c        **** 
 275:comm.c        **** /*********************************************************************//**
 276:comm.c        ****  * @brief	UART init sub-routine
 277:comm.c        ****  **********************************************************************/
 278:comm.c        **** static int uart_init_intern(void)
 279:comm.c        **** {
 618              		.loc 2 279 0
 619              		.cfi_startproc
 620              		@ args = 0, pretend = 0, frame = 24
 621              		@ frame_needed = 1, uses_anonymous_args = 0
 622 0000 80B5     		push	{r7, lr}
 623              		.cfi_def_cfa_offset 8
 624              		.cfi_offset 7, -8
 625              		.cfi_offset 14, -4
 626 0002 86B0     		sub	sp, sp, #24
 627              		.cfi_def_cfa_offset 32
 628 0004 00AF     		add	r7, sp, #0
 629              		.cfi_def_cfa_register 7
 280:comm.c        **** 	// UART Configuration structure variable
 281:comm.c        **** 	UART_CFG_Type UARTConfigStruct;
 282:comm.c        **** 	// UART FIFO configuration Struct variable
 283:comm.c        **** 	UART_FIFO_CFG_Type UARTFIFOConfigStruct;
 284:comm.c        **** 	// Pin configuration for UART0
 285:comm.c        **** 	PINSEL_CFG_Type PinCfg;
 286:comm.c        **** 
 287:comm.c        **** #if (UART_PORT == 0)
 288:comm.c        **** 	/*
 289:comm.c        **** 	 * Initialize UART0 pin connect
 290:comm.c        **** 	 */
 291:comm.c        **** 	PinCfg.Funcnum = 1;
 630              		.loc 2 291 0
 631 0006 0123     		movs	r3, #1
 632 0008 BB71     		strb	r3, [r7, #6]
 292:comm.c        **** 	PinCfg.OpenDrain = 0;
 633              		.loc 2 292 0
 634 000a 0023     		movs	r3, #0
 635 000c 3B72     		strb	r3, [r7, #8]
 293:comm.c        **** 	PinCfg.Pinmode = 0;
 636              		.loc 2 293 0
 637 000e 0023     		movs	r3, #0
 638 0010 FB71     		strb	r3, [r7, #7]
 294:comm.c        **** 	PinCfg.Pinnum = 2;
 639              		.loc 2 294 0
 640 0012 0223     		movs	r3, #2
 641 0014 7B71     		strb	r3, [r7, #5]
 295:comm.c        **** 	PinCfg.Portnum = 0;
 642              		.loc 2 295 0
 643 0016 0023     		movs	r3, #0
 644 0018 3B71     		strb	r3, [r7, #4]
 296:comm.c        **** 	PINSEL_ConfigPin(&PinCfg);
 645              		.loc 2 296 0
 646 001a 3B1D     		adds	r3, r7, #4
 647 001c 1846     		mov	r0, r3
 648 001e FFF7FEFF 		bl	PINSEL_ConfigPin
 297:comm.c        **** 	PinCfg.Pinnum = 3;
 649              		.loc 2 297 0
 650 0022 0323     		movs	r3, #3
 651 0024 7B71     		strb	r3, [r7, #5]
 298:comm.c        **** 	PINSEL_ConfigPin(&PinCfg);
 652              		.loc 2 298 0
 653 0026 3B1D     		adds	r3, r7, #4
 654 0028 1846     		mov	r0, r3
 655 002a FFF7FEFF 		bl	PINSEL_ConfigPin
 299:comm.c        **** #endif
 300:comm.c        **** 
 301:comm.c        **** #if (UART_PORT == 1)
 302:comm.c        **** 	/*
 303:comm.c        **** 	 * Initialize UART1 pin connect
 304:comm.c        **** 	 */
 305:comm.c        **** 	PinCfg.Funcnum = 2;
 306:comm.c        **** 	PinCfg.OpenDrain = 0;
 307:comm.c        **** 	PinCfg.Pinmode = 0;
 308:comm.c        **** 	PinCfg.Pinnum = 0;
 309:comm.c        **** 	PinCfg.Portnum = 2;
 310:comm.c        **** 	PINSEL_ConfigPin(&PinCfg);
 311:comm.c        **** 	PinCfg.Pinnum = 1;
 312:comm.c        **** 	PINSEL_ConfigPin(&PinCfg);
 313:comm.c        **** #endif
 314:comm.c        **** 
 315:comm.c        **** 	/* Initialize UART Configuration parameter structure to default state:
 316:comm.c        **** 	 * Baudrate = 9600bps
 317:comm.c        **** 	 * 8 data bit
 318:comm.c        **** 	 * 1 Stop bit
 319:comm.c        **** 	 * None parity
 320:comm.c        **** 	 */
 321:comm.c        **** 	UART_ConfigStructInit(&UARTConfigStruct);
 656              		.loc 2 321 0
 657 002e 07F11003 		add	r3, r7, #16
 658 0032 1846     		mov	r0, r3
 659 0034 FFF7FEFF 		bl	UART_ConfigStructInit
 322:comm.c        **** 	// Re-configure baud-rate to 115200bps
 323:comm.c        **** 	UARTConfigStruct.Baud_rate = 115200;
 660              		.loc 2 323 0
 661 0038 4FF4E133 		mov	r3, #115200
 662 003c 3B61     		str	r3, [r7, #16]
 324:comm.c        **** 
 325:comm.c        **** 	// Initialize UART0 peripheral with given to corresponding parameter
 326:comm.c        **** 	UART_Init(TEST_UART, &UARTConfigStruct);
 663              		.loc 2 326 0
 664 003e 07F11003 		add	r3, r7, #16
 665 0042 1946     		mov	r1, r3
 666 0044 2248     		ldr	r0, .L52
 667 0046 FFF7FEFF 		bl	UART_Init
 327:comm.c        **** 
 328:comm.c        **** 	/* Initialize FIFOConfigStruct to default state:
 329:comm.c        **** 	 * 				- FIFO_DMAMode = DISABLE
 330:comm.c        **** 	 * 				- FIFO_Level = UART_FIFO_TRGLEV0
 331:comm.c        **** 	 * 				- FIFO_ResetRxBuf = ENABLE
 332:comm.c        **** 	 * 				- FIFO_ResetTxBuf = ENABLE
 333:comm.c        **** 	 * 				- FIFO_State = ENABLE
 334:comm.c        **** 	 */
 335:comm.c        **** 	UART_FIFOConfigStructInit(&UARTFIFOConfigStruct);
 668              		.loc 2 335 0
 669 004a 07F10C03 		add	r3, r7, #12
 670 004e 1846     		mov	r0, r3
 671 0050 FFF7FEFF 		bl	UART_FIFOConfigStructInit
 336:comm.c        **** 
 337:comm.c        **** 	// Initialize FIFO for UART0 peripheral
 338:comm.c        **** 	UART_FIFOConfig(TEST_UART, &UARTFIFOConfigStruct);
 672              		.loc 2 338 0
 673 0054 07F10C03 		add	r3, r7, #12
 674 0058 1946     		mov	r1, r3
 675 005a 1D48     		ldr	r0, .L52
 676 005c FFF7FEFF 		bl	UART_FIFOConfig
 339:comm.c        **** 
 340:comm.c        **** 	// Setup callback ---------------
 341:comm.c        **** 	// Receive callback
 342:comm.c        **** 	UART_SetupCbs(TEST_UART, 0, (void *) UART_IntReceive);
 677              		.loc 2 342 0
 678 0060 1C4A     		ldr	r2, .L52+4
 679 0062 0021     		movs	r1, #0
 680 0064 1A48     		ldr	r0, .L52
 681 0066 FFF7FEFF 		bl	UART_SetupCbs
 343:comm.c        **** 	// Transmit callback
 344:comm.c        **** 	UART_SetupCbs(TEST_UART, 1, (void *) UART_IntTransmit);
 682              		.loc 2 344 0
 683 006a 1B4A     		ldr	r2, .L52+8
 684 006c 0121     		movs	r1, #1
 685 006e 1848     		ldr	r0, .L52
 686 0070 FFF7FEFF 		bl	UART_SetupCbs
 345:comm.c        **** 	// Line Status Error callback
 346:comm.c        **** 	UART_SetupCbs(TEST_UART, 3, (void *) UART_IntErr);
 687              		.loc 2 346 0
 688 0074 194A     		ldr	r2, .L52+12
 689 0076 0321     		movs	r1, #3
 690 0078 1548     		ldr	r0, .L52
 691 007a FFF7FEFF 		bl	UART_SetupCbs
 347:comm.c        **** 
 348:comm.c        **** 	// Enable UART Transmit
 349:comm.c        **** 	UART_TxCmd(TEST_UART, ENABLE);
 692              		.loc 2 349 0
 693 007e 0121     		movs	r1, #1
 694 0080 1348     		ldr	r0, .L52
 695 0082 FFF7FEFF 		bl	UART_TxCmd
 350:comm.c        **** 
 351:comm.c        **** 	/* Enable UART Rx interrupt */
 352:comm.c        **** 	UART_IntConfig(TEST_UART, UART_INTCFG_RBR, ENABLE);
 696              		.loc 2 352 0
 697 0086 0122     		movs	r2, #1
 698 0088 0021     		movs	r1, #0
 699 008a 1148     		ldr	r0, .L52
 700 008c FFF7FEFF 		bl	UART_IntConfig
 353:comm.c        **** 	/* Enable UART line status interrupt */
 354:comm.c        **** 	UART_IntConfig(TEST_UART, UART_INTCFG_RLS, ENABLE);
 701              		.loc 2 354 0
 702 0090 0122     		movs	r2, #1
 703 0092 0221     		movs	r1, #2
 704 0094 0E48     		ldr	r0, .L52
 705 0096 FFF7FEFF 		bl	UART_IntConfig
 355:comm.c        **** 	/*
 356:comm.c        **** 	 * Do not enable transmit interrupt here, since it is handled by
 357:comm.c        **** 	 * UART_Send() function, just to reset Tx Interrupt state for the
 358:comm.c        **** 	 * first time
 359:comm.c        **** 	 */
 360:comm.c        **** 	TxIntStat = RESET;
 706              		.loc 2 360 0
 707 009a 114B     		ldr	r3, .L52+16
 708 009c 0022     		movs	r2, #0
 709 009e 1A70     		strb	r2, [r3]
 361:comm.c        **** 
 362:comm.c        **** 	// Reset ring buf head and tail idx
 363:comm.c        **** 	__BUF_RESET(rb.rx_head);
 710              		.loc 2 363 0
 711 00a0 104B     		ldr	r3, .L52+20
 712 00a2 0022     		movs	r2, #0
 713 00a4 9A60     		str	r2, [r3, #8]
 364:comm.c        **** 	__BUF_RESET(rb.rx_tail);
 714              		.loc 2 364 0
 715 00a6 0F4B     		ldr	r3, .L52+20
 716 00a8 0022     		movs	r2, #0
 717 00aa DA60     		str	r2, [r3, #12]
 365:comm.c        **** 	__BUF_RESET(rb.tx_head);
 718              		.loc 2 365 0
 719 00ac 0D4B     		ldr	r3, .L52+20
 720 00ae 0022     		movs	r2, #0
 721 00b0 1A60     		str	r2, [r3]
 366:comm.c        **** 	__BUF_RESET(rb.tx_tail);
 722              		.loc 2 366 0
 723 00b2 0C4B     		ldr	r3, .L52+20
 724 00b4 0022     		movs	r2, #0
 725 00b6 5A60     		str	r2, [r3, #4]
 367:comm.c        **** 
 368:comm.c        **** #if (UART_PORT == 0)
 369:comm.c        **** 	/* preemption = 1, sub-priority = 1 */
 370:comm.c        **** 	NVIC_SetPriority(UART0_IRQn, ((0x01 << 3) | 0x01));
 726              		.loc 2 370 0
 727 00b8 0921     		movs	r1, #9
 728 00ba 0520     		movs	r0, #5
 729 00bc FFF7FEFF 		bl	NVIC_SetPriority
 371:comm.c        **** 	/* Enable Interrupt for UART0 channel */
 372:comm.c        **** 	NVIC_EnableIRQ(UART0_IRQn);
 730              		.loc 2 372 0
 731 00c0 0520     		movs	r0, #5
 732 00c2 FFF7FEFF 		bl	NVIC_EnableIRQ
 373:comm.c        **** #endif
 374:comm.c        **** 
 375:comm.c        **** #if (UART_PORT == 1)
 376:comm.c        **** 	/* preemption = 1, sub-priority = 1 */
 377:comm.c        **** 	NVIC_SetPriority(UART1_IRQn, ((0x01<<3)|0x01));
 378:comm.c        **** 	/* Enable Interrupt for UART0 channel */
 379:comm.c        **** 	NVIC_EnableIRQ(UART1_IRQn);
 380:comm.c        **** #endif
 381:comm.c        **** 
 382:comm.c        **** 	return 0;
 733              		.loc 2 382 0
 734 00c6 0023     		movs	r3, #0
 383:comm.c        **** }
 735              		.loc 2 383 0
 736 00c8 1846     		mov	r0, r3
 737 00ca 1837     		adds	r7, r7, #24
 738              		.cfi_def_cfa_offset 8
 739 00cc BD46     		mov	sp, r7
 740              		.cfi_def_cfa_register 13
 741              		@ sp needed
 742 00ce 80BD     		pop	{r7, pc}
 743              	.L53:
 744              		.align	2
 745              	.L52:
 746 00d0 00C00040 		.word	1073790976
 747 00d4 00000000 		.word	UART_IntReceive
 748 00d8 00000000 		.word	UART_IntTransmit
 749 00dc 00000000 		.word	UART_IntErr
 750 00e0 00000000 		.word	TxIntStat
 751 00e4 00000000 		.word	rb
 752              		.cfi_endproc
 753              	.LFE35:
 755              		.section	.text.comm_test,"ax",%progbits
 756              		.align	2
 757              		.global	comm_test
 758              		.thumb
 759              		.thumb_func
 761              	comm_test:
 762              	.LFB36:
 384:comm.c        **** 
 385:comm.c        **** /************************** term_io - Interface  *************************/
 386:comm.c        **** 
 387:comm.c        **** int comm_test(void)
 388:comm.c        **** {
 763              		.loc 2 388 0
 764              		.cfi_startproc
 765              		@ args = 0, pretend = 0, frame = 0
 766              		@ frame_needed = 1, uses_anonymous_args = 0
 767              		@ link register save eliminated.
 768 0000 80B4     		push	{r7}
 769              		.cfi_def_cfa_offset 4
 770              		.cfi_offset 7, -4
 771 0002 00AF     		add	r7, sp, #0
 772              		.cfi_def_cfa_register 7
 389:comm.c        **** 	return ( __BUF_IS_EMPTY(rb.rx_head, rb.rx_tail) ) ? 0 : 1;
 773              		.loc 2 389 0
 774 0004 074B     		ldr	r3, .L56
 775 0006 9A68     		ldr	r2, [r3, #8]
 776 0008 064B     		ldr	r3, .L56
 777 000a DB68     		ldr	r3, [r3, #12]
 778 000c 5340     		eors	r3, r3, r2
 779 000e DBB2     		uxtb	r3, r3
 780 0010 002B     		cmp	r3, #0
 781 0012 14BF     		ite	ne
 782 0014 0123     		movne	r3, #1
 783 0016 0023     		moveq	r3, #0
 784 0018 DBB2     		uxtb	r3, r3
 390:comm.c        **** }
 785              		.loc 2 390 0
 786 001a 1846     		mov	r0, r3
 787 001c BD46     		mov	sp, r7
 788              		.cfi_def_cfa_register 13
 789              		@ sp needed
 790 001e 80BC     		pop	{r7}
 791              		.cfi_restore 7
 792              		.cfi_def_cfa_offset 0
 793 0020 7047     		bx	lr
 794              	.L57:
 795 0022 00BF     		.align	2
 796              	.L56:
 797 0024 00000000 		.word	rb
 798              		.cfi_endproc
 799              	.LFE36:
 801              		.section	.text.comm_get,"ax",%progbits
 802              		.align	2
 803              		.global	comm_get
 804              		.thumb
 805              		.thumb_func
 807              	comm_get:
 808              	.LFB37:
 391:comm.c        **** 
 392:comm.c        **** char comm_get(void)
 393:comm.c        **** {
 809              		.loc 2 393 0
 810              		.cfi_startproc
 811              		@ args = 0, pretend = 0, frame = 8
 812              		@ frame_needed = 1, uses_anonymous_args = 0
 813 0000 80B5     		push	{r7, lr}
 814              		.cfi_def_cfa_offset 8
 815              		.cfi_offset 7, -8
 816              		.cfi_offset 14, -4
 817 0002 82B0     		sub	sp, sp, #8
 818              		.cfi_def_cfa_offset 16
 819 0004 00AF     		add	r7, sp, #0
 820              		.cfi_def_cfa_register 7
 394:comm.c        **** 	uint8_t buf[] = {'\0', '\0' };
 821              		.loc 2 394 0
 822 0006 0023     		movs	r3, #0
 823 0008 3B71     		strb	r3, [r7, #4]
 824 000a 0023     		movs	r3, #0
 825 000c 7B71     		strb	r3, [r7, #5]
 395:comm.c        **** 	while ( UARTReceive(TEST_UART, buf, 1) < 1 ) { ; }
 826              		.loc 2 395 0
 827 000e 00BF     		nop
 828              	.L59:
 829              		.loc 2 395 0 is_stmt 0 discriminator 1
 830 0010 3B1D     		adds	r3, r7, #4
 831 0012 0122     		movs	r2, #1
 832 0014 1946     		mov	r1, r3
 833 0016 0548     		ldr	r0, .L61
 834 0018 FFF7FEFF 		bl	UARTReceive
 835 001c 0346     		mov	r3, r0
 836 001e 002B     		cmp	r3, #0
 837 0020 F6D0     		beq	.L59
 396:comm.c        **** 	return (char)buf[0];
 838              		.loc 2 396 0 is_stmt 1
 839 0022 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 397:comm.c        **** }
 840              		.loc 2 397 0
 841 0024 1846     		mov	r0, r3
 842 0026 0837     		adds	r7, r7, #8
 843              		.cfi_def_cfa_offset 8
 844 0028 BD46     		mov	sp, r7
 845              		.cfi_def_cfa_register 13
 846              		@ sp needed
 847 002a 80BD     		pop	{r7, pc}
 848              	.L62:
 849              		.align	2
 850              	.L61:
 851 002c 00C00040 		.word	1073790976
 852              		.cfi_endproc
 853              	.LFE37:
 855              		.section	.text.comm_put,"ax",%progbits
 856              		.align	2
 857              		.global	comm_put
 858              		.thumb
 859              		.thumb_func
 861              	comm_put:
 862              	.LFB38:
 398:comm.c        **** 
 399:comm.c        **** void comm_put(char d)
 400:comm.c        **** {
 863              		.loc 2 400 0
 864              		.cfi_startproc
 865              		@ args = 0, pretend = 0, frame = 16
 866              		@ frame_needed = 1, uses_anonymous_args = 0
 867 0000 80B5     		push	{r7, lr}
 868              		.cfi_def_cfa_offset 8
 869              		.cfi_offset 7, -8
 870              		.cfi_offset 14, -4
 871 0002 84B0     		sub	sp, sp, #16
 872              		.cfi_def_cfa_offset 24
 873 0004 00AF     		add	r7, sp, #0
 874              		.cfi_def_cfa_register 7
 875 0006 0346     		mov	r3, r0
 876 0008 FB71     		strb	r3, [r7, #7]
 401:comm.c        **** 	uint8_t buf[2];
 402:comm.c        **** 
 403:comm.c        **** 	buf[0] = (uint8_t)d;
 877              		.loc 2 403 0
 878 000a FB79     		ldrb	r3, [r7, #7]
 879 000c 3B73     		strb	r3, [r7, #12]
 404:comm.c        **** 	while ( UARTSend(TEST_UART, buf, 1) < 1 ) { ; }
 880              		.loc 2 404 0
 881 000e 00BF     		nop
 882              	.L64:
 883              		.loc 2 404 0 is_stmt 0 discriminator 1
 884 0010 07F10C03 		add	r3, r7, #12
 885 0014 0122     		movs	r2, #1
 886 0016 1946     		mov	r1, r3
 887 0018 0448     		ldr	r0, .L65
 888 001a FFF7FEFF 		bl	UARTSend
 889 001e 0346     		mov	r3, r0
 890 0020 002B     		cmp	r3, #0
 891 0022 F5D0     		beq	.L64
 405:comm.c        **** }
 892              		.loc 2 405 0 is_stmt 1
 893 0024 00BF     		nop
 894 0026 1037     		adds	r7, r7, #16
 895              		.cfi_def_cfa_offset 8
 896 0028 BD46     		mov	sp, r7
 897              		.cfi_def_cfa_register 13
 898              		@ sp needed
 899 002a 80BD     		pop	{r7, pc}
 900              	.L66:
 901              		.align	2
 902              	.L65:
 903 002c 00C00040 		.word	1073790976
 904              		.cfi_endproc
 905              	.LFE38:
 907              		.section	.text.comm_puts,"ax",%progbits
 908              		.align	2
 909              		.global	comm_puts
 910              		.thumb
 911              		.thumb_func
 913              	comm_puts:
 914              	.LFB39:
 406:comm.c        **** 
 407:comm.c        **** void comm_puts(const char* s)
 408:comm.c        **** {
 915              		.loc 2 408 0
 916              		.cfi_startproc
 917              		@ args = 0, pretend = 0, frame = 16
 918              		@ frame_needed = 1, uses_anonymous_args = 0
 919 0000 80B5     		push	{r7, lr}
 920              		.cfi_def_cfa_offset 8
 921              		.cfi_offset 7, -8
 922              		.cfi_offset 14, -4
 923 0002 84B0     		sub	sp, sp, #16
 924              		.cfi_def_cfa_offset 24
 925 0004 00AF     		add	r7, sp, #0
 926              		.cfi_def_cfa_register 7
 927 0006 7860     		str	r0, [r7, #4]
 409:comm.c        **** 	char c;
 410:comm.c        **** 	while ( ( c = *s++ ) != '\0' ) {
 928              		.loc 2 410 0
 929 0008 03E0     		b	.L68
 930              	.L69:
 411:comm.c        **** 		comm_put(c);
 931              		.loc 2 411 0
 932 000a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 933 000c 1846     		mov	r0, r3
 934 000e FFF7FEFF 		bl	comm_put
 935              	.L68:
 410:comm.c        **** 		comm_put(c);
 936              		.loc 2 410 0
 937 0012 7B68     		ldr	r3, [r7, #4]
 938 0014 5A1C     		adds	r2, r3, #1
 939 0016 7A60     		str	r2, [r7, #4]
 940 0018 1B78     		ldrb	r3, [r3]
 941 001a FB73     		strb	r3, [r7, #15]
 942 001c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 943 001e 002B     		cmp	r3, #0
 944 0020 F3D1     		bne	.L69
 412:comm.c        **** 	}
 413:comm.c        **** }
 945              		.loc 2 413 0
 946 0022 00BF     		nop
 947 0024 1037     		adds	r7, r7, #16
 948              		.cfi_def_cfa_offset 8
 949 0026 BD46     		mov	sp, r7
 950              		.cfi_def_cfa_register 13
 951              		@ sp needed
 952 0028 80BD     		pop	{r7, pc}
 953              		.cfi_endproc
 954              	.LFE39:
 956 002a 00BF     		.section	.text.comm_init,"ax",%progbits
 957              		.align	2
 958              		.global	comm_init
 959              		.thumb
 960              		.thumb_func
 962              	comm_init:
 963              	.LFB40:
 414:comm.c        **** 
 415:comm.c        **** void comm_init(void)
 416:comm.c        **** {
 964              		.loc 2 416 0
 965              		.cfi_startproc
 966              		@ args = 0, pretend = 0, frame = 0
 967              		@ frame_needed = 1, uses_anonymous_args = 0
 968 0000 80B5     		push	{r7, lr}
 969              		.cfi_def_cfa_offset 8
 970              		.cfi_offset 7, -8
 971              		.cfi_offset 14, -4
 972 0002 00AF     		add	r7, sp, #0
 973              		.cfi_def_cfa_register 7
 417:comm.c        **** 	uart_init_intern();
 974              		.loc 2 417 0
 975 0004 FFF7FEFF 		bl	uart_init_intern
 418:comm.c        **** }
 976              		.loc 2 418 0
 977 0008 00BF     		nop
 978 000a 80BD     		pop	{r7, pc}
 979              		.cfi_endproc
 980              	.LFE40:
 982              		.section	.text.comm_txbusy,"ax",%progbits
 983              		.align	2
 984              		.global	comm_txbusy
 985              		.thumb
 986              		.thumb_func
 988              	comm_txbusy:
 989              	.LFB41:
 419:comm.c        **** 
 420:comm.c        **** int comm_txbusy(void)
 421:comm.c        **** {
 990              		.loc 2 421 0
 991              		.cfi_startproc
 992              		@ args = 0, pretend = 0, frame = 0
 993              		@ frame_needed = 1, uses_anonymous_args = 0
 994 0000 80B5     		push	{r7, lr}
 995              		.cfi_def_cfa_offset 8
 996              		.cfi_offset 7, -8
 997              		.cfi_offset 14, -4
 998 0002 00AF     		add	r7, sp, #0
 999              		.cfi_def_cfa_register 7
 422:comm.c        **** 	return ( UART_CheckBusy(TEST_UART) == SET ) ? 1 : 0;
 1000              		.loc 2 422 0
 1001 0004 0548     		ldr	r0, .L73
 1002 0006 FFF7FEFF 		bl	UART_CheckBusy
 1003 000a 0346     		mov	r3, r0
 1004 000c 012B     		cmp	r3, #1
 1005 000e 0CBF     		ite	eq
 1006 0010 0123     		moveq	r3, #1
 1007 0012 0023     		movne	r3, #0
 1008 0014 DBB2     		uxtb	r3, r3
 423:comm.c        **** }
 1009              		.loc 2 423 0
 1010 0016 1846     		mov	r0, r3
 1011 0018 80BD     		pop	{r7, pc}
 1012              	.L74:
 1013 001a 00BF     		.align	2
 1014              	.L73:
 1015 001c 00C00040 		.word	1073790976
 1016              		.cfi_endproc
 1017              	.LFE41:
 1019              		.section	.text.xcomm_put,"ax",%progbits
 1020              		.align	2
 1021              		.global	xcomm_put
 1022              		.thumb
 1023              		.thumb_func
 1025              	xcomm_put:
 1026              	.LFB42:
 424:comm.c        **** 
 425:comm.c        **** void xcomm_put(unsigned char c)
 426:comm.c        **** {
 1027              		.loc 2 426 0
 1028              		.cfi_startproc
 1029              		@ args = 0, pretend = 0, frame = 8
 1030              		@ frame_needed = 1, uses_anonymous_args = 0
 1031 0000 80B5     		push	{r7, lr}
 1032              		.cfi_def_cfa_offset 8
 1033              		.cfi_offset 7, -8
 1034              		.cfi_offset 14, -4
 1035 0002 82B0     		sub	sp, sp, #8
 1036              		.cfi_def_cfa_offset 16
 1037 0004 00AF     		add	r7, sp, #0
 1038              		.cfi_def_cfa_register 7
 1039 0006 0346     		mov	r3, r0
 1040 0008 FB71     		strb	r3, [r7, #7]
 427:comm.c        **** 	comm_put((char)c);
 1041              		.loc 2 427 0
 1042 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1043 000c 1846     		mov	r0, r3
 1044 000e FFF7FEFF 		bl	comm_put
 428:comm.c        **** }
 1045              		.loc 2 428 0
 1046 0012 00BF     		nop
 1047 0014 0837     		adds	r7, r7, #8
 1048              		.cfi_def_cfa_offset 8
 1049 0016 BD46     		mov	sp, r7
 1050              		.cfi_def_cfa_register 13
 1051              		@ sp needed
 1052 0018 80BD     		pop	{r7, pc}
 1053              		.cfi_endproc
 1054              	.LFE42:
 1056 001a 00BF     		.section	.text.xcomm_get,"ax",%progbits
 1057              		.align	2
 1058              		.global	xcomm_get
 1059              		.thumb
 1060              		.thumb_func
 1062              	xcomm_get:
 1063              	.LFB43:
 429:comm.c        **** 
 430:comm.c        **** unsigned char xcomm_get(void)
 431:comm.c        **** {
 1064              		.loc 2 431 0
 1065              		.cfi_startproc
 1066              		@ args = 0, pretend = 0, frame = 0
 1067              		@ frame_needed = 1, uses_anonymous_args = 0
 1068 0000 80B5     		push	{r7, lr}
 1069              		.cfi_def_cfa_offset 8
 1070              		.cfi_offset 7, -8
 1071              		.cfi_offset 14, -4
 1072 0002 00AF     		add	r7, sp, #0
 1073              		.cfi_def_cfa_register 7
 432:comm.c        **** 	return (unsigned char) comm_get();
 1074              		.loc 2 432 0
 1075 0004 FFF7FEFF 		bl	comm_get
 1076 0008 0346     		mov	r3, r0
 433:comm.c        **** }
 1077              		.loc 2 433 0
 1078 000a 1846     		mov	r0, r3
 1079 000c 80BD     		pop	{r7, pc}
 1080              		.cfi_endproc
 1081              	.LFE43:
 1083 000e 00BF     		.text
 1084              	.Letext0:
 1085              		.file 3 "./Libraries/NXP/Core/CM3/DeviceSupport/NXP/LPC17xx/lpc17xx.h"
 1086              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q2\\arm-none-eabi\\include\\mach
 1087              		.file 5 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q2\\arm-none-eabi\\include\\sys\
 1088              		.file 6 "./Libraries/NXP/Drivers/include/lpc_types.h"
 1089              		.file 7 "./Libraries/NXP/Drivers/include/lpc17xx_uart.h"
 1090              		.file 8 "./Libraries/NXP/Drivers/include/lpc17xx_pinsel.h"
 1091              		.file 9 "uart.h"
DEFINED SYMBOLS
                            *ABS*:00000000 comm.c
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:20     .text.NVIC_EnableIRQ:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:24     .text.NVIC_EnableIRQ:00000000 NVIC_EnableIRQ
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:64     .text.NVIC_EnableIRQ:0000002c $d
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:69     .text.NVIC_SetPriority:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:73     .text.NVIC_SetPriority:00000000 NVIC_SetPriority
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:132    .text.NVIC_SetPriority:0000004c $d
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:138    .bss.rb:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:141    .bss.rb:00000000 rb
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:146    .bss.TxIntStat:00000000 TxIntStat
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:147    .bss.TxIntStat:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:149    .text.UART0_IRQHandler:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:154    .text.UART0_IRQHandler:00000000 UART0_IRQHandler
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:176    .text.UART_IntReceive:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:180    .text.UART_IntReceive:00000000 UART_IntReceive
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:247    .text.UART_IntReceive:00000054 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:253    .text.UART_IntTransmit:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:257    .text.UART_IntTransmit:00000000 UART_IntTransmit
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:358    .text.UART_IntTransmit:00000090 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:365    .text.UART_IntErr:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:369    .text.UART_IntErr:00000000 UART_IntErr
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:395    .text.UARTSend:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:399    .text.UARTSend:00000000 UARTSend
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:504    .text.UARTSend:0000008c $d
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:510    .text.UARTReceive:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:514    .text.UARTReceive:00000000 UARTReceive
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:607    .text.UARTReceive:0000007c $d
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:612    .text.uart_init_intern:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:616    .text.uart_init_intern:00000000 uart_init_intern
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:746    .text.uart_init_intern:000000d0 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:756    .text.comm_test:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:761    .text.comm_test:00000000 comm_test
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:797    .text.comm_test:00000024 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:802    .text.comm_get:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:807    .text.comm_get:00000000 comm_get
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:851    .text.comm_get:0000002c $d
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:856    .text.comm_put:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:861    .text.comm_put:00000000 comm_put
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:903    .text.comm_put:0000002c $d
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:908    .text.comm_puts:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:913    .text.comm_puts:00000000 comm_puts
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:957    .text.comm_init:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:962    .text.comm_init:00000000 comm_init
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:983    .text.comm_txbusy:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:988    .text.comm_txbusy:00000000 comm_txbusy
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:1015   .text.comm_txbusy:0000001c $d
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:1020   .text.xcomm_put:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:1025   .text.xcomm_put:00000000 xcomm_put
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:1057   .text.xcomm_get:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\ccspRhkb.s:1062   .text.xcomm_get:00000000 xcomm_get
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
UART0_StdIntHandler
UART_Receive
UART_IntConfig
UART_CheckBusy
UART_Send
PINSEL_ConfigPin
UART_ConfigStructInit
UART_Init
UART_FIFOConfigStructInit
UART_FIFOConfig
UART_SetupCbs
UART_TxCmd
