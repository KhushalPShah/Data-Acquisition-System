   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"bootLoader.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.__disable_irq,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	__disable_irq:
  25              	.LFB1:
  26              		.file 1 "./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h"
   1:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**************************************************************************//**
   2:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @file     core_cm3.h
   3:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @version  V1.30
   5:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @date     30. October 2009
   6:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
   7:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @note
   8:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
  10:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @par
  11:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * within development tools that are supporting such ARM based processors.
  14:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
  15:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @par
  16:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
  22:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  ******************************************************************************/
  23:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  24:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #ifndef __CM3_CORE_H__
  25:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __CM3_CORE_H__
  26:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  27:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_LintCinfiguration CMSIS CM3 Core Lint Configuration
  28:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
  29:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * List of Lint messages which will be suppressed and not shown:
  30:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *   - Error 10: \n
  31:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     register uint32_t __regBasePri         __asm("basepri"); \n
  32:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     Error 10: Expecting ';'
  33:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * .
  34:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *   - Error 530: \n
  35:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     return(__regBasePri); \n
  36:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     Warning 530: Symbol '__regBasePri' (line 264) not initialized
  37:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * .
  38:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *   - Error 550: \n
  39:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     __regBasePri = (basePri & 0x1ff); \n
  40:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     Warning 550: Symbol '__regBasePri' (line 271) not accessed
  41:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * .
  42:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *   - Error 754: \n
  43:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     uint32_t RESERVED0[24]; \n
  44:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     Info 754: local structure member '<some, not used in the HAL>' (line 109, file ./cm3_core.h)
  45:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * .
  46:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *   - Error 750: \n
  47:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     #define __CM3_CORE_H__ \n
  48:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     Info 750: local macro '__CM3_CORE_H__' (line 43, file./cm3_core.h) not referenced
  49:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * .
  50:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *   - Error 528: \n
  51:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     static __INLINE void NVIC_DisableIRQ(uint32_t IRQn) \n
  52:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     Warning 528: Symbol 'NVIC_DisableIRQ(unsigned int)' (line 419, file ./cm3_core.h) not refere
  53:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * .
  54:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *   - Error 751: \n
  55:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     } InterruptType_Type; \n
  56:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     Info 751: local typedef 'InterruptType_Type' (line 170, file ./cm3_core.h) not referenced
  57:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * .
  58:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  59:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
  60:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
  61:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  62:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*lint -save */
  63:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*lint -e10  */
  64:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*lint -e530 */
  65:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*lint -e550 */
  66:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*lint -e754 */
  67:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*lint -e750 */
  68:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*lint -e528 */
  69:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*lint -e751 */
  70:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  71:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  72:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_definitions CM3 Core Definitions
  73:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   This file defines all structures and symbols for CMSIS core:
  74:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****     - CMSIS version number
  75:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****     - Cortex-M core registers and bitfields
  76:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****     - Cortex-M core peripheral base address
  77:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   @{
  78:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
  79:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  80:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #ifdef __cplusplus
  81:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  extern "C" {
  82:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #endif
  83:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  84:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  85:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  86:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!<
  87:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  88:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __CORTEX_M                (0x03)                                                       /*!<
  89:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  90:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #include <stdint.h>                           /* Include standard types */
  91:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  92:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #if defined (__ICCARM__)
  93:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  94:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #endif
  95:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  96:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  97:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #ifndef __NVIC_PRIO_BITS
  98:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define __NVIC_PRIO_BITS    4               /*!< standard definition for NVIC Priority Bits */
  99:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #endif
 100:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 101:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 102:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 103:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 104:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 105:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * IO definitions
 106:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 107:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * define access restrictions to peripheral registers
 108:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 109:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 110:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #ifdef __cplusplus
 111:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
 112:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #else
 113:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
 114:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #endif
 115:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
 116:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
 117:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 118:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 119:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 120:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*******************************************************************************
 121:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *                 Register Abstraction
 122:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  ******************************************************************************/
 123:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_register CMSIS CM3 Core Register
 124:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  @{
 125:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** */
 126:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 127:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 128:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_NVIC CMSIS CM3 NVIC
 129:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
 130:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   @{
 131:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 132:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** typedef struct
 133:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 134:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t ISER[8];                      /*!< Offset: 0x000  Interrupt Set Enable Register    
 135:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED0[24];
 136:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t ICER[8];                      /*!< Offset: 0x080  Interrupt Clear Enable Register  
 137:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RSERVED1[24];
 138:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t ISPR[8];                      /*!< Offset: 0x100  Interrupt Set Pending Register   
 139:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED2[24];
 140:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t ICPR[8];                      /*!< Offset: 0x180  Interrupt Clear Pending Register 
 141:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED3[24];
 142:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t IABR[8];                      /*!< Offset: 0x200  Interrupt Active bit Register    
 143:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED4[56];
 144:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint8_t  IP[240];                      /*!< Offset: 0x300  Interrupt Priority Register (8Bit
 145:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED5[644];
 146:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __O  uint32_t STIR;                         /*!< Offset: 0xE00  Software Trigger Interrupt Regist
 147:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }  NVIC_Type;
 148:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_NVIC */
 149:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 150:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 151:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_SCB CMSIS CM3 SCB
 152:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   memory mapped structure for System Control Block (SCB)
 153:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   @{
 154:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 155:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** typedef struct
 156:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 157:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 158:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 159:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t VTOR;                         /*!< Offset: 0x08  Vector Table Offset Register      
 160:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 161:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 162:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 163:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint8_t  SHP[12];                      /*!< Offset: 0x18  System Handlers Priority Registers
 164:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 165:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t CFSR;                         /*!< Offset: 0x28  Configurable Fault Status Register
 166:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t HFSR;                         /*!< Offset: 0x2C  Hard Fault Status Register        
 167:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 168:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t MMFAR;                        /*!< Offset: 0x34  Mem Manage Address Register       
 169:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t BFAR;                         /*!< Offset: 0x38  Bus Fault Address Register        
 170:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t AFSR;                         /*!< Offset: 0x3C  Auxiliary Fault Status Register   
 171:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PFR[2];                       /*!< Offset: 0x40  Processor Feature Register        
 172:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t DFR;                          /*!< Offset: 0x48  Debug Feature Register            
 173:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t ADR;                          /*!< Offset: 0x4C  Auxiliary Feature Register        
 174:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t MMFR[4];                      /*!< Offset: 0x50  Memory Model Feature Register     
 175:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t ISAR[5];                      /*!< Offset: 0x60  ISA Feature Register              
 176:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** } SCB_Type;
 177:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 178:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SCB CPUID Register Definitions */
 179:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 180:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 181:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 182:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 183:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 184:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 185:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 186:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 187:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 188:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 189:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 190:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 191:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 192:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 193:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 194:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 195:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 196:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 197:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 198:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 199:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 200:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 201:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 202:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 203:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 204:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 205:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 206:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 207:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 208:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 209:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 210:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 211:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 212:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 213:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 214:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 215:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 216:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 217:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1ul << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 218:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 219:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 220:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 221:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 222:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 223:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 224:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (0x1FFul << SCB_VTOR_TBLBASE_Pos)              /*!< SCB 
 225:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 226:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 227:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFul << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 228:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 229:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 230:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 231:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 232:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 233:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 234:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 235:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 236:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 237:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 238:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 239:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 240:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7ul << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 241:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 242:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 243:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 244:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 245:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 246:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 247:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 248:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 249:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1ul << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 250:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 251:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SCB System Control Register Definitions */
 252:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 253:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 254:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 255:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 256:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 257:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 258:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 259:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 260:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 261:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 262:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 263:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 264:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 265:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 266:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1ul << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 267:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 268:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 269:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1ul << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 270:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 271:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 272:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 273:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 274:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 275:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1ul << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 276:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 277:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 278:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1ul << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 279:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 280:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 281:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 282:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1ul << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 283:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 284:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 285:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1ul << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 286:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 287:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 288:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1ul << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 289:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 290:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 291:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 292:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 293:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 294:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1ul << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 295:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 296:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 297:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1ul << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 298:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 299:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 300:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1ul << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 301:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 302:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 303:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1ul << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 304:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 305:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 306:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1ul << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 307:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 308:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 309:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1ul << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 310:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 311:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 312:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1ul << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 313:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 314:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 315:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1ul << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 316:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 317:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 318:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1ul << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 319:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 320:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 321:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1ul << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 322:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 323:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 324:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 325:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFul << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 326:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 327:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 328:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFul << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 329:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 330:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 331:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFul << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 332:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 333:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 334:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 335:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1ul << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 336:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 337:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 338:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1ul << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 339:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 340:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 341:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1ul << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 342:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 343:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 344:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 345:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 346:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 347:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 348:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 349:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 350:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 351:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 352:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 353:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 354:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 355:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 356:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 357:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 358:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_SCB */
 359:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 360:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 361:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_SysTick CMSIS CM3 SysTick
 362:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   memory mapped structure for SysTick
 363:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   @{
 364:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 365:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** typedef struct
 366:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 367:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 368:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 369:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 370:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 371:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** } SysTick_Type;
 372:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 373:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 374:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 375:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 376:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 377:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 378:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 379:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 380:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 381:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 382:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 383:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 384:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 385:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 386:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SysTick Reload Register Definitions */
 387:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 388:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 389:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 390:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SysTick Current Register Definitions */
 391:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 392:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 393:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 394:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SysTick Calibration Register Definitions */
 395:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 396:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 397:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 398:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 399:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 400:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 401:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 402:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 403:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_SysTick */
 404:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 405:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 406:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_ITM CMSIS CM3 ITM
 407:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   memory mapped structure for Instrumentation Trace Macrocell (ITM)
 408:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   @{
 409:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 410:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** typedef struct
 411:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 412:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __O  union
 413:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   {
 414:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****     __O  uint8_t    u8;                       /*!< Offset:       ITM Stimulus Port 8-bit           
 415:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****     __O  uint16_t   u16;                      /*!< Offset:       ITM Stimulus Port 16-bit          
 416:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****     __O  uint32_t   u32;                      /*!< Offset:       ITM Stimulus Port 32-bit          
 417:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   }  PORT [32];                               /*!< Offset: 0x00  ITM Stimulus Port Registers       
 418:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED0[864];
 419:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t TER;                          /*!< Offset:       ITM Trace Enable Register         
 420:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED1[15];
 421:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t TPR;                          /*!< Offset:       ITM Trace Privilege Register      
 422:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED2[15];
 423:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t TCR;                          /*!< Offset:       ITM Trace Control Register        
 424:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED3[29];
 425:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t IWR;                          /*!< Offset:       ITM Integration Write Register    
 426:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t IRR;                          /*!< Offset:       ITM Integration Read Register     
 427:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t IMCR;                         /*!< Offset:       ITM Integration Mode Control Regis
 428:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED4[43];
 429:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t LAR;                          /*!< Offset:       ITM Lock Access Register          
 430:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t LSR;                          /*!< Offset:       ITM Lock Status Register          
 431:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED5[6];
 432:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PID4;                         /*!< Offset:       ITM Peripheral Identification Regi
 433:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PID5;                         /*!< Offset:       ITM Peripheral Identification Regi
 434:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PID6;                         /*!< Offset:       ITM Peripheral Identification Regi
 435:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PID7;                         /*!< Offset:       ITM Peripheral Identification Regi
 436:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PID0;                         /*!< Offset:       ITM Peripheral Identification Regi
 437:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PID1;                         /*!< Offset:       ITM Peripheral Identification Regi
 438:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PID2;                         /*!< Offset:       ITM Peripheral Identification Regi
 439:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PID3;                         /*!< Offset:       ITM Peripheral Identification Regi
 440:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t CID0;                         /*!< Offset:       ITM Component  Identification Regi
 441:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t CID1;                         /*!< Offset:       ITM Component  Identification Regi
 442:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t CID2;                         /*!< Offset:       ITM Component  Identification Regi
 443:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t CID3;                         /*!< Offset:       ITM Component  Identification Regi
 444:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** } ITM_Type;
 445:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 446:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 447:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 448:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFul << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 449:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 450:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* ITM Trace Control Register Definitions */
 451:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 452:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1ul << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 453:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 454:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_ATBID_Pos                  16                                             /*!< ITM 
 455:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_ATBID_Msk                  (0x7Ful << ITM_TCR_ATBID_Pos)                  /*!< ITM 
 456:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 457:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 458:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3ul << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 459:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 460:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 461:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1ul << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 462:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 463:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 464:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1ul << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 465:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 466:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 467:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1ul << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 468:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 469:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 470:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1ul << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 471:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 472:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 473:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1ul << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 474:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 475:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* ITM Integration Write Register Definitions */
 476:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 477:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1ul << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 478:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 479:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* ITM Integration Read Register Definitions */
 480:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 481:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1ul << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 482:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 483:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 484:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 485:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1ul << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 486:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 487:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* ITM Lock Status Register Definitions */
 488:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 489:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1ul << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 490:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 491:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 492:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1ul << ITM_LSR_Access_Pos)                    /*!< ITM 
 493:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 494:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 495:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_LSR_Present_Msk                (1ul << ITM_LSR_Present_Pos)                   /*!< ITM 
 496:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_ITM */
 497:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 498:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 499:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_InterruptType CMSIS CM3 Interrupt Type
 500:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   memory mapped structure for Interrupt Type
 501:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   @{
 502:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 503:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** typedef struct
 504:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 505:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED0;
 506:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t ICTR;                         /*!< Offset: 0x04  Interrupt Control Type Register */
 507:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 508:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t ACTLR;                        /*!< Offset: 0x08  Auxiliary Control Register      */
 509:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #else
 510:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED1;
 511:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #endif
 512:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** } InterruptType_Type;
 513:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 514:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 515:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define InterruptType_ICTR_INTLINESNUM_Pos  0                                             /*!< Inte
 516:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define InterruptType_ICTR_INTLINESNUM_Msk (0x1Ful << InterruptType_ICTR_INTLINESNUM_Pos) /*!< Inte
 517:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 518:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* Auxiliary Control Register Definitions */
 519:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define InterruptType_ACTLR_DISFOLD_Pos     2                                             /*!< Inte
 520:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define InterruptType_ACTLR_DISFOLD_Msk    (1ul << InterruptType_ACTLR_DISFOLD_Pos)       /*!< Inte
 521:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 522:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define InterruptType_ACTLR_DISDEFWBUF_Pos  1                                             /*!< Inte
 523:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define InterruptType_ACTLR_DISDEFWBUF_Msk (1ul << InterruptType_ACTLR_DISDEFWBUF_Pos)    /*!< Inte
 524:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 525:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define InterruptType_ACTLR_DISMCYCINT_Pos  0                                             /*!< Inte
 526:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define InterruptType_ACTLR_DISMCYCINT_Msk (1ul << InterruptType_ACTLR_DISMCYCINT_Pos)    /*!< Inte
 527:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_InterruptType */
 528:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 529:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 530:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 531:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_MPU CMSIS CM3 MPU
 532:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   memory mapped structure for Memory Protection Unit (MPU)
 533:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   @{
 534:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 535:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** typedef struct
 536:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 537:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t TYPE;                         /*!< Offset: 0x00  MPU Type Register                 
 538:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x04  MPU Control Register              
 539:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RNR;                          /*!< Offset: 0x08  MPU Region RNRber Register        
 540:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RBAR;                         /*!< Offset: 0x0C  MPU Region Base Address Register  
 541:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RASR;                         /*!< Offset: 0x10  MPU Region Attribute and Size Regi
 542:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RBAR_A1;                      /*!< Offset: 0x14  MPU Alias 1 Region Base Address Re
 543:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RASR_A1;                      /*!< Offset: 0x18  MPU Alias 1 Region Attribute and S
 544:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RBAR_A2;                      /*!< Offset: 0x1C  MPU Alias 2 Region Base Address Re
 545:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RASR_A2;                      /*!< Offset: 0x20  MPU Alias 2 Region Attribute and S
 546:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RBAR_A3;                      /*!< Offset: 0x24  MPU Alias 3 Region Base Address Re
 547:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RASR_A3;                      /*!< Offset: 0x28  MPU Alias 3 Region Attribute and S
 548:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** } MPU_Type;
 549:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 550:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* MPU Type Register */
 551:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 552:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFul << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 553:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 554:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
 555:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFul << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 556:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 557:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
 558:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1ul << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
 559:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 560:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* MPU Control Register */
 561:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
 562:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1ul << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 563:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 564:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
 565:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1ul << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 566:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 567:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
 568:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1ul << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
 569:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 570:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* MPU Region Number Register */
 571:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
 572:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFul << MPU_RNR_REGION_Pos)                 /*!< MPU 
 573:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 574:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* MPU Region Base Address Register */
 575:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
 576:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFul << MPU_RBAR_ADDR_Pos)             /*!< MPU 
 577:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 578:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
 579:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1ul << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 580:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 581:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
 582:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFul << MPU_RBAR_REGION_Pos)                 /*!< MPU 
 583:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 584:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* MPU Region Attribute and Size Register */
 585:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
 586:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1ul << MPU_RASR_XN_Pos)                       /*!< MPU 
 587:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 588:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
 589:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_AP_Msk                    (7ul << MPU_RASR_AP_Pos)                       /*!< MPU 
 590:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 591:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
 592:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (7ul << MPU_RASR_TEX_Pos)                      /*!< MPU 
 593:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 594:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
 595:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_S_Msk                     (1ul << MPU_RASR_S_Pos)                        /*!< MPU 
 596:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 597:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
 598:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_C_Msk                     (1ul << MPU_RASR_C_Pos)                        /*!< MPU 
 599:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 600:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
 601:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_B_Msk                     (1ul << MPU_RASR_B_Pos)                        /*!< MPU 
 602:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 603:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
 604:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFul << MPU_RASR_SRD_Pos)                   /*!< MPU 
 605:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 606:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
 607:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1Ful << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 608:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 609:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_ENA_Pos                     0                                            /*!< MPU 
 610:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_ENA_Msk                    (0x1Ful << MPU_RASR_ENA_Pos)                  /*!< MPU 
 611:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 612:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_MPU */
 613:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #endif
 614:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 615:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 616:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_CoreDebug CMSIS CM3 Core Debug
 617:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   memory mapped structure for Core Debug Register
 618:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   @{
 619:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 620:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** typedef struct
 621:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 622:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 623:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 624:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 625:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 626:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** } CoreDebug_Type;
 627:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 628:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* Debug Halting Control and Status Register */
 629:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 630:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 631:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 632:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 633:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 634:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 635:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 636:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 637:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 638:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 639:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 640:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 641:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 642:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 643:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 644:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 645:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 646:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 647:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 648:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 649:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 650:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
 651:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1ul << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
 652:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 653:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 654:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 655:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 656:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 657:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 658:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 659:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 660:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 661:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 662:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 663:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 664:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 665:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* Debug Core Register Selector Register */
 666:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 667:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 668:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 669:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 670:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 671:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 672:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* Debug Exception and Monitor Control Register */
 673:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
 674:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1ul << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
 675:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 676:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
 677:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1ul << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
 678:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 679:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
 680:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1ul << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
 681:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 682:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
 683:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1ul << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
 684:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 685:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
 686:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1ul << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
 687:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 688:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 689:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 690:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 691:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
 692:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1ul << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
 693:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 694:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
 695:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1ul << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
 696:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 697:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
 698:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1ul << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
 699:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 700:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
 701:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1ul << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
 702:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 703:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
 704:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1ul << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
 705:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 706:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
 707:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1ul << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
 708:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 709:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 710:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 711:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_CoreDebug */
 712:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 713:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 714:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
 715:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 716:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_BASE            (0xE0000000)                              /*!< ITM Base Address        
 717:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 718:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 719:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 720:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 721:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 722:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register 
 723:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 724:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 725:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 726:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct
 727:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 728:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 729:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 730:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90)                      /*!< Memory Protection Unit  
 731:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit  
 732:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #endif
 733:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 734:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_core_register */
 735:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 736:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 737:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*******************************************************************************
 738:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *                Hardware Abstraction Layer
 739:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  ******************************************************************************/
 740:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 741:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #if defined ( __CC_ARM   )
 742:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 743:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 744:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 745:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #elif defined ( __ICCARM__ )
 746:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 747:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 748:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 749:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #elif defined   (  __GNUC__  )
 750:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 751:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 752:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 753:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #elif defined   (  __TASKING__  )
 754:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 755:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 756:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 757:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #endif
 758:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 759:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 760:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 761:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 762:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 763:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* ARM armcc specific functions */
 764:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 765:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __enable_fault_irq                __enable_fiq
 766:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __disable_fault_irq               __disable_fiq
 767:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 768:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __NOP                             __nop
 769:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __WFI                             __wfi
 770:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __WFE                             __wfe
 771:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __SEV                             __sev
 772:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __ISB()                           __isb(0)
 773:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __DSB()                           __dsb(0)
 774:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __DMB()                           __dmb(0)
 775:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __REV                             __rev
 776:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __RBIT                            __rbit
 777:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __LDREXB(ptr)                     ((unsigned char ) __ldrex(ptr))
 778:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __LDREXH(ptr)                     ((unsigned short) __ldrex(ptr))
 779:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __LDREXW(ptr)                     ((unsigned int  ) __ldrex(ptr))
 780:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 781:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 782:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 783:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 784:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 785:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic unsigned long long __ldrexd(volatile void *ptr) */
 786:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic int __strexd(unsigned long long val, volatile void *ptr) */
 787:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __enable_irq();     */
 788:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __disable_irq();    */
 789:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 790:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 791:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 792:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Process Stack Pointer
 793:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 794:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return ProcessStackPointer
 795:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 796:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the actual process stack pointer
 797:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 798:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_PSP(void);
 799:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 800:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 801:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Process Stack Pointer
 802:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 803:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
 804:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 805:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP
 806:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * (process stack pointer) Cortex processor register
 807:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 808:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
 809:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 810:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 811:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Main Stack Pointer
 812:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 813:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return Main Stack Pointer
 814:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 815:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
 816:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Cortex processor register
 817:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 818:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_MSP(void);
 819:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 820:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 821:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Main Stack Pointer
 822:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 823:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
 824:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 825:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Assign the value mainStackPointer to the MSP
 826:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * (main stack pointer) Cortex processor register
 827:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 828:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
 829:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 830:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 831:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
 832:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 833:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param   value  value to reverse
 834:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return         reversed value
 835:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 836:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Reverse byte order in unsigned short value
 837:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 838:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
 839:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 840:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 841:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 842:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 843:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param   value  value to reverse
 844:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return         reversed value
 845:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 846:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
 847:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 848:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern int32_t __REVSH(int16_t value);
 849:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 850:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 851:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #if (__ARMCC_VERSION < 400000)
 852:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 853:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 854:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 855:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 856:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 857:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 858:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __CLREX(void);
 859:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 860:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 861:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Base Priority value
 862:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 863:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return BasePriority
 864:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 865:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the content of the base priority register
 866:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 867:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
 868:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 869:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 870:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Base Priority value
 871:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 872:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  basePri  BasePriority
 873:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 874:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the base priority register
 875:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 876:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
 877:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 878:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 879:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Priority Mask value
 880:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 881:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return PriMask
 882:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 883:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
 884:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 885:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_PRIMASK(void);
 886:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 887:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 888:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Priority Mask value
 889:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 890:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param   priMask  PriMask
 891:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 892:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 893:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 894:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
 895:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 896:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 897:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Fault Mask value
 898:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 899:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return FaultMask
 900:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 901:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the content of the fault mask register
 902:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 903:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
 904:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 905:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 906:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Fault Mask value
 907:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 908:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  faultMask faultMask value
 909:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 910:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the fault mask register
 911:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 912:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
 913:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 914:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 915:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Control Register value
 916:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 917:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return Control value
 918:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 919:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the content of the control register
 920:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 921:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_CONTROL(void);
 922:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 923:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 924:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Control Register value
 925:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 926:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  control  Control value
 927:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 928:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the control register
 929:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 930:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
 931:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 932:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 933:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 934:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 935:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 936:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 937:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 938:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 939:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __CLREX                           __clrex
 940:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 941:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 942:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Base Priority value
 943:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 944:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return BasePriority
 945:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 946:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the content of the base priority register
 947:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 948:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE uint32_t  __get_BASEPRI(void)
 949:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 950:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 951:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   return(__regBasePri);
 952:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
 953:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 954:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 955:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Base Priority value
 956:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 957:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  basePri  BasePriority
 958:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 959:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the base priority register
 960:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 961:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __set_BASEPRI(uint32_t basePri)
 962:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 963:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 964:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __regBasePri = (basePri & 0xff);
 965:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
 966:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 967:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 968:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Priority Mask value
 969:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 970:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return PriMask
 971:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 972:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
 973:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 974:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE uint32_t __get_PRIMASK(void)
 975:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 976:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 977:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   return(__regPriMask);
 978:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
 979:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 980:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 981:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Priority Mask value
 982:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 983:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  priMask  PriMask
 984:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 985:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 986:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 987:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 988:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 989:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 990:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __regPriMask = (priMask);
 991:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
 992:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 993:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 994:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Fault Mask value
 995:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 996:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return FaultMask
 997:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 998:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the content of the fault mask register
 999:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1000:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE uint32_t __get_FAULTMASK(void)
1001:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1002:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
1003:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   return(__regFaultMask);
1004:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1005:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1006:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1007:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Fault Mask value
1008:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1009:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  faultMask  faultMask value
1010:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1011:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the fault mask register
1012:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1013:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __set_FAULTMASK(uint32_t faultMask)
1014:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1015:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
1016:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __regFaultMask = (faultMask & 1);
1017:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1018:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1019:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1020:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Control Register value
1021:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1022:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return Control value
1023:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1024:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the content of the control register
1025:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1026:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE uint32_t __get_CONTROL(void)
1027:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1028:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
1029:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   return(__regControl);
1030:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1031:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1032:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1033:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Control Register value
1034:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1035:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  control  Control value
1036:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1037:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the control register
1038:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1039:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __set_CONTROL(uint32_t control)
1040:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1041:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
1042:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __regControl = control;
1043:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1044:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1045:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #endif /* __ARMCC_VERSION  */
1046:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1047:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1048:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1049:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
1050:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* IAR iccarm specific functions */
1051:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1052:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
1053:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
1054:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1055:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
1056:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
1057:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1058:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __NOP                                     __no_operation            /*!< no operation intri
1059:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
1060:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
1061:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
1062:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE  void __CLREX()                   { __ASM ("clrex"); }
1063:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1064:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __ISB(void)                                     */
1065:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __DSB(void)                                     */
1066:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __DMB(void)                                     */
1067:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __set_PRIMASK();                                */
1068:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __get_PRIMASK();                                */
1069:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __set_FAULTMASK();                              */
1070:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __get_FAULTMASK();                              */
1071:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
1072:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
1073:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic unsigned long __STREX(unsigned long, unsigned long); */
1074:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic unsigned long __LDREX(unsigned long *);              */
1075:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1076:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1077:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1078:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Process Stack Pointer
1079:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1080:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return ProcessStackPointer
1081:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1082:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the actual process stack pointer
1083:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1084:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_PSP(void);
1085:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1086:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1087:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Process Stack Pointer
1088:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1089:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
1090:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1091:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP
1092:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * (process stack pointer) Cortex processor register
1093:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1094:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
1095:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1096:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1097:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Main Stack Pointer
1098:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1099:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return Main Stack Pointer
1100:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1101:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
1102:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Cortex processor register
1103:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1104:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_MSP(void);
1105:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1106:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1107:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Main Stack Pointer
1108:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1109:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
1110:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1111:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Assign the value mainStackPointer to the MSP
1112:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * (main stack pointer) Cortex processor register
1113:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1114:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
1115:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1116:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1117:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
1118:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1119:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to reverse
1120:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        reversed value
1121:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1122:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Reverse byte order in unsigned short value
1123:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1124:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
1125:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1126:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1127:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Reverse bit order of value
1128:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1129:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to reverse
1130:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        reversed value
1131:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1132:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Reverse bit order of value
1133:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1134:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
1135:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1136:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1137:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  LDR Exclusive (8 bit)
1138:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1139:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1140:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        value of (*address)
1141:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1142:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive LDR command for 8 bit values)
1143:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1144:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
1145:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1146:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1147:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  LDR Exclusive (16 bit)
1148:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1149:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1150:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        value of (*address)
1151:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1152:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive LDR command for 16 bit values
1153:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1154:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
1155:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1156:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1157:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  LDR Exclusive (32 bit)
1158:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1159:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1160:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        value of (*address)
1161:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1162:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive LDR command for 32 bit values
1163:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1164:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
1165:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1166:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1167:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  STR Exclusive (8 bit)
1168:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1169:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to store
1170:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1171:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        successful / failed
1172:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1173:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive STR command for 8 bit values
1174:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1175:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
1176:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1177:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1178:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  STR Exclusive (16 bit)
1179:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1180:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to store
1181:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1182:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        successful / failed
1183:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1184:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive STR command for 16 bit values
1185:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1186:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
1187:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1188:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1189:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  STR Exclusive (32 bit)
1190:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1191:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to store
1192:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1193:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        successful / failed
1194:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1195:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive STR command for 32 bit values
1196:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1197:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
1198:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1199:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1200:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1201:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
1202:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* GNU gcc specific functions */
1203:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1204:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
1205:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
  27              		.loc 1 1205 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 80B4     		push	{r7}
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 00AF     		add	r7, sp, #0
  36              		.cfi_def_cfa_register 7
  37              		.loc 1 1205 0
  38              		.syntax unified
  39              	@ 1205 "./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h" 1
  40 0004 72B6     		cpsid i
  41              	@ 0 "" 2
  42              		.thumb
  43              		.syntax unified
  44 0006 00BF     		nop
  45 0008 BD46     		mov	sp, r7
  46              		.cfi_def_cfa_register 13
  47              		@ sp needed
  48 000a 80BC     		pop	{r7}
  49              		.cfi_restore 7
  50              		.cfi_def_cfa_offset 0
  51 000c 7047     		bx	lr
  52              		.cfi_endproc
  53              	.LFE1:
  55 000e 00BF     		.section	.bss.netif_eth0_data,"aw",%nobits
  56              		.align	2
  59              	netif_eth0_data:
  60 0000 00000000 		.space	48
  60      00000000 
  60      00000000 
  60      00000000 
  60      00000000 
  61              		.section	.data.netif_eth0,"aw",%progbits
  62              		.align	2
  65              	netif_eth0:
  66 0000 00000000 		.word	netif_eth0_data
  67              		.section	.bss.my_ipaddr_data,"aw",%nobits
  68              		.align	2
  71              	my_ipaddr_data:
  72 0000 00000000 		.space	4
  73              		.section	.bss.my_netmask_data,"aw",%nobits
  74              		.align	2
  77              	my_netmask_data:
  78 0000 00000000 		.space	4
  79              		.section	.bss.my_gw_data,"aw",%nobits
  80              		.align	2
  83              	my_gw_data:
  84 0000 00000000 		.space	4
  85              		.section	.bss.last_arp_time,"aw",%nobits
  86              		.align	2
  89              	last_arp_time:
  90 0000 00000000 		.space	4
  91              		.section	.bss.last_tcpslow_time,"aw",%nobits
  92              		.align	2
  95              	last_tcpslow_time:
  96 0000 00000000 		.space	4
  97              		.section	.bss.last_tcpfast_time,"aw",%nobits
  98              		.align	2
 101              	last_tcpfast_time:
 102 0000 00000000 		.space	4
 103              		.section	.bss.last_tcp_time,"aw",%nobits
 104              		.align	2
 107              	last_tcp_time:
 108 0000 00000000 		.space	4
 109              		.section	.bss.last_dhcpcoarse_time,"aw",%nobits
 110              		.align	2
 113              	last_dhcpcoarse_time:
 114 0000 00000000 		.space	4
 115              		.section	.bss.last_dhcpfine_time,"aw",%nobits
 116              		.align	2
 119              	last_dhcpfine_time:
 120 0000 00000000 		.space	4
 121              		.section	.bss.light_on,"aw",%nobits
 122              		.align	2
 125              	light_on:
 126 0000 00000000 		.space	4
 127              		.section	.bss.light_off,"aw",%nobits
 128              		.align	2
 131              	light_off:
 132 0000 00000000 		.space	4
 133              		.section	.bss.recvd_UDP_data,"aw",%nobits
 134              		.align	2
 137              	recvd_UDP_data:
 138 0000 00000000 		.space	4
 139              		.section	.bss.recvd_TCP_data,"aw",%nobits
 140              		.align	2
 143              	recvd_TCP_data:
 144 0000 00000000 		.space	4
 145              		.comm	command_type,1,1
 146              		.comm	command_RW,1,1
 147              		.comm	device_ID,4,4
 148              		.comm	command_parameter,4,4
 149              		.section	.rodata.iap_entry,"a",%progbits
 150              		.align	2
 153              	iap_entry:
 154 0000 F11FFF1F 		.word	536813553
 155              		.comm	command,20,4
 156              		.comm	output,20,4
 157              		.comm	return_code,4,4
 158              		.global	segmentNumberRecvd
 159              		.section	.bss.segmentNumberRecvd,"aw",%nobits
 162              	segmentNumberRecvd:
 163 0000 00       		.space	1
 164              		.global	addrBeginPage
 165              		.section	.bss.addrBeginPage,"aw",%nobits
 166              		.align	2
 169              	addrBeginPage:
 170 0000 00000000 		.space	4
 171              		.global	sectorNumber
 172              		.section	.data.sectorNumber,"aw",%progbits
 175              	sectorNumber:
 176 0000 10       		.byte	16
 177              		.global	sectorFill
 178              		.section	.bss.sectorFill,"aw",%nobits
 181              	sectorFill:
 182 0000 00       		.space	1
 183              		.comm	dataArr,4096,4
 184              		.global	dataArrIndex
 185              		.section	.bss.dataArrIndex,"aw",%nobits
 186              		.align	2
 189              	dataArrIndex:
 190 0000 00000000 		.space	4
 191              		.section	.text.addrDecode,"ax",%progbits
 192              		.align	2
 193              		.global	addrDecode
 194              		.thumb
 195              		.thumb_func
 197              	addrDecode:
 198              	.LFB46:
 199              		.file 2 "bootLoader.c"
   1:bootLoader.c  **** /*
   2:bootLoader.c  ****  * bootLoader.c
   3:bootLoader.c  ****  *
   4:bootLoader.c  ****  *  Created on: 08-Jul-2017
   5:bootLoader.c  ****  *      Author: khushal shah
   6:bootLoader.c  ****  */
   7:bootLoader.c  **** 
   8:bootLoader.c  **** 
   9:bootLoader.c  **** #include <LPC17xx.h>
  10:bootLoader.c  **** #include "bootLoader.h"  /* Include the header (not strictly necessary here) */
  11:bootLoader.c  **** 
  12:bootLoader.c  **** 
  13:bootLoader.c  ****  unsigned long command[5];
  14:bootLoader.c  ****  unsigned long output[5];
  15:bootLoader.c  ****  int return_code;
  16:bootLoader.c  **** //The segmentNumber will be the number of 512 bytes(segments received).
  17:bootLoader.c  ****  uint8_t segmentNumberRecvd=0;
  18:bootLoader.c  ****  //uint32_t pageSize=SMALL_PAGE_SIZE;
  19:bootLoader.c  ****  uint32_t addrBeginPage=0;
  20:bootLoader.c  ****  uint8_t sectorNumber=16;	//initialize it to a different value as per the size of the bootloader.
  21:bootLoader.c  ****  uint8_t sectorFill=0;
  22:bootLoader.c  ****  uint8_t dataArr[SMALL_PAGE_SIZE];
  23:bootLoader.c  ****  uint32_t dataArrIndex=0;
  24:bootLoader.c  **** 
  25:bootLoader.c  **** uint32_t addrDecode(uint8_t *addrPointer)
  26:bootLoader.c  **** {
 200              		.loc 2 26 0
 201              		.cfi_startproc
 202              		@ args = 0, pretend = 0, frame = 24
 203              		@ frame_needed = 1, uses_anonymous_args = 0
 204              		@ link register save eliminated.
 205 0000 80B4     		push	{r7}
 206              		.cfi_def_cfa_offset 4
 207              		.cfi_offset 7, -4
 208 0002 87B0     		sub	sp, sp, #28
 209              		.cfi_def_cfa_offset 32
 210 0004 00AF     		add	r7, sp, #0
 211              		.cfi_def_cfa_register 7
 212 0006 7860     		str	r0, [r7, #4]
  27:bootLoader.c  **** 	uint8_t ext1=0;
 213              		.loc 2 27 0
 214 0008 0023     		movs	r3, #0
 215 000a FB75     		strb	r3, [r7, #23]
  28:bootLoader.c  **** 	uint16_t extAddr=0;
 216              		.loc 2 28 0
 217 000c 0023     		movs	r3, #0
 218 000e BB82     		strh	r3, [r7, #20]	@ movhi
  29:bootLoader.c  **** 
  30:bootLoader.c  **** 	uint8_t addr1=0;
 219              		.loc 2 30 0
 220 0010 0023     		movs	r3, #0
 221 0012 FB74     		strb	r3, [r7, #19]
  31:bootLoader.c  **** 	uint16_t addr=0;
 222              		.loc 2 31 0
 223 0014 0023     		movs	r3, #0
 224 0016 3B82     		strh	r3, [r7, #16]	@ movhi
  32:bootLoader.c  **** 
  33:bootLoader.c  **** 	uint32_t finalAddr=0;
 225              		.loc 2 33 0
 226 0018 0023     		movs	r3, #0
 227 001a FB60     		str	r3, [r7, #12]
  34:bootLoader.c  **** 
  35:bootLoader.c  **** 	ext1=*(addrPointer);
 228              		.loc 2 35 0
 229 001c 7B68     		ldr	r3, [r7, #4]
 230 001e 1B78     		ldrb	r3, [r3]
 231 0020 FB75     		strb	r3, [r7, #23]
  36:bootLoader.c  **** 	extAddr=ext1<<8;
 232              		.loc 2 36 0
 233 0022 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 234 0024 9BB2     		uxth	r3, r3
 235 0026 1B02     		lsls	r3, r3, #8
 236 0028 BB82     		strh	r3, [r7, #20]	@ movhi
  37:bootLoader.c  **** 	addrPointer++;
 237              		.loc 2 37 0
 238 002a 7B68     		ldr	r3, [r7, #4]
 239 002c 0133     		adds	r3, r3, #1
 240 002e 7B60     		str	r3, [r7, #4]
  38:bootLoader.c  **** 	ext1=*(addrPointer);
 241              		.loc 2 38 0
 242 0030 7B68     		ldr	r3, [r7, #4]
 243 0032 1B78     		ldrb	r3, [r3]
 244 0034 FB75     		strb	r3, [r7, #23]
  39:bootLoader.c  **** 	extAddr |= ext1;
 245              		.loc 2 39 0
 246 0036 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 247 0038 9AB2     		uxth	r2, r3
 248 003a BB8A     		ldrh	r3, [r7, #20]	@ movhi
 249 003c 1343     		orrs	r3, r3, r2
 250 003e BB82     		strh	r3, [r7, #20]	@ movhi
  40:bootLoader.c  **** 	addrPointer++;
 251              		.loc 2 40 0
 252 0040 7B68     		ldr	r3, [r7, #4]
 253 0042 0133     		adds	r3, r3, #1
 254 0044 7B60     		str	r3, [r7, #4]
  41:bootLoader.c  **** 
  42:bootLoader.c  **** 	addr1=*(addrPointer);
 255              		.loc 2 42 0
 256 0046 7B68     		ldr	r3, [r7, #4]
 257 0048 1B78     		ldrb	r3, [r3]
 258 004a FB74     		strb	r3, [r7, #19]
  43:bootLoader.c  **** 	addr=addr1<<8;
 259              		.loc 2 43 0
 260 004c FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 261 004e 9BB2     		uxth	r3, r3
 262 0050 1B02     		lsls	r3, r3, #8
 263 0052 3B82     		strh	r3, [r7, #16]	@ movhi
  44:bootLoader.c  **** 	addrPointer++;
 264              		.loc 2 44 0
 265 0054 7B68     		ldr	r3, [r7, #4]
 266 0056 0133     		adds	r3, r3, #1
 267 0058 7B60     		str	r3, [r7, #4]
  45:bootLoader.c  **** 	addr1=*(addrPointer);
 268              		.loc 2 45 0
 269 005a 7B68     		ldr	r3, [r7, #4]
 270 005c 1B78     		ldrb	r3, [r3]
 271 005e FB74     		strb	r3, [r7, #19]
  46:bootLoader.c  **** 	addr |= addr1;
 272              		.loc 2 46 0
 273 0060 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 274 0062 9AB2     		uxth	r2, r3
 275 0064 3B8A     		ldrh	r3, [r7, #16]	@ movhi
 276 0066 1343     		orrs	r3, r3, r2
 277 0068 3B82     		strh	r3, [r7, #16]	@ movhi
  47:bootLoader.c  **** 	addrPointer++;
 278              		.loc 2 47 0
 279 006a 7B68     		ldr	r3, [r7, #4]
 280 006c 0133     		adds	r3, r3, #1
 281 006e 7B60     		str	r3, [r7, #4]
  48:bootLoader.c  **** 
  49:bootLoader.c  **** 	finalAddr=((extAddr*16)+(addr));
 282              		.loc 2 49 0
 283 0070 BB8A     		ldrh	r3, [r7, #20]
 284 0072 1A01     		lsls	r2, r3, #4
 285 0074 3B8A     		ldrh	r3, [r7, #16]
 286 0076 1344     		add	r3, r3, r2
 287 0078 FB60     		str	r3, [r7, #12]
  50:bootLoader.c  **** 
  51:bootLoader.c  **** 	return finalAddr;
 288              		.loc 2 51 0
 289 007a FB68     		ldr	r3, [r7, #12]
  52:bootLoader.c  **** }
 290              		.loc 2 52 0
 291 007c 1846     		mov	r0, r3
 292 007e 1C37     		adds	r7, r7, #28
 293              		.cfi_def_cfa_offset 4
 294 0080 BD46     		mov	sp, r7
 295              		.cfi_def_cfa_register 13
 296              		@ sp needed
 297 0082 80BC     		pop	{r7}
 298              		.cfi_restore 7
 299              		.cfi_def_cfa_offset 0
 300 0084 7047     		bx	lr
 301              		.cfi_endproc
 302              	.LFE46:
 304 0086 00BF     		.section	.text.cpyData,"ax",%progbits
 305              		.align	2
 306              		.global	cpyData
 307              		.thumb
 308              		.thumb_func
 310              	cpyData:
 311              	.LFB47:
  53:bootLoader.c  **** 
  54:bootLoader.c  **** void cpyData(uint8_t *dataPointer)	//changed the type from uint8_t to void
  55:bootLoader.c  **** {
 312              		.loc 2 55 0
 313              		.cfi_startproc
 314              		@ args = 0, pretend = 0, frame = 16
 315              		@ frame_needed = 1, uses_anonymous_args = 0
 316              		@ link register save eliminated.
 317 0000 80B4     		push	{r7}
 318              		.cfi_def_cfa_offset 4
 319              		.cfi_offset 7, -4
 320 0002 85B0     		sub	sp, sp, #20
 321              		.cfi_def_cfa_offset 24
 322 0004 00AF     		add	r7, sp, #0
 323              		.cfi_def_cfa_register 7
 324 0006 7860     		str	r0, [r7, #4]
  56:bootLoader.c  **** 	uint32_t i=0;
 325              		.loc 2 56 0
 326 0008 0023     		movs	r3, #0
 327 000a FB60     		str	r3, [r7, #12]
  57:bootLoader.c  **** 	for(i=dataArrIndex; i<(SEGMENT_SIZE+dataArrIndex); i++)
 328              		.loc 2 57 0
 329 000c 144B     		ldr	r3, .L9
 330 000e 1B68     		ldr	r3, [r3]
 331 0010 FB60     		str	r3, [r7, #12]
 332 0012 0CE0     		b	.L5
 333              	.L6:
  58:bootLoader.c  **** 	{
  59:bootLoader.c  **** 		dataArr[i]=*(dataPointer);
 334              		.loc 2 59 0 discriminator 3
 335 0014 7B68     		ldr	r3, [r7, #4]
 336 0016 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 337 0018 124A     		ldr	r2, .L9+4
 338 001a FB68     		ldr	r3, [r7, #12]
 339 001c 1344     		add	r3, r3, r2
 340 001e 0A46     		mov	r2, r1
 341 0020 1A70     		strb	r2, [r3]
  60:bootLoader.c  **** 		dataPointer++;
 342              		.loc 2 60 0 discriminator 3
 343 0022 7B68     		ldr	r3, [r7, #4]
 344 0024 0133     		adds	r3, r3, #1
 345 0026 7B60     		str	r3, [r7, #4]
  57:bootLoader.c  **** 	for(i=dataArrIndex; i<(SEGMENT_SIZE+dataArrIndex); i++)
 346              		.loc 2 57 0 discriminator 3
 347 0028 FB68     		ldr	r3, [r7, #12]
 348 002a 0133     		adds	r3, r3, #1
 349 002c FB60     		str	r3, [r7, #12]
 350              	.L5:
  57:bootLoader.c  **** 	for(i=dataArrIndex; i<(SEGMENT_SIZE+dataArrIndex); i++)
 351              		.loc 2 57 0 is_stmt 0 discriminator 1
 352 002e 0C4B     		ldr	r3, .L9
 353 0030 1B68     		ldr	r3, [r3]
 354 0032 03F50072 		add	r2, r3, #512
 355 0036 FB68     		ldr	r3, [r7, #12]
 356 0038 9A42     		cmp	r2, r3
 357 003a EBD8     		bhi	.L6
  61:bootLoader.c  **** 	}
  62:bootLoader.c  **** 	dataArrIndex=i;
 358              		.loc 2 62 0 is_stmt 1
 359 003c 084A     		ldr	r2, .L9
 360 003e FB68     		ldr	r3, [r7, #12]
 361 0040 1360     		str	r3, [r2]
  63:bootLoader.c  **** 	if(dataArrIndex>SMALL_PAGE_SIZE)
 362              		.loc 2 63 0
 363 0042 074B     		ldr	r3, .L9
 364 0044 1B68     		ldr	r3, [r3]
 365 0046 B3F5805F 		cmp	r3, #4096
 366 004a 04D9     		bls	.L8
  64:bootLoader.c  **** 	{
  65:bootLoader.c  **** 		dataArrIndex--;
 367              		.loc 2 65 0
 368 004c 044B     		ldr	r3, .L9
 369 004e 1B68     		ldr	r3, [r3]
 370 0050 013B     		subs	r3, r3, #1
 371 0052 034A     		ldr	r2, .L9
 372 0054 1360     		str	r3, [r2]
 373              	.L8:
  66:bootLoader.c  **** 	}
  67:bootLoader.c  **** 
  68:bootLoader.c  **** 
  69:bootLoader.c  **** }
 374              		.loc 2 69 0
 375 0056 00BF     		nop
 376 0058 1437     		adds	r7, r7, #20
 377              		.cfi_def_cfa_offset 4
 378 005a BD46     		mov	sp, r7
 379              		.cfi_def_cfa_register 13
 380              		@ sp needed
 381 005c 80BC     		pop	{r7}
 382              		.cfi_restore 7
 383              		.cfi_def_cfa_offset 0
 384 005e 7047     		bx	lr
 385              	.L10:
 386              		.align	2
 387              	.L9:
 388 0060 00000000 		.word	dataArrIndex
 389 0064 00000000 		.word	dataArr
 390              		.cfi_endproc
 391              	.LFE47:
 393              		.section	.text.cpyDataV2,"ax",%progbits
 394              		.align	2
 395              		.global	cpyDataV2
 396              		.thumb
 397              		.thumb_func
 399              	cpyDataV2:
 400              	.LFB48:
  70:bootLoader.c  **** void cpyDataV2(struct pbuf *payloadPtr)
  71:bootLoader.c  **** {
 401              		.loc 2 71 0
 402              		.cfi_startproc
 403              		@ args = 0, pretend = 0, frame = 16
 404              		@ frame_needed = 1, uses_anonymous_args = 0
 405              		@ link register save eliminated.
 406 0000 80B4     		push	{r7}
 407              		.cfi_def_cfa_offset 4
 408              		.cfi_offset 7, -4
 409 0002 85B0     		sub	sp, sp, #20
 410              		.cfi_def_cfa_offset 24
 411 0004 00AF     		add	r7, sp, #0
 412              		.cfi_def_cfa_register 7
 413 0006 7860     		str	r0, [r7, #4]
  72:bootLoader.c  **** 	uint32_t i=0;
 414              		.loc 2 72 0
 415 0008 0023     		movs	r3, #0
 416 000a FB60     		str	r3, [r7, #12]
  73:bootLoader.c  **** 	while(payloadPtr!=NULL)
 417              		.loc 2 73 0
 418 000c 22E0     		b	.L12
 419              	.L15:
  74:bootLoader.c  **** 	{
  75:bootLoader.c  **** 		for(i=dataArrIndex;i<(payloadPtr->len+dataArrIndex);i++)
 420              		.loc 2 75 0
 421 000e 174B     		ldr	r3, .L16
 422 0010 1B68     		ldr	r3, [r3]
 423 0012 FB60     		str	r3, [r7, #12]
 424 0014 0FE0     		b	.L13
 425              	.L14:
  76:bootLoader.c  **** 		{
  77:bootLoader.c  **** 			dataArr[i]=*(uint8_t*)(payloadPtr->payload);
 426              		.loc 2 77 0 discriminator 3
 427 0016 7B68     		ldr	r3, [r7, #4]
 428 0018 5B68     		ldr	r3, [r3, #4]
 429 001a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 430 001c 144A     		ldr	r2, .L16+4
 431 001e FB68     		ldr	r3, [r7, #12]
 432 0020 1344     		add	r3, r3, r2
 433 0022 0A46     		mov	r2, r1
 434 0024 1A70     		strb	r2, [r3]
  78:bootLoader.c  **** 			payloadPtr->payload++;
 435              		.loc 2 78 0 discriminator 3
 436 0026 7B68     		ldr	r3, [r7, #4]
 437 0028 5B68     		ldr	r3, [r3, #4]
 438 002a 5A1C     		adds	r2, r3, #1
 439 002c 7B68     		ldr	r3, [r7, #4]
 440 002e 5A60     		str	r2, [r3, #4]
  75:bootLoader.c  **** 		{
 441              		.loc 2 75 0 discriminator 3
 442 0030 FB68     		ldr	r3, [r7, #12]
 443 0032 0133     		adds	r3, r3, #1
 444 0034 FB60     		str	r3, [r7, #12]
 445              	.L13:
  75:bootLoader.c  **** 		{
 446              		.loc 2 75 0 is_stmt 0 discriminator 1
 447 0036 7B68     		ldr	r3, [r7, #4]
 448 0038 5B89     		ldrh	r3, [r3, #10]
 449 003a 1A46     		mov	r2, r3
 450 003c 0B4B     		ldr	r3, .L16
 451 003e 1B68     		ldr	r3, [r3]
 452 0040 1A44     		add	r2, r2, r3
 453 0042 FB68     		ldr	r3, [r7, #12]
 454 0044 9A42     		cmp	r2, r3
 455 0046 E6D8     		bhi	.L14
  79:bootLoader.c  **** 		}
  80:bootLoader.c  **** 		payloadPtr=payloadPtr->next;
 456              		.loc 2 80 0 is_stmt 1
 457 0048 7B68     		ldr	r3, [r7, #4]
 458 004a 1B68     		ldr	r3, [r3]
 459 004c 7B60     		str	r3, [r7, #4]
  81:bootLoader.c  **** 		dataArrIndex=i;
 460              		.loc 2 81 0
 461 004e 074A     		ldr	r2, .L16
 462 0050 FB68     		ldr	r3, [r7, #12]
 463 0052 1360     		str	r3, [r2]
 464              	.L12:
  73:bootLoader.c  **** 	{
 465              		.loc 2 73 0
 466 0054 7B68     		ldr	r3, [r7, #4]
 467 0056 002B     		cmp	r3, #0
 468 0058 D9D1     		bne	.L15
  82:bootLoader.c  **** 
  83:bootLoader.c  **** 	}
  84:bootLoader.c  **** 	dataArrIndex=i;
 469              		.loc 2 84 0
 470 005a 044A     		ldr	r2, .L16
 471 005c FB68     		ldr	r3, [r7, #12]
 472 005e 1360     		str	r3, [r2]
  85:bootLoader.c  **** 
  86:bootLoader.c  **** }
 473              		.loc 2 86 0
 474 0060 00BF     		nop
 475 0062 1437     		adds	r7, r7, #20
 476              		.cfi_def_cfa_offset 4
 477 0064 BD46     		mov	sp, r7
 478              		.cfi_def_cfa_register 13
 479              		@ sp needed
 480 0066 80BC     		pop	{r7}
 481              		.cfi_restore 7
 482              		.cfi_def_cfa_offset 0
 483 0068 7047     		bx	lr
 484              	.L17:
 485 006a 00BF     		.align	2
 486              	.L16:
 487 006c 00000000 		.word	dataArrIndex
 488 0070 00000000 		.word	dataArr
 489              		.cfi_endproc
 490              	.LFE48:
 492              		.section	.text.memoryWrite,"ax",%progbits
 493              		.align	2
 494              		.global	memoryWrite
 495              		.thumb
 496              		.thumb_func
 498              	memoryWrite:
 499              	.LFB49:
  87:bootLoader.c  **** 
  88:bootLoader.c  **** void memoryWrite(uint32_t pageBeginAddr)
  89:bootLoader.c  **** {
 500              		.loc 2 89 0
 501              		.cfi_startproc
 502              		@ args = 0, pretend = 0, frame = 8
 503              		@ frame_needed = 1, uses_anonymous_args = 0
 504 0000 80B5     		push	{r7, lr}
 505              		.cfi_def_cfa_offset 8
 506              		.cfi_offset 7, -8
 507              		.cfi_offset 14, -4
 508 0002 82B0     		sub	sp, sp, #8
 509              		.cfi_def_cfa_offset 16
 510 0004 00AF     		add	r7, sp, #0
 511              		.cfi_def_cfa_register 7
 512 0006 7860     		str	r0, [r7, #4]
  90:bootLoader.c  **** 	if(sectorNumber < 16)
 513              		.loc 2 90 0
 514 0008 5A4B     		ldr	r3, .L33
 515 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 516 000c 0F2B     		cmp	r3, #15
 517 000e 54D8     		bhi	.L19
  91:bootLoader.c  **** 	{
  92:bootLoader.c  **** 		return_code = prepare_sector(sectorNumber,sectorNumber);
 518              		.loc 2 92 0
 519 0010 584B     		ldr	r3, .L33
 520 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 521 0014 1A46     		mov	r2, r3
 522 0016 574B     		ldr	r3, .L33
 523 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 524 001a 1946     		mov	r1, r3
 525 001c 1046     		mov	r0, r2
 526 001e FFF7FEFF 		bl	prepare_sector
 527 0022 0246     		mov	r2, r0
 528 0024 544B     		ldr	r3, .L33+4
 529 0026 1A60     		str	r2, [r3]
  93:bootLoader.c  **** 		if(return_code != 0)
 530              		.loc 2 93 0
 531 0028 534B     		ldr	r3, .L33+4
 532 002a 1B68     		ldr	r3, [r3]
 533 002c 002B     		cmp	r3, #0
 534 002e 40F09480 		bne	.L28
  94:bootLoader.c  **** 			return;
  95:bootLoader.c  **** 
  96:bootLoader.c  **** 		return_code = erase_sector(sectorNumber,sectorNumber);
 535              		.loc 2 96 0
 536 0032 504B     		ldr	r3, .L33
 537 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 538 0036 1A46     		mov	r2, r3
 539 0038 4E4B     		ldr	r3, .L33
 540 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 541 003c 1946     		mov	r1, r3
 542 003e 1046     		mov	r0, r2
 543 0040 FFF7FEFF 		bl	erase_sector
 544 0044 0246     		mov	r2, r0
 545 0046 4C4B     		ldr	r3, .L33+4
 546 0048 1A60     		str	r2, [r3]
  97:bootLoader.c  **** 		if(return_code != 0)
 547              		.loc 2 97 0
 548 004a 4B4B     		ldr	r3, .L33+4
 549 004c 1B68     		ldr	r3, [r3]
 550 004e 002B     		cmp	r3, #0
 551 0050 40F08580 		bne	.L29
  98:bootLoader.c  **** 			return;
  99:bootLoader.c  **** 
 100:bootLoader.c  **** 		return_code = prepare_sector(sectorNumber,sectorNumber);
 552              		.loc 2 100 0
 553 0054 474B     		ldr	r3, .L33
 554 0056 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 555 0058 1A46     		mov	r2, r3
 556 005a 464B     		ldr	r3, .L33
 557 005c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 558 005e 1946     		mov	r1, r3
 559 0060 1046     		mov	r0, r2
 560 0062 FFF7FEFF 		bl	prepare_sector
 561 0066 0246     		mov	r2, r0
 562 0068 434B     		ldr	r3, .L33+4
 563 006a 1A60     		str	r2, [r3]
 101:bootLoader.c  **** 		if(return_code != 0)
 564              		.loc 2 101 0
 565 006c 424B     		ldr	r3, .L33+4
 566 006e 1B68     		ldr	r3, [r3]
 567 0070 002B     		cmp	r3, #0
 568 0072 76D1     		bne	.L30
 102:bootLoader.c  **** 			return;
 103:bootLoader.c  **** 
 104:bootLoader.c  **** 		return_code = write_to_flash(pageBeginAddr, &dataArr[0], 4096);
 569              		.loc 2 104 0
 570 0074 7B68     		ldr	r3, [r7, #4]
 571 0076 4FF48052 		mov	r2, #4096
 572 007a 4049     		ldr	r1, .L33+8
 573 007c 1846     		mov	r0, r3
 574 007e FFF7FEFF 		bl	write_to_flash
 575 0082 0246     		mov	r2, r0
 576 0084 3C4B     		ldr	r3, .L33+4
 577 0086 1A60     		str	r2, [r3]
 105:bootLoader.c  **** 		if(return_code != 0)
 578              		.loc 2 105 0
 579 0088 3B4B     		ldr	r3, .L33+4
 580 008a 1B68     		ldr	r3, [r3]
 581 008c 002B     		cmp	r3, #0
 582 008e 6AD1     		bne	.L31
 106:bootLoader.c  **** 			return;
 107:bootLoader.c  **** 
 108:bootLoader.c  **** 		return_code = compare_mem(pageBeginAddr, &dataArr[0], 4096);
 583              		.loc 2 108 0
 584 0090 7B68     		ldr	r3, [r7, #4]
 585 0092 4FF48052 		mov	r2, #4096
 586 0096 3949     		ldr	r1, .L33+8
 587 0098 1846     		mov	r0, r3
 588 009a FFF7FEFF 		bl	compare_mem
 589 009e 0246     		mov	r2, r0
 590 00a0 354B     		ldr	r3, .L33+4
 591 00a2 1A60     		str	r2, [r3]
 109:bootLoader.c  **** 		if(return_code != 0)
 592              		.loc 2 109 0
 593 00a4 344B     		ldr	r3, .L33+4
 594 00a6 1B68     		ldr	r3, [r3]
 595 00a8 002B     		cmp	r3, #0
 596 00aa 5ED1     		bne	.L32
 110:bootLoader.c  **** 			return;
 111:bootLoader.c  **** 
 112:bootLoader.c  **** 		sectorNumber++;
 597              		.loc 2 112 0
 598 00ac 314B     		ldr	r3, .L33
 599 00ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 600 00b0 0133     		adds	r3, r3, #1
 601 00b2 DAB2     		uxtb	r2, r3
 602 00b4 2F4B     		ldr	r3, .L33
 603 00b6 1A70     		strb	r2, [r3]
 604 00b8 41E0     		b	.L26
 605              	.L19:
 113:bootLoader.c  **** 	}
 114:bootLoader.c  **** 	else
 115:bootLoader.c  **** 	{
 116:bootLoader.c  **** //		if(pageSize!=LARGE_PAGE_SIZE)
 117:bootLoader.c  **** //			pageSize=LARGE_PAGE_SIZE;
 118:bootLoader.c  **** 		if(sectorFill == 0)
 606              		.loc 2 118 0
 607 00ba 314B     		ldr	r3, .L33+12
 608 00bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 609 00be 002B     		cmp	r3, #0
 610 00c0 17D1     		bne	.L27
 119:bootLoader.c  **** 		{
 120:bootLoader.c  **** 	 		return_code = prepare_sector(sectorNumber,sectorNumber);
 611              		.loc 2 120 0
 612 00c2 2C4B     		ldr	r3, .L33
 613 00c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 614 00c6 1A46     		mov	r2, r3
 615 00c8 2A4B     		ldr	r3, .L33
 616 00ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 617 00cc 1946     		mov	r1, r3
 618 00ce 1046     		mov	r0, r2
 619 00d0 FFF7FEFF 		bl	prepare_sector
 620 00d4 0246     		mov	r2, r0
 621 00d6 284B     		ldr	r3, .L33+4
 622 00d8 1A60     		str	r2, [r3]
 121:bootLoader.c  **** //	 		if(return_code != 0)
 122:bootLoader.c  **** //	 			return;
 123:bootLoader.c  **** 
 124:bootLoader.c  **** 	 		return_code = erase_sector(sectorNumber,sectorNumber);
 623              		.loc 2 124 0
 624 00da 264B     		ldr	r3, .L33
 625 00dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 626 00de 1A46     		mov	r2, r3
 627 00e0 244B     		ldr	r3, .L33
 628 00e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 629 00e4 1946     		mov	r1, r3
 630 00e6 1046     		mov	r0, r2
 631 00e8 FFF7FEFF 		bl	erase_sector
 632 00ec 0246     		mov	r2, r0
 633 00ee 224B     		ldr	r3, .L33+4
 634 00f0 1A60     		str	r2, [r3]
 635              	.L27:
 125:bootLoader.c  **** //	 		if(return_code != 0)
 126:bootLoader.c  **** //	 			return;
 127:bootLoader.c  **** 		}
 128:bootLoader.c  **** 		return_code = prepare_sector(sectorNumber,sectorNumber);
 636              		.loc 2 128 0
 637 00f2 204B     		ldr	r3, .L33
 638 00f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 639 00f6 1A46     		mov	r2, r3
 640 00f8 1E4B     		ldr	r3, .L33
 641 00fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 642 00fc 1946     		mov	r1, r3
 643 00fe 1046     		mov	r0, r2
 644 0100 FFF7FEFF 		bl	prepare_sector
 645 0104 0246     		mov	r2, r0
 646 0106 1C4B     		ldr	r3, .L33+4
 647 0108 1A60     		str	r2, [r3]
 129:bootLoader.c  **** //		if(return_code != 0)
 130:bootLoader.c  **** //			return;
 131:bootLoader.c  **** 
 132:bootLoader.c  **** 		return_code = write_to_flash(pageBeginAddr,&dataArr[0], 4096);
 648              		.loc 2 132 0
 649 010a 7B68     		ldr	r3, [r7, #4]
 650 010c 4FF48052 		mov	r2, #4096
 651 0110 1A49     		ldr	r1, .L33+8
 652 0112 1846     		mov	r0, r3
 653 0114 FFF7FEFF 		bl	write_to_flash
 654 0118 0246     		mov	r2, r0
 655 011a 174B     		ldr	r3, .L33+4
 656 011c 1A60     		str	r2, [r3]
 133:bootLoader.c  **** //	 	if(return_code != 0)
 134:bootLoader.c  **** //	 		return;
 135:bootLoader.c  **** 
 136:bootLoader.c  **** 		return_code = compare_mem(pageBeginAddr, &dataArr[0], 4096);
 657              		.loc 2 136 0
 658 011e 7B68     		ldr	r3, [r7, #4]
 659 0120 4FF48052 		mov	r2, #4096
 660 0124 1549     		ldr	r1, .L33+8
 661 0126 1846     		mov	r0, r3
 662 0128 FFF7FEFF 		bl	compare_mem
 663 012c 0246     		mov	r2, r0
 664 012e 124B     		ldr	r3, .L33+4
 665 0130 1A60     		str	r2, [r3]
 137:bootLoader.c  **** //	 	if(return_code != 0)
 138:bootLoader.c  **** //	 		return;
 139:bootLoader.c  **** 
 140:bootLoader.c  **** 	 	sectorFill++;
 666              		.loc 2 140 0
 667 0132 134B     		ldr	r3, .L33+12
 668 0134 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 669 0136 0133     		adds	r3, r3, #1
 670 0138 DAB2     		uxtb	r2, r3
 671 013a 114B     		ldr	r3, .L33+12
 672 013c 1A70     		strb	r2, [r3]
 673              	.L26:
 141:bootLoader.c  **** 	}
 142:bootLoader.c  **** 	if(sectorFill == 8)
 674              		.loc 2 142 0
 675 013e 104B     		ldr	r3, .L33+12
 676 0140 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 677 0142 082B     		cmp	r3, #8
 678 0144 12D1     		bne	.L18
 143:bootLoader.c  **** 	{
 144:bootLoader.c  **** 		sectorFill = 0;
 679              		.loc 2 144 0
 680 0146 0E4B     		ldr	r3, .L33+12
 681 0148 0022     		movs	r2, #0
 682 014a 1A70     		strb	r2, [r3]
 145:bootLoader.c  **** 		sectorNumber++;
 683              		.loc 2 145 0
 684 014c 094B     		ldr	r3, .L33
 685 014e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 686 0150 0133     		adds	r3, r3, #1
 687 0152 DAB2     		uxtb	r2, r3
 688 0154 074B     		ldr	r3, .L33
 689 0156 1A70     		strb	r2, [r3]
 690 0158 08E0     		b	.L18
 691              	.L28:
  94:bootLoader.c  **** 
 692              		.loc 2 94 0
 693 015a 00BF     		nop
 694 015c 06E0     		b	.L18
 695              	.L29:
  98:bootLoader.c  **** 
 696              		.loc 2 98 0
 697 015e 00BF     		nop
 698 0160 04E0     		b	.L18
 699              	.L30:
 102:bootLoader.c  **** 
 700              		.loc 2 102 0
 701 0162 00BF     		nop
 702 0164 02E0     		b	.L18
 703              	.L31:
 106:bootLoader.c  **** 
 704              		.loc 2 106 0
 705 0166 00BF     		nop
 706 0168 00E0     		b	.L18
 707              	.L32:
 110:bootLoader.c  **** 
 708              		.loc 2 110 0
 709 016a 00BF     		nop
 710              	.L18:
 146:bootLoader.c  **** 	}
 147:bootLoader.c  **** }
 711              		.loc 2 147 0
 712 016c 0837     		adds	r7, r7, #8
 713              		.cfi_def_cfa_offset 8
 714 016e BD46     		mov	sp, r7
 715              		.cfi_def_cfa_register 13
 716              		@ sp needed
 717 0170 80BD     		pop	{r7, pc}
 718              	.L34:
 719 0172 00BF     		.align	2
 720              	.L33:
 721 0174 00000000 		.word	sectorNumber
 722 0178 00000000 		.word	return_code
 723 017c 00000000 		.word	dataArr
 724 0180 00000000 		.word	sectorFill
 725              		.cfi_endproc
 726              	.LFE49:
 728              		.section	.text.bootLoad,"ax",%progbits
 729              		.align	2
 730              		.global	bootLoad
 731              		.thumb
 732              		.thumb_func
 734              	bootLoad:
 735              	.LFB50:
 148:bootLoader.c  **** 
 149:bootLoader.c  **** void bootLoad(struct netif *netif_eth1)
 150:bootLoader.c  **** {
 736              		.loc 2 150 0
 737              		.cfi_startproc
 738              		@ args = 0, pretend = 0, frame = 8
 739              		@ frame_needed = 1, uses_anonymous_args = 0
 740 0000 80B5     		push	{r7, lr}
 741              		.cfi_def_cfa_offset 8
 742              		.cfi_offset 7, -8
 743              		.cfi_offset 14, -4
 744 0002 82B0     		sub	sp, sp, #8
 745              		.cfi_def_cfa_offset 16
 746 0004 00AF     		add	r7, sp, #0
 747              		.cfi_def_cfa_register 7
 748 0006 7860     		str	r0, [r7, #4]
 749              	.L36:
 151:bootLoader.c  **** 
 152:bootLoader.c  **** 	while(1)
 153:bootLoader.c  **** 	{
 154:bootLoader.c  **** 		ethernetif_input(netif_eth1);
 750              		.loc 2 154 0 discriminator 1
 751 0008 7868     		ldr	r0, [r7, #4]
 752 000a FFF7FEFF 		bl	ethernetif_input
 155:bootLoader.c  **** 	}
 753              		.loc 2 155 0 discriminator 1
 754 000e FBE7     		b	.L36
 755              		.cfi_endproc
 756              	.LFE50:
 758              		.section	.text.jump_to_app_section,"ax",%progbits
 759              		.align	2
 760              		.global	jump_to_app_section
 761              		.thumb
 762              		.thumb_func
 764              	jump_to_app_section:
 765              	.LFB51:
 156:bootLoader.c  **** 
 157:bootLoader.c  **** }
 158:bootLoader.c  **** void jump_to_app_section()
 159:bootLoader.c  **** {
 766              		.loc 2 159 0
 767              		.cfi_startproc
 768              		@ args = 0, pretend = 0, frame = 16
 769              		@ frame_needed = 1, uses_anonymous_args = 0
 770 0000 80B5     		push	{r7, lr}
 771              		.cfi_def_cfa_offset 8
 772              		.cfi_offset 7, -8
 773              		.cfi_offset 14, -4
 774 0002 84B0     		sub	sp, sp, #16
 775              		.cfi_def_cfa_offset 24
 776 0004 00AF     		add	r7, sp, #0
 777              		.cfi_def_cfa_register 7
 160:bootLoader.c  **** 	uint32_t* jump_code;
 161:bootLoader.c  **** 	uint32_t temp=0;
 778              		.loc 2 161 0
 779 0006 0023     		movs	r3, #0
 780 0008 FB60     		str	r3, [r7, #12]
 162:bootLoader.c  **** 	jump_code =0x10004;				//change this as the length of the bootLoader will not be 8K now.
 781              		.loc 2 162 0
 782 000a 0A4B     		ldr	r3, .L38
 783 000c BB60     		str	r3, [r7, #8]
 163:bootLoader.c  **** 
 164:bootLoader.c  **** 	int APP_SECTION_ADDR = *jump_code;
 784              		.loc 2 164 0
 785 000e BB68     		ldr	r3, [r7, #8]
 786 0010 1B68     		ldr	r3, [r3]
 787 0012 7B60     		str	r3, [r7, #4]
 165:bootLoader.c  **** 	SCB->VTOR = APP_SECTION_ADDR & 0x1FFFFF80;
 788              		.loc 2 165 0
 789 0014 084A     		ldr	r2, .L38+4
 790 0016 7B68     		ldr	r3, [r7, #4]
 791 0018 23F06043 		bic	r3, r3, #-536870912
 792 001c 23F07F03 		bic	r3, r3, #127
 793 0020 9360     		str	r3, [r2, #8]
 166:bootLoader.c  **** 	temp= SCB->VTOR;
 794              		.loc 2 166 0
 795 0022 054B     		ldr	r3, .L38+4
 796 0024 9B68     		ldr	r3, [r3, #8]
 797 0026 FB60     		str	r3, [r7, #12]
 167:bootLoader.c  **** 	(*((void(*)(void))APP_SECTION_ADDR))();
 798              		.loc 2 167 0
 799 0028 7B68     		ldr	r3, [r7, #4]
 800 002a 9847     		blx	r3
 168:bootLoader.c  **** }
 801              		.loc 2 168 0
 802 002c 00BF     		nop
 803 002e 1037     		adds	r7, r7, #16
 804              		.cfi_def_cfa_offset 8
 805 0030 BD46     		mov	sp, r7
 806              		.cfi_def_cfa_register 13
 807              		@ sp needed
 808 0032 80BD     		pop	{r7, pc}
 809              	.L39:
 810              		.align	2
 811              	.L38:
 812 0034 04000100 		.word	65540
 813 0038 00ED00E0 		.word	-536810240
 814              		.cfi_endproc
 815              	.LFE51:
 817              		.section	.text.erase_sector,"ax",%progbits
 818              		.align	2
 819              		.global	erase_sector
 820              		.thumb
 821              		.thumb_func
 823              	erase_sector:
 824              	.LFB52:
 169:bootLoader.c  **** int erase_sector(unsigned int sector_start, unsigned int sector_end)
 170:bootLoader.c  **** {
 825              		.loc 2 170 0
 826              		.cfi_startproc
 827              		@ args = 0, pretend = 0, frame = 8
 828              		@ frame_needed = 1, uses_anonymous_args = 0
 829 0000 80B5     		push	{r7, lr}
 830              		.cfi_def_cfa_offset 8
 831              		.cfi_offset 7, -8
 832              		.cfi_offset 14, -4
 833 0002 82B0     		sub	sp, sp, #8
 834              		.cfi_def_cfa_offset 16
 835 0004 00AF     		add	r7, sp, #0
 836              		.cfi_def_cfa_register 7
 837 0006 7860     		str	r0, [r7, #4]
 838 0008 3960     		str	r1, [r7]
 171:bootLoader.c  **** 	command[0] = ERASE_SECTOR;
 839              		.loc 2 171 0
 840 000a 0B4B     		ldr	r3, .L42
 841 000c 3422     		movs	r2, #52
 842 000e 1A60     		str	r2, [r3]
 172:bootLoader.c  **** 	command[1] = (unsigned int) sector_start;
 843              		.loc 2 172 0
 844 0010 094A     		ldr	r2, .L42
 845 0012 7B68     		ldr	r3, [r7, #4]
 846 0014 5360     		str	r3, [r2, #4]
 173:bootLoader.c  **** 	command[2] = (unsigned int) sector_end;
 847              		.loc 2 173 0
 848 0016 084A     		ldr	r2, .L42
 849 0018 3B68     		ldr	r3, [r7]
 850 001a 9360     		str	r3, [r2, #8]
 174:bootLoader.c  ****     command[3] = 0x30e58e;//SystemCoreClock / 1000;
 851              		.loc 2 174 0
 852 001c 064B     		ldr	r3, .L42
 853 001e 074A     		ldr	r2, .L42+4
 854 0020 DA60     		str	r2, [r3, #12]
 175:bootLoader.c  ****     iap_entry(command,output);
 855              		.loc 2 175 0
 856 0022 074B     		ldr	r3, .L42+8
 857 0024 0749     		ldr	r1, .L42+12
 858 0026 0448     		ldr	r0, .L42
 859 0028 9847     		blx	r3
 176:bootLoader.c  ****     return (int) output[0];
 860              		.loc 2 176 0
 861 002a 064B     		ldr	r3, .L42+12
 862 002c 1B68     		ldr	r3, [r3]
 177:bootLoader.c  **** }
 863              		.loc 2 177 0
 864 002e 1846     		mov	r0, r3
 865 0030 0837     		adds	r7, r7, #8
 866              		.cfi_def_cfa_offset 8
 867 0032 BD46     		mov	sp, r7
 868              		.cfi_def_cfa_register 13
 869              		@ sp needed
 870 0034 80BD     		pop	{r7, pc}
 871              	.L43:
 872 0036 00BF     		.align	2
 873              	.L42:
 874 0038 00000000 		.word	command
 875 003c 8EE53000 		.word	3204494
 876 0040 F11FFF1F 		.word	536813553
 877 0044 00000000 		.word	output
 878              		.cfi_endproc
 879              	.LFE52:
 881              		.section	.text.prepare_sector,"ax",%progbits
 882              		.align	2
 883              		.global	prepare_sector
 884              		.thumb
 885              		.thumb_func
 887              	prepare_sector:
 888              	.LFB53:
 178:bootLoader.c  **** int prepare_sector(unsigned int sector_start, unsigned int sector_end)
 179:bootLoader.c  **** {
 889              		.loc 2 179 0
 890              		.cfi_startproc
 891              		@ args = 0, pretend = 0, frame = 8
 892              		@ frame_needed = 1, uses_anonymous_args = 0
 893 0000 80B5     		push	{r7, lr}
 894              		.cfi_def_cfa_offset 8
 895              		.cfi_offset 7, -8
 896              		.cfi_offset 14, -4
 897 0002 82B0     		sub	sp, sp, #8
 898              		.cfi_def_cfa_offset 16
 899 0004 00AF     		add	r7, sp, #0
 900              		.cfi_def_cfa_register 7
 901 0006 7860     		str	r0, [r7, #4]
 902 0008 3960     		str	r1, [r7]
 180:bootLoader.c  **** 	command[0] = PREPARE_SECTOR;
 903              		.loc 2 180 0
 904 000a 0B4B     		ldr	r3, .L46
 905 000c 3222     		movs	r2, #50
 906 000e 1A60     		str	r2, [r3]
 181:bootLoader.c  ****   	command[1] = (unsigned int) sector_start;
 907              		.loc 2 181 0
 908 0010 094A     		ldr	r2, .L46
 909 0012 7B68     		ldr	r3, [r7, #4]
 910 0014 5360     		str	r3, [r2, #4]
 182:bootLoader.c  ****   	command[2] = (unsigned int) sector_end;
 911              		.loc 2 182 0
 912 0016 084A     		ldr	r2, .L46
 913 0018 3B68     		ldr	r3, [r7]
 914 001a 9360     		str	r3, [r2, #8]
 183:bootLoader.c  ****   	command[3] = 14748;					//SystemCoreClock / 14.748MHz;
 915              		.loc 2 183 0
 916 001c 064B     		ldr	r3, .L46
 917 001e 43F69C12 		movw	r2, #14748
 918 0022 DA60     		str	r2, [r3, #12]
 184:bootLoader.c  ****   	iap_entry(command,output);
 919              		.loc 2 184 0
 920 0024 054B     		ldr	r3, .L46+4
 921 0026 0649     		ldr	r1, .L46+8
 922 0028 0348     		ldr	r0, .L46
 923 002a 9847     		blx	r3
 185:bootLoader.c  ****   	return (int) output[0];
 924              		.loc 2 185 0
 925 002c 044B     		ldr	r3, .L46+8
 926 002e 1B68     		ldr	r3, [r3]
 186:bootLoader.c  **** }
 927              		.loc 2 186 0
 928 0030 1846     		mov	r0, r3
 929 0032 0837     		adds	r7, r7, #8
 930              		.cfi_def_cfa_offset 8
 931 0034 BD46     		mov	sp, r7
 932              		.cfi_def_cfa_register 13
 933              		@ sp needed
 934 0036 80BD     		pop	{r7, pc}
 935              	.L47:
 936              		.align	2
 937              	.L46:
 938 0038 00000000 		.word	command
 939 003c F11FFF1F 		.word	536813553
 940 0040 00000000 		.word	output
 941              		.cfi_endproc
 942              	.LFE53:
 944              		.section	.text.write_to_flash,"ax",%progbits
 945              		.align	2
 946              		.global	write_to_flash
 947              		.thumb
 948              		.thumb_func
 950              	write_to_flash:
 951              	.LFB54:
 187:bootLoader.c  **** int write_to_flash(void* flash_add, void* ram_add, int count)
 188:bootLoader.c  **** {
 952              		.loc 2 188 0
 953              		.cfi_startproc
 954              		@ args = 0, pretend = 0, frame = 16
 955              		@ frame_needed = 1, uses_anonymous_args = 0
 956 0000 80B5     		push	{r7, lr}
 957              		.cfi_def_cfa_offset 8
 958              		.cfi_offset 7, -8
 959              		.cfi_offset 14, -4
 960 0002 84B0     		sub	sp, sp, #16
 961              		.cfi_def_cfa_offset 24
 962 0004 00AF     		add	r7, sp, #0
 963              		.cfi_def_cfa_register 7
 964 0006 F860     		str	r0, [r7, #12]
 965 0008 B960     		str	r1, [r7, #8]
 966 000a 7A60     		str	r2, [r7, #4]
 189:bootLoader.c  **** 	command[0] = COPY_RAM_TO_FLASH;
 967              		.loc 2 189 0
 968 000c 0C4B     		ldr	r3, .L50
 969 000e 3322     		movs	r2, #51
 970 0010 1A60     		str	r2, [r3]
 190:bootLoader.c  ****   	command[1] = (unsigned int) flash_add;
 971              		.loc 2 190 0
 972 0012 FB68     		ldr	r3, [r7, #12]
 973 0014 0A4A     		ldr	r2, .L50
 974 0016 5360     		str	r3, [r2, #4]
 191:bootLoader.c  ****   	command[2] = (unsigned int) ram_add;
 975              		.loc 2 191 0
 976 0018 BB68     		ldr	r3, [r7, #8]
 977 001a 094A     		ldr	r2, .L50
 978 001c 9360     		str	r3, [r2, #8]
 192:bootLoader.c  ****   	command[3] = count;
 979              		.loc 2 192 0
 980 001e 7B68     		ldr	r3, [r7, #4]
 981 0020 074A     		ldr	r2, .L50
 982 0022 D360     		str	r3, [r2, #12]
 193:bootLoader.c  ****   	command[4] = 0x30e58e;//SystemCoreClock / 1000;
 983              		.loc 2 193 0
 984 0024 064B     		ldr	r3, .L50
 985 0026 074A     		ldr	r2, .L50+4
 986 0028 1A61     		str	r2, [r3, #16]
 194:bootLoader.c  ****   	iap_entry(command,output);
 987              		.loc 2 194 0
 988 002a 074B     		ldr	r3, .L50+8
 989 002c 0749     		ldr	r1, .L50+12
 990 002e 0448     		ldr	r0, .L50
 991 0030 9847     		blx	r3
 195:bootLoader.c  ****   	return (int) output[0];
 992              		.loc 2 195 0
 993 0032 064B     		ldr	r3, .L50+12
 994 0034 1B68     		ldr	r3, [r3]
 196:bootLoader.c  **** }
 995              		.loc 2 196 0
 996 0036 1846     		mov	r0, r3
 997 0038 1037     		adds	r7, r7, #16
 998              		.cfi_def_cfa_offset 8
 999 003a BD46     		mov	sp, r7
 1000              		.cfi_def_cfa_register 13
 1001              		@ sp needed
 1002 003c 80BD     		pop	{r7, pc}
 1003              	.L51:
 1004 003e 00BF     		.align	2
 1005              	.L50:
 1006 0040 00000000 		.word	command
 1007 0044 8EE53000 		.word	3204494
 1008 0048 F11FFF1F 		.word	536813553
 1009 004c 00000000 		.word	output
 1010              		.cfi_endproc
 1011              	.LFE54:
 1013              		.section	.text.blank_check,"ax",%progbits
 1014              		.align	2
 1015              		.global	blank_check
 1016              		.thumb
 1017              		.thumb_func
 1019              	blank_check:
 1020              	.LFB55:
 197:bootLoader.c  **** int blank_check(unsigned int sector_start, unsigned int sector_end)
 198:bootLoader.c  **** {
 1021              		.loc 2 198 0
 1022              		.cfi_startproc
 1023              		@ args = 0, pretend = 0, frame = 8
 1024              		@ frame_needed = 1, uses_anonymous_args = 0
 1025 0000 80B5     		push	{r7, lr}
 1026              		.cfi_def_cfa_offset 8
 1027              		.cfi_offset 7, -8
 1028              		.cfi_offset 14, -4
 1029 0002 82B0     		sub	sp, sp, #8
 1030              		.cfi_def_cfa_offset 16
 1031 0004 00AF     		add	r7, sp, #0
 1032              		.cfi_def_cfa_register 7
 1033 0006 7860     		str	r0, [r7, #4]
 1034 0008 3960     		str	r1, [r7]
 199:bootLoader.c  **** 	command[0] = BLANK_CHECK_SECTOR;
 1035              		.loc 2 199 0
 1036 000a 0B4B     		ldr	r3, .L54
 1037 000c 3522     		movs	r2, #53
 1038 000e 1A60     		str	r2, [r3]
 200:bootLoader.c  ****   	command[1] = (unsigned int) sector_start;
 1039              		.loc 2 200 0
 1040 0010 094A     		ldr	r2, .L54
 1041 0012 7B68     		ldr	r3, [r7, #4]
 1042 0014 5360     		str	r3, [r2, #4]
 201:bootLoader.c  ****   	command[2] = (unsigned int) sector_end;
 1043              		.loc 2 201 0
 1044 0016 084A     		ldr	r2, .L54
 1045 0018 3B68     		ldr	r3, [r7]
 1046 001a 9360     		str	r3, [r2, #8]
 202:bootLoader.c  ****   	command[3] = 14748;					//SystemCoreClock / 14.748MHz;
 1047              		.loc 2 202 0
 1048 001c 064B     		ldr	r3, .L54
 1049 001e 43F69C12 		movw	r2, #14748
 1050 0022 DA60     		str	r2, [r3, #12]
 203:bootLoader.c  ****   	iap_entry(command,output);
 1051              		.loc 2 203 0
 1052 0024 054B     		ldr	r3, .L54+4
 1053 0026 0649     		ldr	r1, .L54+8
 1054 0028 0348     		ldr	r0, .L54
 1055 002a 9847     		blx	r3
 204:bootLoader.c  ****   	return (int) output[0];
 1056              		.loc 2 204 0
 1057 002c 044B     		ldr	r3, .L54+8
 1058 002e 1B68     		ldr	r3, [r3]
 205:bootLoader.c  **** }
 1059              		.loc 2 205 0
 1060 0030 1846     		mov	r0, r3
 1061 0032 0837     		adds	r7, r7, #8
 1062              		.cfi_def_cfa_offset 8
 1063 0034 BD46     		mov	sp, r7
 1064              		.cfi_def_cfa_register 13
 1065              		@ sp needed
 1066 0036 80BD     		pop	{r7, pc}
 1067              	.L55:
 1068              		.align	2
 1069              	.L54:
 1070 0038 00000000 		.word	command
 1071 003c F11FFF1F 		.word	536813553
 1072 0040 00000000 		.word	output
 1073              		.cfi_endproc
 1074              	.LFE55:
 1076              		.section	.text.read_part_id,"ax",%progbits
 1077              		.align	2
 1078              		.global	read_part_id
 1079              		.thumb
 1080              		.thumb_func
 1082              	read_part_id:
 1083              	.LFB56:
 206:bootLoader.c  **** int read_part_id(void)
 207:bootLoader.c  **** {
 1084              		.loc 2 207 0
 1085              		.cfi_startproc
 1086              		@ args = 0, pretend = 0, frame = 0
 1087              		@ frame_needed = 1, uses_anonymous_args = 0
 1088 0000 80B5     		push	{r7, lr}
 1089              		.cfi_def_cfa_offset 8
 1090              		.cfi_offset 7, -8
 1091              		.cfi_offset 14, -4
 1092 0002 00AF     		add	r7, sp, #0
 1093              		.cfi_def_cfa_register 7
 208:bootLoader.c  **** 	command[0] = READ_PART_ID;
 1094              		.loc 2 208 0
 1095 0004 054B     		ldr	r3, .L58
 1096 0006 3622     		movs	r2, #54
 1097 0008 1A60     		str	r2, [r3]
 209:bootLoader.c  ****   	iap_entry(command,output);
 1098              		.loc 2 209 0
 1099 000a 054B     		ldr	r3, .L58+4
 1100 000c 0549     		ldr	r1, .L58+8
 1101 000e 0348     		ldr	r0, .L58
 1102 0010 9847     		blx	r3
 210:bootLoader.c  ****   	return (int) output[0];
 1103              		.loc 2 210 0
 1104 0012 044B     		ldr	r3, .L58+8
 1105 0014 1B68     		ldr	r3, [r3]
 211:bootLoader.c  **** }
 1106              		.loc 2 211 0
 1107 0016 1846     		mov	r0, r3
 1108 0018 80BD     		pop	{r7, pc}
 1109              	.L59:
 1110 001a 00BF     		.align	2
 1111              	.L58:
 1112 001c 00000000 		.word	command
 1113 0020 F11FFF1F 		.word	536813553
 1114 0024 00000000 		.word	output
 1115              		.cfi_endproc
 1116              	.LFE56:
 1118              		.section	.text.read_boot_version,"ax",%progbits
 1119              		.align	2
 1120              		.global	read_boot_version
 1121              		.thumb
 1122              		.thumb_func
 1124              	read_boot_version:
 1125              	.LFB57:
 212:bootLoader.c  **** int read_boot_version(void)
 213:bootLoader.c  **** {
 1126              		.loc 2 213 0
 1127              		.cfi_startproc
 1128              		@ args = 0, pretend = 0, frame = 0
 1129              		@ frame_needed = 1, uses_anonymous_args = 0
 1130 0000 80B5     		push	{r7, lr}
 1131              		.cfi_def_cfa_offset 8
 1132              		.cfi_offset 7, -8
 1133              		.cfi_offset 14, -4
 1134 0002 00AF     		add	r7, sp, #0
 1135              		.cfi_def_cfa_register 7
 214:bootLoader.c  **** 	command[0] = READ_BOOT_CODE_REV;
 1136              		.loc 2 214 0
 1137 0004 054B     		ldr	r3, .L62
 1138 0006 3722     		movs	r2, #55
 1139 0008 1A60     		str	r2, [r3]
 215:bootLoader.c  ****   	iap_entry(command,output);
 1140              		.loc 2 215 0
 1141 000a 054B     		ldr	r3, .L62+4
 1142 000c 0549     		ldr	r1, .L62+8
 1143 000e 0348     		ldr	r0, .L62
 1144 0010 9847     		blx	r3
 216:bootLoader.c  ****   	return (int) output[0];
 1145              		.loc 2 216 0
 1146 0012 044B     		ldr	r3, .L62+8
 1147 0014 1B68     		ldr	r3, [r3]
 217:bootLoader.c  **** }
 1148              		.loc 2 217 0
 1149 0016 1846     		mov	r0, r3
 1150 0018 80BD     		pop	{r7, pc}
 1151              	.L63:
 1152 001a 00BF     		.align	2
 1153              	.L62:
 1154 001c 00000000 		.word	command
 1155 0020 F11FFF1F 		.word	536813553
 1156 0024 00000000 		.word	output
 1157              		.cfi_endproc
 1158              	.LFE57:
 1160              		.section	.text.reinvoke_isp,"ax",%progbits
 1161              		.align	2
 1162              		.global	reinvoke_isp
 1163              		.thumb
 1164              		.thumb_func
 1166              	reinvoke_isp:
 1167              	.LFB58:
 218:bootLoader.c  **** int reinvoke_isp(void)
 219:bootLoader.c  **** {
 1168              		.loc 2 219 0
 1169              		.cfi_startproc
 1170              		@ args = 0, pretend = 0, frame = 0
 1171              		@ frame_needed = 1, uses_anonymous_args = 0
 1172 0000 80B5     		push	{r7, lr}
 1173              		.cfi_def_cfa_offset 8
 1174              		.cfi_offset 7, -8
 1175              		.cfi_offset 14, -4
 1176 0002 00AF     		add	r7, sp, #0
 1177              		.cfi_def_cfa_register 7
 220:bootLoader.c  **** 	__disable_irq();
 1178              		.loc 2 220 0
 1179 0004 FFF7FEFF 		bl	__disable_irq
 221:bootLoader.c  ****   	command[0] = REINVOKE_ISP;
 1180              		.loc 2 221 0
 1181 0008 054B     		ldr	r3, .L66
 1182 000a 3922     		movs	r2, #57
 1183 000c 1A60     		str	r2, [r3]
 222:bootLoader.c  ****   	iap_entry(command,output);
 1184              		.loc 2 222 0
 1185 000e 054B     		ldr	r3, .L66+4
 1186 0010 0549     		ldr	r1, .L66+8
 1187 0012 0348     		ldr	r0, .L66
 1188 0014 9847     		blx	r3
 223:bootLoader.c  ****   	return (int) output[0];
 1189              		.loc 2 223 0
 1190 0016 044B     		ldr	r3, .L66+8
 1191 0018 1B68     		ldr	r3, [r3]
 224:bootLoader.c  **** }
 1192              		.loc 2 224 0
 1193 001a 1846     		mov	r0, r3
 1194 001c 80BD     		pop	{r7, pc}
 1195              	.L67:
 1196 001e 00BF     		.align	2
 1197              	.L66:
 1198 0020 00000000 		.word	command
 1199 0024 F11FFF1F 		.word	536813553
 1200 0028 00000000 		.word	output
 1201              		.cfi_endproc
 1202              	.LFE58:
 1204              		.section	.text.compare_mem,"ax",%progbits
 1205              		.align	2
 1206              		.global	compare_mem
 1207              		.thumb
 1208              		.thumb_func
 1210              	compare_mem:
 1211              	.LFB59:
 225:bootLoader.c  **** int compare_mem(void* flash_add, void* ram_add, int count)
 226:bootLoader.c  **** {
 1212              		.loc 2 226 0
 1213              		.cfi_startproc
 1214              		@ args = 0, pretend = 0, frame = 16
 1215              		@ frame_needed = 1, uses_anonymous_args = 0
 1216 0000 80B5     		push	{r7, lr}
 1217              		.cfi_def_cfa_offset 8
 1218              		.cfi_offset 7, -8
 1219              		.cfi_offset 14, -4
 1220 0002 84B0     		sub	sp, sp, #16
 1221              		.cfi_def_cfa_offset 24
 1222 0004 00AF     		add	r7, sp, #0
 1223              		.cfi_def_cfa_register 7
 1224 0006 F860     		str	r0, [r7, #12]
 1225 0008 B960     		str	r1, [r7, #8]
 1226 000a 7A60     		str	r2, [r7, #4]
 227:bootLoader.c  **** 	command[0] = COMPARE;
 1227              		.loc 2 227 0
 1228 000c 0C4B     		ldr	r3, .L70
 1229 000e 3822     		movs	r2, #56
 1230 0010 1A60     		str	r2, [r3]
 228:bootLoader.c  ****   	command[1] = (unsigned int) flash_add;
 1231              		.loc 2 228 0
 1232 0012 FB68     		ldr	r3, [r7, #12]
 1233 0014 0A4A     		ldr	r2, .L70
 1234 0016 5360     		str	r3, [r2, #4]
 229:bootLoader.c  ****   	command[2] = (unsigned int) ram_add;
 1235              		.loc 2 229 0
 1236 0018 BB68     		ldr	r3, [r7, #8]
 1237 001a 094A     		ldr	r2, .L70
 1238 001c 9360     		str	r3, [r2, #8]
 230:bootLoader.c  ****   	command[3] = count;
 1239              		.loc 2 230 0
 1240 001e 7B68     		ldr	r3, [r7, #4]
 1241 0020 074A     		ldr	r2, .L70
 1242 0022 D360     		str	r3, [r2, #12]
 231:bootLoader.c  ****   	command[4] = 0x30e58e;//SystemCoreClock / 1000;
 1243              		.loc 2 231 0
 1244 0024 064B     		ldr	r3, .L70
 1245 0026 074A     		ldr	r2, .L70+4
 1246 0028 1A61     		str	r2, [r3, #16]
 232:bootLoader.c  ****   	iap_entry(command,output);
 1247              		.loc 2 232 0
 1248 002a 074B     		ldr	r3, .L70+8
 1249 002c 0749     		ldr	r1, .L70+12
 1250 002e 0448     		ldr	r0, .L70
 1251 0030 9847     		blx	r3
 233:bootLoader.c  ****   	return (int) output[0];
 1252              		.loc 2 233 0
 1253 0032 064B     		ldr	r3, .L70+12
 1254 0034 1B68     		ldr	r3, [r3]
 234:bootLoader.c  **** }
 1255              		.loc 2 234 0
 1256 0036 1846     		mov	r0, r3
 1257 0038 1037     		adds	r7, r7, #16
 1258              		.cfi_def_cfa_offset 8
 1259 003a BD46     		mov	sp, r7
 1260              		.cfi_def_cfa_register 13
 1261              		@ sp needed
 1262 003c 80BD     		pop	{r7, pc}
 1263              	.L71:
 1264 003e 00BF     		.align	2
 1265              	.L70:
 1266 0040 00000000 		.word	command
 1267 0044 8EE53000 		.word	3204494
 1268 0048 F11FFF1F 		.word	536813553
 1269 004c 00000000 		.word	output
 1270              		.cfi_endproc
 1271              	.LFE59:
 1273              		.text
 1274              	.Letext0:
 1275              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q2\\arm-none-eabi\\include\\mach
 1276              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q2\\arm-none-eabi\\include\\sys\
 1277              		.file 5 "./Libraries/lwip-1.4.0/arch/cc.h"
 1278              		.file 6 "./Libraries/lwip-1.4.0/include/lwip/err.h"
 1279              		.file 7 "./Libraries/lwip-1.4.0/include/lwip/pbuf.h"
 1280              		.file 8 "./Libraries/lwip-1.4.0/include/ipv4/lwip/ip_addr.h"
 1281              		.file 9 "./Libraries/lwip-1.4.0/include/lwip/netif.h"
 1282              		.file 10 "system_init.h"
 1283              		.file 11 "bootLoader.h"
DEFINED SYMBOLS
                            *ABS*:00000000 bootLoader.c
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:20     .text.__disable_irq:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:24     .text.__disable_irq:00000000 __disable_irq
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:56     .bss.netif_eth0_data:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:59     .bss.netif_eth0_data:00000000 netif_eth0_data
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:62     .data.netif_eth0:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:65     .data.netif_eth0:00000000 netif_eth0
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:68     .bss.my_ipaddr_data:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:71     .bss.my_ipaddr_data:00000000 my_ipaddr_data
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:74     .bss.my_netmask_data:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:77     .bss.my_netmask_data:00000000 my_netmask_data
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:80     .bss.my_gw_data:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:83     .bss.my_gw_data:00000000 my_gw_data
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:86     .bss.last_arp_time:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:89     .bss.last_arp_time:00000000 last_arp_time
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:92     .bss.last_tcpslow_time:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:95     .bss.last_tcpslow_time:00000000 last_tcpslow_time
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:98     .bss.last_tcpfast_time:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:101    .bss.last_tcpfast_time:00000000 last_tcpfast_time
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:104    .bss.last_tcp_time:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:107    .bss.last_tcp_time:00000000 last_tcp_time
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:110    .bss.last_dhcpcoarse_time:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:113    .bss.last_dhcpcoarse_time:00000000 last_dhcpcoarse_time
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:116    .bss.last_dhcpfine_time:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:119    .bss.last_dhcpfine_time:00000000 last_dhcpfine_time
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:122    .bss.light_on:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:125    .bss.light_on:00000000 light_on
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:128    .bss.light_off:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:131    .bss.light_off:00000000 light_off
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:134    .bss.recvd_UDP_data:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:137    .bss.recvd_UDP_data:00000000 recvd_UDP_data
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:140    .bss.recvd_TCP_data:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:143    .bss.recvd_TCP_data:00000000 recvd_TCP_data
                            *COM*:00000001 command_type
                            *COM*:00000001 command_RW
                            *COM*:00000004 device_ID
                            *COM*:00000004 command_parameter
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:150    .rodata.iap_entry:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:153    .rodata.iap_entry:00000000 iap_entry
                            *COM*:00000014 command
                            *COM*:00000014 output
                            *COM*:00000004 return_code
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:162    .bss.segmentNumberRecvd:00000000 segmentNumberRecvd
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:163    .bss.segmentNumberRecvd:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:169    .bss.addrBeginPage:00000000 addrBeginPage
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:166    .bss.addrBeginPage:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:175    .data.sectorNumber:00000000 sectorNumber
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:181    .bss.sectorFill:00000000 sectorFill
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:182    .bss.sectorFill:00000000 $d
                            *COM*:00001000 dataArr
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:189    .bss.dataArrIndex:00000000 dataArrIndex
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:186    .bss.dataArrIndex:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:192    .text.addrDecode:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:197    .text.addrDecode:00000000 addrDecode
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:305    .text.cpyData:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:310    .text.cpyData:00000000 cpyData
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:388    .text.cpyData:00000060 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:394    .text.cpyDataV2:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:399    .text.cpyDataV2:00000000 cpyDataV2
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:487    .text.cpyDataV2:0000006c $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:493    .text.memoryWrite:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:498    .text.memoryWrite:00000000 memoryWrite
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:887    .text.prepare_sector:00000000 prepare_sector
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:823    .text.erase_sector:00000000 erase_sector
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:950    .text.write_to_flash:00000000 write_to_flash
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:1210   .text.compare_mem:00000000 compare_mem
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:721    .text.memoryWrite:00000174 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:729    .text.bootLoad:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:734    .text.bootLoad:00000000 bootLoad
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:759    .text.jump_to_app_section:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:764    .text.jump_to_app_section:00000000 jump_to_app_section
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:812    .text.jump_to_app_section:00000034 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:818    .text.erase_sector:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:874    .text.erase_sector:00000038 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:882    .text.prepare_sector:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:938    .text.prepare_sector:00000038 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:945    .text.write_to_flash:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:1006   .text.write_to_flash:00000040 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:1014   .text.blank_check:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:1019   .text.blank_check:00000000 blank_check
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:1070   .text.blank_check:00000038 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:1077   .text.read_part_id:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:1082   .text.read_part_id:00000000 read_part_id
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:1112   .text.read_part_id:0000001c $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:1119   .text.read_boot_version:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:1124   .text.read_boot_version:00000000 read_boot_version
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:1154   .text.read_boot_version:0000001c $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:1161   .text.reinvoke_isp:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:1166   .text.reinvoke_isp:00000000 reinvoke_isp
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:1198   .text.reinvoke_isp:00000020 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:1205   .text.compare_mem:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\cc2sU8yV.s:1266   .text.compare_mem:00000040 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
ethernetif_input
