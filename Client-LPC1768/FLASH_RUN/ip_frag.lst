   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"ip_frag.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.bss.reassdatagrams,"aw",%nobits
  20              		.align	2
  23              	reassdatagrams:
  24 0000 00000000 		.space	4
  25              		.section	.bss.ip_reass_pbufcount,"aw",%nobits
  26              		.align	1
  29              	ip_reass_pbufcount:
  30 0000 0000     		.space	2
  31              		.section	.text.ip_reass_tmr,"ax",%progbits
  32              		.align	2
  33              		.global	ip_reass_tmr
  34              		.thumb
  35              		.thumb_func
  37              	ip_reass_tmr:
  38              	.LFB17:
  39              		.file 1 "Libraries/lwip-1.4.0/core/ipv4/ip_frag.c"
   1:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** /**
   2:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * @file
   3:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * This is the IPv4 packet segmentation and reassembly implementation.
   4:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  *
   5:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  */
   6:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
   7:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** /*
   8:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
   9:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * All rights reserved. 
  10:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * 
  11:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * Redistribution and use in source and binary forms, with or without modification, 
  12:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * are permitted provided that the following conditions are met:
  13:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  *
  14:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  15:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  *    this list of conditions and the following disclaimer.
  16:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  17:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  *    this list of conditions and the following disclaimer in the documentation
  18:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  *    and/or other materials provided with the distribution.
  19:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * 3. The name of the author may not be used to endorse or promote products
  20:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  *    derived from this software without specific prior written permission. 
  21:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  *
  22:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
  23:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  24:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
  25:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
  26:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
  27:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
  28:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
  29:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
  30:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
  31:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * OF SUCH DAMAGE.
  32:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  *
  33:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * This file is part of the lwIP TCP/IP stack.
  34:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * 
  35:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * Author: Jani Monoses <jani@iv.ro> 
  36:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  *         Simon Goldschmidt
  37:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * original reassembly code by Adam Dunkels <adam@sics.se>
  38:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * 
  39:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  */
  40:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
  41:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #include "lwip/opt.h"
  42:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #include "lwip/ip_frag.h"
  43:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #include "lwip/def.h"
  44:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #include "lwip/inet_chksum.h"
  45:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #include "lwip/netif.h"
  46:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #include "lwip/snmp.h"
  47:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #include "lwip/stats.h"
  48:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #include "lwip/icmp.h"
  49:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
  50:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #include <string.h>
  51:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
  52:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #if IP_REASSEMBLY
  53:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** /**
  54:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * The IP reassembly code currently has the following limitations:
  55:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * - IP header options are not supported
  56:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * - fragments must not overlap (e.g. due to different routes),
  57:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  *   currently, overlapping or duplicate fragments are thrown away
  58:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  *   if IP_REASS_CHECK_OVERLAP=1 (the default)!
  59:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  *
  60:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * @todo: work with IP header options
  61:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  */
  62:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
  63:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** /** Setting this to 0, you can turn off checking the fragments for overlapping
  64:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * regions. The code gets a little smaller. Only use this if you know that
  65:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * overlapping won't occur on your network! */
  66:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #ifndef IP_REASS_CHECK_OVERLAP
  67:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #define IP_REASS_CHECK_OVERLAP 1
  68:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #endif /* IP_REASS_CHECK_OVERLAP */
  69:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
  70:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** /** Set to 0 to prevent freeing the oldest datagram when the reassembly buffer is
  71:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * full (IP_REASS_MAX_PBUFS pbufs are enqueued). The code gets a little smaller.
  72:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * Datagrams will be freed by timeout only. Especially useful when MEMP_NUM_REASSDATA
  73:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * is set to 1, so one datagram can be reassembled at a time, only. */
  74:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #ifndef IP_REASS_FREE_OLDEST
  75:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #define IP_REASS_FREE_OLDEST 1
  76:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #endif /* IP_REASS_FREE_OLDEST */
  77:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
  78:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #define IP_REASS_FLAG_LASTFRAG 0x01
  79:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
  80:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** /** This is a helper struct which holds the starting
  81:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * offset and the ending offset of this fragment to
  82:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * easily chain the fragments.
  83:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * It has the same packing requirements as the IP header, since it replaces
  84:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * the IP header in memory in incoming fragments (after copying it) to keep
  85:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * track of the various fragments. (-> If the IP header doesn't need packing,
  86:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * this struct doesn't need packing, too.)
  87:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  */
  88:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #ifdef PACK_STRUCT_USE_INCLUDES
  89:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #  include "arch/bpstruct.h"
  90:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #endif
  91:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** PACK_STRUCT_BEGIN
  92:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** struct ip_reass_helper {
  93:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   PACK_STRUCT_FIELD(struct pbuf *next_pbuf);
  94:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   PACK_STRUCT_FIELD(u16_t start);
  95:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   PACK_STRUCT_FIELD(u16_t end);
  96:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** } PACK_STRUCT_STRUCT;
  97:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** PACK_STRUCT_END
  98:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #ifdef PACK_STRUCT_USE_INCLUDES
  99:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #  include "arch/epstruct.h"
 100:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #endif
 101:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 102:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #define IP_ADDRESSES_AND_ID_MATCH(iphdrA, iphdrB)  \
 103:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   (ip_addr_cmp(&(iphdrA)->src, &(iphdrB)->src) && \
 104:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****    ip_addr_cmp(&(iphdrA)->dest, &(iphdrB)->dest) && \
 105:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****    IPH_ID(iphdrA) == IPH_ID(iphdrB)) ? 1 : 0
 106:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 107:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** /* global variables */
 108:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** static struct ip_reassdata *reassdatagrams;
 109:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** static u16_t ip_reass_pbufcount;
 110:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 111:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** /* function prototypes */
 112:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** static void ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev);
 113:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** static int ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev);
 114:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 115:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** /**
 116:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * Reassembly timer base function
 117:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * for both NO_SYS == 0 and 1 (!).
 118:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  *
 119:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 120:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  */
 121:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** void
 122:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** ip_reass_tmr(void)
 123:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** {
  40              		.loc 1 123 0
  41              		.cfi_startproc
  42              		@ args = 0, pretend = 0, frame = 16
  43              		@ frame_needed = 1, uses_anonymous_args = 0
  44 0000 80B5     		push	{r7, lr}
  45              		.cfi_def_cfa_offset 8
  46              		.cfi_offset 7, -8
  47              		.cfi_offset 14, -4
  48 0002 84B0     		sub	sp, sp, #16
  49              		.cfi_def_cfa_offset 24
  50 0004 00AF     		add	r7, sp, #0
  51              		.cfi_def_cfa_register 7
 124:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   struct ip_reassdata *r, *prev = NULL;
  52              		.loc 1 124 0
  53 0006 0023     		movs	r3, #0
  54 0008 BB60     		str	r3, [r7, #8]
 125:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 126:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   r = reassdatagrams;
  55              		.loc 1 126 0
  56 000a 124B     		ldr	r3, .L5
  57 000c 1B68     		ldr	r3, [r3]
  58 000e FB60     		str	r3, [r7, #12]
 127:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   while (r != NULL) {
  59              		.loc 1 127 0
  60 0010 18E0     		b	.L2
  61              	.L4:
 128:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     /* Decrement the timer. Once it reaches 0,
 129:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****      * clean up the incomplete fragment assembly */
 130:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     if (r->timer > 0) {
  62              		.loc 1 130 0
  63 0012 FB68     		ldr	r3, [r7, #12]
  64 0014 DB7F     		ldrb	r3, [r3, #31]	@ zero_extendqisi2
  65 0016 002B     		cmp	r3, #0
  66 0018 0BD0     		beq	.L3
 131:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       r->timer--;
  67              		.loc 1 131 0
  68 001a FB68     		ldr	r3, [r7, #12]
  69 001c DB7F     		ldrb	r3, [r3, #31]	@ zero_extendqisi2
  70 001e 013B     		subs	r3, r3, #1
  71 0020 DAB2     		uxtb	r2, r3
  72 0022 FB68     		ldr	r3, [r7, #12]
  73 0024 DA77     		strb	r2, [r3, #31]
 132:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
 133:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       prev = r;
  74              		.loc 1 133 0
  75 0026 FB68     		ldr	r3, [r7, #12]
  76 0028 BB60     		str	r3, [r7, #8]
 134:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       r = r->next;
  77              		.loc 1 134 0
  78 002a FB68     		ldr	r3, [r7, #12]
  79 002c 1B68     		ldr	r3, [r3]
  80 002e FB60     		str	r3, [r7, #12]
  81 0030 08E0     		b	.L2
  82              	.L3:
  83              	.LBB2:
 135:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     } else {
 136:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       /* reassembly timed out */
 137:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       struct ip_reassdata *tmp;
 138:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
 139:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       tmp = r;
  84              		.loc 1 139 0
  85 0032 FB68     		ldr	r3, [r7, #12]
  86 0034 7B60     		str	r3, [r7, #4]
 140:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       /* get the next pointer before freeing */
 141:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       r = r->next;
  87              		.loc 1 141 0
  88 0036 FB68     		ldr	r3, [r7, #12]
  89 0038 1B68     		ldr	r3, [r3]
  90 003a FB60     		str	r3, [r7, #12]
 142:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       /* free the helper struct and all enqueued pbufs */
 143:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       ip_reass_free_complete_datagram(tmp, prev);
  91              		.loc 1 143 0
  92 003c B968     		ldr	r1, [r7, #8]
  93 003e 7868     		ldr	r0, [r7, #4]
  94 0040 FFF7FEFF 		bl	ip_reass_free_complete_datagram
  95              	.L2:
  96              	.LBE2:
 127:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     /* Decrement the timer. Once it reaches 0,
  97              		.loc 1 127 0
  98 0044 FB68     		ldr	r3, [r7, #12]
  99 0046 002B     		cmp	r3, #0
 100 0048 E3D1     		bne	.L4
 144:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****      }
 145:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****    }
 146:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** }
 101              		.loc 1 146 0
 102 004a 00BF     		nop
 103 004c 1037     		adds	r7, r7, #16
 104              		.cfi_def_cfa_offset 8
 105 004e BD46     		mov	sp, r7
 106              		.cfi_def_cfa_register 13
 107              		@ sp needed
 108 0050 80BD     		pop	{r7, pc}
 109              	.L6:
 110 0052 00BF     		.align	2
 111              	.L5:
 112 0054 00000000 		.word	reassdatagrams
 113              		.cfi_endproc
 114              	.LFE17:
 116              		.section	.text.ip_reass_free_complete_datagram,"ax",%progbits
 117              		.align	2
 118              		.thumb
 119              		.thumb_func
 121              	ip_reass_free_complete_datagram:
 122              	.LFB18:
 147:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 148:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** /**
 149:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * Free a datagram (struct ip_reassdata) and all its pbufs.
 150:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * Updates the total count of enqueued pbufs (ip_reass_pbufcount),
 151:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * SNMP counters and sends an ICMP time exceeded packet.
 152:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  *
 153:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * @param ipr datagram to free
 154:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * @param prev the previous datagram in the linked list
 155:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * @return the number of pbufs freed
 156:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  */
 157:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** static int
 158:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
 159:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** {
 123              		.loc 1 159 0
 124              		.cfi_startproc
 125              		@ args = 0, pretend = 0, frame = 32
 126              		@ frame_needed = 1, uses_anonymous_args = 0
 127 0000 80B5     		push	{r7, lr}
 128              		.cfi_def_cfa_offset 8
 129              		.cfi_offset 7, -8
 130              		.cfi_offset 14, -4
 131 0002 88B0     		sub	sp, sp, #32
 132              		.cfi_def_cfa_offset 40
 133 0004 00AF     		add	r7, sp, #0
 134              		.cfi_def_cfa_register 7
 135 0006 7860     		str	r0, [r7, #4]
 136 0008 3960     		str	r1, [r7]
 160:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   u16_t pbufs_freed = 0;
 137              		.loc 1 160 0
 138 000a 0023     		movs	r3, #0
 139 000c FB83     		strh	r3, [r7, #30]	@ movhi
 161:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   u8_t clen;
 162:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   struct pbuf *p;
 163:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   struct ip_reass_helper *iprh;
 164:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 165:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   LWIP_ASSERT("prev != ipr", prev != ipr);
 166:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   if (prev != NULL) {
 140              		.loc 1 166 0
 141 000e 3B68     		ldr	r3, [r7]
 142 0010 002B     		cmp	r3, #0
 167:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 168:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   }
 169:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 170:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   snmp_inc_ipreasmfails();
 171:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #if LWIP_ICMP
 172:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   iprh = (struct ip_reass_helper *)ipr->p->payload;
 143              		.loc 1 172 0
 144 0012 7B68     		ldr	r3, [r7, #4]
 145 0014 5B68     		ldr	r3, [r3, #4]
 146 0016 5B68     		ldr	r3, [r3, #4]
 147 0018 7B61     		str	r3, [r7, #20]
 173:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   if (iprh->start == 0) {
 148              		.loc 1 173 0
 149 001a 7B69     		ldr	r3, [r7, #20]
 150 001c 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 151 001e 9BB2     		uxth	r3, r3
 152 0020 002B     		cmp	r3, #0
 153 0022 1FD1     		bne	.L9
 174:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     /* The first fragment was received, send ICMP time exceeded. */
 175:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     /* First, de-queue the first pbuf from r->p. */
 176:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     p = ipr->p;
 154              		.loc 1 176 0
 155 0024 7B68     		ldr	r3, [r7, #4]
 156 0026 5B68     		ldr	r3, [r3, #4]
 157 0028 BB61     		str	r3, [r7, #24]
 177:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     ipr->p = iprh->next_pbuf;
 158              		.loc 1 177 0
 159 002a 7B69     		ldr	r3, [r7, #20]
 160 002c 1A68     		ldr	r2, [r3]	@ unaligned
 161 002e 7B68     		ldr	r3, [r7, #4]
 162 0030 5A60     		str	r2, [r3, #4]
 178:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     /* Then, copy the original header into it. */
 179:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 163              		.loc 1 179 0
 164 0032 BB69     		ldr	r3, [r7, #24]
 165 0034 5868     		ldr	r0, [r3, #4]
 166 0036 7B68     		ldr	r3, [r7, #4]
 167 0038 0833     		adds	r3, r3, #8
 168 003a 1422     		movs	r2, #20
 169 003c 1946     		mov	r1, r3
 170 003e FFF7FEFF 		bl	memcpy
 180:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     icmp_time_exceeded(p, ICMP_TE_FRAG);
 171              		.loc 1 180 0
 172 0042 0121     		movs	r1, #1
 173 0044 B869     		ldr	r0, [r7, #24]
 174 0046 FFF7FEFF 		bl	icmp_time_exceeded
 181:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     clen = pbuf_clen(p);
 175              		.loc 1 181 0
 176 004a B869     		ldr	r0, [r7, #24]
 177 004c FFF7FEFF 		bl	pbuf_clen
 178 0050 0346     		mov	r3, r0
 179 0052 FB74     		strb	r3, [r7, #19]
 182:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 183:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     pbufs_freed += clen;
 180              		.loc 1 183 0
 181 0054 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 182 0056 9AB2     		uxth	r2, r3
 183 0058 FB8B     		ldrh	r3, [r7, #30]	@ movhi
 184 005a 1344     		add	r3, r3, r2
 185 005c FB83     		strh	r3, [r7, #30]	@ movhi
 184:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     pbuf_free(p);
 186              		.loc 1 184 0
 187 005e B869     		ldr	r0, [r7, #24]
 188 0060 FFF7FEFF 		bl	pbuf_free
 189              	.L9:
 185:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   }
 186:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #endif /* LWIP_ICMP */
 187:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 188:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   /* First, free all received pbufs.  The individual pbufs need to be released 
 189:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****      separately as they have not yet been chained */
 190:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   p = ipr->p;
 190              		.loc 1 190 0
 191 0064 7B68     		ldr	r3, [r7, #4]
 192 0066 5B68     		ldr	r3, [r3, #4]
 193 0068 BB61     		str	r3, [r7, #24]
 191:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   while (p != NULL) {
 194              		.loc 1 191 0
 195 006a 14E0     		b	.L10
 196              	.L11:
 197              	.LBB3:
 192:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     struct pbuf *pcur;
 193:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     iprh = (struct ip_reass_helper *)p->payload;
 198              		.loc 1 193 0
 199 006c BB69     		ldr	r3, [r7, #24]
 200 006e 5B68     		ldr	r3, [r3, #4]
 201 0070 7B61     		str	r3, [r7, #20]
 194:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     pcur = p;
 202              		.loc 1 194 0
 203 0072 BB69     		ldr	r3, [r7, #24]
 204 0074 FB60     		str	r3, [r7, #12]
 195:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     /* get the next pointer before freeing */
 196:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     p = iprh->next_pbuf;
 205              		.loc 1 196 0
 206 0076 7B69     		ldr	r3, [r7, #20]
 207 0078 1B68     		ldr	r3, [r3]	@ unaligned
 208 007a BB61     		str	r3, [r7, #24]
 197:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     clen = pbuf_clen(pcur);
 209              		.loc 1 197 0
 210 007c F868     		ldr	r0, [r7, #12]
 211 007e FFF7FEFF 		bl	pbuf_clen
 212 0082 0346     		mov	r3, r0
 213 0084 FB74     		strb	r3, [r7, #19]
 198:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 199:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     pbufs_freed += clen;
 214              		.loc 1 199 0
 215 0086 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 216 0088 9AB2     		uxth	r2, r3
 217 008a FB8B     		ldrh	r3, [r7, #30]	@ movhi
 218 008c 1344     		add	r3, r3, r2
 219 008e FB83     		strh	r3, [r7, #30]	@ movhi
 200:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     pbuf_free(pcur);
 220              		.loc 1 200 0
 221 0090 F868     		ldr	r0, [r7, #12]
 222 0092 FFF7FEFF 		bl	pbuf_free
 223              	.L10:
 224              	.LBE3:
 191:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     struct pbuf *pcur;
 225              		.loc 1 191 0
 226 0096 BB69     		ldr	r3, [r7, #24]
 227 0098 002B     		cmp	r3, #0
 228 009a E7D1     		bne	.L11
 201:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   }
 202:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   /* Then, unchain the struct ip_reassdata from the list and free it. */
 203:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   ip_reass_dequeue_datagram(ipr, prev);
 229              		.loc 1 203 0
 230 009c 3968     		ldr	r1, [r7]
 231 009e 7868     		ldr	r0, [r7, #4]
 232 00a0 FFF7FEFF 		bl	ip_reass_dequeue_datagram
 204:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 205:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   ip_reass_pbufcount -= pbufs_freed;
 233              		.loc 1 205 0
 234 00a4 054B     		ldr	r3, .L13
 235 00a6 1A88     		ldrh	r2, [r3]
 236 00a8 FB8B     		ldrh	r3, [r7, #30]	@ movhi
 237 00aa D31A     		subs	r3, r2, r3
 238 00ac 9AB2     		uxth	r2, r3
 239 00ae 034B     		ldr	r3, .L13
 240 00b0 1A80     		strh	r2, [r3]	@ movhi
 206:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 207:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   return pbufs_freed;
 241              		.loc 1 207 0
 242 00b2 FB8B     		ldrh	r3, [r7, #30]
 208:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** }
 243              		.loc 1 208 0
 244 00b4 1846     		mov	r0, r3
 245 00b6 2037     		adds	r7, r7, #32
 246              		.cfi_def_cfa_offset 8
 247 00b8 BD46     		mov	sp, r7
 248              		.cfi_def_cfa_register 13
 249              		@ sp needed
 250 00ba 80BD     		pop	{r7, pc}
 251              	.L14:
 252              		.align	2
 253              	.L13:
 254 00bc 00000000 		.word	ip_reass_pbufcount
 255              		.cfi_endproc
 256              	.LFE18:
 258              		.section	.text.ip_reass_remove_oldest_datagram,"ax",%progbits
 259              		.align	2
 260              		.thumb
 261              		.thumb_func
 263              	ip_reass_remove_oldest_datagram:
 264              	.LFB19:
 209:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 210:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #if IP_REASS_FREE_OLDEST
 211:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** /**
 212:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * Free the oldest datagram to make room for enqueueing new fragments.
 213:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * The datagram 'fraghdr' belongs to is not freed!
 214:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  *
 215:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * @param fraghdr IP header of the current fragment
 216:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * @param pbufs_needed number of pbufs needed to enqueue
 217:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  *        (used for freeing other datagrams if not enough space)
 218:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * @return the number of pbufs freed
 219:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  */
 220:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** static int
 221:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
 222:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** {
 265              		.loc 1 222 0
 266              		.cfi_startproc
 267              		@ args = 0, pretend = 0, frame = 32
 268              		@ frame_needed = 1, uses_anonymous_args = 0
 269 0000 80B5     		push	{r7, lr}
 270              		.cfi_def_cfa_offset 8
 271              		.cfi_offset 7, -8
 272              		.cfi_offset 14, -4
 273 0002 88B0     		sub	sp, sp, #32
 274              		.cfi_def_cfa_offset 40
 275 0004 00AF     		add	r7, sp, #0
 276              		.cfi_def_cfa_register 7
 277 0006 7860     		str	r0, [r7, #4]
 278 0008 3960     		str	r1, [r7]
 223:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   /* @todo Can't we simply remove the last datagram in the
 224:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****    *       linked list behind reassdatagrams?
 225:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****    */
 226:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   struct ip_reassdata *r, *oldest, *prev;
 227:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   int pbufs_freed = 0, pbufs_freed_current;
 279              		.loc 1 227 0
 280 000a 0023     		movs	r3, #0
 281 000c 3B61     		str	r3, [r7, #16]
 282              	.L24:
 228:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   int other_datagrams;
 229:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 230:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
 231:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****    * but don't free the datagram that 'fraghdr' belongs to! */
 232:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   do {
 233:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     oldest = NULL;
 283              		.loc 1 233 0
 284 000e 0023     		movs	r3, #0
 285 0010 BB61     		str	r3, [r7, #24]
 234:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     prev = NULL;
 286              		.loc 1 234 0
 287 0012 0023     		movs	r3, #0
 288 0014 7B61     		str	r3, [r7, #20]
 235:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     other_datagrams = 0;
 289              		.loc 1 235 0
 290 0016 0023     		movs	r3, #0
 291 0018 FB60     		str	r3, [r7, #12]
 236:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     r = reassdatagrams;
 292              		.loc 1 236 0
 293 001a 264B     		ldr	r3, .L26
 294 001c 1B68     		ldr	r3, [r3]
 295 001e FB61     		str	r3, [r7, #28]
 237:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     while (r != NULL) {
 296              		.loc 1 237 0
 297 0020 2CE0     		b	.L16
 298              	.L21:
 238:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 299              		.loc 1 238 0
 300 0022 FB69     		ldr	r3, [r7, #28]
 301 0024 5A69     		ldr	r2, [r3, #20]
 302 0026 7B68     		ldr	r3, [r7, #4]
 303 0028 DB68     		ldr	r3, [r3, #12]	@ unaligned
 304 002a 9A42     		cmp	r2, r3
 305 002c 0CD1     		bne	.L17
 306              		.loc 1 238 0 is_stmt 0 discriminator 1
 307 002e FB69     		ldr	r3, [r7, #28]
 308 0030 9A69     		ldr	r2, [r3, #24]
 309 0032 7B68     		ldr	r3, [r7, #4]
 310 0034 1B69     		ldr	r3, [r3, #16]	@ unaligned
 311 0036 9A42     		cmp	r2, r3
 312 0038 06D1     		bne	.L17
 313              		.loc 1 238 0 discriminator 2
 314 003a FB69     		ldr	r3, [r7, #28]
 315 003c 9A89     		ldrh	r2, [r3, #12]
 316 003e 7B68     		ldr	r3, [r7, #4]
 317 0040 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 318 0042 9BB2     		uxth	r3, r3
 319 0044 9A42     		cmp	r2, r3
 320 0046 10D0     		beq	.L18
 321              	.L17:
 239:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****         /* Not the same datagram as fraghdr */
 240:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****         other_datagrams++;
 322              		.loc 1 240 0 is_stmt 1
 323 0048 FB68     		ldr	r3, [r7, #12]
 324 004a 0133     		adds	r3, r3, #1
 325 004c FB60     		str	r3, [r7, #12]
 241:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****         if (oldest == NULL) {
 326              		.loc 1 241 0
 327 004e BB69     		ldr	r3, [r7, #24]
 328 0050 002B     		cmp	r3, #0
 329 0052 02D1     		bne	.L19
 242:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****           oldest = r;
 330              		.loc 1 242 0
 331 0054 FB69     		ldr	r3, [r7, #28]
 332 0056 BB61     		str	r3, [r7, #24]
 333 0058 07E0     		b	.L18
 334              	.L19:
 243:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****         } else if (r->timer <= oldest->timer) {
 335              		.loc 1 243 0
 336 005a FB69     		ldr	r3, [r7, #28]
 337 005c DA7F     		ldrb	r2, [r3, #31]	@ zero_extendqisi2
 338 005e BB69     		ldr	r3, [r7, #24]
 339 0060 DB7F     		ldrb	r3, [r3, #31]	@ zero_extendqisi2
 340 0062 9A42     		cmp	r2, r3
 341 0064 01D8     		bhi	.L18
 244:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****           /* older than the previous oldest */
 245:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****           oldest = r;
 342              		.loc 1 245 0
 343 0066 FB69     		ldr	r3, [r7, #28]
 344 0068 BB61     		str	r3, [r7, #24]
 345              	.L18:
 246:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****         }
 247:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       }
 248:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       if (r->next != NULL) {
 346              		.loc 1 248 0
 347 006a FB69     		ldr	r3, [r7, #28]
 348 006c 1B68     		ldr	r3, [r3]
 349 006e 002B     		cmp	r3, #0
 350 0070 01D0     		beq	.L20
 249:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****         prev = r;
 351              		.loc 1 249 0
 352 0072 FB69     		ldr	r3, [r7, #28]
 353 0074 7B61     		str	r3, [r7, #20]
 354              	.L20:
 250:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       }
 251:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       r = r->next;
 355              		.loc 1 251 0
 356 0076 FB69     		ldr	r3, [r7, #28]
 357 0078 1B68     		ldr	r3, [r3]
 358 007a FB61     		str	r3, [r7, #28]
 359              	.L16:
 237:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 360              		.loc 1 237 0
 361 007c FB69     		ldr	r3, [r7, #28]
 362 007e 002B     		cmp	r3, #0
 363 0080 CFD1     		bne	.L21
 252:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     }
 253:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     if (oldest != NULL) {
 364              		.loc 1 253 0
 365 0082 BB69     		ldr	r3, [r7, #24]
 366 0084 002B     		cmp	r3, #0
 367 0086 08D0     		beq	.L22
 254:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       pbufs_freed_current = ip_reass_free_complete_datagram(oldest, prev);
 368              		.loc 1 254 0
 369 0088 7969     		ldr	r1, [r7, #20]
 370 008a B869     		ldr	r0, [r7, #24]
 371 008c FFF7FEFF 		bl	ip_reass_free_complete_datagram
 372 0090 B860     		str	r0, [r7, #8]
 255:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       pbufs_freed += pbufs_freed_current;
 373              		.loc 1 255 0
 374 0092 3A69     		ldr	r2, [r7, #16]
 375 0094 BB68     		ldr	r3, [r7, #8]
 376 0096 1344     		add	r3, r3, r2
 377 0098 3B61     		str	r3, [r7, #16]
 378              	.L22:
 256:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     }
 257:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 379              		.loc 1 257 0
 380 009a 3A69     		ldr	r2, [r7, #16]
 381 009c 3B68     		ldr	r3, [r7]
 382 009e 9A42     		cmp	r2, r3
 383 00a0 02DA     		bge	.L23
 384              		.loc 1 257 0 is_stmt 0 discriminator 1
 385 00a2 FB68     		ldr	r3, [r7, #12]
 386 00a4 012B     		cmp	r3, #1
 387 00a6 B2DC     		bgt	.L24
 388              	.L23:
 258:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   return pbufs_freed;
 389              		.loc 1 258 0 is_stmt 1
 390 00a8 3B69     		ldr	r3, [r7, #16]
 259:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** }
 391              		.loc 1 259 0
 392 00aa 1846     		mov	r0, r3
 393 00ac 2037     		adds	r7, r7, #32
 394              		.cfi_def_cfa_offset 8
 395 00ae BD46     		mov	sp, r7
 396              		.cfi_def_cfa_register 13
 397              		@ sp needed
 398 00b0 80BD     		pop	{r7, pc}
 399              	.L27:
 400 00b2 00BF     		.align	2
 401              	.L26:
 402 00b4 00000000 		.word	reassdatagrams
 403              		.cfi_endproc
 404              	.LFE19:
 406              		.section	.text.ip_reass_enqueue_new_datagram,"ax",%progbits
 407              		.align	2
 408              		.thumb
 409              		.thumb_func
 411              	ip_reass_enqueue_new_datagram:
 412              	.LFB20:
 260:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #endif /* IP_REASS_FREE_OLDEST */
 261:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 262:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** /**
 263:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * Enqueues a new fragment into the fragment queue
 264:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * @param fraghdr points to the new fragments IP hdr
 265:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough sp
 266:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * @return A pointer to the queue location into which the fragment was enqueued
 267:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  */
 268:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** static struct ip_reassdata*
 269:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
 270:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** {
 413              		.loc 1 270 0
 414              		.cfi_startproc
 415              		@ args = 0, pretend = 0, frame = 16
 416              		@ frame_needed = 1, uses_anonymous_args = 0
 417 0000 80B5     		push	{r7, lr}
 418              		.cfi_def_cfa_offset 8
 419              		.cfi_offset 7, -8
 420              		.cfi_offset 14, -4
 421 0002 84B0     		sub	sp, sp, #16
 422              		.cfi_def_cfa_offset 24
 423 0004 00AF     		add	r7, sp, #0
 424              		.cfi_def_cfa_register 7
 425 0006 7860     		str	r0, [r7, #4]
 426 0008 3960     		str	r1, [r7]
 271:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   struct ip_reassdata* ipr;
 272:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   /* No matching previous fragment found, allocate a new reassdata struct */
 273:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 427              		.loc 1 273 0
 428 000a 0520     		movs	r0, #5
 429 000c FFF7FEFF 		bl	memp_malloc
 430 0010 F860     		str	r0, [r7, #12]
 274:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   if (ipr == NULL) {
 431              		.loc 1 274 0
 432 0012 FB68     		ldr	r3, [r7, #12]
 433 0014 002B     		cmp	r3, #0
 434 0016 16D1     		bne	.L29
 275:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #if IP_REASS_FREE_OLDEST
 276:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 435              		.loc 1 276 0
 436 0018 3968     		ldr	r1, [r7]
 437 001a 7868     		ldr	r0, [r7, #4]
 438 001c FFF7FEFF 		bl	ip_reass_remove_oldest_datagram
 439 0020 0246     		mov	r2, r0
 440 0022 3B68     		ldr	r3, [r7]
 441 0024 9A42     		cmp	r2, r3
 442 0026 03DB     		blt	.L30
 277:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 443              		.loc 1 277 0
 444 0028 0520     		movs	r0, #5
 445 002a FFF7FEFF 		bl	memp_malloc
 446 002e F860     		str	r0, [r7, #12]
 447              	.L30:
 278:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     }
 279:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     if (ipr == NULL)
 448              		.loc 1 279 0
 449 0030 FB68     		ldr	r3, [r7, #12]
 450 0032 002B     		cmp	r3, #0
 451 0034 07D1     		bne	.L29
 280:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #endif /* IP_REASS_FREE_OLDEST */
 281:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     {
 282:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       IPFRAG_STATS_INC(ip_frag.memerr);
 452              		.loc 1 282 0
 453 0036 114B     		ldr	r3, .L32
 454 0038 9B8F     		ldrh	r3, [r3, #60]
 455 003a 0133     		adds	r3, r3, #1
 456 003c 9AB2     		uxth	r2, r3
 457 003e 0F4B     		ldr	r3, .L32
 458 0040 9A87     		strh	r2, [r3, #60]	@ movhi
 283:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
 284:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       return NULL;
 459              		.loc 1 284 0
 460 0042 0023     		movs	r3, #0
 461 0044 16E0     		b	.L31
 462              	.L29:
 285:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     }
 286:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   }
 287:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   memset(ipr, 0, sizeof(struct ip_reassdata));
 463              		.loc 1 287 0
 464 0046 2022     		movs	r2, #32
 465 0048 0021     		movs	r1, #0
 466 004a F868     		ldr	r0, [r7, #12]
 467 004c FFF7FEFF 		bl	memset
 288:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   ipr->timer = IP_REASS_MAXAGE;
 468              		.loc 1 288 0
 469 0050 FB68     		ldr	r3, [r7, #12]
 470 0052 0322     		movs	r2, #3
 471 0054 DA77     		strb	r2, [r3, #31]
 289:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 290:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   /* enqueue the new structure to the front of the list */
 291:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   ipr->next = reassdatagrams;
 472              		.loc 1 291 0
 473 0056 0A4B     		ldr	r3, .L32+4
 474 0058 1A68     		ldr	r2, [r3]
 475 005a FB68     		ldr	r3, [r7, #12]
 476 005c 1A60     		str	r2, [r3]
 292:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   reassdatagrams = ipr;
 477              		.loc 1 292 0
 478 005e 084A     		ldr	r2, .L32+4
 479 0060 FB68     		ldr	r3, [r7, #12]
 480 0062 1360     		str	r3, [r2]
 293:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   /* copy the ip header for later tests and input */
 294:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   /* @todo: no ip options supported? */
 295:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 481              		.loc 1 295 0
 482 0064 FB68     		ldr	r3, [r7, #12]
 483 0066 0833     		adds	r3, r3, #8
 484 0068 1422     		movs	r2, #20
 485 006a 7968     		ldr	r1, [r7, #4]
 486 006c 1846     		mov	r0, r3
 487 006e FFF7FEFF 		bl	memcpy
 296:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   return ipr;
 488              		.loc 1 296 0
 489 0072 FB68     		ldr	r3, [r7, #12]
 490              	.L31:
 297:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** }
 491              		.loc 1 297 0
 492 0074 1846     		mov	r0, r3
 493 0076 1037     		adds	r7, r7, #16
 494              		.cfi_def_cfa_offset 8
 495 0078 BD46     		mov	sp, r7
 496              		.cfi_def_cfa_register 13
 497              		@ sp needed
 498 007a 80BD     		pop	{r7, pc}
 499              	.L33:
 500              		.align	2
 501              	.L32:
 502 007c 00000000 		.word	lwip_stats
 503 0080 00000000 		.word	reassdatagrams
 504              		.cfi_endproc
 505              	.LFE20:
 507              		.section	.text.ip_reass_dequeue_datagram,"ax",%progbits
 508              		.align	2
 509              		.thumb
 510              		.thumb_func
 512              	ip_reass_dequeue_datagram:
 513              	.LFB21:
 298:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 299:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** /**
 300:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 301:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * @param ipr points to the queue entry to dequeue
 302:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  */
 303:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** static void
 304:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
 305:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** {
 514              		.loc 1 305 0
 515              		.cfi_startproc
 516              		@ args = 0, pretend = 0, frame = 8
 517              		@ frame_needed = 1, uses_anonymous_args = 0
 518 0000 80B5     		push	{r7, lr}
 519              		.cfi_def_cfa_offset 8
 520              		.cfi_offset 7, -8
 521              		.cfi_offset 14, -4
 522 0002 82B0     		sub	sp, sp, #8
 523              		.cfi_def_cfa_offset 16
 524 0004 00AF     		add	r7, sp, #0
 525              		.cfi_def_cfa_register 7
 526 0006 7860     		str	r0, [r7, #4]
 527 0008 3960     		str	r1, [r7]
 306:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   
 307:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   /* dequeue the reass struct  */
 308:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   if (reassdatagrams == ipr) {
 528              		.loc 1 308 0
 529 000a 0B4B     		ldr	r3, .L37
 530 000c 1A68     		ldr	r2, [r3]
 531 000e 7B68     		ldr	r3, [r7, #4]
 532 0010 9A42     		cmp	r2, r3
 533 0012 04D1     		bne	.L35
 309:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     /* it was the first in the list */
 310:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     reassdatagrams = ipr->next;
 534              		.loc 1 310 0
 535 0014 7B68     		ldr	r3, [r7, #4]
 536 0016 1B68     		ldr	r3, [r3]
 537 0018 074A     		ldr	r2, .L37
 538 001a 1360     		str	r3, [r2]
 539 001c 03E0     		b	.L36
 540              	.L35:
 311:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   } else {
 312:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     /* it wasn't the first, so it must have a valid 'prev' */
 313:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     LWIP_ASSERT("sanity check linked list", prev != NULL);
 314:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     prev->next = ipr->next;
 541              		.loc 1 314 0
 542 001e 7B68     		ldr	r3, [r7, #4]
 543 0020 1A68     		ldr	r2, [r3]
 544 0022 3B68     		ldr	r3, [r7]
 545 0024 1A60     		str	r2, [r3]
 546              	.L36:
 315:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   }
 316:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 317:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   /* now we can free the ip_reass struct */
 318:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   memp_free(MEMP_REASSDATA, ipr);
 547              		.loc 1 318 0
 548 0026 7968     		ldr	r1, [r7, #4]
 549 0028 0520     		movs	r0, #5
 550 002a FFF7FEFF 		bl	memp_free
 319:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** }
 551              		.loc 1 319 0
 552 002e 00BF     		nop
 553 0030 0837     		adds	r7, r7, #8
 554              		.cfi_def_cfa_offset 8
 555 0032 BD46     		mov	sp, r7
 556              		.cfi_def_cfa_register 13
 557              		@ sp needed
 558 0034 80BD     		pop	{r7, pc}
 559              	.L38:
 560 0036 00BF     		.align	2
 561              	.L37:
 562 0038 00000000 		.word	reassdatagrams
 563              		.cfi_endproc
 564              	.LFE21:
 566              		.section	.text.ip_reass_chain_frag_into_datagram_and_validate,"ax",%progbits
 567              		.align	2
 568              		.thumb
 569              		.thumb_func
 571              	ip_reass_chain_frag_into_datagram_and_validate:
 572              	.LFB22:
 320:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 321:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** /**
 322:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * Chain a new pbuf into the pbuf list that composes the datagram.  The pbuf list
 323:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * will grow over time as  new pbufs are rx.
 324:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * Also checks that the datagram passes basic continuity checks (if the last
 325:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * fragment was received at least once).
 326:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * @param root_p points to the 'root' pbuf for the current datagram being assembled.
 327:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * @param new_p points to the pbuf for the current fragment
 328:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * @return 0 if invalid, >0 otherwise
 329:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  */
 330:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** static int
 331:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p)
 332:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** {
 573              		.loc 1 332 0
 574              		.cfi_startproc
 575              		@ args = 0, pretend = 0, frame = 40
 576              		@ frame_needed = 1, uses_anonymous_args = 0
 577 0000 90B5     		push	{r4, r7, lr}
 578              		.cfi_def_cfa_offset 12
 579              		.cfi_offset 4, -12
 580              		.cfi_offset 7, -8
 581              		.cfi_offset 14, -4
 582 0002 8BB0     		sub	sp, sp, #44
 583              		.cfi_def_cfa_offset 56
 584 0004 00AF     		add	r7, sp, #0
 585              		.cfi_def_cfa_register 7
 586 0006 7860     		str	r0, [r7, #4]
 587 0008 3960     		str	r1, [r7]
 333:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 588              		.loc 1 333 0
 589 000a 0023     		movs	r3, #0
 590 000c 3B62     		str	r3, [r7, #32]
 334:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   struct pbuf *q;
 335:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   u16_t offset,len;
 336:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   struct ip_hdr *fraghdr;
 337:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   int valid = 1;
 591              		.loc 1 337 0
 592 000e 0123     		movs	r3, #1
 593 0010 BB61     		str	r3, [r7, #24]
 338:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 339:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   /* Extract length and fragment offset from current fragment */
 340:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   fraghdr = (struct ip_hdr*)new_p->payload; 
 594              		.loc 1 340 0
 595 0012 3B68     		ldr	r3, [r7]
 596 0014 5B68     		ldr	r3, [r3, #4]
 597 0016 7B61     		str	r3, [r7, #20]
 341:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 598              		.loc 1 341 0
 599 0018 7B69     		ldr	r3, [r7, #20]
 600 001a 5B88     		ldrh	r3, [r3, #2]	@ unaligned
 601 001c 9BB2     		uxth	r3, r3
 602 001e 1846     		mov	r0, r3
 603 0020 FFF7FEFF 		bl	lwip_ntohs
 604 0024 0346     		mov	r3, r0
 605 0026 1C46     		mov	r4, r3
 606 0028 7B69     		ldr	r3, [r7, #20]
 607 002a 1B88     		ldrh	r3, [r3]	@ unaligned
 608 002c 9BB2     		uxth	r3, r3
 609 002e 1846     		mov	r0, r3
 610 0030 FFF7FEFF 		bl	lwip_ntohs
 611 0034 0346     		mov	r3, r0
 612 0036 1B0A     		lsrs	r3, r3, #8
 613 0038 9BB2     		uxth	r3, r3
 614 003a 03F00F03 		and	r3, r3, #15
 615 003e 9BB2     		uxth	r3, r3
 616 0040 9B00     		lsls	r3, r3, #2
 617 0042 9BB2     		uxth	r3, r3
 618 0044 E31A     		subs	r3, r4, r3
 619 0046 7B82     		strh	r3, [r7, #18]	@ movhi
 342:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 620              		.loc 1 342 0
 621 0048 7B69     		ldr	r3, [r7, #20]
 622 004a DB88     		ldrh	r3, [r3, #6]	@ unaligned
 623 004c 9BB2     		uxth	r3, r3
 624 004e 1846     		mov	r0, r3
 625 0050 FFF7FEFF 		bl	lwip_ntohs
 626 0054 0346     		mov	r3, r0
 627 0056 C3F30C03 		ubfx	r3, r3, #0, #13
 628 005a 9BB2     		uxth	r3, r3
 629 005c DB00     		lsls	r3, r3, #3
 630 005e 3B82     		strh	r3, [r7, #16]	@ movhi
 343:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 344:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   /* overwrite the fragment's ip header from the pbuf with our helper struct,
 345:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****    * and setup the embedded helper structure. */
 346:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   /* make sure the struct ip_reass_helper fits into the IP header */
 347:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
 348:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****               sizeof(struct ip_reass_helper) <= IP_HLEN);
 349:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   iprh = (struct ip_reass_helper*)new_p->payload;
 631              		.loc 1 349 0
 632 0060 3B68     		ldr	r3, [r7]
 633 0062 5B68     		ldr	r3, [r3, #4]
 634 0064 7B62     		str	r3, [r7, #36]
 350:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   iprh->next_pbuf = NULL;
 635              		.loc 1 350 0
 636 0066 7B6A     		ldr	r3, [r7, #36]
 637 0068 0022     		movs	r2, #0
 638 006a 1A70     		strb	r2, [r3]
 639 006c 0022     		movs	r2, #0
 640 006e 5A70     		strb	r2, [r3, #1]
 641 0070 0022     		movs	r2, #0
 642 0072 9A70     		strb	r2, [r3, #2]
 643 0074 0022     		movs	r2, #0
 644 0076 DA70     		strb	r2, [r3, #3]
 351:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   iprh->start = offset;
 645              		.loc 1 351 0
 646 0078 7B6A     		ldr	r3, [r7, #36]
 647 007a 3A8A     		ldrh	r2, [r7, #16]	@ movhi
 648 007c 9A80     		strh	r2, [r3, #4]	@ unaligned
 352:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   iprh->end = offset + len;
 649              		.loc 1 352 0
 650 007e 3A8A     		ldrh	r2, [r7, #16]	@ movhi
 651 0080 7B8A     		ldrh	r3, [r7, #18]	@ movhi
 652 0082 1344     		add	r3, r3, r2
 653 0084 9AB2     		uxth	r2, r3
 654 0086 7B6A     		ldr	r3, [r7, #36]
 655 0088 DA80     		strh	r2, [r3, #6]	@ unaligned
 353:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 354:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   /* Iterate through until we either get to the end of the list (append),
 355:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****    * or we find on with a larger offset (insert). */
 356:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   for (q = ipr->p; q != NULL;) {
 656              		.loc 1 356 0
 657 008a 7B68     		ldr	r3, [r7, #4]
 658 008c 5B68     		ldr	r3, [r3, #4]
 659 008e FB61     		str	r3, [r7, #28]
 660 0090 4CE0     		b	.L40
 661              	.L49:
 357:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     iprh_tmp = (struct ip_reass_helper*)q->payload;
 662              		.loc 1 357 0
 663 0092 FB69     		ldr	r3, [r7, #28]
 664 0094 5B68     		ldr	r3, [r3, #4]
 665 0096 FB60     		str	r3, [r7, #12]
 358:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     if (iprh->start < iprh_tmp->start) {
 666              		.loc 1 358 0
 667 0098 7B6A     		ldr	r3, [r7, #36]
 668 009a 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 669 009c 9AB2     		uxth	r2, r3
 670 009e FB68     		ldr	r3, [r7, #12]
 671 00a0 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 672 00a2 9BB2     		uxth	r3, r3
 673 00a4 9A42     		cmp	r2, r3
 674 00a6 1FD2     		bcs	.L41
 359:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       /* the new pbuf should be inserted before this */
 360:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       iprh->next_pbuf = q;
 675              		.loc 1 360 0
 676 00a8 7B6A     		ldr	r3, [r7, #36]
 677 00aa FA69     		ldr	r2, [r7, #28]
 678 00ac 1A60     		str	r2, [r3]	@ unaligned
 361:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       if (iprh_prev != NULL) {
 679              		.loc 1 361 0
 680 00ae 3B6A     		ldr	r3, [r7, #32]
 681 00b0 002B     		cmp	r3, #0
 682 00b2 15D0     		beq	.L42
 362:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****         /* not the fragment with the lowest offset */
 363:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #if IP_REASS_CHECK_OVERLAP
 364:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****         if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 683              		.loc 1 364 0
 684 00b4 7B6A     		ldr	r3, [r7, #36]
 685 00b6 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 686 00b8 9AB2     		uxth	r2, r3
 687 00ba 3B6A     		ldr	r3, [r7, #32]
 688 00bc DB88     		ldrh	r3, [r3, #6]	@ unaligned
 689 00be 9BB2     		uxth	r3, r3
 690 00c0 9A42     		cmp	r2, r3
 691 00c2 C0F08C80 		bcc	.L43
 692              		.loc 1 364 0 is_stmt 0 discriminator 1
 693 00c6 7B6A     		ldr	r3, [r7, #36]
 694 00c8 DB88     		ldrh	r3, [r3, #6]	@ unaligned
 695 00ca 9AB2     		uxth	r2, r3
 696 00cc FB68     		ldr	r3, [r7, #12]
 697 00ce 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 698 00d0 9BB2     		uxth	r3, r3
 699 00d2 9A42     		cmp	r2, r3
 700 00d4 00F28380 		bhi	.L43
 365:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****           /* fragment overlaps with previous or following, throw away */
 366:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****           goto freepbuf;
 367:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****         }
 368:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #endif /* IP_REASS_CHECK_OVERLAP */
 369:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****         iprh_prev->next_pbuf = new_p;
 701              		.loc 1 369 0 is_stmt 1
 702 00d8 3B6A     		ldr	r3, [r7, #32]
 703 00da 3A68     		ldr	r2, [r7]
 704 00dc 1A60     		str	r2, [r3]	@ unaligned
 370:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       } else {
 371:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****         /* fragment with the lowest offset */
 372:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****         ipr->p = new_p;
 373:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       }
 374:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       break;
 705              		.loc 1 374 0
 706 00de 28E0     		b	.L45
 707              	.L42:
 372:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       }
 708              		.loc 1 372 0
 709 00e0 7B68     		ldr	r3, [r7, #4]
 710 00e2 3A68     		ldr	r2, [r7]
 711 00e4 5A60     		str	r2, [r3, #4]
 712              		.loc 1 374 0
 713 00e6 24E0     		b	.L45
 714              	.L41:
 375:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     } else if(iprh->start == iprh_tmp->start) {
 715              		.loc 1 375 0
 716 00e8 7B6A     		ldr	r3, [r7, #36]
 717 00ea 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 718 00ec 9AB2     		uxth	r2, r3
 719 00ee FB68     		ldr	r3, [r7, #12]
 720 00f0 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 721 00f2 9BB2     		uxth	r3, r3
 722 00f4 9A42     		cmp	r2, r3
 723 00f6 6FD0     		beq	.L61
 376:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       /* received the same datagram twice: no need to keep the datagram */
 377:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       goto freepbuf;
 378:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #if IP_REASS_CHECK_OVERLAP
 379:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     } else if(iprh->start < iprh_tmp->end) {
 724              		.loc 1 379 0
 725 00f8 7B6A     		ldr	r3, [r7, #36]
 726 00fa 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 727 00fc 9AB2     		uxth	r2, r3
 728 00fe FB68     		ldr	r3, [r7, #12]
 729 0100 DB88     		ldrh	r3, [r3, #6]	@ unaligned
 730 0102 9BB2     		uxth	r3, r3
 731 0104 9A42     		cmp	r2, r3
 732 0106 69D3     		bcc	.L62
 380:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       /* overlap: no need to keep the new datagram */
 381:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       goto freepbuf;
 382:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #endif /* IP_REASS_CHECK_OVERLAP */
 383:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     } else {
 384:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       /* Check if the fragments received so far have no wholes. */
 385:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       if (iprh_prev != NULL) {
 733              		.loc 1 385 0
 734 0108 3B6A     		ldr	r3, [r7, #32]
 735 010a 002B     		cmp	r3, #0
 736 010c 09D0     		beq	.L48
 386:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****         if (iprh_prev->end != iprh_tmp->start) {
 737              		.loc 1 386 0
 738 010e 3B6A     		ldr	r3, [r7, #32]
 739 0110 DB88     		ldrh	r3, [r3, #6]	@ unaligned
 740 0112 9AB2     		uxth	r2, r3
 741 0114 FB68     		ldr	r3, [r7, #12]
 742 0116 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 743 0118 9BB2     		uxth	r3, r3
 744 011a 9A42     		cmp	r2, r3
 745 011c 01D0     		beq	.L48
 387:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****           /* There is a fragment missing between the current
 388:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****            * and the previous fragment */
 389:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****           valid = 0;
 746              		.loc 1 389 0
 747 011e 0023     		movs	r3, #0
 748 0120 BB61     		str	r3, [r7, #24]
 749              	.L48:
 390:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****         }
 391:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       }
 392:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     }
 393:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     q = iprh_tmp->next_pbuf;
 750              		.loc 1 393 0
 751 0122 FB68     		ldr	r3, [r7, #12]
 752 0124 1B68     		ldr	r3, [r3]	@ unaligned
 753 0126 FB61     		str	r3, [r7, #28]
 394:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     iprh_prev = iprh_tmp;
 754              		.loc 1 394 0
 755 0128 FB68     		ldr	r3, [r7, #12]
 756 012a 3B62     		str	r3, [r7, #32]
 757              	.L40:
 356:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     iprh_tmp = (struct ip_reass_helper*)q->payload;
 758              		.loc 1 356 0 discriminator 1
 759 012c FB69     		ldr	r3, [r7, #28]
 760 012e 002B     		cmp	r3, #0
 761 0130 AFD1     		bne	.L49
 762              	.L45:
 395:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   }
 396:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 397:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   /* If q is NULL, then we made it to the end of the list. Determine what to do now */
 398:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   if (q == NULL) {
 763              		.loc 1 398 0
 764 0132 FB69     		ldr	r3, [r7, #28]
 765 0134 002B     		cmp	r3, #0
 766 0136 17D1     		bne	.L50
 399:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     if (iprh_prev != NULL) {
 767              		.loc 1 399 0
 768 0138 3B6A     		ldr	r3, [r7, #32]
 769 013a 002B     		cmp	r3, #0
 770 013c 11D0     		beq	.L51
 400:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       /* this is (for now), the fragment with the highest offset:
 401:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****        * chain it to the last fragment */
 402:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #if IP_REASS_CHECK_OVERLAP
 403:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 771              		.loc 1 403 0
 772 013e 3B6A     		ldr	r3, [r7, #32]
 773 0140 DB88     		ldrh	r3, [r3, #6]	@ unaligned
 774 0142 7B6A     		ldr	r3, [r7, #36]
 775 0144 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 404:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #endif /* IP_REASS_CHECK_OVERLAP */
 405:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       iprh_prev->next_pbuf = new_p;
 776              		.loc 1 405 0
 777 0146 3B6A     		ldr	r3, [r7, #32]
 778 0148 3A68     		ldr	r2, [r7]
 779 014a 1A60     		str	r2, [r3]	@ unaligned
 406:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       if (iprh_prev->end != iprh->start) {
 780              		.loc 1 406 0
 781 014c 3B6A     		ldr	r3, [r7, #32]
 782 014e DB88     		ldrh	r3, [r3, #6]	@ unaligned
 783 0150 9AB2     		uxth	r2, r3
 784 0152 7B6A     		ldr	r3, [r7, #36]
 785 0154 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 786 0156 9BB2     		uxth	r3, r3
 787 0158 9A42     		cmp	r2, r3
 788 015a 05D0     		beq	.L50
 407:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****         valid = 0;
 789              		.loc 1 407 0
 790 015c 0023     		movs	r3, #0
 791 015e BB61     		str	r3, [r7, #24]
 792 0160 02E0     		b	.L50
 793              	.L51:
 408:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       }
 409:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     } else {
 410:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #if IP_REASS_CHECK_OVERLAP
 411:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 412:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****         ipr->p == NULL);
 413:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #endif /* IP_REASS_CHECK_OVERLAP */
 414:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       /* this is the first fragment we ever received for this ip datagram */
 415:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       ipr->p = new_p;
 794              		.loc 1 415 0
 795 0162 7B68     		ldr	r3, [r7, #4]
 796 0164 3A68     		ldr	r2, [r7]
 797 0166 5A60     		str	r2, [r3, #4]
 798              	.L50:
 416:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     }
 417:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   }
 418:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 419:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   /* At this point, the validation part begins: */
 420:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   /* If we already received the last fragment */
 421:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   if ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0) {
 799              		.loc 1 421 0
 800 0168 7B68     		ldr	r3, [r7, #4]
 801 016a 9B7F     		ldrb	r3, [r3, #30]	@ zero_extendqisi2
 802 016c 03F00103 		and	r3, r3, #1
 803 0170 002B     		cmp	r3, #0
 804 0172 2FD0     		beq	.L53
 422:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     /* and had no wholes so far */
 423:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     if (valid) {
 805              		.loc 1 423 0
 806 0174 BB69     		ldr	r3, [r7, #24]
 807 0176 002B     		cmp	r3, #0
 808 0178 2AD0     		beq	.L54
 424:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       /* then check if the rest of the fragments is here */
 425:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       /* Check if the queue starts with the first datagram */
 426:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       if (((struct ip_reass_helper*)ipr->p->payload)->start != 0) {
 809              		.loc 1 426 0
 810 017a 7B68     		ldr	r3, [r7, #4]
 811 017c 5B68     		ldr	r3, [r3, #4]
 812 017e 5B68     		ldr	r3, [r3, #4]
 813 0180 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 814 0182 9BB2     		uxth	r3, r3
 815 0184 002B     		cmp	r3, #0
 816 0186 02D0     		beq	.L55
 427:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****         valid = 0;
 817              		.loc 1 427 0
 818 0188 0023     		movs	r3, #0
 819 018a BB61     		str	r3, [r7, #24]
 820 018c 20E0     		b	.L54
 821              	.L55:
 428:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       } else {
 429:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****         /* and check that there are no wholes after this datagram */
 430:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****         iprh_prev = iprh;
 822              		.loc 1 430 0
 823 018e 7B6A     		ldr	r3, [r7, #36]
 824 0190 3B62     		str	r3, [r7, #32]
 431:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****         q = iprh->next_pbuf;
 825              		.loc 1 431 0
 826 0192 7B6A     		ldr	r3, [r7, #36]
 827 0194 1B68     		ldr	r3, [r3]	@ unaligned
 828 0196 FB61     		str	r3, [r7, #28]
 432:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****         while (q != NULL) {
 829              		.loc 1 432 0
 830 0198 12E0     		b	.L56
 831              	.L59:
 433:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****           iprh = (struct ip_reass_helper*)q->payload;
 832              		.loc 1 433 0
 833 019a FB69     		ldr	r3, [r7, #28]
 834 019c 5B68     		ldr	r3, [r3, #4]
 835 019e 7B62     		str	r3, [r7, #36]
 434:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****           if (iprh_prev->end != iprh->start) {
 836              		.loc 1 434 0
 837 01a0 3B6A     		ldr	r3, [r7, #32]
 838 01a2 DB88     		ldrh	r3, [r3, #6]	@ unaligned
 839 01a4 9AB2     		uxth	r2, r3
 840 01a6 7B6A     		ldr	r3, [r7, #36]
 841 01a8 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 842 01aa 9BB2     		uxth	r3, r3
 843 01ac 9A42     		cmp	r2, r3
 844 01ae 02D0     		beq	.L57
 435:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****             valid = 0;
 845              		.loc 1 435 0
 846 01b0 0023     		movs	r3, #0
 847 01b2 BB61     		str	r3, [r7, #24]
 436:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****             break;
 848              		.loc 1 436 0
 849 01b4 07E0     		b	.L58
 850              	.L57:
 437:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****           }
 438:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****           iprh_prev = iprh;
 851              		.loc 1 438 0
 852 01b6 7B6A     		ldr	r3, [r7, #36]
 853 01b8 3B62     		str	r3, [r7, #32]
 439:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****           q = iprh->next_pbuf;
 854              		.loc 1 439 0
 855 01ba 7B6A     		ldr	r3, [r7, #36]
 856 01bc 1B68     		ldr	r3, [r3]	@ unaligned
 857 01be FB61     		str	r3, [r7, #28]
 858              	.L56:
 432:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****           iprh = (struct ip_reass_helper*)q->payload;
 859              		.loc 1 432 0
 860 01c0 FB69     		ldr	r3, [r7, #28]
 861 01c2 002B     		cmp	r3, #0
 862 01c4 E9D1     		bne	.L59
 863              	.L58:
 440:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****         }
 441:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****         /* if still valid, all fragments are received
 442:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****          * (because to the MF==0 already arrived */
 443:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****         if (valid) {
 864              		.loc 1 443 0
 865 01c6 BB69     		ldr	r3, [r7, #24]
 866 01c8 002B     		cmp	r3, #0
 867 01ca 01D0     		beq	.L54
 444:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****           LWIP_ASSERT("sanity check", ipr->p != NULL);
 445:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****           LWIP_ASSERT("sanity check",
 446:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****             ((struct ip_reass_helper*)ipr->p->payload) != iprh);
 447:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****           LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 448:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****             iprh->next_pbuf == NULL);
 449:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****           LWIP_ASSERT("validate_datagram:datagram end!=datagram len",
 868              		.loc 1 449 0
 869 01cc 7B6A     		ldr	r3, [r7, #36]
 870 01ce DB88     		ldrh	r3, [r3, #6]	@ unaligned
 871              	.L54:
 450:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****             iprh->end == ipr->datagram_len);
 451:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****         }
 452:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       }
 453:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     }
 454:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     /* If valid is 0 here, there are some fragments missing in the middle
 455:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****      * (since MF == 0 has already arrived). Such datagrams simply time out if
 456:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****      * no more fragments are received... */
 457:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     return valid;
 872              		.loc 1 457 0
 873 01d0 BB69     		ldr	r3, [r7, #24]
 874 01d2 14E0     		b	.L60
 875              	.L53:
 458:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   }
 459:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   /* If we come here, not all fragments were received, yet! */
 460:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   return 0; /* not yet valid! */
 876              		.loc 1 460 0
 877 01d4 0023     		movs	r3, #0
 878 01d6 12E0     		b	.L60
 879              	.L61:
 377:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #if IP_REASS_CHECK_OVERLAP
 880              		.loc 1 377 0
 881 01d8 00BF     		nop
 882 01da 00E0     		b	.L43
 883              	.L62:
 381:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #endif /* IP_REASS_CHECK_OVERLAP */
 884              		.loc 1 381 0
 885 01dc 00BF     		nop
 886              	.L43:
 461:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #if IP_REASS_CHECK_OVERLAP
 462:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** freepbuf:
 463:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   ip_reass_pbufcount -= pbuf_clen(new_p);
 887              		.loc 1 463 0
 888 01de 3868     		ldr	r0, [r7]
 889 01e0 FFF7FEFF 		bl	pbuf_clen
 890 01e4 0346     		mov	r3, r0
 891 01e6 1946     		mov	r1, r3
 892 01e8 074B     		ldr	r3, .L63
 893 01ea 1A88     		ldrh	r2, [r3]
 894 01ec 8BB2     		uxth	r3, r1
 895 01ee D31A     		subs	r3, r2, r3
 896 01f0 9AB2     		uxth	r2, r3
 897 01f2 054B     		ldr	r3, .L63
 898 01f4 1A80     		strh	r2, [r3]	@ movhi
 464:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   pbuf_free(new_p);
 899              		.loc 1 464 0
 900 01f6 3868     		ldr	r0, [r7]
 901 01f8 FFF7FEFF 		bl	pbuf_free
 465:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   return 0;
 902              		.loc 1 465 0
 903 01fc 0023     		movs	r3, #0
 904              	.L60:
 466:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #endif /* IP_REASS_CHECK_OVERLAP */
 467:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** }
 905              		.loc 1 467 0
 906 01fe 1846     		mov	r0, r3
 907 0200 2C37     		adds	r7, r7, #44
 908              		.cfi_def_cfa_offset 12
 909 0202 BD46     		mov	sp, r7
 910              		.cfi_def_cfa_register 13
 911              		@ sp needed
 912 0204 90BD     		pop	{r4, r7, pc}
 913              	.L64:
 914 0206 00BF     		.align	2
 915              	.L63:
 916 0208 00000000 		.word	ip_reass_pbufcount
 917              		.cfi_endproc
 918              	.LFE22:
 920              		.section	.text.ip_reass,"ax",%progbits
 921              		.align	2
 922              		.global	ip_reass
 923              		.thumb
 924              		.thumb_func
 926              	ip_reass:
 927              	.LFB23:
 468:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 469:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** /**
 470:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * Reassembles incoming IP fragments into an IP datagram.
 471:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  *
 472:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * @param p points to a pbuf chain of the fragment
 473:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * @return NULL if reassembly is incomplete, ? otherwise
 474:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  */
 475:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** struct pbuf *
 476:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** ip_reass(struct pbuf *p)
 477:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** {
 928              		.loc 1 477 0
 929              		.cfi_startproc
 930              		@ args = 0, pretend = 0, frame = 40
 931              		@ frame_needed = 1, uses_anonymous_args = 0
 932 0000 90B5     		push	{r4, r7, lr}
 933              		.cfi_def_cfa_offset 12
 934              		.cfi_offset 4, -12
 935              		.cfi_offset 7, -8
 936              		.cfi_offset 14, -4
 937 0002 8BB0     		sub	sp, sp, #44
 938              		.cfi_def_cfa_offset 56
 939 0004 00AF     		add	r7, sp, #0
 940              		.cfi_def_cfa_register 7
 941 0006 7860     		str	r0, [r7, #4]
 478:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   struct pbuf *r;
 479:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   struct ip_hdr *fraghdr;
 480:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   struct ip_reassdata *ipr;
 481:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   struct ip_reass_helper *iprh;
 482:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   u16_t offset, len;
 483:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   u8_t clen;
 484:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   struct ip_reassdata *ipr_prev = NULL;
 942              		.loc 1 484 0
 943 0008 0023     		movs	r3, #0
 944 000a FB61     		str	r3, [r7, #28]
 485:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 486:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   IPFRAG_STATS_INC(ip_frag.recv);
 945              		.loc 1 486 0
 946 000c A14B     		ldr	r3, .L81
 947 000e 5B8E     		ldrh	r3, [r3, #50]
 948 0010 0133     		adds	r3, r3, #1
 949 0012 9AB2     		uxth	r2, r3
 950 0014 9F4B     		ldr	r3, .L81
 951 0016 5A86     		strh	r2, [r3, #50]	@ movhi
 487:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   snmp_inc_ipreasmreqds();
 488:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 489:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   fraghdr = (struct ip_hdr*)p->payload;
 952              		.loc 1 489 0
 953 0018 7B68     		ldr	r3, [r7, #4]
 954 001a 5B68     		ldr	r3, [r3, #4]
 955 001c BB61     		str	r3, [r7, #24]
 490:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 491:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 956              		.loc 1 491 0
 957 001e BB69     		ldr	r3, [r7, #24]
 958 0020 1B88     		ldrh	r3, [r3]	@ unaligned
 959 0022 9BB2     		uxth	r3, r3
 960 0024 1846     		mov	r0, r3
 961 0026 FFF7FEFF 		bl	lwip_ntohs
 962 002a 0346     		mov	r3, r0
 963 002c 1B0A     		lsrs	r3, r3, #8
 964 002e 9BB2     		uxth	r3, r3
 965 0030 03F00F03 		and	r3, r3, #15
 966 0034 9B00     		lsls	r3, r3, #2
 967 0036 142B     		cmp	r3, #20
 968 0038 08D0     		beq	.L66
 492:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: IP options currently not supported!\n"));
 493:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     IPFRAG_STATS_INC(ip_frag.err);
 969              		.loc 1 493 0
 970 003a 964B     		ldr	r3, .L81
 971 003c B3F84430 		ldrh	r3, [r3, #68]
 972 0040 0133     		adds	r3, r3, #1
 973 0042 9AB2     		uxth	r2, r3
 974 0044 934B     		ldr	r3, .L81
 975 0046 A3F84420 		strh	r2, [r3, #68]	@ movhi
 494:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     goto nullreturn;
 976              		.loc 1 494 0
 977 004a 14E1     		b	.L67
 978              	.L66:
 495:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   }
 496:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 497:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 979              		.loc 1 497 0
 980 004c BB69     		ldr	r3, [r7, #24]
 981 004e DB88     		ldrh	r3, [r3, #6]	@ unaligned
 982 0050 9BB2     		uxth	r3, r3
 983 0052 1846     		mov	r0, r3
 984 0054 FFF7FEFF 		bl	lwip_ntohs
 985 0058 0346     		mov	r3, r0
 986 005a C3F30C03 		ubfx	r3, r3, #0, #13
 987 005e 9BB2     		uxth	r3, r3
 988 0060 DB00     		lsls	r3, r3, #3
 989 0062 FB82     		strh	r3, [r7, #22]	@ movhi
 498:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 990              		.loc 1 498 0
 991 0064 BB69     		ldr	r3, [r7, #24]
 992 0066 5B88     		ldrh	r3, [r3, #2]	@ unaligned
 993 0068 9BB2     		uxth	r3, r3
 994 006a 1846     		mov	r0, r3
 995 006c FFF7FEFF 		bl	lwip_ntohs
 996 0070 0346     		mov	r3, r0
 997 0072 1C46     		mov	r4, r3
 998 0074 BB69     		ldr	r3, [r7, #24]
 999 0076 1B88     		ldrh	r3, [r3]	@ unaligned
 1000 0078 9BB2     		uxth	r3, r3
 1001 007a 1846     		mov	r0, r3
 1002 007c FFF7FEFF 		bl	lwip_ntohs
 1003 0080 0346     		mov	r3, r0
 1004 0082 1B0A     		lsrs	r3, r3, #8
 1005 0084 9BB2     		uxth	r3, r3
 1006 0086 03F00F03 		and	r3, r3, #15
 1007 008a 9BB2     		uxth	r3, r3
 1008 008c 9B00     		lsls	r3, r3, #2
 1009 008e 9BB2     		uxth	r3, r3
 1010 0090 E31A     		subs	r3, r4, r3
 1011 0092 BB82     		strh	r3, [r7, #20]	@ movhi
 499:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 500:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   /* Check if we are allowed to enqueue more datagrams. */
 501:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   clen = pbuf_clen(p);
 1012              		.loc 1 501 0
 1013 0094 7868     		ldr	r0, [r7, #4]
 1014 0096 FFF7FEFF 		bl	pbuf_clen
 1015 009a 0346     		mov	r3, r0
 1016 009c FB74     		strb	r3, [r7, #19]
 502:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 1017              		.loc 1 502 0
 1018 009e 7E4B     		ldr	r3, .L81+4
 1019 00a0 1B88     		ldrh	r3, [r3]
 1020 00a2 1A46     		mov	r2, r3
 1021 00a4 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1022 00a6 1344     		add	r3, r3, r2
 1023 00a8 0A2B     		cmp	r3, #10
 1024 00aa 15DD     		ble	.L68
 503:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #if IP_REASS_FREE_OLDEST
 504:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 1025              		.loc 1 504 0
 1026 00ac FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1027 00ae 1946     		mov	r1, r3
 1028 00b0 B869     		ldr	r0, [r7, #24]
 1029 00b2 FFF7FEFF 		bl	ip_reass_remove_oldest_datagram
 1030 00b6 0346     		mov	r3, r0
 1031 00b8 002B     		cmp	r3, #0
 1032 00ba 06D0     		beq	.L69
 505:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****         ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 1033              		.loc 1 505 0 discriminator 1
 1034 00bc 764B     		ldr	r3, .L81+4
 1035 00be 1B88     		ldrh	r3, [r3]
 1036 00c0 1A46     		mov	r2, r3
 1037 00c2 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1038 00c4 1344     		add	r3, r3, r2
 504:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****         ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 1039              		.loc 1 504 0 discriminator 1
 1040 00c6 0A2B     		cmp	r3, #10
 1041 00c8 06DD     		ble	.L68
 1042              	.L69:
 506:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #endif /* IP_REASS_FREE_OLDEST */
 507:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     {
 508:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       /* No datagram could be freed and still too many pbufs enqueued */
 509:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
 510:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****         ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
 511:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       IPFRAG_STATS_INC(ip_frag.memerr);
 1043              		.loc 1 511 0
 1044 00ca 724B     		ldr	r3, .L81
 1045 00cc 9B8F     		ldrh	r3, [r3, #60]
 1046 00ce 0133     		adds	r3, r3, #1
 1047 00d0 9AB2     		uxth	r2, r3
 1048 00d2 704B     		ldr	r3, .L81
 1049 00d4 9A87     		strh	r2, [r3, #60]	@ movhi
 512:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       /* @todo: send ICMP time exceeded here? */
 513:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       /* drop this pbuf */
 514:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       goto nullreturn;
 1050              		.loc 1 514 0
 1051 00d6 CEE0     		b	.L67
 1052              	.L68:
 515:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     }
 516:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   }
 517:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 518:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   /* Look for the datagram the fragment belongs to in the current datagram queue,
 519:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****    * remembering the previous in the queue for later dequeueing. */
 520:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 1053              		.loc 1 520 0
 1054 00d8 704B     		ldr	r3, .L81+8
 1055 00da 1B68     		ldr	r3, [r3]
 1056 00dc 3B62     		str	r3, [r7, #32]
 1057 00de 20E0     		b	.L70
 1058              	.L73:
 521:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     /* Check if the incoming fragment matches the one currently present
 522:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****        in the reassembly buffer. If so, we proceed with copying the
 523:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****        fragment into the buffer. */
 524:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 1059              		.loc 1 524 0
 1060 00e0 3B6A     		ldr	r3, [r7, #32]
 1061 00e2 5A69     		ldr	r2, [r3, #20]
 1062 00e4 BB69     		ldr	r3, [r7, #24]
 1063 00e6 DB68     		ldr	r3, [r3, #12]	@ unaligned
 1064 00e8 9A42     		cmp	r2, r3
 1065 00ea 15D1     		bne	.L71
 1066              		.loc 1 524 0 is_stmt 0 discriminator 1
 1067 00ec 3B6A     		ldr	r3, [r7, #32]
 1068 00ee 9A69     		ldr	r2, [r3, #24]
 1069 00f0 BB69     		ldr	r3, [r7, #24]
 1070 00f2 1B69     		ldr	r3, [r3, #16]	@ unaligned
 1071 00f4 9A42     		cmp	r2, r3
 1072 00f6 0FD1     		bne	.L71
 1073              		.loc 1 524 0 discriminator 2
 1074 00f8 3B6A     		ldr	r3, [r7, #32]
 1075 00fa 9A89     		ldrh	r2, [r3, #12]
 1076 00fc BB69     		ldr	r3, [r7, #24]
 1077 00fe 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 1078 0100 9BB2     		uxth	r3, r3
 1079 0102 9A42     		cmp	r2, r3
 1080 0104 08D1     		bne	.L71
 525:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass: matching previous fragment ID=%"X16_F"\n",
 526:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****         ntohs(IPH_ID(fraghdr))));
 527:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       IPFRAG_STATS_INC(ip_frag.cachehit);
 1081              		.loc 1 527 0 is_stmt 1
 1082 0106 634B     		ldr	r3, .L81
 1083 0108 B3F84630 		ldrh	r3, [r3, #70]
 1084 010c 0133     		adds	r3, r3, #1
 1085 010e 9AB2     		uxth	r2, r3
 1086 0110 604B     		ldr	r3, .L81
 1087 0112 A3F84620 		strh	r2, [r3, #70]	@ movhi
 528:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       break;
 1088              		.loc 1 528 0
 1089 0116 07E0     		b	.L72
 1090              	.L71:
 529:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     }
 530:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     ipr_prev = ipr;
 1091              		.loc 1 530 0 discriminator 2
 1092 0118 3B6A     		ldr	r3, [r7, #32]
 1093 011a FB61     		str	r3, [r7, #28]
 520:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     /* Check if the incoming fragment matches the one currently present
 1094              		.loc 1 520 0 discriminator 2
 1095 011c 3B6A     		ldr	r3, [r7, #32]
 1096 011e 1B68     		ldr	r3, [r3]
 1097 0120 3B62     		str	r3, [r7, #32]
 1098              	.L70:
 520:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     /* Check if the incoming fragment matches the one currently present
 1099              		.loc 1 520 0 is_stmt 0 discriminator 1
 1100 0122 3B6A     		ldr	r3, [r7, #32]
 1101 0124 002B     		cmp	r3, #0
 1102 0126 DBD1     		bne	.L73
 1103              	.L72:
 531:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   }
 532:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 533:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   if (ipr == NULL) {
 1104              		.loc 1 533 0 is_stmt 1
 1105 0128 3B6A     		ldr	r3, [r7, #32]
 1106 012a 002B     		cmp	r3, #0
 1107 012c 09D1     		bne	.L74
 534:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   /* Enqueue a new datagram into the datagram queue */
 535:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 1108              		.loc 1 535 0
 1109 012e FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1110 0130 1946     		mov	r1, r3
 1111 0132 B869     		ldr	r0, [r7, #24]
 1112 0134 FFF7FEFF 		bl	ip_reass_enqueue_new_datagram
 1113 0138 3862     		str	r0, [r7, #32]
 536:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     /* Bail if unable to enqueue */
 537:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     if(ipr == NULL) {
 1114              		.loc 1 537 0
 1115 013a 3B6A     		ldr	r3, [r7, #32]
 1116 013c 002B     		cmp	r3, #0
 1117 013e 1CD1     		bne	.L75
 538:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       goto nullreturn;
 1118              		.loc 1 538 0
 1119 0140 99E0     		b	.L67
 1120              	.L74:
 539:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     }
 540:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   } else {
 541:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
 1121              		.loc 1 541 0
 1122 0142 BB69     		ldr	r3, [r7, #24]
 1123 0144 DB88     		ldrh	r3, [r3, #6]	@ unaligned
 1124 0146 9BB2     		uxth	r3, r3
 1125 0148 1846     		mov	r0, r3
 1126 014a FFF7FEFF 		bl	lwip_ntohs
 1127 014e 0346     		mov	r3, r0
 1128 0150 C3F30C03 		ubfx	r3, r3, #0, #13
 1129 0154 002B     		cmp	r3, #0
 1130 0156 10D1     		bne	.L75
 542:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       ((ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 1131              		.loc 1 542 0 discriminator 1
 1132 0158 3B6A     		ldr	r3, [r7, #32]
 1133 015a DB89     		ldrh	r3, [r3, #14]
 1134 015c 1846     		mov	r0, r3
 1135 015e FFF7FEFF 		bl	lwip_ntohs
 1136 0162 0346     		mov	r3, r0
 1137 0164 C3F30C03 		ubfx	r3, r3, #0, #13
 541:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       ((ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 1138              		.loc 1 541 0 discriminator 1
 1139 0168 002B     		cmp	r3, #0
 1140 016a 06D0     		beq	.L75
 543:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       /* ipr->iphdr is not the header from the first fragment, but fraghdr is
 544:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****        * -> copy fraghdr into ipr->iphdr since we want to have the header
 545:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****        * of the first fragment (for ICMP time exceeded and later, for copying
 546:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****        * all options, if supported)*/
 547:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 1141              		.loc 1 547 0
 1142 016c 3B6A     		ldr	r3, [r7, #32]
 1143 016e 0833     		adds	r3, r3, #8
 1144 0170 1422     		movs	r2, #20
 1145 0172 B969     		ldr	r1, [r7, #24]
 1146 0174 1846     		mov	r0, r3
 1147 0176 FFF7FEFF 		bl	memcpy
 1148              	.L75:
 548:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     }
 549:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   }
 550:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   /* Track the current number of pbufs current 'in-flight', in order to limit 
 551:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   the number of fragments that may be enqueued at any one time */
 552:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   ip_reass_pbufcount += clen;
 1149              		.loc 1 552 0
 1150 017a FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1151 017c 9AB2     		uxth	r2, r3
 1152 017e 464B     		ldr	r3, .L81+4
 1153 0180 1B88     		ldrh	r3, [r3]
 1154 0182 1344     		add	r3, r3, r2
 1155 0184 9AB2     		uxth	r2, r3
 1156 0186 444B     		ldr	r3, .L81+4
 1157 0188 1A80     		strh	r2, [r3]	@ movhi
 553:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 554:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   /* At this point, we have either created a new entry or pointing 
 555:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****    * to an existing one */
 556:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 557:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   /* check for 'no more fragments', and update queue entry*/
 558:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   if ((IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0) {
 1158              		.loc 1 558 0
 1159 018a BB69     		ldr	r3, [r7, #24]
 1160 018c DB88     		ldrh	r3, [r3, #6]	@ unaligned
 1161 018e 9BB2     		uxth	r3, r3
 1162 0190 03F02003 		and	r3, r3, #32
 1163 0194 002B     		cmp	r3, #0
 1164 0196 0CD1     		bne	.L76
 559:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 1165              		.loc 1 559 0
 1166 0198 3B6A     		ldr	r3, [r7, #32]
 1167 019a 9B7F     		ldrb	r3, [r3, #30]	@ zero_extendqisi2
 1168 019c 43F00103 		orr	r3, r3, #1
 1169 01a0 DAB2     		uxtb	r2, r3
 1170 01a2 3B6A     		ldr	r3, [r7, #32]
 1171 01a4 9A77     		strb	r2, [r3, #30]
 560:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     ipr->datagram_len = offset + len;
 1172              		.loc 1 560 0
 1173 01a6 FA8A     		ldrh	r2, [r7, #22]	@ movhi
 1174 01a8 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 1175 01aa 1344     		add	r3, r3, r2
 1176 01ac 9AB2     		uxth	r2, r3
 1177 01ae 3B6A     		ldr	r3, [r7, #32]
 1178 01b0 9A83     		strh	r2, [r3, #28]	@ movhi
 1179              	.L76:
 561:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     LWIP_DEBUGF(IP_REASS_DEBUG,
 562:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****      ("ip_reass: last fragment seen, total len %"S16_F"\n",
 563:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       ipr->datagram_len));
 564:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   }
 565:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   /* find the right place to insert this pbuf */
 566:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   /* @todo: trim pbufs if fragments are overlapping */
 567:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   if (ip_reass_chain_frag_into_datagram_and_validate(ipr, p)) {
 1180              		.loc 1 567 0
 1181 01b2 7968     		ldr	r1, [r7, #4]
 1182 01b4 386A     		ldr	r0, [r7, #32]
 1183 01b6 FFF7FEFF 		bl	ip_reass_chain_frag_into_datagram_and_validate
 1184 01ba 0346     		mov	r3, r0
 1185 01bc 002B     		cmp	r3, #0
 1186 01be 58D0     		beq	.L77
 568:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     /* the totally last fragment (flag more fragments = 0) was received at least
 569:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****      * once AND all fragments are received */
 570:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     ipr->datagram_len += IP_HLEN;
 1187              		.loc 1 570 0
 1188 01c0 3B6A     		ldr	r3, [r7, #32]
 1189 01c2 9B8B     		ldrh	r3, [r3, #28]
 1190 01c4 1433     		adds	r3, r3, #20
 1191 01c6 9AB2     		uxth	r2, r3
 1192 01c8 3B6A     		ldr	r3, [r7, #32]
 1193 01ca 9A83     		strh	r2, [r3, #28]	@ movhi
 571:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 572:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     /* save the second pbuf before copying the header over the pointer */
 573:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 1194              		.loc 1 573 0
 1195 01cc 3B6A     		ldr	r3, [r7, #32]
 1196 01ce 5B68     		ldr	r3, [r3, #4]
 1197 01d0 5B68     		ldr	r3, [r3, #4]
 1198 01d2 1B68     		ldr	r3, [r3]	@ unaligned
 1199 01d4 7B62     		str	r3, [r7, #36]
 574:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 575:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     /* copy the original ip header back to the first pbuf */
 576:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     fraghdr = (struct ip_hdr*)(ipr->p->payload);
 1200              		.loc 1 576 0
 1201 01d6 3B6A     		ldr	r3, [r7, #32]
 1202 01d8 5B68     		ldr	r3, [r3, #4]
 1203 01da 5B68     		ldr	r3, [r3, #4]
 1204 01dc BB61     		str	r3, [r7, #24]
 577:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 1205              		.loc 1 577 0
 1206 01de 3B6A     		ldr	r3, [r7, #32]
 1207 01e0 0833     		adds	r3, r3, #8
 1208 01e2 1422     		movs	r2, #20
 1209 01e4 1946     		mov	r1, r3
 1210 01e6 B869     		ldr	r0, [r7, #24]
 1211 01e8 FFF7FEFF 		bl	memcpy
 578:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     IPH_LEN_SET(fraghdr, htons(ipr->datagram_len));
 1212              		.loc 1 578 0
 1213 01ec 3B6A     		ldr	r3, [r7, #32]
 1214 01ee 9B8B     		ldrh	r3, [r3, #28]
 1215 01f0 1846     		mov	r0, r3
 1216 01f2 FFF7FEFF 		bl	lwip_htons
 1217 01f6 0346     		mov	r3, r0
 1218 01f8 1A46     		mov	r2, r3
 1219 01fa BB69     		ldr	r3, [r7, #24]
 1220 01fc 5A80     		strh	r2, [r3, #2]	@ unaligned
 579:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     IPH_OFFSET_SET(fraghdr, 0);
 1221              		.loc 1 579 0
 1222 01fe BB69     		ldr	r3, [r7, #24]
 1223 0200 0022     		movs	r2, #0
 1224 0202 9A71     		strb	r2, [r3, #6]
 1225 0204 0022     		movs	r2, #0
 1226 0206 DA71     		strb	r2, [r3, #7]
 580:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     IPH_CHKSUM_SET(fraghdr, 0);
 1227              		.loc 1 580 0
 1228 0208 BB69     		ldr	r3, [r7, #24]
 1229 020a 0022     		movs	r2, #0
 1230 020c 9A72     		strb	r2, [r3, #10]
 1231 020e 0022     		movs	r2, #0
 1232 0210 DA72     		strb	r2, [r3, #11]
 581:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     /* @todo: do we need to set calculate the correct checksum? */
 582:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 1233              		.loc 1 582 0
 1234 0212 1421     		movs	r1, #20
 1235 0214 B869     		ldr	r0, [r7, #24]
 1236 0216 FFF7FEFF 		bl	inet_chksum
 1237 021a 0346     		mov	r3, r0
 1238 021c 1A46     		mov	r2, r3
 1239 021e BB69     		ldr	r3, [r7, #24]
 1240 0220 5A81     		strh	r2, [r3, #10]	@ unaligned
 583:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 584:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     p = ipr->p;
 1241              		.loc 1 584 0
 1242 0222 3B6A     		ldr	r3, [r7, #32]
 1243 0224 5B68     		ldr	r3, [r3, #4]
 1244 0226 7B60     		str	r3, [r7, #4]
 585:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 586:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     /* chain together the pbufs contained within the reass_data list. */
 587:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     while(r != NULL) {
 1245              		.loc 1 587 0
 1246 0228 0EE0     		b	.L78
 1247              	.L79:
 588:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       iprh = (struct ip_reass_helper*)r->payload;
 1248              		.loc 1 588 0
 1249 022a 7B6A     		ldr	r3, [r7, #36]
 1250 022c 5B68     		ldr	r3, [r3, #4]
 1251 022e FB60     		str	r3, [r7, #12]
 589:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 590:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       /* hide the ip header for every succeding fragment */
 591:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       pbuf_header(r, -IP_HLEN);
 1252              		.loc 1 591 0
 1253 0230 6FF01301 		mvn	r1, #19
 1254 0234 786A     		ldr	r0, [r7, #36]
 1255 0236 FFF7FEFF 		bl	pbuf_header
 592:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       pbuf_cat(p, r);
 1256              		.loc 1 592 0
 1257 023a 796A     		ldr	r1, [r7, #36]
 1258 023c 7868     		ldr	r0, [r7, #4]
 1259 023e FFF7FEFF 		bl	pbuf_cat
 593:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       r = iprh->next_pbuf;
 1260              		.loc 1 593 0
 1261 0242 FB68     		ldr	r3, [r7, #12]
 1262 0244 1B68     		ldr	r3, [r3]	@ unaligned
 1263 0246 7B62     		str	r3, [r7, #36]
 1264              	.L78:
 587:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       iprh = (struct ip_reass_helper*)r->payload;
 1265              		.loc 1 587 0
 1266 0248 7B6A     		ldr	r3, [r7, #36]
 1267 024a 002B     		cmp	r3, #0
 1268 024c EDD1     		bne	.L79
 594:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     }
 595:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     /* release the sources allocate for the fragment queue entry */
 596:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     ip_reass_dequeue_datagram(ipr, ipr_prev);
 1269              		.loc 1 596 0
 1270 024e F969     		ldr	r1, [r7, #28]
 1271 0250 386A     		ldr	r0, [r7, #32]
 1272 0252 FFF7FEFF 		bl	ip_reass_dequeue_datagram
 597:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 598:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     /* and adjust the number of pbufs currently queued for reassembly. */
 599:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     ip_reass_pbufcount -= pbuf_clen(p);
 1273              		.loc 1 599 0
 1274 0256 7868     		ldr	r0, [r7, #4]
 1275 0258 FFF7FEFF 		bl	pbuf_clen
 1276 025c 0346     		mov	r3, r0
 1277 025e 1946     		mov	r1, r3
 1278 0260 0D4B     		ldr	r3, .L81+4
 1279 0262 1A88     		ldrh	r2, [r3]
 1280 0264 8BB2     		uxth	r3, r1
 1281 0266 D31A     		subs	r3, r2, r3
 1282 0268 9AB2     		uxth	r2, r3
 1283 026a 0B4B     		ldr	r3, .L81+4
 1284 026c 1A80     		strh	r2, [r3]	@ movhi
 600:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 601:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     /* Return the pbuf chain */
 602:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     return p;
 1285              		.loc 1 602 0
 1286 026e 7B68     		ldr	r3, [r7, #4]
 1287 0270 0BE0     		b	.L80
 1288              	.L77:
 603:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   }
 604:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   /* the datagram is not (yet?) reassembled completely */
 605:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
 606:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   return NULL;
 1289              		.loc 1 606 0
 1290 0272 0023     		movs	r3, #0
 1291 0274 09E0     		b	.L80
 1292              	.L67:
 607:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 608:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** nullreturn:
 609:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: nullreturn\n"));
 610:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   IPFRAG_STATS_INC(ip_frag.drop);
 1293              		.loc 1 610 0
 1294 0276 074B     		ldr	r3, .L81
 1295 0278 DB8E     		ldrh	r3, [r3, #54]
 1296 027a 0133     		adds	r3, r3, #1
 1297 027c 9AB2     		uxth	r2, r3
 1298 027e 054B     		ldr	r3, .L81
 1299 0280 DA86     		strh	r2, [r3, #54]	@ movhi
 611:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   pbuf_free(p);
 1300              		.loc 1 611 0
 1301 0282 7868     		ldr	r0, [r7, #4]
 1302 0284 FFF7FEFF 		bl	pbuf_free
 612:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   return NULL;
 1303              		.loc 1 612 0
 1304 0288 0023     		movs	r3, #0
 1305              	.L80:
 613:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** }
 1306              		.loc 1 613 0
 1307 028a 1846     		mov	r0, r3
 1308 028c 2C37     		adds	r7, r7, #44
 1309              		.cfi_def_cfa_offset 12
 1310 028e BD46     		mov	sp, r7
 1311              		.cfi_def_cfa_register 13
 1312              		@ sp needed
 1313 0290 90BD     		pop	{r4, r7, pc}
 1314              	.L82:
 1315 0292 00BF     		.align	2
 1316              	.L81:
 1317 0294 00000000 		.word	lwip_stats
 1318 0298 00000000 		.word	ip_reass_pbufcount
 1319 029c 00000000 		.word	reassdatagrams
 1320              		.cfi_endproc
 1321              	.LFE23:
 1323              		.section	.text.ip_frag_alloc_pbuf_custom_ref,"ax",%progbits
 1324              		.align	2
 1325              		.thumb
 1326              		.thumb_func
 1328              	ip_frag_alloc_pbuf_custom_ref:
 1329              	.LFB24:
 614:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #endif /* IP_REASSEMBLY */
 615:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 616:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #if IP_FRAG
 617:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #if IP_FRAG_USES_STATIC_BUF
 618:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** static u8_t buf[LWIP_MEM_ALIGN_SIZE(IP_FRAG_MAX_MTU + MEM_ALIGNMENT - 1)];
 619:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #else /* IP_FRAG_USES_STATIC_BUF */
 620:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 621:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #if !LWIP_NETIF_TX_SINGLE_PBUF
 622:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** /** Allocate a new struct pbuf_custom_ref */
 623:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** static struct pbuf_custom_ref*
 624:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** ip_frag_alloc_pbuf_custom_ref(void)
 625:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** {
 1330              		.loc 1 625 0
 1331              		.cfi_startproc
 1332              		@ args = 0, pretend = 0, frame = 0
 1333              		@ frame_needed = 1, uses_anonymous_args = 0
 1334 0000 80B5     		push	{r7, lr}
 1335              		.cfi_def_cfa_offset 8
 1336              		.cfi_offset 7, -8
 1337              		.cfi_offset 14, -4
 1338 0002 00AF     		add	r7, sp, #0
 1339              		.cfi_def_cfa_register 7
 626:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 1340              		.loc 1 626 0
 1341 0004 0620     		movs	r0, #6
 1342 0006 FFF7FEFF 		bl	memp_malloc
 1343 000a 0346     		mov	r3, r0
 627:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** }
 1344              		.loc 1 627 0
 1345 000c 1846     		mov	r0, r3
 1346 000e 80BD     		pop	{r7, pc}
 1347              		.cfi_endproc
 1348              	.LFE24:
 1350              		.section	.text.ip_frag_free_pbuf_custom_ref,"ax",%progbits
 1351              		.align	2
 1352              		.thumb
 1353              		.thumb_func
 1355              	ip_frag_free_pbuf_custom_ref:
 1356              	.LFB25:
 628:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 629:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** /** Free a struct pbuf_custom_ref */
 630:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** static void
 631:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
 632:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** {
 1357              		.loc 1 632 0
 1358              		.cfi_startproc
 1359              		@ args = 0, pretend = 0, frame = 8
 1360              		@ frame_needed = 1, uses_anonymous_args = 0
 1361 0000 80B5     		push	{r7, lr}
 1362              		.cfi_def_cfa_offset 8
 1363              		.cfi_offset 7, -8
 1364              		.cfi_offset 14, -4
 1365 0002 82B0     		sub	sp, sp, #8
 1366              		.cfi_def_cfa_offset 16
 1367 0004 00AF     		add	r7, sp, #0
 1368              		.cfi_def_cfa_register 7
 1369 0006 7860     		str	r0, [r7, #4]
 633:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   LWIP_ASSERT("p != NULL", p != NULL);
 634:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   memp_free(MEMP_FRAG_PBUF, p);
 1370              		.loc 1 634 0
 1371 0008 7968     		ldr	r1, [r7, #4]
 1372 000a 0620     		movs	r0, #6
 1373 000c FFF7FEFF 		bl	memp_free
 635:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** }
 1374              		.loc 1 635 0
 1375 0010 00BF     		nop
 1376 0012 0837     		adds	r7, r7, #8
 1377              		.cfi_def_cfa_offset 8
 1378 0014 BD46     		mov	sp, r7
 1379              		.cfi_def_cfa_register 13
 1380              		@ sp needed
 1381 0016 80BD     		pop	{r7, pc}
 1382              		.cfi_endproc
 1383              	.LFE25:
 1385              		.section	.text.ipfrag_free_pbuf_custom,"ax",%progbits
 1386              		.align	2
 1387              		.thumb
 1388              		.thumb_func
 1390              	ipfrag_free_pbuf_custom:
 1391              	.LFB26:
 636:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 637:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** /** Free-callback function to free a 'struct pbuf_custom_ref', called by
 638:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * pbuf_free. */
 639:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** static void
 640:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** ipfrag_free_pbuf_custom(struct pbuf *p)
 641:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** {
 1392              		.loc 1 641 0
 1393              		.cfi_startproc
 1394              		@ args = 0, pretend = 0, frame = 16
 1395              		@ frame_needed = 1, uses_anonymous_args = 0
 1396 0000 80B5     		push	{r7, lr}
 1397              		.cfi_def_cfa_offset 8
 1398              		.cfi_offset 7, -8
 1399              		.cfi_offset 14, -4
 1400 0002 84B0     		sub	sp, sp, #16
 1401              		.cfi_def_cfa_offset 24
 1402 0004 00AF     		add	r7, sp, #0
 1403              		.cfi_def_cfa_register 7
 1404 0006 7860     		str	r0, [r7, #4]
 642:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 1405              		.loc 1 642 0
 1406 0008 7B68     		ldr	r3, [r7, #4]
 1407 000a FB60     		str	r3, [r7, #12]
 643:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   LWIP_ASSERT("pcr != NULL", pcr != NULL);
 644:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 645:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   if (pcr->original != NULL) {
 1408              		.loc 1 645 0
 1409 000c FB68     		ldr	r3, [r7, #12]
 1410 000e 5B69     		ldr	r3, [r3, #20]
 1411 0010 002B     		cmp	r3, #0
 1412 0012 04D0     		beq	.L87
 646:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     pbuf_free(pcr->original);
 1413              		.loc 1 646 0
 1414 0014 FB68     		ldr	r3, [r7, #12]
 1415 0016 5B69     		ldr	r3, [r3, #20]
 1416 0018 1846     		mov	r0, r3
 1417 001a FFF7FEFF 		bl	pbuf_free
 1418              	.L87:
 647:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   }
 648:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   ip_frag_free_pbuf_custom_ref(pcr);
 1419              		.loc 1 648 0
 1420 001e F868     		ldr	r0, [r7, #12]
 1421 0020 FFF7FEFF 		bl	ip_frag_free_pbuf_custom_ref
 649:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** }
 1422              		.loc 1 649 0
 1423 0024 00BF     		nop
 1424 0026 1037     		adds	r7, r7, #16
 1425              		.cfi_def_cfa_offset 8
 1426 0028 BD46     		mov	sp, r7
 1427              		.cfi_def_cfa_register 13
 1428              		@ sp needed
 1429 002a 80BD     		pop	{r7, pc}
 1430              		.cfi_endproc
 1431              	.LFE26:
 1433              		.section	.text.ip_frag,"ax",%progbits
 1434              		.align	2
 1435              		.global	ip_frag
 1436              		.thumb
 1437              		.thumb_func
 1439              	ip_frag:
 1440              	.LFB27:
 650:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
 651:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #endif /* IP_FRAG_USES_STATIC_BUF */
 652:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 653:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** /**
 654:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * Fragment an IP datagram if too large for the netif.
 655:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  *
 656:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * Chop the datagram in MTU sized chunks and send them in order
 657:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * by using a fixed size static memory buffer (PBUF_REF) or
 658:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * point PBUF_REFs into p (depending on IP_FRAG_USES_STATIC_BUF).
 659:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  *
 660:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * @param p ip packet to send
 661:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * @param netif the netif on which to send
 662:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * @param dest destination ip address to which to send
 663:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  *
 664:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  * @return ERR_OK if sent successfully, err_t otherwise
 665:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****  */
 666:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** err_t 
 667:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** ip_frag(struct pbuf *p, struct netif *netif, ip_addr_t *dest)
 668:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** {
 1441              		.loc 1 668 0
 1442              		.cfi_startproc
 1443              		@ args = 0, pretend = 0, frame = 64
 1444              		@ frame_needed = 1, uses_anonymous_args = 0
 1445 0000 80B5     		push	{r7, lr}
 1446              		.cfi_def_cfa_offset 8
 1447              		.cfi_offset 7, -8
 1448              		.cfi_offset 14, -4
 1449 0002 92B0     		sub	sp, sp, #72
 1450              		.cfi_def_cfa_offset 80
 1451 0004 02AF     		add	r7, sp, #8
 1452              		.cfi_def_cfa 7, 72
 1453 0006 F860     		str	r0, [r7, #12]
 1454 0008 B960     		str	r1, [r7, #8]
 1455 000a 7A60     		str	r2, [r7, #4]
 669:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   struct pbuf *rambuf;
 670:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #if IP_FRAG_USES_STATIC_BUF
 671:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   struct pbuf *header;
 672:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #else
 673:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #if !LWIP_NETIF_TX_SINGLE_PBUF
 674:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   struct pbuf *newpbuf;
 675:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #endif
 676:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   struct ip_hdr *original_iphdr;
 677:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #endif
 678:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   struct ip_hdr *iphdr;
 679:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   u16_t nfb;
 680:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   u16_t left, cop;
 681:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   u16_t mtu = netif->mtu;
 1456              		.loc 1 681 0
 1457 000c BB68     		ldr	r3, [r7, #8]
 1458 000e 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 1459 0010 7B86     		strh	r3, [r7, #50]	@ movhi
 682:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   u16_t ofo, omf;
 683:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   u16_t last;
 684:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   u16_t poff = IP_HLEN;
 1460              		.loc 1 684 0
 1461 0012 1423     		movs	r3, #20
 1462 0014 7B87     		strh	r3, [r7, #58]	@ movhi
 685:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   u16_t tmp;
 686:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #if !IP_FRAG_USES_STATIC_BUF && !LWIP_NETIF_TX_SINGLE_PBUF
 687:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   u16_t newpbuflen = 0;
 1463              		.loc 1 687 0
 1464 0016 0023     		movs	r3, #0
 1465 0018 FB86     		strh	r3, [r7, #54]	@ movhi
 688:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   u16_t left_to_copy;
 689:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #endif
 690:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 691:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   /* Get a RAM based MTU sized pbuf */
 692:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #if IP_FRAG_USES_STATIC_BUF
 693:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   /* When using a static buffer, we use a PBUF_REF, which we will
 694:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****    * use to reference the packet (without link header).
 695:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****    * Layer and length is irrelevant.
 696:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****    */
 697:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   rambuf = pbuf_alloc(PBUF_LINK, 0, PBUF_REF);
 698:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   if (rambuf == NULL) {
 699:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_frag: pbuf_alloc(PBUF_LINK, 0, PBUF_REF) failed\n"));
 700:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     return ERR_MEM;
 701:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   }
 702:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   rambuf->tot_len = rambuf->len = mtu;
 703:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   rambuf->payload = LWIP_MEM_ALIGN((void *)buf);
 704:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 705:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   /* Copy the IP header in it */
 706:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   iphdr = (struct ip_hdr *)rambuf->payload;
 707:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   SMEMCPY(iphdr, p->payload, IP_HLEN);
 708:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #else /* IP_FRAG_USES_STATIC_BUF */
 709:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   original_iphdr = (struct ip_hdr *)p->payload;
 1466              		.loc 1 709 0
 1467 001a FB68     		ldr	r3, [r7, #12]
 1468 001c 5B68     		ldr	r3, [r3, #4]
 1469 001e FB62     		str	r3, [r7, #44]
 710:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   iphdr = original_iphdr;
 1470              		.loc 1 710 0
 1471 0020 FB6A     		ldr	r3, [r7, #44]
 1472 0022 BB62     		str	r3, [r7, #40]
 711:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #endif /* IP_FRAG_USES_STATIC_BUF */
 712:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 713:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   /* Save original offset */
 714:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   tmp = ntohs(IPH_OFFSET(iphdr));
 1473              		.loc 1 714 0
 1474 0024 BB6A     		ldr	r3, [r7, #40]
 1475 0026 DB88     		ldrh	r3, [r3, #6]	@ unaligned
 1476 0028 9BB2     		uxth	r3, r3
 1477 002a 1846     		mov	r0, r3
 1478 002c FFF7FEFF 		bl	lwip_ntohs
 1479 0030 0346     		mov	r3, r0
 1480 0032 3B87     		strh	r3, [r7, #56]	@ movhi
 715:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   ofo = tmp & IP_OFFMASK;
 1481              		.loc 1 715 0
 1482 0034 3B8F     		ldrh	r3, [r7, #56]	@ movhi
 1483 0036 C3F30C03 		ubfx	r3, r3, #0, #13
 1484 003a BB87     		strh	r3, [r7, #60]	@ movhi
 716:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   omf = tmp & IP_MF;
 1485              		.loc 1 716 0
 1486 003c 3B8F     		ldrh	r3, [r7, #56]	@ movhi
 1487 003e 03F40053 		and	r3, r3, #8192
 1488 0042 FB84     		strh	r3, [r7, #38]	@ movhi
 717:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 718:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   left = p->tot_len - IP_HLEN;
 1489              		.loc 1 718 0
 1490 0044 FB68     		ldr	r3, [r7, #12]
 1491 0046 1B89     		ldrh	r3, [r3, #8]
 1492 0048 143B     		subs	r3, r3, #20
 1493 004a FB87     		strh	r3, [r7, #62]	@ movhi
 719:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 720:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   nfb = (mtu - IP_HLEN) / 8;
 1494              		.loc 1 720 0
 1495 004c 7B8E     		ldrh	r3, [r7, #50]
 1496 004e 143B     		subs	r3, r3, #20
 1497 0050 002B     		cmp	r3, #0
 1498 0052 00DA     		bge	.L89
 1499 0054 0733     		adds	r3, r3, #7
 1500              	.L89:
 1501 0056 DB10     		asrs	r3, r3, #3
 1502 0058 BB84     		strh	r3, [r7, #36]	@ movhi
 721:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 722:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   while (left) {
 1503              		.loc 1 722 0
 1504 005a CAE0     		b	.L90
 1505              	.L101:
 723:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     last = (left <= mtu - IP_HLEN);
 1506              		.loc 1 723 0
 1507 005c FA8F     		ldrh	r2, [r7, #62]
 1508 005e 7B8E     		ldrh	r3, [r7, #50]
 1509 0060 143B     		subs	r3, r3, #20
 1510 0062 9A42     		cmp	r2, r3
 1511 0064 D4BF     		ite	le
 1512 0066 0123     		movle	r3, #1
 1513 0068 0023     		movgt	r3, #0
 1514 006a DBB2     		uxtb	r3, r3
 1515 006c 7B84     		strh	r3, [r7, #34]	@ movhi
 724:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 725:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     /* Set new offset and MF flag */
 726:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     tmp = omf | (IP_OFFMASK & (ofo));
 1516              		.loc 1 726 0
 1517 006e BB8F     		ldrh	r3, [r7, #60]	@ movhi
 1518 0070 C3F30C03 		ubfx	r3, r3, #0, #13
 1519 0074 9AB2     		uxth	r2, r3
 1520 0076 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 1521 0078 1343     		orrs	r3, r3, r2
 1522 007a 3B87     		strh	r3, [r7, #56]	@ movhi
 727:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     if (!last) {
 1523              		.loc 1 727 0
 1524 007c 7B8C     		ldrh	r3, [r7, #34]
 1525 007e 002B     		cmp	r3, #0
 1526 0080 03D1     		bne	.L91
 728:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       tmp = tmp | IP_MF;
 1527              		.loc 1 728 0
 1528 0082 3B8F     		ldrh	r3, [r7, #56]	@ movhi
 1529 0084 43F40053 		orr	r3, r3, #8192
 1530 0088 3B87     		strh	r3, [r7, #56]	@ movhi
 1531              	.L91:
 729:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     }
 730:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 731:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     /* Fill this fragment */
 732:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     cop = last ? left : nfb * 8;
 1532              		.loc 1 732 0
 1533 008a 7B8C     		ldrh	r3, [r7, #34]
 1534 008c 002B     		cmp	r3, #0
 1535 008e 03D1     		bne	.L92
 1536              		.loc 1 732 0 is_stmt 0 discriminator 1
 1537 0090 BB8C     		ldrh	r3, [r7, #36]	@ movhi
 1538 0092 DB00     		lsls	r3, r3, #3
 1539 0094 9BB2     		uxth	r3, r3
 1540 0096 00E0     		b	.L93
 1541              	.L92:
 1542              		.loc 1 732 0 discriminator 2
 1543 0098 FB8F     		ldrh	r3, [r7, #62]
 1544              	.L93:
 1545              		.loc 1 732 0 discriminator 4
 1546 009a 3B84     		strh	r3, [r7, #32]	@ movhi
 733:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 734:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #if IP_FRAG_USES_STATIC_BUF
 735:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     poff += pbuf_copy_partial(p, (u8_t*)iphdr + IP_HLEN, cop, poff);
 736:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #else /* IP_FRAG_USES_STATIC_BUF */
 737:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #if LWIP_NETIF_TX_SINGLE_PBUF
 738:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     rambuf = pbuf_alloc(PBUF_IP, cop, PBUF_RAM);
 739:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     if (rambuf == NULL) {
 740:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       return ERR_MEM;
 741:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     }
 742:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     LWIP_ASSERT("this needs a pbuf in one piece!",
 743:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       (rambuf->len == rambuf->tot_len) && (rambuf->next == NULL));
 744:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     poff += pbuf_copy_partial(p, rambuf->payload, cop, poff);
 745:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     /* make room for the IP header */
 746:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     if(pbuf_header(rambuf, IP_HLEN)) {
 747:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       pbuf_free(rambuf);
 748:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       return ERR_MEM;
 749:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     }
 750:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     /* fill in the IP header */
 751:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 752:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     iphdr = rambuf->payload;
 753:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #else /* LWIP_NETIF_TX_SINGLE_PBUF */
 754:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     /* When not using a static buffer, create a chain of pbufs.
 755:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****      * The first will be a PBUF_RAM holding the link and IP header.
 756:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****      * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
 757:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****      * but limited to the size of an mtu.
 758:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****      */
 759:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 1547              		.loc 1 759 0 is_stmt 1 discriminator 4
 1548 009c 0022     		movs	r2, #0
 1549 009e 1421     		movs	r1, #20
 1550 00a0 0220     		movs	r0, #2
 1551 00a2 FFF7FEFF 		bl	pbuf_alloc
 1552 00a6 F861     		str	r0, [r7, #28]
 760:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     if (rambuf == NULL) {
 1553              		.loc 1 760 0 discriminator 4
 1554 00a8 FB69     		ldr	r3, [r7, #28]
 1555 00aa 002B     		cmp	r3, #0
 1556 00ac 02D1     		bne	.L94
 761:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       return ERR_MEM;
 1557              		.loc 1 761 0
 1558 00ae 4FF0FF33 		mov	r3, #-1
 1559 00b2 A3E0     		b	.L95
 1560              	.L94:
 762:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     }
 763:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     LWIP_ASSERT("this needs a pbuf in one piece!",
 764:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****                 (p->len >= (IP_HLEN)));
 765:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 1561              		.loc 1 765 0
 1562 00b4 FB69     		ldr	r3, [r7, #28]
 1563 00b6 5B68     		ldr	r3, [r3, #4]
 1564 00b8 1422     		movs	r2, #20
 1565 00ba F96A     		ldr	r1, [r7, #44]
 1566 00bc 1846     		mov	r0, r3
 1567 00be FFF7FEFF 		bl	memcpy
 766:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     iphdr = (struct ip_hdr *)rambuf->payload;
 1568              		.loc 1 766 0
 1569 00c2 FB69     		ldr	r3, [r7, #28]
 1570 00c4 5B68     		ldr	r3, [r3, #4]
 1571 00c6 BB62     		str	r3, [r7, #40]
 767:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 768:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     /* Can just adjust p directly for needed offset. */
 769:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     p->payload = (u8_t *)p->payload + poff;
 1572              		.loc 1 769 0
 1573 00c8 FB68     		ldr	r3, [r7, #12]
 1574 00ca 5A68     		ldr	r2, [r3, #4]
 1575 00cc 7B8F     		ldrh	r3, [r7, #58]
 1576 00ce 1A44     		add	r2, r2, r3
 1577 00d0 FB68     		ldr	r3, [r7, #12]
 1578 00d2 5A60     		str	r2, [r3, #4]
 770:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     p->len -= poff;
 1579              		.loc 1 770 0
 1580 00d4 FB68     		ldr	r3, [r7, #12]
 1581 00d6 5A89     		ldrh	r2, [r3, #10]
 1582 00d8 7B8F     		ldrh	r3, [r7, #58]	@ movhi
 1583 00da D31A     		subs	r3, r2, r3
 1584 00dc 9AB2     		uxth	r2, r3
 1585 00de FB68     		ldr	r3, [r7, #12]
 1586 00e0 5A81     		strh	r2, [r3, #10]	@ movhi
 771:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 772:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     left_to_copy = cop;
 1587              		.loc 1 772 0
 1588 00e2 3B8C     		ldrh	r3, [r7, #32]	@ movhi
 1589 00e4 BB86     		strh	r3, [r7, #52]	@ movhi
 773:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     while (left_to_copy) {
 1590              		.loc 1 773 0
 1591 00e6 49E0     		b	.L96
 1592              	.L100:
 1593              	.LBB4:
 774:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       struct pbuf_custom_ref *pcr;
 775:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       newpbuflen = (left_to_copy < p->len) ? left_to_copy : p->len;
 1594              		.loc 1 775 0
 1595 00e8 FB68     		ldr	r3, [r7, #12]
 1596 00ea 5A89     		ldrh	r2, [r3, #10]
 1597 00ec BB8E     		ldrh	r3, [r7, #52]
 1598 00ee 9342     		cmp	r3, r2
 1599 00f0 28BF     		it	cs
 1600 00f2 1346     		movcs	r3, r2
 1601 00f4 FB86     		strh	r3, [r7, #54]	@ movhi
 776:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       /* Is this pbuf already empty? */
 777:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       if (!newpbuflen) {
 1602              		.loc 1 777 0
 1603 00f6 FB8E     		ldrh	r3, [r7, #54]
 1604 00f8 002B     		cmp	r3, #0
 1605 00fa 03D1     		bne	.L97
 778:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****         p = p->next;
 1606              		.loc 1 778 0
 1607 00fc FB68     		ldr	r3, [r7, #12]
 1608 00fe 1B68     		ldr	r3, [r3]
 1609 0100 FB60     		str	r3, [r7, #12]
 779:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****         continue;
 1610              		.loc 1 779 0
 1611 0102 3BE0     		b	.L96
 1612              	.L97:
 780:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       }
 781:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       pcr = ip_frag_alloc_pbuf_custom_ref();
 1613              		.loc 1 781 0
 1614 0104 FFF7FEFF 		bl	ip_frag_alloc_pbuf_custom_ref
 1615 0108 B861     		str	r0, [r7, #24]
 782:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       if (pcr == NULL) {
 1616              		.loc 1 782 0
 1617 010a BB69     		ldr	r3, [r7, #24]
 1618 010c 002B     		cmp	r3, #0
 1619 010e 05D1     		bne	.L98
 783:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****         pbuf_free(rambuf);
 1620              		.loc 1 783 0
 1621 0110 F869     		ldr	r0, [r7, #28]
 1622 0112 FFF7FEFF 		bl	pbuf_free
 784:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****         return ERR_MEM;
 1623              		.loc 1 784 0
 1624 0116 4FF0FF33 		mov	r3, #-1
 1625 011a 6FE0     		b	.L95
 1626              	.L98:
 785:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       }
 786:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       /* Mirror this pbuf, although we might not need all of it. */
 787:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc, p->payload, newpbufle
 1627              		.loc 1 787 0
 1628 011c B869     		ldr	r0, [r7, #24]
 1629 011e FB68     		ldr	r3, [r7, #12]
 1630 0120 5B68     		ldr	r3, [r3, #4]
 1631 0122 F98E     		ldrh	r1, [r7, #54]
 1632 0124 FA8E     		ldrh	r2, [r7, #54]
 1633 0126 0192     		str	r2, [sp, #4]
 1634 0128 0093     		str	r3, [sp]
 1635 012a 0346     		mov	r3, r0
 1636 012c 0222     		movs	r2, #2
 1637 012e 0320     		movs	r0, #3
 1638 0130 FFF7FEFF 		bl	pbuf_alloced_custom
 1639 0134 7861     		str	r0, [r7, #20]
 788:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       if (newpbuf == NULL) {
 1640              		.loc 1 788 0
 1641 0136 7B69     		ldr	r3, [r7, #20]
 1642 0138 002B     		cmp	r3, #0
 1643 013a 08D1     		bne	.L99
 789:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****         ip_frag_free_pbuf_custom_ref(pcr);
 1644              		.loc 1 789 0
 1645 013c B869     		ldr	r0, [r7, #24]
 1646 013e FFF7FEFF 		bl	ip_frag_free_pbuf_custom_ref
 790:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****         pbuf_free(rambuf);
 1647              		.loc 1 790 0
 1648 0142 F869     		ldr	r0, [r7, #28]
 1649 0144 FFF7FEFF 		bl	pbuf_free
 791:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****         return ERR_MEM;
 1650              		.loc 1 791 0
 1651 0148 4FF0FF33 		mov	r3, #-1
 1652 014c 56E0     		b	.L95
 1653              	.L99:
 792:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       }
 793:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       pbuf_ref(p);
 1654              		.loc 1 793 0
 1655 014e F868     		ldr	r0, [r7, #12]
 1656 0150 FFF7FEFF 		bl	pbuf_ref
 794:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       pcr->original = p;
 1657              		.loc 1 794 0
 1658 0154 BB69     		ldr	r3, [r7, #24]
 1659 0156 FA68     		ldr	r2, [r7, #12]
 1660 0158 5A61     		str	r2, [r3, #20]
 795:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 1661              		.loc 1 795 0
 1662 015a BB69     		ldr	r3, [r7, #24]
 1663 015c 294A     		ldr	r2, .L102
 1664 015e 1A61     		str	r2, [r3, #16]
 796:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 797:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
 798:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****        * so that it is removed when pbuf_dechain is later called on rambuf.
 799:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****        */
 800:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       pbuf_cat(rambuf, newpbuf);
 1665              		.loc 1 800 0
 1666 0160 7969     		ldr	r1, [r7, #20]
 1667 0162 F869     		ldr	r0, [r7, #28]
 1668 0164 FFF7FEFF 		bl	pbuf_cat
 801:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       left_to_copy -= newpbuflen;
 1669              		.loc 1 801 0
 1670 0168 BA8E     		ldrh	r2, [r7, #52]	@ movhi
 1671 016a FB8E     		ldrh	r3, [r7, #54]	@ movhi
 1672 016c D31A     		subs	r3, r2, r3
 1673 016e BB86     		strh	r3, [r7, #52]	@ movhi
 802:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       if (left_to_copy) {
 1674              		.loc 1 802 0
 1675 0170 BB8E     		ldrh	r3, [r7, #52]
 1676 0172 002B     		cmp	r3, #0
 1677 0174 02D0     		beq	.L96
 803:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****         p = p->next;
 1678              		.loc 1 803 0
 1679 0176 FB68     		ldr	r3, [r7, #12]
 1680 0178 1B68     		ldr	r3, [r3]
 1681 017a FB60     		str	r3, [r7, #12]
 1682              	.L96:
 1683              	.LBE4:
 773:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       struct pbuf_custom_ref *pcr;
 1684              		.loc 1 773 0
 1685 017c BB8E     		ldrh	r3, [r7, #52]
 1686 017e 002B     		cmp	r3, #0
 1687 0180 B2D1     		bne	.L100
 804:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       }
 805:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     }
 806:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     poff = newpbuflen;
 1688              		.loc 1 806 0
 1689 0182 FB8E     		ldrh	r3, [r7, #54]	@ movhi
 1690 0184 7B87     		strh	r3, [r7, #58]	@ movhi
 807:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #endif /* LWIP_NETIF_TX_SINGLE_PBUF */
 808:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #endif /* IP_FRAG_USES_STATIC_BUF */
 809:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 810:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     /* Correct header */
 811:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     IPH_OFFSET_SET(iphdr, htons(tmp));
 1691              		.loc 1 811 0
 1692 0186 3B8F     		ldrh	r3, [r7, #56]
 1693 0188 1846     		mov	r0, r3
 1694 018a FFF7FEFF 		bl	lwip_htons
 1695 018e 0346     		mov	r3, r0
 1696 0190 1A46     		mov	r2, r3
 1697 0192 BB6A     		ldr	r3, [r7, #40]
 1698 0194 DA80     		strh	r2, [r3, #6]	@ unaligned
 812:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     IPH_LEN_SET(iphdr, htons(cop + IP_HLEN));
 1699              		.loc 1 812 0
 1700 0196 3B8C     		ldrh	r3, [r7, #32]	@ movhi
 1701 0198 1433     		adds	r3, r3, #20
 1702 019a 9BB2     		uxth	r3, r3
 1703 019c 1846     		mov	r0, r3
 1704 019e FFF7FEFF 		bl	lwip_htons
 1705 01a2 0346     		mov	r3, r0
 1706 01a4 1A46     		mov	r2, r3
 1707 01a6 BB6A     		ldr	r3, [r7, #40]
 1708 01a8 5A80     		strh	r2, [r3, #2]	@ unaligned
 813:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     IPH_CHKSUM_SET(iphdr, 0);
 1709              		.loc 1 813 0
 1710 01aa BB6A     		ldr	r3, [r7, #40]
 1711 01ac 0022     		movs	r2, #0
 1712 01ae 9A72     		strb	r2, [r3, #10]
 1713 01b0 0022     		movs	r2, #0
 1714 01b2 DA72     		strb	r2, [r3, #11]
 814:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 1715              		.loc 1 814 0
 1716 01b4 1421     		movs	r1, #20
 1717 01b6 B86A     		ldr	r0, [r7, #40]
 1718 01b8 FFF7FEFF 		bl	inet_chksum
 1719 01bc 0346     		mov	r3, r0
 1720 01be 1A46     		mov	r2, r3
 1721 01c0 BB6A     		ldr	r3, [r7, #40]
 1722 01c2 5A81     		strh	r2, [r3, #10]	@ unaligned
 815:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 816:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #if IP_FRAG_USES_STATIC_BUF
 817:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     if (last) {
 818:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       pbuf_realloc(rambuf, left + IP_HLEN);
 819:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     }
 820:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 821:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     /* This part is ugly: we alloc a RAM based pbuf for 
 822:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****      * the link level header for each chunk and then 
 823:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****      * free it.A PBUF_ROM style pbuf for which pbuf_header
 824:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****      * worked would make things simpler.
 825:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****      */
 826:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     header = pbuf_alloc(PBUF_LINK, 0, PBUF_RAM);
 827:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     if (header != NULL) {
 828:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       pbuf_chain(header, rambuf);
 829:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       netif->output(netif, header, dest);
 830:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       IPFRAG_STATS_INC(ip_frag.xmit);
 831:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       snmp_inc_ipfragcreates();
 832:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       pbuf_free(header);
 833:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     } else {
 834:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_frag: pbuf_alloc() for header failed\n"));
 835:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       pbuf_free(rambuf);
 836:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****       return ERR_MEM;
 837:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     }
 838:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #else /* IP_FRAG_USES_STATIC_BUF */
 839:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     /* No need for separate header pbuf - we allowed room for it in rambuf
 840:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****      * when allocated.
 841:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****      */
 842:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     netif->output(netif, rambuf, dest);
 1723              		.loc 1 842 0
 1724 01c4 BB68     		ldr	r3, [r7, #8]
 1725 01c6 5B69     		ldr	r3, [r3, #20]
 1726 01c8 7A68     		ldr	r2, [r7, #4]
 1727 01ca F969     		ldr	r1, [r7, #28]
 1728 01cc B868     		ldr	r0, [r7, #8]
 1729 01ce 9847     		blx	r3
 843:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     IPFRAG_STATS_INC(ip_frag.xmit);
 1730              		.loc 1 843 0
 1731 01d0 0D4B     		ldr	r3, .L102+4
 1732 01d2 1B8E     		ldrh	r3, [r3, #48]
 1733 01d4 0133     		adds	r3, r3, #1
 1734 01d6 9AB2     		uxth	r2, r3
 1735 01d8 0B4B     		ldr	r3, .L102+4
 1736 01da 1A86     		strh	r2, [r3, #48]	@ movhi
 844:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** 
 845:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     /* Unfortunately we can't reuse rambuf - the hardware may still be
 846:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****      * using the buffer. Instead we free it (and the ensuing chain) and
 847:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****      * recreate it next time round the loop. If we're lucky the hardware
 848:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****      * will have already sent the packet, the free will really free, and
 849:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****      * there will be zero memory penalty.
 850:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****      */
 851:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     
 852:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     pbuf_free(rambuf);
 1737              		.loc 1 852 0
 1738 01dc F869     		ldr	r0, [r7, #28]
 1739 01de FFF7FEFF 		bl	pbuf_free
 853:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #endif /* IP_FRAG_USES_STATIC_BUF */
 854:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     left -= cop;
 1740              		.loc 1 854 0
 1741 01e2 FA8F     		ldrh	r2, [r7, #62]	@ movhi
 1742 01e4 3B8C     		ldrh	r3, [r7, #32]	@ movhi
 1743 01e6 D31A     		subs	r3, r2, r3
 1744 01e8 FB87     		strh	r3, [r7, #62]	@ movhi
 855:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     ofo += nfb;
 1745              		.loc 1 855 0
 1746 01ea BA8F     		ldrh	r2, [r7, #60]	@ movhi
 1747 01ec BB8C     		ldrh	r3, [r7, #36]	@ movhi
 1748 01ee 1344     		add	r3, r3, r2
 1749 01f0 BB87     		strh	r3, [r7, #60]	@ movhi
 1750              	.L90:
 722:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****     last = (left <= mtu - IP_HLEN);
 1751              		.loc 1 722 0
 1752 01f2 FB8F     		ldrh	r3, [r7, #62]
 1753 01f4 002B     		cmp	r3, #0
 1754 01f6 7FF431AF 		bne	.L101
 856:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   }
 857:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #if IP_FRAG_USES_STATIC_BUF
 858:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   pbuf_free(rambuf);
 859:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** #endif /* IP_FRAG_USES_STATIC_BUF */
 860:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   snmp_inc_ipfragoks();
 861:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c ****   return ERR_OK;
 1755              		.loc 1 861 0
 1756 01fa 0023     		movs	r3, #0
 1757              	.L95:
 862:Libraries/lwip-1.4.0/core/ipv4/ip_frag.c **** }
 1758              		.loc 1 862 0
 1759 01fc 1846     		mov	r0, r3
 1760 01fe 4037     		adds	r7, r7, #64
 1761              		.cfi_def_cfa_offset 8
 1762 0200 BD46     		mov	sp, r7
 1763              		.cfi_def_cfa_register 13
 1764              		@ sp needed
 1765 0202 80BD     		pop	{r7, pc}
 1766              	.L103:
 1767              		.align	2
 1768              	.L102:
 1769 0204 00000000 		.word	ipfrag_free_pbuf_custom
 1770 0208 00000000 		.word	lwip_stats
 1771              		.cfi_endproc
 1772              	.LFE27:
 1774              		.text
 1775              	.Letext0:
 1776              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q2\\arm-none-eabi\\include\\mach
 1777              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q2\\arm-none-eabi\\include\\sys\
 1778              		.file 4 "./Libraries/lwip-1.4.0/arch/cc.h"
 1779              		.file 5 "./Libraries/lwip-1.4.0/include/lwip/err.h"
 1780              		.file 6 "./Libraries/lwip-1.4.0/include/lwip/pbuf.h"
 1781              		.file 7 "./Libraries/lwip-1.4.0/include/ipv4/lwip/ip_addr.h"
 1782              		.file 8 "./Libraries/lwip-1.4.0/include/lwip/netif.h"
 1783              		.file 9 "./Libraries/lwip-1.4.0/include/ipv4/lwip/ip.h"
 1784              		.file 10 "./Libraries/lwip-1.4.0/include/ipv4/lwip/ip_frag.h"
 1785              		.file 11 "./Libraries/lwip-1.4.0/include/lwip/mem.h"
 1786              		.file 12 "./Libraries/lwip-1.4.0/include/lwip/memp.h"
 1787              		.file 13 "./Libraries/lwip-1.4.0/include/lwip/stats.h"
 1788              		.file 14 "./Libraries/lwip-1.4.0/include/ipv4/lwip/icmp.h"
DEFINED SYMBOLS
                            *ABS*:00000000 ip_frag.c
C:\Users\KHUSHA~1\AppData\Local\Temp\ccB70Lok.s:20     .bss.reassdatagrams:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\ccB70Lok.s:23     .bss.reassdatagrams:00000000 reassdatagrams
C:\Users\KHUSHA~1\AppData\Local\Temp\ccB70Lok.s:26     .bss.ip_reass_pbufcount:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\ccB70Lok.s:29     .bss.ip_reass_pbufcount:00000000 ip_reass_pbufcount
C:\Users\KHUSHA~1\AppData\Local\Temp\ccB70Lok.s:32     .text.ip_reass_tmr:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\ccB70Lok.s:37     .text.ip_reass_tmr:00000000 ip_reass_tmr
C:\Users\KHUSHA~1\AppData\Local\Temp\ccB70Lok.s:121    .text.ip_reass_free_complete_datagram:00000000 ip_reass_free_complete_datagram
C:\Users\KHUSHA~1\AppData\Local\Temp\ccB70Lok.s:112    .text.ip_reass_tmr:00000054 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\ccB70Lok.s:117    .text.ip_reass_free_complete_datagram:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\ccB70Lok.s:512    .text.ip_reass_dequeue_datagram:00000000 ip_reass_dequeue_datagram
C:\Users\KHUSHA~1\AppData\Local\Temp\ccB70Lok.s:254    .text.ip_reass_free_complete_datagram:000000bc $d
C:\Users\KHUSHA~1\AppData\Local\Temp\ccB70Lok.s:259    .text.ip_reass_remove_oldest_datagram:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\ccB70Lok.s:263    .text.ip_reass_remove_oldest_datagram:00000000 ip_reass_remove_oldest_datagram
C:\Users\KHUSHA~1\AppData\Local\Temp\ccB70Lok.s:402    .text.ip_reass_remove_oldest_datagram:000000b4 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\ccB70Lok.s:407    .text.ip_reass_enqueue_new_datagram:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\ccB70Lok.s:411    .text.ip_reass_enqueue_new_datagram:00000000 ip_reass_enqueue_new_datagram
C:\Users\KHUSHA~1\AppData\Local\Temp\ccB70Lok.s:502    .text.ip_reass_enqueue_new_datagram:0000007c $d
C:\Users\KHUSHA~1\AppData\Local\Temp\ccB70Lok.s:508    .text.ip_reass_dequeue_datagram:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\ccB70Lok.s:562    .text.ip_reass_dequeue_datagram:00000038 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\ccB70Lok.s:567    .text.ip_reass_chain_frag_into_datagram_and_validate:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\ccB70Lok.s:571    .text.ip_reass_chain_frag_into_datagram_and_validate:00000000 ip_reass_chain_frag_into_datagram_and_validate
C:\Users\KHUSHA~1\AppData\Local\Temp\ccB70Lok.s:916    .text.ip_reass_chain_frag_into_datagram_and_validate:00000208 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\ccB70Lok.s:921    .text.ip_reass:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\ccB70Lok.s:926    .text.ip_reass:00000000 ip_reass
C:\Users\KHUSHA~1\AppData\Local\Temp\ccB70Lok.s:1317   .text.ip_reass:00000294 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\ccB70Lok.s:1324   .text.ip_frag_alloc_pbuf_custom_ref:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\ccB70Lok.s:1328   .text.ip_frag_alloc_pbuf_custom_ref:00000000 ip_frag_alloc_pbuf_custom_ref
C:\Users\KHUSHA~1\AppData\Local\Temp\ccB70Lok.s:1351   .text.ip_frag_free_pbuf_custom_ref:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\ccB70Lok.s:1355   .text.ip_frag_free_pbuf_custom_ref:00000000 ip_frag_free_pbuf_custom_ref
C:\Users\KHUSHA~1\AppData\Local\Temp\ccB70Lok.s:1386   .text.ipfrag_free_pbuf_custom:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\ccB70Lok.s:1390   .text.ipfrag_free_pbuf_custom:00000000 ipfrag_free_pbuf_custom
C:\Users\KHUSHA~1\AppData\Local\Temp\ccB70Lok.s:1434   .text.ip_frag:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\ccB70Lok.s:1439   .text.ip_frag:00000000 ip_frag
C:\Users\KHUSHA~1\AppData\Local\Temp\ccB70Lok.s:1769   .text.ip_frag:00000204 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
memcpy
icmp_time_exceeded
pbuf_clen
pbuf_free
memp_malloc
memset
lwip_stats
memp_free
lwip_ntohs
lwip_htons
inet_chksum
pbuf_header
pbuf_cat
pbuf_alloc
pbuf_alloced_custom
pbuf_ref
