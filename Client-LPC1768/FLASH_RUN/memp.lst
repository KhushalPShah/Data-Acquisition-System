   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"memp.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.bss.memp_tab,"aw",%nobits
  20              		.align	2
  23              	memp_tab:
  24 0000 00000000 		.space	40
  24      00000000 
  24      00000000 
  24      00000000 
  24      00000000 
  25              		.section	.rodata.memp_sizes,"a",%progbits
  26              		.align	2
  29              	memp_sizes:
  30 0000 1C00     		.short	28
  31 0002 2000     		.short	32
  32 0004 A400     		.short	164
  33 0006 2000     		.short	32
  34 0008 1000     		.short	16
  35 000a 2000     		.short	32
  36 000c 1800     		.short	24
  37 000e 1000     		.short	16
  38 0010 1000     		.short	16
  39 0012 5800     		.short	88
  40              		.section	.rodata.memp_num,"a",%progbits
  41              		.align	2
  44              	memp_num:
  45 0000 0400     		.short	4
  46 0002 0400     		.short	4
  47 0004 0500     		.short	5
  48 0006 0800     		.short	8
  49 0008 1000     		.short	16
  50 000a 0500     		.short	5
  51 000c 0F00     		.short	15
  52 000e 0600     		.short	6
  53 0010 1000     		.short	16
  54 0012 1000     		.short	16
  55              		.section	.bss.memp_memory,"aw",%nobits
  56              		.align	2
  59              	memp_memory:
  60 0000 00000000 		.space	3855
  60      00000000 
  60      00000000 
  60      00000000 
  60      00000000 
  61              		.section	.text.memp_init,"ax",%progbits
  62              		.align	2
  63              		.global	memp_init
  64              		.thumb
  65              		.thumb_func
  67              	memp_init:
  68              	.LFB17:
  69              		.file 1 "Libraries/lwip-1.4.0/core/memp.c"
   1:Libraries/lwip-1.4.0/core/memp.c **** /**
   2:Libraries/lwip-1.4.0/core/memp.c ****  * @file
   3:Libraries/lwip-1.4.0/core/memp.c ****  * Dynamic pool memory manager
   4:Libraries/lwip-1.4.0/core/memp.c ****  *
   5:Libraries/lwip-1.4.0/core/memp.c ****  * lwIP has dedicated pools for many structures (netconn, protocol control blocks,
   6:Libraries/lwip-1.4.0/core/memp.c ****  * packet buffers, ...). All these pools are managed here.
   7:Libraries/lwip-1.4.0/core/memp.c ****  */
   8:Libraries/lwip-1.4.0/core/memp.c **** 
   9:Libraries/lwip-1.4.0/core/memp.c **** /*
  10:Libraries/lwip-1.4.0/core/memp.c ****  * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
  11:Libraries/lwip-1.4.0/core/memp.c ****  * All rights reserved. 
  12:Libraries/lwip-1.4.0/core/memp.c ****  * 
  13:Libraries/lwip-1.4.0/core/memp.c ****  * Redistribution and use in source and binary forms, with or without modification, 
  14:Libraries/lwip-1.4.0/core/memp.c ****  * are permitted provided that the following conditions are met:
  15:Libraries/lwip-1.4.0/core/memp.c ****  *
  16:Libraries/lwip-1.4.0/core/memp.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  17:Libraries/lwip-1.4.0/core/memp.c ****  *    this list of conditions and the following disclaimer.
  18:Libraries/lwip-1.4.0/core/memp.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:Libraries/lwip-1.4.0/core/memp.c ****  *    this list of conditions and the following disclaimer in the documentation
  20:Libraries/lwip-1.4.0/core/memp.c ****  *    and/or other materials provided with the distribution.
  21:Libraries/lwip-1.4.0/core/memp.c ****  * 3. The name of the author may not be used to endorse or promote products
  22:Libraries/lwip-1.4.0/core/memp.c ****  *    derived from this software without specific prior written permission. 
  23:Libraries/lwip-1.4.0/core/memp.c ****  *
  24:Libraries/lwip-1.4.0/core/memp.c ****  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
  25:Libraries/lwip-1.4.0/core/memp.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  26:Libraries/lwip-1.4.0/core/memp.c ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
  27:Libraries/lwip-1.4.0/core/memp.c ****  * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
  28:Libraries/lwip-1.4.0/core/memp.c ****  * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
  29:Libraries/lwip-1.4.0/core/memp.c ****  * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
  30:Libraries/lwip-1.4.0/core/memp.c ****  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
  31:Libraries/lwip-1.4.0/core/memp.c ****  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
  32:Libraries/lwip-1.4.0/core/memp.c ****  * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
  33:Libraries/lwip-1.4.0/core/memp.c ****  * OF SUCH DAMAGE.
  34:Libraries/lwip-1.4.0/core/memp.c ****  *
  35:Libraries/lwip-1.4.0/core/memp.c ****  * This file is part of the lwIP TCP/IP stack.
  36:Libraries/lwip-1.4.0/core/memp.c ****  * 
  37:Libraries/lwip-1.4.0/core/memp.c ****  * Author: Adam Dunkels <adam@sics.se>
  38:Libraries/lwip-1.4.0/core/memp.c ****  *
  39:Libraries/lwip-1.4.0/core/memp.c ****  */
  40:Libraries/lwip-1.4.0/core/memp.c **** 
  41:Libraries/lwip-1.4.0/core/memp.c **** #include "lwip/opt.h"
  42:Libraries/lwip-1.4.0/core/memp.c **** 
  43:Libraries/lwip-1.4.0/core/memp.c **** #include "lwip/memp.h"
  44:Libraries/lwip-1.4.0/core/memp.c **** #include "lwip/pbuf.h"
  45:Libraries/lwip-1.4.0/core/memp.c **** #include "lwip/udp.h"
  46:Libraries/lwip-1.4.0/core/memp.c **** #include "lwip/raw.h"
  47:Libraries/lwip-1.4.0/core/memp.c **** #include "lwip/tcp_impl.h"
  48:Libraries/lwip-1.4.0/core/memp.c **** #include "lwip/igmp.h"
  49:Libraries/lwip-1.4.0/core/memp.c **** #include "lwip/api.h"
  50:Libraries/lwip-1.4.0/core/memp.c **** #include "lwip/api_msg.h"
  51:Libraries/lwip-1.4.0/core/memp.c **** #include "lwip/tcpip.h"
  52:Libraries/lwip-1.4.0/core/memp.c **** #include "lwip/sys.h"
  53:Libraries/lwip-1.4.0/core/memp.c **** #include "lwip/timers.h"
  54:Libraries/lwip-1.4.0/core/memp.c **** #include "lwip/stats.h"
  55:Libraries/lwip-1.4.0/core/memp.c **** #include "netif/etharp.h"
  56:Libraries/lwip-1.4.0/core/memp.c **** #include "lwip/ip_frag.h"
  57:Libraries/lwip-1.4.0/core/memp.c **** #include "lwip/snmp_structs.h"
  58:Libraries/lwip-1.4.0/core/memp.c **** #include "lwip/snmp_msg.h"
  59:Libraries/lwip-1.4.0/core/memp.c **** #include "lwip/dns.h"
  60:Libraries/lwip-1.4.0/core/memp.c **** #include "netif/ppp_oe.h"
  61:Libraries/lwip-1.4.0/core/memp.c **** 
  62:Libraries/lwip-1.4.0/core/memp.c **** #include <string.h>
  63:Libraries/lwip-1.4.0/core/memp.c **** 
  64:Libraries/lwip-1.4.0/core/memp.c **** #if !MEMP_MEM_MALLOC /* don't build if not configured for use in lwipopts.h */
  65:Libraries/lwip-1.4.0/core/memp.c **** 
  66:Libraries/lwip-1.4.0/core/memp.c **** struct memp {
  67:Libraries/lwip-1.4.0/core/memp.c ****   struct memp *next;
  68:Libraries/lwip-1.4.0/core/memp.c **** #if MEMP_OVERFLOW_CHECK
  69:Libraries/lwip-1.4.0/core/memp.c ****   const char *file;
  70:Libraries/lwip-1.4.0/core/memp.c ****   int line;
  71:Libraries/lwip-1.4.0/core/memp.c **** #endif /* MEMP_OVERFLOW_CHECK */
  72:Libraries/lwip-1.4.0/core/memp.c **** };
  73:Libraries/lwip-1.4.0/core/memp.c **** 
  74:Libraries/lwip-1.4.0/core/memp.c **** #if MEMP_OVERFLOW_CHECK
  75:Libraries/lwip-1.4.0/core/memp.c **** /* if MEMP_OVERFLOW_CHECK is turned on, we reserve some bytes at the beginning
  76:Libraries/lwip-1.4.0/core/memp.c ****  * and at the end of each element, initialize them as 0xcd and check
  77:Libraries/lwip-1.4.0/core/memp.c ****  * them later. */
  78:Libraries/lwip-1.4.0/core/memp.c **** /* If MEMP_OVERFLOW_CHECK is >= 2, on every call to memp_malloc or memp_free,
  79:Libraries/lwip-1.4.0/core/memp.c ****  * every single element in each pool is checked!
  80:Libraries/lwip-1.4.0/core/memp.c ****  * This is VERY SLOW but also very helpful. */
  81:Libraries/lwip-1.4.0/core/memp.c **** /* MEMP_SANITY_REGION_BEFORE and MEMP_SANITY_REGION_AFTER can be overridden in
  82:Libraries/lwip-1.4.0/core/memp.c ****  * lwipopts.h to change the amount reserved for checking. */
  83:Libraries/lwip-1.4.0/core/memp.c **** #ifndef MEMP_SANITY_REGION_BEFORE
  84:Libraries/lwip-1.4.0/core/memp.c **** #define MEMP_SANITY_REGION_BEFORE  16
  85:Libraries/lwip-1.4.0/core/memp.c **** #endif /* MEMP_SANITY_REGION_BEFORE*/
  86:Libraries/lwip-1.4.0/core/memp.c **** #if MEMP_SANITY_REGION_BEFORE > 0
  87:Libraries/lwip-1.4.0/core/memp.c **** #define MEMP_SANITY_REGION_BEFORE_ALIGNED    LWIP_MEM_ALIGN_SIZE(MEMP_SANITY_REGION_BEFORE)
  88:Libraries/lwip-1.4.0/core/memp.c **** #else
  89:Libraries/lwip-1.4.0/core/memp.c **** #define MEMP_SANITY_REGION_BEFORE_ALIGNED    0
  90:Libraries/lwip-1.4.0/core/memp.c **** #endif /* MEMP_SANITY_REGION_BEFORE*/
  91:Libraries/lwip-1.4.0/core/memp.c **** #ifndef MEMP_SANITY_REGION_AFTER
  92:Libraries/lwip-1.4.0/core/memp.c **** #define MEMP_SANITY_REGION_AFTER   16
  93:Libraries/lwip-1.4.0/core/memp.c **** #endif /* MEMP_SANITY_REGION_AFTER*/
  94:Libraries/lwip-1.4.0/core/memp.c **** #if MEMP_SANITY_REGION_AFTER > 0
  95:Libraries/lwip-1.4.0/core/memp.c **** #define MEMP_SANITY_REGION_AFTER_ALIGNED     LWIP_MEM_ALIGN_SIZE(MEMP_SANITY_REGION_AFTER)
  96:Libraries/lwip-1.4.0/core/memp.c **** #else
  97:Libraries/lwip-1.4.0/core/memp.c **** #define MEMP_SANITY_REGION_AFTER_ALIGNED     0
  98:Libraries/lwip-1.4.0/core/memp.c **** #endif /* MEMP_SANITY_REGION_AFTER*/
  99:Libraries/lwip-1.4.0/core/memp.c **** 
 100:Libraries/lwip-1.4.0/core/memp.c **** /* MEMP_SIZE: save space for struct memp and for sanity check */
 101:Libraries/lwip-1.4.0/core/memp.c **** #define MEMP_SIZE          (LWIP_MEM_ALIGN_SIZE(sizeof(struct memp)) + MEMP_SANITY_REGION_BEFORE_AL
 102:Libraries/lwip-1.4.0/core/memp.c **** #define MEMP_ALIGN_SIZE(x) (LWIP_MEM_ALIGN_SIZE(x) + MEMP_SANITY_REGION_AFTER_ALIGNED)
 103:Libraries/lwip-1.4.0/core/memp.c **** 
 104:Libraries/lwip-1.4.0/core/memp.c **** #else /* MEMP_OVERFLOW_CHECK */
 105:Libraries/lwip-1.4.0/core/memp.c **** 
 106:Libraries/lwip-1.4.0/core/memp.c **** /* No sanity checks
 107:Libraries/lwip-1.4.0/core/memp.c ****  * We don't need to preserve the struct memp while not allocated, so we
 108:Libraries/lwip-1.4.0/core/memp.c ****  * can save a little space and set MEMP_SIZE to 0.
 109:Libraries/lwip-1.4.0/core/memp.c ****  */
 110:Libraries/lwip-1.4.0/core/memp.c **** #define MEMP_SIZE           0
 111:Libraries/lwip-1.4.0/core/memp.c **** #define MEMP_ALIGN_SIZE(x) (LWIP_MEM_ALIGN_SIZE(x))
 112:Libraries/lwip-1.4.0/core/memp.c **** 
 113:Libraries/lwip-1.4.0/core/memp.c **** #endif /* MEMP_OVERFLOW_CHECK */
 114:Libraries/lwip-1.4.0/core/memp.c **** 
 115:Libraries/lwip-1.4.0/core/memp.c **** /** This array holds the first free element of each pool.
 116:Libraries/lwip-1.4.0/core/memp.c ****  *  Elements form a linked list. */
 117:Libraries/lwip-1.4.0/core/memp.c **** static struct memp *memp_tab[MEMP_MAX];
 118:Libraries/lwip-1.4.0/core/memp.c **** 
 119:Libraries/lwip-1.4.0/core/memp.c **** #else /* MEMP_MEM_MALLOC */
 120:Libraries/lwip-1.4.0/core/memp.c **** 
 121:Libraries/lwip-1.4.0/core/memp.c **** #define MEMP_ALIGN_SIZE(x) (LWIP_MEM_ALIGN_SIZE(x))
 122:Libraries/lwip-1.4.0/core/memp.c **** 
 123:Libraries/lwip-1.4.0/core/memp.c **** #endif /* MEMP_MEM_MALLOC */
 124:Libraries/lwip-1.4.0/core/memp.c **** 
 125:Libraries/lwip-1.4.0/core/memp.c **** /** This array holds the element sizes of each pool. */
 126:Libraries/lwip-1.4.0/core/memp.c **** #if !MEM_USE_POOLS && !MEMP_MEM_MALLOC
 127:Libraries/lwip-1.4.0/core/memp.c **** static
 128:Libraries/lwip-1.4.0/core/memp.c **** #endif
 129:Libraries/lwip-1.4.0/core/memp.c **** const u16_t memp_sizes[MEMP_MAX] = {
 130:Libraries/lwip-1.4.0/core/memp.c **** #define LWIP_MEMPOOL(name,num,size,desc)  LWIP_MEM_ALIGN_SIZE(size),
 131:Libraries/lwip-1.4.0/core/memp.c **** #include "lwip/memp_std.h"
 132:Libraries/lwip-1.4.0/core/memp.c **** };
 133:Libraries/lwip-1.4.0/core/memp.c **** 
 134:Libraries/lwip-1.4.0/core/memp.c **** #if !MEMP_MEM_MALLOC /* don't build if not configured for use in lwipopts.h */
 135:Libraries/lwip-1.4.0/core/memp.c **** 
 136:Libraries/lwip-1.4.0/core/memp.c **** /** This array holds the number of elements in each pool. */
 137:Libraries/lwip-1.4.0/core/memp.c **** static const u16_t memp_num[MEMP_MAX] = {
 138:Libraries/lwip-1.4.0/core/memp.c **** #define LWIP_MEMPOOL(name,num,size,desc)  (num),
 139:Libraries/lwip-1.4.0/core/memp.c **** #include "lwip/memp_std.h"
 140:Libraries/lwip-1.4.0/core/memp.c **** };
 141:Libraries/lwip-1.4.0/core/memp.c **** 
 142:Libraries/lwip-1.4.0/core/memp.c **** /** This array holds a textual description of each pool. */
 143:Libraries/lwip-1.4.0/core/memp.c **** #ifdef LWIP_DEBUG
 144:Libraries/lwip-1.4.0/core/memp.c **** static const char *memp_desc[MEMP_MAX] = {
 145:Libraries/lwip-1.4.0/core/memp.c **** #define LWIP_MEMPOOL(name,num,size,desc)  (desc),
 146:Libraries/lwip-1.4.0/core/memp.c **** #include "lwip/memp_std.h"
 147:Libraries/lwip-1.4.0/core/memp.c **** };
 148:Libraries/lwip-1.4.0/core/memp.c **** #endif /* LWIP_DEBUG */
 149:Libraries/lwip-1.4.0/core/memp.c **** 
 150:Libraries/lwip-1.4.0/core/memp.c **** #if MEMP_SEPARATE_POOLS
 151:Libraries/lwip-1.4.0/core/memp.c **** 
 152:Libraries/lwip-1.4.0/core/memp.c **** /** This creates each memory pool. These are named memp_memory_XXX_base (where
 153:Libraries/lwip-1.4.0/core/memp.c ****  * XXX is the name of the pool defined in memp_std.h).
 154:Libraries/lwip-1.4.0/core/memp.c ****  * To relocate a pool, declare it as extern in cc.h. Example for GCC:
 155:Libraries/lwip-1.4.0/core/memp.c ****  *   extern u8_t __attribute__((section(".onchip_mem"))) memp_memory_UDP_PCB_base[];
 156:Libraries/lwip-1.4.0/core/memp.c ****  */
 157:Libraries/lwip-1.4.0/core/memp.c **** #define LWIP_MEMPOOL(name,num,size,desc) u8_t memp_memory_ ## name ## _base \
 158:Libraries/lwip-1.4.0/core/memp.c ****   [((num) * (MEMP_SIZE + MEMP_ALIGN_SIZE(size)))];   
 159:Libraries/lwip-1.4.0/core/memp.c **** #include "lwip/memp_std.h"
 160:Libraries/lwip-1.4.0/core/memp.c **** 
 161:Libraries/lwip-1.4.0/core/memp.c **** /** This array holds the base of each memory pool. */
 162:Libraries/lwip-1.4.0/core/memp.c **** static u8_t *const memp_bases[] = { 
 163:Libraries/lwip-1.4.0/core/memp.c **** #define LWIP_MEMPOOL(name,num,size,desc) memp_memory_ ## name ## _base,   
 164:Libraries/lwip-1.4.0/core/memp.c **** #include "lwip/memp_std.h"
 165:Libraries/lwip-1.4.0/core/memp.c **** };
 166:Libraries/lwip-1.4.0/core/memp.c **** 
 167:Libraries/lwip-1.4.0/core/memp.c **** #else /* MEMP_SEPARATE_POOLS */
 168:Libraries/lwip-1.4.0/core/memp.c **** 
 169:Libraries/lwip-1.4.0/core/memp.c **** /** This is the actual memory used by the pools (all pools in one big block). */
 170:Libraries/lwip-1.4.0/core/memp.c **** static u8_t memp_memory[MEM_ALIGNMENT - 1 
 171:Libraries/lwip-1.4.0/core/memp.c **** #define LWIP_MEMPOOL(name,num,size,desc) + ( (num) * (MEMP_SIZE + MEMP_ALIGN_SIZE(size) ) )
 172:Libraries/lwip-1.4.0/core/memp.c **** #include "lwip/memp_std.h"
 173:Libraries/lwip-1.4.0/core/memp.c **** ];
 174:Libraries/lwip-1.4.0/core/memp.c **** 
 175:Libraries/lwip-1.4.0/core/memp.c **** #endif /* MEMP_SEPARATE_POOLS */
 176:Libraries/lwip-1.4.0/core/memp.c **** 
 177:Libraries/lwip-1.4.0/core/memp.c **** #if MEMP_SANITY_CHECK
 178:Libraries/lwip-1.4.0/core/memp.c **** /**
 179:Libraries/lwip-1.4.0/core/memp.c ****  * Check that memp-lists don't form a circle
 180:Libraries/lwip-1.4.0/core/memp.c ****  */
 181:Libraries/lwip-1.4.0/core/memp.c **** static int
 182:Libraries/lwip-1.4.0/core/memp.c **** memp_sanity(void)
 183:Libraries/lwip-1.4.0/core/memp.c **** {
 184:Libraries/lwip-1.4.0/core/memp.c ****   s16_t i, c;
 185:Libraries/lwip-1.4.0/core/memp.c ****   struct memp *m, *n;
 186:Libraries/lwip-1.4.0/core/memp.c **** 
 187:Libraries/lwip-1.4.0/core/memp.c ****   for (i = 0; i < MEMP_MAX; i++) {
 188:Libraries/lwip-1.4.0/core/memp.c ****     for (m = memp_tab[i]; m != NULL; m = m->next) {
 189:Libraries/lwip-1.4.0/core/memp.c ****       c = 1;
 190:Libraries/lwip-1.4.0/core/memp.c ****       for (n = memp_tab[i]; n != NULL; n = n->next) {
 191:Libraries/lwip-1.4.0/core/memp.c ****         if (n == m && --c < 0) {
 192:Libraries/lwip-1.4.0/core/memp.c ****           return 0;
 193:Libraries/lwip-1.4.0/core/memp.c ****         }
 194:Libraries/lwip-1.4.0/core/memp.c ****       }
 195:Libraries/lwip-1.4.0/core/memp.c ****     }
 196:Libraries/lwip-1.4.0/core/memp.c ****   }
 197:Libraries/lwip-1.4.0/core/memp.c ****   return 1;
 198:Libraries/lwip-1.4.0/core/memp.c **** }
 199:Libraries/lwip-1.4.0/core/memp.c **** #endif /* MEMP_SANITY_CHECK*/
 200:Libraries/lwip-1.4.0/core/memp.c **** #if MEMP_OVERFLOW_CHECK
 201:Libraries/lwip-1.4.0/core/memp.c **** #if defined(LWIP_DEBUG) && MEMP_STATS
 202:Libraries/lwip-1.4.0/core/memp.c **** static const char * memp_overflow_names[] = {
 203:Libraries/lwip-1.4.0/core/memp.c **** #define LWIP_MEMPOOL(name,num,size,desc) "/"desc,
 204:Libraries/lwip-1.4.0/core/memp.c **** #include "lwip/memp_std.h"
 205:Libraries/lwip-1.4.0/core/memp.c ****   };
 206:Libraries/lwip-1.4.0/core/memp.c **** #endif
 207:Libraries/lwip-1.4.0/core/memp.c **** 
 208:Libraries/lwip-1.4.0/core/memp.c **** /**
 209:Libraries/lwip-1.4.0/core/memp.c ****  * Check if a memp element was victim of an overflow
 210:Libraries/lwip-1.4.0/core/memp.c ****  * (e.g. the restricted area after it has been altered)
 211:Libraries/lwip-1.4.0/core/memp.c ****  *
 212:Libraries/lwip-1.4.0/core/memp.c ****  * @param p the memp element to check
 213:Libraries/lwip-1.4.0/core/memp.c ****  * @param memp_type the pool p comes from
 214:Libraries/lwip-1.4.0/core/memp.c ****  */
 215:Libraries/lwip-1.4.0/core/memp.c **** static void
 216:Libraries/lwip-1.4.0/core/memp.c **** memp_overflow_check_element_overflow(struct memp *p, u16_t memp_type)
 217:Libraries/lwip-1.4.0/core/memp.c **** {
 218:Libraries/lwip-1.4.0/core/memp.c ****   u16_t k;
 219:Libraries/lwip-1.4.0/core/memp.c ****   u8_t *m;
 220:Libraries/lwip-1.4.0/core/memp.c **** #if MEMP_SANITY_REGION_AFTER_ALIGNED > 0
 221:Libraries/lwip-1.4.0/core/memp.c ****   m = (u8_t*)p + MEMP_SIZE + memp_sizes[memp_type];
 222:Libraries/lwip-1.4.0/core/memp.c ****   for (k = 0; k < MEMP_SANITY_REGION_AFTER_ALIGNED; k++) {
 223:Libraries/lwip-1.4.0/core/memp.c ****     if (m[k] != 0xcd) {
 224:Libraries/lwip-1.4.0/core/memp.c ****       char errstr[128] = "detected memp overflow in pool ";
 225:Libraries/lwip-1.4.0/core/memp.c ****       char digit[] = "0";
 226:Libraries/lwip-1.4.0/core/memp.c ****       if(memp_type >= 10) {
 227:Libraries/lwip-1.4.0/core/memp.c ****         digit[0] = '0' + (memp_type/10);
 228:Libraries/lwip-1.4.0/core/memp.c ****         strcat(errstr, digit);
 229:Libraries/lwip-1.4.0/core/memp.c ****       }
 230:Libraries/lwip-1.4.0/core/memp.c ****       digit[0] = '0' + (memp_type%10);
 231:Libraries/lwip-1.4.0/core/memp.c ****       strcat(errstr, digit);
 232:Libraries/lwip-1.4.0/core/memp.c **** #if defined(LWIP_DEBUG) && MEMP_STATS
 233:Libraries/lwip-1.4.0/core/memp.c ****       strcat(errstr, memp_overflow_names[memp_type]);
 234:Libraries/lwip-1.4.0/core/memp.c **** #endif
 235:Libraries/lwip-1.4.0/core/memp.c ****       LWIP_ASSERT(errstr, 0);
 236:Libraries/lwip-1.4.0/core/memp.c ****     }
 237:Libraries/lwip-1.4.0/core/memp.c ****   }
 238:Libraries/lwip-1.4.0/core/memp.c **** #endif
 239:Libraries/lwip-1.4.0/core/memp.c **** }
 240:Libraries/lwip-1.4.0/core/memp.c **** 
 241:Libraries/lwip-1.4.0/core/memp.c **** /**
 242:Libraries/lwip-1.4.0/core/memp.c ****  * Check if a memp element was victim of an underflow
 243:Libraries/lwip-1.4.0/core/memp.c ****  * (e.g. the restricted area before it has been altered)
 244:Libraries/lwip-1.4.0/core/memp.c ****  *
 245:Libraries/lwip-1.4.0/core/memp.c ****  * @param p the memp element to check
 246:Libraries/lwip-1.4.0/core/memp.c ****  * @param memp_type the pool p comes from
 247:Libraries/lwip-1.4.0/core/memp.c ****  */
 248:Libraries/lwip-1.4.0/core/memp.c **** static void
 249:Libraries/lwip-1.4.0/core/memp.c **** memp_overflow_check_element_underflow(struct memp *p, u16_t memp_type)
 250:Libraries/lwip-1.4.0/core/memp.c **** {
 251:Libraries/lwip-1.4.0/core/memp.c ****   u16_t k;
 252:Libraries/lwip-1.4.0/core/memp.c ****   u8_t *m;
 253:Libraries/lwip-1.4.0/core/memp.c **** #if MEMP_SANITY_REGION_BEFORE_ALIGNED > 0
 254:Libraries/lwip-1.4.0/core/memp.c ****   m = (u8_t*)p + MEMP_SIZE - MEMP_SANITY_REGION_BEFORE_ALIGNED;
 255:Libraries/lwip-1.4.0/core/memp.c ****   for (k = 0; k < MEMP_SANITY_REGION_BEFORE_ALIGNED; k++) {
 256:Libraries/lwip-1.4.0/core/memp.c ****     if (m[k] != 0xcd) {
 257:Libraries/lwip-1.4.0/core/memp.c ****       char errstr[128] = "detected memp underflow in pool ";
 258:Libraries/lwip-1.4.0/core/memp.c ****       char digit[] = "0";
 259:Libraries/lwip-1.4.0/core/memp.c ****       if(memp_type >= 10) {
 260:Libraries/lwip-1.4.0/core/memp.c ****         digit[0] = '0' + (memp_type/10);
 261:Libraries/lwip-1.4.0/core/memp.c ****         strcat(errstr, digit);
 262:Libraries/lwip-1.4.0/core/memp.c ****       }
 263:Libraries/lwip-1.4.0/core/memp.c ****       digit[0] = '0' + (memp_type%10);
 264:Libraries/lwip-1.4.0/core/memp.c ****       strcat(errstr, digit);
 265:Libraries/lwip-1.4.0/core/memp.c **** #if defined(LWIP_DEBUG) && MEMP_STATS
 266:Libraries/lwip-1.4.0/core/memp.c ****       strcat(errstr, memp_overflow_names[memp_type]);
 267:Libraries/lwip-1.4.0/core/memp.c **** #endif
 268:Libraries/lwip-1.4.0/core/memp.c ****       LWIP_ASSERT(errstr, 0);
 269:Libraries/lwip-1.4.0/core/memp.c ****     }
 270:Libraries/lwip-1.4.0/core/memp.c ****   }
 271:Libraries/lwip-1.4.0/core/memp.c **** #endif
 272:Libraries/lwip-1.4.0/core/memp.c **** }
 273:Libraries/lwip-1.4.0/core/memp.c **** 
 274:Libraries/lwip-1.4.0/core/memp.c **** /**
 275:Libraries/lwip-1.4.0/core/memp.c ****  * Do an overflow check for all elements in every pool.
 276:Libraries/lwip-1.4.0/core/memp.c ****  *
 277:Libraries/lwip-1.4.0/core/memp.c ****  * @see memp_overflow_check_element for a description of the check
 278:Libraries/lwip-1.4.0/core/memp.c ****  */
 279:Libraries/lwip-1.4.0/core/memp.c **** static void
 280:Libraries/lwip-1.4.0/core/memp.c **** memp_overflow_check_all(void)
 281:Libraries/lwip-1.4.0/core/memp.c **** {
 282:Libraries/lwip-1.4.0/core/memp.c ****   u16_t i, j;
 283:Libraries/lwip-1.4.0/core/memp.c ****   struct memp *p;
 284:Libraries/lwip-1.4.0/core/memp.c **** 
 285:Libraries/lwip-1.4.0/core/memp.c ****   p = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
 286:Libraries/lwip-1.4.0/core/memp.c ****   for (i = 0; i < MEMP_MAX; ++i) {
 287:Libraries/lwip-1.4.0/core/memp.c ****     p = p;
 288:Libraries/lwip-1.4.0/core/memp.c ****     for (j = 0; j < memp_num[i]; ++j) {
 289:Libraries/lwip-1.4.0/core/memp.c ****       memp_overflow_check_element_overflow(p, i);
 290:Libraries/lwip-1.4.0/core/memp.c ****       p = (struct memp*)((u8_t*)p + MEMP_SIZE + memp_sizes[i] + MEMP_SANITY_REGION_AFTER_ALIGNED);
 291:Libraries/lwip-1.4.0/core/memp.c ****     }
 292:Libraries/lwip-1.4.0/core/memp.c ****   }
 293:Libraries/lwip-1.4.0/core/memp.c ****   p = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
 294:Libraries/lwip-1.4.0/core/memp.c ****   for (i = 0; i < MEMP_MAX; ++i) {
 295:Libraries/lwip-1.4.0/core/memp.c ****     p = p;
 296:Libraries/lwip-1.4.0/core/memp.c ****     for (j = 0; j < memp_num[i]; ++j) {
 297:Libraries/lwip-1.4.0/core/memp.c ****       memp_overflow_check_element_underflow(p, i);
 298:Libraries/lwip-1.4.0/core/memp.c ****       p = (struct memp*)((u8_t*)p + MEMP_SIZE + memp_sizes[i] + MEMP_SANITY_REGION_AFTER_ALIGNED);
 299:Libraries/lwip-1.4.0/core/memp.c ****     }
 300:Libraries/lwip-1.4.0/core/memp.c ****   }
 301:Libraries/lwip-1.4.0/core/memp.c **** }
 302:Libraries/lwip-1.4.0/core/memp.c **** 
 303:Libraries/lwip-1.4.0/core/memp.c **** /**
 304:Libraries/lwip-1.4.0/core/memp.c ****  * Initialize the restricted areas of all memp elements in every pool.
 305:Libraries/lwip-1.4.0/core/memp.c ****  */
 306:Libraries/lwip-1.4.0/core/memp.c **** static void
 307:Libraries/lwip-1.4.0/core/memp.c **** memp_overflow_init(void)
 308:Libraries/lwip-1.4.0/core/memp.c **** {
 309:Libraries/lwip-1.4.0/core/memp.c ****   u16_t i, j;
 310:Libraries/lwip-1.4.0/core/memp.c ****   struct memp *p;
 311:Libraries/lwip-1.4.0/core/memp.c ****   u8_t *m;
 312:Libraries/lwip-1.4.0/core/memp.c **** 
 313:Libraries/lwip-1.4.0/core/memp.c ****   p = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
 314:Libraries/lwip-1.4.0/core/memp.c ****   for (i = 0; i < MEMP_MAX; ++i) {
 315:Libraries/lwip-1.4.0/core/memp.c ****     p = p;
 316:Libraries/lwip-1.4.0/core/memp.c ****     for (j = 0; j < memp_num[i]; ++j) {
 317:Libraries/lwip-1.4.0/core/memp.c **** #if MEMP_SANITY_REGION_BEFORE_ALIGNED > 0
 318:Libraries/lwip-1.4.0/core/memp.c ****       m = (u8_t*)p + MEMP_SIZE - MEMP_SANITY_REGION_BEFORE_ALIGNED;
 319:Libraries/lwip-1.4.0/core/memp.c ****       memset(m, 0xcd, MEMP_SANITY_REGION_BEFORE_ALIGNED);
 320:Libraries/lwip-1.4.0/core/memp.c **** #endif
 321:Libraries/lwip-1.4.0/core/memp.c **** #if MEMP_SANITY_REGION_AFTER_ALIGNED > 0
 322:Libraries/lwip-1.4.0/core/memp.c ****       m = (u8_t*)p + MEMP_SIZE + memp_sizes[i];
 323:Libraries/lwip-1.4.0/core/memp.c ****       memset(m, 0xcd, MEMP_SANITY_REGION_AFTER_ALIGNED);
 324:Libraries/lwip-1.4.0/core/memp.c **** #endif
 325:Libraries/lwip-1.4.0/core/memp.c ****       p = (struct memp*)((u8_t*)p + MEMP_SIZE + memp_sizes[i] + MEMP_SANITY_REGION_AFTER_ALIGNED);
 326:Libraries/lwip-1.4.0/core/memp.c ****     }
 327:Libraries/lwip-1.4.0/core/memp.c ****   }
 328:Libraries/lwip-1.4.0/core/memp.c **** }
 329:Libraries/lwip-1.4.0/core/memp.c **** #endif /* MEMP_OVERFLOW_CHECK */
 330:Libraries/lwip-1.4.0/core/memp.c **** 
 331:Libraries/lwip-1.4.0/core/memp.c **** /**
 332:Libraries/lwip-1.4.0/core/memp.c ****  * Initialize this module.
 333:Libraries/lwip-1.4.0/core/memp.c ****  * 
 334:Libraries/lwip-1.4.0/core/memp.c ****  * Carves out memp_memory into linked lists for each pool-type.
 335:Libraries/lwip-1.4.0/core/memp.c ****  */
 336:Libraries/lwip-1.4.0/core/memp.c **** void
 337:Libraries/lwip-1.4.0/core/memp.c **** memp_init(void)
 338:Libraries/lwip-1.4.0/core/memp.c **** {
  70              		.loc 1 338 0
  71              		.cfi_startproc
  72              		@ args = 0, pretend = 0, frame = 8
  73              		@ frame_needed = 1, uses_anonymous_args = 0
  74              		@ link register save eliminated.
  75 0000 80B4     		push	{r7}
  76              		.cfi_def_cfa_offset 4
  77              		.cfi_offset 7, -4
  78 0002 83B0     		sub	sp, sp, #12
  79              		.cfi_def_cfa_offset 16
  80 0004 00AF     		add	r7, sp, #0
  81              		.cfi_def_cfa_register 7
 339:Libraries/lwip-1.4.0/core/memp.c ****   struct memp *memp;
 340:Libraries/lwip-1.4.0/core/memp.c ****   u16_t i, j;
 341:Libraries/lwip-1.4.0/core/memp.c **** 
 342:Libraries/lwip-1.4.0/core/memp.c ****   for (i = 0; i < MEMP_MAX; ++i) {
  82              		.loc 1 342 0
  83 0006 0023     		movs	r3, #0
  84 0008 7B80     		strh	r3, [r7, #2]	@ movhi
  85 000a 2EE0     		b	.L2
  86              	.L3:
 343:Libraries/lwip-1.4.0/core/memp.c ****     MEMP_STATS_AVAIL(used, i, 0);
  87              		.loc 1 343 0 discriminator 3
  88 000c 7A88     		ldrh	r2, [r7, #2]
  89 000e 3449     		ldr	r1, .L8
  90 0010 1346     		mov	r3, r2
  91 0012 9B00     		lsls	r3, r3, #2
  92 0014 1344     		add	r3, r3, r2
  93 0016 5B00     		lsls	r3, r3, #1
  94 0018 0B44     		add	r3, r3, r1
  95 001a B433     		adds	r3, r3, #180
  96 001c 0022     		movs	r2, #0
  97 001e 1A80     		strh	r2, [r3]	@ movhi
 344:Libraries/lwip-1.4.0/core/memp.c ****     MEMP_STATS_AVAIL(max, i, 0);
  98              		.loc 1 344 0 discriminator 3
  99 0020 7A88     		ldrh	r2, [r7, #2]
 100 0022 2F49     		ldr	r1, .L8
 101 0024 1346     		mov	r3, r2
 102 0026 9B00     		lsls	r3, r3, #2
 103 0028 1344     		add	r3, r3, r2
 104 002a 5B00     		lsls	r3, r3, #1
 105 002c 0B44     		add	r3, r3, r1
 106 002e B633     		adds	r3, r3, #182
 107 0030 0022     		movs	r2, #0
 108 0032 1A80     		strh	r2, [r3]	@ movhi
 345:Libraries/lwip-1.4.0/core/memp.c ****     MEMP_STATS_AVAIL(err, i, 0);
 109              		.loc 1 345 0 discriminator 3
 110 0034 7A88     		ldrh	r2, [r7, #2]
 111 0036 2A49     		ldr	r1, .L8
 112 0038 1346     		mov	r3, r2
 113 003a 9B00     		lsls	r3, r3, #2
 114 003c 1344     		add	r3, r3, r2
 115 003e 5B00     		lsls	r3, r3, #1
 116 0040 0B44     		add	r3, r3, r1
 117 0042 B833     		adds	r3, r3, #184
 118 0044 0022     		movs	r2, #0
 119 0046 1A80     		strh	r2, [r3]	@ movhi
 346:Libraries/lwip-1.4.0/core/memp.c ****     MEMP_STATS_AVAIL(avail, i, memp_num[i]);
 120              		.loc 1 346 0 discriminator 3
 121 0048 7A88     		ldrh	r2, [r7, #2]
 122 004a 7B88     		ldrh	r3, [r7, #2]
 123 004c 2549     		ldr	r1, .L8+4
 124 004e 31F81300 		ldrh	r0, [r1, r3, lsl #1]
 125 0052 2349     		ldr	r1, .L8
 126 0054 1346     		mov	r3, r2
 127 0056 9B00     		lsls	r3, r3, #2
 128 0058 1344     		add	r3, r3, r2
 129 005a 5B00     		lsls	r3, r3, #1
 130 005c 0B44     		add	r3, r3, r1
 131 005e B233     		adds	r3, r3, #178
 132 0060 0246     		mov	r2, r0	@ movhi
 133 0062 1A80     		strh	r2, [r3]	@ movhi
 342:Libraries/lwip-1.4.0/core/memp.c ****     MEMP_STATS_AVAIL(used, i, 0);
 134              		.loc 1 342 0 discriminator 3
 135 0064 7B88     		ldrh	r3, [r7, #2]	@ movhi
 136 0066 0133     		adds	r3, r3, #1
 137 0068 7B80     		strh	r3, [r7, #2]	@ movhi
 138              	.L2:
 342:Libraries/lwip-1.4.0/core/memp.c ****     MEMP_STATS_AVAIL(used, i, 0);
 139              		.loc 1 342 0 is_stmt 0 discriminator 1
 140 006a 7B88     		ldrh	r3, [r7, #2]
 141 006c 092B     		cmp	r3, #9
 142 006e CDD9     		bls	.L3
 347:Libraries/lwip-1.4.0/core/memp.c ****   }
 348:Libraries/lwip-1.4.0/core/memp.c **** 
 349:Libraries/lwip-1.4.0/core/memp.c **** #if !MEMP_SEPARATE_POOLS
 350:Libraries/lwip-1.4.0/core/memp.c ****   memp = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
 143              		.loc 1 350 0 is_stmt 1
 144 0070 1D4B     		ldr	r3, .L8+8
 145 0072 0333     		adds	r3, r3, #3
 146 0074 23F00303 		bic	r3, r3, #3
 147 0078 7B60     		str	r3, [r7, #4]
 351:Libraries/lwip-1.4.0/core/memp.c **** #endif /* !MEMP_SEPARATE_POOLS */
 352:Libraries/lwip-1.4.0/core/memp.c ****   /* for every pool: */
 353:Libraries/lwip-1.4.0/core/memp.c ****   for (i = 0; i < MEMP_MAX; ++i) {
 148              		.loc 1 353 0
 149 007a 0023     		movs	r3, #0
 150 007c 7B80     		strh	r3, [r7, #2]	@ movhi
 151 007e 27E0     		b	.L4
 152              	.L7:
 354:Libraries/lwip-1.4.0/core/memp.c ****     memp_tab[i] = NULL;
 153              		.loc 1 354 0
 154 0080 7B88     		ldrh	r3, [r7, #2]
 155 0082 1A4A     		ldr	r2, .L8+12
 156 0084 0021     		movs	r1, #0
 157 0086 42F82310 		str	r1, [r2, r3, lsl #2]
 355:Libraries/lwip-1.4.0/core/memp.c **** #if MEMP_SEPARATE_POOLS
 356:Libraries/lwip-1.4.0/core/memp.c ****     memp = (struct memp*)memp_bases[i];
 357:Libraries/lwip-1.4.0/core/memp.c **** #endif /* MEMP_SEPARATE_POOLS */
 358:Libraries/lwip-1.4.0/core/memp.c ****     /* create a linked list of memp elements */
 359:Libraries/lwip-1.4.0/core/memp.c ****     for (j = 0; j < memp_num[i]; ++j) {
 158              		.loc 1 359 0
 159 008a 0023     		movs	r3, #0
 160 008c 3B80     		strh	r3, [r7]	@ movhi
 161 008e 15E0     		b	.L5
 162              	.L6:
 360:Libraries/lwip-1.4.0/core/memp.c ****       memp->next = memp_tab[i];
 163              		.loc 1 360 0 discriminator 3
 164 0090 7B88     		ldrh	r3, [r7, #2]
 165 0092 164A     		ldr	r2, .L8+12
 166 0094 52F82320 		ldr	r2, [r2, r3, lsl #2]
 167 0098 7B68     		ldr	r3, [r7, #4]
 168 009a 1A60     		str	r2, [r3]
 361:Libraries/lwip-1.4.0/core/memp.c ****       memp_tab[i] = memp;
 169              		.loc 1 361 0 discriminator 3
 170 009c 7B88     		ldrh	r3, [r7, #2]
 171 009e 1349     		ldr	r1, .L8+12
 172 00a0 7A68     		ldr	r2, [r7, #4]
 173 00a2 41F82320 		str	r2, [r1, r3, lsl #2]
 362:Libraries/lwip-1.4.0/core/memp.c ****       memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
 174              		.loc 1 362 0 discriminator 3
 175 00a6 7B88     		ldrh	r3, [r7, #2]
 176 00a8 114A     		ldr	r2, .L8+16
 177 00aa 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 178 00ae 1A46     		mov	r2, r3
 179 00b0 7B68     		ldr	r3, [r7, #4]
 180 00b2 1344     		add	r3, r3, r2
 181 00b4 7B60     		str	r3, [r7, #4]
 359:Libraries/lwip-1.4.0/core/memp.c ****       memp->next = memp_tab[i];
 182              		.loc 1 359 0 discriminator 3
 183 00b6 3B88     		ldrh	r3, [r7]	@ movhi
 184 00b8 0133     		adds	r3, r3, #1
 185 00ba 3B80     		strh	r3, [r7]	@ movhi
 186              	.L5:
 359:Libraries/lwip-1.4.0/core/memp.c ****       memp->next = memp_tab[i];
 187              		.loc 1 359 0 is_stmt 0 discriminator 1
 188 00bc 7B88     		ldrh	r3, [r7, #2]
 189 00be 094A     		ldr	r2, .L8+4
 190 00c0 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 191 00c4 3A88     		ldrh	r2, [r7]
 192 00c6 9A42     		cmp	r2, r3
 193 00c8 E2D3     		bcc	.L6
 353:Libraries/lwip-1.4.0/core/memp.c ****     memp_tab[i] = NULL;
 194              		.loc 1 353 0 is_stmt 1 discriminator 2
 195 00ca 7B88     		ldrh	r3, [r7, #2]	@ movhi
 196 00cc 0133     		adds	r3, r3, #1
 197 00ce 7B80     		strh	r3, [r7, #2]	@ movhi
 198              	.L4:
 353:Libraries/lwip-1.4.0/core/memp.c ****     memp_tab[i] = NULL;
 199              		.loc 1 353 0 is_stmt 0 discriminator 1
 200 00d0 7B88     		ldrh	r3, [r7, #2]
 201 00d2 092B     		cmp	r3, #9
 202 00d4 D4D9     		bls	.L7
 363:Libraries/lwip-1.4.0/core/memp.c **** #if MEMP_OVERFLOW_CHECK
 364:Libraries/lwip-1.4.0/core/memp.c ****         + MEMP_SANITY_REGION_AFTER_ALIGNED
 365:Libraries/lwip-1.4.0/core/memp.c **** #endif
 366:Libraries/lwip-1.4.0/core/memp.c ****       );
 367:Libraries/lwip-1.4.0/core/memp.c ****     }
 368:Libraries/lwip-1.4.0/core/memp.c ****   }
 369:Libraries/lwip-1.4.0/core/memp.c **** #if MEMP_OVERFLOW_CHECK
 370:Libraries/lwip-1.4.0/core/memp.c ****   memp_overflow_init();
 371:Libraries/lwip-1.4.0/core/memp.c ****   /* check everything a first time to see if it worked */
 372:Libraries/lwip-1.4.0/core/memp.c ****   memp_overflow_check_all();
 373:Libraries/lwip-1.4.0/core/memp.c **** #endif /* MEMP_OVERFLOW_CHECK */
 374:Libraries/lwip-1.4.0/core/memp.c **** }
 203              		.loc 1 374 0 is_stmt 1
 204 00d6 00BF     		nop
 205 00d8 0C37     		adds	r7, r7, #12
 206              		.cfi_def_cfa_offset 4
 207 00da BD46     		mov	sp, r7
 208              		.cfi_def_cfa_register 13
 209              		@ sp needed
 210 00dc 80BC     		pop	{r7}
 211              		.cfi_restore 7
 212              		.cfi_def_cfa_offset 0
 213 00de 7047     		bx	lr
 214              	.L9:
 215              		.align	2
 216              	.L8:
 217 00e0 00000000 		.word	lwip_stats
 218 00e4 00000000 		.word	memp_num
 219 00e8 00000000 		.word	memp_memory
 220 00ec 00000000 		.word	memp_tab
 221 00f0 00000000 		.word	memp_sizes
 222              		.cfi_endproc
 223              	.LFE17:
 225              		.section	.text.memp_malloc,"ax",%progbits
 226              		.align	2
 227              		.global	memp_malloc
 228              		.thumb
 229              		.thumb_func
 231              	memp_malloc:
 232              	.LFB18:
 375:Libraries/lwip-1.4.0/core/memp.c **** 
 376:Libraries/lwip-1.4.0/core/memp.c **** /**
 377:Libraries/lwip-1.4.0/core/memp.c ****  * Get an element from a specific pool.
 378:Libraries/lwip-1.4.0/core/memp.c ****  *
 379:Libraries/lwip-1.4.0/core/memp.c ****  * @param type the pool to get an element from
 380:Libraries/lwip-1.4.0/core/memp.c ****  *
 381:Libraries/lwip-1.4.0/core/memp.c ****  * the debug version has two more parameters:
 382:Libraries/lwip-1.4.0/core/memp.c ****  * @param file file name calling this function
 383:Libraries/lwip-1.4.0/core/memp.c ****  * @param line number of line where this function is called
 384:Libraries/lwip-1.4.0/core/memp.c ****  *
 385:Libraries/lwip-1.4.0/core/memp.c ****  * @return a pointer to the allocated memory or a NULL pointer on error
 386:Libraries/lwip-1.4.0/core/memp.c ****  */
 387:Libraries/lwip-1.4.0/core/memp.c **** void *
 388:Libraries/lwip-1.4.0/core/memp.c **** #if !MEMP_OVERFLOW_CHECK
 389:Libraries/lwip-1.4.0/core/memp.c **** memp_malloc(memp_t type)
 390:Libraries/lwip-1.4.0/core/memp.c **** #else
 391:Libraries/lwip-1.4.0/core/memp.c **** memp_malloc_fn(memp_t type, const char* file, const int line)
 392:Libraries/lwip-1.4.0/core/memp.c **** #endif
 393:Libraries/lwip-1.4.0/core/memp.c **** {
 233              		.loc 1 393 0
 234              		.cfi_startproc
 235              		@ args = 0, pretend = 0, frame = 16
 236              		@ frame_needed = 1, uses_anonymous_args = 0
 237              		@ link register save eliminated.
 238 0000 80B4     		push	{r7}
 239              		.cfi_def_cfa_offset 4
 240              		.cfi_offset 7, -4
 241 0002 85B0     		sub	sp, sp, #20
 242              		.cfi_def_cfa_offset 24
 243 0004 00AF     		add	r7, sp, #0
 244              		.cfi_def_cfa_register 7
 245 0006 0346     		mov	r3, r0
 246 0008 FB71     		strb	r3, [r7, #7]
 394:Libraries/lwip-1.4.0/core/memp.c ****   struct memp *memp;
 395:Libraries/lwip-1.4.0/core/memp.c ****   SYS_ARCH_DECL_PROTECT(old_level);
 396:Libraries/lwip-1.4.0/core/memp.c ****  
 397:Libraries/lwip-1.4.0/core/memp.c ****   LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 247              		.loc 1 397 0
 248 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 249 000c 092B     		cmp	r3, #9
 250 000e 01D9     		bls	.L11
 251              		.loc 1 397 0 is_stmt 0 discriminator 1
 252 0010 0023     		movs	r3, #0
 253 0012 5FE0     		b	.L12
 254              	.L11:
 398:Libraries/lwip-1.4.0/core/memp.c **** 
 399:Libraries/lwip-1.4.0/core/memp.c ****   SYS_ARCH_PROTECT(old_level);
 400:Libraries/lwip-1.4.0/core/memp.c **** #if MEMP_OVERFLOW_CHECK >= 2
 401:Libraries/lwip-1.4.0/core/memp.c ****   memp_overflow_check_all();
 402:Libraries/lwip-1.4.0/core/memp.c **** #endif /* MEMP_OVERFLOW_CHECK >= 2 */
 403:Libraries/lwip-1.4.0/core/memp.c **** 
 404:Libraries/lwip-1.4.0/core/memp.c ****   memp = memp_tab[type];
 255              		.loc 1 404 0 is_stmt 1
 256 0014 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 257 0016 324A     		ldr	r2, .L16
 258 0018 52F82330 		ldr	r3, [r2, r3, lsl #2]
 259 001c FB60     		str	r3, [r7, #12]
 405:Libraries/lwip-1.4.0/core/memp.c ****   
 406:Libraries/lwip-1.4.0/core/memp.c ****   if (memp != NULL) {
 260              		.loc 1 406 0
 261 001e FB68     		ldr	r3, [r7, #12]
 262 0020 002B     		cmp	r3, #0
 263 0022 42D0     		beq	.L13
 407:Libraries/lwip-1.4.0/core/memp.c ****     memp_tab[type] = memp->next;
 264              		.loc 1 407 0
 265 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 266 0026 FA68     		ldr	r2, [r7, #12]
 267 0028 1268     		ldr	r2, [r2]
 268 002a 2D49     		ldr	r1, .L16
 269 002c 41F82320 		str	r2, [r1, r3, lsl #2]
 408:Libraries/lwip-1.4.0/core/memp.c **** #if MEMP_OVERFLOW_CHECK
 409:Libraries/lwip-1.4.0/core/memp.c ****     memp->next = NULL;
 410:Libraries/lwip-1.4.0/core/memp.c ****     memp->file = file;
 411:Libraries/lwip-1.4.0/core/memp.c ****     memp->line = line;
 412:Libraries/lwip-1.4.0/core/memp.c **** #endif /* MEMP_OVERFLOW_CHECK */
 413:Libraries/lwip-1.4.0/core/memp.c ****     MEMP_STATS_INC_USED(used, type);
 270              		.loc 1 413 0
 271 0030 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 272 0032 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 273 0034 2B48     		ldr	r0, .L16+4
 274 0036 0B46     		mov	r3, r1
 275 0038 9B00     		lsls	r3, r3, #2
 276 003a 0B44     		add	r3, r3, r1
 277 003c 5B00     		lsls	r3, r3, #1
 278 003e 0344     		add	r3, r3, r0
 279 0040 B433     		adds	r3, r3, #180
 280 0042 1B88     		ldrh	r3, [r3]
 281 0044 0133     		adds	r3, r3, #1
 282 0046 98B2     		uxth	r0, r3
 283 0048 2649     		ldr	r1, .L16+4
 284 004a 1346     		mov	r3, r2
 285 004c 9B00     		lsls	r3, r3, #2
 286 004e 1344     		add	r3, r3, r2
 287 0050 5B00     		lsls	r3, r3, #1
 288 0052 0B44     		add	r3, r3, r1
 289 0054 B433     		adds	r3, r3, #180
 290 0056 0246     		mov	r2, r0	@ movhi
 291 0058 1A80     		strh	r2, [r3]	@ movhi
 292 005a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 293 005c 2149     		ldr	r1, .L16+4
 294 005e 1346     		mov	r3, r2
 295 0060 9B00     		lsls	r3, r3, #2
 296 0062 1344     		add	r3, r3, r2
 297 0064 5B00     		lsls	r3, r3, #1
 298 0066 0B44     		add	r3, r3, r1
 299 0068 B633     		adds	r3, r3, #182
 300 006a 1988     		ldrh	r1, [r3]
 301 006c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 302 006e 1D48     		ldr	r0, .L16+4
 303 0070 1346     		mov	r3, r2
 304 0072 9B00     		lsls	r3, r3, #2
 305 0074 1344     		add	r3, r3, r2
 306 0076 5B00     		lsls	r3, r3, #1
 307 0078 0344     		add	r3, r3, r0
 308 007a B433     		adds	r3, r3, #180
 309 007c 1B88     		ldrh	r3, [r3]
 310 007e 9942     		cmp	r1, r3
 311 0080 27D2     		bcs	.L15
 312              		.loc 1 413 0 is_stmt 0 discriminator 1
 313 0082 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 314 0084 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 315 0086 1748     		ldr	r0, .L16+4
 316 0088 0B46     		mov	r3, r1
 317 008a 9B00     		lsls	r3, r3, #2
 318 008c 0B44     		add	r3, r3, r1
 319 008e 5B00     		lsls	r3, r3, #1
 320 0090 0344     		add	r3, r3, r0
 321 0092 B433     		adds	r3, r3, #180
 322 0094 1888     		ldrh	r0, [r3]
 323 0096 1349     		ldr	r1, .L16+4
 324 0098 1346     		mov	r3, r2
 325 009a 9B00     		lsls	r3, r3, #2
 326 009c 1344     		add	r3, r3, r2
 327 009e 5B00     		lsls	r3, r3, #1
 328 00a0 0B44     		add	r3, r3, r1
 329 00a2 B633     		adds	r3, r3, #182
 330 00a4 0246     		mov	r2, r0	@ movhi
 331 00a6 1A80     		strh	r2, [r3]	@ movhi
 332 00a8 13E0     		b	.L15
 333              	.L13:
 414:Libraries/lwip-1.4.0/core/memp.c ****     LWIP_ASSERT("memp_malloc: memp properly aligned",
 415:Libraries/lwip-1.4.0/core/memp.c ****                 ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
 416:Libraries/lwip-1.4.0/core/memp.c ****     memp = (struct memp*)(void *)((u8_t*)memp + MEMP_SIZE);
 417:Libraries/lwip-1.4.0/core/memp.c ****   } else {
 418:Libraries/lwip-1.4.0/core/memp.c ****     LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", me
 419:Libraries/lwip-1.4.0/core/memp.c ****     MEMP_STATS_INC(err, type);
 334              		.loc 1 419 0 is_stmt 1
 335 00aa FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 336 00ac 0D49     		ldr	r1, .L16+4
 337 00ae 1346     		mov	r3, r2
 338 00b0 9B00     		lsls	r3, r3, #2
 339 00b2 1344     		add	r3, r3, r2
 340 00b4 5B00     		lsls	r3, r3, #1
 341 00b6 0B44     		add	r3, r3, r1
 342 00b8 B833     		adds	r3, r3, #184
 343 00ba 1B88     		ldrh	r3, [r3]
 344 00bc 0133     		adds	r3, r3, #1
 345 00be 98B2     		uxth	r0, r3
 346 00c0 0849     		ldr	r1, .L16+4
 347 00c2 1346     		mov	r3, r2
 348 00c4 9B00     		lsls	r3, r3, #2
 349 00c6 1344     		add	r3, r3, r2
 350 00c8 5B00     		lsls	r3, r3, #1
 351 00ca 0B44     		add	r3, r3, r1
 352 00cc B833     		adds	r3, r3, #184
 353 00ce 0246     		mov	r2, r0	@ movhi
 354 00d0 1A80     		strh	r2, [r3]	@ movhi
 355              	.L15:
 420:Libraries/lwip-1.4.0/core/memp.c ****   }
 421:Libraries/lwip-1.4.0/core/memp.c **** 
 422:Libraries/lwip-1.4.0/core/memp.c ****   SYS_ARCH_UNPROTECT(old_level);
 423:Libraries/lwip-1.4.0/core/memp.c **** 
 424:Libraries/lwip-1.4.0/core/memp.c ****   return memp;
 356              		.loc 1 424 0
 357 00d2 FB68     		ldr	r3, [r7, #12]
 358              	.L12:
 425:Libraries/lwip-1.4.0/core/memp.c **** }
 359              		.loc 1 425 0
 360 00d4 1846     		mov	r0, r3
 361 00d6 1437     		adds	r7, r7, #20
 362              		.cfi_def_cfa_offset 4
 363 00d8 BD46     		mov	sp, r7
 364              		.cfi_def_cfa_register 13
 365              		@ sp needed
 366 00da 80BC     		pop	{r7}
 367              		.cfi_restore 7
 368              		.cfi_def_cfa_offset 0
 369 00dc 7047     		bx	lr
 370              	.L17:
 371 00de 00BF     		.align	2
 372              	.L16:
 373 00e0 00000000 		.word	memp_tab
 374 00e4 00000000 		.word	lwip_stats
 375              		.cfi_endproc
 376              	.LFE18:
 378              		.section	.text.memp_free,"ax",%progbits
 379              		.align	2
 380              		.global	memp_free
 381              		.thumb
 382              		.thumb_func
 384              	memp_free:
 385              	.LFB19:
 426:Libraries/lwip-1.4.0/core/memp.c **** 
 427:Libraries/lwip-1.4.0/core/memp.c **** /**
 428:Libraries/lwip-1.4.0/core/memp.c ****  * Put an element back into its pool.
 429:Libraries/lwip-1.4.0/core/memp.c ****  *
 430:Libraries/lwip-1.4.0/core/memp.c ****  * @param type the pool where to put mem
 431:Libraries/lwip-1.4.0/core/memp.c ****  * @param mem the memp element to free
 432:Libraries/lwip-1.4.0/core/memp.c ****  */
 433:Libraries/lwip-1.4.0/core/memp.c **** void
 434:Libraries/lwip-1.4.0/core/memp.c **** memp_free(memp_t type, void *mem)
 435:Libraries/lwip-1.4.0/core/memp.c **** {
 386              		.loc 1 435 0
 387              		.cfi_startproc
 388              		@ args = 0, pretend = 0, frame = 16
 389              		@ frame_needed = 1, uses_anonymous_args = 0
 390              		@ link register save eliminated.
 391 0000 80B4     		push	{r7}
 392              		.cfi_def_cfa_offset 4
 393              		.cfi_offset 7, -4
 394 0002 85B0     		sub	sp, sp, #20
 395              		.cfi_def_cfa_offset 24
 396 0004 00AF     		add	r7, sp, #0
 397              		.cfi_def_cfa_register 7
 398 0006 0346     		mov	r3, r0
 399 0008 3960     		str	r1, [r7]
 400 000a FB71     		strb	r3, [r7, #7]
 436:Libraries/lwip-1.4.0/core/memp.c ****   struct memp *memp;
 437:Libraries/lwip-1.4.0/core/memp.c ****   SYS_ARCH_DECL_PROTECT(old_level);
 438:Libraries/lwip-1.4.0/core/memp.c **** 
 439:Libraries/lwip-1.4.0/core/memp.c ****   if (mem == NULL) {
 401              		.loc 1 439 0
 402 000c 3B68     		ldr	r3, [r7]
 403 000e 002B     		cmp	r3, #0
 404 0010 21D0     		beq	.L21
 440:Libraries/lwip-1.4.0/core/memp.c ****     return;
 441:Libraries/lwip-1.4.0/core/memp.c ****   }
 442:Libraries/lwip-1.4.0/core/memp.c ****   LWIP_ASSERT("memp_free: mem properly aligned",
 443:Libraries/lwip-1.4.0/core/memp.c ****                 ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);
 444:Libraries/lwip-1.4.0/core/memp.c **** 
 445:Libraries/lwip-1.4.0/core/memp.c ****   memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 405              		.loc 1 445 0
 406 0012 3B68     		ldr	r3, [r7]
 407 0014 FB60     		str	r3, [r7, #12]
 446:Libraries/lwip-1.4.0/core/memp.c **** 
 447:Libraries/lwip-1.4.0/core/memp.c ****   SYS_ARCH_PROTECT(old_level);
 448:Libraries/lwip-1.4.0/core/memp.c **** #if MEMP_OVERFLOW_CHECK
 449:Libraries/lwip-1.4.0/core/memp.c **** #if MEMP_OVERFLOW_CHECK >= 2
 450:Libraries/lwip-1.4.0/core/memp.c ****   memp_overflow_check_all();
 451:Libraries/lwip-1.4.0/core/memp.c **** #else
 452:Libraries/lwip-1.4.0/core/memp.c ****   memp_overflow_check_element_overflow(memp, type);
 453:Libraries/lwip-1.4.0/core/memp.c ****   memp_overflow_check_element_underflow(memp, type);
 454:Libraries/lwip-1.4.0/core/memp.c **** #endif /* MEMP_OVERFLOW_CHECK >= 2 */
 455:Libraries/lwip-1.4.0/core/memp.c **** #endif /* MEMP_OVERFLOW_CHECK */
 456:Libraries/lwip-1.4.0/core/memp.c **** 
 457:Libraries/lwip-1.4.0/core/memp.c ****   MEMP_STATS_DEC(used, type); 
 408              		.loc 1 457 0
 409 0016 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 410 0018 1149     		ldr	r1, .L22
 411 001a 1346     		mov	r3, r2
 412 001c 9B00     		lsls	r3, r3, #2
 413 001e 1344     		add	r3, r3, r2
 414 0020 5B00     		lsls	r3, r3, #1
 415 0022 0B44     		add	r3, r3, r1
 416 0024 B433     		adds	r3, r3, #180
 417 0026 1B88     		ldrh	r3, [r3]
 418 0028 013B     		subs	r3, r3, #1
 419 002a 98B2     		uxth	r0, r3
 420 002c 0C49     		ldr	r1, .L22
 421 002e 1346     		mov	r3, r2
 422 0030 9B00     		lsls	r3, r3, #2
 423 0032 1344     		add	r3, r3, r2
 424 0034 5B00     		lsls	r3, r3, #1
 425 0036 0B44     		add	r3, r3, r1
 426 0038 B433     		adds	r3, r3, #180
 427 003a 0246     		mov	r2, r0	@ movhi
 428 003c 1A80     		strh	r2, [r3]	@ movhi
 458:Libraries/lwip-1.4.0/core/memp.c ****   
 459:Libraries/lwip-1.4.0/core/memp.c ****   memp->next = memp_tab[type]; 
 429              		.loc 1 459 0
 430 003e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 431 0040 084A     		ldr	r2, .L22+4
 432 0042 52F82320 		ldr	r2, [r2, r3, lsl #2]
 433 0046 FB68     		ldr	r3, [r7, #12]
 434 0048 1A60     		str	r2, [r3]
 460:Libraries/lwip-1.4.0/core/memp.c ****   memp_tab[type] = memp;
 435              		.loc 1 460 0
 436 004a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 437 004c 0549     		ldr	r1, .L22+4
 438 004e FA68     		ldr	r2, [r7, #12]
 439 0050 41F82320 		str	r2, [r1, r3, lsl #2]
 440 0054 00E0     		b	.L18
 441              	.L21:
 440:Libraries/lwip-1.4.0/core/memp.c ****   }
 442              		.loc 1 440 0
 443 0056 00BF     		nop
 444              	.L18:
 461:Libraries/lwip-1.4.0/core/memp.c **** 
 462:Libraries/lwip-1.4.0/core/memp.c **** #if MEMP_SANITY_CHECK
 463:Libraries/lwip-1.4.0/core/memp.c ****   LWIP_ASSERT("memp sanity", memp_sanity());
 464:Libraries/lwip-1.4.0/core/memp.c **** #endif /* MEMP_SANITY_CHECK */
 465:Libraries/lwip-1.4.0/core/memp.c **** 
 466:Libraries/lwip-1.4.0/core/memp.c ****   SYS_ARCH_UNPROTECT(old_level);
 467:Libraries/lwip-1.4.0/core/memp.c **** }
 445              		.loc 1 467 0
 446 0058 1437     		adds	r7, r7, #20
 447              		.cfi_def_cfa_offset 4
 448 005a BD46     		mov	sp, r7
 449              		.cfi_def_cfa_register 13
 450              		@ sp needed
 451 005c 80BC     		pop	{r7}
 452              		.cfi_restore 7
 453              		.cfi_def_cfa_offset 0
 454 005e 7047     		bx	lr
 455              	.L23:
 456              		.align	2
 457              	.L22:
 458 0060 00000000 		.word	lwip_stats
 459 0064 00000000 		.word	memp_tab
 460              		.cfi_endproc
 461              	.LFE19:
 463              		.text
 464              	.Letext0:
 465              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q2\\arm-none-eabi\\include\\mach
 466              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q2\\arm-none-eabi\\include\\sys\
 467              		.file 4 "./Libraries/lwip-1.4.0/arch/cc.h"
 468              		.file 5 "./Libraries/lwip-1.4.0/include/lwip/memp.h"
 469              		.file 6 "./Libraries/lwip-1.4.0/include/lwip/mem.h"
 470              		.file 7 "./Libraries/lwip-1.4.0/include/lwip/stats.h"
DEFINED SYMBOLS
                            *ABS*:00000000 memp.c
C:\Users\KHUSHA~1\AppData\Local\Temp\cc4mEgXD.s:20     .bss.memp_tab:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc4mEgXD.s:23     .bss.memp_tab:00000000 memp_tab
C:\Users\KHUSHA~1\AppData\Local\Temp\cc4mEgXD.s:26     .rodata.memp_sizes:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc4mEgXD.s:29     .rodata.memp_sizes:00000000 memp_sizes
C:\Users\KHUSHA~1\AppData\Local\Temp\cc4mEgXD.s:41     .rodata.memp_num:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc4mEgXD.s:44     .rodata.memp_num:00000000 memp_num
C:\Users\KHUSHA~1\AppData\Local\Temp\cc4mEgXD.s:56     .bss.memp_memory:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc4mEgXD.s:59     .bss.memp_memory:00000000 memp_memory
C:\Users\KHUSHA~1\AppData\Local\Temp\cc4mEgXD.s:62     .text.memp_init:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\cc4mEgXD.s:67     .text.memp_init:00000000 memp_init
C:\Users\KHUSHA~1\AppData\Local\Temp\cc4mEgXD.s:217    .text.memp_init:000000e0 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc4mEgXD.s:226    .text.memp_malloc:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\cc4mEgXD.s:231    .text.memp_malloc:00000000 memp_malloc
C:\Users\KHUSHA~1\AppData\Local\Temp\cc4mEgXD.s:373    .text.memp_malloc:000000e0 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc4mEgXD.s:379    .text.memp_free:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\cc4mEgXD.s:384    .text.memp_free:00000000 memp_free
C:\Users\KHUSHA~1\AppData\Local\Temp\cc4mEgXD.s:458    .text.memp_free:00000060 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
lwip_stats
