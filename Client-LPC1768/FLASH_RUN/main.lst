   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.NVIC_SetPriority,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	NVIC_SetPriority:
  25              	.LFB21:
  26              		.file 1 "./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h"
   1:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**************************************************************************//**
   2:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @file     core_cm3.h
   3:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @version  V1.30
   5:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @date     30. October 2009
   6:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
   7:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @note
   8:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
  10:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @par
  11:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * within development tools that are supporting such ARM based processors.
  14:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
  15:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @par
  16:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
  22:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  ******************************************************************************/
  23:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  24:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #ifndef __CM3_CORE_H__
  25:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __CM3_CORE_H__
  26:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  27:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_LintCinfiguration CMSIS CM3 Core Lint Configuration
  28:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
  29:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * List of Lint messages which will be suppressed and not shown:
  30:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *   - Error 10: \n
  31:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     register uint32_t __regBasePri         __asm("basepri"); \n
  32:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     Error 10: Expecting ';'
  33:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * .
  34:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *   - Error 530: \n
  35:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     return(__regBasePri); \n
  36:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     Warning 530: Symbol '__regBasePri' (line 264) not initialized
  37:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * .
  38:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *   - Error 550: \n
  39:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     __regBasePri = (basePri & 0x1ff); \n
  40:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     Warning 550: Symbol '__regBasePri' (line 271) not accessed
  41:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * .
  42:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *   - Error 754: \n
  43:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     uint32_t RESERVED0[24]; \n
  44:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     Info 754: local structure member '<some, not used in the HAL>' (line 109, file ./cm3_core.h)
  45:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * .
  46:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *   - Error 750: \n
  47:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     #define __CM3_CORE_H__ \n
  48:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     Info 750: local macro '__CM3_CORE_H__' (line 43, file./cm3_core.h) not referenced
  49:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * .
  50:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *   - Error 528: \n
  51:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     static __INLINE void NVIC_DisableIRQ(uint32_t IRQn) \n
  52:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     Warning 528: Symbol 'NVIC_DisableIRQ(unsigned int)' (line 419, file ./cm3_core.h) not refere
  53:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * .
  54:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *   - Error 751: \n
  55:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     } InterruptType_Type; \n
  56:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     Info 751: local typedef 'InterruptType_Type' (line 170, file ./cm3_core.h) not referenced
  57:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * .
  58:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  59:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
  60:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
  61:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  62:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*lint -save */
  63:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*lint -e10  */
  64:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*lint -e530 */
  65:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*lint -e550 */
  66:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*lint -e754 */
  67:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*lint -e750 */
  68:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*lint -e528 */
  69:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*lint -e751 */
  70:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  71:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  72:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_definitions CM3 Core Definitions
  73:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   This file defines all structures and symbols for CMSIS core:
  74:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****     - CMSIS version number
  75:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****     - Cortex-M core registers and bitfields
  76:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****     - Cortex-M core peripheral base address
  77:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   @{
  78:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
  79:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  80:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #ifdef __cplusplus
  81:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  extern "C" {
  82:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #endif
  83:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  84:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  85:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  86:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!<
  87:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  88:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __CORTEX_M                (0x03)                                                       /*!<
  89:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  90:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #include <stdint.h>                           /* Include standard types */
  91:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  92:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #if defined (__ICCARM__)
  93:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  94:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #endif
  95:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  96:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  97:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #ifndef __NVIC_PRIO_BITS
  98:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define __NVIC_PRIO_BITS    4               /*!< standard definition for NVIC Priority Bits */
  99:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #endif
 100:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 101:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 102:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 103:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 104:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 105:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * IO definitions
 106:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 107:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * define access restrictions to peripheral registers
 108:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 109:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 110:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #ifdef __cplusplus
 111:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
 112:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #else
 113:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
 114:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #endif
 115:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
 116:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
 117:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 118:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 119:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 120:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*******************************************************************************
 121:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *                 Register Abstraction
 122:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  ******************************************************************************/
 123:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_register CMSIS CM3 Core Register
 124:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  @{
 125:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** */
 126:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 127:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 128:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_NVIC CMSIS CM3 NVIC
 129:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
 130:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   @{
 131:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 132:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** typedef struct
 133:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 134:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t ISER[8];                      /*!< Offset: 0x000  Interrupt Set Enable Register    
 135:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED0[24];
 136:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t ICER[8];                      /*!< Offset: 0x080  Interrupt Clear Enable Register  
 137:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RSERVED1[24];
 138:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t ISPR[8];                      /*!< Offset: 0x100  Interrupt Set Pending Register   
 139:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED2[24];
 140:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t ICPR[8];                      /*!< Offset: 0x180  Interrupt Clear Pending Register 
 141:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED3[24];
 142:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t IABR[8];                      /*!< Offset: 0x200  Interrupt Active bit Register    
 143:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED4[56];
 144:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint8_t  IP[240];                      /*!< Offset: 0x300  Interrupt Priority Register (8Bit
 145:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED5[644];
 146:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __O  uint32_t STIR;                         /*!< Offset: 0xE00  Software Trigger Interrupt Regist
 147:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }  NVIC_Type;
 148:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_NVIC */
 149:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 150:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 151:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_SCB CMSIS CM3 SCB
 152:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   memory mapped structure for System Control Block (SCB)
 153:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   @{
 154:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 155:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** typedef struct
 156:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 157:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 158:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 159:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t VTOR;                         /*!< Offset: 0x08  Vector Table Offset Register      
 160:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 161:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 162:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 163:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint8_t  SHP[12];                      /*!< Offset: 0x18  System Handlers Priority Registers
 164:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 165:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t CFSR;                         /*!< Offset: 0x28  Configurable Fault Status Register
 166:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t HFSR;                         /*!< Offset: 0x2C  Hard Fault Status Register        
 167:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 168:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t MMFAR;                        /*!< Offset: 0x34  Mem Manage Address Register       
 169:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t BFAR;                         /*!< Offset: 0x38  Bus Fault Address Register        
 170:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t AFSR;                         /*!< Offset: 0x3C  Auxiliary Fault Status Register   
 171:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PFR[2];                       /*!< Offset: 0x40  Processor Feature Register        
 172:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t DFR;                          /*!< Offset: 0x48  Debug Feature Register            
 173:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t ADR;                          /*!< Offset: 0x4C  Auxiliary Feature Register        
 174:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t MMFR[4];                      /*!< Offset: 0x50  Memory Model Feature Register     
 175:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t ISAR[5];                      /*!< Offset: 0x60  ISA Feature Register              
 176:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** } SCB_Type;
 177:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 178:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SCB CPUID Register Definitions */
 179:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 180:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 181:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 182:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 183:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 184:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 185:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 186:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 187:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 188:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 189:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 190:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 191:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 192:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 193:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 194:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 195:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 196:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 197:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 198:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 199:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 200:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 201:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 202:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 203:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 204:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 205:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 206:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 207:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 208:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 209:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 210:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 211:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 212:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 213:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 214:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 215:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 216:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 217:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1ul << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 218:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 219:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 220:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 221:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 222:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 223:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 224:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (0x1FFul << SCB_VTOR_TBLBASE_Pos)              /*!< SCB 
 225:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 226:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 227:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFul << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 228:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 229:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 230:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 231:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 232:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 233:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 234:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 235:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 236:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 237:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 238:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 239:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 240:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7ul << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 241:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 242:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 243:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 244:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 245:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 246:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 247:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 248:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 249:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1ul << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 250:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 251:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SCB System Control Register Definitions */
 252:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 253:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 254:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 255:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 256:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 257:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 258:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 259:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 260:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 261:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 262:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 263:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 264:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 265:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 266:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1ul << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 267:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 268:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 269:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1ul << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 270:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 271:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 272:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 273:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 274:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 275:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1ul << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 276:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 277:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 278:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1ul << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 279:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 280:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 281:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 282:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1ul << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 283:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 284:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 285:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1ul << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 286:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 287:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 288:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1ul << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 289:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 290:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 291:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 292:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 293:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 294:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1ul << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 295:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 296:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 297:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1ul << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 298:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 299:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 300:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1ul << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 301:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 302:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 303:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1ul << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 304:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 305:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 306:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1ul << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 307:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 308:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 309:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1ul << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 310:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 311:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 312:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1ul << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 313:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 314:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 315:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1ul << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 316:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 317:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 318:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1ul << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 319:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 320:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 321:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1ul << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 322:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 323:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 324:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 325:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFul << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 326:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 327:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 328:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFul << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 329:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 330:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 331:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFul << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 332:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 333:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 334:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 335:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1ul << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 336:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 337:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 338:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1ul << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 339:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 340:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 341:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1ul << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 342:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 343:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 344:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 345:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 346:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 347:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 348:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 349:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 350:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 351:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 352:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 353:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 354:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 355:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 356:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 357:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 358:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_SCB */
 359:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 360:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 361:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_SysTick CMSIS CM3 SysTick
 362:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   memory mapped structure for SysTick
 363:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   @{
 364:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 365:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** typedef struct
 366:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 367:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 368:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 369:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 370:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 371:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** } SysTick_Type;
 372:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 373:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 374:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 375:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 376:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 377:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 378:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 379:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 380:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 381:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 382:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 383:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 384:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 385:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 386:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SysTick Reload Register Definitions */
 387:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 388:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 389:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 390:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SysTick Current Register Definitions */
 391:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 392:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 393:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 394:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SysTick Calibration Register Definitions */
 395:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 396:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 397:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 398:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 399:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 400:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 401:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 402:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 403:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_SysTick */
 404:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 405:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 406:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_ITM CMSIS CM3 ITM
 407:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   memory mapped structure for Instrumentation Trace Macrocell (ITM)
 408:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   @{
 409:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 410:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** typedef struct
 411:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 412:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __O  union
 413:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   {
 414:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****     __O  uint8_t    u8;                       /*!< Offset:       ITM Stimulus Port 8-bit           
 415:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****     __O  uint16_t   u16;                      /*!< Offset:       ITM Stimulus Port 16-bit          
 416:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****     __O  uint32_t   u32;                      /*!< Offset:       ITM Stimulus Port 32-bit          
 417:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   }  PORT [32];                               /*!< Offset: 0x00  ITM Stimulus Port Registers       
 418:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED0[864];
 419:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t TER;                          /*!< Offset:       ITM Trace Enable Register         
 420:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED1[15];
 421:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t TPR;                          /*!< Offset:       ITM Trace Privilege Register      
 422:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED2[15];
 423:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t TCR;                          /*!< Offset:       ITM Trace Control Register        
 424:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED3[29];
 425:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t IWR;                          /*!< Offset:       ITM Integration Write Register    
 426:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t IRR;                          /*!< Offset:       ITM Integration Read Register     
 427:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t IMCR;                         /*!< Offset:       ITM Integration Mode Control Regis
 428:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED4[43];
 429:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t LAR;                          /*!< Offset:       ITM Lock Access Register          
 430:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t LSR;                          /*!< Offset:       ITM Lock Status Register          
 431:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED5[6];
 432:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PID4;                         /*!< Offset:       ITM Peripheral Identification Regi
 433:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PID5;                         /*!< Offset:       ITM Peripheral Identification Regi
 434:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PID6;                         /*!< Offset:       ITM Peripheral Identification Regi
 435:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PID7;                         /*!< Offset:       ITM Peripheral Identification Regi
 436:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PID0;                         /*!< Offset:       ITM Peripheral Identification Regi
 437:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PID1;                         /*!< Offset:       ITM Peripheral Identification Regi
 438:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PID2;                         /*!< Offset:       ITM Peripheral Identification Regi
 439:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PID3;                         /*!< Offset:       ITM Peripheral Identification Regi
 440:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t CID0;                         /*!< Offset:       ITM Component  Identification Regi
 441:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t CID1;                         /*!< Offset:       ITM Component  Identification Regi
 442:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t CID2;                         /*!< Offset:       ITM Component  Identification Regi
 443:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t CID3;                         /*!< Offset:       ITM Component  Identification Regi
 444:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** } ITM_Type;
 445:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 446:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 447:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 448:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFul << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 449:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 450:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* ITM Trace Control Register Definitions */
 451:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 452:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1ul << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 453:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 454:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_ATBID_Pos                  16                                             /*!< ITM 
 455:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_ATBID_Msk                  (0x7Ful << ITM_TCR_ATBID_Pos)                  /*!< ITM 
 456:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 457:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 458:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3ul << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 459:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 460:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 461:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1ul << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 462:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 463:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 464:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1ul << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 465:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 466:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 467:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1ul << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 468:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 469:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 470:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1ul << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 471:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 472:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 473:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1ul << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 474:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 475:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* ITM Integration Write Register Definitions */
 476:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 477:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1ul << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 478:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 479:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* ITM Integration Read Register Definitions */
 480:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 481:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1ul << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 482:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 483:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 484:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 485:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1ul << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 486:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 487:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* ITM Lock Status Register Definitions */
 488:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 489:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1ul << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 490:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 491:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 492:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1ul << ITM_LSR_Access_Pos)                    /*!< ITM 
 493:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 494:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 495:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_LSR_Present_Msk                (1ul << ITM_LSR_Present_Pos)                   /*!< ITM 
 496:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_ITM */
 497:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 498:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 499:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_InterruptType CMSIS CM3 Interrupt Type
 500:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   memory mapped structure for Interrupt Type
 501:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   @{
 502:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 503:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** typedef struct
 504:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 505:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED0;
 506:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t ICTR;                         /*!< Offset: 0x04  Interrupt Control Type Register */
 507:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 508:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t ACTLR;                        /*!< Offset: 0x08  Auxiliary Control Register      */
 509:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #else
 510:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED1;
 511:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #endif
 512:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** } InterruptType_Type;
 513:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 514:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 515:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define InterruptType_ICTR_INTLINESNUM_Pos  0                                             /*!< Inte
 516:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define InterruptType_ICTR_INTLINESNUM_Msk (0x1Ful << InterruptType_ICTR_INTLINESNUM_Pos) /*!< Inte
 517:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 518:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* Auxiliary Control Register Definitions */
 519:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define InterruptType_ACTLR_DISFOLD_Pos     2                                             /*!< Inte
 520:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define InterruptType_ACTLR_DISFOLD_Msk    (1ul << InterruptType_ACTLR_DISFOLD_Pos)       /*!< Inte
 521:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 522:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define InterruptType_ACTLR_DISDEFWBUF_Pos  1                                             /*!< Inte
 523:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define InterruptType_ACTLR_DISDEFWBUF_Msk (1ul << InterruptType_ACTLR_DISDEFWBUF_Pos)    /*!< Inte
 524:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 525:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define InterruptType_ACTLR_DISMCYCINT_Pos  0                                             /*!< Inte
 526:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define InterruptType_ACTLR_DISMCYCINT_Msk (1ul << InterruptType_ACTLR_DISMCYCINT_Pos)    /*!< Inte
 527:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_InterruptType */
 528:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 529:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 530:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 531:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_MPU CMSIS CM3 MPU
 532:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   memory mapped structure for Memory Protection Unit (MPU)
 533:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   @{
 534:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 535:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** typedef struct
 536:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 537:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t TYPE;                         /*!< Offset: 0x00  MPU Type Register                 
 538:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x04  MPU Control Register              
 539:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RNR;                          /*!< Offset: 0x08  MPU Region RNRber Register        
 540:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RBAR;                         /*!< Offset: 0x0C  MPU Region Base Address Register  
 541:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RASR;                         /*!< Offset: 0x10  MPU Region Attribute and Size Regi
 542:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RBAR_A1;                      /*!< Offset: 0x14  MPU Alias 1 Region Base Address Re
 543:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RASR_A1;                      /*!< Offset: 0x18  MPU Alias 1 Region Attribute and S
 544:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RBAR_A2;                      /*!< Offset: 0x1C  MPU Alias 2 Region Base Address Re
 545:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RASR_A2;                      /*!< Offset: 0x20  MPU Alias 2 Region Attribute and S
 546:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RBAR_A3;                      /*!< Offset: 0x24  MPU Alias 3 Region Base Address Re
 547:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RASR_A3;                      /*!< Offset: 0x28  MPU Alias 3 Region Attribute and S
 548:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** } MPU_Type;
 549:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 550:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* MPU Type Register */
 551:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 552:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFul << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 553:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 554:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
 555:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFul << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 556:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 557:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
 558:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1ul << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
 559:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 560:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* MPU Control Register */
 561:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
 562:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1ul << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 563:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 564:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
 565:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1ul << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 566:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 567:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
 568:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1ul << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
 569:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 570:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* MPU Region Number Register */
 571:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
 572:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFul << MPU_RNR_REGION_Pos)                 /*!< MPU 
 573:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 574:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* MPU Region Base Address Register */
 575:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
 576:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFul << MPU_RBAR_ADDR_Pos)             /*!< MPU 
 577:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 578:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
 579:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1ul << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 580:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 581:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
 582:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFul << MPU_RBAR_REGION_Pos)                 /*!< MPU 
 583:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 584:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* MPU Region Attribute and Size Register */
 585:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
 586:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1ul << MPU_RASR_XN_Pos)                       /*!< MPU 
 587:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 588:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
 589:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_AP_Msk                    (7ul << MPU_RASR_AP_Pos)                       /*!< MPU 
 590:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 591:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
 592:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (7ul << MPU_RASR_TEX_Pos)                      /*!< MPU 
 593:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 594:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
 595:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_S_Msk                     (1ul << MPU_RASR_S_Pos)                        /*!< MPU 
 596:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 597:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
 598:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_C_Msk                     (1ul << MPU_RASR_C_Pos)                        /*!< MPU 
 599:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 600:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
 601:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_B_Msk                     (1ul << MPU_RASR_B_Pos)                        /*!< MPU 
 602:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 603:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
 604:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFul << MPU_RASR_SRD_Pos)                   /*!< MPU 
 605:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 606:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
 607:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1Ful << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 608:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 609:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_ENA_Pos                     0                                            /*!< MPU 
 610:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_ENA_Msk                    (0x1Ful << MPU_RASR_ENA_Pos)                  /*!< MPU 
 611:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 612:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_MPU */
 613:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #endif
 614:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 615:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 616:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_CoreDebug CMSIS CM3 Core Debug
 617:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   memory mapped structure for Core Debug Register
 618:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   @{
 619:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 620:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** typedef struct
 621:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 622:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 623:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 624:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 625:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 626:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** } CoreDebug_Type;
 627:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 628:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* Debug Halting Control and Status Register */
 629:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 630:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 631:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 632:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 633:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 634:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 635:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 636:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 637:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 638:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 639:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 640:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 641:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 642:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 643:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 644:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 645:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 646:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 647:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 648:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 649:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 650:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
 651:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1ul << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
 652:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 653:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 654:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 655:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 656:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 657:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 658:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 659:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 660:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 661:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 662:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 663:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 664:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 665:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* Debug Core Register Selector Register */
 666:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 667:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 668:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 669:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 670:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 671:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 672:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* Debug Exception and Monitor Control Register */
 673:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
 674:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1ul << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
 675:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 676:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
 677:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1ul << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
 678:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 679:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
 680:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1ul << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
 681:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 682:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
 683:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1ul << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
 684:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 685:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
 686:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1ul << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
 687:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 688:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 689:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 690:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 691:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
 692:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1ul << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
 693:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 694:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
 695:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1ul << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
 696:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 697:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
 698:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1ul << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
 699:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 700:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
 701:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1ul << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
 702:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 703:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
 704:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1ul << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
 705:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 706:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
 707:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1ul << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
 708:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 709:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 710:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 711:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_CoreDebug */
 712:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 713:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 714:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
 715:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 716:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_BASE            (0xE0000000)                              /*!< ITM Base Address        
 717:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 718:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 719:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 720:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 721:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 722:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register 
 723:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 724:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 725:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 726:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct
 727:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 728:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 729:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 730:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90)                      /*!< Memory Protection Unit  
 731:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit  
 732:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #endif
 733:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 734:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_core_register */
 735:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 736:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 737:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*******************************************************************************
 738:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *                Hardware Abstraction Layer
 739:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  ******************************************************************************/
 740:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 741:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #if defined ( __CC_ARM   )
 742:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 743:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 744:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 745:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #elif defined ( __ICCARM__ )
 746:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 747:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 748:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 749:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #elif defined   (  __GNUC__  )
 750:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 751:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 752:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 753:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #elif defined   (  __TASKING__  )
 754:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 755:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 756:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 757:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #endif
 758:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 759:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 760:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 761:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 762:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 763:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* ARM armcc specific functions */
 764:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 765:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __enable_fault_irq                __enable_fiq
 766:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __disable_fault_irq               __disable_fiq
 767:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 768:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __NOP                             __nop
 769:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __WFI                             __wfi
 770:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __WFE                             __wfe
 771:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __SEV                             __sev
 772:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __ISB()                           __isb(0)
 773:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __DSB()                           __dsb(0)
 774:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __DMB()                           __dmb(0)
 775:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __REV                             __rev
 776:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __RBIT                            __rbit
 777:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __LDREXB(ptr)                     ((unsigned char ) __ldrex(ptr))
 778:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __LDREXH(ptr)                     ((unsigned short) __ldrex(ptr))
 779:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __LDREXW(ptr)                     ((unsigned int  ) __ldrex(ptr))
 780:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 781:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 782:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 783:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 784:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 785:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic unsigned long long __ldrexd(volatile void *ptr) */
 786:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic int __strexd(unsigned long long val, volatile void *ptr) */
 787:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __enable_irq();     */
 788:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __disable_irq();    */
 789:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 790:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 791:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 792:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Process Stack Pointer
 793:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 794:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return ProcessStackPointer
 795:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 796:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the actual process stack pointer
 797:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 798:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_PSP(void);
 799:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 800:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 801:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Process Stack Pointer
 802:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 803:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
 804:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 805:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP
 806:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * (process stack pointer) Cortex processor register
 807:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 808:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
 809:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 810:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 811:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Main Stack Pointer
 812:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 813:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return Main Stack Pointer
 814:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 815:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
 816:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Cortex processor register
 817:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 818:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_MSP(void);
 819:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 820:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 821:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Main Stack Pointer
 822:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 823:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
 824:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 825:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Assign the value mainStackPointer to the MSP
 826:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * (main stack pointer) Cortex processor register
 827:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 828:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
 829:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 830:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 831:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
 832:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 833:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param   value  value to reverse
 834:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return         reversed value
 835:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 836:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Reverse byte order in unsigned short value
 837:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 838:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
 839:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 840:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 841:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 842:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 843:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param   value  value to reverse
 844:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return         reversed value
 845:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 846:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
 847:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 848:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern int32_t __REVSH(int16_t value);
 849:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 850:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 851:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #if (__ARMCC_VERSION < 400000)
 852:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 853:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 854:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 855:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 856:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 857:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 858:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __CLREX(void);
 859:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 860:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 861:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Base Priority value
 862:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 863:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return BasePriority
 864:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 865:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the content of the base priority register
 866:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 867:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
 868:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 869:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 870:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Base Priority value
 871:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 872:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  basePri  BasePriority
 873:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 874:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the base priority register
 875:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 876:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
 877:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 878:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 879:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Priority Mask value
 880:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 881:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return PriMask
 882:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 883:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
 884:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 885:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_PRIMASK(void);
 886:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 887:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 888:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Priority Mask value
 889:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 890:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param   priMask  PriMask
 891:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 892:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 893:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 894:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
 895:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 896:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 897:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Fault Mask value
 898:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 899:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return FaultMask
 900:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 901:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the content of the fault mask register
 902:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 903:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
 904:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 905:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 906:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Fault Mask value
 907:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 908:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  faultMask faultMask value
 909:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 910:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the fault mask register
 911:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 912:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
 913:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 914:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 915:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Control Register value
 916:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 917:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return Control value
 918:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 919:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the content of the control register
 920:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 921:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_CONTROL(void);
 922:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 923:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 924:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Control Register value
 925:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 926:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  control  Control value
 927:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 928:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the control register
 929:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 930:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
 931:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 932:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 933:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 934:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 935:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 936:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 937:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 938:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 939:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __CLREX                           __clrex
 940:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 941:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 942:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Base Priority value
 943:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 944:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return BasePriority
 945:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 946:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the content of the base priority register
 947:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 948:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE uint32_t  __get_BASEPRI(void)
 949:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 950:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 951:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   return(__regBasePri);
 952:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
 953:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 954:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 955:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Base Priority value
 956:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 957:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  basePri  BasePriority
 958:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 959:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the base priority register
 960:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 961:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __set_BASEPRI(uint32_t basePri)
 962:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 963:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 964:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __regBasePri = (basePri & 0xff);
 965:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
 966:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 967:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 968:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Priority Mask value
 969:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 970:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return PriMask
 971:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 972:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
 973:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 974:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE uint32_t __get_PRIMASK(void)
 975:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 976:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 977:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   return(__regPriMask);
 978:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
 979:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 980:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 981:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Priority Mask value
 982:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 983:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  priMask  PriMask
 984:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 985:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 986:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 987:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 988:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 989:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 990:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __regPriMask = (priMask);
 991:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
 992:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 993:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 994:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Fault Mask value
 995:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 996:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return FaultMask
 997:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 998:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the content of the fault mask register
 999:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1000:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE uint32_t __get_FAULTMASK(void)
1001:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1002:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
1003:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   return(__regFaultMask);
1004:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1005:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1006:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1007:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Fault Mask value
1008:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1009:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  faultMask  faultMask value
1010:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1011:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the fault mask register
1012:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1013:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __set_FAULTMASK(uint32_t faultMask)
1014:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1015:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
1016:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __regFaultMask = (faultMask & 1);
1017:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1018:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1019:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1020:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Control Register value
1021:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1022:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return Control value
1023:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1024:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the content of the control register
1025:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1026:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE uint32_t __get_CONTROL(void)
1027:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1028:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
1029:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   return(__regControl);
1030:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1031:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1032:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1033:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Control Register value
1034:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1035:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  control  Control value
1036:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1037:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the control register
1038:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1039:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __set_CONTROL(uint32_t control)
1040:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1041:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
1042:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __regControl = control;
1043:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1044:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1045:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #endif /* __ARMCC_VERSION  */
1046:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1047:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1048:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1049:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
1050:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* IAR iccarm specific functions */
1051:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1052:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
1053:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
1054:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1055:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
1056:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
1057:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1058:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __NOP                                     __no_operation            /*!< no operation intri
1059:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
1060:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
1061:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
1062:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE  void __CLREX()                   { __ASM ("clrex"); }
1063:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1064:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __ISB(void)                                     */
1065:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __DSB(void)                                     */
1066:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __DMB(void)                                     */
1067:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __set_PRIMASK();                                */
1068:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __get_PRIMASK();                                */
1069:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __set_FAULTMASK();                              */
1070:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __get_FAULTMASK();                              */
1071:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
1072:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
1073:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic unsigned long __STREX(unsigned long, unsigned long); */
1074:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic unsigned long __LDREX(unsigned long *);              */
1075:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1076:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1077:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1078:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Process Stack Pointer
1079:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1080:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return ProcessStackPointer
1081:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1082:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the actual process stack pointer
1083:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1084:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_PSP(void);
1085:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1086:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1087:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Process Stack Pointer
1088:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1089:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
1090:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1091:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP
1092:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * (process stack pointer) Cortex processor register
1093:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1094:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
1095:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1096:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1097:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Main Stack Pointer
1098:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1099:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return Main Stack Pointer
1100:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1101:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
1102:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Cortex processor register
1103:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1104:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_MSP(void);
1105:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1106:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1107:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Main Stack Pointer
1108:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1109:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
1110:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1111:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Assign the value mainStackPointer to the MSP
1112:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * (main stack pointer) Cortex processor register
1113:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1114:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
1115:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1116:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1117:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
1118:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1119:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to reverse
1120:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        reversed value
1121:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1122:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Reverse byte order in unsigned short value
1123:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1124:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
1125:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1126:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1127:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Reverse bit order of value
1128:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1129:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to reverse
1130:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        reversed value
1131:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1132:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Reverse bit order of value
1133:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1134:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
1135:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1136:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1137:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  LDR Exclusive (8 bit)
1138:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1139:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1140:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        value of (*address)
1141:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1142:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive LDR command for 8 bit values)
1143:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1144:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
1145:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1146:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1147:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  LDR Exclusive (16 bit)
1148:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1149:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1150:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        value of (*address)
1151:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1152:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive LDR command for 16 bit values
1153:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1154:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
1155:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1156:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1157:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  LDR Exclusive (32 bit)
1158:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1159:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1160:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        value of (*address)
1161:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1162:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive LDR command for 32 bit values
1163:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1164:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
1165:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1166:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1167:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  STR Exclusive (8 bit)
1168:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1169:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to store
1170:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1171:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        successful / failed
1172:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1173:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive STR command for 8 bit values
1174:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1175:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
1176:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1177:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1178:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  STR Exclusive (16 bit)
1179:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1180:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to store
1181:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1182:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        successful / failed
1183:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1184:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive STR command for 16 bit values
1185:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1186:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
1187:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1188:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1189:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  STR Exclusive (32 bit)
1190:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1191:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to store
1192:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1193:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        successful / failed
1194:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1195:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive STR command for 32 bit values
1196:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1197:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
1198:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1199:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1200:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1201:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
1202:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* GNU gcc specific functions */
1203:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1204:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
1205:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
1206:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1207:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
1208:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
1209:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1210:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
1211:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
1212:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
1213:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
1214:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
1215:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
1216:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
1217:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __CLREX()                    { __ASM volatile ("clrex"); }
1218:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1219:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1220:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1221:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Process Stack Pointer
1222:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1223:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return ProcessStackPointer
1224:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1225:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the actual process stack pointer
1226:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1227:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_PSP(void);
1228:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1229:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1230:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Process Stack Pointer
1231:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1232:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
1233:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1234:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP
1235:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * (process stack pointer) Cortex processor register
1236:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1237:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
1238:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1239:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1240:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Main Stack Pointer
1241:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1242:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return Main Stack Pointer
1243:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1244:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
1245:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Cortex processor register
1246:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1247:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_MSP(void);
1248:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1249:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1250:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Main Stack Pointer
1251:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1252:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
1253:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1254:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Assign the value mainStackPointer to the MSP
1255:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * (main stack pointer) Cortex processor register
1256:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1257:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
1258:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1259:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1260:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Base Priority value
1261:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1262:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return BasePriority
1263:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1264:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the content of the base priority register
1265:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1266:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
1267:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1268:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1269:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Base Priority value
1270:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1271:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  basePri  BasePriority
1272:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1273:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the base priority register
1274:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1275:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
1276:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1277:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1278:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Priority Mask value
1279:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1280:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return PriMask
1281:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1282:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
1283:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1284:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t  __get_PRIMASK(void);
1285:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1286:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1287:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Priority Mask value
1288:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1289:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  priMask  PriMask
1290:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1291:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the priority mask bit in the priority mask register
1292:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1293:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
1294:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1295:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1296:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Fault Mask value
1297:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1298:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return FaultMask
1299:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1300:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the content of the fault mask register
1301:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1302:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
1303:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1304:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1305:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Fault Mask value
1306:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1307:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  faultMask  faultMask value
1308:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1309:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the fault mask register
1310:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1311:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
1312:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1313:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1314:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Control Register value
1315:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** *
1316:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** *  @return Control value
1317:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1318:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the content of the control register
1319:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1320:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_CONTROL(void);
1321:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1322:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1323:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Control Register value
1324:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1325:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  control  Control value
1326:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1327:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the control register
1328:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1329:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
1330:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1331:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1332:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Reverse byte order in integer value
1333:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1334:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to reverse
1335:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        reversed value
1336:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1337:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Reverse byte order in integer value
1338:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1339:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __REV(uint32_t value);
1340:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1341:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1342:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
1343:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1344:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to reverse
1345:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        reversed value
1346:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1347:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Reverse byte order in unsigned short value
1348:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1349:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
1350:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1351:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1352:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
1353:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1354:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to reverse
1355:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        reversed value
1356:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1357:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
1358:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1359:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern int32_t __REVSH(int16_t value);
1360:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1361:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1362:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Reverse bit order of value
1363:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1364:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to reverse
1365:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        reversed value
1366:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1367:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Reverse bit order of value
1368:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1369:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
1370:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1371:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1372:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  LDR Exclusive (8 bit)
1373:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1374:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1375:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        value of (*address)
1376:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1377:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive LDR command for 8 bit value
1378:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1379:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
1380:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1381:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1382:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  LDR Exclusive (16 bit)
1383:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1384:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1385:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        value of (*address)
1386:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1387:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive LDR command for 16 bit values
1388:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1389:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
1390:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1391:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1392:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  LDR Exclusive (32 bit)
1393:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1394:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1395:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        value of (*address)
1396:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1397:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive LDR command for 32 bit values
1398:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1399:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
1400:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1401:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1402:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  STR Exclusive (8 bit)
1403:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1404:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to store
1405:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1406:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        successful / failed
1407:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1408:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive STR command for 8 bit values
1409:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1410:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
1411:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1412:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1413:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  STR Exclusive (16 bit)
1414:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1415:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to store
1416:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1417:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        successful / failed
1418:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1419:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive STR command for 16 bit values
1420:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1421:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
1422:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1423:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1424:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  STR Exclusive (32 bit)
1425:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1426:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to store
1427:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1428:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        successful / failed
1429:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1430:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive STR command for 32 bit values
1431:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1432:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
1433:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1434:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1435:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
1436:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* TASKING carm specific functions */
1437:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1438:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*
1439:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
1440:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
1441:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Including the CMSIS ones.
1442:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1443:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1444:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #endif
1445:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1446:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1447:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_Core_FunctionInterface CMSIS CM3 Core Function Interface
1448:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   Core  Function Interface containing:
1449:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   - Core NVIC Functions
1450:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   - Core SysTick Functions
1451:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   - Core Reset Functions
1452:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** */
1453:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*@{*/
1454:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1455:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1456:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1457:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1458:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Priority Grouping in NVIC Interrupt Controller
1459:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1460:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  PriorityGroup is priority grouping field
1461:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1462:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the priority grouping field using the required unlock sequence.
1463:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * The parameter priority_grouping is assigned to the field
1464:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * SCB->AIRCR [10:8] PRIGROUP field. Only values from 0..7 are used.
1465:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * In case of a conflict between priority grouping and available
1466:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1467:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1468:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1469:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1470:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   uint32_t reg_value;
1471:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 a
1472:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1473:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1474:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
1475:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   reg_value  =  (reg_value                       |
1476:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****                 (0x5FA << SCB_AIRCR_VECTKEY_Pos) |
1477:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
1478:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   SCB->AIRCR =  reg_value;
1479:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1480:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1481:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1482:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Get the Priority Grouping from NVIC Interrupt Controller
1483:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1484:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return priority grouping field
1485:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1486:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Get the priority grouping from NVIC Interrupt Controller.
1487:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
1488:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1489:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
1490:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1491:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
1492:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1493:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1494:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1495:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
1496:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1497:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  IRQn   The positive number of the external interrupt to enable
1498:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1499:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
1500:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * The interrupt number cannot be a negative value.
1501:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1502:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1503:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1504:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
1505:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1506:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1507:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1508:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Disable the interrupt line for external interrupt specified
1509:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1510:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  IRQn   The positive number of the external interrupt to disable
1511:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1512:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
1513:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * The interrupt number cannot be a negative value.
1514:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1515:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1516:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1517:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
1518:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1519:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1520:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1521:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Read the interrupt pending bit for a device specific interrupt source
1522:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1523:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  IRQn    The number of the device specifc interrupt
1524:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return         1 = interrupt pending, 0 = interrupt not pending
1525:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1526:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Read the pending register in NVIC and return 1 if its status is pending,
1527:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * otherwise it returns 0
1528:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1529:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1530:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1531:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
1532:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1533:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1534:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1535:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the pending bit for an external interrupt
1536:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1537:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  IRQn    The number of the interrupt for set pending
1538:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1539:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the pending bit for the specified interrupt.
1540:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * The interrupt number cannot be a negative value.
1541:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1542:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1543:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1544:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
1545:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1546:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1547:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1548:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Clear the pending bit for an external interrupt
1549:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1550:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  IRQn    The number of the interrupt for clear pending
1551:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1552:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Clear the pending bit for the specified interrupt.
1553:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * The interrupt number cannot be a negative value.
1554:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1555:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1556:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1557:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
1558:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1559:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1560:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1561:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Read the active bit for an external interrupt
1562:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1563:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  IRQn    The number of the interrupt for read active bit
1564:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return         1 = interrupt active, 0 = interrupt not active
1565:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1566:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Read the active register in NVIC and returns 1 if its status is active,
1567:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * otherwise it returns 0.
1568:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1569:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1570:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1571:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /
1572:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1573:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1574:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1575:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the priority for an interrupt
1576:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1577:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  IRQn      The number of the interrupt for set priority
1578:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  priority  The priority to set
1579:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1580:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the priority for the specified interrupt. The interrupt
1581:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * number can be positive to specify an external (device specific)
1582:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * interrupt, or negative to specify an internal (core) interrupt.
1583:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1584:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Note: The priority cannot be set for every core interrupt.
1585:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1586:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1587:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
  27              		.loc 1 1587 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 80B4     		push	{r7}
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 83B0     		sub	sp, sp, #12
  36              		.cfi_def_cfa_offset 16
  37 0004 00AF     		add	r7, sp, #0
  38              		.cfi_def_cfa_register 7
  39 0006 0346     		mov	r3, r0
  40 0008 3960     		str	r1, [r7]
  41 000a FB71     		strb	r3, [r7, #7]
1588:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   if(IRQn < 0) {
  42              		.loc 1 1588 0
  43 000c 97F90730 		ldrsb	r3, [r7, #7]
  44 0010 002B     		cmp	r3, #0
  45 0012 0BDA     		bge	.L2
1589:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
  46              		.loc 1 1589 0
  47 0014 0D49     		ldr	r1, .L5
  48 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  49 0018 03F00F03 		and	r3, r3, #15
  50 001c 043B     		subs	r3, r3, #4
  51 001e 3A68     		ldr	r2, [r7]
  52 0020 D2B2     		uxtb	r2, r2
  53 0022 D200     		lsls	r2, r2, #3
  54 0024 D2B2     		uxtb	r2, r2
  55 0026 0B44     		add	r3, r3, r1
  56 0028 1A76     		strb	r2, [r3, #24]
1590:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   else {
1591:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****     NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set 
1592:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
  57              		.loc 1 1592 0
  58 002a 09E0     		b	.L4
  59              	.L2:
1591:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
  60              		.loc 1 1591 0
  61 002c 0849     		ldr	r1, .L5+4
  62 002e 97F90730 		ldrsb	r3, [r7, #7]
  63 0032 3A68     		ldr	r2, [r7]
  64 0034 D2B2     		uxtb	r2, r2
  65 0036 D200     		lsls	r2, r2, #3
  66 0038 D2B2     		uxtb	r2, r2
  67 003a 0B44     		add	r3, r3, r1
  68 003c 83F80023 		strb	r2, [r3, #768]
  69              	.L4:
  70              		.loc 1 1592 0
  71 0040 00BF     		nop
  72 0042 0C37     		adds	r7, r7, #12
  73              		.cfi_def_cfa_offset 4
  74 0044 BD46     		mov	sp, r7
  75              		.cfi_def_cfa_register 13
  76              		@ sp needed
  77 0046 80BC     		pop	{r7}
  78              		.cfi_restore 7
  79              		.cfi_def_cfa_offset 0
  80 0048 7047     		bx	lr
  81              	.L6:
  82 004a 00BF     		.align	2
  83              	.L5:
  84 004c 00ED00E0 		.word	-536810240
  85 0050 00E100E0 		.word	-536813312
  86              		.cfi_endproc
  87              	.LFE21:
  89              		.section	.text.SysTick_Config,"ax",%progbits
  90              		.align	2
  91              		.thumb
  92              		.thumb_func
  94              	SysTick_Config:
  95              	.LFB25:
1593:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1594:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1595:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Read the priority for an interrupt
1596:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1597:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  IRQn      The number of the interrupt for get priority
1598:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return           The priority for the interrupt
1599:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1600:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Read the priority for the specified interrupt. The interrupt
1601:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * number can be positive to specify an external (device specific)
1602:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * interrupt, or negative to specify an internal (core) interrupt.
1603:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1604:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * The returned priority value is automatically aligned to the implemented
1605:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * priority bits of the microcontroller.
1606:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1607:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Note: The priority cannot be set for every core interrupt.
1608:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1609:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
1610:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1611:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1612:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   if(IRQn < 0) {
1613:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****     return((uint32_t)(SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - __NVIC_PRIO_BITS)));  } /* get p
1614:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   else {
1615:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****     return((uint32_t)(NVIC->IP[(uint32_t)(IRQn)]           >> (8 - __NVIC_PRIO_BITS)));  } /* get p
1616:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1617:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1618:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1619:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1620:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Encode the priority for an interrupt
1621:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1622:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  PriorityGroup    The used priority group
1623:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  PreemptPriority  The preemptive priority value (starting from 0)
1624:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  SubPriority      The sub priority value (starting from 0)
1625:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return                  The encoded priority for the interrupt
1626:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1627:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Encode the priority for an interrupt with the given priority group,
1628:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * preemptive priority value and sub priority value.
1629:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * In case of a conflict between priority grouping and available
1630:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
1631:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1632:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * The returned priority value can be used for NVIC_SetPriority(...) function
1633:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1634:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1635:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1636:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used        
1637:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   uint32_t PreemptPriorityBits;
1638:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   uint32_t SubPriorityBits;
1639:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1640:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - Priori
1641:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __
1642:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1643:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   return (
1644:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****            ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
1645:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****            ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
1646:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****          );
1647:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1648:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1649:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1650:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1651:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Decode the priority of an interrupt
1652:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1653:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  Priority           The priority for the interrupt
1654:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  PriorityGroup      The used priority group
1655:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  pPreemptPriority   The preemptive priority value (starting from 0)
1656:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  pSubPriority       The sub priority value (starting from 0)
1657:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1658:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Decode an interrupt priority value with the given priority group to
1659:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * preemptive priority value and sub priority value.
1660:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * In case of a conflict between priority grouping and available
1661:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
1662:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1663:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * The priority value can be retrieved with NVIC_GetPriority(...) function
1664:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1665:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* pPre
1666:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1667:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used        
1668:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   uint32_t PreemptPriorityBits;
1669:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   uint32_t SubPriorityBits;
1670:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1671:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - Priori
1672:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __
1673:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1674:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & ((1 << (PreemptPriorityBits)) - 1);
1675:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   *pSubPriority     = (Priority                   ) & ((1 << (SubPriorityBits    )) - 1);
1676:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1677:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1678:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1679:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1680:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* ##################################    SysTick function  ########################################
1681:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1682:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #if (!defined (__Vendor_SysTickConfig)) || (__Vendor_SysTickConfig == 0)
1683:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1684:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1685:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Initialize and start the SysTick counter and its interrupt.
1686:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1687:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param   ticks   number of ticks between two interrupts
1688:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return  1 = failed, 0 = successful
1689:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1690:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Initialise the system tick timer and its interrupt and start the
1691:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * system tick timer / counter in free running mode to generate
1692:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * periodical interrupts.
1693:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1694:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE uint32_t SysTick_Config(uint32_t ticks)
1695:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
  96              		.loc 1 1695 0
  97              		.cfi_startproc
  98              		@ args = 0, pretend = 0, frame = 8
  99              		@ frame_needed = 1, uses_anonymous_args = 0
 100 0000 80B5     		push	{r7, lr}
 101              		.cfi_def_cfa_offset 8
 102              		.cfi_offset 7, -8
 103              		.cfi_offset 14, -4
 104 0002 82B0     		sub	sp, sp, #8
 105              		.cfi_def_cfa_offset 16
 106 0004 00AF     		add	r7, sp, #0
 107              		.cfi_def_cfa_register 7
 108 0006 7860     		str	r0, [r7, #4]
1696:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 109              		.loc 1 1696 0
 110 0008 7B68     		ldr	r3, [r7, #4]
 111 000a B3F1807F 		cmp	r3, #16777216
 112 000e 01D3     		bcc	.L8
 113              		.loc 1 1696 0 is_stmt 0 discriminator 1
 114 0010 0123     		movs	r3, #1
 115 0012 11E0     		b	.L9
 116              	.L8:
1697:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1698:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 117              		.loc 1 1698 0 is_stmt 1
 118 0014 0A4A     		ldr	r2, .L10
 119 0016 7B68     		ldr	r3, [r7, #4]
 120 0018 23F07F43 		bic	r3, r3, #-16777216
 121 001c 013B     		subs	r3, r3, #1
 122 001e 5360     		str	r3, [r2, #4]
1699:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System
 123              		.loc 1 1699 0
 124 0020 1F21     		movs	r1, #31
 125 0022 4FF0FF30 		mov	r0, #-1
 126 0026 FFF7FEFF 		bl	NVIC_SetPriority
1700:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 127              		.loc 1 1700 0
 128 002a 054B     		ldr	r3, .L10
 129 002c 0022     		movs	r2, #0
 130 002e 9A60     		str	r2, [r3, #8]
1701:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 131              		.loc 1 1701 0
 132 0030 034B     		ldr	r3, .L10
 133 0032 0722     		movs	r2, #7
 134 0034 1A60     		str	r2, [r3]
1702:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****                    SysTick_CTRL_TICKINT_Msk   |
1703:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****                    SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Ti
1704:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   return (0);                                                  /* Function successful */
 135              		.loc 1 1704 0
 136 0036 0023     		movs	r3, #0
 137              	.L9:
1705:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
 138              		.loc 1 1705 0
 139 0038 1846     		mov	r0, r3
 140 003a 0837     		adds	r7, r7, #8
 141              		.cfi_def_cfa_offset 8
 142 003c BD46     		mov	sp, r7
 143              		.cfi_def_cfa_register 13
 144              		@ sp needed
 145 003e 80BD     		pop	{r7, pc}
 146              	.L11:
 147              		.align	2
 148              	.L10:
 149 0040 10E000E0 		.word	-536813552
 150              		.cfi_endproc
 151              	.LFE25:
 153              		.section	.bss.netif_eth0_data,"aw",%nobits
 154              		.align	2
 157              	netif_eth0_data:
 158 0000 00000000 		.space	48
 158      00000000 
 158      00000000 
 158      00000000 
 158      00000000 
 159              		.section	.data.netif_eth0,"aw",%progbits
 160              		.align	2
 163              	netif_eth0:
 164 0000 00000000 		.word	netif_eth0_data
 165              		.section	.bss.my_ipaddr_data,"aw",%nobits
 166              		.align	2
 169              	my_ipaddr_data:
 170 0000 00000000 		.space	4
 171              		.section	.bss.my_netmask_data,"aw",%nobits
 172              		.align	2
 175              	my_netmask_data:
 176 0000 00000000 		.space	4
 177              		.section	.bss.my_gw_data,"aw",%nobits
 178              		.align	2
 181              	my_gw_data:
 182 0000 00000000 		.space	4
 183              		.section	.bss.last_arp_time,"aw",%nobits
 184              		.align	2
 187              	last_arp_time:
 188 0000 00000000 		.space	4
 189              		.section	.bss.last_tcpslow_time,"aw",%nobits
 190              		.align	2
 193              	last_tcpslow_time:
 194 0000 00000000 		.space	4
 195              		.section	.bss.last_tcpfast_time,"aw",%nobits
 196              		.align	2
 199              	last_tcpfast_time:
 200 0000 00000000 		.space	4
 201              		.section	.bss.last_tcp_time,"aw",%nobits
 202              		.align	2
 205              	last_tcp_time:
 206 0000 00000000 		.space	4
 207              		.section	.bss.last_dhcpcoarse_time,"aw",%nobits
 208              		.align	2
 211              	last_dhcpcoarse_time:
 212 0000 00000000 		.space	4
 213              		.section	.bss.last_dhcpfine_time,"aw",%nobits
 214              		.align	2
 217              	last_dhcpfine_time:
 218 0000 00000000 		.space	4
 219              		.section	.bss.light_on,"aw",%nobits
 220              		.align	2
 223              	light_on:
 224 0000 00000000 		.space	4
 225              		.section	.bss.light_off,"aw",%nobits
 226              		.align	2
 229              	light_off:
 230 0000 00000000 		.space	4
 231              		.section	.bss.recvd_UDP_data,"aw",%nobits
 232              		.align	2
 235              	recvd_UDP_data:
 236 0000 00000000 		.space	4
 237              		.section	.bss.recvd_TCP_data,"aw",%nobits
 238              		.align	2
 241              	recvd_TCP_data:
 242 0000 00000000 		.space	4
 243              		.comm	command_type,1,1
 244              		.comm	command_RW,1,1
 245              		.comm	device_ID,4,4
 246              		.comm	command_parameter,4,4
 247              		.section	.rodata.iap_entry,"a",%progbits
 248              		.align	2
 251              	iap_entry:
 252 0000 F11FFF1F 		.word	536813553
 253              		.comm	timer_tick,4,4
 254              		.global	timeCounter
 255              		.section	.bss.timeCounter,"aw",%nobits
 256              		.align	2
 259              	timeCounter:
 260 0000 00000000 		.space	4
 261              		.comm	command_ptr,4,4
 262              		.global	state
 263              		.section	.bss.state,"aw",%nobits
 266              	state:
 267 0000 00       		.space	1
 268              		.comm	pbuf_ptr,4,4
 269              		.comm	responseData,4,4
 270              		.section	.text.client_close,"ax",%progbits
 271              		.align	2
 272              		.thumb
 273              		.thumb_func
 275              	client_close:
 276              	.LFB46:
 277              		.file 2 "main.c"
   1:main.c        **** #include <stdio.h>
   2:main.c        **** #include <stdlib.h>
   3:main.c        **** #include <string.h>
   4:main.c        **** 
   5:main.c        **** #include "LPC17xx.h"
   6:main.c        **** #include "comm.h"
   7:main.c        **** #include "monitor.h"
   8:main.c        **** #include "lpc17xx_gpio.h"
   9:main.c        **** 
  10:main.c        **** #include "lwip/mem.h"
  11:main.c        **** #include "lwip/memp.h"
  12:main.c        **** #include "lwip/pbuf.h"
  13:main.c        **** #include "lwip/udp.h"
  14:main.c        **** #include "lwip/tcp.h"
  15:main.c        **** #include "lwip/dhcp.h"
  16:main.c        **** #include "lwip/tcp_impl.h"
  17:main.c        **** #include "lwip/opt.h"
  18:main.c        **** #include "netif/ethernetif.h"
  19:main.c        **** #include "netif/etharp.h"
  20:main.c        **** #include "system_init.h"
  21:main.c        **** #include "delay.h"
  22:main.c        **** #include "bootLoader.h"
  23:main.c        **** 
  24:main.c        **** #define TIMER_TICK_HZ 1000
  25:main.c        **** #define ACK_SIZE		1
  26:main.c        **** #define ADDR_SIZE		4
  27:main.c        **** #define SEGMENT_SIZE	512
  28:main.c        **** 
  29:main.c        **** 
  30:main.c        **** extern uint32_t addrBeginPage;
  31:main.c        **** extern uint32_t dataArrIndex;
  32:main.c        **** extern uint32_t pageSize;
  33:main.c        **** extern uint8_t segmentNumberRecvd;
  34:main.c        **** volatile unsigned long timer_tick;
  35:main.c        **** 
  36:main.c        **** volatile u32_t timeCounter=0;
  37:main.c        **** 
  38:main.c        **** command_t *command_ptr;
  39:main.c        **** uint8_t state=0;
  40:main.c        **** //uint16_t byteSent=0;
  41:main.c        **** struct pbuf *pbuf_ptr;
  42:main.c        **** uint8_t *responseData;
  43:main.c        **** 
  44:main.c        **** static void client_close(struct tcp_pcb *pcb)
  45:main.c        **** {
 278              		.loc 2 45 0
 279              		.cfi_startproc
 280              		@ args = 0, pretend = 0, frame = 8
 281              		@ frame_needed = 1, uses_anonymous_args = 0
 282 0000 80B5     		push	{r7, lr}
 283              		.cfi_def_cfa_offset 8
 284              		.cfi_offset 7, -8
 285              		.cfi_offset 14, -4
 286 0002 82B0     		sub	sp, sp, #8
 287              		.cfi_def_cfa_offset 16
 288 0004 00AF     		add	r7, sp, #0
 289              		.cfi_def_cfa_register 7
 290 0006 7860     		str	r0, [r7, #4]
  46:main.c        **** 	tcp_arg(pcb, NULL);
 291              		.loc 2 46 0
 292 0008 0021     		movs	r1, #0
 293 000a 7868     		ldr	r0, [r7, #4]
 294 000c FFF7FEFF 		bl	tcp_arg
  47:main.c        **** 	tcp_sent(pcb, NULL);
 295              		.loc 2 47 0
 296 0010 0021     		movs	r1, #0
 297 0012 7868     		ldr	r0, [r7, #4]
 298 0014 FFF7FEFF 		bl	tcp_sent
  48:main.c        **** 	tcp_close(pcb);
 299              		.loc 2 48 0
 300 0018 7868     		ldr	r0, [r7, #4]
 301 001a FFF7FEFF 		bl	tcp_close
  49:main.c        **** }
 302              		.loc 2 49 0
 303 001e 00BF     		nop
 304 0020 0837     		adds	r7, r7, #8
 305              		.cfi_def_cfa_offset 8
 306 0022 BD46     		mov	sp, r7
 307              		.cfi_def_cfa_register 13
 308              		@ sp needed
 309 0024 80BD     		pop	{r7, pc}
 310              		.cfi_endproc
 311              	.LFE46:
 313 0026 00BF     		.section	.text.client_sent,"ax",%progbits
 314              		.align	2
 315              		.thumb
 316              		.thumb_func
 318              	client_sent:
 319              	.LFB47:
  50:main.c        **** 
  51:main.c        **** static err_t client_sent(void *arg, struct tcp_pcb *pcb, u16_t len)
  52:main.c        **** {
 320              		.loc 2 52 0
 321              		.cfi_startproc
 322              		@ args = 0, pretend = 0, frame = 16
 323              		@ frame_needed = 1, uses_anonymous_args = 0
 324 0000 80B5     		push	{r7, lr}
 325              		.cfi_def_cfa_offset 8
 326              		.cfi_offset 7, -8
 327              		.cfi_offset 14, -4
 328 0002 84B0     		sub	sp, sp, #16
 329              		.cfi_def_cfa_offset 24
 330 0004 00AF     		add	r7, sp, #0
 331              		.cfi_def_cfa_register 7
 332 0006 F860     		str	r0, [r7, #12]
 333 0008 B960     		str	r1, [r7, #8]
 334 000a 1346     		mov	r3, r2
 335 000c FB80     		strh	r3, [r7, #6]	@ movhi
  53:main.c        **** 	LWIP_UNUSED_ARG(arg);
  54:main.c        **** 	client_close(pcb);
 336              		.loc 2 54 0
 337 000e B868     		ldr	r0, [r7, #8]
 338 0010 FFF7FEFF 		bl	client_close
  55:main.c        **** 	return ERR_OK;
 339              		.loc 2 55 0
 340 0014 0023     		movs	r3, #0
  56:main.c        **** }
 341              		.loc 2 56 0
 342 0016 1846     		mov	r0, r3
 343 0018 1037     		adds	r7, r7, #16
 344              		.cfi_def_cfa_offset 8
 345 001a BD46     		mov	sp, r7
 346              		.cfi_def_cfa_register 13
 347              		@ sp needed
 348 001c 80BD     		pop	{r7, pc}
 349              		.cfi_endproc
 350              	.LFE47:
 352 001e 00BF     		.section	.text.client_init,"ax",%progbits
 353              		.align	2
 354              		.global	client_init
 355              		.thumb
 356              		.thumb_func
 358              	client_init:
 359              	.LFB48:
  57:main.c        **** 
  58:main.c        **** void client_init(void)
  59:main.c        **** {
 360              		.loc 2 59 0
 361              		.cfi_startproc
 362              		@ args = 0, pretend = 0, frame = 16
 363              		@ frame_needed = 1, uses_anonymous_args = 0
 364 0000 80B5     		push	{r7, lr}
 365              		.cfi_def_cfa_offset 8
 366              		.cfi_offset 7, -8
 367              		.cfi_offset 14, -4
 368 0002 84B0     		sub	sp, sp, #16
 369              		.cfi_def_cfa_offset 24
 370 0004 00AF     		add	r7, sp, #0
 371              		.cfi_def_cfa_register 7
  60:main.c        ****    struct tcp_pcb *pcb;
  61:main.c        ****    struct ip_addr dest;
  62:main.c        ****    err_t ret_val;
  63:main.c        **** 
  64:main.c        ****    IP4_ADDR(&dest, 192, 168, 1, 30);			// IP address of the client
 372              		.loc 2 64 0
 373 0006 0D4B     		ldr	r3, .L16
 374 0008 7B60     		str	r3, [r7, #4]
  65:main.c        **** 
  66:main.c        ****    pcb = tcp_new();
 375              		.loc 2 66 0
 376 000a FFF7FEFF 		bl	tcp_new
 377 000e F860     		str	r0, [r7, #12]
  67:main.c        ****    tcp_bind(pcb, IP_ADDR_ANY, SEND_PORT); //client port for outcoming connection
 378              		.loc 2 67 0
 379 0010 42F22832 		movw	r2, #9000
 380 0014 0A49     		ldr	r1, .L16+4
 381 0016 F868     		ldr	r0, [r7, #12]
 382 0018 FFF7FEFF 		bl	tcp_bind
  68:main.c        ****    tcp_arg(pcb, NULL);
 383              		.loc 2 68 0
 384 001c 0021     		movs	r1, #0
 385 001e F868     		ldr	r0, [r7, #12]
 386 0020 FFF7FEFF 		bl	tcp_arg
  69:main.c        **** 
  70:main.c        ****    ret_val = tcp_connect(pcb, &dest, 8000, client_connected); //server port for incoming connection
 387              		.loc 2 70 0
 388 0024 391D     		adds	r1, r7, #4
 389 0026 074B     		ldr	r3, .L16+8
 390 0028 4FF4FA52 		mov	r2, #8000
 391 002c F868     		ldr	r0, [r7, #12]
 392 002e FFF7FEFF 		bl	tcp_connect
 393 0032 B860     		str	r0, [r7, #8]
  71:main.c        **** }
 394              		.loc 2 71 0
 395 0034 00BF     		nop
 396 0036 1037     		adds	r7, r7, #16
 397              		.cfi_def_cfa_offset 8
 398 0038 BD46     		mov	sp, r7
 399              		.cfi_def_cfa_register 13
 400              		@ sp needed
 401 003a 80BD     		pop	{r7, pc}
 402              	.L17:
 403              		.align	2
 404              	.L16:
 405 003c C0A8011E 		.word	503425216
 406 0040 00000000 		.word	ip_addr_any
 407 0044 00000000 		.word	client_connected
 408              		.cfi_endproc
 409              	.LFE48:
 411              		.section	.rodata
 412              		.align	2
 413              	.LC0:
 414 0000 48656C6C 		.ascii	"Hello World\015\012\000"
 414      6F20576F 
 414      726C640D 
 414      0A00
 415              		.section	.text.client_connected,"ax",%progbits
 416              		.align	2
 417              		.thumb
 418              		.thumb_func
 420              	client_connected:
 421              	.LFB49:
  72:main.c        **** 
  73:main.c        **** static err_t client_connected(void *arg, struct tcp_pcb *pcb, err_t err)
  74:main.c        **** {
 422              		.loc 2 74 0
 423              		.cfi_startproc
 424              		@ args = 0, pretend = 0, frame = 24
 425              		@ frame_needed = 1, uses_anonymous_args = 0
 426 0000 80B5     		push	{r7, lr}
 427              		.cfi_def_cfa_offset 8
 428              		.cfi_offset 7, -8
 429              		.cfi_offset 14, -4
 430 0002 86B0     		sub	sp, sp, #24
 431              		.cfi_def_cfa_offset 32
 432 0004 00AF     		add	r7, sp, #0
 433              		.cfi_def_cfa_register 7
 434 0006 F860     		str	r0, [r7, #12]
 435 0008 B960     		str	r1, [r7, #8]
 436 000a 7A60     		str	r2, [r7, #4]
  75:main.c        **** 	char *string = "Hello World\r\n";
 437              		.loc 2 75 0
 438 000c 0B4B     		ldr	r3, .L21
 439 000e 7B61     		str	r3, [r7, #20]
  76:main.c        **** 	LWIP_UNUSED_ARG(arg);
  77:main.c        **** 	//l++;
  78:main.c        **** 	if (err != ERR_OK)
 440              		.loc 2 78 0
 441 0010 7B68     		ldr	r3, [r7, #4]
 442 0012 002B     		cmp	r3, #0
 443 0014 0DD1     		bne	.L19
  79:main.c        **** 	{
  80:main.c        **** 	}
  81:main.c        **** 	else
  82:main.c        **** 	{
  83:main.c        **** 		tcp_sent(pcb, client_sent);
 444              		.loc 2 83 0
 445 0016 0A49     		ldr	r1, .L21+4
 446 0018 B868     		ldr	r0, [r7, #8]
 447 001a FFF7FEFF 		bl	tcp_sent
  84:main.c        **** 		tcp_write(pcb, string,/*sizeof(string)*/13,0);
 448              		.loc 2 84 0
 449 001e 0023     		movs	r3, #0
 450 0020 0D22     		movs	r2, #13
 451 0022 7969     		ldr	r1, [r7, #20]
 452 0024 B868     		ldr	r0, [r7, #8]
 453 0026 FFF7FEFF 		bl	tcp_write
  85:main.c        **** 		tcp_recv(pcb, server_recv);
 454              		.loc 2 85 0
 455 002a 0649     		ldr	r1, .L21+8
 456 002c B868     		ldr	r0, [r7, #8]
 457 002e FFF7FEFF 		bl	tcp_recv
 458              	.L19:
  86:main.c        **** 	}
  87:main.c        **** 	return err;
 459              		.loc 2 87 0
 460 0032 7B68     		ldr	r3, [r7, #4]
  88:main.c        **** }
 461              		.loc 2 88 0
 462 0034 1846     		mov	r0, r3
 463 0036 1837     		adds	r7, r7, #24
 464              		.cfi_def_cfa_offset 8
 465 0038 BD46     		mov	sp, r7
 466              		.cfi_def_cfa_register 13
 467              		@ sp needed
 468 003a 80BD     		pop	{r7, pc}
 469              	.L22:
 470              		.align	2
 471              	.L21:
 472 003c 00000000 		.word	.LC0
 473 0040 00000000 		.word	client_sent
 474 0044 00000000 		.word	server_recv
 475              		.cfi_endproc
 476              	.LFE49:
 478              		.comm	systick_counter,4,4
 479              		.section	.text.SysTick_Handler,"ax",%progbits
 480              		.align	2
 481              		.global	SysTick_Handler
 482              		.thumb
 483              		.thumb_func
 485              	SysTick_Handler:
 486              	.LFB50:
  89:main.c        **** 
  90:main.c        **** volatile u32_t systick_counter;				/* counts 1ms timeTicks */
  91:main.c        **** 
  92:main.c        **** /* SysTick Interrupt Handler (1ms) */
  93:main.c        **** void SysTick_Handler (void)
  94:main.c        **** {
 487              		.loc 2 94 0
 488              		.cfi_startproc
 489              		@ args = 0, pretend = 0, frame = 0
 490              		@ frame_needed = 1, uses_anonymous_args = 0
 491              		@ link register save eliminated.
 492 0000 80B4     		push	{r7}
 493              		.cfi_def_cfa_offset 4
 494              		.cfi_offset 7, -4
 495 0002 00AF     		add	r7, sp, #0
 496              		.cfi_def_cfa_register 7
  95:main.c        **** 	systick_counter++;
 497              		.loc 2 95 0
 498 0004 084B     		ldr	r3, .L26
 499 0006 1B68     		ldr	r3, [r3]
 500 0008 0133     		adds	r3, r3, #1
 501 000a 074A     		ldr	r2, .L26
 502 000c 1360     		str	r3, [r2]
  96:main.c        **** 	if(timer_tick > 0)						// Refer the delay.c file for use of timer_tick
 503              		.loc 2 96 0
 504 000e 074B     		ldr	r3, .L26+4
 505 0010 1B68     		ldr	r3, [r3]
 506 0012 002B     		cmp	r3, #0
 507 0014 04D0     		beq	.L25
  97:main.c        **** 	{
  98:main.c        **** 		-- timer_tick;
 508              		.loc 2 98 0
 509 0016 054B     		ldr	r3, .L26+4
 510 0018 1B68     		ldr	r3, [r3]
 511 001a 013B     		subs	r3, r3, #1
 512 001c 034A     		ldr	r2, .L26+4
 513 001e 1360     		str	r3, [r2]
 514              	.L25:
  99:main.c        **** 	}
 100:main.c        **** }
 515              		.loc 2 100 0
 516 0020 00BF     		nop
 517 0022 BD46     		mov	sp, r7
 518              		.cfi_def_cfa_register 13
 519              		@ sp needed
 520 0024 80BC     		pop	{r7}
 521              		.cfi_restore 7
 522              		.cfi_def_cfa_offset 0
 523 0026 7047     		bx	lr
 524              	.L27:
 525              		.align	2
 526              	.L26:
 527 0028 00000000 		.word	systick_counter
 528 002c 00000000 		.word	timer_tick
 529              		.cfi_endproc
 530              	.LFE50:
 532              		.section	.text.Delay,"ax",%progbits
 533              		.align	2
 534              		.global	Delay
 535              		.thumb
 536              		.thumb_func
 538              	Delay:
 539              	.LFB51:
 101:main.c        **** 
 102:main.c        **** void Delay (uint32_t dlyTicks) {
 540              		.loc 2 102 0
 541              		.cfi_startproc
 542              		@ args = 0, pretend = 0, frame = 16
 543              		@ frame_needed = 1, uses_anonymous_args = 0
 544              		@ link register save eliminated.
 545 0000 80B4     		push	{r7}
 546              		.cfi_def_cfa_offset 4
 547              		.cfi_offset 7, -4
 548 0002 85B0     		sub	sp, sp, #20
 549              		.cfi_def_cfa_offset 24
 550 0004 00AF     		add	r7, sp, #0
 551              		.cfi_def_cfa_register 7
 552 0006 7860     		str	r0, [r7, #4]
 103:main.c        **** 	uint32_t curTicks;
 104:main.c        **** 
 105:main.c        **** 	curTicks = systick_counter;
 553              		.loc 2 105 0
 554 0008 074B     		ldr	r3, .L30
 555 000a 1B68     		ldr	r3, [r3]
 556 000c FB60     		str	r3, [r7, #12]
 106:main.c        **** 	while ((systick_counter - curTicks) < dlyTicks);
 557              		.loc 2 106 0
 558 000e 00BF     		nop
 559              	.L29:
 560              		.loc 2 106 0 is_stmt 0 discriminator 1
 561 0010 054B     		ldr	r3, .L30
 562 0012 1A68     		ldr	r2, [r3]
 563 0014 FB68     		ldr	r3, [r7, #12]
 564 0016 D21A     		subs	r2, r2, r3
 565 0018 7B68     		ldr	r3, [r7, #4]
 566 001a 9A42     		cmp	r2, r3
 567 001c F8D3     		bcc	.L29
 107:main.c        **** }
 568              		.loc 2 107 0 is_stmt 1
 569 001e 00BF     		nop
 570 0020 1437     		adds	r7, r7, #20
 571              		.cfi_def_cfa_offset 4
 572 0022 BD46     		mov	sp, r7
 573              		.cfi_def_cfa_register 13
 574              		@ sp needed
 575 0024 80BC     		pop	{r7}
 576              		.cfi_restore 7
 577              		.cfi_def_cfa_offset 0
 578 0026 7047     		bx	lr
 579              	.L31:
 580              		.align	2
 581              	.L30:
 582 0028 00000000 		.word	systick_counter
 583              		.cfi_endproc
 584              	.LFE51:
 586              		.section	.text.lwip_init,"ax",%progbits
 587              		.align	2
 588              		.thumb
 589              		.thumb_func
 591              	lwip_init:
 592              	.LFB52:
 108:main.c        **** 
 109:main.c        **** static void lwip_init(void)
 110:main.c        **** {
 593              		.loc 2 110 0
 594              		.cfi_startproc
 595              		@ args = 0, pretend = 0, frame = 0
 596              		@ frame_needed = 1, uses_anonymous_args = 0
 597 0000 80B5     		push	{r7, lr}
 598              		.cfi_def_cfa_offset 8
 599              		.cfi_offset 7, -8
 600              		.cfi_offset 14, -4
 601 0002 84B0     		sub	sp, sp, #16
 602              		.cfi_def_cfa_offset 24
 603 0004 04AF     		add	r7, sp, #16
 604              		.cfi_def_cfa 7, 8
 111:main.c        **** 	mem_init();
 605              		.loc 2 111 0
 606 0006 FFF7FEFF 		bl	mem_init
 112:main.c        **** 	memp_init();
 607              		.loc 2 112 0
 608 000a FFF7FEFF 		bl	memp_init
 113:main.c        **** 
 114:main.c        **** 	pbuf_init();
 115:main.c        **** 
 116:main.c        **** 	etharp_init();
 117:main.c        **** 
 118:main.c        **** 	ip_init();
 119:main.c        **** 	tcp_init();
 120:main.c        **** 	{
 121:main.c        **** 		IP4_ADDR(&my_ipaddr_data,  192, 168, 43, 100);
 609              		.loc 2 121 0
 610 000e 124B     		ldr	r3, .L33
 611 0010 124A     		ldr	r2, .L33+4
 612 0012 1A60     		str	r2, [r3]
 122:main.c        **** 		IP4_ADDR(&my_netmask_data, 255, 255, 255, 0);
 613              		.loc 2 122 0
 614 0014 124B     		ldr	r3, .L33+8
 615 0016 6FF07F42 		mvn	r2, #-16777216
 616 001a 1A60     		str	r2, [r3]
 123:main.c        **** 		IP4_ADDR(&my_gw_data, 192, 168, 43, 61);
 617              		.loc 2 123 0
 618 001c 114B     		ldr	r3, .L33+12
 619 001e 124A     		ldr	r2, .L33+16
 620 0020 1A60     		str	r2, [r3]
 124:main.c        **** 	}
 125:main.c        **** 
 126:main.c        **** 	netif_add(netif_eth0, &my_ipaddr_data, &my_netmask_data, &my_gw_data, NULL, ethernetif_init, ether
 621              		.loc 2 126 0
 622 0022 124B     		ldr	r3, .L33+20
 623 0024 1868     		ldr	r0, [r3]
 624 0026 124B     		ldr	r3, .L33+24
 625 0028 0293     		str	r3, [sp, #8]
 626 002a 124B     		ldr	r3, .L33+28
 627 002c 0193     		str	r3, [sp, #4]
 628 002e 0023     		movs	r3, #0
 629 0030 0093     		str	r3, [sp]
 630 0032 0C4B     		ldr	r3, .L33+12
 631 0034 0A4A     		ldr	r2, .L33+8
 632 0036 0849     		ldr	r1, .L33
 633 0038 FFF7FEFF 		bl	netif_add
 127:main.c        **** 
 128:main.c        **** 	netif_set_default(netif_eth0);
 634              		.loc 2 128 0
 635 003c 0B4B     		ldr	r3, .L33+20
 636 003e 1B68     		ldr	r3, [r3]
 637 0040 1846     		mov	r0, r3
 638 0042 FFF7FEFF 		bl	netif_set_default
 129:main.c        **** 
 130:main.c        **** 	netif_set_up(netif_eth0);
 639              		.loc 2 130 0
 640 0046 094B     		ldr	r3, .L33+20
 641 0048 1B68     		ldr	r3, [r3]
 642 004a 1846     		mov	r0, r3
 643 004c FFF7FEFF 		bl	netif_set_up
 131:main.c        **** }
 644              		.loc 2 131 0
 645 0050 00BF     		nop
 646 0052 BD46     		mov	sp, r7
 647              		.cfi_def_cfa_register 13
 648              		@ sp needed
 649 0054 80BD     		pop	{r7, pc}
 650              	.L34:
 651 0056 00BF     		.align	2
 652              	.L33:
 653 0058 00000000 		.word	my_ipaddr_data
 654 005c C0A82B64 		.word	1680582848
 655 0060 00000000 		.word	my_netmask_data
 656 0064 00000000 		.word	my_gw_data
 657 0068 C0A82B3D 		.word	1026271424
 658 006c 00000000 		.word	netif_eth0
 659 0070 00000000 		.word	ethernet_input
 660 0074 00000000 		.word	ethernetif_init
 661              		.cfi_endproc
 662              	.LFE52:
 664              		.section	.text.acceptTCP,"ax",%progbits
 665              		.align	2
 666              		.global	acceptTCP
 667              		.thumb
 668              		.thumb_func
 670              	acceptTCP:
 671              	.LFB53:
 132:main.c        **** err_t acceptTCP(void *arg, struct tcp_pcb *newpcb, err_t err)
 133:main.c        **** {
 672              		.loc 2 133 0
 673              		.cfi_startproc
 674              		@ args = 0, pretend = 0, frame = 24
 675              		@ frame_needed = 1, uses_anonymous_args = 0
 676 0000 80B5     		push	{r7, lr}
 677              		.cfi_def_cfa_offset 8
 678              		.cfi_offset 7, -8
 679              		.cfi_offset 14, -4
 680 0002 86B0     		sub	sp, sp, #24
 681              		.cfi_def_cfa_offset 32
 682 0004 00AF     		add	r7, sp, #0
 683              		.cfi_def_cfa_register 7
 684 0006 F860     		str	r0, [r7, #12]
 685 0008 B960     		str	r1, [r7, #8]
 686 000a 7A60     		str	r2, [r7, #4]
 134:main.c        **** 	err_t ret_err;
 135:main.c        **** 	LWIP_UNUSED_ARG(arg);
 136:main.c        **** 	LWIP_UNUSED_ARG(err);
 137:main.c        **** 
 138:main.c        **** 	tcp_setprio(newpcb, TCP_PRIO_MIN);
 687              		.loc 2 138 0
 688 000c 0121     		movs	r1, #1
 689 000e B868     		ldr	r0, [r7, #8]
 690 0010 FFF7FEFF 		bl	tcp_setprio
 139:main.c        **** 	newpcb->state=ESTABLISHED;
 691              		.loc 2 139 0
 692 0014 BB68     		ldr	r3, [r7, #8]
 693 0016 0422     		movs	r2, #4
 694 0018 1A74     		strb	r2, [r3, #16]
 140:main.c        **** 
 141:main.c        **** 		tcp_recv(newpcb, recvTCP);
 695              		.loc 2 141 0
 696 001a 0C49     		ldr	r1, .L37
 697 001c B868     		ldr	r0, [r7, #8]
 698 001e FFF7FEFF 		bl	tcp_recv
 142:main.c        **** 		tcp_err(newpcb, errorTCP);
 699              		.loc 2 142 0
 700 0022 0B49     		ldr	r1, .L37+4
 701 0024 B868     		ldr	r0, [r7, #8]
 702 0026 FFF7FEFF 		bl	tcp_err
 143:main.c        **** 		tcp_sent(newpcb, sentTCP);
 703              		.loc 2 143 0
 704 002a 0A49     		ldr	r1, .L37+8
 705 002c B868     		ldr	r0, [r7, #8]
 706 002e FFF7FEFF 		bl	tcp_sent
 144:main.c        **** 		tcp_poll(newpcb, pollTCP, 0);
 707              		.loc 2 144 0
 708 0032 0022     		movs	r2, #0
 709 0034 0849     		ldr	r1, .L37+12
 710 0036 B868     		ldr	r0, [r7, #8]
 711 0038 FFF7FEFF 		bl	tcp_poll
 145:main.c        **** 		ret_err = ERR_OK;
 712              		.loc 2 145 0
 713 003c 0023     		movs	r3, #0
 714 003e 7B61     		str	r3, [r7, #20]
 146:main.c        **** 
 147:main.c        **** 	return ret_err;
 715              		.loc 2 147 0
 716 0040 7B69     		ldr	r3, [r7, #20]
 148:main.c        **** }
 717              		.loc 2 148 0
 718 0042 1846     		mov	r0, r3
 719 0044 1837     		adds	r7, r7, #24
 720              		.cfi_def_cfa_offset 8
 721 0046 BD46     		mov	sp, r7
 722              		.cfi_def_cfa_register 13
 723              		@ sp needed
 724 0048 80BD     		pop	{r7, pc}
 725              	.L38:
 726 004a 00BF     		.align	2
 727              	.L37:
 728 004c 00000000 		.word	recvTCP
 729 0050 00000000 		.word	errorTCP
 730 0054 00000000 		.word	sentTCP
 731 0058 00000000 		.word	pollTCP
 732              		.cfi_endproc
 733              	.LFE53:
 735              		.section	.text.recvTCP,"ax",%progbits
 736              		.align	2
 737              		.global	recvTCP
 738              		.thumb
 739              		.thumb_func
 741              	recvTCP:
 742              	.LFB54:
 149:main.c        **** 
 150:main.c        **** 
 151:main.c        **** /*This function is called by the tcp_in.c. It is the application layer function.
 152:main.c        ****  * This function is called only when there is data present in the Incoming packet.
 153:main.c        ****  * Thus, in the 3 step connection establishment process, it is not called.
 154:main.c        ****  */
 155:main.c        **** 
 156:main.c        **** err_t recvTCP(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
 157:main.c        **** {
 743              		.loc 2 157 0
 744              		.cfi_startproc
 745              		@ args = 0, pretend = 0, frame = 24
 746              		@ frame_needed = 1, uses_anonymous_args = 0
 747              		@ link register save eliminated.
 748 0000 80B4     		push	{r7}
 749              		.cfi_def_cfa_offset 4
 750              		.cfi_offset 7, -4
 751 0002 87B0     		sub	sp, sp, #28
 752              		.cfi_def_cfa_offset 32
 753 0004 00AF     		add	r7, sp, #0
 754              		.cfi_def_cfa_register 7
 755 0006 F860     		str	r0, [r7, #12]
 756 0008 B960     		str	r1, [r7, #8]
 757 000a 7A60     		str	r2, [r7, #4]
 758 000c 3B60     		str	r3, [r7]
 158:main.c        **** 
 159:main.c        **** 	//Something received.
 160:main.c        **** 	static int recvTCPCount;
 161:main.c        **** 	recvTCPCount += 1;
 759              		.loc 2 161 0
 760 000e 054B     		ldr	r3, .L41
 761 0010 1B68     		ldr	r3, [r3]
 762 0012 0133     		adds	r3, r3, #1
 763 0014 034A     		ldr	r2, .L41
 764 0016 1360     		str	r3, [r2]
 162:main.c        **** 
 163:main.c        **** 	err_t ret_err;
 164:main.c        **** //	uint32_t i;
 165:main.c        **** //
 166:main.c        **** //	command_ptr = p->payload;
 167:main.c        **** //	//addrDecode(dataPointer);
 168:main.c        **** //
 169:main.c        **** //	command_type = command_ptr->command;
 170:main.c        **** //	device_ID = command_ptr->device_id;
 171:main.c        **** //	device_ID = ntohl(device_ID);
 172:main.c        **** //	state=1;
 173:main.c        **** //
 174:main.c        **** //	pbuf_ptr=p;
 175:main.c        **** //
 176:main.c        **** //	tcp_arg(tpcb,p);
 177:main.c        **** //
 178:main.c        **** //
 179:main.c        **** //	//If it is the initial Application ACK which is received by the PC.
 180:main.c        **** //	if((p->tot_len)==1)
 181:main.c        **** //	{
 182:main.c        **** //		//pbuf_ptr = p;
 183:main.c        **** //		tcp_sent(tpcb,sentTCP);
 184:main.c        **** //		ret_err=sendTCP(tpcb,p->payload,p->len);
 185:main.c        **** //		tcp_recved(tpcb,p->tot_len);
 186:main.c        **** //	}
 187:main.c        **** //	//For the Address, it will be 4 bytes.
 188:main.c        **** //	else if((p->tot_len)==4)
 189:main.c        **** //	{
 190:main.c        **** //		addrBeginPage=addrDecode(p->payload);
 191:main.c        **** //		tcp_sent(tpcb,sentTCP);
 192:main.c        **** //		ret_err=sendTCP(tpcb,p->payload,p->len);
 193:main.c        **** //		tcp_recved(tpcb,p->tot_len);
 194:main.c        **** //
 195:main.c        **** //	}
 196:main.c        **** //	else if((p->tot_len)==512)
 197:main.c        **** //	{
 198:main.c        **** //		if(segmentNumberRecvd<MAX_SEGMENT_NUMBER)
 199:main.c        **** //		{
 200:main.c        **** //			cpyDataV2(p);
 201:main.c        **** ////			tcp_sent(tpcb,sentTCP);
 202:main.c        **** ////			ret_err=sendTCP(tpcb,p->payload,p->len);
 203:main.c        **** //			tcp_sent(tpcb,sentTCP);
 204:main.c        **** //			ret_err = sendTCP(tpcb,p->payload,1);
 205:main.c        **** //			segmentNumberRecvd++;
 206:main.c        **** //		}
 207:main.c        **** //		else
 208:main.c        **** //		{
 209:main.c        **** //			segmentNumberRecvd=0;
 210:main.c        **** //			cpyDataV2(p);
 211:main.c        **** //			tcp_sent(tpcb,sentTCP);
 212:main.c        **** ////			ret_err=sendTCP(tpcb,p->payload,p->len);
 213:main.c        **** //			ret_err=sendTCP(tpcb,p->payload,1);
 214:main.c        **** //			memoryWrite(addrBeginPage);
 215:main.c        **** //			ret_err=ERR_OK;
 216:main.c        **** //		}
 217:main.c        **** //		tcp_recved(tpcb,p->tot_len);
 218:main.c        **** //	}
 219:main.c        **** //	else
 220:main.c        **** //	{
 221:main.c        **** //		//pbuf_ptr=NULL;
 222:main.c        **** //		pbuf_free(pbuf_ptr);
 223:main.c        **** //	}
 224:main.c        **** 	return ret_err;
 765              		.loc 2 224 0
 766 0018 7B69     		ldr	r3, [r7, #20]
 225:main.c        **** }
 767              		.loc 2 225 0
 768 001a 1846     		mov	r0, r3
 769 001c 1C37     		adds	r7, r7, #28
 770              		.cfi_def_cfa_offset 4
 771 001e BD46     		mov	sp, r7
 772              		.cfi_def_cfa_register 13
 773              		@ sp needed
 774 0020 80BC     		pop	{r7}
 775              		.cfi_restore 7
 776              		.cfi_def_cfa_offset 0
 777 0022 7047     		bx	lr
 778              	.L42:
 779              		.align	2
 780              	.L41:
 781 0024 00000000 		.word	recvTCPCount.7915
 782              		.cfi_endproc
 783              	.LFE54:
 785              		.section	.text.errorTCP,"ax",%progbits
 786              		.align	2
 787              		.global	errorTCP
 788              		.thumb
 789              		.thumb_func
 791              	errorTCP:
 792              	.LFB55:
 226:main.c        **** 
 227:main.c        **** void errorTCP(void *arg, err_t err)
 228:main.c        **** {
 793              		.loc 2 228 0
 794              		.cfi_startproc
 795              		@ args = 0, pretend = 0, frame = 16
 796              		@ frame_needed = 1, uses_anonymous_args = 0
 797 0000 80B5     		push	{r7, lr}
 798              		.cfi_def_cfa_offset 8
 799              		.cfi_offset 7, -8
 800              		.cfi_offset 14, -4
 801 0002 84B0     		sub	sp, sp, #16
 802              		.cfi_def_cfa_offset 24
 803 0004 00AF     		add	r7, sp, #0
 804              		.cfi_def_cfa_register 7
 805 0006 7860     		str	r0, [r7, #4]
 806 0008 3960     		str	r1, [r7]
 229:main.c        **** 	struct com_state *com_st;
 230:main.c        **** 	LWIP_UNUSED_ARG(err);
 231:main.c        **** 	com_st = (struct com_state*)arg;
 807              		.loc 2 231 0
 808 000a 7B68     		ldr	r3, [r7, #4]
 809 000c FB60     		str	r3, [r7, #12]
 232:main.c        **** 	if(com_st == NULL)
 810              		.loc 2 232 0
 811 000e FB68     		ldr	r3, [r7, #12]
 812 0010 002B     		cmp	r3, #0
 813 0012 02D1     		bne	.L45
 233:main.c        **** 	{
 234:main.c        **** 		mem_free(com_st);
 814              		.loc 2 234 0
 815 0014 F868     		ldr	r0, [r7, #12]
 816 0016 FFF7FEFF 		bl	mem_free
 817              	.L45:
 235:main.c        **** 	}
 236:main.c        **** }
 818              		.loc 2 236 0
 819 001a 00BF     		nop
 820 001c 1037     		adds	r7, r7, #16
 821              		.cfi_def_cfa_offset 8
 822 001e BD46     		mov	sp, r7
 823              		.cfi_def_cfa_register 13
 824              		@ sp needed
 825 0020 80BD     		pop	{r7, pc}
 826              		.cfi_endproc
 827              	.LFE55:
 829 0022 00BF     		.section	.text.sentTCP,"ax",%progbits
 830              		.align	2
 831              		.global	sentTCP
 832              		.thumb
 833              		.thumb_func
 835              	sentTCP:
 836              	.LFB56:
 237:main.c        **** 
 238:main.c        **** err_t sentTCP(void *arg, struct tcp_pcb *tpcb)
 239:main.c        **** {
 837              		.loc 2 239 0
 838              		.cfi_startproc
 839              		@ args = 0, pretend = 0, frame = 16
 840              		@ frame_needed = 1, uses_anonymous_args = 0
 841              		@ link register save eliminated.
 842 0000 80B4     		push	{r7}
 843              		.cfi_def_cfa_offset 4
 844              		.cfi_offset 7, -4
 845 0002 85B0     		sub	sp, sp, #20
 846              		.cfi_def_cfa_offset 24
 847 0004 00AF     		add	r7, sp, #0
 848              		.cfi_def_cfa_register 7
 849 0006 7860     		str	r0, [r7, #4]
 850 0008 3960     		str	r1, [r7]
 240:main.c        **** 	//LWIP_UNUSED_ARG(arg);
 241:main.c        **** 
 242:main.c        **** 
 243:main.c        **** 	err_t err;
 244:main.c        **** 	err = ERR_OK;
 851              		.loc 2 244 0
 852 000a 0023     		movs	r3, #0
 853 000c FB60     		str	r3, [r7, #12]
 245:main.c        **** //
 246:main.c        **** //	struct pbuf *p;
 247:main.c        **** //	p = (struct pbuf *)arg;
 248:main.c        **** 
 249:main.c        **** //	if( p->next != NULL )
 250:main.c        **** //	{
 251:main.c        **** //		//pbuf_free(p);
 252:main.c        **** //		p=p->next;
 253:main.c        **** //		tcp_arg(tpcb,p);
 254:main.c        **** //		err = sendTCP(tpcb,p->payload,p->len);
 255:main.c        **** //	}
 256:main.c        **** //	else if((dataArrIndex%SMALL_PAGE_SIZE==0) && (dataArrIndex!=0))
 257:main.c        **** //	{
 258:main.c        **** //		tcp_write(tpcb,responseData,8,1);
 259:main.c        **** //		dataArrIndex=0;
 260:main.c        **** //	}
 261:main.c        **** 
 262:main.c        **** //	if((dataArrIndex%SMALL_PAGE_SIZE==0) && (dataArrIndex != 0))
 263:main.c        **** //	{
 264:main.c        **** //		sendTCP(tpcb,responseData,8);
 265:main.c        **** //		dataArrIndex = 0;
 266:main.c        **** //	}
 267:main.c        **** //	else
 268:main.c        **** //	{
 269:main.c        **** //		//pbuf_free(p);
 270:main.c        **** //		pbuf_free(pbuf_ptr);
 271:main.c        **** //		tcp_arg(tpcb,NULL);
 272:main.c        **** //	}
 273:main.c        **** 	return err;
 854              		.loc 2 273 0
 855 000e FB68     		ldr	r3, [r7, #12]
 274:main.c        **** }
 856              		.loc 2 274 0
 857 0010 1846     		mov	r0, r3
 858 0012 1437     		adds	r7, r7, #20
 859              		.cfi_def_cfa_offset 4
 860 0014 BD46     		mov	sp, r7
 861              		.cfi_def_cfa_register 13
 862              		@ sp needed
 863 0016 80BC     		pop	{r7}
 864              		.cfi_restore 7
 865              		.cfi_def_cfa_offset 0
 866 0018 7047     		bx	lr
 867              		.cfi_endproc
 868              	.LFE56:
 870 001a 00BF     		.section	.text.sendTCP,"ax",%progbits
 871              		.align	2
 872              		.global	sendTCP
 873              		.thumb
 874              		.thumb_func
 876              	sendTCP:
 877              	.LFB57:
 275:main.c        **** 
 276:main.c        **** 
 277:main.c        **** err_t sendTCP(struct tcp_pcb *tpcb,uint8_t *ptr,uint8_t len)
 278:main.c        **** {
 878              		.loc 2 278 0
 879              		.cfi_startproc
 880              		@ args = 0, pretend = 0, frame = 24
 881              		@ frame_needed = 1, uses_anonymous_args = 0
 882              		@ link register save eliminated.
 883 0000 80B4     		push	{r7}
 884              		.cfi_def_cfa_offset 4
 885              		.cfi_offset 7, -4
 886 0002 87B0     		sub	sp, sp, #28
 887              		.cfi_def_cfa_offset 32
 888 0004 00AF     		add	r7, sp, #0
 889              		.cfi_def_cfa_register 7
 890 0006 F860     		str	r0, [r7, #12]
 891 0008 B960     		str	r1, [r7, #8]
 892 000a 1346     		mov	r3, r2
 893 000c FB71     		strb	r3, [r7, #7]
 279:main.c        **** 	err_t wr_err = ERR_OK;
 894              		.loc 2 279 0
 895 000e 0023     		movs	r3, #0
 896 0010 7B61     		str	r3, [r7, #20]
 280:main.c        **** //	wr_err = tcp_write(tpcb, ptr, len, 1);
 281:main.c        **** 	/*if((dataArrIndex%SMALL_PAGE_SIZE==0) && (dataArrIndex!=0))
 282:main.c        **** 	{
 283:main.c        **** 		tcp_write(tpcb,responseData,8,1);
 284:main.c        **** 		dataArrIndex=0;
 285:main.c        **** 	}**/
 286:main.c        **** 
 287:main.c        **** //	tcp_recved(tpcb, len);
 288:main.c        **** 	return wr_err;
 897              		.loc 2 288 0
 898 0012 7B69     		ldr	r3, [r7, #20]
 289:main.c        **** }
 899              		.loc 2 289 0
 900 0014 1846     		mov	r0, r3
 901 0016 1C37     		adds	r7, r7, #28
 902              		.cfi_def_cfa_offset 4
 903 0018 BD46     		mov	sp, r7
 904              		.cfi_def_cfa_register 13
 905              		@ sp needed
 906 001a 80BC     		pop	{r7}
 907              		.cfi_restore 7
 908              		.cfi_def_cfa_offset 0
 909 001c 7047     		bx	lr
 910              		.cfi_endproc
 911              	.LFE57:
 913 001e 00BF     		.section	.text.closeTCP,"ax",%progbits
 914              		.align	2
 915              		.global	closeTCP
 916              		.thumb
 917              		.thumb_func
 919              	closeTCP:
 920              	.LFB58:
 290:main.c        **** 
 291:main.c        **** void closeTCP(struct tcp_pcb *tpcb, struct com_state *com_st)
 292:main.c        **** {
 921              		.loc 2 292 0
 922              		.cfi_startproc
 923              		@ args = 0, pretend = 0, frame = 8
 924              		@ frame_needed = 1, uses_anonymous_args = 0
 925 0000 80B5     		push	{r7, lr}
 926              		.cfi_def_cfa_offset 8
 927              		.cfi_offset 7, -8
 928              		.cfi_offset 14, -4
 929 0002 82B0     		sub	sp, sp, #8
 930              		.cfi_def_cfa_offset 16
 931 0004 00AF     		add	r7, sp, #0
 932              		.cfi_def_cfa_register 7
 933 0006 7860     		str	r0, [r7, #4]
 934 0008 3960     		str	r1, [r7]
 293:main.c        **** 	tcp_arg(tpcb, NULL);
 935              		.loc 2 293 0
 936 000a 0021     		movs	r1, #0
 937 000c 7868     		ldr	r0, [r7, #4]
 938 000e FFF7FEFF 		bl	tcp_arg
 294:main.c        **** 	tcp_sent(tpcb, NULL);
 939              		.loc 2 294 0
 940 0012 0021     		movs	r1, #0
 941 0014 7868     		ldr	r0, [r7, #4]
 942 0016 FFF7FEFF 		bl	tcp_sent
 295:main.c        **** 	tcp_recv(tpcb, NULL);
 943              		.loc 2 295 0
 944 001a 0021     		movs	r1, #0
 945 001c 7868     		ldr	r0, [r7, #4]
 946 001e FFF7FEFF 		bl	tcp_recv
 296:main.c        **** 	tcp_err(tpcb, NULL);
 947              		.loc 2 296 0
 948 0022 0021     		movs	r1, #0
 949 0024 7868     		ldr	r0, [r7, #4]
 950 0026 FFF7FEFF 		bl	tcp_err
 297:main.c        **** 	tcp_poll(tpcb, NULL, 0);
 951              		.loc 2 297 0
 952 002a 0022     		movs	r2, #0
 953 002c 0021     		movs	r1, #0
 954 002e 7868     		ldr	r0, [r7, #4]
 955 0030 FFF7FEFF 		bl	tcp_poll
 298:main.c        **** 
 299:main.c        **** 	if (com_st != NULL)
 956              		.loc 2 299 0
 957 0034 3B68     		ldr	r3, [r7]
 958 0036 002B     		cmp	r3, #0
 959 0038 02D0     		beq	.L51
 300:main.c        **** 	{
 301:main.c        **** 	    mem_free(com_st);
 960              		.loc 2 301 0
 961 003a 3868     		ldr	r0, [r7]
 962 003c FFF7FEFF 		bl	mem_free
 963              	.L51:
 302:main.c        **** 	}
 303:main.c        **** 	tcp_close(tpcb);
 964              		.loc 2 303 0
 965 0040 7868     		ldr	r0, [r7, #4]
 966 0042 FFF7FEFF 		bl	tcp_close
 304:main.c        **** }
 967              		.loc 2 304 0
 968 0046 00BF     		nop
 969 0048 0837     		adds	r7, r7, #8
 970              		.cfi_def_cfa_offset 8
 971 004a BD46     		mov	sp, r7
 972              		.cfi_def_cfa_register 13
 973              		@ sp needed
 974 004c 80BD     		pop	{r7, pc}
 975              		.cfi_endproc
 976              	.LFE58:
 978 004e 00BF     		.section	.text.pollTCP,"ax",%progbits
 979              		.align	2
 980              		.global	pollTCP
 981              		.thumb
 982              		.thumb_func
 984              	pollTCP:
 985              	.LFB59:
 305:main.c        **** err_t
 306:main.c        **** pollTCP(void *arg, struct tcp_pcb *tpcb)
 307:main.c        **** {
 986              		.loc 2 307 0
 987              		.cfi_startproc
 988              		@ args = 0, pretend = 0, frame = 16
 989              		@ frame_needed = 1, uses_anonymous_args = 0
 990 0000 80B5     		push	{r7, lr}
 991              		.cfi_def_cfa_offset 8
 992              		.cfi_offset 7, -8
 993              		.cfi_offset 14, -4
 994 0002 84B0     		sub	sp, sp, #16
 995              		.cfi_def_cfa_offset 24
 996 0004 00AF     		add	r7, sp, #0
 997              		.cfi_def_cfa_register 7
 998 0006 7860     		str	r0, [r7, #4]
 999 0008 3960     		str	r1, [r7]
 308:main.c        **** 	err_t ret_err;
 309:main.c        **** 	struct com_state *com_st;
 310:main.c        **** 
 311:main.c        **** 	com_st = (struct com_state *)arg;
 1000              		.loc 2 311 0
 1001 000a 7B68     		ldr	r3, [r7, #4]
 1002 000c BB60     		str	r3, [r7, #8]
 312:main.c        **** 	if (com_st != NULL)
 1003              		.loc 2 312 0
 1004 000e BB68     		ldr	r3, [r7, #8]
 1005 0010 002B     		cmp	r3, #0
 1006 0012 0CD0     		beq	.L53
 313:main.c        **** 	{
 314:main.c        **** 		if (com_st->p != NULL)
 1007              		.loc 2 314 0
 1008 0014 BB68     		ldr	r3, [r7, #8]
 1009 0016 9B68     		ldr	r3, [r3, #8]
 1010 0018 002B     		cmp	r3, #0
 1011 001a 0ED1     		bne	.L55
 315:main.c        **** 	    {
 316:main.c        **** 	    	/* there is a remaining pbuf (chain)  */
 317:main.c        **** 	    	//tcp_sent(tpcb, sentTCP);
 318:main.c        **** 	    	//sendTCP(tpcb, com_st);
 319:main.c        **** 	    }
 320:main.c        **** 	    else
 321:main.c        **** 	    {
 322:main.c        **** 	    	/* no remaining pbuf (chain)  */
 323:main.c        **** 	    	if(com_st->state == COM_CLOSING)
 1012              		.loc 2 323 0
 1013 001c BB68     		ldr	r3, [r7, #8]
 1014 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1015 0020 032B     		cmp	r3, #3
 1016 0022 0AD1     		bne	.L55
 324:main.c        **** 	    	{
 325:main.c        **** 	        	closeTCP(tpcb, com_st);
 1017              		.loc 2 325 0
 1018 0024 B968     		ldr	r1, [r7, #8]
 1019 0026 3868     		ldr	r0, [r7]
 1020 0028 FFF7FEFF 		bl	closeTCP
 1021 002c 05E0     		b	.L55
 1022              	.L53:
 326:main.c        **** 	      	}
 327:main.c        **** 	    }
 328:main.c        **** 
 329:main.c        **** 	}
 330:main.c        **** 	else
 331:main.c        **** 	{
 332:main.c        **** 	    /* nothing to be done */
 333:main.c        **** 	    tcp_abort(tpcb);
 1023              		.loc 2 333 0
 1024 002e 3868     		ldr	r0, [r7]
 1025 0030 FFF7FEFF 		bl	tcp_abort
 334:main.c        **** 	    ret_err = ERR_ABRT;
 1026              		.loc 2 334 0
 1027 0034 6FF00903 		mvn	r3, #9
 1028 0038 FB60     		str	r3, [r7, #12]
 1029              	.L55:
 335:main.c        **** 	}
 336:main.c        **** 	return ret_err;
 1030              		.loc 2 336 0
 1031 003a FB68     		ldr	r3, [r7, #12]
 337:main.c        **** }
 1032              		.loc 2 337 0
 1033 003c 1846     		mov	r0, r3
 1034 003e 1037     		adds	r7, r7, #16
 1035              		.cfi_def_cfa_offset 8
 1036 0040 BD46     		mov	sp, r7
 1037              		.cfi_def_cfa_register 13
 1038              		@ sp needed
 1039 0042 80BD     		pop	{r7, pc}
 1040              		.cfi_endproc
 1041              	.LFE59:
 1043              		.section	.text.main,"ax",%progbits
 1044              		.align	2
 1045              		.global	main
 1046              		.thumb
 1047              		.thumb_func
 1049              	main:
 1050              	.LFB60:
 338:main.c        **** 
 339:main.c        **** 
 340:main.c        **** int main (int argc, char **argv)
 341:main.c        **** {
 1051              		.loc 2 341 0
 1052              		.cfi_startproc
 1053              		@ args = 0, pretend = 0, frame = 24
 1054              		@ frame_needed = 1, uses_anonymous_args = 0
 1055 0000 80B5     		push	{r7, lr}
 1056              		.cfi_def_cfa_offset 8
 1057              		.cfi_offset 7, -8
 1058              		.cfi_offset 14, -4
 1059 0002 86B0     		sub	sp, sp, #24
 1060              		.cfi_def_cfa_offset 32
 1061 0004 00AF     		add	r7, sp, #0
 1062              		.cfi_def_cfa_register 7
 1063 0006 7860     		str	r0, [r7, #4]
 1064 0008 3960     		str	r1, [r7]
 342:main.c        **** 
 343:main.c        **** 
 344:main.c        **** 	struct tcp_pcb *tcpPcb;
 345:main.c        **** 
 346:main.c        **** 	struct ip_addr ip_computer;
 347:main.c        **** 	unsigned long ulIPAddress, ulIPAddrComputer;
 348:main.c        **** 
 349:main.c        **** 
 350:main.c        **** 
 351:main.c        **** //	responseData=malloc((sizeof(uint8_t)*8));	//indication of End of page.
 352:main.c        **** //	for(uint8_t i =0; i<8; i++)
 353:main.c        **** //	{
 354:main.c        **** //		*(responseData+i)=i+1;
 355:main.c        **** //	}
 356:main.c        **** 
 357:main.c        **** 	comm_init();
 1065              		.loc 2 357 0
 1066 000a FFF7FEFF 		bl	comm_init
 358:main.c        **** 	xfunc_out = xcomm_put;
 1067              		.loc 2 358 0
 1068 000e 0E4B     		ldr	r3, .L59
 1069 0010 0E4A     		ldr	r2, .L59+4
 1070 0012 1A60     		str	r2, [r3]
 359:main.c        **** 	xfunc_in  = xcomm_get;
 1071              		.loc 2 359 0
 1072 0014 0E4B     		ldr	r3, .L59+8
 1073 0016 0F4A     		ldr	r2, .L59+12
 1074 0018 1A60     		str	r2, [r3]
 360:main.c        **** 	//SysTick_Config(SystemCoreClock/1000000 - 1); /* Generate interrupt each 1 ms   */
 361:main.c        **** 	SysTick_Config( 100000000 / TIMER_TICK_HZ);
 1075              		.loc 2 361 0
 1076 001a 0F48     		ldr	r0, .L59+16
 1077 001c FFF7FEFF 		bl	SysTick_Config
 362:main.c        **** 	lwip_init();
 1078              		.loc 2 362 0
 1079 0020 FFF7FEFF 		bl	lwip_init
 363:main.c        **** 	tcpPcb=tcp_new();										// Create a new TC pCB.
 1080              		.loc 2 363 0
 1081 0024 FFF7FEFF 		bl	tcp_new
 1082 0028 7861     		str	r0, [r7, #20]
 364:main.c        **** 
 365:main.c        **** 	ulIPAddrComputer = COMM_PC_IP;							//address of your computer - hex code for 192.168.1.30
 1083              		.loc 2 365 0
 1084 002a 0C4B     		ldr	r3, .L59+20
 1085 002c 3B61     		str	r3, [r7, #16]
 366:main.c        **** //	tcp_bind(tcpPcb, IP_ADDR_ANY, SEND_PORT);				//Bind the PCB with the TCP.
 367:main.c        **** 
 368:main.c        **** //	tcpPcb = tcp_listen(tcpPcb);							// listen to incoming connection
 369:main.c        **** 
 370:main.c        **** 	err_t error = tcp_connect(tcpPcb,COMM_PC_IP,SEND_PORT,acceptTCP);
 1086              		.loc 2 370 0
 1087 002e 0C4B     		ldr	r3, .L59+24
 1088 0030 42F22832 		movw	r2, #9000
 1089 0034 0949     		ldr	r1, .L59+20
 1090 0036 7869     		ldr	r0, [r7, #20]
 1091 0038 FFF7FEFF 		bl	tcp_connect
 1092 003c F860     		str	r0, [r7, #12]
 371:main.c        **** 
 372:main.c        **** //	tcp_accept(tcpPcb, acceptTCP);
 373:main.c        **** 
 374:main.c        **** //	while(timeCounter<TIME_COUNTER_BOOTLOAD)
 375:main.c        **** //	{
 376:main.c        **** //		ethernetif_input(netif_eth0);
 377:main.c        **** //		/*
 378:main.c        **** //		 * If the state is ESTABLISHED, that means the Connection establishment attempt is made from th
 379:main.c        **** //		 * Under that situation, go to the BootLoading section.
 380:main.c        **** //		 */
 381:main.c        **** //		if(state==1)
 382:main.c        **** //			break;
 383:main.c        **** //		delay_ms(1);
 384:main.c        **** //		timeCounter++;
 385:main.c        **** //	}
 386:main.c        **** //	if(timeCounter<TIME_COUNTER_BOOTLOAD)
 387:main.c        **** //	{
 388:main.c        **** //		//go to the BootLoading section.
 389:main.c        **** //		bootLoad(netif_eth0);
 390:main.c        **** //	}
 391:main.c        **** //	else
 392:main.c        **** //	{
 393:main.c        **** //		// go to the Application section.
 394:main.c        **** //		//The jump codes must be changed as per the size of the BootLoader.
 395:main.c        **** //		jump_to_app_section();
 396:main.c        **** //
 397:main.c        **** //	}
 398:main.c        **** 
 399:main.c        **** 	return 0;
 1093              		.loc 2 399 0
 1094 003e 0023     		movs	r3, #0
 400:main.c        **** }
 1095              		.loc 2 400 0
 1096 0040 1846     		mov	r0, r3
 1097 0042 1837     		adds	r7, r7, #24
 1098              		.cfi_def_cfa_offset 8
 1099 0044 BD46     		mov	sp, r7
 1100              		.cfi_def_cfa_register 13
 1101              		@ sp needed
 1102 0046 80BD     		pop	{r7, pc}
 1103              	.L60:
 1104              		.align	2
 1105              	.L59:
 1106 0048 00000000 		.word	xfunc_out
 1107 004c 00000000 		.word	xcomm_put
 1108 0050 00000000 		.word	xfunc_in
 1109 0054 00000000 		.word	xcomm_get
 1110 0058 A0860100 		.word	100000
 1111 005c 1E01A8C0 		.word	-1062731490
 1112 0060 00000000 		.word	acceptTCP
 1113              		.cfi_endproc
 1114              	.LFE60:
 1116              		.section	.text.startup_delay,"ax",%progbits
 1117              		.align	2
 1118              		.global	startup_delay
 1119              		.thumb
 1120              		.thumb_func
 1122              	startup_delay:
 1123              	.LFB61:
 401:main.c        **** 
 402:main.c        **** void startup_delay(void)
 403:main.c        **** {
 1124              		.loc 2 403 0
 1125              		.cfi_startproc
 1126              		@ args = 0, pretend = 0, frame = 8
 1127              		@ frame_needed = 1, uses_anonymous_args = 0
 1128              		@ link register save eliminated.
 1129 0000 80B4     		push	{r7}
 1130              		.cfi_def_cfa_offset 4
 1131              		.cfi_offset 7, -4
 1132 0002 83B0     		sub	sp, sp, #12
 1133              		.cfi_def_cfa_offset 16
 1134 0004 00AF     		add	r7, sp, #0
 1135              		.cfi_def_cfa_register 7
 1136              	.LBB2:
 404:main.c        **** 	for (volatile unsigned long i = 0; i < 500000; i++) { ; }
 1137              		.loc 2 404 0
 1138 0006 0023     		movs	r3, #0
 1139 0008 7B60     		str	r3, [r7, #4]
 1140 000a 02E0     		b	.L62
 1141              	.L63:
 1142              		.loc 2 404 0 is_stmt 0 discriminator 3
 1143 000c 7B68     		ldr	r3, [r7, #4]
 1144 000e 0133     		adds	r3, r3, #1
 1145 0010 7B60     		str	r3, [r7, #4]
 1146              	.L62:
 1147              		.loc 2 404 0 discriminator 1
 1148 0012 7B68     		ldr	r3, [r7, #4]
 1149 0014 034A     		ldr	r2, .L64
 1150 0016 9342     		cmp	r3, r2
 1151 0018 F8D9     		bls	.L63
 1152              	.LBE2:
 405:main.c        **** }
 1153              		.loc 2 405 0 is_stmt 1
 1154 001a 00BF     		nop
 1155 001c 0C37     		adds	r7, r7, #12
 1156              		.cfi_def_cfa_offset 4
 1157 001e BD46     		mov	sp, r7
 1158              		.cfi_def_cfa_register 13
 1159              		@ sp needed
 1160 0020 80BC     		pop	{r7}
 1161              		.cfi_restore 7
 1162              		.cfi_def_cfa_offset 0
 1163 0022 7047     		bx	lr
 1164              	.L65:
 1165              		.align	2
 1166              	.L64:
 1167 0024 1FA10700 		.word	499999
 1168              		.cfi_endproc
 1169              	.LFE61:
 1171              		.section	.bss.recvTCPCount.7915,"aw",%nobits
 1172              		.align	2
 1175              	recvTCPCount.7915:
 1176 0000 00000000 		.space	4
 1177              		.text
 1178              	.Letext0:
 1179              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q2\\arm-none-eabi\\include\\mach
 1180              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q2\\arm-none-eabi\\include\\sys\
 1181              		.file 5 "./Libraries/NXP/Core/CM3/DeviceSupport/NXP/LPC17xx/LPC17xx.h"
 1182              		.file 6 "./Libraries/lwip-1.4.0/arch/cc.h"
 1183              		.file 7 "./Libraries/lwip-1.4.0/include/lwip/err.h"
 1184              		.file 8 "./Libraries/lwip-1.4.0/include/lwip/pbuf.h"
 1185              		.file 9 "./Libraries/lwip-1.4.0/include/ipv4/lwip/ip_addr.h"
 1186              		.file 10 "./Libraries/lwip-1.4.0/include/lwip/netif.h"
 1187              		.file 11 "./Libraries/lwip-1.4.0/include/lwip/tcp.h"
 1188              		.file 12 "./Libraries/lwip-1.4.0/include/lwip/tcp_impl.h"
 1189              		.file 13 "system_init.h"
 1190              		.file 14 "bootLoader.h"
 1191              		.file 15 "monitor.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:20     .text.NVIC_SetPriority:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:24     .text.NVIC_SetPriority:00000000 NVIC_SetPriority
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:84     .text.NVIC_SetPriority:0000004c $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:90     .text.SysTick_Config:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:94     .text.SysTick_Config:00000000 SysTick_Config
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:149    .text.SysTick_Config:00000040 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:154    .bss.netif_eth0_data:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:157    .bss.netif_eth0_data:00000000 netif_eth0_data
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:160    .data.netif_eth0:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:163    .data.netif_eth0:00000000 netif_eth0
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:166    .bss.my_ipaddr_data:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:169    .bss.my_ipaddr_data:00000000 my_ipaddr_data
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:172    .bss.my_netmask_data:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:175    .bss.my_netmask_data:00000000 my_netmask_data
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:178    .bss.my_gw_data:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:181    .bss.my_gw_data:00000000 my_gw_data
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:184    .bss.last_arp_time:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:187    .bss.last_arp_time:00000000 last_arp_time
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:190    .bss.last_tcpslow_time:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:193    .bss.last_tcpslow_time:00000000 last_tcpslow_time
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:196    .bss.last_tcpfast_time:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:199    .bss.last_tcpfast_time:00000000 last_tcpfast_time
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:202    .bss.last_tcp_time:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:205    .bss.last_tcp_time:00000000 last_tcp_time
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:208    .bss.last_dhcpcoarse_time:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:211    .bss.last_dhcpcoarse_time:00000000 last_dhcpcoarse_time
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:214    .bss.last_dhcpfine_time:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:217    .bss.last_dhcpfine_time:00000000 last_dhcpfine_time
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:220    .bss.light_on:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:223    .bss.light_on:00000000 light_on
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:226    .bss.light_off:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:229    .bss.light_off:00000000 light_off
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:232    .bss.recvd_UDP_data:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:235    .bss.recvd_UDP_data:00000000 recvd_UDP_data
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:238    .bss.recvd_TCP_data:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:241    .bss.recvd_TCP_data:00000000 recvd_TCP_data
                            *COM*:00000001 command_type
                            *COM*:00000001 command_RW
                            *COM*:00000004 device_ID
                            *COM*:00000004 command_parameter
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:248    .rodata.iap_entry:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:251    .rodata.iap_entry:00000000 iap_entry
                            *COM*:00000004 timer_tick
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:259    .bss.timeCounter:00000000 timeCounter
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:256    .bss.timeCounter:00000000 $d
                            *COM*:00000004 command_ptr
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:266    .bss.state:00000000 state
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:267    .bss.state:00000000 $d
                            *COM*:00000004 pbuf_ptr
                            *COM*:00000004 responseData
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:271    .text.client_close:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:275    .text.client_close:00000000 client_close
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:314    .text.client_sent:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:318    .text.client_sent:00000000 client_sent
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:353    .text.client_init:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:358    .text.client_init:00000000 client_init
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:405    .text.client_init:0000003c $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:420    .text.client_connected:00000000 client_connected
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:412    .rodata:00000000 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:416    .text.client_connected:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:472    .text.client_connected:0000003c $d
                            *COM*:00000004 systick_counter
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:480    .text.SysTick_Handler:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:485    .text.SysTick_Handler:00000000 SysTick_Handler
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:527    .text.SysTick_Handler:00000028 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:533    .text.Delay:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:538    .text.Delay:00000000 Delay
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:582    .text.Delay:00000028 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:587    .text.lwip_init:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:591    .text.lwip_init:00000000 lwip_init
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:653    .text.lwip_init:00000058 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:665    .text.acceptTCP:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:670    .text.acceptTCP:00000000 acceptTCP
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:728    .text.acceptTCP:0000004c $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:741    .text.recvTCP:00000000 recvTCP
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:791    .text.errorTCP:00000000 errorTCP
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:835    .text.sentTCP:00000000 sentTCP
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:984    .text.pollTCP:00000000 pollTCP
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:736    .text.recvTCP:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:781    .text.recvTCP:00000024 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:1175   .bss.recvTCPCount.7915:00000000 recvTCPCount.7915
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:786    .text.errorTCP:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:830    .text.sentTCP:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:871    .text.sendTCP:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:876    .text.sendTCP:00000000 sendTCP
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:914    .text.closeTCP:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:919    .text.closeTCP:00000000 closeTCP
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:979    .text.pollTCP:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:1044   .text.main:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:1049   .text.main:00000000 main
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:1106   .text.main:00000048 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:1117   .text.startup_delay:00000000 $t
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:1122   .text.startup_delay:00000000 startup_delay
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:1167   .text.startup_delay:00000024 $d
C:\Users\KHUSHA~1\AppData\Local\Temp\cc6C2zW2.s:1172   .bss.recvTCPCount.7915:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
tcp_arg
tcp_sent
tcp_close
tcp_new
tcp_bind
tcp_connect
ip_addr_any
tcp_write
tcp_recv
server_recv
mem_init
memp_init
netif_add
netif_set_default
netif_set_up
ethernet_input
ethernetif_init
tcp_setprio
tcp_err
tcp_poll
mem_free
tcp_abort
comm_init
xfunc_out
xcomm_put
xfunc_in
xcomm_get
