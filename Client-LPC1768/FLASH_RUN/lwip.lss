
FLASH_RUN/lwip.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000098b4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000098b4  000098b4  000198b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text.align   00000004  000098bc  000098bc  000198bc  2**0
                  ALLOC, CODE
  3 .data         00000010  10000000  000098c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00001a98  10000010  000098d0  00020010  2**2
                  ALLOC
  5 .heap         00000700  10001aa8  10001aa8  00020010  2**3
                  CONTENTS
  6 .stack        00000300  10007d00  10007d00  00020710  2**3
                  CONTENTS
  7 .debug_aranges 00000da0  00000000  00000000  00020a10  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0001188a  00000000  00000000  000217b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003910  00000000  00000000  0003303a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000706d  00000000  00000000  0003694a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000348c  00000000  00000000  0003d9b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00003e79  00000000  00000000  00040e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .ARM.attributes 0000002f  00000000  00000000  00044cbd  2**0
                  CONTENTS, READONLY
 14 .debug_ranges 00000bf0  00000000  00000000  00044cf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000006e  00000000  00000000  000458e0  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
}

/*--------------------------- clock_time ---------------------------------*/

clock_time_t clock_time(void)
{
       0:	00 80 00 10 c5 00 00 00 19 01 00 00 1b 01 00 00     ................
  return((clock_time_t)Ticks);
}
      10:	1d 01 00 00 1f 01 00 00 21 01 00 00 be 79 ff ef     ........!....y..
	...
	do {
		ct0 = LPC_RTC->CTIME0;
		ct1 = LPC_RTC->CTIME1;
	} while (ct0 != LPC_RTC->CTIME0 || ct1 != LPC_RTC->CTIME1);

	pFullTime->SEC   = ct0 & 63;;
      2c:	25 01 00 00 27 01 00 00 00 00 00 00 29 01 00 00     %...'.......)...
	pFullTime->MIN   = (ct0 >> 8) & 63;;
      3c:	c9 01 00 00 2d 01 00 00 2d 01 00 00 2d 01 00 00     ....-...-...-...
	pFullTime->HOUR  = (ct0 >> 16) & 31;
	pFullTime->DOM   = ct1 & 31;
      4c:	2d 01 00 00 2d 01 00 00 d9 04 00 00 2d 01 00 00     -...-.......-...
	pFullTime->MONTH = (ct1 >> 8) & 15;;
      5c:	2d 01 00 00 2d 01 00 00 2d 01 00 00 2d 01 00 00     -...-...-...-...
	pFullTime->YEAR  = (ct1 >> 16) & 4095;

	return (LPC_RTC->RTC_AUX & RTC_AUX_RTC_OSCF) ? 1 : 0;
      6c:	2d 01 00 00 2d 01 00 00 2d 01 00 00 2d 01 00 00     -...-...-...-...
      7c:	2d 01 00 00 2d 01 00 00 2d 01 00 00 2d 01 00 00     -...-...-...-...
}
      8c:	2d 01 00 00 2d 01 00 00 2d 01 00 00 2d 01 00 00     -...-...-...-...

		return_code = write_to_flash(pageBeginAddr, &dataArr[0], 4096);
		if(return_code != 0)
			return;

		return_code = compare_mem(pageBeginAddr, &dataArr[0], 4096);
      9c:	2d 01 00 00 2d 01 00 00 2d 01 00 00 2d 01 00 00     -...-...-...-...
		if(return_code != 0)
			return;

		sectorNumber++;
      ac:	2d 01 00 00 2d 01 00 00 2d 01 00 00 2d 01 00 00     -...-...-...-...
	}
	else
	{
//		if(pageSize!=LARGE_PAGE_SIZE)
//			pageSize=LARGE_PAGE_SIZE;
		if(sectorFill == 0)
      bc:	2d 01 00 00 2d 01 00 00                             -...-...

000000c4 <__cs3_reset>:
    .type   __cs3_reset_cortex_m, %function
__cs3_reset_cortex_m:
    .fnstart

/* delay at startup to let JTAG-connection catch-up */
	LDR R0, =startup_delay
      c4:	480c      	ldr	r0, [pc, #48]	; (f8 <__cs3_reset+0x34>)
	BLX R0
      c6:	4780      	blx	r0

/* Copy the data segment initializers from flash to SRAM */
.extern _etext
.extern _sdata
.extern _edata
    ldr   r1, =_etext
      c8:	490c      	ldr	r1, [pc, #48]	; (fc <__cs3_reset+0x38>)
    ldr   r2, =_sdata
      ca:	4a0d      	ldr	r2, [pc, #52]	; (100 <__cs3_reset+0x3c>)
    ldr   r3, =_edata
      cc:	4b0d      	ldr	r3, [pc, #52]	; (104 <__cs3_reset+0x40>)
1:  cmp   r2, r3
      ce:	429a      	cmp	r2, r3
    ittt  lo
      d0:	bf3e      	ittt	cc
    ldrlo r0, [r1], #4
      d2:	f851 0b04 	ldrcc.w	r0, [r1], #4
    strlo r0, [r2], #4
      d6:	f842 0b04 	strcc.w	r0, [r2], #4
    blo   1b
      da:	e7f8      	bcc.n	ce <__cs3_reset+0xa>

/* Zero fill the bss segment. */
.extern _sbss
.extern _ebss
    movs  r0, #0
      dc:	2000      	movs	r0, #0
    ldr   r1, =_sbss
      de:	490a      	ldr	r1, [pc, #40]	; (108 <__cs3_reset+0x44>)
    ldr   r2, =_ebss
      e0:	4a0a      	ldr	r2, [pc, #40]	; (10c <__cs3_reset+0x48>)
2:  cmp   r1, r2
      e2:	4291      	cmp	r1, r2
    itt   lo
      e4:	bf3c      	itt	cc
    strlo r0, [r1], #4
      e6:	f841 0b04 	strcc.w	r0, [r1], #4
    blo   2b
      ea:	e7fa      	bcc.n	e2 <__cs3_reset+0x1e>
/* call __libc_init_array - needed for C++ support */
/*    LDR     R0, =__libc_init_array */
/*    BLX     R0 */

/* call system init in NXP's Device CMSIS code */
    LDR     R0, =SystemInit
      ec:	4808      	ldr	r0, [pc, #32]	; (110 <__cs3_reset+0x4c>)
    BLX     R0
      ee:	4780      	blx	r0

/* call main() */
    LDR     R0,=main
      f0:	4808      	ldr	r0, [pc, #32]	; (114 <__cs3_reset+0x50>)
    BX      R0
      f2:	4700      	bx	r0

    B .
      f4:	e7fe      	b.n	f4 <__cs3_reset+0x30>
      f6:	0000      	.short	0x0000
    .type   __cs3_reset_cortex_m, %function
__cs3_reset_cortex_m:
    .fnstart

/* delay at startup to let JTAG-connection catch-up */
	LDR R0, =startup_delay
      f8:	0000042d 	.word	0x0000042d

/* Copy the data segment initializers from flash to SRAM */
.extern _etext
.extern _sdata
.extern _edata
    ldr   r1, =_etext
      fc:	000098c0 	.word	0x000098c0
    ldr   r2, =_sdata
     100:	10000000 	.word	0x10000000
    ldr   r3, =_edata
     104:	10000010 	.word	0x10000010

/* Zero fill the bss segment. */
.extern _sbss
.extern _ebss
    movs  r0, #0
    ldr   r1, =_sbss
     108:	10000010 	.word	0x10000010
    ldr   r2, =_ebss
     10c:	10001aa8 	.word	0x10001aa8
/* call __libc_init_array - needed for C++ support */
/*    LDR     R0, =__libc_init_array */
/*    BLX     R0 */

/* call system init in NXP's Device CMSIS code */
    LDR     R0, =SystemInit
     110:	00000b55 	.word	0x00000b55
    BLX     R0

/* call main() */
    LDR     R0,=main
     114:	000003c9 	.word	0x000003c9

00000118 <NMI_Handler>:
/* Exception Handlers */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
     118:	e7fe      	b.n	118 <NMI_Handler>

0000011a <HardFault_Handler>:
    .size   NMI_Handler, . - NMI_Handler

    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
     11a:	e7fe      	b.n	11a <HardFault_Handler>

0000011c <MemManage_Handler>:
    .size   HardFault_Handler, . - HardFault_Handler

    .weak   MemManage_Handler
    .type   MemManage_Handler, %function
MemManage_Handler:
    B       .
     11c:	e7fe      	b.n	11c <MemManage_Handler>

0000011e <BusFault_Handler>:
    .size   MemManage_Handler, . - MemManage_Handler

    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
     11e:	e7fe      	b.n	11e <BusFault_Handler>

00000120 <UsageFault_Handler>:
    .size   BusFault_Handler, . - BusFault_Handler

    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
     120:	e7fe      	b.n	120 <UsageFault_Handler>

		return_code = write_to_flash(pageBeginAddr,&dataArr[0], 4096);
//	 	if(return_code != 0)
//	 		return;

		return_code = compare_mem(pageBeginAddr, &dataArr[0], 4096);
     122:	bf00      	nop

00000124 <SVC_Handler>:
    .section ".text"

    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
     124:	e7fe      	b.n	124 <SVC_Handler>

00000126 <DebugMon_Handler>:
    .size   SVC_Handler, . - SVC_Handler

    .weak   DebugMon_Handler
    .type   DebugMon_Handler, %function
DebugMon_Handler:
    B       .
     126:	e7fe      	b.n	126 <DebugMon_Handler>

00000128 <PendSV_Handler>:
    .size   DebugMon_Handler, . - DebugMon_Handler

    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
     128:	e7fe      	b.n	128 <PendSV_Handler>
    .size   PendSV_Handler, . - PendSV_Handler

    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
     12a:	e7fe      	b.n	12a <PendSV_Handler+0x2>

0000012c <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
     12c:	e7fe      	b.n	12c <Default_Handler>
	...

00000130 <NVIC_SetPriority>:
 * interrupt, or negative to specify an internal (core) interrupt.
 *
 * Note: The priority cannot be set for every core interrupt.
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
     130:	b480      	push	{r7}
     132:	b083      	sub	sp, #12
     134:	af00      	add	r7, sp, #0
     136:	4603      	mov	r3, r0
     138:	6039      	str	r1, [r7, #0]
     13a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
     13c:	f997 3007 	ldrsb.w	r3, [r7, #7]
     140:	2b00      	cmp	r3, #0
     142:	da0b      	bge.n	15c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
     144:	490d      	ldr	r1, [pc, #52]	; (17c <NVIC_SetPriority+0x4c>)
     146:	79fb      	ldrb	r3, [r7, #7]
     148:	f003 030f 	and.w	r3, r3, #15
     14c:	3b04      	subs	r3, #4
     14e:	683a      	ldr	r2, [r7, #0]
     150:	b2d2      	uxtb	r2, r2
     152:	00d2      	lsls	r2, r2, #3
     154:	b2d2      	uxtb	r2, r2
     156:	440b      	add	r3, r1
     158:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
     15a:	e009      	b.n	170 <NVIC_SetPriority+0x40>
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
     15c:	4908      	ldr	r1, [pc, #32]	; (180 <NVIC_SetPriority+0x50>)
     15e:	f997 3007 	ldrsb.w	r3, [r7, #7]
     162:	683a      	ldr	r2, [r7, #0]
     164:	b2d2      	uxtb	r2, r2
     166:	00d2      	lsls	r2, r2, #3
     168:	b2d2      	uxtb	r2, r2
     16a:	440b      	add	r3, r1
     16c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
     170:	bf00      	nop
     172:	370c      	adds	r7, #12
     174:	46bd      	mov	sp, r7
     176:	bc80      	pop	{r7}
     178:	4770      	bx	lr
     17a:	bf00      	nop
     17c:	e000ed00 	.word	0xe000ed00
     180:	e000e100 	.word	0xe000e100

00000184 <SysTick_Config>:
 * Initialise the system tick timer and its interrupt and start the
 * system tick timer / counter in free running mode to generate
 * periodical interrupts.
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
     184:	b580      	push	{r7, lr}
     186:	b082      	sub	sp, #8
     188:	af00      	add	r7, sp, #0
     18a:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
     18c:	687b      	ldr	r3, [r7, #4]
     18e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
     192:	d301      	bcc.n	198 <SysTick_Config+0x14>
     194:	2301      	movs	r3, #1
     196:	e011      	b.n	1bc <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
     198:	4a0a      	ldr	r2, [pc, #40]	; (1c4 <SysTick_Config+0x40>)
     19a:	687b      	ldr	r3, [r7, #4]
     19c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     1a0:	3b01      	subs	r3, #1
     1a2:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
     1a4:	211f      	movs	r1, #31
     1a6:	f04f 30ff 	mov.w	r0, #4294967295
     1aa:	f7ff ffc1 	bl	130 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
     1ae:	4b05      	ldr	r3, [pc, #20]	; (1c4 <SysTick_Config+0x40>)
     1b0:	2200      	movs	r2, #0
     1b2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
     1b4:	4b03      	ldr	r3, [pc, #12]	; (1c4 <SysTick_Config+0x40>)
     1b6:	2207      	movs	r2, #7
     1b8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
     1ba:	2300      	movs	r3, #0
}
     1bc:	4618      	mov	r0, r3
     1be:	3708      	adds	r7, #8
     1c0:	46bd      	mov	sp, r7
     1c2:	bd80      	pop	{r7, pc}
     1c4:	e000e010 	.word	0xe000e010

000001c8 <SysTick_Handler>:

volatile u32_t systick_counter;				/* counts 1ms timeTicks */

/* SysTick Interrupt Handler (1ms) */
void SysTick_Handler (void)
{
     1c8:	b480      	push	{r7}
     1ca:	af00      	add	r7, sp, #0
	systick_counter++;
     1cc:	4b08      	ldr	r3, [pc, #32]	; (1f0 <SysTick_Handler+0x28>)
     1ce:	681b      	ldr	r3, [r3, #0]
     1d0:	3301      	adds	r3, #1
     1d2:	4a07      	ldr	r2, [pc, #28]	; (1f0 <SysTick_Handler+0x28>)
     1d4:	6013      	str	r3, [r2, #0]
	if(timer_tick > 0)						// Refer the delay.c file for use of timer_tick
     1d6:	4b07      	ldr	r3, [pc, #28]	; (1f4 <SysTick_Handler+0x2c>)
     1d8:	681b      	ldr	r3, [r3, #0]
     1da:	2b00      	cmp	r3, #0
     1dc:	d004      	beq.n	1e8 <SysTick_Handler+0x20>
	{
		-- timer_tick;
     1de:	4b05      	ldr	r3, [pc, #20]	; (1f4 <SysTick_Handler+0x2c>)
     1e0:	681b      	ldr	r3, [r3, #0]
     1e2:	3b01      	subs	r3, #1
     1e4:	4a03      	ldr	r2, [pc, #12]	; (1f4 <SysTick_Handler+0x2c>)
     1e6:	6013      	str	r3, [r2, #0]
	}
}
     1e8:	bf00      	nop
     1ea:	46bd      	mov	sp, r7
     1ec:	bc80      	pop	{r7}
     1ee:	4770      	bx	lr
     1f0:	100012f4 	.word	0x100012f4
     1f4:	100012f8 	.word	0x100012f8

000001f8 <lwip_init>:
	curTicks = systick_counter;
	while ((systick_counter - curTicks) < dlyTicks);
}

static void lwip_init(void)
{
     1f8:	b580      	push	{r7, lr}
     1fa:	b084      	sub	sp, #16
     1fc:	af04      	add	r7, sp, #16
	mem_init();
     1fe:	f001 ff6f 	bl	20e0 <mem_init>
	memp_init();
     202:	f002 f9c7 	bl	2594 <memp_init>
	etharp_init();

	ip_init();
	tcp_init();
	{
		IP4_ADDR(&my_ipaddr_data,  192, 168, 43, 100);
     206:	4b12      	ldr	r3, [pc, #72]	; (250 <lwip_init+0x58>)
     208:	4a12      	ldr	r2, [pc, #72]	; (254 <lwip_init+0x5c>)
     20a:	601a      	str	r2, [r3, #0]
		IP4_ADDR(&my_netmask_data, 255, 255, 255, 0);
     20c:	4b12      	ldr	r3, [pc, #72]	; (258 <lwip_init+0x60>)
     20e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
     212:	601a      	str	r2, [r3, #0]
		IP4_ADDR(&my_gw_data, 192, 168, 43, 61);
     214:	4b11      	ldr	r3, [pc, #68]	; (25c <lwip_init+0x64>)
     216:	4a12      	ldr	r2, [pc, #72]	; (260 <lwip_init+0x68>)
     218:	601a      	str	r2, [r3, #0]
	}

	netif_add(netif_eth0, &my_ipaddr_data, &my_netmask_data, &my_gw_data, NULL, ethernetif_init, ethernet_input);
     21a:	4b12      	ldr	r3, [pc, #72]	; (264 <lwip_init+0x6c>)
     21c:	6818      	ldr	r0, [r3, #0]
     21e:	4b12      	ldr	r3, [pc, #72]	; (268 <lwip_init+0x70>)
     220:	9302      	str	r3, [sp, #8]
     222:	4b12      	ldr	r3, [pc, #72]	; (26c <lwip_init+0x74>)
     224:	9301      	str	r3, [sp, #4]
     226:	2300      	movs	r3, #0
     228:	9300      	str	r3, [sp, #0]
     22a:	4b0c      	ldr	r3, [pc, #48]	; (25c <lwip_init+0x64>)
     22c:	4a0a      	ldr	r2, [pc, #40]	; (258 <lwip_init+0x60>)
     22e:	4908      	ldr	r1, [pc, #32]	; (250 <lwip_init+0x58>)
     230:	f002 fad2 	bl	27d8 <netif_add>

	netif_set_default(netif_eth0);
     234:	4b0b      	ldr	r3, [pc, #44]	; (264 <lwip_init+0x6c>)
     236:	681b      	ldr	r3, [r3, #0]
     238:	4618      	mov	r0, r3
     23a:	f002 fba5 	bl	2988 <netif_set_default>

	netif_set_up(netif_eth0);
     23e:	4b09      	ldr	r3, [pc, #36]	; (264 <lwip_init+0x6c>)
     240:	681b      	ldr	r3, [r3, #0]
     242:	4618      	mov	r0, r3
     244:	f002 fbae 	bl	29a4 <netif_set_up>
}
     248:	bf00      	nop
     24a:	46bd      	mov	sp, r7
     24c:	bd80      	pop	{r7, pc}
     24e:	bf00      	nop
     250:	10000040 	.word	0x10000040
     254:	642ba8c0 	.word	0x642ba8c0
     258:	10000044 	.word	0x10000044
     25c:	10000048 	.word	0x10000048
     260:	3d2ba8c0 	.word	0x3d2ba8c0
     264:	10000000 	.word	0x10000000
     268:	000095b5 	.word	0x000095b5
     26c:	00008bc9 	.word	0x00008bc9

00000270 <acceptTCP>:
err_t acceptTCP(void *arg, struct tcp_pcb *newpcb, err_t err)
{
     270:	b580      	push	{r7, lr}
     272:	b086      	sub	sp, #24
     274:	af00      	add	r7, sp, #0
     276:	60f8      	str	r0, [r7, #12]
     278:	60b9      	str	r1, [r7, #8]
     27a:	607a      	str	r2, [r7, #4]
	err_t ret_err;
	LWIP_UNUSED_ARG(arg);
	LWIP_UNUSED_ARG(err);

	tcp_setprio(newpcb, TCP_PRIO_MIN);
     27c:	2101      	movs	r1, #1
     27e:	68b8      	ldr	r0, [r7, #8]
     280:	f003 f97a 	bl	3578 <tcp_setprio>
	newpcb->state=ESTABLISHED;
     284:	68bb      	ldr	r3, [r7, #8]
     286:	2204      	movs	r2, #4
     288:	741a      	strb	r2, [r3, #16]

		tcp_recv(newpcb, recvTCP);
     28a:	490c      	ldr	r1, [pc, #48]	; (2bc <acceptTCP+0x4c>)
     28c:	68b8      	ldr	r0, [r7, #8]
     28e:	f003 fae3 	bl	3858 <tcp_recv>
		tcp_err(newpcb, errorTCP);
     292:	490b      	ldr	r1, [pc, #44]	; (2c0 <acceptTCP+0x50>)
     294:	68b8      	ldr	r0, [r7, #8]
     296:	f003 fafb 	bl	3890 <tcp_err>
		tcp_sent(newpcb, sentTCP);
     29a:	490a      	ldr	r1, [pc, #40]	; (2c4 <acceptTCP+0x54>)
     29c:	68b8      	ldr	r0, [r7, #8]
     29e:	f003 fae9 	bl	3874 <tcp_sent>
		tcp_poll(newpcb, pollTCP, 0);
     2a2:	2200      	movs	r2, #0
     2a4:	4908      	ldr	r1, [pc, #32]	; (2c8 <acceptTCP+0x58>)
     2a6:	68b8      	ldr	r0, [r7, #8]
     2a8:	f003 fb00 	bl	38ac <tcp_poll>
		ret_err = ERR_OK;
     2ac:	2300      	movs	r3, #0
     2ae:	617b      	str	r3, [r7, #20]

	return ret_err;
     2b0:	697b      	ldr	r3, [r7, #20]
}
     2b2:	4618      	mov	r0, r3
     2b4:	3718      	adds	r7, #24
     2b6:	46bd      	mov	sp, r7
     2b8:	bd80      	pop	{r7, pc}
     2ba:	bf00      	nop
     2bc:	000002cd 	.word	0x000002cd
     2c0:	000002f5 	.word	0x000002f5
     2c4:	00000319 	.word	0x00000319
     2c8:	00000385 	.word	0x00000385

000002cc <recvTCP>:
 * This function is called only when there is data present in the Incoming packet.
 * Thus, in the 3 step connection establishment process, it is not called.
 */

err_t recvTCP(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
     2cc:	b480      	push	{r7}
     2ce:	b087      	sub	sp, #28
     2d0:	af00      	add	r7, sp, #0
     2d2:	60f8      	str	r0, [r7, #12]
     2d4:	60b9      	str	r1, [r7, #8]
     2d6:	607a      	str	r2, [r7, #4]
     2d8:	603b      	str	r3, [r7, #0]

	//Something received.
	static int recvTCPCount;
	recvTCPCount += 1;
     2da:	4b05      	ldr	r3, [pc, #20]	; (2f0 <recvTCP+0x24>)
     2dc:	681b      	ldr	r3, [r3, #0]
     2de:	3301      	adds	r3, #1
     2e0:	4a03      	ldr	r2, [pc, #12]	; (2f0 <recvTCP+0x24>)
     2e2:	6013      	str	r3, [r2, #0]
//	else
//	{
//		//pbuf_ptr=NULL;
//		pbuf_free(pbuf_ptr);
//	}
	return ret_err;
     2e4:	697b      	ldr	r3, [r7, #20]
}
     2e6:	4618      	mov	r0, r3
     2e8:	371c      	adds	r7, #28
     2ea:	46bd      	mov	sp, r7
     2ec:	bc80      	pop	{r7}
     2ee:	4770      	bx	lr
     2f0:	1000004c 	.word	0x1000004c

000002f4 <errorTCP>:

void errorTCP(void *arg, err_t err)
{
     2f4:	b580      	push	{r7, lr}
     2f6:	b084      	sub	sp, #16
     2f8:	af00      	add	r7, sp, #0
     2fa:	6078      	str	r0, [r7, #4]
     2fc:	6039      	str	r1, [r7, #0]
	struct com_state *com_st;
	LWIP_UNUSED_ARG(err);
	com_st = (struct com_state*)arg;
     2fe:	687b      	ldr	r3, [r7, #4]
     300:	60fb      	str	r3, [r7, #12]
	if(com_st == NULL)
     302:	68fb      	ldr	r3, [r7, #12]
     304:	2b00      	cmp	r3, #0
     306:	d102      	bne.n	30e <__cs3_stack_size+0xe>
	{
		mem_free(com_st);
     308:	68f8      	ldr	r0, [r7, #12]
     30a:	f001 ff2d 	bl	2168 <mem_free>
	}
}
     30e:	bf00      	nop
     310:	3710      	adds	r7, #16
     312:	46bd      	mov	sp, r7
     314:	bd80      	pop	{r7, pc}
     316:	bf00      	nop

00000318 <sentTCP>:

err_t sentTCP(void *arg, struct tcp_pcb *tpcb)
{
     318:	b480      	push	{r7}
     31a:	b085      	sub	sp, #20
     31c:	af00      	add	r7, sp, #0
     31e:	6078      	str	r0, [r7, #4]
     320:	6039      	str	r1, [r7, #0]
	//LWIP_UNUSED_ARG(arg);


	err_t err;
	err = ERR_OK;
     322:	2300      	movs	r3, #0
     324:	60fb      	str	r3, [r7, #12]
//	{
//		//pbuf_free(p);
//		pbuf_free(pbuf_ptr);
//		tcp_arg(tpcb,NULL);
//	}
	return err;
     326:	68fb      	ldr	r3, [r7, #12]
}
     328:	4618      	mov	r0, r3
     32a:	3714      	adds	r7, #20
     32c:	46bd      	mov	sp, r7
     32e:	bc80      	pop	{r7}
     330:	4770      	bx	lr
     332:	bf00      	nop

00000334 <closeTCP>:
//	tcp_recved(tpcb, len);
	return wr_err;
}

void closeTCP(struct tcp_pcb *tpcb, struct com_state *com_st)
{
     334:	b580      	push	{r7, lr}
     336:	b082      	sub	sp, #8
     338:	af00      	add	r7, sp, #0
     33a:	6078      	str	r0, [r7, #4]
     33c:	6039      	str	r1, [r7, #0]
	tcp_arg(tpcb, NULL);
     33e:	2100      	movs	r1, #0
     340:	6878      	ldr	r0, [r7, #4]
     342:	f003 fa7b 	bl	383c <tcp_arg>
	tcp_sent(tpcb, NULL);
     346:	2100      	movs	r1, #0
     348:	6878      	ldr	r0, [r7, #4]
     34a:	f003 fa93 	bl	3874 <tcp_sent>
	tcp_recv(tpcb, NULL);
     34e:	2100      	movs	r1, #0
     350:	6878      	ldr	r0, [r7, #4]
     352:	f003 fa81 	bl	3858 <tcp_recv>
	tcp_err(tpcb, NULL);
     356:	2100      	movs	r1, #0
     358:	6878      	ldr	r0, [r7, #4]
     35a:	f003 fa99 	bl	3890 <tcp_err>
	tcp_poll(tpcb, NULL, 0);
     35e:	2200      	movs	r2, #0
     360:	2100      	movs	r1, #0
     362:	6878      	ldr	r0, [r7, #4]
     364:	f003 faa2 	bl	38ac <tcp_poll>

	if (com_st != NULL)
     368:	683b      	ldr	r3, [r7, #0]
     36a:	2b00      	cmp	r3, #0
     36c:	d002      	beq.n	374 <closeTCP+0x40>
	{
	    mem_free(com_st);
     36e:	6838      	ldr	r0, [r7, #0]
     370:	f001 fefa 	bl	2168 <mem_free>
	}
	tcp_close(tpcb);
     374:	6878      	ldr	r0, [r7, #4]
     376:	f002 fc63 	bl	2c40 <tcp_close>
}
     37a:	bf00      	nop
     37c:	3708      	adds	r7, #8
     37e:	46bd      	mov	sp, r7
     380:	bd80      	pop	{r7, pc}
     382:	bf00      	nop

00000384 <pollTCP>:
err_t
pollTCP(void *arg, struct tcp_pcb *tpcb)
{
     384:	b580      	push	{r7, lr}
     386:	b084      	sub	sp, #16
     388:	af00      	add	r7, sp, #0
     38a:	6078      	str	r0, [r7, #4]
     38c:	6039      	str	r1, [r7, #0]
	err_t ret_err;
	struct com_state *com_st;

	com_st = (struct com_state *)arg;
     38e:	687b      	ldr	r3, [r7, #4]
     390:	60bb      	str	r3, [r7, #8]
	if (com_st != NULL)
     392:	68bb      	ldr	r3, [r7, #8]
     394:	2b00      	cmp	r3, #0
     396:	d00c      	beq.n	3b2 <pollTCP+0x2e>
	{
		if (com_st->p != NULL)
     398:	68bb      	ldr	r3, [r7, #8]
     39a:	689b      	ldr	r3, [r3, #8]
     39c:	2b00      	cmp	r3, #0
     39e:	d10e      	bne.n	3be <pollTCP+0x3a>
	    	//sendTCP(tpcb, com_st);
	    }
	    else
	    {
	    	/* no remaining pbuf (chain)  */
	    	if(com_st->state == COM_CLOSING)
     3a0:	68bb      	ldr	r3, [r7, #8]
     3a2:	781b      	ldrb	r3, [r3, #0]
     3a4:	2b03      	cmp	r3, #3
     3a6:	d10a      	bne.n	3be <pollTCP+0x3a>
	    	{
	        	closeTCP(tpcb, com_st);
     3a8:	68b9      	ldr	r1, [r7, #8]
     3aa:	6838      	ldr	r0, [r7, #0]
     3ac:	f7ff ffc2 	bl	334 <closeTCP>
     3b0:	e005      	b.n	3be <pollTCP+0x3a>

	}
	else
	{
	    /* nothing to be done */
	    tcp_abort(tpcb);
     3b2:	6838      	ldr	r0, [r7, #0]
     3b4:	f002 fccc 	bl	2d50 <tcp_abort>
	    ret_err = ERR_ABRT;
     3b8:	f06f 0309 	mvn.w	r3, #9
     3bc:	60fb      	str	r3, [r7, #12]
	}
	return ret_err;
     3be:	68fb      	ldr	r3, [r7, #12]
}
     3c0:	4618      	mov	r0, r3
     3c2:	3710      	adds	r7, #16
     3c4:	46bd      	mov	sp, r7
     3c6:	bd80      	pop	{r7, pc}

000003c8 <main>:


int main (int argc, char **argv)
{
     3c8:	b580      	push	{r7, lr}
     3ca:	b086      	sub	sp, #24
     3cc:	af00      	add	r7, sp, #0
     3ce:	6078      	str	r0, [r7, #4]
     3d0:	6039      	str	r1, [r7, #0]
//	for(uint8_t i =0; i<8; i++)
//	{
//		*(responseData+i)=i+1;
//	}

	comm_init();
     3d2:	f000 fa39 	bl	848 <comm_init>
	xfunc_out = xcomm_put;
     3d6:	4b0e      	ldr	r3, [pc, #56]	; (410 <main+0x48>)
     3d8:	4a0e      	ldr	r2, [pc, #56]	; (414 <main+0x4c>)
     3da:	601a      	str	r2, [r3, #0]
	xfunc_in  = xcomm_get;
     3dc:	4b0e      	ldr	r3, [pc, #56]	; (418 <main+0x50>)
     3de:	4a0f      	ldr	r2, [pc, #60]	; (41c <main+0x54>)
     3e0:	601a      	str	r2, [r3, #0]
	//SysTick_Config(SystemCoreClock/1000000 - 1); /* Generate interrupt each 1 ms   */
	SysTick_Config( 100000000 / TIMER_TICK_HZ);
     3e2:	480f      	ldr	r0, [pc, #60]	; (420 <main+0x58>)
     3e4:	f7ff fece 	bl	184 <SysTick_Config>
	lwip_init();
     3e8:	f7ff ff06 	bl	1f8 <lwip_init>
	tcpPcb=tcp_new();										// Create a new TC pCB.
     3ec:	f003 fa1e 	bl	382c <tcp_new>
     3f0:	6178      	str	r0, [r7, #20]

	ulIPAddrComputer = COMM_PC_IP;							//address of your computer - hex code for 192.168.1.30
     3f2:	4b0c      	ldr	r3, [pc, #48]	; (424 <main+0x5c>)
     3f4:	613b      	str	r3, [r7, #16]
//	tcp_bind(tcpPcb, IP_ADDR_ANY, SEND_PORT);				//Bind the PCB with the TCP.

//	tcpPcb = tcp_listen(tcpPcb);							// listen to incoming connection

	err_t error = tcp_connect(tcpPcb,COMM_PC_IP,SEND_PORT,acceptTCP);
     3f6:	4b0c      	ldr	r3, [pc, #48]	; (428 <main+0x60>)
     3f8:	f242 3228 	movw	r2, #9000	; 0x2328
     3fc:	4909      	ldr	r1, [pc, #36]	; (424 <main+0x5c>)
     3fe:	6978      	ldr	r0, [r7, #20]
     400:	f002 fd5c 	bl	2ebc <tcp_connect>
     404:	60f8      	str	r0, [r7, #12]
//		//The jump codes must be changed as per the size of the BootLoader.
//		jump_to_app_section();
//
//	}

	return 0;
     406:	2300      	movs	r3, #0
}
     408:	4618      	mov	r0, r3
     40a:	3718      	adds	r7, #24
     40c:	46bd      	mov	sp, r7
     40e:	bd80      	pop	{r7, pc}
     410:	10001300 	.word	0x10001300
     414:	00000855 	.word	0x00000855
     418:	100012fc 	.word	0x100012fc
     41c:	00000871 	.word	0x00000871
     420:	000186a0 	.word	0x000186a0
     424:	c0a8011e 	.word	0xc0a8011e
     428:	00000271 	.word	0x00000271

0000042c <startup_delay>:

void startup_delay(void)
{
     42c:	b480      	push	{r7}
     42e:	b083      	sub	sp, #12
     430:	af00      	add	r7, sp, #0
	for (volatile unsigned long i = 0; i < 500000; i++) { ; }
     432:	2300      	movs	r3, #0
     434:	607b      	str	r3, [r7, #4]
     436:	e002      	b.n	43e <startup_delay+0x12>
     438:	687b      	ldr	r3, [r7, #4]
     43a:	3301      	adds	r3, #1
     43c:	607b      	str	r3, [r7, #4]
     43e:	687b      	ldr	r3, [r7, #4]
     440:	4a03      	ldr	r2, [pc, #12]	; (450 <startup_delay+0x24>)
     442:	4293      	cmp	r3, r2
     444:	d9f8      	bls.n	438 <startup_delay+0xc>
}
     446:	bf00      	nop
     448:	370c      	adds	r7, #12
     44a:	46bd      	mov	sp, r7
     44c:	bc80      	pop	{r7}
     44e:	4770      	bx	lr
     450:	0007a11f 	.word	0x0007a11f

00000454 <NVIC_EnableIRQ>:
 *
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
     454:	b480      	push	{r7}
     456:	b083      	sub	sp, #12
     458:	af00      	add	r7, sp, #0
     45a:	4603      	mov	r3, r0
     45c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
     45e:	4908      	ldr	r1, [pc, #32]	; (480 <NVIC_EnableIRQ+0x2c>)
     460:	f997 3007 	ldrsb.w	r3, [r7, #7]
     464:	095b      	lsrs	r3, r3, #5
     466:	79fa      	ldrb	r2, [r7, #7]
     468:	f002 021f 	and.w	r2, r2, #31
     46c:	2001      	movs	r0, #1
     46e:	fa00 f202 	lsl.w	r2, r0, r2
     472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
     476:	bf00      	nop
     478:	370c      	adds	r7, #12
     47a:	46bd      	mov	sp, r7
     47c:	bc80      	pop	{r7}
     47e:	4770      	bx	lr
     480:	e000e100 	.word	0xe000e100

00000484 <NVIC_SetPriority>:
 * interrupt, or negative to specify an internal (core) interrupt.
 *
 * Note: The priority cannot be set for every core interrupt.
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
     484:	b480      	push	{r7}
     486:	b083      	sub	sp, #12
     488:	af00      	add	r7, sp, #0
     48a:	4603      	mov	r3, r0
     48c:	6039      	str	r1, [r7, #0]
     48e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
     490:	f997 3007 	ldrsb.w	r3, [r7, #7]
     494:	2b00      	cmp	r3, #0
     496:	da0b      	bge.n	4b0 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
     498:	490d      	ldr	r1, [pc, #52]	; (4d0 <NVIC_SetPriority+0x4c>)
     49a:	79fb      	ldrb	r3, [r7, #7]
     49c:	f003 030f 	and.w	r3, r3, #15
     4a0:	3b04      	subs	r3, #4
     4a2:	683a      	ldr	r2, [r7, #0]
     4a4:	b2d2      	uxtb	r2, r2
     4a6:	00d2      	lsls	r2, r2, #3
     4a8:	b2d2      	uxtb	r2, r2
     4aa:	440b      	add	r3, r1
     4ac:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
     4ae:	e009      	b.n	4c4 <NVIC_SetPriority+0x40>
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
     4b0:	4908      	ldr	r1, [pc, #32]	; (4d4 <NVIC_SetPriority+0x50>)
     4b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
     4b6:	683a      	ldr	r2, [r7, #0]
     4b8:	b2d2      	uxtb	r2, r2
     4ba:	00d2      	lsls	r2, r2, #3
     4bc:	b2d2      	uxtb	r2, r2
     4be:	440b      	add	r3, r1
     4c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
     4c4:	bf00      	nop
     4c6:	370c      	adds	r7, #12
     4c8:	46bd      	mov	sp, r7
     4ca:	bc80      	pop	{r7}
     4cc:	4770      	bx	lr
     4ce:	bf00      	nop
     4d0:	e000ed00 	.word	0xe000ed00
     4d4:	e000e100 	.word	0xe000e100

000004d8 <UART0_IRQHandler>:
 * 				standard interrupt handler in uart driver
 * @param	None
 * @return	None
 **********************************************************************/
void UART0_IRQHandler(void)
{
     4d8:	b580      	push	{r7, lr}
     4da:	af00      	add	r7, sp, #0
	// Call Standard UART 0 interrupt handler
	UART0_StdIntHandler();
     4dc:	f001 fabc 	bl	1a58 <UART0_StdIntHandler>
}
     4e0:	bf00      	nop
     4e2:	bd80      	pop	{r7, pc}

000004e4 <UART_IntReceive>:
 * @brief 		UART receive function (ring buffer used)
 * @param[in]	None
 * @return 		None
 *********************************************************************/
static void UART_IntReceive(void)
{
     4e4:	b580      	push	{r7, lr}
     4e6:	b082      	sub	sp, #8
     4e8:	af00      	add	r7, sp, #0
	uint32_t rLen;

	while (1)
	{
		// Call UART read function in UART driver
		rLen = UART_Receive(TEST_UART, &tmpc, 1, NONE_BLOCKING);
     4ea:	1cf9      	adds	r1, r7, #3
     4ec:	2300      	movs	r3, #0
     4ee:	2201      	movs	r2, #1
     4f0:	4811      	ldr	r0, [pc, #68]	; (538 <UART_IntReceive+0x54>)
     4f2:	f001 fa0b 	bl	190c <UART_Receive>
     4f6:	6078      	str	r0, [r7, #4]
		// If data received
		if (rLen)
     4f8:	687b      	ldr	r3, [r7, #4]
     4fa:	2b00      	cmp	r3, #0
     4fc:	d017      	beq.n	52e <UART_IntReceive+0x4a>
		{
			/* Check if buffer is more space
			 * If no more space, remaining character will be trimmed out
			 */
			if (!__BUF_IS_FULL(rb.rx_head,rb.rx_tail))
     4fe:	4b0f      	ldr	r3, [pc, #60]	; (53c <UART_IntReceive+0x58>)
     500:	68da      	ldr	r2, [r3, #12]
     502:	4b0e      	ldr	r3, [pc, #56]	; (53c <UART_IntReceive+0x58>)
     504:	689b      	ldr	r3, [r3, #8]
     506:	3301      	adds	r3, #1
     508:	4053      	eors	r3, r2
     50a:	b2db      	uxtb	r3, r3
     50c:	2b00      	cmp	r3, #0
     50e:	d0ec      	beq.n	4ea <UART_IntReceive+0x6>
			{
				rb.rx[rb.rx_head] = tmpc;
     510:	4b0a      	ldr	r3, [pc, #40]	; (53c <UART_IntReceive+0x58>)
     512:	689b      	ldr	r3, [r3, #8]
     514:	78f9      	ldrb	r1, [r7, #3]
     516:	4a09      	ldr	r2, [pc, #36]	; (53c <UART_IntReceive+0x58>)
     518:	4413      	add	r3, r2
     51a:	460a      	mov	r2, r1
     51c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				__BUF_INCR(rb.rx_head);
     520:	4b06      	ldr	r3, [pc, #24]	; (53c <UART_IntReceive+0x58>)
     522:	689b      	ldr	r3, [r3, #8]
     524:	3301      	adds	r3, #1
     526:	b2db      	uxtb	r3, r3
     528:	4a04      	ldr	r2, [pc, #16]	; (53c <UART_IntReceive+0x58>)
     52a:	6093      	str	r3, [r2, #8]
		// no more data
		else
		{
			break;
		}
	}
     52c:	e7dd      	b.n	4ea <UART_IntReceive+0x6>
			}
		}
		// no more data
		else
		{
			break;
     52e:	bf00      	nop
		}
	}
}
     530:	bf00      	nop
     532:	3708      	adds	r7, #8
     534:	46bd      	mov	sp, r7
     536:	bd80      	pop	{r7, pc}
     538:	4000c000 	.word	0x4000c000
     53c:	10000050 	.word	0x10000050

00000540 <UART_IntTransmit>:
 * @brief 		UART transmit function (ring buffer used)
 * @param[in]	None
 * @return 		None
 *********************************************************************/
static void UART_IntTransmit(void)
{
     540:	b580      	push	{r7, lr}
     542:	af00      	add	r7, sp, #0
	// Disable THRE interrupt
	UART_IntConfig(TEST_UART, UART_INTCFG_THRE, DISABLE);
     544:	2200      	movs	r2, #0
     546:	2101      	movs	r1, #1
     548:	4821      	ldr	r0, [pc, #132]	; (5d0 <UART_IntTransmit+0x90>)
     54a:	f001 f841 	bl	15d0 <UART_IntConfig>

	/* Wait for FIFO buffer empty, transfer UART_TX_FIFO_SIZE bytes
	 * of data or break whenever ring buffers are empty */
	/* Wait until THR empty */
	while (UART_CheckBusy(TEST_UART) == SET)
     54e:	bf00      	nop
     550:	481f      	ldr	r0, [pc, #124]	; (5d0 <UART_IntTransmit+0x90>)
     552:	f001 f8a9 	bl	16a8 <UART_CheckBusy>
     556:	4603      	mov	r3, r0
     558:	2b01      	cmp	r3, #1
     55a:	d0f9      	beq.n	550 <UART_IntTransmit+0x10>
		;

	while (!__BUF_IS_EMPTY(rb.tx_head,rb.tx_tail))
     55c:	e012      	b.n	584 <UART_IntTransmit+0x44>
	{
		/* Move a piece of data into the transmit FIFO */
		if (UART_Send(TEST_UART, (uint8_t *) &rb.tx[rb.tx_tail], 1,
     55e:	4b1d      	ldr	r3, [pc, #116]	; (5d4 <UART_IntTransmit+0x94>)
     560:	685b      	ldr	r3, [r3, #4]
     562:	3310      	adds	r3, #16
     564:	4a1b      	ldr	r2, [pc, #108]	; (5d4 <UART_IntTransmit+0x94>)
     566:	1899      	adds	r1, r3, r2
     568:	2300      	movs	r3, #0
     56a:	2201      	movs	r2, #1
     56c:	4818      	ldr	r0, [pc, #96]	; (5d0 <UART_IntTransmit+0x90>)
     56e:	f001 f957 	bl	1820 <UART_Send>
     572:	4603      	mov	r3, r0
     574:	2b00      	cmp	r3, #0
     576:	d00e      	beq.n	596 <UART_IntTransmit+0x56>
				NONE_BLOCKING))
		{
			/* Update transmit ring FIFO tail pointer */
			__BUF_INCR(rb.tx_tail);
     578:	4b16      	ldr	r3, [pc, #88]	; (5d4 <UART_IntTransmit+0x94>)
     57a:	685b      	ldr	r3, [r3, #4]
     57c:	3301      	adds	r3, #1
     57e:	b2db      	uxtb	r3, r3
     580:	4a14      	ldr	r2, [pc, #80]	; (5d4 <UART_IntTransmit+0x94>)
     582:	6053      	str	r3, [r2, #4]
	 * of data or break whenever ring buffers are empty */
	/* Wait until THR empty */
	while (UART_CheckBusy(TEST_UART) == SET)
		;

	while (!__BUF_IS_EMPTY(rb.tx_head,rb.tx_tail))
     584:	4b13      	ldr	r3, [pc, #76]	; (5d4 <UART_IntTransmit+0x94>)
     586:	681a      	ldr	r2, [r3, #0]
     588:	4b12      	ldr	r3, [pc, #72]	; (5d4 <UART_IntTransmit+0x94>)
     58a:	685b      	ldr	r3, [r3, #4]
     58c:	4053      	eors	r3, r2
     58e:	b2db      	uxtb	r3, r3
     590:	2b00      	cmp	r3, #0
     592:	d1e4      	bne.n	55e <UART_IntTransmit+0x1e>
     594:	e000      	b.n	598 <UART_IntTransmit+0x58>
			/* Update transmit ring FIFO tail pointer */
			__BUF_INCR(rb.tx_tail);
		}
		else
		{
			break;
     596:	bf00      	nop
		}
	}

	/* If there is no more data to send, disable the transmit
	 interrupt - else enable it or keep it enabled */
	if (__BUF_IS_EMPTY(rb.tx_head, rb.tx_tail))
     598:	4b0e      	ldr	r3, [pc, #56]	; (5d4 <UART_IntTransmit+0x94>)
     59a:	681a      	ldr	r2, [r3, #0]
     59c:	4b0d      	ldr	r3, [pc, #52]	; (5d4 <UART_IntTransmit+0x94>)
     59e:	685b      	ldr	r3, [r3, #4]
     5a0:	4053      	eors	r3, r2
     5a2:	b2db      	uxtb	r3, r3
     5a4:	2b00      	cmp	r3, #0
     5a6:	d108      	bne.n	5ba <UART_IntTransmit+0x7a>
	{
		UART_IntConfig(TEST_UART, UART_INTCFG_THRE, DISABLE);
     5a8:	2200      	movs	r2, #0
     5aa:	2101      	movs	r1, #1
     5ac:	4808      	ldr	r0, [pc, #32]	; (5d0 <UART_IntTransmit+0x90>)
     5ae:	f001 f80f 	bl	15d0 <UART_IntConfig>
		// Reset Tx Interrupt state
		TxIntStat = RESET;
     5b2:	4b09      	ldr	r3, [pc, #36]	; (5d8 <UART_IntTransmit+0x98>)
     5b4:	2200      	movs	r2, #0
     5b6:	701a      	strb	r2, [r3, #0]
	{
		// Set Tx Interrupt state
		TxIntStat = SET;
		UART_IntConfig(TEST_UART, UART_INTCFG_THRE, ENABLE);
	}
}
     5b8:	e007      	b.n	5ca <UART_IntTransmit+0x8a>
		TxIntStat = RESET;
	}
	else
	{
		// Set Tx Interrupt state
		TxIntStat = SET;
     5ba:	4b07      	ldr	r3, [pc, #28]	; (5d8 <UART_IntTransmit+0x98>)
     5bc:	2201      	movs	r2, #1
     5be:	701a      	strb	r2, [r3, #0]
		UART_IntConfig(TEST_UART, UART_INTCFG_THRE, ENABLE);
     5c0:	2201      	movs	r2, #1
     5c2:	2101      	movs	r1, #1
     5c4:	4802      	ldr	r0, [pc, #8]	; (5d0 <UART_IntTransmit+0x90>)
     5c6:	f001 f803 	bl	15d0 <UART_IntConfig>
	}
}
     5ca:	bf00      	nop
     5cc:	bd80      	pop	{r7, pc}
     5ce:	bf00      	nop
     5d0:	4000c000 	.word	0x4000c000
     5d4:	10000050 	.word	0x10000050
     5d8:	10000260 	.word	0x10000260

000005dc <UART_IntErr>:
 * @brief		UART Line Status Error callback
 * @param[in]	bLSErrType	UART Line Status Error Type
 * @return		None
 **********************************************************************/
static void UART_IntErr(uint8_t bLSErrType)
{
     5dc:	b480      	push	{r7}
     5de:	b085      	sub	sp, #20
     5e0:	af00      	add	r7, sp, #0
     5e2:	4603      	mov	r3, r0
     5e4:	71fb      	strb	r3, [r7, #7]
	uint8_t test;
	// Loop forever
	while (1)
	{
		// For testing purpose
		test = bLSErrType;
     5e6:	79fb      	ldrb	r3, [r7, #7]
     5e8:	73fb      	strb	r3, [r7, #15]
	}
     5ea:	e7fc      	b.n	5e6 <UART_IntErr+0xa>

000005ec <UARTSend>:
 * @param[out]	txbuf Pointer to Transmit buffer
 * @param[in]	buflen Length of Transmit buffer
 * @return 		Number of bytes actually sent to the ring buffer
 **********************************************************************/
static uint32_t UARTSend(LPC_UART_TypeDef *UARTPort, uint8_t txbuf[], uint8_t buflen)
{
     5ec:	b580      	push	{r7, lr}
     5ee:	b086      	sub	sp, #24
     5f0:	af00      	add	r7, sp, #0
     5f2:	60f8      	str	r0, [r7, #12]
     5f4:	60b9      	str	r1, [r7, #8]
     5f6:	4613      	mov	r3, r2
     5f8:	71fb      	strb	r3, [r7, #7]
	uint8_t* data = &txbuf[0];
     5fa:	68bb      	ldr	r3, [r7, #8]
     5fc:	617b      	str	r3, [r7, #20]
	uint32_t bytes = 0;
     5fe:	2300      	movs	r3, #0
     600:	613b      	str	r3, [r7, #16]

	/* Temporarily lock out UART transmit interrupts during this
	 read so the UART transmit interrupt won't cause problems
	 with the index values */
	UART_IntConfig(UARTPort, UART_INTCFG_THRE, DISABLE);
     602:	2200      	movs	r2, #0
     604:	2101      	movs	r1, #1
     606:	68f8      	ldr	r0, [r7, #12]
     608:	f000 ffe2 	bl	15d0 <UART_IntConfig>

	/* Loop until transmit run buffer is full or until n_bytes
	 expires */
	while ((buflen > 0) && (!__BUF_IS_FULL(rb.tx_head, rb.tx_tail)))
     60c:	e016      	b.n	63c <UARTSend+0x50>
	{
		/* Write data from buffer into ring buffer */
		rb.tx[rb.tx_head] = *data;
     60e:	4b1a      	ldr	r3, [pc, #104]	; (678 <UARTSend+0x8c>)
     610:	681b      	ldr	r3, [r3, #0]
     612:	697a      	ldr	r2, [r7, #20]
     614:	7811      	ldrb	r1, [r2, #0]
     616:	4a18      	ldr	r2, [pc, #96]	; (678 <UARTSend+0x8c>)
     618:	4413      	add	r3, r2
     61a:	460a      	mov	r2, r1
     61c:	741a      	strb	r2, [r3, #16]
		data++;
     61e:	697b      	ldr	r3, [r7, #20]
     620:	3301      	adds	r3, #1
     622:	617b      	str	r3, [r7, #20]

		/* Increment head pointer */
		__BUF_INCR(rb.tx_head);
     624:	4b14      	ldr	r3, [pc, #80]	; (678 <UARTSend+0x8c>)
     626:	681b      	ldr	r3, [r3, #0]
     628:	3301      	adds	r3, #1
     62a:	b2db      	uxtb	r3, r3
     62c:	4a12      	ldr	r2, [pc, #72]	; (678 <UARTSend+0x8c>)
     62e:	6013      	str	r3, [r2, #0]

		/* Increment data count and decrement buffer size count */
		bytes++;
     630:	693b      	ldr	r3, [r7, #16]
     632:	3301      	adds	r3, #1
     634:	613b      	str	r3, [r7, #16]
		buflen--;
     636:	79fb      	ldrb	r3, [r7, #7]
     638:	3b01      	subs	r3, #1
     63a:	71fb      	strb	r3, [r7, #7]
	 with the index values */
	UART_IntConfig(UARTPort, UART_INTCFG_THRE, DISABLE);

	/* Loop until transmit run buffer is full or until n_bytes
	 expires */
	while ((buflen > 0) && (!__BUF_IS_FULL(rb.tx_head, rb.tx_tail)))
     63c:	79fb      	ldrb	r3, [r7, #7]
     63e:	2b00      	cmp	r3, #0
     640:	d008      	beq.n	654 <UARTSend+0x68>
     642:	4b0d      	ldr	r3, [pc, #52]	; (678 <UARTSend+0x8c>)
     644:	685a      	ldr	r2, [r3, #4]
     646:	4b0c      	ldr	r3, [pc, #48]	; (678 <UARTSend+0x8c>)
     648:	681b      	ldr	r3, [r3, #0]
     64a:	3301      	adds	r3, #1
     64c:	4053      	eors	r3, r2
     64e:	b2db      	uxtb	r3, r3
     650:	2b00      	cmp	r3, #0
     652:	d1dc      	bne.n	60e <UARTSend+0x22>
	 * Check if current Tx interrupt enable is reset,
	 * that means the Tx interrupt must be re-enabled
	 * due to call UART_IntTransmit() function to trigger
	 * this interrupt type
	 */
	if (TxIntStat == RESET)
     654:	4b09      	ldr	r3, [pc, #36]	; (67c <UARTSend+0x90>)
     656:	781b      	ldrb	r3, [r3, #0]
     658:	b2db      	uxtb	r3, r3
     65a:	2b00      	cmp	r3, #0
     65c:	d102      	bne.n	664 <UARTSend+0x78>
	{
		UART_IntTransmit();
     65e:	f7ff ff6f 	bl	540 <UART_IntTransmit>
     662:	e004      	b.n	66e <UARTSend+0x82>
	/*
	 * Otherwise, re-enables Tx Interrupt
	 */
	else
	{
		UART_IntConfig(UARTPort, UART_INTCFG_THRE, ENABLE);
     664:	2201      	movs	r2, #1
     666:	2101      	movs	r1, #1
     668:	68f8      	ldr	r0, [r7, #12]
     66a:	f000 ffb1 	bl	15d0 <UART_IntConfig>
	}

	return bytes;
     66e:	693b      	ldr	r3, [r7, #16]
}
     670:	4618      	mov	r0, r3
     672:	3718      	adds	r7, #24
     674:	46bd      	mov	sp, r7
     676:	bd80      	pop	{r7, pc}
     678:	10000050 	.word	0x10000050
     67c:	10000260 	.word	0x10000260

00000680 <UARTReceive>:
 * @param[out]	rxbuf Pointer to Received buffer
 * @param[in]	buflen Length of Received buffer
 * @return 		Number of bytes actually read from the ring buffer
 **********************************************************************/
static uint32_t UARTReceive(LPC_UART_TypeDef *UARTPort, uint8_t *rxbuf, uint8_t buflen)
{
     680:	b580      	push	{r7, lr}
     682:	b086      	sub	sp, #24
     684:	af00      	add	r7, sp, #0
     686:	60f8      	str	r0, [r7, #12]
     688:	60b9      	str	r1, [r7, #8]
     68a:	4613      	mov	r3, r2
     68c:	71fb      	strb	r3, [r7, #7]
	uint8_t *data = (uint8_t *) rxbuf;
     68e:	68bb      	ldr	r3, [r7, #8]
     690:	617b      	str	r3, [r7, #20]
	uint32_t bytes = 0;
     692:	2300      	movs	r3, #0
     694:	613b      	str	r3, [r7, #16]

	/* Temporarily lock out UART receive interrupts during this
	 read so the UART receive interrupt won't cause problems
	 with the index values */
	UART_IntConfig(UARTPort, UART_INTCFG_RBR, DISABLE);
     696:	2200      	movs	r2, #0
     698:	2100      	movs	r1, #0
     69a:	68f8      	ldr	r0, [r7, #12]
     69c:	f000 ff98 	bl	15d0 <UART_IntConfig>

	/* Loop until receive buffer ring is empty or
	 until max_bytes expires */
	while ((buflen > 0) && (!(__BUF_IS_EMPTY(rb.rx_head, rb.rx_tail))))
     6a0:	e017      	b.n	6d2 <UARTReceive+0x52>
	{
		/* Read data from ring buffer into user buffer */
		*data = rb.rx[rb.rx_tail];
     6a2:	4b16      	ldr	r3, [pc, #88]	; (6fc <UARTReceive+0x7c>)
     6a4:	68db      	ldr	r3, [r3, #12]
     6a6:	4a15      	ldr	r2, [pc, #84]	; (6fc <UARTReceive+0x7c>)
     6a8:	4413      	add	r3, r2
     6aa:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
     6ae:	b2da      	uxtb	r2, r3
     6b0:	697b      	ldr	r3, [r7, #20]
     6b2:	701a      	strb	r2, [r3, #0]
		data++;
     6b4:	697b      	ldr	r3, [r7, #20]
     6b6:	3301      	adds	r3, #1
     6b8:	617b      	str	r3, [r7, #20]

		/* Update tail pointer */
		__BUF_INCR(rb.rx_tail);
     6ba:	4b10      	ldr	r3, [pc, #64]	; (6fc <UARTReceive+0x7c>)
     6bc:	68db      	ldr	r3, [r3, #12]
     6be:	3301      	adds	r3, #1
     6c0:	b2db      	uxtb	r3, r3
     6c2:	4a0e      	ldr	r2, [pc, #56]	; (6fc <UARTReceive+0x7c>)
     6c4:	60d3      	str	r3, [r2, #12]

		/* Increment data count and decrement buffer size count */
		bytes++;
     6c6:	693b      	ldr	r3, [r7, #16]
     6c8:	3301      	adds	r3, #1
     6ca:	613b      	str	r3, [r7, #16]
		buflen--;
     6cc:	79fb      	ldrb	r3, [r7, #7]
     6ce:	3b01      	subs	r3, #1
     6d0:	71fb      	strb	r3, [r7, #7]
	 with the index values */
	UART_IntConfig(UARTPort, UART_INTCFG_RBR, DISABLE);

	/* Loop until receive buffer ring is empty or
	 until max_bytes expires */
	while ((buflen > 0) && (!(__BUF_IS_EMPTY(rb.rx_head, rb.rx_tail))))
     6d2:	79fb      	ldrb	r3, [r7, #7]
     6d4:	2b00      	cmp	r3, #0
     6d6:	d007      	beq.n	6e8 <UARTReceive+0x68>
     6d8:	4b08      	ldr	r3, [pc, #32]	; (6fc <UARTReceive+0x7c>)
     6da:	689a      	ldr	r2, [r3, #8]
     6dc:	4b07      	ldr	r3, [pc, #28]	; (6fc <UARTReceive+0x7c>)
     6de:	68db      	ldr	r3, [r3, #12]
     6e0:	4053      	eors	r3, r2
     6e2:	b2db      	uxtb	r3, r3
     6e4:	2b00      	cmp	r3, #0
     6e6:	d1dc      	bne.n	6a2 <UARTReceive+0x22>
		bytes++;
		buflen--;
	}

	/* Re-enable UART interrupts */
	UART_IntConfig(UARTPort, UART_INTCFG_RBR, ENABLE);
     6e8:	2201      	movs	r2, #1
     6ea:	2100      	movs	r1, #0
     6ec:	68f8      	ldr	r0, [r7, #12]
     6ee:	f000 ff6f 	bl	15d0 <UART_IntConfig>

	return bytes;
     6f2:	693b      	ldr	r3, [r7, #16]
}
     6f4:	4618      	mov	r0, r3
     6f6:	3718      	adds	r7, #24
     6f8:	46bd      	mov	sp, r7
     6fa:	bd80      	pop	{r7, pc}
     6fc:	10000050 	.word	0x10000050

00000700 <uart_init_intern>:

/*********************************************************************//**
 * @brief	UART init sub-routine
 **********************************************************************/
static int uart_init_intern(void)
{
     700:	b580      	push	{r7, lr}
     702:	b086      	sub	sp, #24
     704:	af00      	add	r7, sp, #0

#if (UART_PORT == 0)
	/*
	 * Initialize UART0 pin connect
	 */
	PinCfg.Funcnum = 1;
     706:	2301      	movs	r3, #1
     708:	71bb      	strb	r3, [r7, #6]
	PinCfg.OpenDrain = 0;
     70a:	2300      	movs	r3, #0
     70c:	723b      	strb	r3, [r7, #8]
	PinCfg.Pinmode = 0;
     70e:	2300      	movs	r3, #0
     710:	71fb      	strb	r3, [r7, #7]
	PinCfg.Pinnum = 2;
     712:	2302      	movs	r3, #2
     714:	717b      	strb	r3, [r7, #5]
	PinCfg.Portnum = 0;
     716:	2300      	movs	r3, #0
     718:	713b      	strb	r3, [r7, #4]
	PINSEL_ConfigPin(&PinCfg);
     71a:	1d3b      	adds	r3, r7, #4
     71c:	4618      	mov	r0, r3
     71e:	f000 fbf1 	bl	f04 <PINSEL_ConfigPin>
	PinCfg.Pinnum = 3;
     722:	2303      	movs	r3, #3
     724:	717b      	strb	r3, [r7, #5]
	PINSEL_ConfigPin(&PinCfg);
     726:	1d3b      	adds	r3, r7, #4
     728:	4618      	mov	r0, r3
     72a:	f000 fbeb 	bl	f04 <PINSEL_ConfigPin>
	 * Baudrate = 9600bps
	 * 8 data bit
	 * 1 Stop bit
	 * None parity
	 */
	UART_ConfigStructInit(&UARTConfigStruct);
     72e:	f107 0310 	add.w	r3, r7, #16
     732:	4618      	mov	r0, r3
     734:	f000 ff08 	bl	1548 <UART_ConfigStructInit>
	// Re-configure baud-rate to 115200bps
	UARTConfigStruct.Baud_rate = 115200;
     738:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
     73c:	613b      	str	r3, [r7, #16]

	// Initialize UART0 peripheral with given to corresponding parameter
	UART_Init(TEST_UART, &UARTConfigStruct);
     73e:	f107 0310 	add.w	r3, r7, #16
     742:	4619      	mov	r1, r3
     744:	4822      	ldr	r0, [pc, #136]	; (7d0 <Heap_Size+0xd0>)
     746:	f000 fddd 	bl	1304 <UART_Init>
	 * 				- FIFO_Level = UART_FIFO_TRGLEV0
	 * 				- FIFO_ResetRxBuf = ENABLE
	 * 				- FIFO_ResetTxBuf = ENABLE
	 * 				- FIFO_State = ENABLE
	 */
	UART_FIFOConfigStructInit(&UARTFIFOConfigStruct);
     74a:	f107 030c 	add.w	r3, r7, #12
     74e:	4618      	mov	r0, r3
     750:	f001 f812 	bl	1778 <UART_FIFOConfigStructInit>

	// Initialize FIFO for UART0 peripheral
	UART_FIFOConfig(TEST_UART, &UARTFIFOConfigStruct);
     754:	f107 030c 	add.w	r3, r7, #12
     758:	4619      	mov	r1, r3
     75a:	481d      	ldr	r0, [pc, #116]	; (7d0 <Heap_Size+0xd0>)
     75c:	f000 ffb8 	bl	16d0 <UART_FIFOConfig>

	// Setup callback ---------------
	// Receive callback
	UART_SetupCbs(TEST_UART, 0, (void *) UART_IntReceive);
     760:	4a1c      	ldr	r2, [pc, #112]	; (7d4 <Heap_Size+0xd4>)
     762:	2100      	movs	r1, #0
     764:	481a      	ldr	r0, [pc, #104]	; (7d0 <Heap_Size+0xd0>)
     766:	f001 f92f 	bl	19c8 <UART_SetupCbs>
	// Transmit callback
	UART_SetupCbs(TEST_UART, 1, (void *) UART_IntTransmit);
     76a:	4a1b      	ldr	r2, [pc, #108]	; (7d8 <Heap_Size+0xd8>)
     76c:	2101      	movs	r1, #1
     76e:	4818      	ldr	r0, [pc, #96]	; (7d0 <Heap_Size+0xd0>)
     770:	f001 f92a 	bl	19c8 <UART_SetupCbs>
	// Line Status Error callback
	UART_SetupCbs(TEST_UART, 3, (void *) UART_IntErr);
     774:	4a19      	ldr	r2, [pc, #100]	; (7dc <Heap_Size+0xdc>)
     776:	2103      	movs	r1, #3
     778:	4815      	ldr	r0, [pc, #84]	; (7d0 <Heap_Size+0xd0>)
     77a:	f001 f925 	bl	19c8 <UART_SetupCbs>

	// Enable UART Transmit
	UART_TxCmd(TEST_UART, ENABLE);
     77e:	2101      	movs	r1, #1
     780:	4813      	ldr	r0, [pc, #76]	; (7d0 <Heap_Size+0xd0>)
     782:	f001 f80f 	bl	17a4 <UART_TxCmd>

	/* Enable UART Rx interrupt */
	UART_IntConfig(TEST_UART, UART_INTCFG_RBR, ENABLE);
     786:	2201      	movs	r2, #1
     788:	2100      	movs	r1, #0
     78a:	4811      	ldr	r0, [pc, #68]	; (7d0 <Heap_Size+0xd0>)
     78c:	f000 ff20 	bl	15d0 <UART_IntConfig>
	/* Enable UART line status interrupt */
	UART_IntConfig(TEST_UART, UART_INTCFG_RLS, ENABLE);
     790:	2201      	movs	r2, #1
     792:	2102      	movs	r1, #2
     794:	480e      	ldr	r0, [pc, #56]	; (7d0 <Heap_Size+0xd0>)
     796:	f000 ff1b 	bl	15d0 <UART_IntConfig>
	/*
	 * Do not enable transmit interrupt here, since it is handled by
	 * UART_Send() function, just to reset Tx Interrupt state for the
	 * first time
	 */
	TxIntStat = RESET;
     79a:	4b11      	ldr	r3, [pc, #68]	; (7e0 <Heap_Size+0xe0>)
     79c:	2200      	movs	r2, #0
     79e:	701a      	strb	r2, [r3, #0]

	// Reset ring buf head and tail idx
	__BUF_RESET(rb.rx_head);
     7a0:	4b10      	ldr	r3, [pc, #64]	; (7e4 <Heap_Size+0xe4>)
     7a2:	2200      	movs	r2, #0
     7a4:	609a      	str	r2, [r3, #8]
	__BUF_RESET(rb.rx_tail);
     7a6:	4b0f      	ldr	r3, [pc, #60]	; (7e4 <Heap_Size+0xe4>)
     7a8:	2200      	movs	r2, #0
     7aa:	60da      	str	r2, [r3, #12]
	__BUF_RESET(rb.tx_head);
     7ac:	4b0d      	ldr	r3, [pc, #52]	; (7e4 <Heap_Size+0xe4>)
     7ae:	2200      	movs	r2, #0
     7b0:	601a      	str	r2, [r3, #0]
	__BUF_RESET(rb.tx_tail);
     7b2:	4b0c      	ldr	r3, [pc, #48]	; (7e4 <Heap_Size+0xe4>)
     7b4:	2200      	movs	r2, #0
     7b6:	605a      	str	r2, [r3, #4]

#if (UART_PORT == 0)
	/* preemption = 1, sub-priority = 1 */
	NVIC_SetPriority(UART0_IRQn, ((0x01 << 3) | 0x01));
     7b8:	2109      	movs	r1, #9
     7ba:	2005      	movs	r0, #5
     7bc:	f7ff fe62 	bl	484 <NVIC_SetPriority>
	/* Enable Interrupt for UART0 channel */
	NVIC_EnableIRQ(UART0_IRQn);
     7c0:	2005      	movs	r0, #5
     7c2:	f7ff fe47 	bl	454 <NVIC_EnableIRQ>
	NVIC_SetPriority(UART1_IRQn, ((0x01<<3)|0x01));
	/* Enable Interrupt for UART0 channel */
	NVIC_EnableIRQ(UART1_IRQn);
#endif

	return 0;
     7c6:	2300      	movs	r3, #0
}
     7c8:	4618      	mov	r0, r3
     7ca:	3718      	adds	r7, #24
     7cc:	46bd      	mov	sp, r7
     7ce:	bd80      	pop	{r7, pc}
     7d0:	4000c000 	.word	0x4000c000
     7d4:	000004e5 	.word	0x000004e5
     7d8:	00000541 	.word	0x00000541
     7dc:	000005dd 	.word	0x000005dd
     7e0:	10000260 	.word	0x10000260
     7e4:	10000050 	.word	0x10000050

000007e8 <comm_get>:
{
	return ( __BUF_IS_EMPTY(rb.rx_head, rb.rx_tail) ) ? 0 : 1;
}

char comm_get(void)
{
     7e8:	b580      	push	{r7, lr}
     7ea:	b082      	sub	sp, #8
     7ec:	af00      	add	r7, sp, #0
	uint8_t buf[] = {'\0', '\0' };
     7ee:	2300      	movs	r3, #0
     7f0:	713b      	strb	r3, [r7, #4]
     7f2:	2300      	movs	r3, #0
     7f4:	717b      	strb	r3, [r7, #5]
	while ( UARTReceive(TEST_UART, buf, 1) < 1 ) { ; }
     7f6:	bf00      	nop
     7f8:	1d3b      	adds	r3, r7, #4
     7fa:	2201      	movs	r2, #1
     7fc:	4619      	mov	r1, r3
     7fe:	4805      	ldr	r0, [pc, #20]	; (814 <comm_get+0x2c>)
     800:	f7ff ff3e 	bl	680 <UARTReceive>
     804:	4603      	mov	r3, r0
     806:	2b00      	cmp	r3, #0
     808:	d0f6      	beq.n	7f8 <comm_get+0x10>
	return (char)buf[0];
     80a:	793b      	ldrb	r3, [r7, #4]
}
     80c:	4618      	mov	r0, r3
     80e:	3708      	adds	r7, #8
     810:	46bd      	mov	sp, r7
     812:	bd80      	pop	{r7, pc}
     814:	4000c000 	.word	0x4000c000

00000818 <comm_put>:

void comm_put(char d)
{
     818:	b580      	push	{r7, lr}
     81a:	b084      	sub	sp, #16
     81c:	af00      	add	r7, sp, #0
     81e:	4603      	mov	r3, r0
     820:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2];

	buf[0] = (uint8_t)d;
     822:	79fb      	ldrb	r3, [r7, #7]
     824:	733b      	strb	r3, [r7, #12]
	while ( UARTSend(TEST_UART, buf, 1) < 1 ) { ; }
     826:	bf00      	nop
     828:	f107 030c 	add.w	r3, r7, #12
     82c:	2201      	movs	r2, #1
     82e:	4619      	mov	r1, r3
     830:	4804      	ldr	r0, [pc, #16]	; (844 <comm_put+0x2c>)
     832:	f7ff fedb 	bl	5ec <UARTSend>
     836:	4603      	mov	r3, r0
     838:	2b00      	cmp	r3, #0
     83a:	d0f5      	beq.n	828 <comm_put+0x10>
}
     83c:	bf00      	nop
     83e:	3710      	adds	r7, #16
     840:	46bd      	mov	sp, r7
     842:	bd80      	pop	{r7, pc}
     844:	4000c000 	.word	0x4000c000

00000848 <comm_init>:
		comm_put(c);
	}
}

void comm_init(void)
{
     848:	b580      	push	{r7, lr}
     84a:	af00      	add	r7, sp, #0
	uart_init_intern();
     84c:	f7ff ff58 	bl	700 <uart_init_intern>
}
     850:	bf00      	nop
     852:	bd80      	pop	{r7, pc}

00000854 <xcomm_put>:
{
	return ( UART_CheckBusy(TEST_UART) == SET ) ? 1 : 0;
}

void xcomm_put(unsigned char c)
{
     854:	b580      	push	{r7, lr}
     856:	b082      	sub	sp, #8
     858:	af00      	add	r7, sp, #0
     85a:	4603      	mov	r3, r0
     85c:	71fb      	strb	r3, [r7, #7]
	comm_put((char)c);
     85e:	79fb      	ldrb	r3, [r7, #7]
     860:	4618      	mov	r0, r3
     862:	f7ff ffd9 	bl	818 <comm_put>
}
     866:	bf00      	nop
     868:	3708      	adds	r7, #8
     86a:	46bd      	mov	sp, r7
     86c:	bd80      	pop	{r7, pc}
     86e:	bf00      	nop

00000870 <xcomm_get>:

unsigned char xcomm_get(void)
{
     870:	b580      	push	{r7, lr}
     872:	af00      	add	r7, sp, #0
	return (unsigned char) comm_get();
     874:	f7ff ffb8 	bl	7e8 <comm_get>
     878:	4603      	mov	r3, r0
}
     87a:	4618      	mov	r0, r3
     87c:	bd80      	pop	{r7, pc}
     87e:	bf00      	nop

00000880 <xputc>:
/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

void xputc (char c)
{
     880:	b580      	push	{r7, lr}
     882:	b082      	sub	sp, #8
     884:	af00      	add	r7, sp, #0
     886:	4603      	mov	r3, r0
     888:	71fb      	strb	r3, [r7, #7]
	if (_CR_CRLF && c == '\n') xfunc_out('\r');		/* CR -> CRLF */
     88a:	79fb      	ldrb	r3, [r7, #7]
     88c:	2b0a      	cmp	r3, #10
     88e:	d103      	bne.n	898 <xputc+0x18>
     890:	4b06      	ldr	r3, [pc, #24]	; (8ac <xputc+0x2c>)
     892:	681b      	ldr	r3, [r3, #0]
     894:	200d      	movs	r0, #13
     896:	4798      	blx	r3
	xfunc_out((unsigned char)c);
     898:	4b04      	ldr	r3, [pc, #16]	; (8ac <xputc+0x2c>)
     89a:	681b      	ldr	r3, [r3, #0]
     89c:	79fa      	ldrb	r2, [r7, #7]
     89e:	4610      	mov	r0, r2
     8a0:	4798      	blx	r3
}
     8a2:	bf00      	nop
     8a4:	3708      	adds	r7, #8
     8a6:	46bd      	mov	sp, r7
     8a8:	bd80      	pop	{r7, pc}
     8aa:	bf00      	nop
     8ac:	10001300 	.word	0x10001300

000008b0 <xputs>:
/*----------------------------------------------*/
/* Put a null-terminated string                 */
/*----------------------------------------------*/

void xputs (const char* str)
{
     8b0:	b580      	push	{r7, lr}
     8b2:	b082      	sub	sp, #8
     8b4:	af00      	add	r7, sp, #0
     8b6:	6078      	str	r0, [r7, #4]
	while (*str)
     8b8:	e006      	b.n	8c8 <xputs+0x18>
		xputc(*str++);
     8ba:	687b      	ldr	r3, [r7, #4]
     8bc:	1c5a      	adds	r2, r3, #1
     8be:	607a      	str	r2, [r7, #4]
     8c0:	781b      	ldrb	r3, [r3, #0]
     8c2:	4618      	mov	r0, r3
     8c4:	f7ff ffdc 	bl	880 <xputc>
/* Put a null-terminated string                 */
/*----------------------------------------------*/

void xputs (const char* str)
{
	while (*str)
     8c8:	687b      	ldr	r3, [r7, #4]
     8ca:	781b      	ldrb	r3, [r3, #0]
     8cc:	2b00      	cmp	r3, #0
     8ce:	d1f4      	bne.n	8ba <xputs+0xa>
		xputc(*str++);
}
     8d0:	bf00      	nop
     8d2:	3708      	adds	r7, #8
     8d4:	46bd      	mov	sp, r7
     8d6:	bd80      	pop	{r7, pc}

000008d8 <xprintf>:

void xprintf (
	const char*	str,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
     8d8:	b40f      	push	{r0, r1, r2, r3}
     8da:	b580      	push	{r7, lr}
     8dc:	b08c      	sub	sp, #48	; 0x30
     8de:	af00      	add	r7, sp, #0
	unsigned int r, i, w, f;
	unsigned long val;
	char s[16], c, d;


	va_start(arp, str);
     8e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
     8e4:	617b      	str	r3, [r7, #20]

	while ((c = *str++) != 0) {
     8e6:	e123      	b.n	b30 <xprintf+0x258>
		if (c != '%') {
     8e8:	7efb      	ldrb	r3, [r7, #27]
     8ea:	2b25      	cmp	r3, #37	; 0x25
     8ec:	d004      	beq.n	8f8 <xprintf+0x20>
			xputc(c); continue;
     8ee:	7efb      	ldrb	r3, [r7, #27]
     8f0:	4618      	mov	r0, r3
     8f2:	f7ff ffc5 	bl	880 <xputc>
     8f6:	e11b      	b.n	b30 <xprintf+0x258>
		}
		c = *str++;
     8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     8fa:	1c5a      	adds	r2, r3, #1
     8fc:	63ba      	str	r2, [r7, #56]	; 0x38
     8fe:	781b      	ldrb	r3, [r3, #0]
     900:	76fb      	strb	r3, [r7, #27]
		f = 0;
     902:	2300      	movs	r3, #0
     904:	623b      	str	r3, [r7, #32]
		if (c == '0') {				/* Flag: '0' padded */
     906:	7efb      	ldrb	r3, [r7, #27]
     908:	2b30      	cmp	r3, #48	; 0x30
     90a:	d106      	bne.n	91a <xprintf+0x42>
			f = 1; c = *str++;
     90c:	2301      	movs	r3, #1
     90e:	623b      	str	r3, [r7, #32]
     910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     912:	1c5a      	adds	r2, r3, #1
     914:	63ba      	str	r2, [r7, #56]	; 0x38
     916:	781b      	ldrb	r3, [r3, #0]
     918:	76fb      	strb	r3, [r7, #27]
		}
		w = 0;
     91a:	2300      	movs	r3, #0
     91c:	627b      	str	r3, [r7, #36]	; 0x24
		while (c >= '0' && c <= '9') {	/* Minimum width */
     91e:	e00e      	b.n	93e <xprintf+0x66>
			w = w * 10 + c - '0';
     920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     922:	4613      	mov	r3, r2
     924:	009b      	lsls	r3, r3, #2
     926:	4413      	add	r3, r2
     928:	005b      	lsls	r3, r3, #1
     92a:	461a      	mov	r2, r3
     92c:	7efb      	ldrb	r3, [r7, #27]
     92e:	4413      	add	r3, r2
     930:	3b30      	subs	r3, #48	; 0x30
     932:	627b      	str	r3, [r7, #36]	; 0x24
			c = *str++;
     934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     936:	1c5a      	adds	r2, r3, #1
     938:	63ba      	str	r2, [r7, #56]	; 0x38
     93a:	781b      	ldrb	r3, [r3, #0]
     93c:	76fb      	strb	r3, [r7, #27]
		f = 0;
		if (c == '0') {				/* Flag: '0' padded */
			f = 1; c = *str++;
		}
		w = 0;
		while (c >= '0' && c <= '9') {	/* Minimum width */
     93e:	7efb      	ldrb	r3, [r7, #27]
     940:	2b2f      	cmp	r3, #47	; 0x2f
     942:	d902      	bls.n	94a <xprintf+0x72>
     944:	7efb      	ldrb	r3, [r7, #27]
     946:	2b39      	cmp	r3, #57	; 0x39
     948:	d9ea      	bls.n	920 <xprintf+0x48>
			w = w * 10 + c - '0';
			c = *str++;
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
     94a:	7efb      	ldrb	r3, [r7, #27]
     94c:	2b6c      	cmp	r3, #108	; 0x6c
     94e:	d002      	beq.n	956 <xprintf+0x7e>
     950:	7efb      	ldrb	r3, [r7, #27]
     952:	2b4c      	cmp	r3, #76	; 0x4c
     954:	d108      	bne.n	968 <xprintf+0x90>
			f |= 2; c = *str++;
     956:	6a3b      	ldr	r3, [r7, #32]
     958:	f043 0302 	orr.w	r3, r3, #2
     95c:	623b      	str	r3, [r7, #32]
     95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     960:	1c5a      	adds	r2, r3, #1
     962:	63ba      	str	r2, [r7, #56]	; 0x38
     964:	781b      	ldrb	r3, [r3, #0]
     966:	76fb      	strb	r3, [r7, #27]
		}
		if (!c) break;
     968:	7efb      	ldrb	r3, [r7, #27]
     96a:	2b00      	cmp	r3, #0
     96c:	f000 80ea 	beq.w	b44 <xprintf+0x26c>
		d = c;
     970:	7efb      	ldrb	r3, [r7, #27]
     972:	76bb      	strb	r3, [r7, #26]
		if (d >= 'a') d -= 0x20;
     974:	7ebb      	ldrb	r3, [r7, #26]
     976:	2b60      	cmp	r3, #96	; 0x60
     978:	d902      	bls.n	980 <xprintf+0xa8>
     97a:	7ebb      	ldrb	r3, [r7, #26]
     97c:	3b20      	subs	r3, #32
     97e:	76bb      	strb	r3, [r7, #26]
		switch (d) {				/* Type is... */
     980:	7ebb      	ldrb	r3, [r7, #26]
     982:	3b42      	subs	r3, #66	; 0x42
     984:	2b16      	cmp	r3, #22
     986:	d84e      	bhi.n	a26 <xprintf+0x14e>
     988:	a201      	add	r2, pc, #4	; (adr r2, 990 <xprintf+0xb8>)
     98a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     98e:	bf00      	nop
     990:	00000a0f 	.word	0x00000a0f
     994:	000009fd 	.word	0x000009fd
     998:	00000a1b 	.word	0x00000a1b
     99c:	00000a27 	.word	0x00000a27
     9a0:	00000a27 	.word	0x00000a27
     9a4:	00000a27 	.word	0x00000a27
     9a8:	00000a27 	.word	0x00000a27
     9ac:	00000a27 	.word	0x00000a27
     9b0:	00000a27 	.word	0x00000a27
     9b4:	00000a27 	.word	0x00000a27
     9b8:	00000a27 	.word	0x00000a27
     9bc:	00000a27 	.word	0x00000a27
     9c0:	00000a27 	.word	0x00000a27
     9c4:	00000a15 	.word	0x00000a15
     9c8:	00000a27 	.word	0x00000a27
     9cc:	00000a27 	.word	0x00000a27
     9d0:	00000a27 	.word	0x00000a27
     9d4:	000009ed 	.word	0x000009ed
     9d8:	00000a27 	.word	0x00000a27
     9dc:	00000a1b 	.word	0x00000a1b
     9e0:	00000a27 	.word	0x00000a27
     9e4:	00000a27 	.word	0x00000a27
     9e8:	00000a21 	.word	0x00000a21
		case 'S' :					/* String */
			xputs(va_arg(arp, char*)); continue;
     9ec:	697b      	ldr	r3, [r7, #20]
     9ee:	1d1a      	adds	r2, r3, #4
     9f0:	617a      	str	r2, [r7, #20]
     9f2:	681b      	ldr	r3, [r3, #0]
     9f4:	4618      	mov	r0, r3
     9f6:	f7ff ff5b 	bl	8b0 <xputs>
     9fa:	e099      	b.n	b30 <xprintf+0x258>
		case 'C' :					/* Character */
			xputc((char)va_arg(arp, int)); continue;
     9fc:	697b      	ldr	r3, [r7, #20]
     9fe:	1d1a      	adds	r2, r3, #4
     a00:	617a      	str	r2, [r7, #20]
     a02:	681b      	ldr	r3, [r3, #0]
     a04:	b2db      	uxtb	r3, r3
     a06:	4618      	mov	r0, r3
     a08:	f7ff ff3a 	bl	880 <xputc>
     a0c:	e090      	b.n	b30 <xprintf+0x258>
		case 'B' :					/* Binary */
			r = 2; break;
     a0e:	2302      	movs	r3, #2
     a10:	62fb      	str	r3, [r7, #44]	; 0x2c
     a12:	e00d      	b.n	a30 <xprintf+0x158>
		case 'O' :					/* Octal */
			r = 8; break;
     a14:	2308      	movs	r3, #8
     a16:	62fb      	str	r3, [r7, #44]	; 0x2c
     a18:	e00a      	b.n	a30 <xprintf+0x158>
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
     a1a:	230a      	movs	r3, #10
     a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
     a1e:	e007      	b.n	a30 <xprintf+0x158>
		case 'X' :					/* Hexdecimal */
			r = 16; break;
     a20:	2310      	movs	r3, #16
     a22:	62fb      	str	r3, [r7, #44]	; 0x2c
     a24:	e004      	b.n	a30 <xprintf+0x158>
		default:					/* Unknown */
			xputc(c); continue;
     a26:	7efb      	ldrb	r3, [r7, #27]
     a28:	4618      	mov	r0, r3
     a2a:	f7ff ff29 	bl	880 <xputc>
     a2e:	e07f      	b.n	b30 <xprintf+0x258>
		}

		/* Get an argument and put it in numeral */
		// mthomas val = (f & 2) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : va_arg(arp, unsigned int));
		if (f & 2) {
     a30:	6a3b      	ldr	r3, [r7, #32]
     a32:	f003 0302 	and.w	r3, r3, #2
     a36:	2b00      	cmp	r3, #0
     a38:	d005      	beq.n	a46 <xprintf+0x16e>
			val = va_arg(arp, long);
     a3a:	697b      	ldr	r3, [r7, #20]
     a3c:	1d1a      	adds	r2, r3, #4
     a3e:	617a      	str	r2, [r7, #20]
     a40:	681b      	ldr	r3, [r3, #0]
     a42:	61fb      	str	r3, [r7, #28]
     a44:	e00d      	b.n	a62 <xprintf+0x18a>
		} else {
			if (d == 'D') {
     a46:	7ebb      	ldrb	r3, [r7, #26]
     a48:	2b44      	cmp	r3, #68	; 0x44
     a4a:	d105      	bne.n	a58 <xprintf+0x180>
				val = (long)va_arg(arp, int);
     a4c:	697b      	ldr	r3, [r7, #20]
     a4e:	1d1a      	adds	r2, r3, #4
     a50:	617a      	str	r2, [r7, #20]
     a52:	681b      	ldr	r3, [r3, #0]
     a54:	61fb      	str	r3, [r7, #28]
     a56:	e004      	b.n	a62 <xprintf+0x18a>
			} else {
				val =va_arg(arp, unsigned int);
     a58:	697b      	ldr	r3, [r7, #20]
     a5a:	1d1a      	adds	r2, r3, #4
     a5c:	617a      	str	r2, [r7, #20]
     a5e:	681b      	ldr	r3, [r3, #0]
     a60:	61fb      	str	r3, [r7, #28]
			}
		}
		if (d == 'D' && (val & 0x80000000)) {
     a62:	7ebb      	ldrb	r3, [r7, #26]
     a64:	2b44      	cmp	r3, #68	; 0x44
     a66:	d109      	bne.n	a7c <xprintf+0x1a4>
     a68:	69fb      	ldr	r3, [r7, #28]
     a6a:	2b00      	cmp	r3, #0
     a6c:	da06      	bge.n	a7c <xprintf+0x1a4>
			val = 0 - val;
     a6e:	69fb      	ldr	r3, [r7, #28]
     a70:	425b      	negs	r3, r3
     a72:	61fb      	str	r3, [r7, #28]
			f |= 4;
     a74:	6a3b      	ldr	r3, [r7, #32]
     a76:	f043 0304 	orr.w	r3, r3, #4
     a7a:	623b      	str	r3, [r7, #32]
		}
		i = 0;
     a7c:	2300      	movs	r3, #0
     a7e:	62bb      	str	r3, [r7, #40]	; 0x28
		do {
			d = (char)(val % r); val /= r;
     a80:	69fb      	ldr	r3, [r7, #28]
     a82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     a84:	fbb3 f2f2 	udiv	r2, r3, r2
     a88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
     a8a:	fb01 f202 	mul.w	r2, r1, r2
     a8e:	1a9b      	subs	r3, r3, r2
     a90:	76bb      	strb	r3, [r7, #26]
     a92:	69fa      	ldr	r2, [r7, #28]
     a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     a96:	fbb2 f3f3 	udiv	r3, r2, r3
     a9a:	61fb      	str	r3, [r7, #28]
			if (d > 9) {
     a9c:	7ebb      	ldrb	r3, [r7, #26]
     a9e:	2b09      	cmp	r3, #9
     aa0:	d908      	bls.n	ab4 <xprintf+0x1dc>
				d += 7;
     aa2:	7ebb      	ldrb	r3, [r7, #26]
     aa4:	3307      	adds	r3, #7
     aa6:	76bb      	strb	r3, [r7, #26]
				if (c == 'x') d += 0x20;
     aa8:	7efb      	ldrb	r3, [r7, #27]
     aaa:	2b78      	cmp	r3, #120	; 0x78
     aac:	d102      	bne.n	ab4 <xprintf+0x1dc>
     aae:	7ebb      	ldrb	r3, [r7, #26]
     ab0:	3320      	adds	r3, #32
     ab2:	76bb      	strb	r3, [r7, #26]
			}
			s[i++] = d + '0';
     ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
     ab6:	1c5a      	adds	r2, r3, #1
     ab8:	62ba      	str	r2, [r7, #40]	; 0x28
     aba:	7eba      	ldrb	r2, [r7, #26]
     abc:	3230      	adds	r2, #48	; 0x30
     abe:	b2d2      	uxtb	r2, r2
     ac0:	f107 0130 	add.w	r1, r7, #48	; 0x30
     ac4:	440b      	add	r3, r1
     ac6:	f803 2c2c 	strb.w	r2, [r3, #-44]
		} while (val && i < sizeof(s));
     aca:	69fb      	ldr	r3, [r7, #28]
     acc:	2b00      	cmp	r3, #0
     ace:	d002      	beq.n	ad6 <xprintf+0x1fe>
     ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
     ad2:	2b0f      	cmp	r3, #15
     ad4:	d9d4      	bls.n	a80 <xprintf+0x1a8>
		if (f & 4) s[i++] = '-';
     ad6:	6a3b      	ldr	r3, [r7, #32]
     ad8:	f003 0304 	and.w	r3, r3, #4
     adc:	2b00      	cmp	r3, #0
     ade:	d014      	beq.n	b0a <xprintf+0x232>
     ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
     ae2:	1c5a      	adds	r2, r3, #1
     ae4:	62ba      	str	r2, [r7, #40]	; 0x28
     ae6:	f107 0230 	add.w	r2, r7, #48	; 0x30
     aea:	4413      	add	r3, r2
     aec:	222d      	movs	r2, #45	; 0x2d
     aee:	f803 2c2c 	strb.w	r2, [r3, #-44]
		while (i < w--) xputc((f & 1) ? '0' : ' ');
     af2:	e00a      	b.n	b0a <xprintf+0x232>
     af4:	6a3b      	ldr	r3, [r7, #32]
     af6:	f003 0301 	and.w	r3, r3, #1
     afa:	2b00      	cmp	r3, #0
     afc:	d001      	beq.n	b02 <xprintf+0x22a>
     afe:	2330      	movs	r3, #48	; 0x30
     b00:	e000      	b.n	b04 <xprintf+0x22c>
     b02:	2320      	movs	r3, #32
     b04:	4618      	mov	r0, r3
     b06:	f7ff febb 	bl	880 <xputc>
     b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     b0c:	1e5a      	subs	r2, r3, #1
     b0e:	627a      	str	r2, [r7, #36]	; 0x24
     b10:	6aba      	ldr	r2, [r7, #40]	; 0x28
     b12:	4293      	cmp	r3, r2
     b14:	d8ee      	bhi.n	af4 <xprintf+0x21c>
		do xputc(s[--i]); while(i);
     b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
     b18:	3b01      	subs	r3, #1
     b1a:	62bb      	str	r3, [r7, #40]	; 0x28
     b1c:	1d3a      	adds	r2, r7, #4
     b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
     b20:	4413      	add	r3, r2
     b22:	781b      	ldrb	r3, [r3, #0]
     b24:	4618      	mov	r0, r3
     b26:	f7ff feab 	bl	880 <xputc>
     b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
     b2c:	2b00      	cmp	r3, #0
     b2e:	d1f2      	bne.n	b16 <xprintf+0x23e>
	char s[16], c, d;


	va_start(arp, str);

	while ((c = *str++) != 0) {
     b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     b32:	1c5a      	adds	r2, r3, #1
     b34:	63ba      	str	r2, [r7, #56]	; 0x38
     b36:	781b      	ldrb	r3, [r3, #0]
     b38:	76fb      	strb	r3, [r7, #27]
     b3a:	7efb      	ldrb	r3, [r7, #27]
     b3c:	2b00      	cmp	r3, #0
     b3e:	f47f aed3 	bne.w	8e8 <xprintf+0x10>
		while (i < w--) xputc((f & 1) ? '0' : ' ');
		do xputc(s[--i]); while(i);
	}

	va_end(arp);
}
     b42:	e000      	b.n	b46 <xprintf+0x26e>
			c = *str++;
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
			f |= 2; c = *str++;
		}
		if (!c) break;
     b44:	bf00      	nop
		while (i < w--) xputc((f & 1) ? '0' : ' ');
		do xputc(s[--i]); while(i);
	}

	va_end(arp);
}
     b46:	bf00      	nop
     b48:	3730      	adds	r7, #48	; 0x30
     b4a:	46bd      	mov	sp, r7
     b4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
     b50:	b004      	add	sp, #16
     b52:	4770      	bx	lr

00000b54 <SystemInit>:
 *
 * @brief  Setup the microcontroller system.
 *         Initialize the System.
 */
void SystemInit (void)
{
     b54:	b480      	push	{r7}
     b56:	af00      	add	r7, sp, #0

#if (CLOCK_SETUP)                       /* Clock Setup                        */
  LPC_SC->SCS       = SCS_Val;
     b58:	4b49      	ldr	r3, [pc, #292]	; (c80 <SystemInit+0x12c>)
     b5a:	2220      	movs	r2, #32
     b5c:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
  if (SCS_Val & (1 << 5)) {             /* If Main Oscillator is enabled      */
    while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
     b60:	bf00      	nop
     b62:	4b47      	ldr	r3, [pc, #284]	; (c80 <SystemInit+0x12c>)
     b64:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
     b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
     b6c:	2b00      	cmp	r3, #0
     b6e:	d0f8      	beq.n	b62 <SystemInit+0xe>
  }

  LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */
     b70:	4b43      	ldr	r3, [pc, #268]	; (c80 <SystemInit+0x12c>)
     b72:	2203      	movs	r2, #3
     b74:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
     b78:	4b41      	ldr	r3, [pc, #260]	; (c80 <SystemInit+0x12c>)
     b7a:	2200      	movs	r2, #0
     b7c:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;
     b80:	4b3f      	ldr	r3, [pc, #252]	; (c80 <SystemInit+0x12c>)
     b82:	2200      	movs	r2, #0
     b84:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

#if (PLL0_SETUP)
  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */
     b88:	4b3d      	ldr	r3, [pc, #244]	; (c80 <SystemInit+0x12c>)
     b8a:	2201      	movs	r2, #1
     b8c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
     b90:	4b3b      	ldr	r3, [pc, #236]	; (c80 <SystemInit+0x12c>)
     b92:	4a3c      	ldr	r2, [pc, #240]	; (c84 <SystemInit+0x130>)
     b94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  LPC_SC->PLL0FEED  = 0xAA;
     b98:	4b39      	ldr	r3, [pc, #228]	; (c80 <SystemInit+0x12c>)
     b9a:	22aa      	movs	r2, #170	; 0xaa
     b9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
     ba0:	4b37      	ldr	r3, [pc, #220]	; (c80 <SystemInit+0x12c>)
     ba2:	2255      	movs	r2, #85	; 0x55
     ba4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  LPC_SC->PLL0CON   = 0x01;             /* PLL0 Enable                        */
     ba8:	4b35      	ldr	r3, [pc, #212]	; (c80 <SystemInit+0x12c>)
     baa:	2201      	movs	r2, #1
     bac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
     bb0:	4b33      	ldr	r3, [pc, #204]	; (c80 <SystemInit+0x12c>)
     bb2:	22aa      	movs	r2, #170	; 0xaa
     bb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
     bb8:	4b31      	ldr	r3, [pc, #196]	; (c80 <SystemInit+0x12c>)
     bba:	2255      	movs	r2, #85	; 0x55
     bbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & (1<<26)));/* Wait for PLOCK0                    */
     bc0:	bf00      	nop
     bc2:	4b2f      	ldr	r3, [pc, #188]	; (c80 <SystemInit+0x12c>)
     bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
     bc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
     bcc:	2b00      	cmp	r3, #0
     bce:	d0f8      	beq.n	bc2 <SystemInit+0x6e>

  LPC_SC->PLL0CON   = 0x03;             /* PLL0 Enable & Connect              */
     bd0:	4b2b      	ldr	r3, [pc, #172]	; (c80 <SystemInit+0x12c>)
     bd2:	2203      	movs	r2, #3
     bd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
     bd8:	4b29      	ldr	r3, [pc, #164]	; (c80 <SystemInit+0x12c>)
     bda:	22aa      	movs	r2, #170	; 0xaa
     bdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
     be0:	4b27      	ldr	r3, [pc, #156]	; (c80 <SystemInit+0x12c>)
     be2:	2255      	movs	r2, #85	; 0x55
     be4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & ((1<<25) | (1<<24))));/* Wait for PLLC0_STAT & PLLE0_STAT */
     be8:	bf00      	nop
     bea:	4b25      	ldr	r3, [pc, #148]	; (c80 <SystemInit+0x12c>)
     bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
     bf0:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
     bf4:	2b00      	cmp	r3, #0
     bf6:	d0f8      	beq.n	bea <SystemInit+0x96>
#endif

#if (PLL1_SETUP)
  LPC_SC->PLL1CFG   = PLL1CFG_Val;
     bf8:	4b21      	ldr	r3, [pc, #132]	; (c80 <SystemInit+0x12c>)
     bfa:	2223      	movs	r2, #35	; 0x23
     bfc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  LPC_SC->PLL1FEED  = 0xAA;
     c00:	4b1f      	ldr	r3, [pc, #124]	; (c80 <SystemInit+0x12c>)
     c02:	22aa      	movs	r2, #170	; 0xaa
     c04:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
     c08:	4b1d      	ldr	r3, [pc, #116]	; (c80 <SystemInit+0x12c>)
     c0a:	2255      	movs	r2, #85	; 0x55
     c0c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

  LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
     c10:	4b1b      	ldr	r3, [pc, #108]	; (c80 <SystemInit+0x12c>)
     c12:	2201      	movs	r2, #1
     c14:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  LPC_SC->PLL1FEED  = 0xAA;
     c18:	4b19      	ldr	r3, [pc, #100]	; (c80 <SystemInit+0x12c>)
     c1a:	22aa      	movs	r2, #170	; 0xaa
     c1c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
     c20:	4b17      	ldr	r3, [pc, #92]	; (c80 <SystemInit+0x12c>)
     c22:	2255      	movs	r2, #85	; 0x55
     c24:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  while (!(LPC_SC->PLL1STAT & (1<<10)));/* Wait for PLOCK1                    */
     c28:	bf00      	nop
     c2a:	4b15      	ldr	r3, [pc, #84]	; (c80 <SystemInit+0x12c>)
     c2c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
     c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     c34:	2b00      	cmp	r3, #0
     c36:	d0f8      	beq.n	c2a <SystemInit+0xd6>

  LPC_SC->PLL1CON   = 0x03;             /* PLL1 Enable & Connect              */
     c38:	4b11      	ldr	r3, [pc, #68]	; (c80 <SystemInit+0x12c>)
     c3a:	2203      	movs	r2, #3
     c3c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  LPC_SC->PLL1FEED  = 0xAA;
     c40:	4b0f      	ldr	r3, [pc, #60]	; (c80 <SystemInit+0x12c>)
     c42:	22aa      	movs	r2, #170	; 0xaa
     c44:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
     c48:	4b0d      	ldr	r3, [pc, #52]	; (c80 <SystemInit+0x12c>)
     c4a:	2255      	movs	r2, #85	; 0x55
     c4c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  while (!(LPC_SC->PLL1STAT & ((1<< 9) | (1<< 8))));/* Wait for PLLC1_STAT & PLLE1_STAT */
     c50:	bf00      	nop
     c52:	4b0b      	ldr	r3, [pc, #44]	; (c80 <SystemInit+0x12c>)
     c54:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
     c58:	f403 7340 	and.w	r3, r3, #768	; 0x300
     c5c:	2b00      	cmp	r3, #0
     c5e:	d0f8      	beq.n	c52 <SystemInit+0xfe>
#else
  LPC_SC->USBCLKCFG = USBCLKCFG_Val;    /* Setup USB Clock Divider            */
#endif
  LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */
     c60:	4b07      	ldr	r3, [pc, #28]	; (c80 <SystemInit+0x12c>)
     c62:	4a09      	ldr	r2, [pc, #36]	; (c88 <SystemInit+0x134>)
     c64:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

  LPC_SC->CLKOUTCFG = CLKOUTCFG_Val;    /* Clock Output Configuration         */
     c68:	4b05      	ldr	r3, [pc, #20]	; (c80 <SystemInit+0x12c>)
     c6a:	2200      	movs	r2, #0
     c6c:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
#endif

#if (FLASH_SETUP == 1)                  /* Flash Accelerator Setup            */
  LPC_SC->FLASHCFG  = FLASHCFG_Val;
     c70:	4b03      	ldr	r3, [pc, #12]	; (c80 <SystemInit+0x12c>)
     c72:	f243 023a 	movw	r2, #12346	; 0x303a
     c76:	601a      	str	r2, [r3, #0]
#endif
}
     c78:	bf00      	nop
     c7a:	46bd      	mov	sp, r7
     c7c:	bc80      	pop	{r7}
     c7e:	4770      	bx	lr
     c80:	400fc000 	.word	0x400fc000
     c84:	00050063 	.word	0x00050063
     c88:	042887de 	.word	0x042887de

00000c8c <CLKPWR_GetPCLKSEL>:
				- CLKPWR_PCLKSEL_MC 		: MC

 * @return		Value of Selected Peripheral Clock Selection
 **********************************************************************/
uint32_t CLKPWR_GetPCLKSEL (uint32_t ClkType)
{
     c8c:	b480      	push	{r7}
     c8e:	b085      	sub	sp, #20
     c90:	af00      	add	r7, sp, #0
     c92:	6078      	str	r0, [r7, #4]
	uint32_t bitpos, retval;

	if (ClkType < 32)
     c94:	687b      	ldr	r3, [r7, #4]
     c96:	2b1f      	cmp	r3, #31
     c98:	d806      	bhi.n	ca8 <CLKPWR_GetPCLKSEL+0x1c>
	{
		bitpos = ClkType;
     c9a:	687b      	ldr	r3, [r7, #4]
     c9c:	60fb      	str	r3, [r7, #12]
		retval = LPC_SC->PCLKSEL0;
     c9e:	4b0c      	ldr	r3, [pc, #48]	; (cd0 <CLKPWR_GetPCLKSEL+0x44>)
     ca0:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
     ca4:	60bb      	str	r3, [r7, #8]
     ca6:	e006      	b.n	cb6 <CLKPWR_GetPCLKSEL+0x2a>
	}
	else
	{
		bitpos = ClkType - 32;
     ca8:	687b      	ldr	r3, [r7, #4]
     caa:	3b20      	subs	r3, #32
     cac:	60fb      	str	r3, [r7, #12]
		retval = LPC_SC->PCLKSEL1;
     cae:	4b08      	ldr	r3, [pc, #32]	; (cd0 <CLKPWR_GetPCLKSEL+0x44>)
     cb0:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
     cb4:	60bb      	str	r3, [r7, #8]
	}

	retval = CLKPWR_PCLKSEL_GET(bitpos, retval);
     cb6:	68ba      	ldr	r2, [r7, #8]
     cb8:	68fb      	ldr	r3, [r7, #12]
     cba:	fa22 f303 	lsr.w	r3, r2, r3
     cbe:	f003 0303 	and.w	r3, r3, #3
     cc2:	60bb      	str	r3, [r7, #8]
	return retval;
     cc4:	68bb      	ldr	r3, [r7, #8]
}
     cc6:	4618      	mov	r0, r3
     cc8:	3714      	adds	r7, #20
     cca:	46bd      	mov	sp, r7
     ccc:	bc80      	pop	{r7}
     cce:	4770      	bx	lr
     cd0:	400fc000 	.word	0x400fc000

00000cd4 <CLKPWR_GetPCLK>:
				- CLKPWR_PCLKSEL_MC 		: MC

 * @return		Value of Selected Peripheral Clock
 **********************************************************************/
uint32_t CLKPWR_GetPCLK (uint32_t ClkType)
{
     cd4:	b580      	push	{r7, lr}
     cd6:	b084      	sub	sp, #16
     cd8:	af00      	add	r7, sp, #0
     cda:	6078      	str	r0, [r7, #4]
	uint32_t retval, div;

	retval = SystemCoreClock;
     cdc:	4b15      	ldr	r3, [pc, #84]	; (d34 <CLKPWR_GetPCLK+0x60>)
     cde:	681b      	ldr	r3, [r3, #0]
     ce0:	60bb      	str	r3, [r7, #8]
	div = CLKPWR_GetPCLKSEL(ClkType);
     ce2:	6878      	ldr	r0, [r7, #4]
     ce4:	f7ff ffd2 	bl	c8c <CLKPWR_GetPCLKSEL>
     ce8:	60f8      	str	r0, [r7, #12]

	switch (div)
     cea:	68fb      	ldr	r3, [r7, #12]
     cec:	2b03      	cmp	r3, #3
     cee:	d817      	bhi.n	d20 <CLKPWR_GetPCLK+0x4c>
     cf0:	a201      	add	r2, pc, #4	; (adr r2, cf8 <CLKPWR_GetPCLK+0x24>)
     cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     cf6:	bf00      	nop
     cf8:	00000d09 	.word	0x00000d09
     cfc:	00000d0f 	.word	0x00000d0f
     d00:	00000d15 	.word	0x00000d15
     d04:	00000d1b 	.word	0x00000d1b
	{
	case 0:
		div = 4;
     d08:	2304      	movs	r3, #4
     d0a:	60fb      	str	r3, [r7, #12]
		break;
     d0c:	e008      	b.n	d20 <CLKPWR_GetPCLK+0x4c>

	case 1:
		div = 1;
     d0e:	2301      	movs	r3, #1
     d10:	60fb      	str	r3, [r7, #12]
		break;
     d12:	e005      	b.n	d20 <CLKPWR_GetPCLK+0x4c>

	case 2:
		div = 2;
     d14:	2302      	movs	r3, #2
     d16:	60fb      	str	r3, [r7, #12]
		break;
     d18:	e002      	b.n	d20 <CLKPWR_GetPCLK+0x4c>

	case 3:
		div = 8;
     d1a:	2308      	movs	r3, #8
     d1c:	60fb      	str	r3, [r7, #12]
		break;
     d1e:	bf00      	nop
	}
	retval /= div;
     d20:	68ba      	ldr	r2, [r7, #8]
     d22:	68fb      	ldr	r3, [r7, #12]
     d24:	fbb2 f3f3 	udiv	r3, r2, r3
     d28:	60bb      	str	r3, [r7, #8]

	return retval;
     d2a:	68bb      	ldr	r3, [r7, #8]
}
     d2c:	4618      	mov	r0, r3
     d2e:	3710      	adds	r7, #16
     d30:	46bd      	mov	sp, r7
     d32:	bd80      	pop	{r7, pc}
     d34:	10000004 	.word	0x10000004

00000d38 <CLKPWR_ConfigPPWR>:
 * 				- DISABLE	: Disable power for this peripheral
 *
 * @return none
 **********************************************************************/
void CLKPWR_ConfigPPWR (uint32_t PPType, FunctionalState NewState)
{
     d38:	b480      	push	{r7}
     d3a:	b083      	sub	sp, #12
     d3c:	af00      	add	r7, sp, #0
     d3e:	6078      	str	r0, [r7, #4]
     d40:	460b      	mov	r3, r1
     d42:	70fb      	strb	r3, [r7, #3]
	if (NewState == ENABLE)
     d44:	78fb      	ldrb	r3, [r7, #3]
     d46:	2b01      	cmp	r3, #1
     d48:	d10a      	bne.n	d60 <CLKPWR_ConfigPPWR+0x28>
	{
		LPC_SC->PCONP |= PPType & CLKPWR_PCONP_BITMASK;
     d4a:	480f      	ldr	r0, [pc, #60]	; (d88 <CLKPWR_ConfigPPWR+0x50>)
     d4c:	4b0e      	ldr	r3, [pc, #56]	; (d88 <CLKPWR_ConfigPPWR+0x50>)
     d4e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
     d52:	6879      	ldr	r1, [r7, #4]
     d54:	4b0d      	ldr	r3, [pc, #52]	; (d8c <CLKPWR_ConfigPPWR+0x54>)
     d56:	400b      	ands	r3, r1
     d58:	4313      	orrs	r3, r2
     d5a:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
	}
	else if (NewState == DISABLE)
	{
		LPC_SC->PCONP &= (~PPType) & CLKPWR_PCONP_BITMASK;
	}
}
     d5e:	e00d      	b.n	d7c <CLKPWR_ConfigPPWR+0x44>
{
	if (NewState == ENABLE)
	{
		LPC_SC->PCONP |= PPType & CLKPWR_PCONP_BITMASK;
	}
	else if (NewState == DISABLE)
     d60:	78fb      	ldrb	r3, [r7, #3]
     d62:	2b00      	cmp	r3, #0
     d64:	d10a      	bne.n	d7c <CLKPWR_ConfigPPWR+0x44>
	{
		LPC_SC->PCONP &= (~PPType) & CLKPWR_PCONP_BITMASK;
     d66:	4908      	ldr	r1, [pc, #32]	; (d88 <CLKPWR_ConfigPPWR+0x50>)
     d68:	4b07      	ldr	r3, [pc, #28]	; (d88 <CLKPWR_ConfigPPWR+0x50>)
     d6a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
     d6e:	687b      	ldr	r3, [r7, #4]
     d70:	43db      	mvns	r3, r3
     d72:	401a      	ands	r2, r3
     d74:	4b05      	ldr	r3, [pc, #20]	; (d8c <CLKPWR_ConfigPPWR+0x54>)
     d76:	4013      	ands	r3, r2
     d78:	f8c1 30c4 	str.w	r3, [r1, #196]	; 0xc4
	}
}
     d7c:	bf00      	nop
     d7e:	370c      	adds	r7, #12
     d80:	46bd      	mov	sp, r7
     d82:	bc80      	pop	{r7}
     d84:	4770      	bx	lr
     d86:	bf00      	nop
     d88:	400fc000 	.word	0x400fc000
     d8c:	efeff7de 	.word	0xefeff7de

00000d90 <PINSEL_SetPinFunc>:
 *				- PINSEL_FUNC_3 : third alternate function
 *
 * @return 		None
 **********************************************************************/
void PINSEL_SetPinFunc ( uint8_t portnum, uint8_t pinnum, uint8_t funcnum)
{
     d90:	b480      	push	{r7}
     d92:	b087      	sub	sp, #28
     d94:	af00      	add	r7, sp, #0
     d96:	4603      	mov	r3, r0
     d98:	71fb      	strb	r3, [r7, #7]
     d9a:	460b      	mov	r3, r1
     d9c:	71bb      	strb	r3, [r7, #6]
     d9e:	4613      	mov	r3, r2
     da0:	717b      	strb	r3, [r7, #5]
	uint32_t pinnum_t = pinnum;
     da2:	79bb      	ldrb	r3, [r7, #6]
     da4:	617b      	str	r3, [r7, #20]
	uint32_t pinselreg_idx = 2 * portnum;
     da6:	79fb      	ldrb	r3, [r7, #7]
     da8:	005b      	lsls	r3, r3, #1
     daa:	613b      	str	r3, [r7, #16]
	// mthomas uint32_t *pPinCon = (uint32_t *)&LPC_PINCON->PINSEL0;
	volatile uint32_t *pPinCon = &LPC_PINCON->PINSEL0;
     dac:	4b18      	ldr	r3, [pc, #96]	; (e10 <PINSEL_SetPinFunc+0x80>)
     dae:	60fb      	str	r3, [r7, #12]

	if (pinnum_t >= 16) {
     db0:	697b      	ldr	r3, [r7, #20]
     db2:	2b0f      	cmp	r3, #15
     db4:	d905      	bls.n	dc2 <PINSEL_SetPinFunc+0x32>
		pinnum_t -= 16;
     db6:	697b      	ldr	r3, [r7, #20]
     db8:	3b10      	subs	r3, #16
     dba:	617b      	str	r3, [r7, #20]
		pinselreg_idx++;
     dbc:	693b      	ldr	r3, [r7, #16]
     dbe:	3301      	adds	r3, #1
     dc0:	613b      	str	r3, [r7, #16]
	}
	// mthomas *(uint32_t *)(pPinCon + pinselreg_idx) &= ~(0x03UL << (pinnum_t * 2));
	// mthomas *(uint32_t *)(pPinCon + pinselreg_idx) |= ((uint32_t)funcnum) << (pinnum_t * 2);
	*(pPinCon + pinselreg_idx) &= ~(0x03UL << (pinnum_t * 2));
     dc2:	693b      	ldr	r3, [r7, #16]
     dc4:	009b      	lsls	r3, r3, #2
     dc6:	68fa      	ldr	r2, [r7, #12]
     dc8:	4413      	add	r3, r2
     dca:	693a      	ldr	r2, [r7, #16]
     dcc:	0092      	lsls	r2, r2, #2
     dce:	68f9      	ldr	r1, [r7, #12]
     dd0:	440a      	add	r2, r1
     dd2:	6811      	ldr	r1, [r2, #0]
     dd4:	697a      	ldr	r2, [r7, #20]
     dd6:	0052      	lsls	r2, r2, #1
     dd8:	2003      	movs	r0, #3
     dda:	fa00 f202 	lsl.w	r2, r0, r2
     dde:	43d2      	mvns	r2, r2
     de0:	400a      	ands	r2, r1
     de2:	601a      	str	r2, [r3, #0]
	*(pPinCon + pinselreg_idx) |= ((uint32_t)funcnum) << (pinnum_t * 2);
     de4:	693b      	ldr	r3, [r7, #16]
     de6:	009b      	lsls	r3, r3, #2
     de8:	68fa      	ldr	r2, [r7, #12]
     dea:	4413      	add	r3, r2
     dec:	693a      	ldr	r2, [r7, #16]
     dee:	0092      	lsls	r2, r2, #2
     df0:	68f9      	ldr	r1, [r7, #12]
     df2:	440a      	add	r2, r1
     df4:	6811      	ldr	r1, [r2, #0]
     df6:	7978      	ldrb	r0, [r7, #5]
     df8:	697a      	ldr	r2, [r7, #20]
     dfa:	0052      	lsls	r2, r2, #1
     dfc:	fa00 f202 	lsl.w	r2, r0, r2
     e00:	430a      	orrs	r2, r1
     e02:	601a      	str	r2, [r3, #0]
}
     e04:	bf00      	nop
     e06:	371c      	adds	r7, #28
     e08:	46bd      	mov	sp, r7
     e0a:	bc80      	pop	{r7}
     e0c:	4770      	bx	lr
     e0e:	bf00      	nop
     e10:	4002c000 	.word	0x4002c000

00000e14 <PINSEL_SetResistorMode>:
				- PINSEL_PINMODE_PULLDOWN : Internal pull-down resistor

 * @return 		None
 **********************************************************************/
void PINSEL_SetResistorMode ( uint8_t portnum, uint8_t pinnum, uint8_t modenum)
{
     e14:	b480      	push	{r7}
     e16:	b087      	sub	sp, #28
     e18:	af00      	add	r7, sp, #0
     e1a:	4603      	mov	r3, r0
     e1c:	71fb      	strb	r3, [r7, #7]
     e1e:	460b      	mov	r3, r1
     e20:	71bb      	strb	r3, [r7, #6]
     e22:	4613      	mov	r3, r2
     e24:	717b      	strb	r3, [r7, #5]
	uint32_t pinnum_t = pinnum;
     e26:	79bb      	ldrb	r3, [r7, #6]
     e28:	617b      	str	r3, [r7, #20]
	uint32_t pinmodereg_idx = 2 * portnum;
     e2a:	79fb      	ldrb	r3, [r7, #7]
     e2c:	005b      	lsls	r3, r3, #1
     e2e:	613b      	str	r3, [r7, #16]
	// mthomas uint32_t *pPinCon = (uint32_t *)&LPC_PINCON->PINMODE0;
	volatile uint32_t *pPinCon = &LPC_PINCON->PINMODE0;
     e30:	4b18      	ldr	r3, [pc, #96]	; (e94 <PINSEL_SetResistorMode+0x80>)
     e32:	60fb      	str	r3, [r7, #12]

	if (pinnum_t >= 16) {
     e34:	697b      	ldr	r3, [r7, #20]
     e36:	2b0f      	cmp	r3, #15
     e38:	d905      	bls.n	e46 <PINSEL_SetResistorMode+0x32>
		pinnum_t -= 16;
     e3a:	697b      	ldr	r3, [r7, #20]
     e3c:	3b10      	subs	r3, #16
     e3e:	617b      	str	r3, [r7, #20]
		pinmodereg_idx++ ;
     e40:	693b      	ldr	r3, [r7, #16]
     e42:	3301      	adds	r3, #1
     e44:	613b      	str	r3, [r7, #16]
	}

	// mthomas *(uint32_t *)(pPinCon + pinmodereg_idx) &= ~(0x03UL << (pinnum_t * 2));
	// mthomas *(uint32_t *)(pPinCon + pinmodereg_idx) |= ((uint32_t)modenum) << (pinnum_t * 2);
	*(pPinCon + pinmodereg_idx) &= ~(0x03UL << (pinnum_t * 2));
     e46:	693b      	ldr	r3, [r7, #16]
     e48:	009b      	lsls	r3, r3, #2
     e4a:	68fa      	ldr	r2, [r7, #12]
     e4c:	4413      	add	r3, r2
     e4e:	693a      	ldr	r2, [r7, #16]
     e50:	0092      	lsls	r2, r2, #2
     e52:	68f9      	ldr	r1, [r7, #12]
     e54:	440a      	add	r2, r1
     e56:	6811      	ldr	r1, [r2, #0]
     e58:	697a      	ldr	r2, [r7, #20]
     e5a:	0052      	lsls	r2, r2, #1
     e5c:	2003      	movs	r0, #3
     e5e:	fa00 f202 	lsl.w	r2, r0, r2
     e62:	43d2      	mvns	r2, r2
     e64:	400a      	ands	r2, r1
     e66:	601a      	str	r2, [r3, #0]
	*(pPinCon + pinmodereg_idx) |= ((uint32_t)modenum) << (pinnum_t * 2);
     e68:	693b      	ldr	r3, [r7, #16]
     e6a:	009b      	lsls	r3, r3, #2
     e6c:	68fa      	ldr	r2, [r7, #12]
     e6e:	4413      	add	r3, r2
     e70:	693a      	ldr	r2, [r7, #16]
     e72:	0092      	lsls	r2, r2, #2
     e74:	68f9      	ldr	r1, [r7, #12]
     e76:	440a      	add	r2, r1
     e78:	6811      	ldr	r1, [r2, #0]
     e7a:	7978      	ldrb	r0, [r7, #5]
     e7c:	697a      	ldr	r2, [r7, #20]
     e7e:	0052      	lsls	r2, r2, #1
     e80:	fa00 f202 	lsl.w	r2, r0, r2
     e84:	430a      	orrs	r2, r1
     e86:	601a      	str	r2, [r3, #0]
}
     e88:	bf00      	nop
     e8a:	371c      	adds	r7, #28
     e8c:	46bd      	mov	sp, r7
     e8e:	bc80      	pop	{r7}
     e90:	4770      	bx	lr
     e92:	bf00      	nop
     e94:	4002c040 	.word	0x4002c040

00000e98 <PINSEL_SetOpenDrainMode>:
 * 				- PINSEL_PINMODE_OPENDRAIN : Pin is in the open drain mode
 *
 * @return 		None
 **********************************************************************/
void PINSEL_SetOpenDrainMode( uint8_t portnum, uint8_t pinnum, uint8_t modenum)
{
     e98:	b480      	push	{r7}
     e9a:	b085      	sub	sp, #20
     e9c:	af00      	add	r7, sp, #0
     e9e:	4603      	mov	r3, r0
     ea0:	71fb      	strb	r3, [r7, #7]
     ea2:	460b      	mov	r3, r1
     ea4:	71bb      	strb	r3, [r7, #6]
     ea6:	4613      	mov	r3, r2
     ea8:	717b      	strb	r3, [r7, #5]
	// mthomas uint32_t *pPinCon = (uint32_t *)&LPC_PINCON->PINMODE_OD0;
	volatile uint32_t *pPinCon = &LPC_PINCON->PINMODE_OD0;
     eaa:	4b15      	ldr	r3, [pc, #84]	; (f00 <PINSEL_SetOpenDrainMode+0x68>)
     eac:	60fb      	str	r3, [r7, #12]

	if (modenum == PINSEL_PINMODE_OPENDRAIN){
     eae:	797b      	ldrb	r3, [r7, #5]
     eb0:	2b01      	cmp	r3, #1
     eb2:	d10f      	bne.n	ed4 <PINSEL_SetOpenDrainMode+0x3c>
		// mthomas *(uint32_t *)(pPinCon + portnum) |= (0x01UL << pinnum);
		*(pPinCon + portnum) |= (0x01UL << pinnum);
     eb4:	79fb      	ldrb	r3, [r7, #7]
     eb6:	009b      	lsls	r3, r3, #2
     eb8:	68fa      	ldr	r2, [r7, #12]
     eba:	4413      	add	r3, r2
     ebc:	79fa      	ldrb	r2, [r7, #7]
     ebe:	0092      	lsls	r2, r2, #2
     ec0:	68f9      	ldr	r1, [r7, #12]
     ec2:	440a      	add	r2, r1
     ec4:	6811      	ldr	r1, [r2, #0]
     ec6:	79ba      	ldrb	r2, [r7, #6]
     ec8:	2001      	movs	r0, #1
     eca:	fa00 f202 	lsl.w	r2, r0, r2
     ece:	430a      	orrs	r2, r1
     ed0:	601a      	str	r2, [r3, #0]
	} else {
		// mthomas *(uint32_t *)(pPinCon + portnum) &= ~(0x01UL << pinnum);
		*(pPinCon + portnum) &= ~(0x01UL << pinnum);
	}
}
     ed2:	e00f      	b.n	ef4 <PINSEL_SetOpenDrainMode+0x5c>
	if (modenum == PINSEL_PINMODE_OPENDRAIN){
		// mthomas *(uint32_t *)(pPinCon + portnum) |= (0x01UL << pinnum);
		*(pPinCon + portnum) |= (0x01UL << pinnum);
	} else {
		// mthomas *(uint32_t *)(pPinCon + portnum) &= ~(0x01UL << pinnum);
		*(pPinCon + portnum) &= ~(0x01UL << pinnum);
     ed4:	79fb      	ldrb	r3, [r7, #7]
     ed6:	009b      	lsls	r3, r3, #2
     ed8:	68fa      	ldr	r2, [r7, #12]
     eda:	4413      	add	r3, r2
     edc:	79fa      	ldrb	r2, [r7, #7]
     ede:	0092      	lsls	r2, r2, #2
     ee0:	68f9      	ldr	r1, [r7, #12]
     ee2:	440a      	add	r2, r1
     ee4:	6811      	ldr	r1, [r2, #0]
     ee6:	79ba      	ldrb	r2, [r7, #6]
     ee8:	2001      	movs	r0, #1
     eea:	fa00 f202 	lsl.w	r2, r0, r2
     eee:	43d2      	mvns	r2, r2
     ef0:	400a      	ands	r2, r1
     ef2:	601a      	str	r2, [r3, #0]
	}
}
     ef4:	bf00      	nop
     ef6:	3714      	adds	r7, #20
     ef8:	46bd      	mov	sp, r7
     efa:	bc80      	pop	{r7}
     efc:	4770      	bx	lr
     efe:	bf00      	nop
     f00:	4002c068 	.word	0x4002c068

00000f04 <PINSEL_ConfigPin>:
 *                    that contains the configuration information for the
 *                    specified pin.
 * @return 		None
 **********************************************************************/
void PINSEL_ConfigPin(PINSEL_CFG_Type *PinCfg)
{
     f04:	b580      	push	{r7, lr}
     f06:	b082      	sub	sp, #8
     f08:	af00      	add	r7, sp, #0
     f0a:	6078      	str	r0, [r7, #4]
	PINSEL_SetPinFunc(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->Funcnum);
     f0c:	687b      	ldr	r3, [r7, #4]
     f0e:	7818      	ldrb	r0, [r3, #0]
     f10:	687b      	ldr	r3, [r7, #4]
     f12:	7859      	ldrb	r1, [r3, #1]
     f14:	687b      	ldr	r3, [r7, #4]
     f16:	789b      	ldrb	r3, [r3, #2]
     f18:	461a      	mov	r2, r3
     f1a:	f7ff ff39 	bl	d90 <PINSEL_SetPinFunc>
	PINSEL_SetResistorMode(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->Pinmode);
     f1e:	687b      	ldr	r3, [r7, #4]
     f20:	7818      	ldrb	r0, [r3, #0]
     f22:	687b      	ldr	r3, [r7, #4]
     f24:	7859      	ldrb	r1, [r3, #1]
     f26:	687b      	ldr	r3, [r7, #4]
     f28:	78db      	ldrb	r3, [r3, #3]
     f2a:	461a      	mov	r2, r3
     f2c:	f7ff ff72 	bl	e14 <PINSEL_SetResistorMode>
	PINSEL_SetOpenDrainMode(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->OpenDrain);
     f30:	687b      	ldr	r3, [r7, #4]
     f32:	7818      	ldrb	r0, [r3, #0]
     f34:	687b      	ldr	r3, [r7, #4]
     f36:	7859      	ldrb	r1, [r3, #1]
     f38:	687b      	ldr	r3, [r7, #4]
     f3a:	791b      	ldrb	r3, [r3, #4]
     f3c:	461a      	mov	r2, r3
     f3e:	f7ff ffab 	bl	e98 <PINSEL_SetOpenDrainMode>
}
     f42:	bf00      	nop
     f44:	3708      	adds	r7, #8
     f46:	46bd      	mov	sp, r7
     f48:	bd80      	pop	{r7, pc}
     f4a:	bf00      	nop

00000f4c <getUartNum>:
/**
 * @brief		Get UART number due to UART peripheral pointer
 * @param[in]	UARTx	UART pointer
 * @return		UART number
 */
uint8_t getUartNum(LPC_UART_TypeDef *UARTx) {
     f4c:	b480      	push	{r7}
     f4e:	b083      	sub	sp, #12
     f50:	af00      	add	r7, sp, #0
     f52:	6078      	str	r0, [r7, #4]
	if (UARTx == LPC_UART0) return (0);
     f54:	687b      	ldr	r3, [r7, #4]
     f56:	4a0b      	ldr	r2, [pc, #44]	; (f84 <getUartNum+0x38>)
     f58:	4293      	cmp	r3, r2
     f5a:	d101      	bne.n	f60 <getUartNum+0x14>
     f5c:	2300      	movs	r3, #0
     f5e:	e00c      	b.n	f7a <getUartNum+0x2e>
	else if (UARTx == (LPC_UART_TypeDef *)LPC_UART1) return (1);
     f60:	687b      	ldr	r3, [r7, #4]
     f62:	4a09      	ldr	r2, [pc, #36]	; (f88 <getUartNum+0x3c>)
     f64:	4293      	cmp	r3, r2
     f66:	d101      	bne.n	f6c <getUartNum+0x20>
     f68:	2301      	movs	r3, #1
     f6a:	e006      	b.n	f7a <getUartNum+0x2e>
	else if (UARTx == LPC_UART2) return (2);
     f6c:	687b      	ldr	r3, [r7, #4]
     f6e:	4a07      	ldr	r2, [pc, #28]	; (f8c <getUartNum+0x40>)
     f70:	4293      	cmp	r3, r2
     f72:	d101      	bne.n	f78 <getUartNum+0x2c>
     f74:	2302      	movs	r3, #2
     f76:	e000      	b.n	f7a <getUartNum+0x2e>
	else return (3);
     f78:	2303      	movs	r3, #3
}
     f7a:	4618      	mov	r0, r3
     f7c:	370c      	adds	r7, #12
     f7e:	46bd      	mov	sp, r7
     f80:	bc80      	pop	{r7}
     f82:	4770      	bx	lr
     f84:	4000c000 	.word	0x4000c000
     f88:	40010000 	.word	0x40010000
     f8c:	40098000 	.word	0x40098000

00000f90 <uart_set_divisors>:
 * @param[in]	baudrate Desired UART baud rate.
 * @return 		Error status.
 **********************************************************************/

Status uart_set_divisors(LPC_UART_TypeDef *UARTx, uint32_t baudrate)
{
     f90:	b580      	push	{r7, lr}
     f92:	b08e      	sub	sp, #56	; 0x38
     f94:	af00      	add	r7, sp, #0
     f96:	6078      	str	r0, [r7, #4]
     f98:	6039      	str	r1, [r7, #0]
	Status errorStatus = ERROR;
     f9a:	2300      	movs	r3, #0
     f9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	uint32_t uClk;
	uint32_t calcBaudrate = 0;
     fa0:	2300      	movs	r3, #0
     fa2:	60fb      	str	r3, [r7, #12]
	uint32_t temp = 0;
     fa4:	2300      	movs	r3, #0
     fa6:	60bb      	str	r3, [r7, #8]

	uint32_t mulFracDiv, dividerAddFracDiv;
	uint32_t diviser = 0 ;
     fa8:	2300      	movs	r3, #0
     faa:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t mulFracDivOptimal = 1;
     fac:	2301      	movs	r3, #1
     fae:	623b      	str	r3, [r7, #32]
	uint32_t dividerAddOptimal = 0;
     fb0:	2300      	movs	r3, #0
     fb2:	61fb      	str	r3, [r7, #28]
	uint32_t diviserOptimal = 0;
     fb4:	2300      	movs	r3, #0
     fb6:	61bb      	str	r3, [r7, #24]

	uint32_t relativeError = 0;
     fb8:	2300      	movs	r3, #0
     fba:	617b      	str	r3, [r7, #20]
	uint32_t relativeOptimalError = 100000;
     fbc:	4b72      	ldr	r3, [pc, #456]	; (1188 <uart_set_divisors+0x1f8>)
     fbe:	613b      	str	r3, [r7, #16]

	/* get UART block clock */
	if (UARTx == LPC_UART0)
     fc0:	687b      	ldr	r3, [r7, #4]
     fc2:	4a72      	ldr	r2, [pc, #456]	; (118c <uart_set_divisors+0x1fc>)
     fc4:	4293      	cmp	r3, r2
     fc6:	d104      	bne.n	fd2 <uart_set_divisors+0x42>
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART0);
     fc8:	2006      	movs	r0, #6
     fca:	f7ff fe83 	bl	cd4 <CLKPWR_GetPCLK>
     fce:	6338      	str	r0, [r7, #48]	; 0x30
     fd0:	e015      	b.n	ffe <uart_set_divisors+0x6e>
	}
	else if (UARTx == (LPC_UART_TypeDef *)LPC_UART1)
     fd2:	687b      	ldr	r3, [r7, #4]
     fd4:	4a6e      	ldr	r2, [pc, #440]	; (1190 <uart_set_divisors+0x200>)
     fd6:	4293      	cmp	r3, r2
     fd8:	d104      	bne.n	fe4 <uart_set_divisors+0x54>
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART1);
     fda:	2008      	movs	r0, #8
     fdc:	f7ff fe7a 	bl	cd4 <CLKPWR_GetPCLK>
     fe0:	6338      	str	r0, [r7, #48]	; 0x30
     fe2:	e00c      	b.n	ffe <uart_set_divisors+0x6e>
	}
	else if (UARTx == LPC_UART2)
     fe4:	687b      	ldr	r3, [r7, #4]
     fe6:	4a6b      	ldr	r2, [pc, #428]	; (1194 <uart_set_divisors+0x204>)
     fe8:	4293      	cmp	r3, r2
     fea:	d104      	bne.n	ff6 <uart_set_divisors+0x66>
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART2);
     fec:	2030      	movs	r0, #48	; 0x30
     fee:	f7ff fe71 	bl	cd4 <CLKPWR_GetPCLK>
     ff2:	6338      	str	r0, [r7, #48]	; 0x30
     ff4:	e003      	b.n	ffe <uart_set_divisors+0x6e>
	}
	else /*mthomas, avoid warning: if (UARTx == LPC_UART3) */
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART3);
     ff6:	2032      	movs	r0, #50	; 0x32
     ff8:	f7ff fe6c 	bl	cd4 <CLKPWR_GetPCLK>
     ffc:	6338      	str	r0, [r7, #48]	; 0x30
	}


	uClk = uClk >> 4; /* div by 16 */
     ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1000:	091b      	lsrs	r3, r3, #4
    1002:	633b      	str	r3, [r7, #48]	; 0x30
	* BaudRate= uClk * (mulFracDiv/(mulFracDiv+dividerAddFracDiv) / (16 * (DLL)
	* It involves floating point calculations. That's the reason the formulae are adjusted with
	* Multiply and divide method.*/
	/* The value of mulFracDiv and dividerAddFracDiv should comply to the following expressions:
	* 0 < mulFracDiv <= 15, 0 <= dividerAddFracDiv <= 15 */
	for (mulFracDiv = 1 ; mulFracDiv <= 15 ;mulFracDiv++)
    1004:	2301      	movs	r3, #1
    1006:	62fb      	str	r3, [r7, #44]	; 0x2c
    1008:	e056      	b.n	10b8 <uart_set_divisors+0x128>
	{
	for (dividerAddFracDiv = 0 ; dividerAddFracDiv <= 15 ;dividerAddFracDiv++)
    100a:	2300      	movs	r3, #0
    100c:	62bb      	str	r3, [r7, #40]	; 0x28
    100e:	e048      	b.n	10a2 <uart_set_divisors+0x112>
	{
	  temp = (mulFracDiv * uClk) / ((mulFracDiv + dividerAddFracDiv));
    1010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1012:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1014:	fb02 f203 	mul.w	r2, r2, r3
    1018:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    101a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    101c:	440b      	add	r3, r1
    101e:	fbb2 f3f3 	udiv	r3, r2, r3
    1022:	60bb      	str	r3, [r7, #8]

	  diviser = temp / baudrate;
    1024:	68ba      	ldr	r2, [r7, #8]
    1026:	683b      	ldr	r3, [r7, #0]
    1028:	fbb2 f3f3 	udiv	r3, r2, r3
    102c:	627b      	str	r3, [r7, #36]	; 0x24
	  if ((temp % baudrate) > (baudrate / 2))
    102e:	68bb      	ldr	r3, [r7, #8]
    1030:	683a      	ldr	r2, [r7, #0]
    1032:	fbb3 f2f2 	udiv	r2, r3, r2
    1036:	6839      	ldr	r1, [r7, #0]
    1038:	fb01 f202 	mul.w	r2, r1, r2
    103c:	1a9a      	subs	r2, r3, r2
    103e:	683b      	ldr	r3, [r7, #0]
    1040:	085b      	lsrs	r3, r3, #1
    1042:	429a      	cmp	r2, r3
    1044:	d902      	bls.n	104c <uart_set_divisors+0xbc>
		diviser++;
    1046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1048:	3301      	adds	r3, #1
    104a:	627b      	str	r3, [r7, #36]	; 0x24

	  if (diviser > 2 && diviser < 65536)
    104c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    104e:	2b02      	cmp	r3, #2
    1050:	d924      	bls.n	109c <uart_set_divisors+0x10c>
    1052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    1058:	d220      	bcs.n	109c <uart_set_divisors+0x10c>
	  {
		calcBaudrate = temp / diviser;
    105a:	68ba      	ldr	r2, [r7, #8]
    105c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    105e:	fbb2 f3f3 	udiv	r3, r2, r3
    1062:	60fb      	str	r3, [r7, #12]

		if (calcBaudrate <= baudrate)
    1064:	68fa      	ldr	r2, [r7, #12]
    1066:	683b      	ldr	r3, [r7, #0]
    1068:	429a      	cmp	r2, r3
    106a:	d804      	bhi.n	1076 <uart_set_divisors+0xe6>
		  relativeError = baudrate - calcBaudrate;
    106c:	683a      	ldr	r2, [r7, #0]
    106e:	68fb      	ldr	r3, [r7, #12]
    1070:	1ad3      	subs	r3, r2, r3
    1072:	617b      	str	r3, [r7, #20]
    1074:	e003      	b.n	107e <uart_set_divisors+0xee>
		else
		  relativeError = calcBaudrate - baudrate;
    1076:	68fa      	ldr	r2, [r7, #12]
    1078:	683b      	ldr	r3, [r7, #0]
    107a:	1ad3      	subs	r3, r2, r3
    107c:	617b      	str	r3, [r7, #20]

		if ((relativeError < relativeOptimalError))
    107e:	697a      	ldr	r2, [r7, #20]
    1080:	693b      	ldr	r3, [r7, #16]
    1082:	429a      	cmp	r2, r3
    1084:	d20a      	bcs.n	109c <uart_set_divisors+0x10c>
		{
		  mulFracDivOptimal = mulFracDiv ;
    1086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1088:	623b      	str	r3, [r7, #32]
		  dividerAddOptimal = dividerAddFracDiv;
    108a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    108c:	61fb      	str	r3, [r7, #28]
		  diviserOptimal = diviser;
    108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1090:	61bb      	str	r3, [r7, #24]
		  relativeOptimalError = relativeError;
    1092:	697b      	ldr	r3, [r7, #20]
    1094:	613b      	str	r3, [r7, #16]
		  if (relativeError == 0)
    1096:	697b      	ldr	r3, [r7, #20]
    1098:	2b00      	cmp	r3, #0
    109a:	d006      	beq.n	10aa <uart_set_divisors+0x11a>
	* Multiply and divide method.*/
	/* The value of mulFracDiv and dividerAddFracDiv should comply to the following expressions:
	* 0 < mulFracDiv <= 15, 0 <= dividerAddFracDiv <= 15 */
	for (mulFracDiv = 1 ; mulFracDiv <= 15 ;mulFracDiv++)
	{
	for (dividerAddFracDiv = 0 ; dividerAddFracDiv <= 15 ;dividerAddFracDiv++)
    109c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    109e:	3301      	adds	r3, #1
    10a0:	62bb      	str	r3, [r7, #40]	; 0x28
    10a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    10a4:	2b0f      	cmp	r3, #15
    10a6:	d9b3      	bls.n	1010 <uart_set_divisors+0x80>
    10a8:	e000      	b.n	10ac <uart_set_divisors+0x11c>
		  mulFracDivOptimal = mulFracDiv ;
		  dividerAddOptimal = dividerAddFracDiv;
		  diviserOptimal = diviser;
		  relativeOptimalError = relativeError;
		  if (relativeError == 0)
			break;
    10aa:	bf00      	nop
		}
	  } /* End of if */
	} /* end of inner for loop */
	if (relativeError == 0)
    10ac:	697b      	ldr	r3, [r7, #20]
    10ae:	2b00      	cmp	r3, #0
    10b0:	d006      	beq.n	10c0 <uart_set_divisors+0x130>
	* BaudRate= uClk * (mulFracDiv/(mulFracDiv+dividerAddFracDiv) / (16 * (DLL)
	* It involves floating point calculations. That's the reason the formulae are adjusted with
	* Multiply and divide method.*/
	/* The value of mulFracDiv and dividerAddFracDiv should comply to the following expressions:
	* 0 < mulFracDiv <= 15, 0 <= dividerAddFracDiv <= 15 */
	for (mulFracDiv = 1 ; mulFracDiv <= 15 ;mulFracDiv++)
    10b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    10b4:	3301      	adds	r3, #1
    10b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    10b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    10ba:	2b0f      	cmp	r3, #15
    10bc:	d9a5      	bls.n	100a <uart_set_divisors+0x7a>
    10be:	e000      	b.n	10c2 <uart_set_divisors+0x132>
			break;
		}
	  } /* End of if */
	} /* end of inner for loop */
	if (relativeError == 0)
	  break;
    10c0:	bf00      	nop
	} /* end of outer for loop  */

	if (relativeOptimalError < ((baudrate * UART_ACCEPTED_BAUDRATE_ERROR)/100))
    10c2:	683a      	ldr	r2, [r7, #0]
    10c4:	4613      	mov	r3, r2
    10c6:	005b      	lsls	r3, r3, #1
    10c8:	4413      	add	r3, r2
    10ca:	4a33      	ldr	r2, [pc, #204]	; (1198 <uart_set_divisors+0x208>)
    10cc:	fba2 2303 	umull	r2, r3, r2, r3
    10d0:	095a      	lsrs	r2, r3, #5
    10d2:	693b      	ldr	r3, [r7, #16]
    10d4:	429a      	cmp	r2, r3
    10d6:	d951      	bls.n	117c <uart_set_divisors+0x1ec>
	{
		if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    10d8:	687b      	ldr	r3, [r7, #4]
    10da:	4a2d      	ldr	r2, [pc, #180]	; (1190 <uart_set_divisors+0x200>)
    10dc:	4293      	cmp	r3, r2
    10de:	d123      	bne.n	1128 <uart_set_divisors+0x198>
		{
			((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
    10e0:	687b      	ldr	r3, [r7, #4]
    10e2:	7b1b      	ldrb	r3, [r3, #12]
    10e4:	b2db      	uxtb	r3, r3
    10e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    10ea:	b2da      	uxtb	r2, r3
    10ec:	687b      	ldr	r3, [r7, #4]
    10ee:	731a      	strb	r2, [r3, #12]
			((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/DLM = UART_LOAD_DLM(diviserOptimal);
    10f0:	69bb      	ldr	r3, [r7, #24]
    10f2:	0a1b      	lsrs	r3, r3, #8
    10f4:	b2da      	uxtb	r2, r3
    10f6:	687b      	ldr	r3, [r7, #4]
    10f8:	711a      	strb	r2, [r3, #4]
			((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/DLL = UART_LOAD_DLL(diviserOptimal);
    10fa:	69bb      	ldr	r3, [r7, #24]
    10fc:	b2da      	uxtb	r2, r3
    10fe:	687b      	ldr	r3, [r7, #4]
    1100:	701a      	strb	r2, [r3, #0]
			/* Then reset DLAB bit */
			((LPC_UART1_TypeDef *)UARTx)->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
    1102:	687b      	ldr	r3, [r7, #4]
    1104:	7b1b      	ldrb	r3, [r3, #12]
    1106:	b2db      	uxtb	r3, r3
    1108:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    110c:	b2da      	uxtb	r2, r3
    110e:	687b      	ldr	r3, [r7, #4]
    1110:	731a      	strb	r2, [r3, #12]
			((LPC_UART1_TypeDef *)UARTx)->FDR = (UART_FDR_MULVAL(mulFracDivOptimal) \
    1112:	6a3b      	ldr	r3, [r7, #32]
    1114:	011b      	lsls	r3, r3, #4
    1116:	b2da      	uxtb	r2, r3
					| UART_FDR_DIVADDVAL(dividerAddOptimal)) & UART_FDR_BITMASK;
    1118:	69fb      	ldr	r3, [r7, #28]
    111a:	f003 030f 	and.w	r3, r3, #15
    111e:	4313      	orrs	r3, r2
    1120:	b2da      	uxtb	r2, r3
			((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
			((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/DLM = UART_LOAD_DLM(diviserOptimal);
			((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/DLL = UART_LOAD_DLL(diviserOptimal);
			/* Then reset DLAB bit */
			((LPC_UART1_TypeDef *)UARTx)->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
			((LPC_UART1_TypeDef *)UARTx)->FDR = (UART_FDR_MULVAL(mulFracDivOptimal) \
    1122:	687b      	ldr	r3, [r7, #4]
    1124:	629a      	str	r2, [r3, #40]	; 0x28
    1126:	e026      	b.n	1176 <uart_set_divisors+0x1e6>
					| UART_FDR_DIVADDVAL(dividerAddOptimal)) & UART_FDR_BITMASK;
		}
		else
		{
			UARTx->LCR |= UART_LCR_DLAB_EN;
    1128:	687b      	ldr	r3, [r7, #4]
    112a:	7b1b      	ldrb	r3, [r3, #12]
    112c:	b2db      	uxtb	r3, r3
    112e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    1132:	b2da      	uxtb	r2, r3
    1134:	687b      	ldr	r3, [r7, #4]
    1136:	731a      	strb	r2, [r3, #12]
			UARTx->/*DLIER.*/DLM = UART_LOAD_DLM(diviserOptimal);
    1138:	69bb      	ldr	r3, [r7, #24]
    113a:	0a1b      	lsrs	r3, r3, #8
    113c:	b2da      	uxtb	r2, r3
    113e:	687b      	ldr	r3, [r7, #4]
    1140:	711a      	strb	r2, [r3, #4]
			UARTx->/*RBTHDLR.*/DLL = UART_LOAD_DLL(diviserOptimal);
    1142:	69bb      	ldr	r3, [r7, #24]
    1144:	b2da      	uxtb	r2, r3
    1146:	687b      	ldr	r3, [r7, #4]
    1148:	701a      	strb	r2, [r3, #0]
			/* Then reset DLAB bit */
			UARTx->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
    114a:	687b      	ldr	r3, [r7, #4]
    114c:	7b1b      	ldrb	r3, [r3, #12]
    114e:	b2db      	uxtb	r3, r3
    1150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1154:	b2da      	uxtb	r2, r3
    1156:	687b      	ldr	r3, [r7, #4]
    1158:	731a      	strb	r2, [r3, #12]
			UARTx->FDR = (UART_FDR_MULVAL(mulFracDivOptimal) \
    115a:	6a3b      	ldr	r3, [r7, #32]
    115c:	b2db      	uxtb	r3, r3
    115e:	011b      	lsls	r3, r3, #4
    1160:	b2da      	uxtb	r2, r3
    1162:	69fb      	ldr	r3, [r7, #28]
    1164:	b2db      	uxtb	r3, r3
    1166:	f003 030f 	and.w	r3, r3, #15
    116a:	b2db      	uxtb	r3, r3
    116c:	4313      	orrs	r3, r2
    116e:	b2da      	uxtb	r2, r3
    1170:	687b      	ldr	r3, [r7, #4]
    1172:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					| UART_FDR_DIVADDVAL(dividerAddOptimal)) & UART_FDR_BITMASK;
		}
		errorStatus = SUCCESS;
    1176:	2301      	movs	r3, #1
    1178:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}

	return errorStatus;
    117c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
    1180:	4618      	mov	r0, r3
    1182:	3738      	adds	r7, #56	; 0x38
    1184:	46bd      	mov	sp, r7
    1186:	bd80      	pop	{r7, pc}
    1188:	000186a0 	.word	0x000186a0
    118c:	4000c000 	.word	0x4000c000
    1190:	40010000 	.word	0x40010000
    1194:	40098000 	.word	0x40098000
    1198:	51eb851f 	.word	0x51eb851f

0000119c <UART_GenIntHandler>:
 * 			- Auto-Baudrate Time-Out interrupt (not implemented)
 * 			- Modem Status interrupt (UART0 Modem functionality)
 * 			- CTS signal transition interrupt (UART0 Modem functionality)
 **********************************************************************/
void UART_GenIntHandler(LPC_UART_TypeDef *UARTx)
{
    119c:	b580      	push	{r7, lr}
    119e:	b088      	sub	sp, #32
    11a0:	af00      	add	r7, sp, #0
    11a2:	6078      	str	r0, [r7, #4]
	uint8_t pUart, modemsts;
	uint32_t intsrc, tmp, tmp1;

	pUart = getUartNum(UARTx);
    11a4:	6878      	ldr	r0, [r7, #4]
    11a6:	f7ff fed1 	bl	f4c <getUartNum>
    11aa:	4603      	mov	r3, r0
    11ac:	77fb      	strb	r3, [r7, #31]

	/* Determine the interrupt source */
	intsrc = UARTx->IIR;
    11ae:	687b      	ldr	r3, [r7, #4]
    11b0:	689b      	ldr	r3, [r3, #8]
    11b2:	61bb      	str	r3, [r7, #24]
	tmp = intsrc & UART_IIR_INTID_MASK;
    11b4:	69bb      	ldr	r3, [r7, #24]
    11b6:	f003 030e 	and.w	r3, r3, #14
    11ba:	617b      	str	r3, [r7, #20]

	/*
	 * In case of using UART1 with full modem,
	 * interrupt ID = 0 that means modem status interrupt has been detected
	 */
	if (pUart == 1) {
    11bc:	7ffb      	ldrb	r3, [r7, #31]
    11be:	2b01      	cmp	r3, #1
    11c0:	d115      	bne.n	11ee <UART_GenIntHandler+0x52>
		if (tmp == 0){
    11c2:	697b      	ldr	r3, [r7, #20]
    11c4:	2b00      	cmp	r3, #0
    11c6:	d112      	bne.n	11ee <UART_GenIntHandler+0x52>
			// Check Modem status
			modemsts = LPC_UART1->MSR & UART1_MSR_BITMASK;
    11c8:	4b4b      	ldr	r3, [pc, #300]	; (12f8 <UART_GenIntHandler+0x15c>)
    11ca:	7e1b      	ldrb	r3, [r3, #24]
    11cc:	74fb      	strb	r3, [r7, #19]
			// Call modem status call-back
			if (pfnModemCbs != NULL){
    11ce:	4b4b      	ldr	r3, [pc, #300]	; (12fc <UART_GenIntHandler+0x160>)
    11d0:	681b      	ldr	r3, [r3, #0]
    11d2:	2b00      	cmp	r3, #0
    11d4:	d005      	beq.n	11e2 <UART_GenIntHandler+0x46>
				pfnModemCbs(modemsts);
    11d6:	4b49      	ldr	r3, [pc, #292]	; (12fc <UART_GenIntHandler+0x160>)
    11d8:	681b      	ldr	r3, [r3, #0]
    11da:	7cfa      	ldrb	r2, [r7, #19]
    11dc:	4610      	mov	r0, r2
    11de:	4798      	blx	r3
    11e0:	e005      	b.n	11ee <UART_GenIntHandler+0x52>
			}
			// disable modem status interrupt and CTS status change interrupt
			// if its callback is not installed
			else {
				LPC_UART1->IER &= ~(UART1_IER_MSINT_EN | UART1_IER_CTSINT_EN);
    11e2:	4a45      	ldr	r2, [pc, #276]	; (12f8 <UART_GenIntHandler+0x15c>)
    11e4:	4b44      	ldr	r3, [pc, #272]	; (12f8 <UART_GenIntHandler+0x15c>)
    11e6:	685b      	ldr	r3, [r3, #4]
    11e8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
    11ec:	6053      	str	r3, [r2, #4]
			}
		}
	}

	// Receive Line Status
	if (tmp == UART_IIR_INTID_RLS){
    11ee:	697b      	ldr	r3, [r7, #20]
    11f0:	2b06      	cmp	r3, #6
    11f2:	d123      	bne.n	123c <UART_GenIntHandler+0xa0>
		// Check line status
		tmp1 = UARTx->LSR;
    11f4:	687b      	ldr	r3, [r7, #4]
    11f6:	7d1b      	ldrb	r3, [r3, #20]
    11f8:	b2db      	uxtb	r3, r3
    11fa:	60fb      	str	r3, [r7, #12]
		// Mask out the Receive Ready and Transmit Holding empty status
		tmp1 &= (UART_LSR_OE | UART_LSR_PE | UART_LSR_FE \
    11fc:	68fb      	ldr	r3, [r7, #12]
    11fe:	f003 039e 	and.w	r3, r3, #158	; 0x9e
    1202:	60fb      	str	r3, [r7, #12]
				| UART_LSR_BI | UART_LSR_RXFE);
		// If any error exist
		if (tmp1) {
    1204:	68fb      	ldr	r3, [r7, #12]
    1206:	2b00      	cmp	r3, #0
    1208:	d018      	beq.n	123c <UART_GenIntHandler+0xa0>
			// Call Call-back function with error input value
			if (uartCbsDat[pUart].pfnErrCbs != NULL) {
    120a:	7ffb      	ldrb	r3, [r7, #31]
    120c:	4a3c      	ldr	r2, [pc, #240]	; (1300 <UART_GenIntHandler+0x164>)
    120e:	011b      	lsls	r3, r3, #4
    1210:	4413      	add	r3, r2
    1212:	330c      	adds	r3, #12
    1214:	681b      	ldr	r3, [r3, #0]
    1216:	2b00      	cmp	r3, #0
    1218:	d00a      	beq.n	1230 <UART_GenIntHandler+0x94>
				uartCbsDat[pUart].pfnErrCbs(tmp1);
    121a:	7ffb      	ldrb	r3, [r7, #31]
    121c:	4a38      	ldr	r2, [pc, #224]	; (1300 <UART_GenIntHandler+0x164>)
    121e:	011b      	lsls	r3, r3, #4
    1220:	4413      	add	r3, r2
    1222:	330c      	adds	r3, #12
    1224:	681b      	ldr	r3, [r3, #0]
    1226:	68fa      	ldr	r2, [r7, #12]
    1228:	b2d2      	uxtb	r2, r2
    122a:	4610      	mov	r0, r2
    122c:	4798      	blx	r3
    122e:	e005      	b.n	123c <UART_GenIntHandler+0xa0>
			}
			// Disable interrupt if its call-back is not install
			else {
				UARTx->IER &= ~(UART_IER_RLSINT_EN);
    1230:	687b      	ldr	r3, [r7, #4]
    1232:	685b      	ldr	r3, [r3, #4]
    1234:	f023 0204 	bic.w	r2, r3, #4
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	605a      	str	r2, [r3, #4]
			}
		}
	}

	// Receive Data Available or Character time-out
	if ((tmp == UART_IIR_INTID_RDA) || (tmp == UART_IIR_INTID_CTI)){
    123c:	697b      	ldr	r3, [r7, #20]
    123e:	2b04      	cmp	r3, #4
    1240:	d002      	beq.n	1248 <UART_GenIntHandler+0xac>
    1242:	697b      	ldr	r3, [r7, #20]
    1244:	2b0c      	cmp	r3, #12
    1246:	d115      	bne.n	1274 <UART_GenIntHandler+0xd8>
		// Call Rx call back function
		if (uartCbsDat[pUart].pfnRxCbs != NULL) {
    1248:	7ffb      	ldrb	r3, [r7, #31]
    124a:	4a2d      	ldr	r2, [pc, #180]	; (1300 <UART_GenIntHandler+0x164>)
    124c:	011b      	lsls	r3, r3, #4
    124e:	4413      	add	r3, r2
    1250:	3304      	adds	r3, #4
    1252:	681b      	ldr	r3, [r3, #0]
    1254:	2b00      	cmp	r3, #0
    1256:	d007      	beq.n	1268 <UART_GenIntHandler+0xcc>
			uartCbsDat[pUart].pfnRxCbs();
    1258:	7ffb      	ldrb	r3, [r7, #31]
    125a:	4a29      	ldr	r2, [pc, #164]	; (1300 <UART_GenIntHandler+0x164>)
    125c:	011b      	lsls	r3, r3, #4
    125e:	4413      	add	r3, r2
    1260:	3304      	adds	r3, #4
    1262:	681b      	ldr	r3, [r3, #0]
    1264:	4798      	blx	r3
    1266:	e005      	b.n	1274 <UART_GenIntHandler+0xd8>
		}
		// Disable interrupt if its call-back is not install
		else {
			UARTx->IER &= ~(UART_IER_RBRINT_EN);
    1268:	687b      	ldr	r3, [r7, #4]
    126a:	685b      	ldr	r3, [r3, #4]
    126c:	f023 0201 	bic.w	r2, r3, #1
    1270:	687b      	ldr	r3, [r7, #4]
    1272:	605a      	str	r2, [r3, #4]
		}
	}

	// Transmit Holding Empty
	if (tmp == UART_IIR_INTID_THRE){
    1274:	697b      	ldr	r3, [r7, #20]
    1276:	2b02      	cmp	r3, #2
    1278:	d113      	bne.n	12a2 <UART_GenIntHandler+0x106>
		// Call Tx call back function
		if (uartCbsDat[pUart].pfnTxCbs != NULL) {
    127a:	7ffb      	ldrb	r3, [r7, #31]
    127c:	4a20      	ldr	r2, [pc, #128]	; (1300 <UART_GenIntHandler+0x164>)
    127e:	011b      	lsls	r3, r3, #4
    1280:	4413      	add	r3, r2
    1282:	681b      	ldr	r3, [r3, #0]
    1284:	2b00      	cmp	r3, #0
    1286:	d006      	beq.n	1296 <UART_GenIntHandler+0xfa>
			uartCbsDat[pUart].pfnTxCbs();
    1288:	7ffb      	ldrb	r3, [r7, #31]
    128a:	4a1d      	ldr	r2, [pc, #116]	; (1300 <UART_GenIntHandler+0x164>)
    128c:	011b      	lsls	r3, r3, #4
    128e:	4413      	add	r3, r2
    1290:	681b      	ldr	r3, [r3, #0]
    1292:	4798      	blx	r3
    1294:	e005      	b.n	12a2 <UART_GenIntHandler+0x106>
		}
		// Disable interrupt if its call-back is not install
		else {
			UARTx->IER &= ~(UART_IER_THREINT_EN);
    1296:	687b      	ldr	r3, [r7, #4]
    1298:	685b      	ldr	r3, [r3, #4]
    129a:	f023 0202 	bic.w	r2, r3, #2
    129e:	687b      	ldr	r3, [r7, #4]
    12a0:	605a      	str	r2, [r3, #4]
		}
	}

	intsrc &= (UART_IIR_ABEO_INT | UART_IIR_ABTO_INT);
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
    12a8:	61bb      	str	r3, [r7, #24]
	// Check if End of auto-baudrate interrupt or Auto baudrate time out
	if (intsrc){
    12aa:	69bb      	ldr	r3, [r7, #24]
    12ac:	2b00      	cmp	r3, #0
    12ae:	d01e      	beq.n	12ee <UART_GenIntHandler+0x152>
		// Clear interrupt pending
		UARTx->ACR |= ((intsrc & UART_IIR_ABEO_INT) ? UART_ACR_ABEOINT_CLR : 0) \
    12b0:	687b      	ldr	r3, [r7, #4]
    12b2:	6a1a      	ldr	r2, [r3, #32]
						| ((intsrc & UART_IIR_ABTO_INT) ? UART_ACR_ABTOINT_CLR : 0);
    12b4:	69bb      	ldr	r3, [r7, #24]
    12b6:	f403 7340 	and.w	r3, r3, #768	; 0x300

	intsrc &= (UART_IIR_ABEO_INT | UART_IIR_ABTO_INT);
	// Check if End of auto-baudrate interrupt or Auto baudrate time out
	if (intsrc){
		// Clear interrupt pending
		UARTx->ACR |= ((intsrc & UART_IIR_ABEO_INT) ? UART_ACR_ABEOINT_CLR : 0) \
    12ba:	431a      	orrs	r2, r3
    12bc:	687b      	ldr	r3, [r7, #4]
    12be:	621a      	str	r2, [r3, #32]
						| ((intsrc & UART_IIR_ABTO_INT) ? UART_ACR_ABTOINT_CLR : 0);
		if (uartCbsDat[pUart].pfnABCbs != NULL) {
    12c0:	7ffb      	ldrb	r3, [r7, #31]
    12c2:	4a0f      	ldr	r2, [pc, #60]	; (1300 <UART_GenIntHandler+0x164>)
    12c4:	011b      	lsls	r3, r3, #4
    12c6:	4413      	add	r3, r2
    12c8:	3308      	adds	r3, #8
    12ca:	681b      	ldr	r3, [r3, #0]
    12cc:	2b00      	cmp	r3, #0
    12ce:	d008      	beq.n	12e2 <UART_GenIntHandler+0x146>
			uartCbsDat[pUart].pfnABCbs(intsrc);
    12d0:	7ffb      	ldrb	r3, [r7, #31]
    12d2:	4a0b      	ldr	r2, [pc, #44]	; (1300 <UART_GenIntHandler+0x164>)
    12d4:	011b      	lsls	r3, r3, #4
    12d6:	4413      	add	r3, r2
    12d8:	3308      	adds	r3, #8
    12da:	681b      	ldr	r3, [r3, #0]
    12dc:	69b8      	ldr	r0, [r7, #24]
    12de:	4798      	blx	r3
		} else {
			// Disable End of AB interrupt
			UARTx->IER &= ~(UART_IER_ABEOINT_EN | UART_IER_ABTOINT_EN);
		}
	}
}
    12e0:	e005      	b.n	12ee <UART_GenIntHandler+0x152>
						| ((intsrc & UART_IIR_ABTO_INT) ? UART_ACR_ABTOINT_CLR : 0);
		if (uartCbsDat[pUart].pfnABCbs != NULL) {
			uartCbsDat[pUart].pfnABCbs(intsrc);
		} else {
			// Disable End of AB interrupt
			UARTx->IER &= ~(UART_IER_ABEOINT_EN | UART_IER_ABTOINT_EN);
    12e2:	687b      	ldr	r3, [r7, #4]
    12e4:	685b      	ldr	r3, [r3, #4]
    12e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
    12ea:	687b      	ldr	r3, [r7, #4]
    12ec:	605a      	str	r2, [r3, #4]
		}
	}
}
    12ee:	bf00      	nop
    12f0:	3720      	adds	r7, #32
    12f2:	46bd      	mov	sp, r7
    12f4:	bd80      	pop	{r7, pc}
    12f6:	bf00      	nop
    12f8:	40010000 	.word	0x40010000
    12fc:	100002a4 	.word	0x100002a4
    1300:	10000264 	.word	0x10000264

00001304 <UART_Init>:
*                    that contains the configuration information for the
*                    specified UART peripheral.
 * @return 		None
 *********************************************************************/
void UART_Init(LPC_UART_TypeDef *UARTx, UART_CFG_Type *UART_ConfigStruct)
{
    1304:	b580      	push	{r7, lr}
    1306:	b084      	sub	sp, #16
    1308:	af00      	add	r7, sp, #0
    130a:	6078      	str	r0, [r7, #4]
    130c:	6039      	str	r1, [r7, #0]
	CHECK_PARAM(PARAM_UART_DATABIT(UART_ConfigStruct->Databits));
	CHECK_PARAM(PARAM_UART_STOPBIT(UART_ConfigStruct->Stopbits));
	CHECK_PARAM(PARAM_UART_PARITY(UART_ConfigStruct->Parity));

#ifdef _UART0
	if(UARTx == LPC_UART0)
    130e:	687b      	ldr	r3, [r7, #4]
    1310:	4a89      	ldr	r2, [pc, #548]	; (1538 <UART_Init+0x234>)
    1312:	4293      	cmp	r3, r2
    1314:	d103      	bne.n	131e <UART_Init+0x1a>
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART0, ENABLE);
    1316:	2101      	movs	r1, #1
    1318:	2008      	movs	r0, #8
    131a:	f7ff fd0d 	bl	d38 <CLKPWR_ConfigPPWR>
	}
#endif

#ifdef _UART1
	if(((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    131e:	687b      	ldr	r3, [r7, #4]
    1320:	4a86      	ldr	r2, [pc, #536]	; (153c <UART_Init+0x238>)
    1322:	4293      	cmp	r3, r2
    1324:	d103      	bne.n	132e <UART_Init+0x2a>
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART1, ENABLE);
    1326:	2101      	movs	r1, #1
    1328:	2010      	movs	r0, #16
    132a:	f7ff fd05 	bl	d38 <CLKPWR_ConfigPPWR>
	}
#endif

#ifdef _UART2
	if(UARTx == LPC_UART2)
    132e:	687b      	ldr	r3, [r7, #4]
    1330:	4a83      	ldr	r2, [pc, #524]	; (1540 <UART_Init+0x23c>)
    1332:	4293      	cmp	r3, r2
    1334:	d104      	bne.n	1340 <UART_Init+0x3c>
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART2, ENABLE);
    1336:	2101      	movs	r1, #1
    1338:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    133c:	f7ff fcfc 	bl	d38 <CLKPWR_ConfigPPWR>
	}
#endif

#ifdef _UART3
	if(UARTx == LPC_UART3)
    1340:	687b      	ldr	r3, [r7, #4]
    1342:	4a80      	ldr	r2, [pc, #512]	; (1544 <UART_Init+0x240>)
    1344:	4293      	cmp	r3, r2
    1346:	d104      	bne.n	1352 <UART_Init+0x4e>
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART3, ENABLE);
    1348:	2101      	movs	r1, #1
    134a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    134e:	f7ff fcf3 	bl	d38 <CLKPWR_ConfigPPWR>
	}
#endif

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    1352:	687b      	ldr	r3, [r7, #4]
    1354:	4a79      	ldr	r2, [pc, #484]	; (153c <UART_Init+0x238>)
    1356:	4293      	cmp	r3, r2
    1358:	d142      	bne.n	13e0 <UART_Init+0xdc>
	{
		/* FIFOs are empty */
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = ( UART_FCR_FIFO_EN \
    135a:	687b      	ldr	r3, [r7, #4]
    135c:	2207      	movs	r2, #7
    135e:	721a      	strb	r2, [r3, #8]
				| UART_FCR_RX_RS | UART_FCR_TX_RS);
		// Disable FIFO
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = 0;
    1360:	687b      	ldr	r3, [r7, #4]
    1362:	2200      	movs	r2, #0
    1364:	721a      	strb	r2, [r3, #8]

		// Dummy reading
		while (((LPC_UART1_TypeDef *)UARTx)->LSR & UART_LSR_RDR)
    1366:	e003      	b.n	1370 <UART_Init+0x6c>
		{
			tmp = ((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/RBR;
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	781b      	ldrb	r3, [r3, #0]
    136c:	b2db      	uxtb	r3, r3
    136e:	60fb      	str	r3, [r7, #12]
				| UART_FCR_RX_RS | UART_FCR_TX_RS);
		// Disable FIFO
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = 0;

		// Dummy reading
		while (((LPC_UART1_TypeDef *)UARTx)->LSR & UART_LSR_RDR)
    1370:	687b      	ldr	r3, [r7, #4]
    1372:	7d1b      	ldrb	r3, [r3, #20]
    1374:	b2db      	uxtb	r3, r3
    1376:	f003 0301 	and.w	r3, r3, #1
    137a:	2b00      	cmp	r3, #0
    137c:	d1f4      	bne.n	1368 <UART_Init+0x64>
		{
			tmp = ((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/RBR;
		}

		((LPC_UART1_TypeDef *)UARTx)->TER = UART_TER_TXEN;
    137e:	687b      	ldr	r3, [r7, #4]
    1380:	2280      	movs	r2, #128	; 0x80
    1382:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		// Wait for current transmit complete
		while (!(((LPC_UART1_TypeDef *)UARTx)->LSR & UART_LSR_THRE));
    1386:	bf00      	nop
    1388:	687b      	ldr	r3, [r7, #4]
    138a:	7d1b      	ldrb	r3, [r3, #20]
    138c:	b2db      	uxtb	r3, r3
    138e:	f003 0320 	and.w	r3, r3, #32
    1392:	2b00      	cmp	r3, #0
    1394:	d0f8      	beq.n	1388 <UART_Init+0x84>
		// Disable Tx
		((LPC_UART1_TypeDef *)UARTx)->TER = 0;
    1396:	687b      	ldr	r3, [r7, #4]
    1398:	2200      	movs	r2, #0
    139a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

		// Disable interrupt
		((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/IER = 0;
    139e:	687b      	ldr	r3, [r7, #4]
    13a0:	2200      	movs	r2, #0
    13a2:	605a      	str	r2, [r3, #4]
		// Set LCR to default state
		((LPC_UART1_TypeDef *)UARTx)->LCR = 0;
    13a4:	687b      	ldr	r3, [r7, #4]
    13a6:	2200      	movs	r2, #0
    13a8:	731a      	strb	r2, [r3, #12]
		// Set ACR to default state
		((LPC_UART1_TypeDef *)UARTx)->ACR = 0;
    13aa:	687b      	ldr	r3, [r7, #4]
    13ac:	2200      	movs	r2, #0
    13ae:	621a      	str	r2, [r3, #32]
		// Set Modem Control to default state
		((LPC_UART1_TypeDef *)UARTx)->MCR = 0;
    13b0:	687b      	ldr	r3, [r7, #4]
    13b2:	2200      	movs	r2, #0
    13b4:	741a      	strb	r2, [r3, #16]
		// Set RS485 control to default state
		((LPC_UART1_TypeDef *)UARTx)->RS485CTRL = 0;
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	2200      	movs	r2, #0
    13ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		// Set RS485 delay timer to default state
		((LPC_UART1_TypeDef *)UARTx)->RS485DLY = 0;
    13be:	687b      	ldr	r3, [r7, #4]
    13c0:	2200      	movs	r2, #0
    13c2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		// Set RS485 addr match to default state
		((LPC_UART1_TypeDef *)UARTx)->ADRMATCH = 0;
    13c6:	687b      	ldr	r3, [r7, #4]
    13c8:	2200      	movs	r2, #0
    13ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		//Dummy Reading to Clear Status
		tmp = ((LPC_UART1_TypeDef *)UARTx)->MSR;
    13ce:	687b      	ldr	r3, [r7, #4]
    13d0:	7e1b      	ldrb	r3, [r3, #24]
    13d2:	b2db      	uxtb	r3, r3
    13d4:	60fb      	str	r3, [r7, #12]
		tmp = ((LPC_UART1_TypeDef *)UARTx)->LSR;
    13d6:	687b      	ldr	r3, [r7, #4]
    13d8:	7d1b      	ldrb	r3, [r3, #20]
    13da:	b2db      	uxtb	r3, r3
    13dc:	60fb      	str	r3, [r7, #12]
    13de:	e02e      	b.n	143e <UART_Init+0x13a>
	}
	else
	{
		/* FIFOs are empty */
		UARTx->/*IIFCR.*/FCR = ( UART_FCR_FIFO_EN | UART_FCR_RX_RS | UART_FCR_TX_RS);
    13e0:	687b      	ldr	r3, [r7, #4]
    13e2:	2207      	movs	r2, #7
    13e4:	721a      	strb	r2, [r3, #8]
		// Disable FIFO
		UARTx->/*IIFCR.*/FCR = 0;
    13e6:	687b      	ldr	r3, [r7, #4]
    13e8:	2200      	movs	r2, #0
    13ea:	721a      	strb	r2, [r3, #8]

		// Dummy reading
		while (UARTx->LSR & UART_LSR_RDR)
    13ec:	e003      	b.n	13f6 <UART_Init+0xf2>
		{
			tmp = UARTx->/*RBTHDLR.*/RBR;
    13ee:	687b      	ldr	r3, [r7, #4]
    13f0:	781b      	ldrb	r3, [r3, #0]
    13f2:	b2db      	uxtb	r3, r3
    13f4:	60fb      	str	r3, [r7, #12]
		UARTx->/*IIFCR.*/FCR = ( UART_FCR_FIFO_EN | UART_FCR_RX_RS | UART_FCR_TX_RS);
		// Disable FIFO
		UARTx->/*IIFCR.*/FCR = 0;

		// Dummy reading
		while (UARTx->LSR & UART_LSR_RDR)
    13f6:	687b      	ldr	r3, [r7, #4]
    13f8:	7d1b      	ldrb	r3, [r3, #20]
    13fa:	b2db      	uxtb	r3, r3
    13fc:	f003 0301 	and.w	r3, r3, #1
    1400:	2b00      	cmp	r3, #0
    1402:	d1f4      	bne.n	13ee <UART_Init+0xea>
		{
			tmp = UARTx->/*RBTHDLR.*/RBR;
		}

		UARTx->TER = UART_TER_TXEN;
    1404:	687b      	ldr	r3, [r7, #4]
    1406:	2280      	movs	r2, #128	; 0x80
    1408:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		// Wait for current transmit complete
		while (!(UARTx->LSR & UART_LSR_THRE));
    140c:	bf00      	nop
    140e:	687b      	ldr	r3, [r7, #4]
    1410:	7d1b      	ldrb	r3, [r3, #20]
    1412:	b2db      	uxtb	r3, r3
    1414:	f003 0320 	and.w	r3, r3, #32
    1418:	2b00      	cmp	r3, #0
    141a:	d0f8      	beq.n	140e <UART_Init+0x10a>
		// Disable Tx
		UARTx->TER = 0;
    141c:	687b      	ldr	r3, [r7, #4]
    141e:	2200      	movs	r2, #0
    1420:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

		// Disable interrupt
		UARTx->/*DLIER.*/IER = 0;
    1424:	687b      	ldr	r3, [r7, #4]
    1426:	2200      	movs	r2, #0
    1428:	605a      	str	r2, [r3, #4]
		// Set LCR to default state
		UARTx->LCR = 0;
    142a:	687b      	ldr	r3, [r7, #4]
    142c:	2200      	movs	r2, #0
    142e:	731a      	strb	r2, [r3, #12]
		// Set ACR to default state
		UARTx->ACR = 0;
    1430:	687b      	ldr	r3, [r7, #4]
    1432:	2200      	movs	r2, #0
    1434:	621a      	str	r2, [r3, #32]
		// Dummy reading
		tmp = UARTx->LSR;
    1436:	687b      	ldr	r3, [r7, #4]
    1438:	7d1b      	ldrb	r3, [r3, #20]
    143a:	b2db      	uxtb	r3, r3
    143c:	60fb      	str	r3, [r7, #12]
	}

	if (UARTx == LPC_UART3)
    143e:	687b      	ldr	r3, [r7, #4]
    1440:	4a40      	ldr	r2, [pc, #256]	; (1544 <UART_Init+0x240>)
    1442:	4293      	cmp	r3, r2
    1444:	d103      	bne.n	144e <UART_Init+0x14a>
	{
		// Set IrDA to default state
		UARTx->ICR = 0;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	2200      	movs	r2, #0
    144a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}

	// Set Line Control register ----------------------------

	uart_set_divisors(UARTx, (UART_ConfigStruct->Baud_rate));
    144e:	683b      	ldr	r3, [r7, #0]
    1450:	681b      	ldr	r3, [r3, #0]
    1452:	4619      	mov	r1, r3
    1454:	6878      	ldr	r0, [r7, #4]
    1456:	f7ff fd9b 	bl	f90 <uart_set_divisors>

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    145a:	687b      	ldr	r3, [r7, #4]
    145c:	4a37      	ldr	r2, [pc, #220]	; (153c <UART_Init+0x238>)
    145e:	4293      	cmp	r3, r2
    1460:	d106      	bne.n	1470 <UART_Init+0x16c>
	{
		tmp = (((LPC_UART1_TypeDef *)UARTx)->LCR & (UART_LCR_DLAB_EN | UART_LCR_BREAK_EN)) \
    1462:	687b      	ldr	r3, [r7, #4]
    1464:	7b1b      	ldrb	r3, [r3, #12]
    1466:	b2db      	uxtb	r3, r3
    1468:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    146c:	60fb      	str	r3, [r7, #12]
    146e:	e005      	b.n	147c <UART_Init+0x178>
				& UART_LCR_BITMASK;
	}
	else
	{
		tmp = (UARTx->LCR & (UART_LCR_DLAB_EN | UART_LCR_BREAK_EN)) & UART_LCR_BITMASK;
    1470:	687b      	ldr	r3, [r7, #4]
    1472:	7b1b      	ldrb	r3, [r3, #12]
    1474:	b2db      	uxtb	r3, r3
    1476:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    147a:	60fb      	str	r3, [r7, #12]
	}

	switch (UART_ConfigStruct->Databits){
    147c:	683b      	ldr	r3, [r7, #0]
    147e:	795b      	ldrb	r3, [r3, #5]
    1480:	2b01      	cmp	r3, #1
    1482:	d004      	beq.n	148e <UART_Init+0x18a>
    1484:	2b02      	cmp	r3, #2
    1486:	d007      	beq.n	1498 <UART_Init+0x194>
    1488:	2b00      	cmp	r3, #0
    148a:	d00f      	beq.n	14ac <UART_Init+0x1a8>
    148c:	e009      	b.n	14a2 <UART_Init+0x19e>
	case UART_DATABIT_5:
		tmp |= UART_LCR_WLEN5;
		break;
	case UART_DATABIT_6:
		tmp |= UART_LCR_WLEN6;
    148e:	68fb      	ldr	r3, [r7, #12]
    1490:	f043 0301 	orr.w	r3, r3, #1
    1494:	60fb      	str	r3, [r7, #12]
		break;
    1496:	e00a      	b.n	14ae <UART_Init+0x1aa>
	case UART_DATABIT_7:
		tmp |= UART_LCR_WLEN7;
    1498:	68fb      	ldr	r3, [r7, #12]
    149a:	f043 0302 	orr.w	r3, r3, #2
    149e:	60fb      	str	r3, [r7, #12]
		break;
    14a0:	e005      	b.n	14ae <UART_Init+0x1aa>
	case UART_DATABIT_8:
	default:
		tmp |= UART_LCR_WLEN8;
    14a2:	68fb      	ldr	r3, [r7, #12]
    14a4:	f043 0303 	orr.w	r3, r3, #3
    14a8:	60fb      	str	r3, [r7, #12]
		break;
    14aa:	e000      	b.n	14ae <UART_Init+0x1aa>
	}

	switch (UART_ConfigStruct->Databits){
	case UART_DATABIT_5:
		tmp |= UART_LCR_WLEN5;
		break;
    14ac:	bf00      	nop
	default:
		tmp |= UART_LCR_WLEN8;
		break;
	}

	if (UART_ConfigStruct->Parity == UART_PARITY_NONE)
    14ae:	683b      	ldr	r3, [r7, #0]
    14b0:	791b      	ldrb	r3, [r3, #4]
    14b2:	2b00      	cmp	r3, #0
    14b4:	d024      	beq.n	1500 <UART_Init+0x1fc>
	{
		// Do nothing...
	}
	else
	{
		tmp |= UART_LCR_PARITY_EN;
    14b6:	68fb      	ldr	r3, [r7, #12]
    14b8:	f043 0308 	orr.w	r3, r3, #8
    14bc:	60fb      	str	r3, [r7, #12]
		switch (UART_ConfigStruct->Parity)
    14be:	683b      	ldr	r3, [r7, #0]
    14c0:	791b      	ldrb	r3, [r3, #4]
    14c2:	3b01      	subs	r3, #1
    14c4:	2b03      	cmp	r3, #3
    14c6:	d81a      	bhi.n	14fe <UART_Init+0x1fa>
    14c8:	a201      	add	r2, pc, #4	; (adr r2, 14d0 <UART_Init+0x1cc>)
    14ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    14ce:	bf00      	nop
    14d0:	000014ff 	.word	0x000014ff
    14d4:	000014e1 	.word	0x000014e1
    14d8:	000014eb 	.word	0x000014eb
    14dc:	000014f5 	.word	0x000014f5
		case UART_PARITY_ODD:
			tmp |= UART_LCR_PARITY_ODD;
			break;

		case UART_PARITY_EVEN:
			tmp |= UART_LCR_PARITY_EVEN;
    14e0:	68fb      	ldr	r3, [r7, #12]
    14e2:	f043 0310 	orr.w	r3, r3, #16
    14e6:	60fb      	str	r3, [r7, #12]
			break;
    14e8:	e00a      	b.n	1500 <UART_Init+0x1fc>

		case UART_PARITY_SP_1:
			tmp |= UART_LCR_PARITY_F_1;
    14ea:	68fb      	ldr	r3, [r7, #12]
    14ec:	f043 0320 	orr.w	r3, r3, #32
    14f0:	60fb      	str	r3, [r7, #12]
			break;
    14f2:	e005      	b.n	1500 <UART_Init+0x1fc>

		case UART_PARITY_SP_0:
			tmp |= UART_LCR_PARITY_F_0;
    14f4:	68fb      	ldr	r3, [r7, #12]
    14f6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    14fa:	60fb      	str	r3, [r7, #12]
			break;
    14fc:	e000      	b.n	1500 <UART_Init+0x1fc>
		default:
			break;
    14fe:	bf00      	nop
		}
	}

	switch (UART_ConfigStruct->Stopbits){
    1500:	683b      	ldr	r3, [r7, #0]
    1502:	799b      	ldrb	r3, [r3, #6]
    1504:	2b01      	cmp	r3, #1
    1506:	d000      	beq.n	150a <UART_Init+0x206>
		tmp |= UART_LCR_STOPBIT_SEL;
		break;
	case UART_STOPBIT_1:
	default:
		// Do no thing
		break;
    1508:	e004      	b.n	1514 <UART_Init+0x210>
		}
	}

	switch (UART_ConfigStruct->Stopbits){
	case UART_STOPBIT_2:
		tmp |= UART_LCR_STOPBIT_SEL;
    150a:	68fb      	ldr	r3, [r7, #12]
    150c:	f043 0304 	orr.w	r3, r3, #4
    1510:	60fb      	str	r3, [r7, #12]
		break;
    1512:	bf00      	nop
		break;
	}


	// Write back to LCR, configure FIFO and Disable Tx
	if (((LPC_UART1_TypeDef *)UARTx) ==  LPC_UART1)
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	4a09      	ldr	r2, [pc, #36]	; (153c <UART_Init+0x238>)
    1518:	4293      	cmp	r3, r2
    151a:	d104      	bne.n	1526 <UART_Init+0x222>
	{
		((LPC_UART1_TypeDef *)UARTx)->LCR = (uint8_t)(tmp & UART_LCR_BITMASK);
    151c:	68fb      	ldr	r3, [r7, #12]
    151e:	b2da      	uxtb	r2, r3
    1520:	687b      	ldr	r3, [r7, #4]
    1522:	731a      	strb	r2, [r3, #12]
	}
	else
	{
		UARTx->LCR = (uint8_t)(tmp & UART_LCR_BITMASK);
	}
}
    1524:	e003      	b.n	152e <UART_Init+0x22a>
	{
		((LPC_UART1_TypeDef *)UARTx)->LCR = (uint8_t)(tmp & UART_LCR_BITMASK);
	}
	else
	{
		UARTx->LCR = (uint8_t)(tmp & UART_LCR_BITMASK);
    1526:	68fb      	ldr	r3, [r7, #12]
    1528:	b2da      	uxtb	r2, r3
    152a:	687b      	ldr	r3, [r7, #4]
    152c:	731a      	strb	r2, [r3, #12]
	}
}
    152e:	bf00      	nop
    1530:	3710      	adds	r7, #16
    1532:	46bd      	mov	sp, r7
    1534:	bd80      	pop	{r7, pc}
    1536:	bf00      	nop
    1538:	4000c000 	.word	0x4000c000
    153c:	40010000 	.word	0x40010000
    1540:	40098000 	.word	0x40098000
    1544:	4009c000 	.word	0x4009c000

00001548 <UART_ConfigStructInit>:
* @param[in]	UART_InitStruct Pointer to a UART_CFG_Type structure
*                    which will be initialized.
* @return		None
*******************************************************************************/
void UART_ConfigStructInit(UART_CFG_Type *UART_InitStruct)
{
    1548:	b480      	push	{r7}
    154a:	b083      	sub	sp, #12
    154c:	af00      	add	r7, sp, #0
    154e:	6078      	str	r0, [r7, #4]
	UART_InitStruct->Baud_rate = 9600;
    1550:	687b      	ldr	r3, [r7, #4]
    1552:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    1556:	601a      	str	r2, [r3, #0]
	UART_InitStruct->Databits = UART_DATABIT_8;
    1558:	687b      	ldr	r3, [r7, #4]
    155a:	2203      	movs	r2, #3
    155c:	715a      	strb	r2, [r3, #5]
	UART_InitStruct->Parity = UART_PARITY_NONE;
    155e:	687b      	ldr	r3, [r7, #4]
    1560:	2200      	movs	r2, #0
    1562:	711a      	strb	r2, [r3, #4]
	UART_InitStruct->Stopbits = UART_STOPBIT_1;
    1564:	687b      	ldr	r3, [r7, #4]
    1566:	2200      	movs	r2, #0
    1568:	719a      	strb	r2, [r3, #6]
}
    156a:	bf00      	nop
    156c:	370c      	adds	r7, #12
    156e:	46bd      	mov	sp, r7
    1570:	bc80      	pop	{r7}
    1572:	4770      	bx	lr

00001574 <UART_SendData>:
 * 						UART2 or UART3.
 * @param[in]	Data	Data to transmit (must be 8-bit long)
 * @return none
 **********************************************************************/
void UART_SendData(LPC_UART_TypeDef* UARTx, uint8_t Data)
{
    1574:	b480      	push	{r7}
    1576:	b083      	sub	sp, #12
    1578:	af00      	add	r7, sp, #0
    157a:	6078      	str	r0, [r7, #4]
    157c:	460b      	mov	r3, r1
    157e:	70fb      	strb	r3, [r7, #3]
	CHECK_PARAM(PARAM_UARTx(UARTx));

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    1580:	687b      	ldr	r3, [r7, #4]
    1582:	4a07      	ldr	r2, [pc, #28]	; (15a0 <UART_SendData+0x2c>)
    1584:	4293      	cmp	r3, r2
    1586:	d103      	bne.n	1590 <UART_SendData+0x1c>
	{
		((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/THR = Data & UART_THR_MASKBIT;
    1588:	687b      	ldr	r3, [r7, #4]
    158a:	78fa      	ldrb	r2, [r7, #3]
    158c:	701a      	strb	r2, [r3, #0]
	else
	{
		UARTx->/*RBTHDLR.*/THR = Data & UART_THR_MASKBIT;
	}

}
    158e:	e002      	b.n	1596 <UART_SendData+0x22>
	{
		((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/THR = Data & UART_THR_MASKBIT;
	}
	else
	{
		UARTx->/*RBTHDLR.*/THR = Data & UART_THR_MASKBIT;
    1590:	687b      	ldr	r3, [r7, #4]
    1592:	78fa      	ldrb	r2, [r7, #3]
    1594:	701a      	strb	r2, [r3, #0]
	}

}
    1596:	bf00      	nop
    1598:	370c      	adds	r7, #12
    159a:	46bd      	mov	sp, r7
    159c:	bc80      	pop	{r7}
    159e:	4770      	bx	lr
    15a0:	40010000 	.word	0x40010000

000015a4 <UART_ReceiveData>:
 * @param[in]	UARTx	UART peripheral selected, should be UART0, UART1,
 * 						UART2 or UART3.
 * @return 		Data received
 **********************************************************************/
uint8_t UART_ReceiveData(LPC_UART_TypeDef* UARTx)
{
    15a4:	b480      	push	{r7}
    15a6:	b083      	sub	sp, #12
    15a8:	af00      	add	r7, sp, #0
    15aa:	6078      	str	r0, [r7, #4]
	CHECK_PARAM(PARAM_UARTx(UARTx));

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    15ac:	687b      	ldr	r3, [r7, #4]
    15ae:	4a07      	ldr	r2, [pc, #28]	; (15cc <UART_ReceiveData+0x28>)
    15b0:	4293      	cmp	r3, r2
    15b2:	d103      	bne.n	15bc <UART_ReceiveData+0x18>
	{
		return (((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/RBR & UART_RBR_MASKBIT);
    15b4:	687b      	ldr	r3, [r7, #4]
    15b6:	781b      	ldrb	r3, [r3, #0]
    15b8:	b2db      	uxtb	r3, r3
    15ba:	e002      	b.n	15c2 <UART_ReceiveData+0x1e>
	}
	else
	{
		return (UARTx->/*RBTHDLR.*/RBR & UART_RBR_MASKBIT);
    15bc:	687b      	ldr	r3, [r7, #4]
    15be:	781b      	ldrb	r3, [r3, #0]
    15c0:	b2db      	uxtb	r3, r3
	}
}
    15c2:	4618      	mov	r0, r3
    15c4:	370c      	adds	r7, #12
    15c6:	46bd      	mov	sp, r7
    15c8:	bc80      	pop	{r7}
    15ca:	4770      	bx	lr
    15cc:	40010000 	.word	0x40010000

000015d0 <UART_IntConfig>:
 * 				- ENALBE: Enable this UART interrupt type.
* 				- DISALBE: Disable this UART interrupt type.
 * @return 		None
 *********************************************************************/
void UART_IntConfig(LPC_UART_TypeDef *UARTx, UART_INT_Type UARTIntCfg, FunctionalState NewState)
{
    15d0:	b480      	push	{r7}
    15d2:	b085      	sub	sp, #20
    15d4:	af00      	add	r7, sp, #0
    15d6:	6078      	str	r0, [r7, #4]
    15d8:	460b      	mov	r3, r1
    15da:	70fb      	strb	r3, [r7, #3]
    15dc:	4613      	mov	r3, r2
    15de:	70bb      	strb	r3, [r7, #2]
	uint32_t tmp;

	CHECK_PARAM(PARAM_UARTx(UARTx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	switch(UARTIntCfg){
    15e0:	78fb      	ldrb	r3, [r7, #3]
    15e2:	2b06      	cmp	r3, #6
    15e4:	d827      	bhi.n	1636 <UART_IntConfig+0x66>
    15e6:	a201      	add	r2, pc, #4	; (adr r2, 15ec <UART_IntConfig+0x1c>)
    15e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    15ec:	00001609 	.word	0x00001609
    15f0:	0000160f 	.word	0x0000160f
    15f4:	00001615 	.word	0x00001615
    15f8:	0000161b 	.word	0x0000161b
    15fc:	00001621 	.word	0x00001621
    1600:	00001627 	.word	0x00001627
    1604:	0000162f 	.word	0x0000162f
		case UART_INTCFG_RBR:
			tmp = UART_IER_RBRINT_EN;
    1608:	2301      	movs	r3, #1
    160a:	60fb      	str	r3, [r7, #12]
			break;
    160c:	e016      	b.n	163c <UART_IntConfig+0x6c>
		case UART_INTCFG_THRE:
			tmp = UART_IER_THREINT_EN;
    160e:	2302      	movs	r3, #2
    1610:	60fb      	str	r3, [r7, #12]
			break;
    1612:	e013      	b.n	163c <UART_IntConfig+0x6c>
		case UART_INTCFG_RLS:
			tmp = UART_IER_RLSINT_EN;
    1614:	2304      	movs	r3, #4
    1616:	60fb      	str	r3, [r7, #12]
			break;
    1618:	e010      	b.n	163c <UART_IntConfig+0x6c>
		case UART1_INTCFG_MS:
			tmp = UART1_IER_MSINT_EN;
    161a:	2308      	movs	r3, #8
    161c:	60fb      	str	r3, [r7, #12]
			break;
    161e:	e00d      	b.n	163c <UART_IntConfig+0x6c>
		case UART1_INTCFG_CTS:
			tmp = UART1_IER_CTSINT_EN;
    1620:	2380      	movs	r3, #128	; 0x80
    1622:	60fb      	str	r3, [r7, #12]
			break;
    1624:	e00a      	b.n	163c <UART_IntConfig+0x6c>
		case UART_INTCFG_ABEO:
			tmp = UART_IER_ABEOINT_EN;
    1626:	f44f 7380 	mov.w	r3, #256	; 0x100
    162a:	60fb      	str	r3, [r7, #12]
			break;
    162c:	e006      	b.n	163c <UART_IntConfig+0x6c>
		case UART_INTCFG_ABTO:
			tmp = UART_IER_ABTOINT_EN;
    162e:	f44f 7300 	mov.w	r3, #512	; 0x200
    1632:	60fb      	str	r3, [r7, #12]
			break;
    1634:	e002      	b.n	163c <UART_IntConfig+0x6c>
		// mthomas, avoid warning:
		default:
			tmp = UART_IER_RBRINT_EN;
    1636:	2301      	movs	r3, #1
    1638:	60fb      	str	r3, [r7, #12]
			break;
    163a:	bf00      	nop
	else
	{
		CHECK_PARAM(PARAM_UART_INTCFG(UARTIntCfg));
	}

	if (NewState == ENABLE)
    163c:	78bb      	ldrb	r3, [r7, #2]
    163e:	2b01      	cmp	r3, #1
    1640:	d111      	bne.n	1666 <UART_IntConfig+0x96>
	{
		if ((LPC_UART1_TypeDef *) UARTx == LPC_UART1)
    1642:	687b      	ldr	r3, [r7, #4]
    1644:	4a17      	ldr	r2, [pc, #92]	; (16a4 <UART_IntConfig+0xd4>)
    1646:	4293      	cmp	r3, r2
    1648:	d106      	bne.n	1658 <UART_IntConfig+0x88>
		{
			((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/IER |= tmp;
    164a:	687b      	ldr	r3, [r7, #4]
    164c:	685a      	ldr	r2, [r3, #4]
    164e:	68fb      	ldr	r3, [r7, #12]
    1650:	431a      	orrs	r2, r3
    1652:	687b      	ldr	r3, [r7, #4]
    1654:	605a      	str	r2, [r3, #4]
		else
		{
			UARTx->/*DLIER.*/IER &= (~tmp) & UART_IER_BITMASK;
		}
	}
}
    1656:	e01f      	b.n	1698 <UART_IntConfig+0xc8>
		{
			((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/IER |= tmp;
		}
		else
		{
			UARTx->/*DLIER.*/IER |= tmp;
    1658:	687b      	ldr	r3, [r7, #4]
    165a:	685a      	ldr	r2, [r3, #4]
    165c:	68fb      	ldr	r3, [r7, #12]
    165e:	431a      	orrs	r2, r3
    1660:	687b      	ldr	r3, [r7, #4]
    1662:	605a      	str	r2, [r3, #4]
		else
		{
			UARTx->/*DLIER.*/IER &= (~tmp) & UART_IER_BITMASK;
		}
	}
}
    1664:	e018      	b.n	1698 <UART_IntConfig+0xc8>
			UARTx->/*DLIER.*/IER |= tmp;
		}
	}
	else
	{
		if ((LPC_UART1_TypeDef *) UARTx == LPC_UART1)
    1666:	687b      	ldr	r3, [r7, #4]
    1668:	4a0e      	ldr	r2, [pc, #56]	; (16a4 <UART_IntConfig+0xd4>)
    166a:	4293      	cmp	r3, r2
    166c:	d10a      	bne.n	1684 <UART_IntConfig+0xb4>
		{
			((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/IER &= (~tmp) & UART1_IER_BITMASK;
    166e:	687b      	ldr	r3, [r7, #4]
    1670:	685a      	ldr	r2, [r3, #4]
    1672:	68fb      	ldr	r3, [r7, #12]
    1674:	43db      	mvns	r3, r3
    1676:	401a      	ands	r2, r3
    1678:	f240 338f 	movw	r3, #911	; 0x38f
    167c:	4013      	ands	r3, r2
    167e:	687a      	ldr	r2, [r7, #4]
    1680:	6053      	str	r3, [r2, #4]
		else
		{
			UARTx->/*DLIER.*/IER &= (~tmp) & UART_IER_BITMASK;
		}
	}
}
    1682:	e009      	b.n	1698 <UART_IntConfig+0xc8>
		{
			((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/IER &= (~tmp) & UART1_IER_BITMASK;
		}
		else
		{
			UARTx->/*DLIER.*/IER &= (~tmp) & UART_IER_BITMASK;
    1684:	687b      	ldr	r3, [r7, #4]
    1686:	685a      	ldr	r2, [r3, #4]
    1688:	68fb      	ldr	r3, [r7, #12]
    168a:	43db      	mvns	r3, r3
    168c:	401a      	ands	r2, r3
    168e:	f240 3307 	movw	r3, #775	; 0x307
    1692:	4013      	ands	r3, r2
    1694:	687a      	ldr	r2, [r7, #4]
    1696:	6053      	str	r3, [r2, #4]
		}
	}
}
    1698:	bf00      	nop
    169a:	3714      	adds	r7, #20
    169c:	46bd      	mov	sp, r7
    169e:	bc80      	pop	{r7}
    16a0:	4770      	bx	lr
    16a2:	bf00      	nop
    16a4:	40010000 	.word	0x40010000

000016a8 <UART_CheckBusy>:
 * @param[in]	UARTx	UART peripheral selected, should be UART0, UART1,
 * 						UART2 or UART3.
 * @return		RESET if UART is not busy, otherwise return SET.
 **********************************************************************/
FlagStatus UART_CheckBusy(LPC_UART_TypeDef *UARTx)
{
    16a8:	b480      	push	{r7}
    16aa:	b083      	sub	sp, #12
    16ac:	af00      	add	r7, sp, #0
    16ae:	6078      	str	r0, [r7, #4]
	if (UARTx->LSR & UART_LSR_TEMT){
    16b0:	687b      	ldr	r3, [r7, #4]
    16b2:	7d1b      	ldrb	r3, [r3, #20]
    16b4:	b2db      	uxtb	r3, r3
    16b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    16ba:	2b00      	cmp	r3, #0
    16bc:	d001      	beq.n	16c2 <UART_CheckBusy+0x1a>
		return RESET;
    16be:	2300      	movs	r3, #0
    16c0:	e000      	b.n	16c4 <UART_CheckBusy+0x1c>
	} else {
		return SET;
    16c2:	2301      	movs	r3, #1
	}
}
    16c4:	4618      	mov	r0, r3
    16c6:	370c      	adds	r7, #12
    16c8:	46bd      	mov	sp, r7
    16ca:	bc80      	pop	{r7}
    16cc:	4770      	bx	lr
    16ce:	bf00      	nop

000016d0 <UART_FIFOConfig>:
 * @param[in]	FIFOCfg	Pointer to a UART_FIFO_CFG_Type Structure that
 * 						contains specified information about FIFO configuration
 * @return 		none
 **********************************************************************/
void UART_FIFOConfig(LPC_UART_TypeDef *UARTx, UART_FIFO_CFG_Type *FIFOCfg)
{
    16d0:	b480      	push	{r7}
    16d2:	b085      	sub	sp, #20
    16d4:	af00      	add	r7, sp, #0
    16d6:	6078      	str	r0, [r7, #4]
    16d8:	6039      	str	r1, [r7, #0]
	uint8_t tmp = 0;
    16da:	2300      	movs	r3, #0
    16dc:	73fb      	strb	r3, [r7, #15]
	CHECK_PARAM(PARAM_UART_FIFO_LEVEL(FIFOCfg->FIFO_Level));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(FIFOCfg->FIFO_DMAMode));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(FIFOCfg->FIFO_ResetRxBuf));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(FIFOCfg->FIFO_ResetTxBuf));

	tmp |= UART_FCR_FIFO_EN;
    16de:	7bfb      	ldrb	r3, [r7, #15]
    16e0:	f043 0301 	orr.w	r3, r3, #1
    16e4:	73fb      	strb	r3, [r7, #15]
	switch (FIFOCfg->FIFO_Level){
    16e6:	683b      	ldr	r3, [r7, #0]
    16e8:	78db      	ldrb	r3, [r3, #3]
    16ea:	2b01      	cmp	r3, #1
    16ec:	d004      	beq.n	16f8 <UART_FIFOConfig+0x28>
    16ee:	2b02      	cmp	r3, #2
    16f0:	d007      	beq.n	1702 <UART_FIFOConfig+0x32>
    16f2:	2b00      	cmp	r3, #0
    16f4:	d00f      	beq.n	1716 <UART_FIFOConfig+0x46>
    16f6:	e009      	b.n	170c <UART_FIFOConfig+0x3c>
	case UART_FIFO_TRGLEV0:
		tmp |= UART_FCR_TRG_LEV0;
		break;
	case UART_FIFO_TRGLEV1:
		tmp |= UART_FCR_TRG_LEV1;
    16f8:	7bfb      	ldrb	r3, [r7, #15]
    16fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    16fe:	73fb      	strb	r3, [r7, #15]
		break;
    1700:	e00a      	b.n	1718 <UART_FIFOConfig+0x48>
	case UART_FIFO_TRGLEV2:
		tmp |= UART_FCR_TRG_LEV2;
    1702:	7bfb      	ldrb	r3, [r7, #15]
    1704:	f063 037f 	orn	r3, r3, #127	; 0x7f
    1708:	73fb      	strb	r3, [r7, #15]
		break;
    170a:	e005      	b.n	1718 <UART_FIFOConfig+0x48>
	case UART_FIFO_TRGLEV3:
	default:
		tmp |= UART_FCR_TRG_LEV3;
    170c:	7bfb      	ldrb	r3, [r7, #15]
    170e:	f063 033f 	orn	r3, r3, #63	; 0x3f
    1712:	73fb      	strb	r3, [r7, #15]
		break;
    1714:	e000      	b.n	1718 <UART_FIFOConfig+0x48>

	tmp |= UART_FCR_FIFO_EN;
	switch (FIFOCfg->FIFO_Level){
	case UART_FIFO_TRGLEV0:
		tmp |= UART_FCR_TRG_LEV0;
		break;
    1716:	bf00      	nop
	default:
		tmp |= UART_FCR_TRG_LEV3;
		break;
	}

	if (FIFOCfg->FIFO_ResetTxBuf == ENABLE)
    1718:	683b      	ldr	r3, [r7, #0]
    171a:	785b      	ldrb	r3, [r3, #1]
    171c:	2b01      	cmp	r3, #1
    171e:	d103      	bne.n	1728 <UART_FIFOConfig+0x58>
	{
		tmp |= UART_FCR_TX_RS;
    1720:	7bfb      	ldrb	r3, [r7, #15]
    1722:	f043 0304 	orr.w	r3, r3, #4
    1726:	73fb      	strb	r3, [r7, #15]
	}
	if (FIFOCfg->FIFO_ResetRxBuf == ENABLE)
    1728:	683b      	ldr	r3, [r7, #0]
    172a:	781b      	ldrb	r3, [r3, #0]
    172c:	2b01      	cmp	r3, #1
    172e:	d103      	bne.n	1738 <UART_FIFOConfig+0x68>
	{
		tmp |= UART_FCR_RX_RS;
    1730:	7bfb      	ldrb	r3, [r7, #15]
    1732:	f043 0302 	orr.w	r3, r3, #2
    1736:	73fb      	strb	r3, [r7, #15]
	}
	if (FIFOCfg->FIFO_DMAMode == ENABLE)
    1738:	683b      	ldr	r3, [r7, #0]
    173a:	789b      	ldrb	r3, [r3, #2]
    173c:	2b01      	cmp	r3, #1
    173e:	d103      	bne.n	1748 <UART_FIFOConfig+0x78>
	{
		tmp |= UART_FCR_DMAMODE_SEL;
    1740:	7bfb      	ldrb	r3, [r7, #15]
    1742:	f043 0308 	orr.w	r3, r3, #8
    1746:	73fb      	strb	r3, [r7, #15]
	}


	//write to FIFO control register
	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    1748:	687b      	ldr	r3, [r7, #4]
    174a:	4a0a      	ldr	r2, [pc, #40]	; (1774 <UART_FIFOConfig+0xa4>)
    174c:	4293      	cmp	r3, r2
    174e:	d106      	bne.n	175e <UART_FIFOConfig+0x8e>
	{
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = tmp & UART_FCR_BITMASK;
    1750:	7bfb      	ldrb	r3, [r7, #15]
    1752:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    1756:	b2da      	uxtb	r2, r3
    1758:	687b      	ldr	r3, [r7, #4]
    175a:	721a      	strb	r2, [r3, #8]
	else
	{
		UARTx->/*IIFCR.*/FCR = tmp & UART_FCR_BITMASK;
	}

}
    175c:	e005      	b.n	176a <UART_FIFOConfig+0x9a>
	{
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = tmp & UART_FCR_BITMASK;
	}
	else
	{
		UARTx->/*IIFCR.*/FCR = tmp & UART_FCR_BITMASK;
    175e:	7bfb      	ldrb	r3, [r7, #15]
    1760:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    1764:	b2da      	uxtb	r2, r3
    1766:	687b      	ldr	r3, [r7, #4]
    1768:	721a      	strb	r2, [r3, #8]
	}

}
    176a:	bf00      	nop
    176c:	3714      	adds	r7, #20
    176e:	46bd      	mov	sp, r7
    1770:	bc80      	pop	{r7}
    1772:	4770      	bx	lr
    1774:	40010000 	.word	0x40010000

00001778 <UART_FIFOConfigStructInit>:
* @param[in]	UART_FIFOInitStruct Pointer to a UART_FIFO_CFG_Type structure
*                    which will be initialized.
* @return		None
*******************************************************************************/
void UART_FIFOConfigStructInit(UART_FIFO_CFG_Type *UART_FIFOInitStruct)
{
    1778:	b480      	push	{r7}
    177a:	b083      	sub	sp, #12
    177c:	af00      	add	r7, sp, #0
    177e:	6078      	str	r0, [r7, #4]
	UART_FIFOInitStruct->FIFO_DMAMode = DISABLE;
    1780:	687b      	ldr	r3, [r7, #4]
    1782:	2200      	movs	r2, #0
    1784:	709a      	strb	r2, [r3, #2]
	UART_FIFOInitStruct->FIFO_Level = UART_FIFO_TRGLEV0;
    1786:	687b      	ldr	r3, [r7, #4]
    1788:	2200      	movs	r2, #0
    178a:	70da      	strb	r2, [r3, #3]
	UART_FIFOInitStruct->FIFO_ResetRxBuf = ENABLE;
    178c:	687b      	ldr	r3, [r7, #4]
    178e:	2201      	movs	r2, #1
    1790:	701a      	strb	r2, [r3, #0]
	UART_FIFOInitStruct->FIFO_ResetTxBuf = ENABLE;
    1792:	687b      	ldr	r3, [r7, #4]
    1794:	2201      	movs	r2, #1
    1796:	705a      	strb	r2, [r3, #1]
}
    1798:	bf00      	nop
    179a:	370c      	adds	r7, #12
    179c:	46bd      	mov	sp, r7
    179e:	bc80      	pop	{r7}
    17a0:	4770      	bx	lr
    17a2:	bf00      	nop

000017a4 <UART_TxCmd>:
 * 				- ENABLE: Enable this function
				- DISABLE: Disable this function
 * @return none
 **********************************************************************/
void UART_TxCmd(LPC_UART_TypeDef *UARTx, FunctionalState NewState)
{
    17a4:	b480      	push	{r7}
    17a6:	b083      	sub	sp, #12
    17a8:	af00      	add	r7, sp, #0
    17aa:	6078      	str	r0, [r7, #4]
    17ac:	460b      	mov	r3, r1
    17ae:	70fb      	strb	r3, [r7, #3]
	CHECK_PARAM(PARAM_UARTx(UARTx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
    17b0:	78fb      	ldrb	r3, [r7, #3]
    17b2:	2b01      	cmp	r3, #1
    17b4:	d119      	bne.n	17ea <UART_TxCmd+0x46>
	{
		if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    17b6:	687b      	ldr	r3, [r7, #4]
    17b8:	4a18      	ldr	r2, [pc, #96]	; (181c <UART_TxCmd+0x78>)
    17ba:	4293      	cmp	r3, r2
    17bc:	d10a      	bne.n	17d4 <UART_TxCmd+0x30>
		{
			((LPC_UART1_TypeDef *)UARTx)->TER |= UART_TER_TXEN;
    17be:	687b      	ldr	r3, [r7, #4]
    17c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    17c4:	b2db      	uxtb	r3, r3
    17c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    17ca:	b2da      	uxtb	r2, r3
    17cc:	687b      	ldr	r3, [r7, #4]
    17ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		else
		{
			UARTx->TER &= (~UART_TER_TXEN) & UART_TER_BITMASK;
		}
	}
}
    17d2:	e01d      	b.n	1810 <UART_TxCmd+0x6c>
		{
			((LPC_UART1_TypeDef *)UARTx)->TER |= UART_TER_TXEN;
		}
		else
		{
			UARTx->TER |= UART_TER_TXEN;
    17d4:	687b      	ldr	r3, [r7, #4]
    17d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    17da:	b2db      	uxtb	r3, r3
    17dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    17e0:	b2da      	uxtb	r2, r3
    17e2:	687b      	ldr	r3, [r7, #4]
    17e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		else
		{
			UARTx->TER &= (~UART_TER_TXEN) & UART_TER_BITMASK;
		}
	}
}
    17e8:	e012      	b.n	1810 <UART_TxCmd+0x6c>
			UARTx->TER |= UART_TER_TXEN;
		}
	}
	else
	{
		if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    17ea:	687b      	ldr	r3, [r7, #4]
    17ec:	4a0b      	ldr	r2, [pc, #44]	; (181c <UART_TxCmd+0x78>)
    17ee:	4293      	cmp	r3, r2
    17f0:	d107      	bne.n	1802 <UART_TxCmd+0x5e>
		{
			((LPC_UART1_TypeDef *)UARTx)->TER &= (~UART_TER_TXEN) & UART_TER_BITMASK;
    17f2:	687b      	ldr	r3, [r7, #4]
    17f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	2200      	movs	r2, #0
    17fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		else
		{
			UARTx->TER &= (~UART_TER_TXEN) & UART_TER_BITMASK;
		}
	}
}
    1800:	e006      	b.n	1810 <UART_TxCmd+0x6c>
		{
			((LPC_UART1_TypeDef *)UARTx)->TER &= (~UART_TER_TXEN) & UART_TER_BITMASK;
		}
		else
		{
			UARTx->TER &= (~UART_TER_TXEN) & UART_TER_BITMASK;
    1802:	687b      	ldr	r3, [r7, #4]
    1804:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    1808:	687b      	ldr	r3, [r7, #4]
    180a:	2200      	movs	r2, #0
    180c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
	}
}
    1810:	bf00      	nop
    1812:	370c      	adds	r7, #12
    1814:	46bd      	mov	sp, r7
    1816:	bc80      	pop	{r7}
    1818:	4770      	bx	lr
    181a:	bf00      	nop
    181c:	40010000 	.word	0x40010000

00001820 <UART_Send>:
 * Note: when using UART in BLOCKING mode, a time-out condition is used
 * via defined symbol UART_BLOCKING_TIMEOUT.
 **********************************************************************/
uint32_t UART_Send(LPC_UART_TypeDef *UARTx, uint8_t *txbuf,
		uint32_t buflen, TRANSFER_BLOCK_Type flag)
{
    1820:	b580      	push	{r7, lr}
    1822:	b08a      	sub	sp, #40	; 0x28
    1824:	af00      	add	r7, sp, #0
    1826:	60f8      	str	r0, [r7, #12]
    1828:	60b9      	str	r1, [r7, #8]
    182a:	607a      	str	r2, [r7, #4]
    182c:	70fb      	strb	r3, [r7, #3]
	uint32_t bToSend, bSent, timeOut, fifo_cnt;
	uint8_t *pChar = txbuf;
    182e:	68bb      	ldr	r3, [r7, #8]
    1830:	617b      	str	r3, [r7, #20]

	bToSend = buflen;
    1832:	687b      	ldr	r3, [r7, #4]
    1834:	627b      	str	r3, [r7, #36]	; 0x24

	// blocking mode
	if (flag == BLOCKING) {
    1836:	78fb      	ldrb	r3, [r7, #3]
    1838:	2b01      	cmp	r3, #1
    183a:	d136      	bne.n	18aa <UART_Send+0x8a>
		bSent = 0;
    183c:	2300      	movs	r3, #0
    183e:	623b      	str	r3, [r7, #32]
		while (bToSend){
    1840:	e02f      	b.n	18a2 <UART_Send+0x82>
			timeOut = UART_BLOCKING_TIMEOUT;
    1842:	f04f 33ff 	mov.w	r3, #4294967295
    1846:	61fb      	str	r3, [r7, #28]
			// Wait for THR empty with timeout
			while (!(UARTx->LSR & UART_LSR_THRE)) {
    1848:	e005      	b.n	1856 <UART_Send+0x36>
				if (timeOut == 0) break;
    184a:	69fb      	ldr	r3, [r7, #28]
    184c:	2b00      	cmp	r3, #0
    184e:	d00a      	beq.n	1866 <UART_Send+0x46>
				timeOut--;
    1850:	69fb      	ldr	r3, [r7, #28]
    1852:	3b01      	subs	r3, #1
    1854:	61fb      	str	r3, [r7, #28]
	if (flag == BLOCKING) {
		bSent = 0;
		while (bToSend){
			timeOut = UART_BLOCKING_TIMEOUT;
			// Wait for THR empty with timeout
			while (!(UARTx->LSR & UART_LSR_THRE)) {
    1856:	68fb      	ldr	r3, [r7, #12]
    1858:	7d1b      	ldrb	r3, [r3, #20]
    185a:	b2db      	uxtb	r3, r3
    185c:	f003 0320 	and.w	r3, r3, #32
    1860:	2b00      	cmp	r3, #0
    1862:	d0f2      	beq.n	184a <UART_Send+0x2a>
    1864:	e000      	b.n	1868 <UART_Send+0x48>
				if (timeOut == 0) break;
    1866:	bf00      	nop
				timeOut--;
			}
			// Time out!
			if(timeOut == 0) break;
    1868:	69fb      	ldr	r3, [r7, #28]
    186a:	2b00      	cmp	r3, #0
    186c:	d045      	beq.n	18fa <UART_Send+0xda>
			fifo_cnt = UART_TX_FIFO_SIZE;
    186e:	2310      	movs	r3, #16
    1870:	61bb      	str	r3, [r7, #24]
			while (fifo_cnt && bToSend){
    1872:	e010      	b.n	1896 <UART_Send+0x76>
				UART_SendData(UARTx, (*pChar++));
    1874:	697b      	ldr	r3, [r7, #20]
    1876:	1c5a      	adds	r2, r3, #1
    1878:	617a      	str	r2, [r7, #20]
    187a:	781b      	ldrb	r3, [r3, #0]
    187c:	4619      	mov	r1, r3
    187e:	68f8      	ldr	r0, [r7, #12]
    1880:	f7ff fe78 	bl	1574 <UART_SendData>
				fifo_cnt--;
    1884:	69bb      	ldr	r3, [r7, #24]
    1886:	3b01      	subs	r3, #1
    1888:	61bb      	str	r3, [r7, #24]
				bToSend--;
    188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    188c:	3b01      	subs	r3, #1
    188e:	627b      	str	r3, [r7, #36]	; 0x24
				bSent++;
    1890:	6a3b      	ldr	r3, [r7, #32]
    1892:	3301      	adds	r3, #1
    1894:	623b      	str	r3, [r7, #32]
				timeOut--;
			}
			// Time out!
			if(timeOut == 0) break;
			fifo_cnt = UART_TX_FIFO_SIZE;
			while (fifo_cnt && bToSend){
    1896:	69bb      	ldr	r3, [r7, #24]
    1898:	2b00      	cmp	r3, #0
    189a:	d002      	beq.n	18a2 <UART_Send+0x82>
    189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    189e:	2b00      	cmp	r3, #0
    18a0:	d1e8      	bne.n	1874 <UART_Send+0x54>
	bToSend = buflen;

	// blocking mode
	if (flag == BLOCKING) {
		bSent = 0;
		while (bToSend){
    18a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    18a4:	2b00      	cmp	r3, #0
    18a6:	d1cc      	bne.n	1842 <UART_Send+0x22>
    18a8:	e02a      	b.n	1900 <UART_Send+0xe0>
			}
		}
	}
	// None blocking mode
	else {
		bSent = 0;
    18aa:	2300      	movs	r3, #0
    18ac:	623b      	str	r3, [r7, #32]
		while (bToSend) {
    18ae:	e020      	b.n	18f2 <UART_Send+0xd2>
			if (!(UARTx->LSR & UART_LSR_THRE)){
    18b0:	68fb      	ldr	r3, [r7, #12]
    18b2:	7d1b      	ldrb	r3, [r3, #20]
    18b4:	b2db      	uxtb	r3, r3
    18b6:	f003 0320 	and.w	r3, r3, #32
    18ba:	2b00      	cmp	r3, #0
    18bc:	d01f      	beq.n	18fe <UART_Send+0xde>
				break;
			}
			fifo_cnt = UART_TX_FIFO_SIZE;
    18be:	2310      	movs	r3, #16
    18c0:	61bb      	str	r3, [r7, #24]
			while (fifo_cnt && bToSend) {
    18c2:	e010      	b.n	18e6 <UART_Send+0xc6>
				UART_SendData(UARTx, (*pChar++));
    18c4:	697b      	ldr	r3, [r7, #20]
    18c6:	1c5a      	adds	r2, r3, #1
    18c8:	617a      	str	r2, [r7, #20]
    18ca:	781b      	ldrb	r3, [r3, #0]
    18cc:	4619      	mov	r1, r3
    18ce:	68f8      	ldr	r0, [r7, #12]
    18d0:	f7ff fe50 	bl	1574 <UART_SendData>
				bToSend--;
    18d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    18d6:	3b01      	subs	r3, #1
    18d8:	627b      	str	r3, [r7, #36]	; 0x24
				fifo_cnt--;
    18da:	69bb      	ldr	r3, [r7, #24]
    18dc:	3b01      	subs	r3, #1
    18de:	61bb      	str	r3, [r7, #24]
				bSent++;
    18e0:	6a3b      	ldr	r3, [r7, #32]
    18e2:	3301      	adds	r3, #1
    18e4:	623b      	str	r3, [r7, #32]
		while (bToSend) {
			if (!(UARTx->LSR & UART_LSR_THRE)){
				break;
			}
			fifo_cnt = UART_TX_FIFO_SIZE;
			while (fifo_cnt && bToSend) {
    18e6:	69bb      	ldr	r3, [r7, #24]
    18e8:	2b00      	cmp	r3, #0
    18ea:	d002      	beq.n	18f2 <UART_Send+0xd2>
    18ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    18ee:	2b00      	cmp	r3, #0
    18f0:	d1e8      	bne.n	18c4 <UART_Send+0xa4>
		}
	}
	// None blocking mode
	else {
		bSent = 0;
		while (bToSend) {
    18f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    18f4:	2b00      	cmp	r3, #0
    18f6:	d1db      	bne.n	18b0 <UART_Send+0x90>
    18f8:	e002      	b.n	1900 <UART_Send+0xe0>
			while (!(UARTx->LSR & UART_LSR_THRE)) {
				if (timeOut == 0) break;
				timeOut--;
			}
			// Time out!
			if(timeOut == 0) break;
    18fa:	bf00      	nop
    18fc:	e000      	b.n	1900 <UART_Send+0xe0>
	// None blocking mode
	else {
		bSent = 0;
		while (bToSend) {
			if (!(UARTx->LSR & UART_LSR_THRE)){
				break;
    18fe:	bf00      	nop
				fifo_cnt--;
				bSent++;
			}
		}
	}
	return bSent;
    1900:	6a3b      	ldr	r3, [r7, #32]
}
    1902:	4618      	mov	r0, r3
    1904:	3728      	adds	r7, #40	; 0x28
    1906:	46bd      	mov	sp, r7
    1908:	bd80      	pop	{r7, pc}
    190a:	bf00      	nop

0000190c <UART_Receive>:
 * Note: when using UART in BLOCKING mode, a time-out condition is used
 * via defined symbol UART_BLOCKING_TIMEOUT.
 **********************************************************************/
uint32_t UART_Receive(LPC_UART_TypeDef *UARTx, uint8_t *rxbuf, \
		uint32_t buflen, TRANSFER_BLOCK_Type flag)
{
    190c:	b590      	push	{r4, r7, lr}
    190e:	b089      	sub	sp, #36	; 0x24
    1910:	af00      	add	r7, sp, #0
    1912:	60f8      	str	r0, [r7, #12]
    1914:	60b9      	str	r1, [r7, #8]
    1916:	607a      	str	r2, [r7, #4]
    1918:	70fb      	strb	r3, [r7, #3]
	uint32_t bToRecv, bRecv, timeOut;
	uint8_t *pChar = rxbuf;
    191a:	68bb      	ldr	r3, [r7, #8]
    191c:	613b      	str	r3, [r7, #16]

	bToRecv = buflen;
    191e:	687b      	ldr	r3, [r7, #4]
    1920:	61fb      	str	r3, [r7, #28]

	// Blocking mode
	if (flag == BLOCKING) {
    1922:	78fb      	ldrb	r3, [r7, #3]
    1924:	2b01      	cmp	r3, #1
    1926:	d12a      	bne.n	197e <UART_Receive+0x72>
		bRecv = 0;
    1928:	2300      	movs	r3, #0
    192a:	61bb      	str	r3, [r7, #24]
		while (bToRecv){
    192c:	e023      	b.n	1976 <UART_Receive+0x6a>
			timeOut = UART_BLOCKING_TIMEOUT;
    192e:	f04f 33ff 	mov.w	r3, #4294967295
    1932:	617b      	str	r3, [r7, #20]
			while (!(UARTx->LSR & UART_LSR_RDR)){
    1934:	e005      	b.n	1942 <UART_Receive+0x36>
				if (timeOut == 0) break;
    1936:	697b      	ldr	r3, [r7, #20]
    1938:	2b00      	cmp	r3, #0
    193a:	d00a      	beq.n	1952 <UART_Receive+0x46>
				timeOut--;
    193c:	697b      	ldr	r3, [r7, #20]
    193e:	3b01      	subs	r3, #1
    1940:	617b      	str	r3, [r7, #20]
	// Blocking mode
	if (flag == BLOCKING) {
		bRecv = 0;
		while (bToRecv){
			timeOut = UART_BLOCKING_TIMEOUT;
			while (!(UARTx->LSR & UART_LSR_RDR)){
    1942:	68fb      	ldr	r3, [r7, #12]
    1944:	7d1b      	ldrb	r3, [r3, #20]
    1946:	b2db      	uxtb	r3, r3
    1948:	f003 0301 	and.w	r3, r3, #1
    194c:	2b00      	cmp	r3, #0
    194e:	d0f2      	beq.n	1936 <UART_Receive+0x2a>
    1950:	e000      	b.n	1954 <UART_Receive+0x48>
				if (timeOut == 0) break;
    1952:	bf00      	nop
				timeOut--;
			}
			// Time out!
			if(timeOut == 0) break;
    1954:	697b      	ldr	r3, [r7, #20]
    1956:	2b00      	cmp	r3, #0
    1958:	d02d      	beq.n	19b6 <UART_Receive+0xaa>
			// Get data from the buffer
			(*pChar++) = UART_ReceiveData(UARTx);
    195a:	693c      	ldr	r4, [r7, #16]
    195c:	1c63      	adds	r3, r4, #1
    195e:	613b      	str	r3, [r7, #16]
    1960:	68f8      	ldr	r0, [r7, #12]
    1962:	f7ff fe1f 	bl	15a4 <UART_ReceiveData>
    1966:	4603      	mov	r3, r0
    1968:	7023      	strb	r3, [r4, #0]
			bToRecv--;
    196a:	69fb      	ldr	r3, [r7, #28]
    196c:	3b01      	subs	r3, #1
    196e:	61fb      	str	r3, [r7, #28]
			bRecv++;
    1970:	69bb      	ldr	r3, [r7, #24]
    1972:	3301      	adds	r3, #1
    1974:	61bb      	str	r3, [r7, #24]
	bToRecv = buflen;

	// Blocking mode
	if (flag == BLOCKING) {
		bRecv = 0;
		while (bToRecv){
    1976:	69fb      	ldr	r3, [r7, #28]
    1978:	2b00      	cmp	r3, #0
    197a:	d1d8      	bne.n	192e <UART_Receive+0x22>
    197c:	e01e      	b.n	19bc <UART_Receive+0xb0>
			bRecv++;
		}
	}
	// None blocking mode
	else {
		bRecv = 0;
    197e:	2300      	movs	r3, #0
    1980:	61bb      	str	r3, [r7, #24]
		while (bToRecv) {
    1982:	e014      	b.n	19ae <UART_Receive+0xa2>
			if (!(UARTx->LSR & UART_LSR_RDR)) {
    1984:	68fb      	ldr	r3, [r7, #12]
    1986:	7d1b      	ldrb	r3, [r3, #20]
    1988:	b2db      	uxtb	r3, r3
    198a:	f003 0301 	and.w	r3, r3, #1
    198e:	2b00      	cmp	r3, #0
    1990:	d013      	beq.n	19ba <UART_Receive+0xae>
				break;
			} else {
				(*pChar++) = UART_ReceiveData(UARTx);
    1992:	693c      	ldr	r4, [r7, #16]
    1994:	1c63      	adds	r3, r4, #1
    1996:	613b      	str	r3, [r7, #16]
    1998:	68f8      	ldr	r0, [r7, #12]
    199a:	f7ff fe03 	bl	15a4 <UART_ReceiveData>
    199e:	4603      	mov	r3, r0
    19a0:	7023      	strb	r3, [r4, #0]
				bRecv++;
    19a2:	69bb      	ldr	r3, [r7, #24]
    19a4:	3301      	adds	r3, #1
    19a6:	61bb      	str	r3, [r7, #24]
				bToRecv--;
    19a8:	69fb      	ldr	r3, [r7, #28]
    19aa:	3b01      	subs	r3, #1
    19ac:	61fb      	str	r3, [r7, #28]
		}
	}
	// None blocking mode
	else {
		bRecv = 0;
		while (bToRecv) {
    19ae:	69fb      	ldr	r3, [r7, #28]
    19b0:	2b00      	cmp	r3, #0
    19b2:	d1e7      	bne.n	1984 <UART_Receive+0x78>
    19b4:	e002      	b.n	19bc <UART_Receive+0xb0>
			while (!(UARTx->LSR & UART_LSR_RDR)){
				if (timeOut == 0) break;
				timeOut--;
			}
			// Time out!
			if(timeOut == 0) break;
    19b6:	bf00      	nop
    19b8:	e000      	b.n	19bc <UART_Receive+0xb0>
	// None blocking mode
	else {
		bRecv = 0;
		while (bToRecv) {
			if (!(UARTx->LSR & UART_LSR_RDR)) {
				break;
    19ba:	bf00      	nop
				bRecv++;
				bToRecv--;
			}
		}
	}
	return bRecv;
    19bc:	69bb      	ldr	r3, [r7, #24]
}
    19be:	4618      	mov	r0, r3
    19c0:	3724      	adds	r7, #36	; 0x24
    19c2:	46bd      	mov	sp, r7
    19c4:	bd90      	pop	{r4, r7, pc}
    19c6:	bf00      	nop

000019c8 <UART_SetupCbs>:
 * 						4 - Modem Status Call-back (UART1 only)
 * @param[in]	pfnCbs	Pointer to Call-back function
 * @return		None
 **********************************************************************/
void UART_SetupCbs(LPC_UART_TypeDef *UARTx, uint8_t CbType, void *pfnCbs)
{
    19c8:	b580      	push	{r7, lr}
    19ca:	b086      	sub	sp, #24
    19cc:	af00      	add	r7, sp, #0
    19ce:	60f8      	str	r0, [r7, #12]
    19d0:	460b      	mov	r3, r1
    19d2:	607a      	str	r2, [r7, #4]
    19d4:	72fb      	strb	r3, [r7, #11]
	uint8_t pUartNum;

	pUartNum = getUartNum(UARTx);
    19d6:	68f8      	ldr	r0, [r7, #12]
    19d8:	f7ff fab8 	bl	f4c <getUartNum>
    19dc:	4603      	mov	r3, r0
    19de:	75fb      	strb	r3, [r7, #23]
	switch(CbType){
    19e0:	7afb      	ldrb	r3, [r7, #11]
    19e2:	2b04      	cmp	r3, #4
    19e4:	d82f      	bhi.n	1a46 <UART_SetupCbs+0x7e>
    19e6:	a201      	add	r2, pc, #4	; (adr r2, 19ec <UART_SetupCbs+0x24>)
    19e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    19ec:	00001a01 	.word	0x00001a01
    19f0:	00001a11 	.word	0x00001a11
    19f4:	00001a1f 	.word	0x00001a1f
    19f8:	00001a2f 	.word	0x00001a2f
    19fc:	00001a3f 	.word	0x00001a3f
	case 0:
		uartCbsDat[pUartNum].pfnRxCbs = (fnTxCbs_Type *)pfnCbs;
    1a00:	7dfb      	ldrb	r3, [r7, #23]
    1a02:	687a      	ldr	r2, [r7, #4]
    1a04:	4912      	ldr	r1, [pc, #72]	; (1a50 <UART_SetupCbs+0x88>)
    1a06:	011b      	lsls	r3, r3, #4
    1a08:	440b      	add	r3, r1
    1a0a:	3304      	adds	r3, #4
    1a0c:	601a      	str	r2, [r3, #0]
		break;
    1a0e:	e01b      	b.n	1a48 <UART_SetupCbs+0x80>
	case 1:
		uartCbsDat[pUartNum].pfnTxCbs = (fnRxCbs_Type *)pfnCbs;
    1a10:	7dfb      	ldrb	r3, [r7, #23]
    1a12:	687a      	ldr	r2, [r7, #4]
    1a14:	490e      	ldr	r1, [pc, #56]	; (1a50 <UART_SetupCbs+0x88>)
    1a16:	011b      	lsls	r3, r3, #4
    1a18:	440b      	add	r3, r1
    1a1a:	601a      	str	r2, [r3, #0]
		break;
    1a1c:	e014      	b.n	1a48 <UART_SetupCbs+0x80>
	case 2:
		uartCbsDat[pUartNum].pfnABCbs = (fnABCbs_Type *)pfnCbs;
    1a1e:	7dfb      	ldrb	r3, [r7, #23]
    1a20:	687a      	ldr	r2, [r7, #4]
    1a22:	490b      	ldr	r1, [pc, #44]	; (1a50 <UART_SetupCbs+0x88>)
    1a24:	011b      	lsls	r3, r3, #4
    1a26:	440b      	add	r3, r1
    1a28:	3308      	adds	r3, #8
    1a2a:	601a      	str	r2, [r3, #0]
		break;
    1a2c:	e00c      	b.n	1a48 <UART_SetupCbs+0x80>
	case 3:
		uartCbsDat[pUartNum].pfnErrCbs = (fnErrCbs_Type *)pfnCbs;
    1a2e:	7dfb      	ldrb	r3, [r7, #23]
    1a30:	687a      	ldr	r2, [r7, #4]
    1a32:	4907      	ldr	r1, [pc, #28]	; (1a50 <UART_SetupCbs+0x88>)
    1a34:	011b      	lsls	r3, r3, #4
    1a36:	440b      	add	r3, r1
    1a38:	330c      	adds	r3, #12
    1a3a:	601a      	str	r2, [r3, #0]
		break;
    1a3c:	e004      	b.n	1a48 <UART_SetupCbs+0x80>
	case 4:
		pfnModemCbs = (fnModemCbs_Type *)pfnCbs;
    1a3e:	687b      	ldr	r3, [r7, #4]
    1a40:	4a04      	ldr	r2, [pc, #16]	; (1a54 <UART_SetupCbs+0x8c>)
    1a42:	6013      	str	r3, [r2, #0]
		break;
    1a44:	e000      	b.n	1a48 <UART_SetupCbs+0x80>
	default:
		break;
    1a46:	bf00      	nop
	}
}
    1a48:	bf00      	nop
    1a4a:	3718      	adds	r7, #24
    1a4c:	46bd      	mov	sp, r7
    1a4e:	bd80      	pop	{r7, pc}
    1a50:	10000264 	.word	0x10000264
    1a54:	100002a4 	.word	0x100002a4

00001a58 <UART0_StdIntHandler>:
 * @brief		Standard UART0 interrupt handler
 * @param[in]	None
 * @return		None
 **********************************************************************/
void UART0_StdIntHandler(void)
{
    1a58:	b580      	push	{r7, lr}
    1a5a:	af00      	add	r7, sp, #0
	UART_GenIntHandler(LPC_UART0);
    1a5c:	4802      	ldr	r0, [pc, #8]	; (1a68 <UART0_StdIntHandler+0x10>)
    1a5e:	f7ff fb9d 	bl	119c <UART_GenIntHandler>
}
    1a62:	bf00      	nop
    1a64:	bd80      	pop	{r7, pc}
    1a66:	bf00      	nop
    1a68:	4000c000 	.word	0x4000c000

00001a6c <EMAC_Init>:
#define LAN8720_ID          0x0007C0F0  /* PHY Identifier                    */

/*--------------------------- EMAC_Init ---------------------------------*/

BOOL_32 EMAC_Init(void)
{
    1a6c:	b580      	push	{r7, lr}
    1a6e:	b088      	sub	sp, #32
    1a70:	af00      	add	r7, sp, #0
  unsigned phy_id;
  unsigned phy_linkstatus_reg;
  unsigned phy_linkstatus_mask;

   /* Power Up the EMAC controller. */
   LPC_SC->PCONP |= 0x40000000;
    1a72:	4ab1      	ldr	r2, [pc, #708]	; (1d38 <__cs3_region_zero_size_ram+0x2a0>)
    1a74:	4bb0      	ldr	r3, [pc, #704]	; (1d38 <__cs3_region_zero_size_ram+0x2a0>)
    1a76:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    1a7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    1a7e:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4

   /* Enable P1 Ethernet Pins. */
   LPC_PINCON->PINSEL2 = 0x50150105;
    1a82:	4bae      	ldr	r3, [pc, #696]	; (1d3c <__cs3_region_zero_size_ram+0x2a4>)
    1a84:	4aae      	ldr	r2, [pc, #696]	; (1d40 <__cs3_region_zero_size_ram+0x2a8>)
    1a86:	609a      	str	r2, [r3, #8]
   LPC_PINCON->PINSEL3 = (LPC_PINCON->PINSEL3 & ~0x0000000F) | 0x00000005;
    1a88:	4aac      	ldr	r2, [pc, #688]	; (1d3c <__cs3_region_zero_size_ram+0x2a4>)
    1a8a:	4bac      	ldr	r3, [pc, #688]	; (1d3c <__cs3_region_zero_size_ram+0x2a4>)
    1a8c:	68db      	ldr	r3, [r3, #12]
    1a8e:	f023 030f 	bic.w	r3, r3, #15
    1a92:	f043 0305 	orr.w	r3, r3, #5
    1a96:	60d3      	str	r3, [r2, #12]

  /* Reset all EMAC internal modules. */
   LPC_EMAC->MAC1 = MAC1_RES_TX | MAC1_RES_MCS_TX | MAC1_RES_RX | MAC1_RES_MCS_RX |
    1a98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1a9c:	f44f 424f 	mov.w	r2, #52992	; 0xcf00
    1aa0:	601a      	str	r2, [r3, #0]
             MAC1_SIM_RES | MAC1_SOFT_RES;
   LPC_EMAC->Command = CR_REG_RES | CR_TX_RES | CR_RX_RES | CR_PASS_RUNT_FRM;
    1aa2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1aa6:	2278      	movs	r2, #120	; 0x78
    1aa8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

  /* A short delay after reset. */
  for (tout = 100; tout; tout--);
    1aac:	2364      	movs	r3, #100	; 0x64
    1aae:	607b      	str	r3, [r7, #4]
    1ab0:	e002      	b.n	1ab8 <__cs3_region_zero_size_ram+0x20>
    1ab2:	687b      	ldr	r3, [r7, #4]
    1ab4:	3b01      	subs	r3, #1
    1ab6:	607b      	str	r3, [r7, #4]
    1ab8:	687b      	ldr	r3, [r7, #4]
    1aba:	2b00      	cmp	r3, #0
    1abc:	d1f9      	bne.n	1ab2 <__cs3_region_zero_size_ram+0x1a>

  /* Initialize MAC control registers. */
  LPC_EMAC->MAC1 = MAC1_PASS_ALL;
    1abe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1ac2:	2202      	movs	r2, #2
    1ac4:	601a      	str	r2, [r3, #0]
  LPC_EMAC->MAC2 = MAC2_CRC_EN | MAC2_PAD_EN;
    1ac6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1aca:	2230      	movs	r2, #48	; 0x30
    1acc:	605a      	str	r2, [r3, #4]
  LPC_EMAC->MAXF = ETH_MAX_FLEN;
    1ace:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1ad2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    1ad6:	615a      	str	r2, [r3, #20]
  LPC_EMAC->CLRT = CLRT_DEF;
    1ad8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1adc:	f243 720f 	movw	r2, #14095	; 0x370f
    1ae0:	611a      	str	r2, [r3, #16]
  LPC_EMAC->IPGR = IPGR_DEF;
    1ae2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1ae6:	2212      	movs	r2, #18
    1ae8:	60da      	str	r2, [r3, #12]


     /* Enable Reduced MII interface. */
    LPC_EMAC->MCFG = MCFG_CLK_DIV64 | MCFG_RES_MII;
    1aea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1aee:	f248 023c 	movw	r2, #32828	; 0x803c
    1af2:	621a      	str	r2, [r3, #32]
     for (tout = 100; tout; tout--);
    1af4:	2364      	movs	r3, #100	; 0x64
    1af6:	607b      	str	r3, [r7, #4]
    1af8:	e002      	b.n	1b00 <__cs3_region_zero_size_ram+0x68>
    1afa:	687b      	ldr	r3, [r7, #4]
    1afc:	3b01      	subs	r3, #1
    1afe:	607b      	str	r3, [r7, #4]
    1b00:	687b      	ldr	r3, [r7, #4]
    1b02:	2b00      	cmp	r3, #0
    1b04:	d1f9      	bne.n	1afa <__cs3_region_zero_size_ram+0x62>
     LPC_EMAC->MCFG = MCFG_CLK_DIV64;
    1b06:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1b0a:	223c      	movs	r2, #60	; 0x3c
    1b0c:	621a      	str	r2, [r3, #32]

  /* Enable Reduced MII interface. */
   LPC_EMAC->Command = CR_RMII | CR_PASS_RUNT_FRM | CR_PASS_RX_FILT;
    1b0e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1b12:	f44f 7230 	mov.w	r2, #704	; 0x2c0
    1b16:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

  /* Reset Reduced MII Logic. */
   LPC_EMAC->SUPP = SUPP_RES_RMII | SUPP_SPEED;
    1b1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1b1e:	f44f 6210 	mov.w	r2, #2304	; 0x900
    1b22:	619a      	str	r2, [r3, #24]
   for (tout = 100; tout; tout--);
    1b24:	2364      	movs	r3, #100	; 0x64
    1b26:	607b      	str	r3, [r7, #4]
    1b28:	e002      	b.n	1b30 <__cs3_region_zero_size_ram+0x98>
    1b2a:	687b      	ldr	r3, [r7, #4]
    1b2c:	3b01      	subs	r3, #1
    1b2e:	607b      	str	r3, [r7, #4]
    1b30:	687b      	ldr	r3, [r7, #4]
    1b32:	2b00      	cmp	r3, #0
    1b34:	d1f9      	bne.n	1b2a <__cs3_region_zero_size_ram+0x92>
   LPC_EMAC->SUPP = SUPP_SPEED;
    1b36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1b3a:	f44f 7280 	mov.w	r2, #256	; 0x100
    1b3e:	619a      	str	r2, [r3, #24]

  /* Put the PHY in reset mode */
  write_PHY (PHY_REG_BMCR, 0x8000);
    1b40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1b44:	2000      	movs	r0, #0
    1b46:	f000 f901 	bl	1d4c <write_PHY>
	for (tout = 1000; tout; tout--);
    1b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    1b4e:	607b      	str	r3, [r7, #4]
    1b50:	e002      	b.n	1b58 <__cs3_region_zero_size_ram+0xc0>
    1b52:	687b      	ldr	r3, [r7, #4]
    1b54:	3b01      	subs	r3, #1
    1b56:	607b      	str	r3, [r7, #4]
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	2b00      	cmp	r3, #0
    1b5c:	d1f9      	bne.n	1b52 <__cs3_region_zero_size_ram+0xba>

  /* Wait for hardware reset to end. */
  for (tout = 0; tout < 0x100000; tout++) {
    1b5e:	2300      	movs	r3, #0
    1b60:	607b      	str	r3, [r7, #4]
    1b62:	e00c      	b.n	1b7e <__cs3_region_zero_size_ram+0xe6>
  	regv = read_PHY (PHY_REG_BMCR);
    1b64:	2000      	movs	r0, #0
    1b66:	f000 f91b 	bl	1da0 <read_PHY>
    1b6a:	4603      	mov	r3, r0
    1b6c:	61fb      	str	r3, [r7, #28]
#if	defined (KEIL_BOARD_MCB17XX) || defined (CODERED_BOARD_RDB1768)
    if (!(regv & 0x8000)) 
    1b6e:	69fb      	ldr	r3, [r7, #28]
    1b70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    1b74:	2b00      	cmp	r3, #0
    1b76:	d007      	beq.n	1b88 <__cs3_region_zero_size_ram+0xf0>
  /* Put the PHY in reset mode */
  write_PHY (PHY_REG_BMCR, 0x8000);
	for (tout = 1000; tout; tout--);

  /* Wait for hardware reset to end. */
  for (tout = 0; tout < 0x100000; tout++) {
    1b78:	687b      	ldr	r3, [r7, #4]
    1b7a:	3301      	adds	r3, #1
    1b7c:	607b      	str	r3, [r7, #4]
    1b7e:	687b      	ldr	r3, [r7, #4]
    1b80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    1b84:	d3ee      	bcc.n	1b64 <__cs3_region_zero_size_ram+0xcc>
    1b86:	e000      	b.n	1b8a <__cs3_region_zero_size_ram+0xf2>
#else
	#error "No board!"
#endif
	{
      /* Reset complete */
      break;
    1b88:	bf00      	nop
    }
  }
  if (tout >= 0x100000)
    1b8a:	687b      	ldr	r3, [r7, #4]
    1b8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    1b90:	d301      	bcc.n	1b96 <__cs3_region_zero_size_ram+0xfe>
  	return FALSE; /* reset failed */
    1b92:	2300      	movs	r3, #0
    1b94:	e0cb      	b.n	1d2e <__cs3_region_zero_size_ram+0x296>

  /* Check if this is a DP83848C PHY. */
  id1 = read_PHY (PHY_REG_IDR1);
    1b96:	2002      	movs	r0, #2
    1b98:	f000 f902 	bl	1da0 <read_PHY>
    1b9c:	4603      	mov	r3, r0
    1b9e:	613b      	str	r3, [r7, #16]
  id2 = read_PHY (PHY_REG_IDR2);
    1ba0:	2003      	movs	r0, #3
    1ba2:	f000 f8fd 	bl	1da0 <read_PHY>
    1ba6:	4603      	mov	r3, r0
    1ba8:	60fb      	str	r3, [r7, #12]
  phy_id = ((id1 << 16) | (id2 & 0xFFF0));
    1baa:	693b      	ldr	r3, [r7, #16]
    1bac:	041a      	lsls	r2, r3, #16
    1bae:	68f9      	ldr	r1, [r7, #12]
    1bb0:	f64f 73f0 	movw	r3, #65520	; 0xfff0
    1bb4:	400b      	ands	r3, r1
    1bb6:	4313      	orrs	r3, r2
    1bb8:	60bb      	str	r3, [r7, #8]
  
#if	defined (KEIL_BOARD_MCB17XX) || defined (CODERED_BOARD_RDB1768)
	  if ((phy_id != DP83848C_ID) && (phy_id != LAN8720_ID))
    1bba:	68bb      	ldr	r3, [r7, #8]
    1bbc:	4a61      	ldr	r2, [pc, #388]	; (1d44 <__cs3_region_zero_size_ram+0x2ac>)
    1bbe:	4293      	cmp	r3, r2
    1bc0:	d005      	beq.n	1bce <__cs3_region_zero_size_ram+0x136>
    1bc2:	68bb      	ldr	r3, [r7, #8]
    1bc4:	4a60      	ldr	r2, [pc, #384]	; (1d48 <__cs3_region_zero_size_ram+0x2b0>)
    1bc6:	4293      	cmp	r3, r2
    1bc8:	d001      	beq.n	1bce <__cs3_region_zero_size_ram+0x136>
#else
	#error "No board"
#endif		  
  	return FALSE;
    1bca:	2300      	movs	r3, #0
    1bcc:	e0af      	b.n	1d2e <__cs3_region_zero_size_ram+0x296>
#elif defined (_100MBIT_)
      /* Connect at 100MBit */
      write_PHY (PHY_REG_BMCR, PHY_FULLD_100M);
#else
      /* Use autonegotiation about the link speed. */
      write_PHY (PHY_REG_BMCR, PHY_AUTO_NEG);
    1bce:	f44f 5140 	mov.w	r1, #12288	; 0x3000
    1bd2:	2000      	movs	r0, #0
    1bd4:	f000 f8ba 	bl	1d4c <write_PHY>
      /* Wait to complete Auto_Negotiation. */
      for (tout = 0; tout < 0x100000; tout++) {
    1bd8:	2300      	movs	r3, #0
    1bda:	607b      	str	r3, [r7, #4]
    1bdc:	e00c      	b.n	1bf8 <__cs3_region_zero_size_ram+0x160>
         regv = read_PHY (PHY_REG_BMSR);
    1bde:	2001      	movs	r0, #1
    1be0:	f000 f8de 	bl	1da0 <read_PHY>
    1be4:	4603      	mov	r3, r0
    1be6:	61fb      	str	r3, [r7, #28]
         if (regv & 0x0020) {
    1be8:	69fb      	ldr	r3, [r7, #28]
    1bea:	f003 0320 	and.w	r3, r3, #32
    1bee:	2b00      	cmp	r3, #0
    1bf0:	d107      	bne.n	1c02 <__cs3_region_zero_size_ram+0x16a>
      write_PHY (PHY_REG_BMCR, PHY_FULLD_100M);
#else
      /* Use autonegotiation about the link speed. */
      write_PHY (PHY_REG_BMCR, PHY_AUTO_NEG);
      /* Wait to complete Auto_Negotiation. */
      for (tout = 0; tout < 0x100000; tout++) {
    1bf2:	687b      	ldr	r3, [r7, #4]
    1bf4:	3301      	adds	r3, #1
    1bf6:	607b      	str	r3, [r7, #4]
    1bf8:	687b      	ldr	r3, [r7, #4]
    1bfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    1bfe:	d3ee      	bcc.n	1bde <__cs3_region_zero_size_ram+0x146>
    1c00:	e000      	b.n	1c04 <__cs3_region_zero_size_ram+0x16c>
         regv = read_PHY (PHY_REG_BMSR);
         if (regv & 0x0020) {
            /* Autonegotiation Complete. */
            break;
    1c02:	bf00      	nop
         }
      }

	if (tout >= 0x100000)
    1c04:	687b      	ldr	r3, [r7, #4]
    1c06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    1c0a:	d301      	bcc.n	1c10 <__cs3_region_zero_size_ram+0x178>
		return FALSE; // auto_neg failed
    1c0c:	2300      	movs	r3, #0
    1c0e:	e08e      	b.n	1d2e <__cs3_region_zero_size_ram+0x296>
#endif

	  phy_linkstatus_reg = PHY_REG_STS;		// Default to DP83848C
    1c10:	2310      	movs	r3, #16
    1c12:	61bb      	str	r3, [r7, #24]
	  phy_linkstatus_mask = 0x0001;
    1c14:	2301      	movs	r3, #1
    1c16:	617b      	str	r3, [r7, #20]

	  if (phy_id == LAN8720_ID) {
    1c18:	68bb      	ldr	r3, [r7, #8]
    1c1a:	4a4b      	ldr	r2, [pc, #300]	; (1d48 <__cs3_region_zero_size_ram+0x2b0>)
    1c1c:	4293      	cmp	r3, r2
    1c1e:	d103      	bne.n	1c28 <__cs3_region_zero_size_ram+0x190>
		  phy_linkstatus_reg = PHY_REG_BMSR;
    1c20:	2301      	movs	r3, #1
    1c22:	61bb      	str	r3, [r7, #24]
		  phy_linkstatus_mask = 0x0004;
    1c24:	2304      	movs	r3, #4
    1c26:	617b      	str	r3, [r7, #20]
	  }

  /* Check the link status. */
  for (tout = 0; tout < 0x100000; tout++) {
    1c28:	2300      	movs	r3, #0
    1c2a:	607b      	str	r3, [r7, #4]
    1c2c:	e00e      	b.n	1c4c <__cs3_region_zero_size_ram+0x1b4>
#if	defined (KEIL_BOARD_MCB17XX) || defined (CODERED_BOARD_RDB1768)
    regv = read_PHY (phy_linkstatus_reg);
    1c2e:	69bb      	ldr	r3, [r7, #24]
    1c30:	b2db      	uxtb	r3, r3
    1c32:	4618      	mov	r0, r3
    1c34:	f000 f8b4 	bl	1da0 <read_PHY>
    1c38:	4603      	mov	r3, r0
    1c3a:	61fb      	str	r3, [r7, #28]
    if (regv & phy_linkstatus_mask)
    1c3c:	69fa      	ldr	r2, [r7, #28]
    1c3e:	697b      	ldr	r3, [r7, #20]
    1c40:	4013      	ands	r3, r2
    1c42:	2b00      	cmp	r3, #0
    1c44:	d107      	bne.n	1c56 <__cs3_region_zero_size_ram+0x1be>
		  phy_linkstatus_reg = PHY_REG_BMSR;
		  phy_linkstatus_mask = 0x0004;
	  }

  /* Check the link status. */
  for (tout = 0; tout < 0x100000; tout++) {
    1c46:	687b      	ldr	r3, [r7, #4]
    1c48:	3301      	adds	r3, #1
    1c4a:	607b      	str	r3, [r7, #4]
    1c4c:	687b      	ldr	r3, [r7, #4]
    1c4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    1c52:	d3ec      	bcc.n	1c2e <__cs3_region_zero_size_ram+0x196>
    1c54:	e000      	b.n	1c58 <__cs3_region_zero_size_ram+0x1c0>
#else
	#error "No board"
#endif 
	{   	
      /* Link is on. */
      break;
    1c56:	bf00      	nop
    }
  }

  if (tout >= 0x100000)
    1c58:	687b      	ldr	r3, [r7, #4]
    1c5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    1c5e:	d301      	bcc.n	1c64 <__cs3_region_zero_size_ram+0x1cc>
  	return FALSE;
    1c60:	2300      	movs	r3, #0
    1c62:	e064      	b.n	1d2e <__cs3_region_zero_size_ram+0x296>


  /* Configure Full/Half Duplex mode. */
#if	defined (KEIL_BOARD_MCB17XX) || defined (CODERED_BOARD_RDB1768)
  if (regv & 0x0004) 
    1c64:	69fb      	ldr	r3, [r7, #28]
    1c66:	f003 0304 	and.w	r3, r3, #4
    1c6a:	2b00      	cmp	r3, #0
    1c6c:	d016      	beq.n	1c9c <__cs3_region_zero_size_ram+0x204>
#else
	#error "No board"
#endif
	{  	
    /* Full duplex is enabled. */
	  LPC_EMAC->MAC2    |= MAC2_FULL_DUP;
    1c6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    1c72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1c76:	685b      	ldr	r3, [r3, #4]
    1c78:	f043 0301 	orr.w	r3, r3, #1
    1c7c:	6053      	str	r3, [r2, #4]
	  LPC_EMAC->Command |= CR_FULL_DUP;
    1c7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    1c82:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1c86:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    1c8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    1c8e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	  LPC_EMAC->IPGT     = IPGT_FULL_DUP;
    1c92:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1c96:	2215      	movs	r2, #21
    1c98:	609a      	str	r2, [r3, #8]
    1c9a:	e003      	b.n	1ca4 <__cs3_region_zero_size_ram+0x20c>
  }
  else {
    /* Half duplex mode. */
	  LPC_EMAC->IPGT = IPGT_HALF_DUP;
    1c9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1ca0:	2212      	movs	r2, #18
    1ca2:	609a      	str	r2, [r3, #8]
  }

  /* Configure 100MBit/10MBit mode. */
#if	defined (KEIL_BOARD_MCB17XX) || defined (CODERED_BOARD_RDB1768)
  if (regv & 0x0002) {
    1ca4:	69fb      	ldr	r3, [r7, #28]
    1ca6:	f003 0302 	and.w	r3, r3, #2
    1caa:	2b00      	cmp	r3, #0
    1cac:	d004      	beq.n	1cb8 <__cs3_region_zero_size_ram+0x220>
#else
	#error "No baord"
#endif   	  	
    /* 10MBit mode. */
	  LPC_EMAC->SUPP = 0;
    1cae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1cb2:	2200      	movs	r2, #0
    1cb4:	619a      	str	r2, [r3, #24]
    1cb6:	e004      	b.n	1cc2 <__cs3_region_zero_size_ram+0x22a>
  }
  else {
    /* 100MBit mode. */
	  LPC_EMAC->SUPP = SUPP_SPEED;
    1cb8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1cbc:	f44f 7280 	mov.w	r2, #256	; 0x100
    1cc0:	619a      	str	r2, [r3, #24]

  /* Set the Ethernet MAC Address registers */
//  MAC_SA0 = (MYMAC_6 << 8) | MYMAC_5;
//  MAC_SA1 = (MYMAC_4 << 8) | MYMAC_3;
//  MAC_SA2 = (MYMAC_2 << 8) | MYMAC_1;
  LPC_EMAC->SA0 = (MYMAC_2<<8) | MYMAC_1;
    1cc2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1cc6:	f243 021e 	movw	r2, #12318	; 0x301e
    1cca:	641a      	str	r2, [r3, #64]	; 0x40
  LPC_EMAC->SA1 = (MYMAC_4<<8) | MYMAC_3;
    1ccc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1cd0:	f24a 226c 	movw	r2, #41580	; 0xa26c
    1cd4:	645a      	str	r2, [r3, #68]	; 0x44
  LPC_EMAC->SA2 = (MYMAC_6<<8) | MYMAC_5;
    1cd6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1cda:	f645 6245 	movw	r2, #24133	; 0x5e45
    1cde:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize Tx and Rx DMA Descriptors */
  rx_descr_init ();
    1ce0:	f000 f8f8 	bl	1ed4 <rx_descr_init>
  tx_descr_init ();
    1ce4:	f000 f94e 	bl	1f84 <tx_descr_init>

  /* Receive Broadcast and Perfect Match Packets */
  LPC_EMAC->RxFilterCtrl = RFC_BCAST_EN | RFC_PERFECT_EN;
    1ce8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1cec:	2222      	movs	r2, #34	; 0x22
    1cee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  /* Enable EMAC interrupts. */
  LPC_EMAC->IntEnable = INT_RX_DONE | INT_TX_DONE;
    1cf2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1cf6:	2288      	movs	r2, #136	; 0x88
    1cf8:	f8c3 2fe4 	str.w	r2, [r3, #4068]	; 0xfe4

  /* Reset all interrupts */
  LPC_EMAC->IntClear  = 0xFFFF;
    1cfc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1d00:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1d04:	f8c3 2fe8 	str.w	r2, [r3, #4072]	; 0xfe8

  /* Enable receive and transmit mode of MAC Ethernet core */
  LPC_EMAC->Command  |= (CR_RX_EN | CR_TX_EN);
    1d08:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    1d0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1d10:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    1d14:	f043 0303 	orr.w	r3, r3, #3
    1d18:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
  LPC_EMAC->MAC1     |= MAC1_REC_EN;
    1d1c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    1d20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1d24:	681b      	ldr	r3, [r3, #0]
    1d26:	f043 0301 	orr.w	r3, r3, #1
    1d2a:	6013      	str	r3, [r2, #0]

   /* Configure VIC for EMAC interrupt. */
   //VICVectAddrxx = (UNS_32)xx;
   
  return TRUE;
    1d2c:	2301      	movs	r3, #1
}
    1d2e:	4618      	mov	r0, r3
    1d30:	3720      	adds	r7, #32
    1d32:	46bd      	mov	sp, r7
    1d34:	bd80      	pop	{r7, pc}
    1d36:	bf00      	nop
    1d38:	400fc000 	.word	0x400fc000
    1d3c:	4002c000 	.word	0x4002c000
    1d40:	50150105 	.word	0x50150105
    1d44:	20005c90 	.word	0x20005c90
    1d48:	0007c0f0 	.word	0x0007c0f0

00001d4c <write_PHY>:

/*--------------------------- write_PHY -------------------------------------*/

static void write_PHY (UNS_32 PhyReg, UNS_32 Value)
{
    1d4c:	b480      	push	{r7}
    1d4e:	b085      	sub	sp, #20
    1d50:	af00      	add	r7, sp, #0
    1d52:	6078      	str	r0, [r7, #4]
    1d54:	6039      	str	r1, [r7, #0]
  unsigned int tout;

  LPC_EMAC->MADR = DP83848C_DEF_ADR | PhyReg;
    1d56:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    1d5a:	687b      	ldr	r3, [r7, #4]
    1d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1d60:	6293      	str	r3, [r2, #40]	; 0x28
  LPC_EMAC->MWTD = Value;
    1d62:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    1d66:	683b      	ldr	r3, [r7, #0]
    1d68:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Wait utill operation completed */
  tout = 0;
    1d6a:	2300      	movs	r3, #0
    1d6c:	60fb      	str	r3, [r7, #12]
  for (tout = 0; tout < MII_WR_TOUT; tout++) {
    1d6e:	2300      	movs	r3, #0
    1d70:	60fb      	str	r3, [r7, #12]
    1d72:	e009      	b.n	1d88 <write_PHY+0x3c>
    if ((LPC_EMAC->MIND & MIND_BUSY) == 0) {
    1d74:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1d7a:	f003 0301 	and.w	r3, r3, #1
    1d7e:	2b00      	cmp	r3, #0
    1d80:	d007      	beq.n	1d92 <write_PHY+0x46>
  LPC_EMAC->MADR = DP83848C_DEF_ADR | PhyReg;
  LPC_EMAC->MWTD = Value;

  /* Wait utill operation completed */
  tout = 0;
  for (tout = 0; tout < MII_WR_TOUT; tout++) {
    1d82:	68fb      	ldr	r3, [r7, #12]
    1d84:	3301      	adds	r3, #1
    1d86:	60fb      	str	r3, [r7, #12]
    1d88:	68fb      	ldr	r3, [r7, #12]
    1d8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
    1d8e:	d3f1      	bcc.n	1d74 <write_PHY+0x28>
    if ((LPC_EMAC->MIND & MIND_BUSY) == 0) {
      break;
    }
  }   
}
    1d90:	e000      	b.n	1d94 <write_PHY+0x48>

  /* Wait utill operation completed */
  tout = 0;
  for (tout = 0; tout < MII_WR_TOUT; tout++) {
    if ((LPC_EMAC->MIND & MIND_BUSY) == 0) {
      break;
    1d92:	bf00      	nop
    }
  }   
}
    1d94:	bf00      	nop
    1d96:	3714      	adds	r7, #20
    1d98:	46bd      	mov	sp, r7
    1d9a:	bc80      	pop	{r7}
    1d9c:	4770      	bx	lr
    1d9e:	bf00      	nop

00001da0 <read_PHY>:

/*--------------------------- read_PHY -------------------------------------*/

static UNS_16 read_PHY (UNS_8 PhyReg)
{
    1da0:	b480      	push	{r7}
    1da2:	b085      	sub	sp, #20
    1da4:	af00      	add	r7, sp, #0
    1da6:	4603      	mov	r3, r0
    1da8:	71fb      	strb	r3, [r7, #7]
  UNS_32 tout;

  LPC_EMAC->MADR = DP83848C_DEF_ADR | PhyReg;
    1daa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    1dae:	79fb      	ldrb	r3, [r7, #7]
    1db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1db4:	6293      	str	r3, [r2, #40]	; 0x28
  LPC_EMAC->MCMD = MCMD_READ;
    1db6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1dba:	2201      	movs	r2, #1
    1dbc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Wait until operation completed */
  tout = 0;
    1dbe:	2300      	movs	r3, #0
    1dc0:	60fb      	str	r3, [r7, #12]
  for (tout = 0; tout < MII_RD_TOUT; tout++) {
    1dc2:	2300      	movs	r3, #0
    1dc4:	60fb      	str	r3, [r7, #12]
    1dc6:	e009      	b.n	1ddc <read_PHY+0x3c>
    if ((LPC_EMAC->MIND & MIND_BUSY) == 0) {
    1dc8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1dce:	f003 0301 	and.w	r3, r3, #1
    1dd2:	2b00      	cmp	r3, #0
    1dd4:	d007      	beq.n	1de6 <read_PHY+0x46>
  LPC_EMAC->MADR = DP83848C_DEF_ADR | PhyReg;
  LPC_EMAC->MCMD = MCMD_READ;

  /* Wait until operation completed */
  tout = 0;
  for (tout = 0; tout < MII_RD_TOUT; tout++) {
    1dd6:	68fb      	ldr	r3, [r7, #12]
    1dd8:	3301      	adds	r3, #1
    1dda:	60fb      	str	r3, [r7, #12]
    1ddc:	68fb      	ldr	r3, [r7, #12]
    1dde:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
    1de2:	d3f1      	bcc.n	1dc8 <read_PHY+0x28>
    1de4:	e000      	b.n	1de8 <read_PHY+0x48>
    if ((LPC_EMAC->MIND & MIND_BUSY) == 0) {
      break;
    1de6:	bf00      	nop
    }
  }
  LPC_EMAC->MCMD = 0;
    1de8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1dec:	2200      	movs	r2, #0
    1dee:	625a      	str	r2, [r3, #36]	; 0x24
  return (LPC_EMAC->MRDD);
    1df0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1df6:	b29b      	uxth	r3, r3
}
    1df8:	4618      	mov	r0, r3
    1dfa:	3714      	adds	r7, #20
    1dfc:	46bd      	mov	sp, r7
    1dfe:	bc80      	pop	{r7}
    1e00:	4770      	bx	lr
    1e02:	bf00      	nop

00001e04 <EMAC_SendPacket>:
}

/*--------------------------- EMAC_SendPacket ---------------------------------*/

BOOL_32 EMAC_SendPacket(void *pPacket, UNS_32 size)
{
    1e04:	b580      	push	{r7, lr}
    1e06:	b084      	sub	sp, #16
    1e08:	af00      	add	r7, sp, #0
    1e0a:	6078      	str	r0, [r7, #4]
    1e0c:	6039      	str	r1, [r7, #0]
	UNS_32 	Index;
	UNS_32	IndexNext = LPC_EMAC->TxProduceIndex + 1;
    1e0e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1e12:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    1e16:	3301      	adds	r3, #1
    1e18:	60fb      	str	r3, [r7, #12]
	
  if(size == 0)
    1e1a:	683b      	ldr	r3, [r7, #0]
    1e1c:	2b00      	cmp	r3, #0
    1e1e:	d101      	bne.n	1e24 <EMAC_SendPacket+0x20>
  {
    return(TRUE);
    1e20:	2301      	movs	r3, #1
    1e22:	e04f      	b.n	1ec4 <EMAC_SendPacket+0xc0>
  }
  if(IndexNext > LPC_EMAC->TxDescriptorNumber)
    1e24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1e28:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    1e2c:	68fb      	ldr	r3, [r7, #12]
    1e2e:	429a      	cmp	r2, r3
    1e30:	d201      	bcs.n	1e36 <EMAC_SendPacket+0x32>
  {
    IndexNext = 0;
    1e32:	2300      	movs	r3, #0
    1e34:	60fb      	str	r3, [r7, #12]
  }
 
  if(IndexNext == LPC_EMAC->TxConsumeIndex)
    1e36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1e3a:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
    1e3e:	68fb      	ldr	r3, [r7, #12]
    1e40:	429a      	cmp	r2, r3
    1e42:	d101      	bne.n	1e48 <EMAC_SendPacket+0x44>
  {
    return(FALSE);
    1e44:	2300      	movs	r3, #0
    1e46:	e03d      	b.n	1ec4 <EMAC_SendPacket+0xc0>
  }
  Index = LPC_EMAC->TxProduceIndex;
    1e48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1e4c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    1e50:	60bb      	str	r3, [r7, #8]
  if (size > ETH_FRAG_SIZE)
    1e52:	683b      	ldr	r3, [r7, #0]
    1e54:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    1e58:	d902      	bls.n	1e60 <EMAC_SendPacket+0x5c>
  	size = ETH_FRAG_SIZE;
    1e5a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    1e5e:	603b      	str	r3, [r7, #0]

  memcpy((unsigned int *)TX_BUF(Index),pPacket,size);  
    1e60:	68ba      	ldr	r2, [r7, #8]
    1e62:	4613      	mov	r3, r2
    1e64:	005b      	lsls	r3, r3, #1
    1e66:	4413      	add	r3, r2
    1e68:	025b      	lsls	r3, r3, #9
    1e6a:	461a      	mov	r2, r3
    1e6c:	4b17      	ldr	r3, [pc, #92]	; (1ecc <EMAC_SendPacket+0xc8>)
    1e6e:	4413      	add	r3, r2
    1e70:	683a      	ldr	r2, [r7, #0]
    1e72:	6879      	ldr	r1, [r7, #4]
    1e74:	4618      	mov	r0, r3
    1e76:	f007 fc09 	bl	968c <memcpy>
  TX_DESC_CTRL(Index) &= ~0x7ff;
    1e7a:	68bb      	ldr	r3, [r7, #8]
    1e7c:	00da      	lsls	r2, r3, #3
    1e7e:	4b14      	ldr	r3, [pc, #80]	; (1ed0 <EMAC_SendPacket+0xcc>)
    1e80:	4413      	add	r3, r2
    1e82:	4619      	mov	r1, r3
    1e84:	68bb      	ldr	r3, [r7, #8]
    1e86:	00da      	lsls	r2, r3, #3
    1e88:	4b11      	ldr	r3, [pc, #68]	; (1ed0 <EMAC_SendPacket+0xcc>)
    1e8a:	4413      	add	r3, r2
    1e8c:	681b      	ldr	r3, [r3, #0]
    1e8e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
    1e92:	f023 0307 	bic.w	r3, r3, #7
    1e96:	600b      	str	r3, [r1, #0]
  TX_DESC_CTRL(Index) |= (size - 1) & 0x7ff; 
    1e98:	68bb      	ldr	r3, [r7, #8]
    1e9a:	00da      	lsls	r2, r3, #3
    1e9c:	4b0c      	ldr	r3, [pc, #48]	; (1ed0 <EMAC_SendPacket+0xcc>)
    1e9e:	4413      	add	r3, r2
    1ea0:	4619      	mov	r1, r3
    1ea2:	68bb      	ldr	r3, [r7, #8]
    1ea4:	00da      	lsls	r2, r3, #3
    1ea6:	4b0a      	ldr	r3, [pc, #40]	; (1ed0 <EMAC_SendPacket+0xcc>)
    1ea8:	4413      	add	r3, r2
    1eaa:	681a      	ldr	r2, [r3, #0]
    1eac:	683b      	ldr	r3, [r7, #0]
    1eae:	3b01      	subs	r3, #1
    1eb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
    1eb4:	4313      	orrs	r3, r2
    1eb6:	600b      	str	r3, [r1, #0]

  LPC_EMAC->TxProduceIndex = IndexNext;
    1eb8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    1ebc:	68fb      	ldr	r3, [r7, #12]
    1ebe:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

  return(TRUE);
    1ec2:	2301      	movs	r3, #1
}
    1ec4:	4618      	mov	r0, r3
    1ec6:	3710      	adds	r7, #16
    1ec8:	46bd      	mov	sp, r7
    1eca:	bd80      	pop	{r7, pc}
    1ecc:	20081864 	.word	0x20081864
    1ed0:	20080044 	.word	0x20080044

00001ed4 <rx_descr_init>:

/*--------------------------- rx_descr_init ---------------------------------*/

static void rx_descr_init (void)
{
    1ed4:	b480      	push	{r7}
    1ed6:	b083      	sub	sp, #12
    1ed8:	af00      	add	r7, sp, #0
  UNS_32 i;

  for (i = 0; i < NUM_RX_FRAG; i++) {
    1eda:	2300      	movs	r3, #0
    1edc:	607b      	str	r3, [r7, #4]
    1ede:	e027      	b.n	1f30 <rx_descr_init+0x5c>
    RX_DESC_PACKET(i)  = RX_BUF(i);
    1ee0:	687b      	ldr	r3, [r7, #4]
    1ee2:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
    1ee6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    1eea:	00db      	lsls	r3, r3, #3
    1eec:	4619      	mov	r1, r3
    1eee:	687a      	ldr	r2, [r7, #4]
    1ef0:	4613      	mov	r3, r2
    1ef2:	005b      	lsls	r3, r3, #1
    1ef4:	4413      	add	r3, r2
    1ef6:	025b      	lsls	r3, r3, #9
    1ef8:	461a      	mov	r2, r3
    1efa:	4b1b      	ldr	r3, [pc, #108]	; (1f68 <rx_descr_init+0x94>)
    1efc:	4413      	add	r3, r2
    1efe:	600b      	str	r3, [r1, #0]
    RX_DESC_CTRL(i)    = RCTRL_INT | (ETH_FRAG_SIZE-1);
    1f00:	687b      	ldr	r3, [r7, #4]
    1f02:	00da      	lsls	r2, r3, #3
    1f04:	4b19      	ldr	r3, [pc, #100]	; (1f6c <rx_descr_init+0x98>)
    1f06:	4413      	add	r3, r2
    1f08:	461a      	mov	r2, r3
    1f0a:	4b19      	ldr	r3, [pc, #100]	; (1f70 <rx_descr_init+0x9c>)
    1f0c:	6013      	str	r3, [r2, #0]
    RX_STAT_INFO(i)    = 0;
    1f0e:	687a      	ldr	r2, [r7, #4]
    1f10:	4b18      	ldr	r3, [pc, #96]	; (1f74 <rx_descr_init+0xa0>)
    1f12:	4413      	add	r3, r2
    1f14:	00db      	lsls	r3, r3, #3
    1f16:	461a      	mov	r2, r3
    1f18:	2300      	movs	r3, #0
    1f1a:	6013      	str	r3, [r2, #0]
    RX_STAT_HASHCRC(i) = 0;
    1f1c:	687b      	ldr	r3, [r7, #4]
    1f1e:	00da      	lsls	r2, r3, #3
    1f20:	4b15      	ldr	r3, [pc, #84]	; (1f78 <rx_descr_init+0xa4>)
    1f22:	4413      	add	r3, r2
    1f24:	461a      	mov	r2, r3
    1f26:	2300      	movs	r3, #0
    1f28:	6013      	str	r3, [r2, #0]

static void rx_descr_init (void)
{
  UNS_32 i;

  for (i = 0; i < NUM_RX_FRAG; i++) {
    1f2a:	687b      	ldr	r3, [r7, #4]
    1f2c:	3301      	adds	r3, #1
    1f2e:	607b      	str	r3, [r7, #4]
    1f30:	687b      	ldr	r3, [r7, #4]
    1f32:	2b03      	cmp	r3, #3
    1f34:	d9d4      	bls.n	1ee0 <rx_descr_init+0xc>
    RX_STAT_INFO(i)    = 0;
    RX_STAT_HASHCRC(i) = 0;
  }

  /* Set EMAC Receive Descriptor Registers. */
  LPC_EMAC->RxDescriptor    = RX_DESC_BASE;
    1f36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1f3a:	4a10      	ldr	r2, [pc, #64]	; (1f7c <rx_descr_init+0xa8>)
    1f3c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  LPC_EMAC->RxStatus        = RX_STAT_BASE;
    1f40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1f44:	4a0e      	ldr	r2, [pc, #56]	; (1f80 <rx_descr_init+0xac>)
    1f46:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  LPC_EMAC->RxDescriptorNumber = NUM_RX_FRAG-1;
    1f4a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1f4e:	2203      	movs	r2, #3
    1f50:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

  /* Rx Descriptors Point to 0 */
  LPC_EMAC->RxConsumeIndex  = 0;
    1f54:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1f58:	2200      	movs	r2, #0
    1f5a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
    1f5e:	bf00      	nop
    1f60:	370c      	adds	r7, #12
    1f62:	46bd      	mov	sp, r7
    1f64:	bc80      	pop	{r7}
    1f66:	4770      	bx	lr
    1f68:	20080064 	.word	0x20080064
    1f6c:	20080004 	.word	0x20080004
    1f70:	800005ff 	.word	0x800005ff
    1f74:	04010004 	.word	0x04010004
    1f78:	20080024 	.word	0x20080024
    1f7c:	20080000 	.word	0x20080000
    1f80:	20080020 	.word	0x20080020

00001f84 <tx_descr_init>:


/*--------------------------- tx_descr_init ---------------------------------*/

static void tx_descr_init (void) {
    1f84:	b480      	push	{r7}
    1f86:	b083      	sub	sp, #12
    1f88:	af00      	add	r7, sp, #0
  UNS_32 i;

  for (i = 0; i < NUM_TX_FRAG; i++) {
    1f8a:	2300      	movs	r3, #0
    1f8c:	607b      	str	r3, [r7, #4]
    1f8e:	e01e      	b.n	1fce <tx_descr_init+0x4a>
    TX_DESC_PACKET(i) = TX_BUF(i);
    1f90:	687a      	ldr	r2, [r7, #4]
    1f92:	4b1d      	ldr	r3, [pc, #116]	; (2008 <tx_descr_init+0x84>)
    1f94:	4413      	add	r3, r2
    1f96:	00db      	lsls	r3, r3, #3
    1f98:	4619      	mov	r1, r3
    1f9a:	687a      	ldr	r2, [r7, #4]
    1f9c:	4613      	mov	r3, r2
    1f9e:	005b      	lsls	r3, r3, #1
    1fa0:	4413      	add	r3, r2
    1fa2:	025b      	lsls	r3, r3, #9
    1fa4:	461a      	mov	r2, r3
    1fa6:	4b19      	ldr	r3, [pc, #100]	; (200c <tx_descr_init+0x88>)
    1fa8:	4413      	add	r3, r2
    1faa:	600b      	str	r3, [r1, #0]
    TX_DESC_CTRL(i)   = (1<<31) | (1<<30) | (1<<29) | (1<<28) | (1<<26) | (ETH_FRAG_SIZE-1);
    1fac:	687b      	ldr	r3, [r7, #4]
    1fae:	00da      	lsls	r2, r3, #3
    1fb0:	4b17      	ldr	r3, [pc, #92]	; (2010 <tx_descr_init+0x8c>)
    1fb2:	4413      	add	r3, r2
    1fb4:	461a      	mov	r2, r3
    1fb6:	4b17      	ldr	r3, [pc, #92]	; (2014 <tx_descr_init+0x90>)
    1fb8:	6013      	str	r3, [r2, #0]
    TX_STAT_INFO(i)   = 0;
    1fba:	687a      	ldr	r2, [r7, #4]
    1fbc:	4b16      	ldr	r3, [pc, #88]	; (2018 <tx_descr_init+0x94>)
    1fbe:	4413      	add	r3, r2
    1fc0:	009b      	lsls	r3, r3, #2
    1fc2:	461a      	mov	r2, r3
    1fc4:	2300      	movs	r3, #0
    1fc6:	6013      	str	r3, [r2, #0]
/*--------------------------- tx_descr_init ---------------------------------*/

static void tx_descr_init (void) {
  UNS_32 i;

  for (i = 0; i < NUM_TX_FRAG; i++) {
    1fc8:	687b      	ldr	r3, [r7, #4]
    1fca:	3301      	adds	r3, #1
    1fcc:	607b      	str	r3, [r7, #4]
    1fce:	687b      	ldr	r3, [r7, #4]
    1fd0:	2b02      	cmp	r3, #2
    1fd2:	d9dd      	bls.n	1f90 <tx_descr_init+0xc>
    TX_DESC_CTRL(i)   = (1<<31) | (1<<30) | (1<<29) | (1<<28) | (1<<26) | (ETH_FRAG_SIZE-1);
    TX_STAT_INFO(i)   = 0;
  }

  /* Set EMAC Transmit Descriptor Registers. */
  LPC_EMAC->TxDescriptor    = TX_DESC_BASE;
    1fd4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1fd8:	4a10      	ldr	r2, [pc, #64]	; (201c <tx_descr_init+0x98>)
    1fda:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
  LPC_EMAC->TxStatus        = TX_STAT_BASE;
    1fde:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1fe2:	4a0f      	ldr	r2, [pc, #60]	; (2020 <tx_descr_init+0x9c>)
    1fe4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  LPC_EMAC->TxDescriptorNumber = NUM_TX_FRAG-1;
    1fe8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1fec:	2202      	movs	r2, #2
    1fee:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124

  /* Tx Descriptors Point to 0 */
  LPC_EMAC->TxProduceIndex  = 0;
    1ff2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    1ff6:	2200      	movs	r2, #0
    1ff8:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
    1ffc:	bf00      	nop
    1ffe:	370c      	adds	r7, #12
    2000:	46bd      	mov	sp, r7
    2002:	bc80      	pop	{r7}
    2004:	4770      	bx	lr
    2006:	bf00      	nop
    2008:	04010008 	.word	0x04010008
    200c:	20081864 	.word	0x20081864
    2010:	20080044 	.word	0x20080044
    2014:	f40005ff 	.word	0xf40005ff
    2018:	08020016 	.word	0x08020016
    201c:	20080040 	.word	0x20080040
    2020:	20080058 	.word	0x20080058

00002024 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
    2024:	b480      	push	{r7}
    2026:	b085      	sub	sp, #20
    2028:	af00      	add	r7, sp, #0
    202a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);

  nmem = (struct mem *)(void *)&ram[mem->next];
    202c:	4b29      	ldr	r3, [pc, #164]	; (20d4 <plug_holes+0xb0>)
    202e:	681b      	ldr	r3, [r3, #0]
    2030:	687a      	ldr	r2, [r7, #4]
    2032:	8812      	ldrh	r2, [r2, #0]
    2034:	4413      	add	r3, r2
    2036:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
    2038:	687a      	ldr	r2, [r7, #4]
    203a:	68fb      	ldr	r3, [r7, #12]
    203c:	429a      	cmp	r2, r3
    203e:	d01f      	beq.n	2080 <plug_holes+0x5c>
    2040:	68fb      	ldr	r3, [r7, #12]
    2042:	791b      	ldrb	r3, [r3, #4]
    2044:	2b00      	cmp	r3, #0
    2046:	d11b      	bne.n	2080 <plug_holes+0x5c>
    2048:	4b23      	ldr	r3, [pc, #140]	; (20d8 <plug_holes+0xb4>)
    204a:	681b      	ldr	r3, [r3, #0]
    204c:	68fa      	ldr	r2, [r7, #12]
    204e:	429a      	cmp	r2, r3
    2050:	d016      	beq.n	2080 <plug_holes+0x5c>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
    2052:	4b22      	ldr	r3, [pc, #136]	; (20dc <plug_holes+0xb8>)
    2054:	681a      	ldr	r2, [r3, #0]
    2056:	68fb      	ldr	r3, [r7, #12]
    2058:	429a      	cmp	r2, r3
    205a:	d102      	bne.n	2062 <plug_holes+0x3e>
      lfree = mem;
    205c:	4a1f      	ldr	r2, [pc, #124]	; (20dc <plug_holes+0xb8>)
    205e:	687b      	ldr	r3, [r7, #4]
    2060:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
    2062:	68fb      	ldr	r3, [r7, #12]
    2064:	881a      	ldrh	r2, [r3, #0]
    2066:	687b      	ldr	r3, [r7, #4]
    2068:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
    206a:	4b1a      	ldr	r3, [pc, #104]	; (20d4 <plug_holes+0xb0>)
    206c:	681b      	ldr	r3, [r3, #0]
    206e:	68fa      	ldr	r2, [r7, #12]
    2070:	8812      	ldrh	r2, [r2, #0]
    2072:	4413      	add	r3, r2
    2074:	687a      	ldr	r2, [r7, #4]
    2076:	4917      	ldr	r1, [pc, #92]	; (20d4 <plug_holes+0xb0>)
    2078:	6809      	ldr	r1, [r1, #0]
    207a:	1a52      	subs	r2, r2, r1
    207c:	b292      	uxth	r2, r2
    207e:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
    2080:	4b14      	ldr	r3, [pc, #80]	; (20d4 <plug_holes+0xb0>)
    2082:	681b      	ldr	r3, [r3, #0]
    2084:	687a      	ldr	r2, [r7, #4]
    2086:	8852      	ldrh	r2, [r2, #2]
    2088:	4413      	add	r3, r2
    208a:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
    208c:	68ba      	ldr	r2, [r7, #8]
    208e:	687b      	ldr	r3, [r7, #4]
    2090:	429a      	cmp	r2, r3
    2092:	d01a      	beq.n	20ca <plug_holes+0xa6>
    2094:	68bb      	ldr	r3, [r7, #8]
    2096:	791b      	ldrb	r3, [r3, #4]
    2098:	2b00      	cmp	r3, #0
    209a:	d116      	bne.n	20ca <plug_holes+0xa6>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
    209c:	4b0f      	ldr	r3, [pc, #60]	; (20dc <plug_holes+0xb8>)
    209e:	681a      	ldr	r2, [r3, #0]
    20a0:	687b      	ldr	r3, [r7, #4]
    20a2:	429a      	cmp	r2, r3
    20a4:	d102      	bne.n	20ac <plug_holes+0x88>
      lfree = pmem;
    20a6:	4a0d      	ldr	r2, [pc, #52]	; (20dc <plug_holes+0xb8>)
    20a8:	68bb      	ldr	r3, [r7, #8]
    20aa:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
    20ac:	687b      	ldr	r3, [r7, #4]
    20ae:	881a      	ldrh	r2, [r3, #0]
    20b0:	68bb      	ldr	r3, [r7, #8]
    20b2:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
    20b4:	4b07      	ldr	r3, [pc, #28]	; (20d4 <plug_holes+0xb0>)
    20b6:	681b      	ldr	r3, [r3, #0]
    20b8:	687a      	ldr	r2, [r7, #4]
    20ba:	8812      	ldrh	r2, [r2, #0]
    20bc:	4413      	add	r3, r2
    20be:	68ba      	ldr	r2, [r7, #8]
    20c0:	4904      	ldr	r1, [pc, #16]	; (20d4 <plug_holes+0xb0>)
    20c2:	6809      	ldr	r1, [r1, #0]
    20c4:	1a52      	subs	r2, r2, r1
    20c6:	b292      	uxth	r2, r2
    20c8:	805a      	strh	r2, [r3, #2]
  }
}
    20ca:	bf00      	nop
    20cc:	3714      	adds	r7, #20
    20ce:	46bd      	mov	sp, r7
    20d0:	bc80      	pop	{r7}
    20d2:	4770      	bx	lr
    20d4:	100002a8 	.word	0x100002a8
    20d8:	100002ac 	.word	0x100002ac
    20dc:	100002b0 	.word	0x100002b0

000020e0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
    20e0:	b480      	push	{r7}
    20e2:	b083      	sub	sp, #12
    20e4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
    20e6:	4b1b      	ldr	r3, [pc, #108]	; (2154 <mem_init+0x74>)
    20e8:	3303      	adds	r3, #3
    20ea:	f023 0303 	bic.w	r3, r3, #3
    20ee:	461a      	mov	r2, r3
    20f0:	4b19      	ldr	r3, [pc, #100]	; (2158 <mem_init+0x78>)
    20f2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
    20f4:	4b18      	ldr	r3, [pc, #96]	; (2158 <mem_init+0x78>)
    20f6:	681b      	ldr	r3, [r3, #0]
    20f8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
    20fa:	687b      	ldr	r3, [r7, #4]
    20fc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
    2100:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
    2102:	687b      	ldr	r3, [r7, #4]
    2104:	2200      	movs	r2, #0
    2106:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
    2108:	687b      	ldr	r3, [r7, #4]
    210a:	2200      	movs	r2, #0
    210c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
    210e:	4b12      	ldr	r3, [pc, #72]	; (2158 <mem_init+0x78>)
    2110:	681b      	ldr	r3, [r3, #0]
    2112:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
    2116:	4a11      	ldr	r2, [pc, #68]	; (215c <mem_init+0x7c>)
    2118:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
    211a:	4b10      	ldr	r3, [pc, #64]	; (215c <mem_init+0x7c>)
    211c:	681b      	ldr	r3, [r3, #0]
    211e:	2201      	movs	r2, #1
    2120:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
    2122:	4b0e      	ldr	r3, [pc, #56]	; (215c <mem_init+0x7c>)
    2124:	681b      	ldr	r3, [r3, #0]
    2126:	f44f 62c8 	mov.w	r2, #1600	; 0x640
    212a:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
    212c:	4b0b      	ldr	r3, [pc, #44]	; (215c <mem_init+0x7c>)
    212e:	681b      	ldr	r3, [r3, #0]
    2130:	f44f 62c8 	mov.w	r2, #1600	; 0x640
    2134:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
    2136:	4b08      	ldr	r3, [pc, #32]	; (2158 <mem_init+0x78>)
    2138:	681b      	ldr	r3, [r3, #0]
    213a:	4a09      	ldr	r2, [pc, #36]	; (2160 <mem_init+0x80>)
    213c:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
    213e:	4b09      	ldr	r3, [pc, #36]	; (2164 <mem_init+0x84>)
    2140:	f44f 62c8 	mov.w	r2, #1600	; 0x640
    2144:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

  if(sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
    2148:	bf00      	nop
    214a:	370c      	adds	r7, #12
    214c:	46bd      	mov	sp, r7
    214e:	bc80      	pop	{r7}
    2150:	4770      	bx	lr
    2152:	bf00      	nop
    2154:	10001304 	.word	0x10001304
    2158:	100002a8 	.word	0x100002a8
    215c:	100002ac 	.word	0x100002ac
    2160:	100002b0 	.word	0x100002b0
    2164:	10001978 	.word	0x10001978

00002168 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
    2168:	b580      	push	{r7, lr}
    216a:	b084      	sub	sp, #16
    216c:	af00      	add	r7, sp, #0
    216e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
    2170:	687b      	ldr	r3, [r7, #4]
    2172:	2b00      	cmp	r3, #0
    2174:	d039      	beq.n	21ea <mem_free+0x82>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
    2176:	4b1f      	ldr	r3, [pc, #124]	; (21f4 <mem_free+0x8c>)
    2178:	681b      	ldr	r3, [r3, #0]
    217a:	687a      	ldr	r2, [r7, #4]
    217c:	429a      	cmp	r2, r3
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
    217e:	4b1d      	ldr	r3, [pc, #116]	; (21f4 <mem_free+0x8c>)
    2180:	681b      	ldr	r3, [r3, #0]
    2182:	687a      	ldr	r2, [r7, #4]
    2184:	429a      	cmp	r2, r3
    2186:	d304      	bcc.n	2192 <mem_free+0x2a>
    2188:	4b1b      	ldr	r3, [pc, #108]	; (21f8 <mem_free+0x90>)
    218a:	681b      	ldr	r3, [r3, #0]
    218c:	687a      	ldr	r2, [r7, #4]
    218e:	429a      	cmp	r2, r3
    2190:	d308      	bcc.n	21a4 <mem_free+0x3c>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    2192:	4b1a      	ldr	r3, [pc, #104]	; (21fc <mem_free+0x94>)
    2194:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
    2198:	3301      	adds	r3, #1
    219a:	b29a      	uxth	r2, r3
    219c:	4b17      	ldr	r3, [pc, #92]	; (21fc <mem_free+0x94>)
    219e:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    SYS_ARCH_UNPROTECT(lev);
    return;
    21a2:	e023      	b.n	21ec <mem_free+0x84>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
    21a4:	687b      	ldr	r3, [r7, #4]
    21a6:	3b08      	subs	r3, #8
    21a8:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
  /* ... and is now unused. */
  mem->used = 0;
    21aa:	68fb      	ldr	r3, [r7, #12]
    21ac:	2200      	movs	r2, #0
    21ae:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
    21b0:	4b13      	ldr	r3, [pc, #76]	; (2200 <mem_free+0x98>)
    21b2:	681b      	ldr	r3, [r3, #0]
    21b4:	68fa      	ldr	r2, [r7, #12]
    21b6:	429a      	cmp	r2, r3
    21b8:	d202      	bcs.n	21c0 <mem_free+0x58>
    /* the newly freed struct is now the lowest */
    lfree = mem;
    21ba:	4a11      	ldr	r2, [pc, #68]	; (2200 <mem_free+0x98>)
    21bc:	68fb      	ldr	r3, [r7, #12]
    21be:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
    21c0:	4b0e      	ldr	r3, [pc, #56]	; (21fc <mem_free+0x94>)
    21c2:	f8b3 20aa 	ldrh.w	r2, [r3, #170]	; 0xaa
    21c6:	68fb      	ldr	r3, [r7, #12]
    21c8:	490a      	ldr	r1, [pc, #40]	; (21f4 <mem_free+0x8c>)
    21ca:	6809      	ldr	r1, [r1, #0]
    21cc:	1a5b      	subs	r3, r3, r1
    21ce:	b299      	uxth	r1, r3
    21d0:	68fb      	ldr	r3, [r7, #12]
    21d2:	881b      	ldrh	r3, [r3, #0]
    21d4:	1acb      	subs	r3, r1, r3
    21d6:	b29b      	uxth	r3, r3
    21d8:	4413      	add	r3, r2
    21da:	b29a      	uxth	r2, r3
    21dc:	4b07      	ldr	r3, [pc, #28]	; (21fc <mem_free+0x94>)
    21de:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa

  /* finally, see if prev or next are free also */
  plug_holes(mem);
    21e2:	68f8      	ldr	r0, [r7, #12]
    21e4:	f7ff ff1e 	bl	2024 <plug_holes>
    21e8:	e000      	b.n	21ec <mem_free+0x84>
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
    21ea:	bf00      	nop
  plug_holes(mem);
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
    21ec:	3710      	adds	r7, #16
    21ee:	46bd      	mov	sp, r7
    21f0:	bd80      	pop	{r7, pc}
    21f2:	bf00      	nop
    21f4:	100002a8 	.word	0x100002a8
    21f8:	100002ac 	.word	0x100002ac
    21fc:	10001978 	.word	0x10001978
    2200:	100002b0 	.word	0x100002b0

00002204 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
    2204:	b480      	push	{r7}
    2206:	b087      	sub	sp, #28
    2208:	af00      	add	r7, sp, #0
    220a:	6078      	str	r0, [r7, #4]
    220c:	460b      	mov	r3, r1
    220e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
    2210:	887b      	ldrh	r3, [r7, #2]
    2212:	3303      	adds	r3, #3
    2214:	b29b      	uxth	r3, r3
    2216:	f023 0303 	bic.w	r3, r3, #3
    221a:	807b      	strh	r3, [r7, #2]

  if(newsize < MIN_SIZE_ALIGNED) {
    221c:	887b      	ldrh	r3, [r7, #2]
    221e:	2b0b      	cmp	r3, #11
    2220:	d801      	bhi.n	2226 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
    2222:	230c      	movs	r3, #12
    2224:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
    2226:	887b      	ldrh	r3, [r7, #2]
    2228:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
    222c:	d901      	bls.n	2232 <mem_trim+0x2e>
    return NULL;
    222e:	2300      	movs	r3, #0
    2230:	e0b9      	b.n	23a6 <mem_trim+0x1a2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
    2232:	4b5f      	ldr	r3, [pc, #380]	; (23b0 <mem_trim+0x1ac>)
    2234:	681b      	ldr	r3, [r3, #0]
    2236:	687a      	ldr	r2, [r7, #4]
    2238:	429a      	cmp	r2, r3
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
    223a:	4b5d      	ldr	r3, [pc, #372]	; (23b0 <mem_trim+0x1ac>)
    223c:	681b      	ldr	r3, [r3, #0]
    223e:	687a      	ldr	r2, [r7, #4]
    2240:	429a      	cmp	r2, r3
    2242:	d304      	bcc.n	224e <mem_trim+0x4a>
    2244:	4b5b      	ldr	r3, [pc, #364]	; (23b4 <mem_trim+0x1b0>)
    2246:	681b      	ldr	r3, [r3, #0]
    2248:	687a      	ldr	r2, [r7, #4]
    224a:	429a      	cmp	r2, r3
    224c:	d309      	bcc.n	2262 <mem_trim+0x5e>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    224e:	4b5a      	ldr	r3, [pc, #360]	; (23b8 <mem_trim+0x1b4>)
    2250:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
    2254:	3301      	adds	r3, #1
    2256:	b29a      	uxth	r2, r3
    2258:	4b57      	ldr	r3, [pc, #348]	; (23b8 <mem_trim+0x1b4>)
    225a:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
    225e:	687b      	ldr	r3, [r7, #4]
    2260:	e0a1      	b.n	23a6 <mem_trim+0x1a2>
  }
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
    2262:	687b      	ldr	r3, [r7, #4]
    2264:	3b08      	subs	r3, #8
    2266:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
    2268:	697b      	ldr	r3, [r7, #20]
    226a:	4a51      	ldr	r2, [pc, #324]	; (23b0 <mem_trim+0x1ac>)
    226c:	6812      	ldr	r2, [r2, #0]
    226e:	1a9b      	subs	r3, r3, r2
    2270:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
    2272:	697b      	ldr	r3, [r7, #20]
    2274:	881a      	ldrh	r2, [r3, #0]
    2276:	8a7b      	ldrh	r3, [r7, #18]
    2278:	1ad3      	subs	r3, r2, r3
    227a:	b29b      	uxth	r3, r3
    227c:	3b08      	subs	r3, #8
    227e:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
  if (newsize > size) {
    2280:	887a      	ldrh	r2, [r7, #2]
    2282:	8a3b      	ldrh	r3, [r7, #16]
    2284:	429a      	cmp	r2, r3
    2286:	d901      	bls.n	228c <mem_trim+0x88>
    /* not supported */
    return NULL;
    2288:	2300      	movs	r3, #0
    228a:	e08c      	b.n	23a6 <mem_trim+0x1a2>
  }
  if (newsize == size) {
    228c:	887a      	ldrh	r2, [r7, #2]
    228e:	8a3b      	ldrh	r3, [r7, #16]
    2290:	429a      	cmp	r2, r3
    2292:	d101      	bne.n	2298 <mem_trim+0x94>
    /* No change in size, simply return */
    return rmem;
    2294:	687b      	ldr	r3, [r7, #4]
    2296:	e086      	b.n	23a6 <mem_trim+0x1a2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
    2298:	4b45      	ldr	r3, [pc, #276]	; (23b0 <mem_trim+0x1ac>)
    229a:	681b      	ldr	r3, [r3, #0]
    229c:	697a      	ldr	r2, [r7, #20]
    229e:	8812      	ldrh	r2, [r2, #0]
    22a0:	4413      	add	r3, r2
    22a2:	60fb      	str	r3, [r7, #12]
  if(mem2->used == 0) {
    22a4:	68fb      	ldr	r3, [r7, #12]
    22a6:	791b      	ldrb	r3, [r3, #4]
    22a8:	2b00      	cmp	r3, #0
    22aa:	d13d      	bne.n	2328 <mem_trim+0x124>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
    22ac:	68fb      	ldr	r3, [r7, #12]
    22ae:	881b      	ldrh	r3, [r3, #0]
    22b0:	817b      	strh	r3, [r7, #10]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
    22b2:	8a7a      	ldrh	r2, [r7, #18]
    22b4:	887b      	ldrh	r3, [r7, #2]
    22b6:	4413      	add	r3, r2
    22b8:	b29b      	uxth	r3, r3
    22ba:	3308      	adds	r3, #8
    22bc:	813b      	strh	r3, [r7, #8]
    if (lfree == mem2) {
    22be:	4b3f      	ldr	r3, [pc, #252]	; (23bc <mem_trim+0x1b8>)
    22c0:	681a      	ldr	r2, [r3, #0]
    22c2:	68fb      	ldr	r3, [r7, #12]
    22c4:	429a      	cmp	r2, r3
    22c6:	d105      	bne.n	22d4 <mem_trim+0xd0>
      lfree = (struct mem *)(void *)&ram[ptr2];
    22c8:	4b39      	ldr	r3, [pc, #228]	; (23b0 <mem_trim+0x1ac>)
    22ca:	681a      	ldr	r2, [r3, #0]
    22cc:	893b      	ldrh	r3, [r7, #8]
    22ce:	4413      	add	r3, r2
    22d0:	4a3a      	ldr	r2, [pc, #232]	; (23bc <mem_trim+0x1b8>)
    22d2:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
    22d4:	4b36      	ldr	r3, [pc, #216]	; (23b0 <mem_trim+0x1ac>)
    22d6:	681a      	ldr	r2, [r3, #0]
    22d8:	893b      	ldrh	r3, [r7, #8]
    22da:	4413      	add	r3, r2
    22dc:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
    22de:	68fb      	ldr	r3, [r7, #12]
    22e0:	2200      	movs	r2, #0
    22e2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
    22e4:	68fb      	ldr	r3, [r7, #12]
    22e6:	897a      	ldrh	r2, [r7, #10]
    22e8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
    22ea:	68fb      	ldr	r3, [r7, #12]
    22ec:	8a7a      	ldrh	r2, [r7, #18]
    22ee:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
    22f0:	697b      	ldr	r3, [r7, #20]
    22f2:	893a      	ldrh	r2, [r7, #8]
    22f4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
    22f6:	68fb      	ldr	r3, [r7, #12]
    22f8:	881b      	ldrh	r3, [r3, #0]
    22fa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
    22fe:	d006      	beq.n	230e <mem_trim+0x10a>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
    2300:	4b2b      	ldr	r3, [pc, #172]	; (23b0 <mem_trim+0x1ac>)
    2302:	681b      	ldr	r3, [r3, #0]
    2304:	68fa      	ldr	r2, [r7, #12]
    2306:	8812      	ldrh	r2, [r2, #0]
    2308:	4413      	add	r3, r2
    230a:	893a      	ldrh	r2, [r7, #8]
    230c:	805a      	strh	r2, [r3, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    230e:	4b2a      	ldr	r3, [pc, #168]	; (23b8 <mem_trim+0x1b4>)
    2310:	f8b3 20aa 	ldrh.w	r2, [r3, #170]	; 0xaa
    2314:	8879      	ldrh	r1, [r7, #2]
    2316:	8a3b      	ldrh	r3, [r7, #16]
    2318:	1acb      	subs	r3, r1, r3
    231a:	b29b      	uxth	r3, r3
    231c:	4413      	add	r3, r2
    231e:	b29a      	uxth	r2, r3
    2320:	4b25      	ldr	r3, [pc, #148]	; (23b8 <mem_trim+0x1b4>)
    2322:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
    2326:	e03d      	b.n	23a4 <mem_trim+0x1a0>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
    2328:	887b      	ldrh	r3, [r7, #2]
    232a:	f103 0214 	add.w	r2, r3, #20
    232e:	8a3b      	ldrh	r3, [r7, #16]
    2330:	429a      	cmp	r2, r3
    2332:	d837      	bhi.n	23a4 <mem_trim+0x1a0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
    2334:	8a7a      	ldrh	r2, [r7, #18]
    2336:	887b      	ldrh	r3, [r7, #2]
    2338:	4413      	add	r3, r2
    233a:	b29b      	uxth	r3, r3
    233c:	3308      	adds	r3, #8
    233e:	813b      	strh	r3, [r7, #8]
    mem2 = (struct mem *)(void *)&ram[ptr2];
    2340:	4b1b      	ldr	r3, [pc, #108]	; (23b0 <mem_trim+0x1ac>)
    2342:	681a      	ldr	r2, [r3, #0]
    2344:	893b      	ldrh	r3, [r7, #8]
    2346:	4413      	add	r3, r2
    2348:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
    234a:	4b1c      	ldr	r3, [pc, #112]	; (23bc <mem_trim+0x1b8>)
    234c:	681b      	ldr	r3, [r3, #0]
    234e:	68fa      	ldr	r2, [r7, #12]
    2350:	429a      	cmp	r2, r3
    2352:	d202      	bcs.n	235a <mem_trim+0x156>
      lfree = mem2;
    2354:	4a19      	ldr	r2, [pc, #100]	; (23bc <mem_trim+0x1b8>)
    2356:	68fb      	ldr	r3, [r7, #12]
    2358:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
    235a:	68fb      	ldr	r3, [r7, #12]
    235c:	2200      	movs	r2, #0
    235e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
    2360:	697b      	ldr	r3, [r7, #20]
    2362:	881a      	ldrh	r2, [r3, #0]
    2364:	68fb      	ldr	r3, [r7, #12]
    2366:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
    2368:	68fb      	ldr	r3, [r7, #12]
    236a:	8a7a      	ldrh	r2, [r7, #18]
    236c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
    236e:	697b      	ldr	r3, [r7, #20]
    2370:	893a      	ldrh	r2, [r7, #8]
    2372:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
    2374:	68fb      	ldr	r3, [r7, #12]
    2376:	881b      	ldrh	r3, [r3, #0]
    2378:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
    237c:	d006      	beq.n	238c <mem_trim+0x188>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
    237e:	4b0c      	ldr	r3, [pc, #48]	; (23b0 <mem_trim+0x1ac>)
    2380:	681b      	ldr	r3, [r3, #0]
    2382:	68fa      	ldr	r2, [r7, #12]
    2384:	8812      	ldrh	r2, [r2, #0]
    2386:	4413      	add	r3, r2
    2388:	893a      	ldrh	r2, [r7, #8]
    238a:	805a      	strh	r2, [r3, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    238c:	4b0a      	ldr	r3, [pc, #40]	; (23b8 <mem_trim+0x1b4>)
    238e:	f8b3 20aa 	ldrh.w	r2, [r3, #170]	; 0xaa
    2392:	8879      	ldrh	r1, [r7, #2]
    2394:	8a3b      	ldrh	r3, [r7, #16]
    2396:	1acb      	subs	r3, r1, r3
    2398:	b29b      	uxth	r3, r3
    239a:	4413      	add	r3, r2
    239c:	b29a      	uxth	r2, r3
    239e:	4b06      	ldr	r3, [pc, #24]	; (23b8 <mem_trim+0x1b4>)
    23a0:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
    23a4:	687b      	ldr	r3, [r7, #4]
}
    23a6:	4618      	mov	r0, r3
    23a8:	371c      	adds	r7, #28
    23aa:	46bd      	mov	sp, r7
    23ac:	bc80      	pop	{r7}
    23ae:	4770      	bx	lr
    23b0:	100002a8 	.word	0x100002a8
    23b4:	100002ac 	.word	0x100002ac
    23b8:	10001978 	.word	0x10001978
    23bc:	100002b0 	.word	0x100002b0

000023c0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
    23c0:	b480      	push	{r7}
    23c2:	b087      	sub	sp, #28
    23c4:	af00      	add	r7, sp, #0
    23c6:	4603      	mov	r3, r0
    23c8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
    23ca:	88fb      	ldrh	r3, [r7, #6]
    23cc:	2b00      	cmp	r3, #0
    23ce:	d101      	bne.n	23d4 <mem_malloc+0x14>
    return NULL;
    23d0:	2300      	movs	r3, #0
    23d2:	e0d2      	b.n	257a <mem_malloc+0x1ba>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
    23d4:	88fb      	ldrh	r3, [r7, #6]
    23d6:	3303      	adds	r3, #3
    23d8:	b29b      	uxth	r3, r3
    23da:	f023 0303 	bic.w	r3, r3, #3
    23de:	80fb      	strh	r3, [r7, #6]

  if(size < MIN_SIZE_ALIGNED) {
    23e0:	88fb      	ldrh	r3, [r7, #6]
    23e2:	2b0b      	cmp	r3, #11
    23e4:	d801      	bhi.n	23ea <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
    23e6:	230c      	movs	r3, #12
    23e8:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
    23ea:	88fb      	ldrh	r3, [r7, #6]
    23ec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
    23f0:	d901      	bls.n	23f6 <mem_malloc+0x36>
    return NULL;
    23f2:	2300      	movs	r3, #0
    23f4:	e0c1      	b.n	257a <mem_malloc+0x1ba>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
    23f6:	4b63      	ldr	r3, [pc, #396]	; (2584 <mem_malloc+0x1c4>)
    23f8:	681b      	ldr	r3, [r3, #0]
    23fa:	461a      	mov	r2, r3
    23fc:	4b62      	ldr	r3, [pc, #392]	; (2588 <mem_malloc+0x1c8>)
    23fe:	681b      	ldr	r3, [r3, #0]
    2400:	1ad3      	subs	r3, r2, r3
    2402:	82fb      	strh	r3, [r7, #22]
    2404:	e0a9      	b.n	255a <mem_malloc+0x19a>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
    2406:	4b60      	ldr	r3, [pc, #384]	; (2588 <mem_malloc+0x1c8>)
    2408:	681a      	ldr	r2, [r3, #0]
    240a:	8afb      	ldrh	r3, [r7, #22]
    240c:	4413      	add	r3, r2
    240e:	613b      	str	r3, [r7, #16]
        local_mem_free_count = mem_free_count;
      }
      mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
    2410:	693b      	ldr	r3, [r7, #16]
    2412:	791b      	ldrb	r3, [r3, #4]
    2414:	2b00      	cmp	r3, #0
    2416:	f040 809a 	bne.w	254e <mem_malloc+0x18e>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
    241a:	693b      	ldr	r3, [r7, #16]
    241c:	881b      	ldrh	r3, [r3, #0]
    241e:	461a      	mov	r2, r3
    2420:	8afb      	ldrh	r3, [r7, #22]
    2422:	1ad3      	subs	r3, r2, r3
    2424:	f1a3 0208 	sub.w	r2, r3, #8
    2428:	88fb      	ldrh	r3, [r7, #6]
        local_mem_free_count = mem_free_count;
      }
      mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
    242a:	429a      	cmp	r2, r3
    242c:	f0c0 808f 	bcc.w	254e <mem_malloc+0x18e>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
    2430:	693b      	ldr	r3, [r7, #16]
    2432:	881b      	ldrh	r3, [r3, #0]
    2434:	461a      	mov	r2, r3
    2436:	8afb      	ldrh	r3, [r7, #22]
    2438:	1ad3      	subs	r3, r2, r3
    243a:	f1a3 0208 	sub.w	r2, r3, #8
    243e:	88fb      	ldrh	r3, [r7, #6]
    2440:	3314      	adds	r3, #20
    2442:	429a      	cmp	r2, r3
    2444:	d340      	bcc.n	24c8 <mem_malloc+0x108>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
    2446:	8afa      	ldrh	r2, [r7, #22]
    2448:	88fb      	ldrh	r3, [r7, #6]
    244a:	4413      	add	r3, r2
    244c:	b29b      	uxth	r3, r3
    244e:	3308      	adds	r3, #8
    2450:	81fb      	strh	r3, [r7, #14]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
    2452:	4b4d      	ldr	r3, [pc, #308]	; (2588 <mem_malloc+0x1c8>)
    2454:	681a      	ldr	r2, [r3, #0]
    2456:	89fb      	ldrh	r3, [r7, #14]
    2458:	4413      	add	r3, r2
    245a:	60bb      	str	r3, [r7, #8]
          mem2->used = 0;
    245c:	68bb      	ldr	r3, [r7, #8]
    245e:	2200      	movs	r2, #0
    2460:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
    2462:	693b      	ldr	r3, [r7, #16]
    2464:	881a      	ldrh	r2, [r3, #0]
    2466:	68bb      	ldr	r3, [r7, #8]
    2468:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
    246a:	68bb      	ldr	r3, [r7, #8]
    246c:	8afa      	ldrh	r2, [r7, #22]
    246e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
    2470:	693b      	ldr	r3, [r7, #16]
    2472:	89fa      	ldrh	r2, [r7, #14]
    2474:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
    2476:	693b      	ldr	r3, [r7, #16]
    2478:	2201      	movs	r2, #1
    247a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
    247c:	68bb      	ldr	r3, [r7, #8]
    247e:	881b      	ldrh	r3, [r3, #0]
    2480:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
    2484:	d006      	beq.n	2494 <mem_malloc+0xd4>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
    2486:	4b40      	ldr	r3, [pc, #256]	; (2588 <mem_malloc+0x1c8>)
    2488:	681b      	ldr	r3, [r3, #0]
    248a:	68ba      	ldr	r2, [r7, #8]
    248c:	8812      	ldrh	r2, [r2, #0]
    248e:	4413      	add	r3, r2
    2490:	89fa      	ldrh	r2, [r7, #14]
    2492:	805a      	strh	r2, [r3, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
    2494:	4b3d      	ldr	r3, [pc, #244]	; (258c <mem_malloc+0x1cc>)
    2496:	f8b3 20aa 	ldrh.w	r2, [r3, #170]	; 0xaa
    249a:	88fb      	ldrh	r3, [r7, #6]
    249c:	4413      	add	r3, r2
    249e:	b29b      	uxth	r3, r3
    24a0:	3308      	adds	r3, #8
    24a2:	b29a      	uxth	r2, r3
    24a4:	4b39      	ldr	r3, [pc, #228]	; (258c <mem_malloc+0x1cc>)
    24a6:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
    24aa:	4b38      	ldr	r3, [pc, #224]	; (258c <mem_malloc+0x1cc>)
    24ac:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
    24b0:	4b36      	ldr	r3, [pc, #216]	; (258c <mem_malloc+0x1cc>)
    24b2:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
    24b6:	429a      	cmp	r2, r3
    24b8:	d228      	bcs.n	250c <mem_malloc+0x14c>
    24ba:	4b34      	ldr	r3, [pc, #208]	; (258c <mem_malloc+0x1cc>)
    24bc:	f8b3 20aa 	ldrh.w	r2, [r3, #170]	; 0xaa
    24c0:	4b32      	ldr	r3, [pc, #200]	; (258c <mem_malloc+0x1cc>)
    24c2:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    24c6:	e021      	b.n	250c <mem_malloc+0x14c>
           * take care of this).
           * -> near fit or excact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
    24c8:	693b      	ldr	r3, [r7, #16]
    24ca:	2201      	movs	r2, #1
    24cc:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
    24ce:	4b2f      	ldr	r3, [pc, #188]	; (258c <mem_malloc+0x1cc>)
    24d0:	f8b3 20aa 	ldrh.w	r2, [r3, #170]	; 0xaa
    24d4:	693b      	ldr	r3, [r7, #16]
    24d6:	8819      	ldrh	r1, [r3, #0]
    24d8:	693b      	ldr	r3, [r7, #16]
    24da:	482b      	ldr	r0, [pc, #172]	; (2588 <mem_malloc+0x1c8>)
    24dc:	6800      	ldr	r0, [r0, #0]
    24de:	1a1b      	subs	r3, r3, r0
    24e0:	b29b      	uxth	r3, r3
    24e2:	1acb      	subs	r3, r1, r3
    24e4:	b29b      	uxth	r3, r3
    24e6:	4413      	add	r3, r2
    24e8:	b29a      	uxth	r2, r3
    24ea:	4b28      	ldr	r3, [pc, #160]	; (258c <mem_malloc+0x1cc>)
    24ec:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
    24f0:	4b26      	ldr	r3, [pc, #152]	; (258c <mem_malloc+0x1cc>)
    24f2:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
    24f6:	4b25      	ldr	r3, [pc, #148]	; (258c <mem_malloc+0x1cc>)
    24f8:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
    24fc:	429a      	cmp	r2, r3
    24fe:	d205      	bcs.n	250c <mem_malloc+0x14c>
    2500:	4b22      	ldr	r3, [pc, #136]	; (258c <mem_malloc+0x1cc>)
    2502:	f8b3 20aa 	ldrh.w	r2, [r3, #170]	; 0xaa
    2506:	4b21      	ldr	r3, [pc, #132]	; (258c <mem_malloc+0x1cc>)
    2508:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        }

        if (mem == lfree) {
    250c:	4b1d      	ldr	r3, [pc, #116]	; (2584 <mem_malloc+0x1c4>)
    250e:	681b      	ldr	r3, [r3, #0]
    2510:	693a      	ldr	r2, [r7, #16]
    2512:	429a      	cmp	r2, r3
    2514:	d118      	bne.n	2548 <mem_malloc+0x188>
          /* Find next free block after mem and update lowest free pointer */
          while (lfree->used && lfree != ram_end) {
    2516:	e007      	b.n	2528 <mem_malloc+0x168>
            LWIP_MEM_ALLOC_UNPROTECT();
            /* prevent high interrupt latency... */
            LWIP_MEM_ALLOC_PROTECT();
            lfree = (struct mem *)(void *)&ram[lfree->next];
    2518:	4b1b      	ldr	r3, [pc, #108]	; (2588 <mem_malloc+0x1c8>)
    251a:	681b      	ldr	r3, [r3, #0]
    251c:	4a19      	ldr	r2, [pc, #100]	; (2584 <mem_malloc+0x1c4>)
    251e:	6812      	ldr	r2, [r2, #0]
    2520:	8812      	ldrh	r2, [r2, #0]
    2522:	4413      	add	r3, r2
    2524:	4a17      	ldr	r2, [pc, #92]	; (2584 <mem_malloc+0x1c4>)
    2526:	6013      	str	r3, [r2, #0]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }

        if (mem == lfree) {
          /* Find next free block after mem and update lowest free pointer */
          while (lfree->used && lfree != ram_end) {
    2528:	4b16      	ldr	r3, [pc, #88]	; (2584 <mem_malloc+0x1c4>)
    252a:	681b      	ldr	r3, [r3, #0]
    252c:	791b      	ldrb	r3, [r3, #4]
    252e:	2b00      	cmp	r3, #0
    2530:	d005      	beq.n	253e <mem_malloc+0x17e>
    2532:	4b14      	ldr	r3, [pc, #80]	; (2584 <mem_malloc+0x1c4>)
    2534:	681a      	ldr	r2, [r3, #0]
    2536:	4b16      	ldr	r3, [pc, #88]	; (2590 <mem_malloc+0x1d0>)
    2538:	681b      	ldr	r3, [r3, #0]
    253a:	429a      	cmp	r2, r3
    253c:	d1ec      	bne.n	2518 <mem_malloc+0x158>
            LWIP_MEM_ALLOC_UNPROTECT();
            /* prevent high interrupt latency... */
            LWIP_MEM_ALLOC_PROTECT();
            lfree = (struct mem *)(void *)&ram[lfree->next];
          }
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
    253e:	4b11      	ldr	r3, [pc, #68]	; (2584 <mem_malloc+0x1c4>)
    2540:	681a      	ldr	r2, [r3, #0]
    2542:	4b13      	ldr	r3, [pc, #76]	; (2590 <mem_malloc+0x1d0>)
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	429a      	cmp	r2, r3
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
    2548:	693b      	ldr	r3, [r7, #16]
    254a:	3308      	adds	r3, #8
    254c:	e015      	b.n	257a <mem_malloc+0x1ba>

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
    254e:	4b0e      	ldr	r3, [pc, #56]	; (2588 <mem_malloc+0x1c8>)
    2550:	681a      	ldr	r2, [r3, #0]
    2552:	8afb      	ldrh	r3, [r7, #22]
    2554:	4413      	add	r3, r2
    2556:	881b      	ldrh	r3, [r3, #0]
    2558:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
    255a:	8afa      	ldrh	r2, [r7, #22]
    255c:	88fb      	ldrh	r3, [r7, #6]
    255e:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
    2562:	429a      	cmp	r2, r3
    2564:	f6ff af4f 	blt.w	2406 <mem_malloc+0x46>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while(local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
    2568:	4b08      	ldr	r3, [pc, #32]	; (258c <mem_malloc+0x1cc>)
    256a:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
    256e:	3301      	adds	r3, #1
    2570:	b29a      	uxth	r2, r3
    2572:	4b06      	ldr	r3, [pc, #24]	; (258c <mem_malloc+0x1cc>)
    2574:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
    2578:	2300      	movs	r3, #0
}
    257a:	4618      	mov	r0, r3
    257c:	371c      	adds	r7, #28
    257e:	46bd      	mov	sp, r7
    2580:	bc80      	pop	{r7}
    2582:	4770      	bx	lr
    2584:	100002b0 	.word	0x100002b0
    2588:	100002a8 	.word	0x100002a8
    258c:	10001978 	.word	0x10001978
    2590:	100002ac 	.word	0x100002ac

00002594 <memp_init>:
 * 
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
    2594:	b480      	push	{r7}
    2596:	b083      	sub	sp, #12
    2598:	af00      	add	r7, sp, #0
  struct memp *memp;
  u16_t i, j;

  for (i = 0; i < MEMP_MAX; ++i) {
    259a:	2300      	movs	r3, #0
    259c:	807b      	strh	r3, [r7, #2]
    259e:	e02e      	b.n	25fe <memp_init+0x6a>
    MEMP_STATS_AVAIL(used, i, 0);
    25a0:	887a      	ldrh	r2, [r7, #2]
    25a2:	4934      	ldr	r1, [pc, #208]	; (2674 <memp_init+0xe0>)
    25a4:	4613      	mov	r3, r2
    25a6:	009b      	lsls	r3, r3, #2
    25a8:	4413      	add	r3, r2
    25aa:	005b      	lsls	r3, r3, #1
    25ac:	440b      	add	r3, r1
    25ae:	33b4      	adds	r3, #180	; 0xb4
    25b0:	2200      	movs	r2, #0
    25b2:	801a      	strh	r2, [r3, #0]
    MEMP_STATS_AVAIL(max, i, 0);
    25b4:	887a      	ldrh	r2, [r7, #2]
    25b6:	492f      	ldr	r1, [pc, #188]	; (2674 <memp_init+0xe0>)
    25b8:	4613      	mov	r3, r2
    25ba:	009b      	lsls	r3, r3, #2
    25bc:	4413      	add	r3, r2
    25be:	005b      	lsls	r3, r3, #1
    25c0:	440b      	add	r3, r1
    25c2:	33b6      	adds	r3, #182	; 0xb6
    25c4:	2200      	movs	r2, #0
    25c6:	801a      	strh	r2, [r3, #0]
    MEMP_STATS_AVAIL(err, i, 0);
    25c8:	887a      	ldrh	r2, [r7, #2]
    25ca:	492a      	ldr	r1, [pc, #168]	; (2674 <memp_init+0xe0>)
    25cc:	4613      	mov	r3, r2
    25ce:	009b      	lsls	r3, r3, #2
    25d0:	4413      	add	r3, r2
    25d2:	005b      	lsls	r3, r3, #1
    25d4:	440b      	add	r3, r1
    25d6:	33b8      	adds	r3, #184	; 0xb8
    25d8:	2200      	movs	r2, #0
    25da:	801a      	strh	r2, [r3, #0]
    MEMP_STATS_AVAIL(avail, i, memp_num[i]);
    25dc:	887a      	ldrh	r2, [r7, #2]
    25de:	887b      	ldrh	r3, [r7, #2]
    25e0:	4925      	ldr	r1, [pc, #148]	; (2678 <memp_init+0xe4>)
    25e2:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
    25e6:	4923      	ldr	r1, [pc, #140]	; (2674 <memp_init+0xe0>)
    25e8:	4613      	mov	r3, r2
    25ea:	009b      	lsls	r3, r3, #2
    25ec:	4413      	add	r3, r2
    25ee:	005b      	lsls	r3, r3, #1
    25f0:	440b      	add	r3, r1
    25f2:	33b2      	adds	r3, #178	; 0xb2
    25f4:	4602      	mov	r2, r0
    25f6:	801a      	strh	r2, [r3, #0]
memp_init(void)
{
  struct memp *memp;
  u16_t i, j;

  for (i = 0; i < MEMP_MAX; ++i) {
    25f8:	887b      	ldrh	r3, [r7, #2]
    25fa:	3301      	adds	r3, #1
    25fc:	807b      	strh	r3, [r7, #2]
    25fe:	887b      	ldrh	r3, [r7, #2]
    2600:	2b09      	cmp	r3, #9
    2602:	d9cd      	bls.n	25a0 <memp_init+0xc>
    MEMP_STATS_AVAIL(err, i, 0);
    MEMP_STATS_AVAIL(avail, i, memp_num[i]);
  }

#if !MEMP_SEPARATE_POOLS
  memp = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
    2604:	4b1d      	ldr	r3, [pc, #116]	; (267c <memp_init+0xe8>)
    2606:	3303      	adds	r3, #3
    2608:	f023 0303 	bic.w	r3, r3, #3
    260c:	607b      	str	r3, [r7, #4]
#endif /* !MEMP_SEPARATE_POOLS */
  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
    260e:	2300      	movs	r3, #0
    2610:	807b      	strh	r3, [r7, #2]
    2612:	e027      	b.n	2664 <memp_init+0xd0>
    memp_tab[i] = NULL;
    2614:	887b      	ldrh	r3, [r7, #2]
    2616:	4a1a      	ldr	r2, [pc, #104]	; (2680 <memp_init+0xec>)
    2618:	2100      	movs	r1, #0
    261a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
#if MEMP_SEPARATE_POOLS
    memp = (struct memp*)memp_bases[i];
#endif /* MEMP_SEPARATE_POOLS */
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
    261e:	2300      	movs	r3, #0
    2620:	803b      	strh	r3, [r7, #0]
    2622:	e015      	b.n	2650 <memp_init+0xbc>
      memp->next = memp_tab[i];
    2624:	887b      	ldrh	r3, [r7, #2]
    2626:	4a16      	ldr	r2, [pc, #88]	; (2680 <memp_init+0xec>)
    2628:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    262c:	687b      	ldr	r3, [r7, #4]
    262e:	601a      	str	r2, [r3, #0]
      memp_tab[i] = memp;
    2630:	887b      	ldrh	r3, [r7, #2]
    2632:	4913      	ldr	r1, [pc, #76]	; (2680 <memp_init+0xec>)
    2634:	687a      	ldr	r2, [r7, #4]
    2636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
    263a:	887b      	ldrh	r3, [r7, #2]
    263c:	4a11      	ldr	r2, [pc, #68]	; (2684 <memp_init+0xf0>)
    263e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    2642:	461a      	mov	r2, r3
    2644:	687b      	ldr	r3, [r7, #4]
    2646:	4413      	add	r3, r2
    2648:	607b      	str	r3, [r7, #4]
    memp_tab[i] = NULL;
#if MEMP_SEPARATE_POOLS
    memp = (struct memp*)memp_bases[i];
#endif /* MEMP_SEPARATE_POOLS */
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
    264a:	883b      	ldrh	r3, [r7, #0]
    264c:	3301      	adds	r3, #1
    264e:	803b      	strh	r3, [r7, #0]
    2650:	887b      	ldrh	r3, [r7, #2]
    2652:	4a09      	ldr	r2, [pc, #36]	; (2678 <memp_init+0xe4>)
    2654:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    2658:	883a      	ldrh	r2, [r7, #0]
    265a:	429a      	cmp	r2, r3
    265c:	d3e2      	bcc.n	2624 <memp_init+0x90>

#if !MEMP_SEPARATE_POOLS
  memp = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
#endif /* !MEMP_SEPARATE_POOLS */
  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
    265e:	887b      	ldrh	r3, [r7, #2]
    2660:	3301      	adds	r3, #1
    2662:	807b      	strh	r3, [r7, #2]
    2664:	887b      	ldrh	r3, [r7, #2]
    2666:	2b09      	cmp	r3, #9
    2668:	d9d4      	bls.n	2614 <memp_init+0x80>
#if MEMP_OVERFLOW_CHECK
  memp_overflow_init();
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK */
}
    266a:	bf00      	nop
    266c:	370c      	adds	r7, #12
    266e:	46bd      	mov	sp, r7
    2670:	bc80      	pop	{r7}
    2672:	4770      	bx	lr
    2674:	10001978 	.word	0x10001978
    2678:	00009828 	.word	0x00009828
    267c:	100002dc 	.word	0x100002dc
    2680:	100002b4 	.word	0x100002b4
    2684:	00009814 	.word	0x00009814

00002688 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
    2688:	b480      	push	{r7}
    268a:	b085      	sub	sp, #20
    268c:	af00      	add	r7, sp, #0
    268e:	4603      	mov	r3, r0
    2690:	71fb      	strb	r3, [r7, #7]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);
 
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
    2692:	79fb      	ldrb	r3, [r7, #7]
    2694:	2b09      	cmp	r3, #9
    2696:	d901      	bls.n	269c <memp_malloc+0x14>
    2698:	2300      	movs	r3, #0
    269a:	e05f      	b.n	275c <memp_malloc+0xd4>
  SYS_ARCH_PROTECT(old_level);
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

  memp = memp_tab[type];
    269c:	79fb      	ldrb	r3, [r7, #7]
    269e:	4a32      	ldr	r2, [pc, #200]	; (2768 <memp_malloc+0xe0>)
    26a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    26a4:	60fb      	str	r3, [r7, #12]
  
  if (memp != NULL) {
    26a6:	68fb      	ldr	r3, [r7, #12]
    26a8:	2b00      	cmp	r3, #0
    26aa:	d042      	beq.n	2732 <memp_malloc+0xaa>
    memp_tab[type] = memp->next;
    26ac:	79fb      	ldrb	r3, [r7, #7]
    26ae:	68fa      	ldr	r2, [r7, #12]
    26b0:	6812      	ldr	r2, [r2, #0]
    26b2:	492d      	ldr	r1, [pc, #180]	; (2768 <memp_malloc+0xe0>)
    26b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#if MEMP_OVERFLOW_CHECK
    memp->next = NULL;
    memp->file = file;
    memp->line = line;
#endif /* MEMP_OVERFLOW_CHECK */
    MEMP_STATS_INC_USED(used, type);
    26b8:	79fa      	ldrb	r2, [r7, #7]
    26ba:	79f9      	ldrb	r1, [r7, #7]
    26bc:	482b      	ldr	r0, [pc, #172]	; (276c <memp_malloc+0xe4>)
    26be:	460b      	mov	r3, r1
    26c0:	009b      	lsls	r3, r3, #2
    26c2:	440b      	add	r3, r1
    26c4:	005b      	lsls	r3, r3, #1
    26c6:	4403      	add	r3, r0
    26c8:	33b4      	adds	r3, #180	; 0xb4
    26ca:	881b      	ldrh	r3, [r3, #0]
    26cc:	3301      	adds	r3, #1
    26ce:	b298      	uxth	r0, r3
    26d0:	4926      	ldr	r1, [pc, #152]	; (276c <memp_malloc+0xe4>)
    26d2:	4613      	mov	r3, r2
    26d4:	009b      	lsls	r3, r3, #2
    26d6:	4413      	add	r3, r2
    26d8:	005b      	lsls	r3, r3, #1
    26da:	440b      	add	r3, r1
    26dc:	33b4      	adds	r3, #180	; 0xb4
    26de:	4602      	mov	r2, r0
    26e0:	801a      	strh	r2, [r3, #0]
    26e2:	79fa      	ldrb	r2, [r7, #7]
    26e4:	4921      	ldr	r1, [pc, #132]	; (276c <memp_malloc+0xe4>)
    26e6:	4613      	mov	r3, r2
    26e8:	009b      	lsls	r3, r3, #2
    26ea:	4413      	add	r3, r2
    26ec:	005b      	lsls	r3, r3, #1
    26ee:	440b      	add	r3, r1
    26f0:	33b6      	adds	r3, #182	; 0xb6
    26f2:	8819      	ldrh	r1, [r3, #0]
    26f4:	79fa      	ldrb	r2, [r7, #7]
    26f6:	481d      	ldr	r0, [pc, #116]	; (276c <memp_malloc+0xe4>)
    26f8:	4613      	mov	r3, r2
    26fa:	009b      	lsls	r3, r3, #2
    26fc:	4413      	add	r3, r2
    26fe:	005b      	lsls	r3, r3, #1
    2700:	4403      	add	r3, r0
    2702:	33b4      	adds	r3, #180	; 0xb4
    2704:	881b      	ldrh	r3, [r3, #0]
    2706:	4299      	cmp	r1, r3
    2708:	d227      	bcs.n	275a <memp_malloc+0xd2>
    270a:	79fa      	ldrb	r2, [r7, #7]
    270c:	79f9      	ldrb	r1, [r7, #7]
    270e:	4817      	ldr	r0, [pc, #92]	; (276c <memp_malloc+0xe4>)
    2710:	460b      	mov	r3, r1
    2712:	009b      	lsls	r3, r3, #2
    2714:	440b      	add	r3, r1
    2716:	005b      	lsls	r3, r3, #1
    2718:	4403      	add	r3, r0
    271a:	33b4      	adds	r3, #180	; 0xb4
    271c:	8818      	ldrh	r0, [r3, #0]
    271e:	4913      	ldr	r1, [pc, #76]	; (276c <memp_malloc+0xe4>)
    2720:	4613      	mov	r3, r2
    2722:	009b      	lsls	r3, r3, #2
    2724:	4413      	add	r3, r2
    2726:	005b      	lsls	r3, r3, #1
    2728:	440b      	add	r3, r1
    272a:	33b6      	adds	r3, #182	; 0xb6
    272c:	4602      	mov	r2, r0
    272e:	801a      	strh	r2, [r3, #0]
    2730:	e013      	b.n	275a <memp_malloc+0xd2>
    LWIP_ASSERT("memp_malloc: memp properly aligned",
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
    memp = (struct memp*)(void *)((u8_t*)memp + MEMP_SIZE);
  } else {
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", memp_desc[type]));
    MEMP_STATS_INC(err, type);
    2732:	79fa      	ldrb	r2, [r7, #7]
    2734:	490d      	ldr	r1, [pc, #52]	; (276c <memp_malloc+0xe4>)
    2736:	4613      	mov	r3, r2
    2738:	009b      	lsls	r3, r3, #2
    273a:	4413      	add	r3, r2
    273c:	005b      	lsls	r3, r3, #1
    273e:	440b      	add	r3, r1
    2740:	33b8      	adds	r3, #184	; 0xb8
    2742:	881b      	ldrh	r3, [r3, #0]
    2744:	3301      	adds	r3, #1
    2746:	b298      	uxth	r0, r3
    2748:	4908      	ldr	r1, [pc, #32]	; (276c <memp_malloc+0xe4>)
    274a:	4613      	mov	r3, r2
    274c:	009b      	lsls	r3, r3, #2
    274e:	4413      	add	r3, r2
    2750:	005b      	lsls	r3, r3, #1
    2752:	440b      	add	r3, r1
    2754:	33b8      	adds	r3, #184	; 0xb8
    2756:	4602      	mov	r2, r0
    2758:	801a      	strh	r2, [r3, #0]
  }

  SYS_ARCH_UNPROTECT(old_level);

  return memp;
    275a:	68fb      	ldr	r3, [r7, #12]
}
    275c:	4618      	mov	r0, r3
    275e:	3714      	adds	r7, #20
    2760:	46bd      	mov	sp, r7
    2762:	bc80      	pop	{r7}
    2764:	4770      	bx	lr
    2766:	bf00      	nop
    2768:	100002b4 	.word	0x100002b4
    276c:	10001978 	.word	0x10001978

00002770 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
    2770:	b480      	push	{r7}
    2772:	b085      	sub	sp, #20
    2774:	af00      	add	r7, sp, #0
    2776:	4603      	mov	r3, r0
    2778:	6039      	str	r1, [r7, #0]
    277a:	71fb      	strb	r3, [r7, #7]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  if (mem == NULL) {
    277c:	683b      	ldr	r3, [r7, #0]
    277e:	2b00      	cmp	r3, #0
    2780:	d021      	beq.n	27c6 <memp_free+0x56>
    return;
  }
  LWIP_ASSERT("memp_free: mem properly aligned",
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
    2782:	683b      	ldr	r3, [r7, #0]
    2784:	60fb      	str	r3, [r7, #12]
  memp_overflow_check_element_overflow(memp, type);
  memp_overflow_check_element_underflow(memp, type);
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
#endif /* MEMP_OVERFLOW_CHECK */

  MEMP_STATS_DEC(used, type); 
    2786:	79fa      	ldrb	r2, [r7, #7]
    2788:	4911      	ldr	r1, [pc, #68]	; (27d0 <memp_free+0x60>)
    278a:	4613      	mov	r3, r2
    278c:	009b      	lsls	r3, r3, #2
    278e:	4413      	add	r3, r2
    2790:	005b      	lsls	r3, r3, #1
    2792:	440b      	add	r3, r1
    2794:	33b4      	adds	r3, #180	; 0xb4
    2796:	881b      	ldrh	r3, [r3, #0]
    2798:	3b01      	subs	r3, #1
    279a:	b298      	uxth	r0, r3
    279c:	490c      	ldr	r1, [pc, #48]	; (27d0 <memp_free+0x60>)
    279e:	4613      	mov	r3, r2
    27a0:	009b      	lsls	r3, r3, #2
    27a2:	4413      	add	r3, r2
    27a4:	005b      	lsls	r3, r3, #1
    27a6:	440b      	add	r3, r1
    27a8:	33b4      	adds	r3, #180	; 0xb4
    27aa:	4602      	mov	r2, r0
    27ac:	801a      	strh	r2, [r3, #0]
  
  memp->next = memp_tab[type]; 
    27ae:	79fb      	ldrb	r3, [r7, #7]
    27b0:	4a08      	ldr	r2, [pc, #32]	; (27d4 <memp_free+0x64>)
    27b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    27b6:	68fb      	ldr	r3, [r7, #12]
    27b8:	601a      	str	r2, [r3, #0]
  memp_tab[type] = memp;
    27ba:	79fb      	ldrb	r3, [r7, #7]
    27bc:	4905      	ldr	r1, [pc, #20]	; (27d4 <memp_free+0x64>)
    27be:	68fa      	ldr	r2, [r7, #12]
    27c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    27c4:	e000      	b.n	27c8 <memp_free+0x58>
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  if (mem == NULL) {
    return;
    27c6:	bf00      	nop
#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity());
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
}
    27c8:	3714      	adds	r7, #20
    27ca:	46bd      	mov	sp, r7
    27cc:	bc80      	pop	{r7}
    27ce:	4770      	bx	lr
    27d0:	10001978 	.word	0x10001978
    27d4:	100002b4 	.word	0x100002b4

000027d8 <netif_add>:
 * @return netif, or NULL if failed.
 */
struct netif *
netif_add(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
  ip_addr_t *gw, void *state, netif_init_fn init, netif_input_fn input)
{
    27d8:	b580      	push	{r7, lr}
    27da:	b084      	sub	sp, #16
    27dc:	af00      	add	r7, sp, #0
    27de:	60f8      	str	r0, [r7, #12]
    27e0:	60b9      	str	r1, [r7, #8]
    27e2:	607a      	str	r2, [r7, #4]
    27e4:	603b      	str	r3, [r7, #0]
  static u8_t netifnum = 0;

  LWIP_ASSERT("No init function given", init != NULL);

  /* reset new interface configuration state */
  ip_addr_set_zero(&netif->ip_addr);
    27e6:	68fb      	ldr	r3, [r7, #12]
    27e8:	2200      	movs	r2, #0
    27ea:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero(&netif->netmask);
    27ec:	68fb      	ldr	r3, [r7, #12]
    27ee:	2200      	movs	r2, #0
    27f0:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero(&netif->gw);
    27f2:	68fb      	ldr	r3, [r7, #12]
    27f4:	2200      	movs	r2, #0
    27f6:	60da      	str	r2, [r3, #12]
  netif->flags = 0;
    27f8:	68fb      	ldr	r3, [r7, #12]
    27fa:	2200      	movs	r2, #0
    27fc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
    2800:	68fb      	ldr	r3, [r7, #12]
    2802:	69ba      	ldr	r2, [r7, #24]
    2804:	61da      	str	r2, [r3, #28]
  netif->num = netifnum++;
    2806:	4b13      	ldr	r3, [pc, #76]	; (2854 <netif_add+0x7c>)
    2808:	781b      	ldrb	r3, [r3, #0]
    280a:	1c5a      	adds	r2, r3, #1
    280c:	b2d1      	uxtb	r1, r2
    280e:	4a11      	ldr	r2, [pc, #68]	; (2854 <netif_add+0x7c>)
    2810:	7011      	strb	r1, [r2, #0]
    2812:	68fa      	ldr	r2, [r7, #12]
    2814:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
  netif->input = input;
    2818:	68fb      	ldr	r3, [r7, #12]
    281a:	6a3a      	ldr	r2, [r7, #32]
    281c:	611a      	str	r2, [r3, #16]
#endif /* LWIP_NETIF_HWADDRHINT*/
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

  netif_set_addr(netif, ipaddr, netmask, gw);
    281e:	683b      	ldr	r3, [r7, #0]
    2820:	687a      	ldr	r2, [r7, #4]
    2822:	68b9      	ldr	r1, [r7, #8]
    2824:	68f8      	ldr	r0, [r7, #12]
    2826:	f000 f819 	bl	285c <netif_set_addr>

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
    282a:	69fb      	ldr	r3, [r7, #28]
    282c:	68f8      	ldr	r0, [r7, #12]
    282e:	4798      	blx	r3
    2830:	4603      	mov	r3, r0
    2832:	2b00      	cmp	r3, #0
    2834:	d001      	beq.n	283a <netif_add+0x62>
    return NULL;
    2836:	2300      	movs	r3, #0
    2838:	e007      	b.n	284a <netif_add+0x72>
  }

  /* add this netif to the list */
  netif->next = netif_list;
    283a:	4b07      	ldr	r3, [pc, #28]	; (2858 <netif_add+0x80>)
    283c:	681a      	ldr	r2, [r3, #0]
    283e:	68fb      	ldr	r3, [r7, #12]
    2840:	601a      	str	r2, [r3, #0]
  netif_list = netif;
    2842:	4a05      	ldr	r2, [pc, #20]	; (2858 <netif_add+0x80>)
    2844:	68fb      	ldr	r3, [r7, #12]
    2846:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
  ip_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip_addr_debug_print(NETIF_DEBUG, gw);
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
    2848:	68fb      	ldr	r3, [r7, #12]
}
    284a:	4618      	mov	r0, r3
    284c:	3710      	adds	r7, #16
    284e:	46bd      	mov	sp, r7
    2850:	bd80      	pop	{r7, pc}
    2852:	bf00      	nop
    2854:	100011eb 	.word	0x100011eb
    2858:	10001958 	.word	0x10001958

0000285c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
    ip_addr_t *gw)
{
    285c:	b580      	push	{r7, lr}
    285e:	b084      	sub	sp, #16
    2860:	af00      	add	r7, sp, #0
    2862:	60f8      	str	r0, [r7, #12]
    2864:	60b9      	str	r1, [r7, #8]
    2866:	607a      	str	r2, [r7, #4]
    2868:	603b      	str	r3, [r7, #0]
  netif_set_ipaddr(netif, ipaddr);
    286a:	68b9      	ldr	r1, [r7, #8]
    286c:	68f8      	ldr	r0, [r7, #12]
    286e:	f000 f80d 	bl	288c <netif_set_ipaddr>
  netif_set_netmask(netif, netmask);
    2872:	6879      	ldr	r1, [r7, #4]
    2874:	68f8      	ldr	r0, [r7, #12]
    2876:	f000 f873 	bl	2960 <netif_set_netmask>
  netif_set_gw(netif, gw);
    287a:	6839      	ldr	r1, [r7, #0]
    287c:	68f8      	ldr	r0, [r7, #12]
    287e:	f000 f85b 	bl	2938 <netif_set_gw>
}
    2882:	bf00      	nop
    2884:	3710      	adds	r7, #16
    2886:	46bd      	mov	sp, r7
    2888:	bd80      	pop	{r7, pc}
    288a:	bf00      	nop

0000288c <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, ip_addr_t *ipaddr)
{
    288c:	b580      	push	{r7, lr}
    288e:	b086      	sub	sp, #24
    2890:	af00      	add	r7, sp, #0
    2892:	6078      	str	r0, [r7, #4]
    2894:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct tcp_pcb *pcb;
  struct tcp_pcb_listen *lpcb;

  /* address is actually being changed? */
  if ((ip_addr_cmp(ipaddr, &(netif->ip_addr))) == 0) {
    2896:	683b      	ldr	r3, [r7, #0]
    2898:	681a      	ldr	r2, [r3, #0]
    289a:	687b      	ldr	r3, [r7, #4]
    289c:	685b      	ldr	r3, [r3, #4]
    289e:	429a      	cmp	r2, r3
    28a0:	d038      	beq.n	2914 <netif_set_ipaddr+0x88>
    /* extern struct tcp_pcb *tcp_active_pcbs; defined by tcp.h */
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    pcb = tcp_active_pcbs;
    28a2:	4b23      	ldr	r3, [pc, #140]	; (2930 <netif_set_ipaddr+0xa4>)
    28a4:	681b      	ldr	r3, [r3, #0]
    28a6:	617b      	str	r3, [r7, #20]
    while (pcb != NULL) {
    28a8:	e011      	b.n	28ce <netif_set_ipaddr+0x42>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))
    28aa:	697b      	ldr	r3, [r7, #20]
    28ac:	681a      	ldr	r2, [r3, #0]
    28ae:	687b      	ldr	r3, [r7, #4]
    28b0:	685b      	ldr	r3, [r3, #4]
    28b2:	429a      	cmp	r2, r3
    28b4:	d108      	bne.n	28c8 <netif_set_ipaddr+0x3c>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && !ip_addr_islinklocal(&(pcb->local_ip))
#endif /* LWIP_AUTOIP */
        ) {
        /* this connection must be aborted */
        struct tcp_pcb *next = pcb->next;
    28b6:	697b      	ldr	r3, [r7, #20]
    28b8:	68db      	ldr	r3, [r3, #12]
    28ba:	60fb      	str	r3, [r7, #12]
        LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
        tcp_abort(pcb);
    28bc:	6978      	ldr	r0, [r7, #20]
    28be:	f000 fa47 	bl	2d50 <tcp_abort>
        pcb = next;
    28c2:	68fb      	ldr	r3, [r7, #12]
    28c4:	617b      	str	r3, [r7, #20]
    28c6:	e002      	b.n	28ce <netif_set_ipaddr+0x42>
      } else {
        pcb = pcb->next;
    28c8:	697b      	ldr	r3, [r7, #20]
    28ca:	68db      	ldr	r3, [r3, #12]
    28cc:	617b      	str	r3, [r7, #20]
  /* address is actually being changed? */
  if ((ip_addr_cmp(ipaddr, &(netif->ip_addr))) == 0) {
    /* extern struct tcp_pcb *tcp_active_pcbs; defined by tcp.h */
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    pcb = tcp_active_pcbs;
    while (pcb != NULL) {
    28ce:	697b      	ldr	r3, [r7, #20]
    28d0:	2b00      	cmp	r3, #0
    28d2:	d1ea      	bne.n	28aa <netif_set_ipaddr+0x1e>
        pcb = next;
      } else {
        pcb = pcb->next;
      }
    }
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
    28d4:	4b17      	ldr	r3, [pc, #92]	; (2934 <netif_set_ipaddr+0xa8>)
    28d6:	681b      	ldr	r3, [r3, #0]
    28d8:	613b      	str	r3, [r7, #16]
    28da:	e018      	b.n	290e <netif_set_ipaddr+0x82>
      /* PCB bound to current local interface address? */
      if ((!(ip_addr_isany(&(lpcb->local_ip)))) &&
    28dc:	693b      	ldr	r3, [r7, #16]
    28de:	2b00      	cmp	r3, #0
    28e0:	d012      	beq.n	2908 <netif_set_ipaddr+0x7c>
    28e2:	693b      	ldr	r3, [r7, #16]
    28e4:	681b      	ldr	r3, [r3, #0]
    28e6:	2b00      	cmp	r3, #0
    28e8:	d00e      	beq.n	2908 <netif_set_ipaddr+0x7c>
          (ip_addr_cmp(&(lpcb->local_ip), &(netif->ip_addr)))) {
    28ea:	693b      	ldr	r3, [r7, #16]
    28ec:	681a      	ldr	r2, [r3, #0]
    28ee:	687b      	ldr	r3, [r7, #4]
    28f0:	685b      	ldr	r3, [r3, #4]
        pcb = pcb->next;
      }
    }
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
      /* PCB bound to current local interface address? */
      if ((!(ip_addr_isany(&(lpcb->local_ip)))) &&
    28f2:	429a      	cmp	r2, r3
    28f4:	d108      	bne.n	2908 <netif_set_ipaddr+0x7c>
          (ip_addr_cmp(&(lpcb->local_ip), &(netif->ip_addr)))) {
        /* The PCB is listening to the old ipaddr and
         * is set to listen to the new one instead */
        ip_addr_set(&(lpcb->local_ip), ipaddr);
    28f6:	683b      	ldr	r3, [r7, #0]
    28f8:	2b00      	cmp	r3, #0
    28fa:	d002      	beq.n	2902 <netif_set_ipaddr+0x76>
    28fc:	683b      	ldr	r3, [r7, #0]
    28fe:	681b      	ldr	r3, [r3, #0]
    2900:	e000      	b.n	2904 <netif_set_ipaddr+0x78>
    2902:	2300      	movs	r3, #0
    2904:	693a      	ldr	r2, [r7, #16]
    2906:	6013      	str	r3, [r2, #0]
        pcb = next;
      } else {
        pcb = pcb->next;
      }
    }
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
    2908:	693b      	ldr	r3, [r7, #16]
    290a:	68db      	ldr	r3, [r3, #12]
    290c:	613b      	str	r3, [r7, #16]
    290e:	693b      	ldr	r3, [r7, #16]
    2910:	2b00      	cmp	r3, #0
    2912:	d1e3      	bne.n	28dc <netif_set_ipaddr+0x50>
  }
#endif
  snmp_delete_ipaddridx_tree(netif);
  snmp_delete_iprteidx_tree(0,netif);
  /* set new IP address to netif */
  ip_addr_set(&(netif->ip_addr), ipaddr);
    2914:	683b      	ldr	r3, [r7, #0]
    2916:	2b00      	cmp	r3, #0
    2918:	d002      	beq.n	2920 <netif_set_ipaddr+0x94>
    291a:	683b      	ldr	r3, [r7, #0]
    291c:	681b      	ldr	r3, [r3, #0]
    291e:	e000      	b.n	2922 <netif_set_ipaddr+0x96>
    2920:	2300      	movs	r3, #0
    2922:	687a      	ldr	r2, [r7, #4]
    2924:	6053      	str	r3, [r2, #4]
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->ip_addr),
    ip4_addr2_16(&netif->ip_addr),
    ip4_addr3_16(&netif->ip_addr),
    ip4_addr4_16(&netif->ip_addr)));
}
    2926:	bf00      	nop
    2928:	3718      	adds	r7, #24
    292a:	46bd      	mov	sp, r7
    292c:	bd80      	pop	{r7, pc}
    292e:	bf00      	nop
    2930:	10001960 	.word	0x10001960
    2934:	10001968 	.word	0x10001968

00002938 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, ip_addr_t *gw)
{
    2938:	b480      	push	{r7}
    293a:	b083      	sub	sp, #12
    293c:	af00      	add	r7, sp, #0
    293e:	6078      	str	r0, [r7, #4]
    2940:	6039      	str	r1, [r7, #0]
  ip_addr_set(&(netif->gw), gw);
    2942:	683b      	ldr	r3, [r7, #0]
    2944:	2b00      	cmp	r3, #0
    2946:	d002      	beq.n	294e <netif_set_gw+0x16>
    2948:	683b      	ldr	r3, [r7, #0]
    294a:	681b      	ldr	r3, [r3, #0]
    294c:	e000      	b.n	2950 <netif_set_gw+0x18>
    294e:	2300      	movs	r3, #0
    2950:	687a      	ldr	r2, [r7, #4]
    2952:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->gw),
    ip4_addr2_16(&netif->gw),
    ip4_addr3_16(&netif->gw),
    ip4_addr4_16(&netif->gw)));
}
    2954:	bf00      	nop
    2956:	370c      	adds	r7, #12
    2958:	46bd      	mov	sp, r7
    295a:	bc80      	pop	{r7}
    295c:	4770      	bx	lr
    295e:	bf00      	nop

00002960 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, ip_addr_t *netmask)
{
    2960:	b480      	push	{r7}
    2962:	b083      	sub	sp, #12
    2964:	af00      	add	r7, sp, #0
    2966:	6078      	str	r0, [r7, #4]
    2968:	6039      	str	r1, [r7, #0]
  snmp_delete_iprteidx_tree(0, netif);
  /* set new netmask to netif */
  ip_addr_set(&(netif->netmask), netmask);
    296a:	683b      	ldr	r3, [r7, #0]
    296c:	2b00      	cmp	r3, #0
    296e:	d002      	beq.n	2976 <netif_set_netmask+0x16>
    2970:	683b      	ldr	r3, [r7, #0]
    2972:	681b      	ldr	r3, [r3, #0]
    2974:	e000      	b.n	2978 <netif_set_netmask+0x18>
    2976:	2300      	movs	r3, #0
    2978:	687a      	ldr	r2, [r7, #4]
    297a:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->netmask),
    ip4_addr2_16(&netif->netmask),
    ip4_addr3_16(&netif->netmask),
    ip4_addr4_16(&netif->netmask)));
}
    297c:	bf00      	nop
    297e:	370c      	adds	r7, #12
    2980:	46bd      	mov	sp, r7
    2982:	bc80      	pop	{r7}
    2984:	4770      	bx	lr
    2986:	bf00      	nop

00002988 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
    2988:	b480      	push	{r7}
    298a:	b083      	sub	sp, #12
    298c:	af00      	add	r7, sp, #0
    298e:	6078      	str	r0, [r7, #4]
    snmp_delete_iprteidx_tree(1, netif);
  } else {
    /* install default route */
    snmp_insert_iprteidx_tree(1, netif);
  }
  netif_default = netif;
    2990:	4a03      	ldr	r2, [pc, #12]	; (29a0 <netif_set_default+0x18>)
    2992:	687b      	ldr	r3, [r7, #4]
    2994:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
    2996:	bf00      	nop
    2998:	370c      	adds	r7, #12
    299a:	46bd      	mov	sp, r7
    299c:	bc80      	pop	{r7}
    299e:	4770      	bx	lr
    29a0:	1000195c 	.word	0x1000195c

000029a4 <netif_set_up>:
 * up once configured.
 * 
 * @see dhcp_start()
 */ 
void netif_set_up(struct netif *netif)
{
    29a4:	b580      	push	{r7, lr}
    29a6:	b082      	sub	sp, #8
    29a8:	af00      	add	r7, sp, #0
    29aa:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
    29ac:	687b      	ldr	r3, [r7, #4]
    29ae:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    29b2:	f003 0301 	and.w	r3, r3, #1
    29b6:	2b00      	cmp	r3, #0
    29b8:	d11c      	bne.n	29f4 <netif_set_up+0x50>
    netif->flags |= NETIF_FLAG_UP;
    29ba:	687b      	ldr	r3, [r7, #4]
    29bc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    29c0:	f043 0301 	orr.w	r3, r3, #1
    29c4:	b2da      	uxtb	r2, r3
    29c6:	687b      	ldr	r3, [r7, #4]
    29c8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    snmp_get_sysuptime(&netif->ts);
#endif /* LWIP_SNMP */

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
    29cc:	687b      	ldr	r3, [r7, #4]
    29ce:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    29d2:	f003 0310 	and.w	r3, r3, #16
    29d6:	2b00      	cmp	r3, #0
    29d8:	d00c      	beq.n	29f4 <netif_set_up+0x50>
#if LWIP_ARP
      /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */ 
      if (netif->flags & (NETIF_FLAG_ETHARP)) {
    29da:	687b      	ldr	r3, [r7, #4]
    29dc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    29e0:	f003 0320 	and.w	r3, r3, #32
    29e4:	2b00      	cmp	r3, #0
    29e6:	d005      	beq.n	29f4 <netif_set_up+0x50>
        etharp_gratuitous(netif);
    29e8:	687b      	ldr	r3, [r7, #4]
    29ea:	3304      	adds	r3, #4
    29ec:	4619      	mov	r1, r3
    29ee:	6878      	ldr	r0, [r7, #4]
    29f0:	f006 fdbe 	bl	9570 <etharp_request>
        igmp_report_groups( netif);
      }
#endif /* LWIP_IGMP */
    }
  }
}
    29f4:	bf00      	nop
    29f6:	3708      	adds	r7, #8
    29f8:	46bd      	mov	sp, r7
    29fa:	bd80      	pop	{r7, pc}

000029fc <tcp_tmr>:
 * Called periodically to dispatch TCP timers.
 *
 */
void
tcp_tmr(void)
{
    29fc:	b580      	push	{r7, lr}
    29fe:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
    2a00:	f000 fd2c 	bl	345c <tcp_fasttmr>

  if (++tcp_timer & 1) {
    2a04:	4b07      	ldr	r3, [pc, #28]	; (2a24 <tcp_tmr+0x28>)
    2a06:	781b      	ldrb	r3, [r3, #0]
    2a08:	3301      	adds	r3, #1
    2a0a:	b2da      	uxtb	r2, r3
    2a0c:	4b05      	ldr	r3, [pc, #20]	; (2a24 <tcp_tmr+0x28>)
    2a0e:	701a      	strb	r2, [r3, #0]
    2a10:	4b04      	ldr	r3, [pc, #16]	; (2a24 <tcp_tmr+0x28>)
    2a12:	781b      	ldrb	r3, [r3, #0]
    2a14:	f003 0301 	and.w	r3, r3, #1
    2a18:	2b00      	cmp	r3, #0
    2a1a:	d001      	beq.n	2a20 <tcp_tmr+0x24>
    /* Call tcp_tmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
    2a1c:	f000 fb1e 	bl	305c <tcp_slowtmr>
  }
}
    2a20:	bf00      	nop
    2a22:	bd80      	pop	{r7, pc}
    2a24:	100011ec 	.word	0x100011ec

00002a28 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
    2a28:	b5b0      	push	{r4, r5, r7, lr}
    2a2a:	b086      	sub	sp, #24
    2a2c:	af02      	add	r7, sp, #8
    2a2e:	6078      	str	r0, [r7, #4]
    2a30:	460b      	mov	r3, r1
    2a32:	70fb      	strb	r3, [r7, #3]
  err_t err;

  if (rst_on_unacked_data && (pcb->state != LISTEN)) {
    2a34:	78fb      	ldrb	r3, [r7, #3]
    2a36:	2b00      	cmp	r3, #0
    2a38:	d057      	beq.n	2aea <tcp_close_shutdown+0xc2>
    2a3a:	687b      	ldr	r3, [r7, #4]
    2a3c:	7c1b      	ldrb	r3, [r3, #16]
    2a3e:	2b01      	cmp	r3, #1
    2a40:	d053      	beq.n	2aea <tcp_close_shutdown+0xc2>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND)) {
    2a42:	687b      	ldr	r3, [r7, #4]
    2a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    2a48:	2b00      	cmp	r3, #0
    2a4a:	d104      	bne.n	2a56 <tcp_close_shutdown+0x2e>
    2a4c:	687b      	ldr	r3, [r7, #4]
    2a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2a50:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
    2a54:	d049      	beq.n	2aea <tcp_close_shutdown+0xc2>
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
    2a56:	687b      	ldr	r3, [r7, #4]
    2a58:	6d98      	ldr	r0, [r3, #88]	; 0x58
    2a5a:	687b      	ldr	r3, [r7, #4]
    2a5c:	6a59      	ldr	r1, [r3, #36]	; 0x24
    2a5e:	687c      	ldr	r4, [r7, #4]
    2a60:	687b      	ldr	r3, [r7, #4]
    2a62:	1d1d      	adds	r5, r3, #4
    2a64:	687b      	ldr	r3, [r7, #4]
    2a66:	8b9b      	ldrh	r3, [r3, #28]
    2a68:	687a      	ldr	r2, [r7, #4]
    2a6a:	8bd2      	ldrh	r2, [r2, #30]
    2a6c:	9201      	str	r2, [sp, #4]
    2a6e:	9300      	str	r3, [sp, #0]
    2a70:	462b      	mov	r3, r5
    2a72:	4622      	mov	r2, r4
    2a74:	f001 fc90 	bl	4398 <tcp_rst>
        pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
    2a78:	6878      	ldr	r0, [r7, #4]
    2a7a:	f000 ff2b 	bl	38d4 <tcp_pcb_purge>

      /* TODO: to which state do we move now? */

      /* move to TIME_WAIT since we close actively */
      TCP_RMV(&tcp_active_pcbs, pcb);
    2a7e:	4b6b      	ldr	r3, [pc, #428]	; (2c2c <tcp_close_shutdown+0x204>)
    2a80:	681a      	ldr	r2, [r3, #0]
    2a82:	687b      	ldr	r3, [r7, #4]
    2a84:	429a      	cmp	r2, r3
    2a86:	d105      	bne.n	2a94 <tcp_close_shutdown+0x6c>
    2a88:	4b68      	ldr	r3, [pc, #416]	; (2c2c <tcp_close_shutdown+0x204>)
    2a8a:	681b      	ldr	r3, [r3, #0]
    2a8c:	68db      	ldr	r3, [r3, #12]
    2a8e:	4a67      	ldr	r2, [pc, #412]	; (2c2c <tcp_close_shutdown+0x204>)
    2a90:	6013      	str	r3, [r2, #0]
    2a92:	e019      	b.n	2ac8 <tcp_close_shutdown+0xa0>
    2a94:	4b65      	ldr	r3, [pc, #404]	; (2c2c <tcp_close_shutdown+0x204>)
    2a96:	681b      	ldr	r3, [r3, #0]
    2a98:	4a65      	ldr	r2, [pc, #404]	; (2c30 <tcp_close_shutdown+0x208>)
    2a9a:	6013      	str	r3, [r2, #0]
    2a9c:	e010      	b.n	2ac0 <tcp_close_shutdown+0x98>
    2a9e:	4b64      	ldr	r3, [pc, #400]	; (2c30 <tcp_close_shutdown+0x208>)
    2aa0:	681b      	ldr	r3, [r3, #0]
    2aa2:	68da      	ldr	r2, [r3, #12]
    2aa4:	687b      	ldr	r3, [r7, #4]
    2aa6:	429a      	cmp	r2, r3
    2aa8:	d105      	bne.n	2ab6 <tcp_close_shutdown+0x8e>
    2aaa:	4b61      	ldr	r3, [pc, #388]	; (2c30 <tcp_close_shutdown+0x208>)
    2aac:	681b      	ldr	r3, [r3, #0]
    2aae:	687a      	ldr	r2, [r7, #4]
    2ab0:	68d2      	ldr	r2, [r2, #12]
    2ab2:	60da      	str	r2, [r3, #12]
    2ab4:	e008      	b.n	2ac8 <tcp_close_shutdown+0xa0>
    2ab6:	4b5e      	ldr	r3, [pc, #376]	; (2c30 <tcp_close_shutdown+0x208>)
    2ab8:	681b      	ldr	r3, [r3, #0]
    2aba:	68db      	ldr	r3, [r3, #12]
    2abc:	4a5c      	ldr	r2, [pc, #368]	; (2c30 <tcp_close_shutdown+0x208>)
    2abe:	6013      	str	r3, [r2, #0]
    2ac0:	4b5b      	ldr	r3, [pc, #364]	; (2c30 <tcp_close_shutdown+0x208>)
    2ac2:	681b      	ldr	r3, [r3, #0]
    2ac4:	2b00      	cmp	r3, #0
    2ac6:	d1ea      	bne.n	2a9e <tcp_close_shutdown+0x76>
    2ac8:	687b      	ldr	r3, [r7, #4]
    2aca:	2200      	movs	r2, #0
    2acc:	60da      	str	r2, [r3, #12]
      pcb->state = TIME_WAIT;
    2ace:	687b      	ldr	r3, [r7, #4]
    2ad0:	220a      	movs	r2, #10
    2ad2:	741a      	strb	r2, [r3, #16]
      TCP_REG(&tcp_tw_pcbs, pcb);
    2ad4:	4b57      	ldr	r3, [pc, #348]	; (2c34 <tcp_close_shutdown+0x20c>)
    2ad6:	681a      	ldr	r2, [r3, #0]
    2ad8:	687b      	ldr	r3, [r7, #4]
    2ada:	60da      	str	r2, [r3, #12]
    2adc:	4a55      	ldr	r2, [pc, #340]	; (2c34 <tcp_close_shutdown+0x20c>)
    2ade:	687b      	ldr	r3, [r7, #4]
    2ae0:	6013      	str	r3, [r2, #0]
    2ae2:	f004 fa69 	bl	6fb8 <tcp_timer_needed>

      return ERR_OK;
    2ae6:	2300      	movs	r3, #0
    2ae8:	e09c      	b.n	2c24 <tcp_close_shutdown+0x1fc>
    }
  }

  switch (pcb->state) {
    2aea:	687b      	ldr	r3, [r7, #4]
    2aec:	7c1b      	ldrb	r3, [r3, #16]
    2aee:	2b07      	cmp	r3, #7
    2af0:	f200 8084 	bhi.w	2bfc <tcp_close_shutdown+0x1d4>
    2af4:	a201      	add	r2, pc, #4	; (adr r2, 2afc <tcp_close_shutdown+0xd4>)
    2af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2afa:	bf00      	nop
    2afc:	00002b1d 	.word	0x00002b1d
    2b00:	00002b87 	.word	0x00002b87
    2b04:	00002ba1 	.word	0x00002ba1
    2b08:	00002bbb 	.word	0x00002bbb
    2b0c:	00002bd1 	.word	0x00002bd1
    2b10:	00002bfd 	.word	0x00002bfd
    2b14:	00002bfd 	.word	0x00002bfd
    2b18:	00002be7 	.word	0x00002be7
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state 
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    err = ERR_OK;
    2b1c:	2300      	movs	r3, #0
    2b1e:	60fb      	str	r3, [r7, #12]
    if (pcb->local_port != 0) {
    2b20:	687b      	ldr	r3, [r7, #4]
    2b22:	8b9b      	ldrh	r3, [r3, #28]
    2b24:	2b00      	cmp	r3, #0
    2b26:	d027      	beq.n	2b78 <tcp_close_shutdown+0x150>
      TCP_RMV(&tcp_bound_pcbs, pcb);
    2b28:	4b43      	ldr	r3, [pc, #268]	; (2c38 <tcp_close_shutdown+0x210>)
    2b2a:	681a      	ldr	r2, [r3, #0]
    2b2c:	687b      	ldr	r3, [r7, #4]
    2b2e:	429a      	cmp	r2, r3
    2b30:	d105      	bne.n	2b3e <tcp_close_shutdown+0x116>
    2b32:	4b41      	ldr	r3, [pc, #260]	; (2c38 <tcp_close_shutdown+0x210>)
    2b34:	681b      	ldr	r3, [r3, #0]
    2b36:	68db      	ldr	r3, [r3, #12]
    2b38:	4a3f      	ldr	r2, [pc, #252]	; (2c38 <tcp_close_shutdown+0x210>)
    2b3a:	6013      	str	r3, [r2, #0]
    2b3c:	e019      	b.n	2b72 <tcp_close_shutdown+0x14a>
    2b3e:	4b3e      	ldr	r3, [pc, #248]	; (2c38 <tcp_close_shutdown+0x210>)
    2b40:	681b      	ldr	r3, [r3, #0]
    2b42:	4a3b      	ldr	r2, [pc, #236]	; (2c30 <tcp_close_shutdown+0x208>)
    2b44:	6013      	str	r3, [r2, #0]
    2b46:	e010      	b.n	2b6a <tcp_close_shutdown+0x142>
    2b48:	4b39      	ldr	r3, [pc, #228]	; (2c30 <tcp_close_shutdown+0x208>)
    2b4a:	681b      	ldr	r3, [r3, #0]
    2b4c:	68da      	ldr	r2, [r3, #12]
    2b4e:	687b      	ldr	r3, [r7, #4]
    2b50:	429a      	cmp	r2, r3
    2b52:	d105      	bne.n	2b60 <tcp_close_shutdown+0x138>
    2b54:	4b36      	ldr	r3, [pc, #216]	; (2c30 <tcp_close_shutdown+0x208>)
    2b56:	681b      	ldr	r3, [r3, #0]
    2b58:	687a      	ldr	r2, [r7, #4]
    2b5a:	68d2      	ldr	r2, [r2, #12]
    2b5c:	60da      	str	r2, [r3, #12]
    2b5e:	e008      	b.n	2b72 <tcp_close_shutdown+0x14a>
    2b60:	4b33      	ldr	r3, [pc, #204]	; (2c30 <tcp_close_shutdown+0x208>)
    2b62:	681b      	ldr	r3, [r3, #0]
    2b64:	68db      	ldr	r3, [r3, #12]
    2b66:	4a32      	ldr	r2, [pc, #200]	; (2c30 <tcp_close_shutdown+0x208>)
    2b68:	6013      	str	r3, [r2, #0]
    2b6a:	4b31      	ldr	r3, [pc, #196]	; (2c30 <tcp_close_shutdown+0x208>)
    2b6c:	681b      	ldr	r3, [r3, #0]
    2b6e:	2b00      	cmp	r3, #0
    2b70:	d1ea      	bne.n	2b48 <tcp_close_shutdown+0x120>
    2b72:	687b      	ldr	r3, [r7, #4]
    2b74:	2200      	movs	r2, #0
    2b76:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
    2b78:	6879      	ldr	r1, [r7, #4]
    2b7a:	2002      	movs	r0, #2
    2b7c:	f7ff fdf8 	bl	2770 <memp_free>
    pcb = NULL;
    2b80:	2300      	movs	r3, #0
    2b82:	607b      	str	r3, [r7, #4]
    break;
    2b84:	e044      	b.n	2c10 <tcp_close_shutdown+0x1e8>
  case LISTEN:
    err = ERR_OK;
    2b86:	2300      	movs	r3, #0
    2b88:	60fb      	str	r3, [r7, #12]
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
    2b8a:	6879      	ldr	r1, [r7, #4]
    2b8c:	482b      	ldr	r0, [pc, #172]	; (2c3c <tcp_close_shutdown+0x214>)
    2b8e:	f000 fee5 	bl	395c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
    2b92:	6879      	ldr	r1, [r7, #4]
    2b94:	2003      	movs	r0, #3
    2b96:	f7ff fdeb 	bl	2770 <memp_free>
    pcb = NULL;
    2b9a:	2300      	movs	r3, #0
    2b9c:	607b      	str	r3, [r7, #4]
    break;
    2b9e:	e037      	b.n	2c10 <tcp_close_shutdown+0x1e8>
  case SYN_SENT:
    err = ERR_OK;
    2ba0:	2300      	movs	r3, #0
    2ba2:	60fb      	str	r3, [r7, #12]
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
    2ba4:	6879      	ldr	r1, [r7, #4]
    2ba6:	4821      	ldr	r0, [pc, #132]	; (2c2c <tcp_close_shutdown+0x204>)
    2ba8:	f000 fed8 	bl	395c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
    2bac:	6879      	ldr	r1, [r7, #4]
    2bae:	2002      	movs	r0, #2
    2bb0:	f7ff fdde 	bl	2770 <memp_free>
    pcb = NULL;
    2bb4:	2300      	movs	r3, #0
    2bb6:	607b      	str	r3, [r7, #4]
    snmp_inc_tcpattemptfails();
    break;
    2bb8:	e02a      	b.n	2c10 <tcp_close_shutdown+0x1e8>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
    2bba:	6878      	ldr	r0, [r7, #4]
    2bbc:	f000 ffc2 	bl	3b44 <tcp_send_fin>
    2bc0:	60f8      	str	r0, [r7, #12]
    if (err == ERR_OK) {
    2bc2:	68fb      	ldr	r3, [r7, #12]
    2bc4:	2b00      	cmp	r3, #0
    2bc6:	d11e      	bne.n	2c06 <tcp_close_shutdown+0x1de>
      snmp_inc_tcpattemptfails();
      pcb->state = FIN_WAIT_1;
    2bc8:	687b      	ldr	r3, [r7, #4]
    2bca:	2205      	movs	r2, #5
    2bcc:	741a      	strb	r2, [r3, #16]
    }
    break;
    2bce:	e01a      	b.n	2c06 <tcp_close_shutdown+0x1de>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
    2bd0:	6878      	ldr	r0, [r7, #4]
    2bd2:	f000 ffb7 	bl	3b44 <tcp_send_fin>
    2bd6:	60f8      	str	r0, [r7, #12]
    if (err == ERR_OK) {
    2bd8:	68fb      	ldr	r3, [r7, #12]
    2bda:	2b00      	cmp	r3, #0
    2bdc:	d115      	bne.n	2c0a <tcp_close_shutdown+0x1e2>
      snmp_inc_tcpestabresets();
      pcb->state = FIN_WAIT_1;
    2bde:	687b      	ldr	r3, [r7, #4]
    2be0:	2205      	movs	r2, #5
    2be2:	741a      	strb	r2, [r3, #16]
    }
    break;
    2be4:	e011      	b.n	2c0a <tcp_close_shutdown+0x1e2>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
    2be6:	6878      	ldr	r0, [r7, #4]
    2be8:	f000 ffac 	bl	3b44 <tcp_send_fin>
    2bec:	60f8      	str	r0, [r7, #12]
    if (err == ERR_OK) {
    2bee:	68fb      	ldr	r3, [r7, #12]
    2bf0:	2b00      	cmp	r3, #0
    2bf2:	d10c      	bne.n	2c0e <tcp_close_shutdown+0x1e6>
      snmp_inc_tcpestabresets();
      pcb->state = LAST_ACK;
    2bf4:	687b      	ldr	r3, [r7, #4]
    2bf6:	2209      	movs	r2, #9
    2bf8:	741a      	strb	r2, [r3, #16]
    }
    break;
    2bfa:	e008      	b.n	2c0e <tcp_close_shutdown+0x1e6>
  default:
    /* Has already been closed, do nothing. */
    err = ERR_OK;
    2bfc:	2300      	movs	r3, #0
    2bfe:	60fb      	str	r3, [r7, #12]
    pcb = NULL;
    2c00:	2300      	movs	r3, #0
    2c02:	607b      	str	r3, [r7, #4]
    break;
    2c04:	e004      	b.n	2c10 <tcp_close_shutdown+0x1e8>
    err = tcp_send_fin(pcb);
    if (err == ERR_OK) {
      snmp_inc_tcpattemptfails();
      pcb->state = FIN_WAIT_1;
    }
    break;
    2c06:	bf00      	nop
    2c08:	e002      	b.n	2c10 <tcp_close_shutdown+0x1e8>
    err = tcp_send_fin(pcb);
    if (err == ERR_OK) {
      snmp_inc_tcpestabresets();
      pcb->state = FIN_WAIT_1;
    }
    break;
    2c0a:	bf00      	nop
    2c0c:	e000      	b.n	2c10 <tcp_close_shutdown+0x1e8>
    err = tcp_send_fin(pcb);
    if (err == ERR_OK) {
      snmp_inc_tcpestabresets();
      pcb->state = LAST_ACK;
    }
    break;
    2c0e:	bf00      	nop
    err = ERR_OK;
    pcb = NULL;
    break;
  }

  if (pcb != NULL && err == ERR_OK) {
    2c10:	687b      	ldr	r3, [r7, #4]
    2c12:	2b00      	cmp	r3, #0
    2c14:	d005      	beq.n	2c22 <tcp_close_shutdown+0x1fa>
    2c16:	68fb      	ldr	r3, [r7, #12]
    2c18:	2b00      	cmp	r3, #0
    2c1a:	d102      	bne.n	2c22 <tcp_close_shutdown+0x1fa>
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    /* @todo: When implementing SO_LINGER, this must be changed somehow:
       If SOF_LINGER is set, the data should be sent and acked before close returns.
       This can only be valid for sequential APIs, not for the raw API. */
    tcp_output(pcb);
    2c1c:	6878      	ldr	r0, [r7, #4]
    2c1e:	f001 f993 	bl	3f48 <tcp_output>
  }
  return err;
    2c22:	68fb      	ldr	r3, [r7, #12]
}
    2c24:	4618      	mov	r0, r3
    2c26:	3710      	adds	r7, #16
    2c28:	46bd      	mov	sp, r7
    2c2a:	bdb0      	pop	{r4, r5, r7, pc}
    2c2c:	10001960 	.word	0x10001960
    2c30:	1000196c 	.word	0x1000196c
    2c34:	10001974 	.word	0x10001974
    2c38:	10001970 	.word	0x10001970
    2c3c:	10001968 	.word	0x10001968

00002c40 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
    2c40:	b580      	push	{r7, lr}
    2c42:	b082      	sub	sp, #8
    2c44:	af00      	add	r7, sp, #0
    2c46:	6078      	str	r0, [r7, #4]
#if TCP_DEBUG
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);
#endif /* TCP_DEBUG */

  if (pcb->state != LISTEN) {
    2c48:	687b      	ldr	r3, [r7, #4]
    2c4a:	7c1b      	ldrb	r3, [r3, #16]
    2c4c:	2b01      	cmp	r3, #1
    2c4e:	d008      	beq.n	2c62 <tcp_close+0x22>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
    2c50:	687b      	ldr	r3, [r7, #4]
    2c52:	f893 3020 	ldrb.w	r3, [r3, #32]
    2c56:	f043 0310 	orr.w	r3, r3, #16
    2c5a:	b2da      	uxtb	r2, r3
    2c5c:	687b      	ldr	r3, [r7, #4]
    2c5e:	f883 2020 	strb.w	r2, [r3, #32]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
    2c62:	2101      	movs	r1, #1
    2c64:	6878      	ldr	r0, [r7, #4]
    2c66:	f7ff fedf 	bl	2a28 <tcp_close_shutdown>
    2c6a:	4603      	mov	r3, r0
}
    2c6c:	4618      	mov	r0, r3
    2c6e:	3708      	adds	r7, #8
    2c70:	46bd      	mov	sp, r7
    2c72:	bd80      	pop	{r7, pc}

00002c74 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
    2c74:	b580      	push	{r7, lr}
    2c76:	b08c      	sub	sp, #48	; 0x30
    2c78:	af02      	add	r7, sp, #8
    2c7a:	6078      	str	r0, [r7, #4]
    2c7c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
    2c7e:	687b      	ldr	r3, [r7, #4]
    2c80:	7c1b      	ldrb	r3, [r3, #16]
    2c82:	2b0a      	cmp	r3, #10
    2c84:	d108      	bne.n	2c98 <tcp_abandon+0x24>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
    2c86:	6879      	ldr	r1, [r7, #4]
    2c88:	482f      	ldr	r0, [pc, #188]	; (2d48 <tcp_abandon+0xd4>)
    2c8a:	f000 fe67 	bl	395c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
    2c8e:	6879      	ldr	r1, [r7, #4]
    2c90:	2002      	movs	r0, #2
    2c92:	f7ff fd6d 	bl	2770 <memp_free>
    if (reset) {
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(seqno, ackno, &local_ip, &remote_ip, local_port, remote_port);
    }
  }
}
    2c96:	e053      	b.n	2d40 <tcp_abandon+0xcc>
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
    memp_free(MEMP_TCP_PCB, pcb);
  } else {
    seqno = pcb->snd_nxt;
    2c98:	687b      	ldr	r3, [r7, #4]
    2c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2c9c:	627b      	str	r3, [r7, #36]	; 0x24
    ackno = pcb->rcv_nxt;
    2c9e:	687b      	ldr	r3, [r7, #4]
    2ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2ca2:	623b      	str	r3, [r7, #32]
    ip_addr_copy(local_ip, pcb->local_ip);
    2ca4:	687b      	ldr	r3, [r7, #4]
    2ca6:	681b      	ldr	r3, [r3, #0]
    2ca8:	60fb      	str	r3, [r7, #12]
    ip_addr_copy(remote_ip, pcb->remote_ip);
    2caa:	687b      	ldr	r3, [r7, #4]
    2cac:	685b      	ldr	r3, [r3, #4]
    2cae:	613b      	str	r3, [r7, #16]
    local_port = pcb->local_port;
    2cb0:	687b      	ldr	r3, [r7, #4]
    2cb2:	8b9b      	ldrh	r3, [r3, #28]
    2cb4:	83fb      	strh	r3, [r7, #30]
    remote_port = pcb->remote_port;
    2cb6:	687b      	ldr	r3, [r7, #4]
    2cb8:	8bdb      	ldrh	r3, [r3, #30]
    2cba:	83bb      	strh	r3, [r7, #28]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
    2cbc:	687b      	ldr	r3, [r7, #4]
    2cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    2cc2:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
    2cc4:	687b      	ldr	r3, [r7, #4]
    2cc6:	695b      	ldr	r3, [r3, #20]
    2cc8:	617b      	str	r3, [r7, #20]
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
    2cca:	6879      	ldr	r1, [r7, #4]
    2ccc:	481f      	ldr	r0, [pc, #124]	; (2d4c <tcp_abandon+0xd8>)
    2cce:	f000 fe45 	bl	395c <tcp_pcb_remove>
    if (pcb->unacked != NULL) {
    2cd2:	687b      	ldr	r3, [r7, #4]
    2cd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    2cd6:	2b00      	cmp	r3, #0
    2cd8:	d004      	beq.n	2ce4 <tcp_abandon+0x70>
      tcp_segs_free(pcb->unacked);
    2cda:	687b      	ldr	r3, [r7, #4]
    2cdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    2cde:	4618      	mov	r0, r3
    2ce0:	f000 fc1e 	bl	3520 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
    2ce4:	687b      	ldr	r3, [r7, #4]
    2ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    2ce8:	2b00      	cmp	r3, #0
    2cea:	d004      	beq.n	2cf6 <tcp_abandon+0x82>
      tcp_segs_free(pcb->unsent);
    2cec:	687b      	ldr	r3, [r7, #4]
    2cee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    2cf0:	4618      	mov	r0, r3
    2cf2:	f000 fc15 	bl	3520 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ    
    if (pcb->ooseq != NULL) {
    2cf6:	687b      	ldr	r3, [r7, #4]
    2cf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    2cfa:	2b00      	cmp	r3, #0
    2cfc:	d004      	beq.n	2d08 <tcp_abandon+0x94>
      tcp_segs_free(pcb->ooseq);
    2cfe:	687b      	ldr	r3, [r7, #4]
    2d00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    2d02:	4618      	mov	r0, r3
    2d04:	f000 fc0c 	bl	3520 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    memp_free(MEMP_TCP_PCB, pcb);
    2d08:	6879      	ldr	r1, [r7, #4]
    2d0a:	2002      	movs	r0, #2
    2d0c:	f7ff fd30 	bl	2770 <memp_free>
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
    2d10:	69bb      	ldr	r3, [r7, #24]
    2d12:	2b00      	cmp	r3, #0
    2d14:	d004      	beq.n	2d20 <tcp_abandon+0xac>
    2d16:	69bb      	ldr	r3, [r7, #24]
    2d18:	f06f 0109 	mvn.w	r1, #9
    2d1c:	6978      	ldr	r0, [r7, #20]
    2d1e:	4798      	blx	r3
    if (reset) {
    2d20:	683b      	ldr	r3, [r7, #0]
    2d22:	2b00      	cmp	r3, #0
    2d24:	d00c      	beq.n	2d40 <tcp_abandon+0xcc>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(seqno, ackno, &local_ip, &remote_ip, local_port, remote_port);
    2d26:	f107 0110 	add.w	r1, r7, #16
    2d2a:	f107 020c 	add.w	r2, r7, #12
    2d2e:	8bbb      	ldrh	r3, [r7, #28]
    2d30:	9301      	str	r3, [sp, #4]
    2d32:	8bfb      	ldrh	r3, [r7, #30]
    2d34:	9300      	str	r3, [sp, #0]
    2d36:	460b      	mov	r3, r1
    2d38:	6a39      	ldr	r1, [r7, #32]
    2d3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
    2d3c:	f001 fb2c 	bl	4398 <tcp_rst>
    }
  }
}
    2d40:	bf00      	nop
    2d42:	3728      	adds	r7, #40	; 0x28
    2d44:	46bd      	mov	sp, r7
    2d46:	bd80      	pop	{r7, pc}
    2d48:	10001974 	.word	0x10001974
    2d4c:	10001960 	.word	0x10001960

00002d50 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
    2d50:	b580      	push	{r7, lr}
    2d52:	b082      	sub	sp, #8
    2d54:	af00      	add	r7, sp, #0
    2d56:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
    2d58:	2101      	movs	r1, #1
    2d5a:	6878      	ldr	r0, [r7, #4]
    2d5c:	f7ff ff8a 	bl	2c74 <tcp_abandon>
}
    2d60:	bf00      	nop
    2d62:	3708      	adds	r7, #8
    2d64:	46bd      	mov	sp, r7
    2d66:	bd80      	pop	{r7, pc}

00002d68 <tcp_update_rcv_ann_wnd>:
 *
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
    2d68:	b480      	push	{r7}
    2d6a:	b085      	sub	sp, #20
    2d6c:	af00      	add	r7, sp, #0
    2d6e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
    2d70:	687b      	ldr	r3, [r7, #4]
    2d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2d74:	687a      	ldr	r2, [r7, #4]
    2d76:	8d12      	ldrh	r2, [r2, #40]	; 0x28
    2d78:	4413      	add	r3, r2
    2d7a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
    2d7c:	687b      	ldr	r3, [r7, #4]
    2d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2d80:	687a      	ldr	r2, [r7, #4]
    2d82:	8f12      	ldrh	r2, [r2, #56]	; 0x38
    2d84:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
    2d88:	d802      	bhi.n	2d90 <tcp_update_rcv_ann_wnd+0x28>
    2d8a:	687a      	ldr	r2, [r7, #4]
    2d8c:	8f12      	ldrh	r2, [r2, #56]	; 0x38
    2d8e:	e001      	b.n	2d94 <tcp_update_rcv_ann_wnd+0x2c>
    2d90:	f44f 6286 	mov.w	r2, #1072	; 0x430
    2d94:	4413      	add	r3, r2
    2d96:	68fa      	ldr	r2, [r7, #12]
    2d98:	1ad3      	subs	r3, r2, r3
    2d9a:	2b00      	cmp	r3, #0
    2d9c:	db08      	blt.n	2db0 <tcp_update_rcv_ann_wnd+0x48>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
    2d9e:	687b      	ldr	r3, [r7, #4]
    2da0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    2da2:	687b      	ldr	r3, [r7, #4]
    2da4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
    2da6:	687b      	ldr	r3, [r7, #4]
    2da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2daa:	68fa      	ldr	r2, [r7, #12]
    2dac:	1ad3      	subs	r3, r2, r3
    2dae:	e015      	b.n	2ddc <tcp_update_rcv_ann_wnd+0x74>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
    2db0:	687b      	ldr	r3, [r7, #4]
    2db2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2db4:	687b      	ldr	r3, [r7, #4]
    2db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2db8:	1ad3      	subs	r3, r2, r3
    2dba:	2b00      	cmp	r3, #0
    2dbc:	dd03      	ble.n	2dc6 <tcp_update_rcv_ann_wnd+0x5e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
    2dbe:	687b      	ldr	r3, [r7, #4]
    2dc0:	2200      	movs	r2, #0
    2dc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    2dc4:	e009      	b.n	2dda <tcp_update_rcv_ann_wnd+0x72>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
    2dc6:	687b      	ldr	r3, [r7, #4]
    2dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2dca:	687b      	ldr	r3, [r7, #4]
    2dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2dce:	1ad3      	subs	r3, r2, r3
    2dd0:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
      pcb->rcv_ann_wnd = (u16_t)new_rcv_ann_wnd;
    2dd2:	68bb      	ldr	r3, [r7, #8]
    2dd4:	b29a      	uxth	r2, r3
    2dd6:	687b      	ldr	r3, [r7, #4]
    2dd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
    2dda:	2300      	movs	r3, #0
  }
}
    2ddc:	4618      	mov	r0, r3
    2dde:	3714      	adds	r7, #20
    2de0:	46bd      	mov	sp, r7
    2de2:	bc80      	pop	{r7}
    2de4:	4770      	bx	lr
    2de6:	bf00      	nop

00002de8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
    2de8:	b580      	push	{r7, lr}
    2dea:	b084      	sub	sp, #16
    2dec:	af00      	add	r7, sp, #0
    2dee:	6078      	str	r0, [r7, #4]
    2df0:	460b      	mov	r3, r1
    2df2:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  LWIP_ASSERT("tcp_recved: len would wrap rcv_wnd\n",
              len <= 0xffff - pcb->rcv_wnd );

  pcb->rcv_wnd += len;
    2df4:	687b      	ldr	r3, [r7, #4]
    2df6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    2df8:	887b      	ldrh	r3, [r7, #2]
    2dfa:	4413      	add	r3, r2
    2dfc:	b29a      	uxth	r2, r3
    2dfe:	687b      	ldr	r3, [r7, #4]
    2e00:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND) {
    2e02:	687b      	ldr	r3, [r7, #4]
    2e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2e06:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
    2e0a:	d903      	bls.n	2e14 <tcp_recved+0x2c>
    pcb->rcv_wnd = TCP_WND;
    2e0c:	687b      	ldr	r3, [r7, #4]
    2e0e:	f44f 6206 	mov.w	r2, #2144	; 0x860
    2e12:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
    2e14:	6878      	ldr	r0, [r7, #4]
    2e16:	f7ff ffa7 	bl	2d68 <tcp_update_rcv_ann_wnd>
    2e1a:	4603      	mov	r3, r0
    2e1c:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
    2e1e:	68fb      	ldr	r3, [r7, #12]
    2e20:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
    2e24:	db0b      	blt.n	2e3e <tcp_recved+0x56>
    tcp_ack_now(pcb);
    2e26:	687b      	ldr	r3, [r7, #4]
    2e28:	f893 3020 	ldrb.w	r3, [r3, #32]
    2e2c:	f043 0302 	orr.w	r3, r3, #2
    2e30:	b2da      	uxtb	r2, r3
    2e32:	687b      	ldr	r3, [r7, #4]
    2e34:	f883 2020 	strb.w	r2, [r3, #32]
    tcp_output(pcb);
    2e38:	6878      	ldr	r0, [r7, #4]
    2e3a:	f001 f885 	bl	3f48 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: recveived %"U16_F" bytes, wnd %"U16_F" (%"U16_F").\n",
         len, pcb->rcv_wnd, TCP_WND - pcb->rcv_wnd));
}
    2e3e:	bf00      	nop
    2e40:	3710      	adds	r7, #16
    2e42:	46bd      	mov	sp, r7
    2e44:	bd80      	pop	{r7, pc}
    2e46:	bf00      	nop

00002e48 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
    2e48:	b480      	push	{r7}
    2e4a:	b083      	sub	sp, #12
    2e4c:	af00      	add	r7, sp, #0
#define TCP_LOCAL_PORT_RANGE_END    0xffff
#endif
  static u16_t port = TCP_LOCAL_PORT_RANGE_START;
  
 again:
  if (port++ >= TCP_LOCAL_PORT_RANGE_END) {
    2e4e:	4b19      	ldr	r3, [pc, #100]	; (2eb4 <tcp_new_port+0x6c>)
    2e50:	881b      	ldrh	r3, [r3, #0]
    2e52:	1c5a      	adds	r2, r3, #1
    2e54:	b291      	uxth	r1, r2
    2e56:	4a17      	ldr	r2, [pc, #92]	; (2eb4 <tcp_new_port+0x6c>)
    2e58:	8011      	strh	r1, [r2, #0]
    2e5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2e5e:	4293      	cmp	r3, r2
    2e60:	d103      	bne.n	2e6a <tcp_new_port+0x22>
    port = TCP_LOCAL_PORT_RANGE_START;
    2e62:	4b14      	ldr	r3, [pc, #80]	; (2eb4 <tcp_new_port+0x6c>)
    2e64:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    2e68:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    2e6a:	2300      	movs	r3, #0
    2e6c:	607b      	str	r3, [r7, #4]
    2e6e:	e016      	b.n	2e9e <tcp_new_port+0x56>
    for(pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
    2e70:	4a11      	ldr	r2, [pc, #68]	; (2eb8 <tcp_new_port+0x70>)
    2e72:	687b      	ldr	r3, [r7, #4]
    2e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2e78:	681b      	ldr	r3, [r3, #0]
    2e7a:	603b      	str	r3, [r7, #0]
    2e7c:	e009      	b.n	2e92 <tcp_new_port+0x4a>
      if (pcb->local_port == port) {
    2e7e:	683b      	ldr	r3, [r7, #0]
    2e80:	8b9a      	ldrh	r2, [r3, #28]
    2e82:	4b0c      	ldr	r3, [pc, #48]	; (2eb4 <tcp_new_port+0x6c>)
    2e84:	881b      	ldrh	r3, [r3, #0]
    2e86:	429a      	cmp	r2, r3
    2e88:	d100      	bne.n	2e8c <tcp_new_port+0x44>
        goto again;
    2e8a:	e7e0      	b.n	2e4e <tcp_new_port+0x6>
  if (port++ >= TCP_LOCAL_PORT_RANGE_END) {
    port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for(pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
    2e8c:	683b      	ldr	r3, [r7, #0]
    2e8e:	68db      	ldr	r3, [r3, #12]
    2e90:	603b      	str	r3, [r7, #0]
    2e92:	683b      	ldr	r3, [r7, #0]
    2e94:	2b00      	cmp	r3, #0
    2e96:	d1f2      	bne.n	2e7e <tcp_new_port+0x36>
 again:
  if (port++ >= TCP_LOCAL_PORT_RANGE_END) {
    port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    2e98:	687b      	ldr	r3, [r7, #4]
    2e9a:	3301      	adds	r3, #1
    2e9c:	607b      	str	r3, [r7, #4]
    2e9e:	687b      	ldr	r3, [r7, #4]
    2ea0:	2b03      	cmp	r3, #3
    2ea2:	dde5      	ble.n	2e70 <tcp_new_port+0x28>
      if (pcb->local_port == port) {
        goto again;
      }
    }
  }
  return port;
    2ea4:	4b03      	ldr	r3, [pc, #12]	; (2eb4 <tcp_new_port+0x6c>)
    2ea6:	881b      	ldrh	r3, [r3, #0]
}
    2ea8:	4618      	mov	r0, r3
    2eaa:	370c      	adds	r7, #12
    2eac:	46bd      	mov	sp, r7
    2eae:	bc80      	pop	{r7}
    2eb0:	4770      	bx	lr
    2eb2:	bf00      	nop
    2eb4:	10000008 	.word	0x10000008
    2eb8:	00009854 	.word	0x00009854

00002ebc <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, ip_addr_t *ipaddr, u16_t port,
      tcp_connected_fn connected)
{
    2ebc:	b580      	push	{r7, lr}
    2ebe:	b088      	sub	sp, #32
    2ec0:	af00      	add	r7, sp, #0
    2ec2:	60f8      	str	r0, [r7, #12]
    2ec4:	60b9      	str	r1, [r7, #8]
    2ec6:	603b      	str	r3, [r7, #0]
    2ec8:	4613      	mov	r3, r2
    2eca:	80fb      	strh	r3, [r7, #6]
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
    2ecc:	68fb      	ldr	r3, [r7, #12]
    2ece:	7c1b      	ldrb	r3, [r3, #16]
    2ed0:	2b00      	cmp	r3, #0
    2ed2:	d002      	beq.n	2eda <tcp_connect+0x1e>
    2ed4:	f06f 0308 	mvn.w	r3, #8
    2ed8:	e0b6      	b.n	3048 <tcp_connect+0x18c>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  if (ipaddr != NULL) {
    2eda:	68bb      	ldr	r3, [r7, #8]
    2edc:	2b00      	cmp	r3, #0
    2ede:	d00a      	beq.n	2ef6 <tcp_connect+0x3a>
    pcb->remote_ip = *ipaddr;
    2ee0:	68fb      	ldr	r3, [r7, #12]
    2ee2:	68ba      	ldr	r2, [r7, #8]
    2ee4:	6812      	ldr	r2, [r2, #0]
    2ee6:	605a      	str	r2, [r3, #4]
  } else {
    return ERR_VAL;
  }
  pcb->remote_port = port;
    2ee8:	68fb      	ldr	r3, [r7, #12]
    2eea:	88fa      	ldrh	r2, [r7, #6]
    2eec:	83da      	strh	r2, [r3, #30]

  /* check if we have a route to the remote host */
  if (ip_addr_isany(&(pcb->local_ip))) {
    2eee:	68fb      	ldr	r3, [r7, #12]
    2ef0:	2b00      	cmp	r3, #0
    2ef2:	d007      	beq.n	2f04 <tcp_connect+0x48>
    2ef4:	e002      	b.n	2efc <tcp_connect+0x40>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  if (ipaddr != NULL) {
    pcb->remote_ip = *ipaddr;
  } else {
    return ERR_VAL;
    2ef6:	f06f 0305 	mvn.w	r3, #5
    2efa:	e0a5      	b.n	3048 <tcp_connect+0x18c>
  }
  pcb->remote_port = port;

  /* check if we have a route to the remote host */
  if (ip_addr_isany(&(pcb->local_ip))) {
    2efc:	68fb      	ldr	r3, [r7, #12]
    2efe:	681b      	ldr	r3, [r3, #0]
    2f00:	2b00      	cmp	r3, #0
    2f02:	d10f      	bne.n	2f24 <tcp_connect+0x68>
    /* no local IP address set, yet. */
    struct netif *netif = ip_route(&(pcb->remote_ip));
    2f04:	68fb      	ldr	r3, [r7, #12]
    2f06:	3304      	adds	r3, #4
    2f08:	4618      	mov	r0, r3
    2f0a:	f004 faff 	bl	750c <ip_route>
    2f0e:	61f8      	str	r0, [r7, #28]
    if (netif == NULL) {
    2f10:	69fb      	ldr	r3, [r7, #28]
    2f12:	2b00      	cmp	r3, #0
    2f14:	d102      	bne.n	2f1c <tcp_connect+0x60>
      /* Don't even try to send a SYN packet if we have no route
         since that will fail. */
      return ERR_RTE;
    2f16:	f06f 0303 	mvn.w	r3, #3
    2f1a:	e095      	b.n	3048 <tcp_connect+0x18c>
    }
    /* Use the netif's IP address as local address. */
    ip_addr_copy(pcb->local_ip, netif->ip_addr);
    2f1c:	69fb      	ldr	r3, [r7, #28]
    2f1e:	685a      	ldr	r2, [r3, #4]
    2f20:	68fb      	ldr	r3, [r7, #12]
    2f22:	601a      	str	r2, [r3, #0]
  }

  old_local_port = pcb->local_port;
    2f24:	68fb      	ldr	r3, [r7, #12]
    2f26:	8b9b      	ldrh	r3, [r3, #28]
    2f28:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
    2f2a:	68fb      	ldr	r3, [r7, #12]
    2f2c:	8b9b      	ldrh	r3, [r3, #28]
    2f2e:	2b00      	cmp	r3, #0
    2f30:	d105      	bne.n	2f3e <tcp_connect+0x82>
    pcb->local_port = tcp_new_port();
    2f32:	f7ff ff89 	bl	2e48 <tcp_new_port>
    2f36:	4603      	mov	r3, r0
    2f38:	461a      	mov	r2, r3
    2f3a:	68fb      	ldr	r3, [r7, #12]
    2f3c:	839a      	strh	r2, [r3, #28]
        }
      }
    }
  }
#endif /* SO_REUSE */
  iss = tcp_next_iss();
    2f3e:	f000 fd65 	bl	3a0c <tcp_next_iss>
    2f42:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
    2f44:	68fb      	ldr	r3, [r7, #12]
    2f46:	2200      	movs	r2, #0
    2f48:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
    2f4a:	68fb      	ldr	r3, [r7, #12]
    2f4c:	697a      	ldr	r2, [r7, #20]
    2f4e:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->lastack = iss - 1;
    2f50:	697b      	ldr	r3, [r7, #20]
    2f52:	1e5a      	subs	r2, r3, #1
    2f54:	68fb      	ldr	r3, [r7, #12]
    2f56:	64da      	str	r2, [r3, #76]	; 0x4c
  pcb->snd_lbb = iss - 1;
    2f58:	697b      	ldr	r3, [r7, #20]
    2f5a:	1e5a      	subs	r2, r3, #1
    2f5c:	68fb      	ldr	r3, [r7, #12]
    2f5e:	669a      	str	r2, [r3, #104]	; 0x68
  pcb->rcv_wnd = TCP_WND;
    2f60:	68fb      	ldr	r3, [r7, #12]
    2f62:	f44f 6206 	mov.w	r2, #2144	; 0x860
    2f66:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_wnd = TCP_WND;
    2f68:	68fb      	ldr	r3, [r7, #12]
    2f6a:	f44f 6206 	mov.w	r2, #2144	; 0x860
    2f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
    2f70:	68fb      	ldr	r3, [r7, #12]
    2f72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2f74:	68fb      	ldr	r3, [r7, #12]
    2f76:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
    2f78:	68fb      	ldr	r3, [r7, #12]
    2f7a:	f44f 6206 	mov.w	r2, #2144	; 0x860
    2f7e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
    2f82:	68fb      	ldr	r3, [r7, #12]
    2f84:	f44f 7206 	mov.w	r2, #536	; 0x218
    2f88:	871a      	strh	r2, [r3, #56]	; 0x38
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, ipaddr);
    2f8a:	68fb      	ldr	r3, [r7, #12]
    2f8c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    2f8e:	68b9      	ldr	r1, [r7, #8]
    2f90:	4618      	mov	r0, r3
    2f92:	f000 fd4f 	bl	3a34 <tcp_eff_send_mss>
    2f96:	4603      	mov	r3, r0
    2f98:	461a      	mov	r2, r3
    2f9a:	68fb      	ldr	r3, [r7, #12]
    2f9c:	871a      	strh	r2, [r3, #56]	; 0x38
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
    2f9e:	68fb      	ldr	r3, [r7, #12]
    2fa0:	2201      	movs	r2, #1
    2fa2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  pcb->ssthresh = pcb->mss * 10;
    2fa6:	68fb      	ldr	r3, [r7, #12]
    2fa8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    2faa:	461a      	mov	r2, r3
    2fac:	0092      	lsls	r2, r2, #2
    2fae:	4413      	add	r3, r2
    2fb0:	005b      	lsls	r3, r3, #1
    2fb2:	b29a      	uxth	r2, r3
    2fb4:	68fb      	ldr	r3, [r7, #12]
    2fb6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
#if LWIP_CALLBACK_API
  pcb->connected = connected;
    2fba:	68fb      	ldr	r3, [r7, #12]
    2fbc:	683a      	ldr	r2, [r7, #0]
    2fbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */  
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
    2fc2:	2102      	movs	r1, #2
    2fc4:	68f8      	ldr	r0, [r7, #12]
    2fc6:	f000 fe81 	bl	3ccc <tcp_enqueue_flags>
    2fca:	6138      	str	r0, [r7, #16]
  if (ret == ERR_OK) {
    2fcc:	693b      	ldr	r3, [r7, #16]
    2fce:	2b00      	cmp	r3, #0
    2fd0:	d139      	bne.n	3046 <tcp_connect+0x18a>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
    2fd2:	68fb      	ldr	r3, [r7, #12]
    2fd4:	2202      	movs	r2, #2
    2fd6:	741a      	strb	r2, [r3, #16]
    if (old_local_port != 0) {
    2fd8:	8b7b      	ldrh	r3, [r7, #26]
    2fda:	2b00      	cmp	r3, #0
    2fdc:	d027      	beq.n	302e <tcp_connect+0x172>
      TCP_RMV(&tcp_bound_pcbs, pcb);
    2fde:	4b1c      	ldr	r3, [pc, #112]	; (3050 <tcp_connect+0x194>)
    2fe0:	681a      	ldr	r2, [r3, #0]
    2fe2:	68fb      	ldr	r3, [r7, #12]
    2fe4:	429a      	cmp	r2, r3
    2fe6:	d105      	bne.n	2ff4 <tcp_connect+0x138>
    2fe8:	4b19      	ldr	r3, [pc, #100]	; (3050 <tcp_connect+0x194>)
    2fea:	681b      	ldr	r3, [r3, #0]
    2fec:	68db      	ldr	r3, [r3, #12]
    2fee:	4a18      	ldr	r2, [pc, #96]	; (3050 <tcp_connect+0x194>)
    2ff0:	6013      	str	r3, [r2, #0]
    2ff2:	e019      	b.n	3028 <tcp_connect+0x16c>
    2ff4:	4b16      	ldr	r3, [pc, #88]	; (3050 <tcp_connect+0x194>)
    2ff6:	681b      	ldr	r3, [r3, #0]
    2ff8:	4a16      	ldr	r2, [pc, #88]	; (3054 <tcp_connect+0x198>)
    2ffa:	6013      	str	r3, [r2, #0]
    2ffc:	e010      	b.n	3020 <tcp_connect+0x164>
    2ffe:	4b15      	ldr	r3, [pc, #84]	; (3054 <tcp_connect+0x198>)
    3000:	681b      	ldr	r3, [r3, #0]
    3002:	68da      	ldr	r2, [r3, #12]
    3004:	68fb      	ldr	r3, [r7, #12]
    3006:	429a      	cmp	r2, r3
    3008:	d105      	bne.n	3016 <tcp_connect+0x15a>
    300a:	4b12      	ldr	r3, [pc, #72]	; (3054 <tcp_connect+0x198>)
    300c:	681b      	ldr	r3, [r3, #0]
    300e:	68fa      	ldr	r2, [r7, #12]
    3010:	68d2      	ldr	r2, [r2, #12]
    3012:	60da      	str	r2, [r3, #12]
    3014:	e008      	b.n	3028 <tcp_connect+0x16c>
    3016:	4b0f      	ldr	r3, [pc, #60]	; (3054 <tcp_connect+0x198>)
    3018:	681b      	ldr	r3, [r3, #0]
    301a:	68db      	ldr	r3, [r3, #12]
    301c:	4a0d      	ldr	r2, [pc, #52]	; (3054 <tcp_connect+0x198>)
    301e:	6013      	str	r3, [r2, #0]
    3020:	4b0c      	ldr	r3, [pc, #48]	; (3054 <tcp_connect+0x198>)
    3022:	681b      	ldr	r3, [r3, #0]
    3024:	2b00      	cmp	r3, #0
    3026:	d1ea      	bne.n	2ffe <tcp_connect+0x142>
    3028:	68fb      	ldr	r3, [r7, #12]
    302a:	2200      	movs	r2, #0
    302c:	60da      	str	r2, [r3, #12]
    }
    TCP_REG(&tcp_active_pcbs, pcb);
    302e:	4b0a      	ldr	r3, [pc, #40]	; (3058 <tcp_connect+0x19c>)
    3030:	681a      	ldr	r2, [r3, #0]
    3032:	68fb      	ldr	r3, [r7, #12]
    3034:	60da      	str	r2, [r3, #12]
    3036:	4a08      	ldr	r2, [pc, #32]	; (3058 <tcp_connect+0x19c>)
    3038:	68fb      	ldr	r3, [r7, #12]
    303a:	6013      	str	r3, [r2, #0]
    303c:	f003 ffbc 	bl	6fb8 <tcp_timer_needed>
    snmp_inc_tcpactiveopens();

    tcp_output(pcb);
    3040:	68f8      	ldr	r0, [r7, #12]
    3042:	f000 ff81 	bl	3f48 <tcp_output>
  }
  return ret;
    3046:	693b      	ldr	r3, [r7, #16]
}
    3048:	4618      	mov	r0, r3
    304a:	3720      	adds	r7, #32
    304c:	46bd      	mov	sp, r7
    304e:	bd80      	pop	{r7, pc}
    3050:	10001970 	.word	0x10001970
    3054:	1000196c 	.word	0x1000196c
    3058:	10001960 	.word	0x10001960

0000305c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
    305c:	b5b0      	push	{r4, r5, r7, lr}
    305e:	b08a      	sub	sp, #40	; 0x28
    3060:	af02      	add	r7, sp, #8
  u16_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
    3062:	2300      	movs	r3, #0
    3064:	613b      	str	r3, [r7, #16]

  ++tcp_ticks;
    3066:	4ba5      	ldr	r3, [pc, #660]	; (32fc <tcp_slowtmr+0x2a0>)
    3068:	681b      	ldr	r3, [r3, #0]
    306a:	3301      	adds	r3, #1
    306c:	4aa3      	ldr	r2, [pc, #652]	; (32fc <tcp_slowtmr+0x2a0>)
    306e:	6013      	str	r3, [r2, #0]

  /* Steps through all of the active PCBs. */
  prev = NULL;
    3070:	2300      	movs	r3, #0
    3072:	61bb      	str	r3, [r7, #24]
  pcb = tcp_active_pcbs;
    3074:	4ba2      	ldr	r3, [pc, #648]	; (3300 <tcp_slowtmr+0x2a4>)
    3076:	681b      	ldr	r3, [r3, #0]
    3078:	61fb      	str	r3, [r7, #28]
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
    307a:	e1ab      	b.n	33d4 <tcp_slowtmr+0x378>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);

    pcb_remove = 0;
    307c:	2300      	movs	r3, #0
    307e:	75fb      	strb	r3, [r7, #23]
    pcb_reset = 0;
    3080:	2300      	movs	r3, #0
    3082:	75bb      	strb	r3, [r7, #22]

    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
    3084:	69fb      	ldr	r3, [r7, #28]
    3086:	7c1b      	ldrb	r3, [r3, #16]
    3088:	2b02      	cmp	r3, #2
    308a:	d108      	bne.n	309e <tcp_slowtmr+0x42>
    308c:	69fb      	ldr	r3, [r7, #28]
    308e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
    3092:	2b06      	cmp	r3, #6
    3094:	d103      	bne.n	309e <tcp_slowtmr+0x42>
      ++pcb_remove;
    3096:	7dfb      	ldrb	r3, [r7, #23]
    3098:	3301      	adds	r3, #1
    309a:	75fb      	strb	r3, [r7, #23]
    309c:	e092      	b.n	31c4 <tcp_slowtmr+0x168>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx == TCP_MAXRTX) {
    309e:	69fb      	ldr	r3, [r7, #28]
    30a0:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
    30a4:	2b0c      	cmp	r3, #12
    30a6:	d103      	bne.n	30b0 <tcp_slowtmr+0x54>
      ++pcb_remove;
    30a8:	7dfb      	ldrb	r3, [r7, #23]
    30aa:	3301      	adds	r3, #1
    30ac:	75fb      	strb	r3, [r7, #23]
    30ae:	e089      	b.n	31c4 <tcp_slowtmr+0x168>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
    30b0:	69fb      	ldr	r3, [r7, #28]
    30b2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    30b6:	2b00      	cmp	r3, #0
    30b8:	d026      	beq.n	3108 <tcp_slowtmr+0xac>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        pcb->persist_cnt++;
    30ba:	69fb      	ldr	r3, [r7, #28]
    30bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    30c0:	1c5a      	adds	r2, r3, #1
    30c2:	69fb      	ldr	r3, [r7, #28]
    30c4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        if (pcb->persist_cnt >= tcp_persist_backoff[pcb->persist_backoff-1]) {
    30c8:	69fb      	ldr	r3, [r7, #28]
    30ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    30ce:	69fa      	ldr	r2, [r7, #28]
    30d0:	f892 20a0 	ldrb.w	r2, [r2, #160]	; 0xa0
    30d4:	3a01      	subs	r2, #1
    30d6:	498b      	ldr	r1, [pc, #556]	; (3304 <tcp_slowtmr+0x2a8>)
    30d8:	5c8a      	ldrb	r2, [r1, r2]
    30da:	4293      	cmp	r3, r2
    30dc:	d372      	bcc.n	31c4 <tcp_slowtmr+0x168>
          pcb->persist_cnt = 0;
    30de:	69fb      	ldr	r3, [r7, #28]
    30e0:	2200      	movs	r2, #0
    30e2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
          if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
    30e6:	69fb      	ldr	r3, [r7, #28]
    30e8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    30ec:	2b06      	cmp	r3, #6
    30ee:	d807      	bhi.n	3100 <tcp_slowtmr+0xa4>
            pcb->persist_backoff++;
    30f0:	69fb      	ldr	r3, [r7, #28]
    30f2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    30f6:	3301      	adds	r3, #1
    30f8:	b2da      	uxtb	r2, r3
    30fa:	69fb      	ldr	r3, [r7, #28]
    30fc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
          }
          tcp_zero_window_probe(pcb);
    3100:	69f8      	ldr	r0, [r7, #28]
    3102:	f001 facd 	bl	46a0 <tcp_zero_window_probe>
    3106:	e05d      	b.n	31c4 <tcp_slowtmr+0x168>
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if(pcb->rtime >= 0)
    3108:	69fb      	ldr	r3, [r7, #28]
    310a:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
    310e:	2b00      	cmp	r3, #0
    3110:	db08      	blt.n	3124 <tcp_slowtmr+0xc8>
          ++pcb->rtime;
    3112:	69fb      	ldr	r3, [r7, #28]
    3114:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
    3118:	b29b      	uxth	r3, r3
    311a:	3301      	adds	r3, #1
    311c:	b29b      	uxth	r3, r3
    311e:	b21a      	sxth	r2, r3
    3120:	69fb      	ldr	r3, [r7, #28]
    3122:	86da      	strh	r2, [r3, #54]	; 0x36

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
    3124:	69fb      	ldr	r3, [r7, #28]
    3126:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    3128:	2b00      	cmp	r3, #0
    312a:	d04b      	beq.n	31c4 <tcp_slowtmr+0x168>
    312c:	69fb      	ldr	r3, [r7, #28]
    312e:	f9b3 2036 	ldrsh.w	r2, [r3, #54]	; 0x36
    3132:	69fb      	ldr	r3, [r7, #28]
    3134:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
    3138:	429a      	cmp	r2, r3
    313a:	db43      	blt.n	31c4 <tcp_slowtmr+0x168>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
    313c:	69fb      	ldr	r3, [r7, #28]
    313e:	7c1b      	ldrb	r3, [r3, #16]
    3140:	2b02      	cmp	r3, #2
    3142:	d014      	beq.n	316e <tcp_slowtmr+0x112>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[pcb->nrtx];
    3144:	69fb      	ldr	r3, [r7, #28]
    3146:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
    314a:	10db      	asrs	r3, r3, #3
    314c:	b21b      	sxth	r3, r3
    314e:	461a      	mov	r2, r3
    3150:	69fb      	ldr	r3, [r7, #28]
    3152:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
    3156:	4413      	add	r3, r2
    3158:	69fa      	ldr	r2, [r7, #28]
    315a:	f892 204a 	ldrb.w	r2, [r2, #74]	; 0x4a
    315e:	4611      	mov	r1, r2
    3160:	4a69      	ldr	r2, [pc, #420]	; (3308 <tcp_slowtmr+0x2ac>)
    3162:	5c52      	ldrb	r2, [r2, r1]
    3164:	4093      	lsls	r3, r2
    3166:	b21a      	sxth	r2, r3
    3168:	69fb      	ldr	r3, [r7, #28]
    316a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
    316e:	69fb      	ldr	r3, [r7, #28]
    3170:	2200      	movs	r2, #0
    3172:	86da      	strh	r2, [r3, #54]	; 0x36

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
    3174:	69fb      	ldr	r3, [r7, #28]
    3176:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
    317a:	69fb      	ldr	r3, [r7, #28]
    317c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
    3180:	4293      	cmp	r3, r2
    3182:	bf28      	it	cs
    3184:	4613      	movcs	r3, r2
    3186:	81fb      	strh	r3, [r7, #14]
          pcb->ssthresh = eff_wnd >> 1;
    3188:	89fb      	ldrh	r3, [r7, #14]
    318a:	085b      	lsrs	r3, r3, #1
    318c:	b29a      	uxth	r2, r3
    318e:	69fb      	ldr	r3, [r7, #28]
    3190:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
          if (pcb->ssthresh < (pcb->mss << 1)) {
    3194:	69fb      	ldr	r3, [r7, #28]
    3196:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
    319a:	461a      	mov	r2, r3
    319c:	69fb      	ldr	r3, [r7, #28]
    319e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    31a0:	005b      	lsls	r3, r3, #1
    31a2:	429a      	cmp	r2, r3
    31a4:	da06      	bge.n	31b4 <tcp_slowtmr+0x158>
            pcb->ssthresh = (pcb->mss << 1);
    31a6:	69fb      	ldr	r3, [r7, #28]
    31a8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    31aa:	005b      	lsls	r3, r3, #1
    31ac:	b29a      	uxth	r2, r3
    31ae:	69fb      	ldr	r3, [r7, #28]
    31b0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
          }
          pcb->cwnd = pcb->mss;
    31b4:	69fb      	ldr	r3, [r7, #28]
    31b6:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    31b8:	69fb      	ldr	r3, [r7, #28]
    31ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
                                       " ssthresh %"U16_F"\n",
                                       pcb->cwnd, pcb->ssthresh));
 
          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
    31be:	69f8      	ldr	r0, [r7, #28]
    31c0:	f001 f95e 	bl	4480 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
    31c4:	69fb      	ldr	r3, [r7, #28]
    31c6:	7c1b      	ldrb	r3, [r3, #16]
    31c8:	2b06      	cmp	r3, #6
    31ca:	d109      	bne.n	31e0 <tcp_slowtmr+0x184>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
    31cc:	4b4b      	ldr	r3, [pc, #300]	; (32fc <tcp_slowtmr+0x2a0>)
    31ce:	681a      	ldr	r2, [r3, #0]
    31d0:	69fb      	ldr	r3, [r7, #28]
    31d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    31d4:	1ad3      	subs	r3, r2, r3
    31d6:	2b28      	cmp	r3, #40	; 0x28
    31d8:	d902      	bls.n	31e0 <tcp_slowtmr+0x184>
          TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
    31da:	7dfb      	ldrb	r3, [r7, #23]
    31dc:	3301      	adds	r3, #1
    31de:	75fb      	strb	r3, [r7, #23]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in FIN-WAIT-2\n"));
      }
    }

    /* Check if KEEPALIVE should be sent */
    if((pcb->so_options & SOF_KEEPALIVE) &&
    31e0:	69fb      	ldr	r3, [r7, #28]
    31e2:	7a1b      	ldrb	r3, [r3, #8]
    31e4:	f003 0308 	and.w	r3, r3, #8
    31e8:	2b00      	cmp	r3, #0
    31ea:	d041      	beq.n	3270 <tcp_slowtmr+0x214>
       ((pcb->state == ESTABLISHED) ||
    31ec:	69fb      	ldr	r3, [r7, #28]
    31ee:	7c1b      	ldrb	r3, [r3, #16]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in FIN-WAIT-2\n"));
      }
    }

    /* Check if KEEPALIVE should be sent */
    if((pcb->so_options & SOF_KEEPALIVE) &&
    31f0:	2b04      	cmp	r3, #4
    31f2:	d003      	beq.n	31fc <tcp_slowtmr+0x1a0>
       ((pcb->state == ESTABLISHED) ||
        (pcb->state == CLOSE_WAIT))) {
    31f4:	69fb      	ldr	r3, [r7, #28]
    31f6:	7c1b      	ldrb	r3, [r3, #16]
      }
    }

    /* Check if KEEPALIVE should be sent */
    if((pcb->so_options & SOF_KEEPALIVE) &&
       ((pcb->state == ESTABLISHED) ||
    31f8:	2b07      	cmp	r3, #7
    31fa:	d139      	bne.n	3270 <tcp_slowtmr+0x214>
#if LWIP_TCP_KEEPALIVE
      if((u32_t)(tcp_ticks - pcb->tmr) >
         (pcb->keep_idle + (pcb->keep_cnt*pcb->keep_intvl))
         / TCP_SLOW_INTERVAL)
#else      
      if((u32_t)(tcp_ticks - pcb->tmr) >
    31fc:	4b3f      	ldr	r3, [pc, #252]	; (32fc <tcp_slowtmr+0x2a0>)
    31fe:	681a      	ldr	r2, [r3, #0]
    3200:	69fb      	ldr	r3, [r7, #28]
    3202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3204:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_MAXIDLE) / TCP_SLOW_INTERVAL)
    3206:	69fb      	ldr	r3, [r7, #28]
    3208:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    320c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
    3210:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
    3214:	493d      	ldr	r1, [pc, #244]	; (330c <tcp_slowtmr+0x2b0>)
    3216:	fba1 1303 	umull	r1, r3, r1, r3
    321a:	095b      	lsrs	r3, r3, #5
#if LWIP_TCP_KEEPALIVE
      if((u32_t)(tcp_ticks - pcb->tmr) >
         (pcb->keep_idle + (pcb->keep_cnt*pcb->keep_intvl))
         / TCP_SLOW_INTERVAL)
#else      
      if((u32_t)(tcp_ticks - pcb->tmr) >
    321c:	429a      	cmp	r2, r3
    321e:	d906      	bls.n	322e <tcp_slowtmr+0x1d2>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to %"U16_F".%"U16_F".%"U16_F".%"U16_F".\n",
                                ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
                                ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip)));
        
        ++pcb_remove;
    3220:	7dfb      	ldrb	r3, [r7, #23]
    3222:	3301      	adds	r3, #1
    3224:	75fb      	strb	r3, [r7, #23]
        ++pcb_reset;
    3226:	7dbb      	ldrb	r3, [r7, #22]
    3228:	3301      	adds	r3, #1
    322a:	75bb      	strb	r3, [r7, #22]
    322c:	e020      	b.n	3270 <tcp_slowtmr+0x214>
#if LWIP_TCP_KEEPALIVE
      else if((u32_t)(tcp_ticks - pcb->tmr) > 
              (pcb->keep_idle + pcb->keep_cnt_sent * pcb->keep_intvl)
              / TCP_SLOW_INTERVAL)
#else
      else if((u32_t)(tcp_ticks - pcb->tmr) > 
    322e:	4b33      	ldr	r3, [pc, #204]	; (32fc <tcp_slowtmr+0x2a0>)
    3230:	681a      	ldr	r2, [r3, #0]
    3232:	69fb      	ldr	r3, [r7, #28]
    3234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3236:	1ad2      	subs	r2, r2, r3
              (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEPINTVL_DEFAULT) 
    3238:	69fb      	ldr	r3, [r7, #28]
    323a:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    323e:	69fb      	ldr	r3, [r7, #28]
    3240:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
    3244:	4618      	mov	r0, r3
    3246:	4b32      	ldr	r3, [pc, #200]	; (3310 <tcp_slowtmr+0x2b4>)
    3248:	fb03 f300 	mul.w	r3, r3, r0
    324c:	440b      	add	r3, r1
              / TCP_SLOW_INTERVAL)
    324e:	492f      	ldr	r1, [pc, #188]	; (330c <tcp_slowtmr+0x2b0>)
    3250:	fba1 1303 	umull	r1, r3, r1, r3
    3254:	095b      	lsrs	r3, r3, #5
#if LWIP_TCP_KEEPALIVE
      else if((u32_t)(tcp_ticks - pcb->tmr) > 
              (pcb->keep_idle + pcb->keep_cnt_sent * pcb->keep_intvl)
              / TCP_SLOW_INTERVAL)
#else
      else if((u32_t)(tcp_ticks - pcb->tmr) > 
    3256:	429a      	cmp	r2, r3
    3258:	d90a      	bls.n	3270 <tcp_slowtmr+0x214>
              (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEPINTVL_DEFAULT) 
              / TCP_SLOW_INTERVAL)
#endif /* LWIP_TCP_KEEPALIVE */
      {
        tcp_keepalive(pcb);
    325a:	69f8      	ldr	r0, [r7, #28]
    325c:	f001 f9dc 	bl	4618 <tcp_keepalive>
        pcb->keep_cnt_sent++;
    3260:	69fb      	ldr	r3, [r7, #28]
    3262:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
    3266:	3301      	adds	r3, #1
    3268:	b2da      	uxtb	r2, r3
    326a:	69fb      	ldr	r3, [r7, #28]
    326c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
    3270:	69fb      	ldr	r3, [r7, #28]
    3272:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    3274:	2b00      	cmp	r3, #0
    3276:	d016      	beq.n	32a6 <tcp_slowtmr+0x24a>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
    3278:	4b20      	ldr	r3, [pc, #128]	; (32fc <tcp_slowtmr+0x2a0>)
    327a:	681a      	ldr	r2, [r3, #0]
    327c:	69fb      	ldr	r3, [r7, #28]
    327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3280:	1ad2      	subs	r2, r2, r3
    3282:	69fb      	ldr	r3, [r7, #28]
    3284:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
    3288:	4619      	mov	r1, r3
    328a:	460b      	mov	r3, r1
    328c:	005b      	lsls	r3, r3, #1
    328e:	440b      	add	r3, r1
    3290:	005b      	lsls	r3, r3, #1

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
    3292:	429a      	cmp	r2, r3
    3294:	d307      	bcc.n	32a6 <tcp_slowtmr+0x24a>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
      tcp_segs_free(pcb->ooseq);
    3296:	69fb      	ldr	r3, [r7, #28]
    3298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    329a:	4618      	mov	r0, r3
    329c:	f000 f940 	bl	3520 <tcp_segs_free>
      pcb->ooseq = NULL;
    32a0:	69fb      	ldr	r3, [r7, #28]
    32a2:	2200      	movs	r2, #0
    32a4:	67da      	str	r2, [r3, #124]	; 0x7c
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
    32a6:	69fb      	ldr	r3, [r7, #28]
    32a8:	7c1b      	ldrb	r3, [r3, #16]
    32aa:	2b03      	cmp	r3, #3
    32ac:	d109      	bne.n	32c2 <tcp_slowtmr+0x266>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
    32ae:	4b13      	ldr	r3, [pc, #76]	; (32fc <tcp_slowtmr+0x2a0>)
    32b0:	681a      	ldr	r2, [r3, #0]
    32b2:	69fb      	ldr	r3, [r7, #28]
    32b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    32b6:	1ad3      	subs	r3, r2, r3
    32b8:	2b28      	cmp	r3, #40	; 0x28
    32ba:	d902      	bls.n	32c2 <tcp_slowtmr+0x266>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
    32bc:	7dfb      	ldrb	r3, [r7, #23]
    32be:	3301      	adds	r3, #1
    32c0:	75fb      	strb	r3, [r7, #23]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
    32c2:	69fb      	ldr	r3, [r7, #28]
    32c4:	7c1b      	ldrb	r3, [r3, #16]
    32c6:	2b09      	cmp	r3, #9
    32c8:	d109      	bne.n	32de <tcp_slowtmr+0x282>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
    32ca:	4b0c      	ldr	r3, [pc, #48]	; (32fc <tcp_slowtmr+0x2a0>)
    32cc:	681a      	ldr	r2, [r3, #0]
    32ce:	69fb      	ldr	r3, [r7, #28]
    32d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    32d2:	1ad3      	subs	r3, r2, r3
    32d4:	2bf0      	cmp	r3, #240	; 0xf0
    32d6:	d902      	bls.n	32de <tcp_slowtmr+0x282>
        ++pcb_remove;
    32d8:	7dfb      	ldrb	r3, [r7, #23]
    32da:	3301      	adds	r3, #1
    32dc:	75fb      	strb	r3, [r7, #23]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
    32de:	7dfb      	ldrb	r3, [r7, #23]
    32e0:	2b00      	cmp	r3, #0
    32e2:	d047      	beq.n	3374 <tcp_slowtmr+0x318>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
    32e4:	69f8      	ldr	r0, [r7, #28]
    32e6:	f000 faf5 	bl	38d4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
    32ea:	69bb      	ldr	r3, [r7, #24]
    32ec:	2b00      	cmp	r3, #0
    32ee:	d011      	beq.n	3314 <tcp_slowtmr+0x2b8>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
        prev->next = pcb->next;
    32f0:	69fb      	ldr	r3, [r7, #28]
    32f2:	68da      	ldr	r2, [r3, #12]
    32f4:	69bb      	ldr	r3, [r7, #24]
    32f6:	60da      	str	r2, [r3, #12]
    32f8:	e010      	b.n	331c <tcp_slowtmr+0x2c0>
    32fa:	bf00      	nop
    32fc:	10001964 	.word	0x10001964
    3300:	10001960 	.word	0x10001960
    3304:	0000984c 	.word	0x0000984c
    3308:	0000983c 	.word	0x0000983c
    330c:	10624dd3 	.word	0x10624dd3
    3310:	000124f8 	.word	0x000124f8
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
        tcp_active_pcbs = pcb->next;
    3314:	69fb      	ldr	r3, [r7, #28]
    3316:	68db      	ldr	r3, [r3, #12]
    3318:	4a4d      	ldr	r2, [pc, #308]	; (3450 <tcp_slowtmr+0x3f4>)
    331a:	6013      	str	r3, [r2, #0]
      }

      TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_ABRT);
    331c:	69fb      	ldr	r3, [r7, #28]
    331e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    3322:	2b00      	cmp	r3, #0
    3324:	d008      	beq.n	3338 <tcp_slowtmr+0x2dc>
    3326:	69fb      	ldr	r3, [r7, #28]
    3328:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    332c:	69fa      	ldr	r2, [r7, #28]
    332e:	6952      	ldr	r2, [r2, #20]
    3330:	f06f 0109 	mvn.w	r1, #9
    3334:	4610      	mov	r0, r2
    3336:	4798      	blx	r3
      if (pcb_reset) {
    3338:	7dbb      	ldrb	r3, [r7, #22]
    333a:	2b00      	cmp	r3, #0
    333c:	d010      	beq.n	3360 <tcp_slowtmr+0x304>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
    333e:	69fb      	ldr	r3, [r7, #28]
    3340:	6d98      	ldr	r0, [r3, #88]	; 0x58
    3342:	69fb      	ldr	r3, [r7, #28]
    3344:	6a59      	ldr	r1, [r3, #36]	; 0x24
    3346:	69fc      	ldr	r4, [r7, #28]
    3348:	69fb      	ldr	r3, [r7, #28]
    334a:	1d1d      	adds	r5, r3, #4
    334c:	69fb      	ldr	r3, [r7, #28]
    334e:	8b9b      	ldrh	r3, [r3, #28]
    3350:	69fa      	ldr	r2, [r7, #28]
    3352:	8bd2      	ldrh	r2, [r2, #30]
    3354:	9201      	str	r2, [sp, #4]
    3356:	9300      	str	r3, [sp, #0]
    3358:	462b      	mov	r3, r5
    335a:	4622      	mov	r2, r4
    335c:	f001 f81c 	bl	4398 <tcp_rst>
          pcb->local_port, pcb->remote_port);
      }

      pcb2 = pcb;
    3360:	69fb      	ldr	r3, [r7, #28]
    3362:	60bb      	str	r3, [r7, #8]
      pcb = pcb->next;
    3364:	69fb      	ldr	r3, [r7, #28]
    3366:	68db      	ldr	r3, [r3, #12]
    3368:	61fb      	str	r3, [r7, #28]
      memp_free(MEMP_TCP_PCB, pcb2);
    336a:	68b9      	ldr	r1, [r7, #8]
    336c:	2002      	movs	r0, #2
    336e:	f7ff f9ff 	bl	2770 <memp_free>
    3372:	e02f      	b.n	33d4 <tcp_slowtmr+0x378>
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
    3374:	69fb      	ldr	r3, [r7, #28]
    3376:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
    3378:	69fb      	ldr	r3, [r7, #28]
    337a:	68db      	ldr	r3, [r3, #12]
    337c:	61fb      	str	r3, [r7, #28]

      /* We check if we should poll the connection. */
      ++prev->polltmr;
    337e:	69bb      	ldr	r3, [r7, #24]
    3380:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
    3384:	3301      	adds	r3, #1
    3386:	b2da      	uxtb	r2, r3
    3388:	69bb      	ldr	r3, [r7, #24]
    338a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if (prev->polltmr >= prev->pollinterval) {
    338e:	69bb      	ldr	r3, [r7, #24]
    3390:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
    3394:	69bb      	ldr	r3, [r7, #24]
    3396:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
    339a:	429a      	cmp	r2, r3
    339c:	d31a      	bcc.n	33d4 <tcp_slowtmr+0x378>
        prev->polltmr = 0;
    339e:	69bb      	ldr	r3, [r7, #24]
    33a0:	2200      	movs	r2, #0
    33a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        TCP_EVENT_POLL(prev, err);
    33a6:	69bb      	ldr	r3, [r7, #24]
    33a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    33ac:	2b00      	cmp	r3, #0
    33ae:	d009      	beq.n	33c4 <tcp_slowtmr+0x368>
    33b0:	69bb      	ldr	r3, [r7, #24]
    33b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    33b6:	69ba      	ldr	r2, [r7, #24]
    33b8:	6952      	ldr	r2, [r2, #20]
    33ba:	69b9      	ldr	r1, [r7, #24]
    33bc:	4610      	mov	r0, r2
    33be:	4798      	blx	r3
    33c0:	6138      	str	r0, [r7, #16]
    33c2:	e001      	b.n	33c8 <tcp_slowtmr+0x36c>
    33c4:	2300      	movs	r3, #0
    33c6:	613b      	str	r3, [r7, #16]
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
    33c8:	693b      	ldr	r3, [r7, #16]
    33ca:	2b00      	cmp	r3, #0
    33cc:	d102      	bne.n	33d4 <tcp_slowtmr+0x378>
          tcp_output(prev);
    33ce:	69b8      	ldr	r0, [r7, #24]
    33d0:	f000 fdba 	bl	3f48 <tcp_output>
  prev = NULL;
  pcb = tcp_active_pcbs;
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
    33d4:	69fb      	ldr	r3, [r7, #28]
    33d6:	2b00      	cmp	r3, #0
    33d8:	f47f ae50 	bne.w	307c <tcp_slowtmr+0x20>
    }
  }

  
  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
    33dc:	2300      	movs	r3, #0
    33de:	61bb      	str	r3, [r7, #24]
  pcb = tcp_tw_pcbs;
    33e0:	4b1c      	ldr	r3, [pc, #112]	; (3454 <tcp_slowtmr+0x3f8>)
    33e2:	681b      	ldr	r3, [r3, #0]
    33e4:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
    33e6:	e02c      	b.n	3442 <tcp_slowtmr+0x3e6>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
    pcb_remove = 0;
    33e8:	2300      	movs	r3, #0
    33ea:	75fb      	strb	r3, [r7, #23]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
    33ec:	4b1a      	ldr	r3, [pc, #104]	; (3458 <tcp_slowtmr+0x3fc>)
    33ee:	681a      	ldr	r2, [r3, #0]
    33f0:	69fb      	ldr	r3, [r7, #28]
    33f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    33f4:	1ad3      	subs	r3, r2, r3
    33f6:	2bf0      	cmp	r3, #240	; 0xf0
    33f8:	d902      	bls.n	3400 <tcp_slowtmr+0x3a4>
      ++pcb_remove;
    33fa:	7dfb      	ldrb	r3, [r7, #23]
    33fc:	3301      	adds	r3, #1
    33fe:	75fb      	strb	r3, [r7, #23]
    }
    


    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
    3400:	7dfb      	ldrb	r3, [r7, #23]
    3402:	2b00      	cmp	r3, #0
    3404:	d018      	beq.n	3438 <tcp_slowtmr+0x3dc>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
    3406:	69f8      	ldr	r0, [r7, #28]
    3408:	f000 fa64 	bl	38d4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
    340c:	69bb      	ldr	r3, [r7, #24]
    340e:	2b00      	cmp	r3, #0
    3410:	d004      	beq.n	341c <tcp_slowtmr+0x3c0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
        prev->next = pcb->next;
    3412:	69fb      	ldr	r3, [r7, #28]
    3414:	68da      	ldr	r2, [r3, #12]
    3416:	69bb      	ldr	r3, [r7, #24]
    3418:	60da      	str	r2, [r3, #12]
    341a:	e003      	b.n	3424 <tcp_slowtmr+0x3c8>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
        tcp_tw_pcbs = pcb->next;
    341c:	69fb      	ldr	r3, [r7, #28]
    341e:	68db      	ldr	r3, [r3, #12]
    3420:	4a0c      	ldr	r2, [pc, #48]	; (3454 <tcp_slowtmr+0x3f8>)
    3422:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
    3424:	69fb      	ldr	r3, [r7, #28]
    3426:	607b      	str	r3, [r7, #4]
      pcb = pcb->next;
    3428:	69fb      	ldr	r3, [r7, #28]
    342a:	68db      	ldr	r3, [r3, #12]
    342c:	61fb      	str	r3, [r7, #28]
      memp_free(MEMP_TCP_PCB, pcb2);
    342e:	6879      	ldr	r1, [r7, #4]
    3430:	2002      	movs	r0, #2
    3432:	f7ff f99d 	bl	2770 <memp_free>
    3436:	e004      	b.n	3442 <tcp_slowtmr+0x3e6>
    } else {
      prev = pcb;
    3438:	69fb      	ldr	r3, [r7, #28]
    343a:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
    343c:	69fb      	ldr	r3, [r7, #28]
    343e:	68db      	ldr	r3, [r3, #12]
    3440:	61fb      	str	r3, [r7, #28]

  
  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
  pcb = tcp_tw_pcbs;
  while (pcb != NULL) {
    3442:	69fb      	ldr	r3, [r7, #28]
    3444:	2b00      	cmp	r3, #0
    3446:	d1cf      	bne.n	33e8 <tcp_slowtmr+0x38c>
    } else {
      prev = pcb;
      pcb = pcb->next;
    }
  }
}
    3448:	bf00      	nop
    344a:	3720      	adds	r7, #32
    344c:	46bd      	mov	sp, r7
    344e:	bdb0      	pop	{r4, r5, r7, pc}
    3450:	10001960 	.word	0x10001960
    3454:	10001974 	.word	0x10001974
    3458:	10001964 	.word	0x10001964

0000345c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
    345c:	b590      	push	{r4, r7, lr}
    345e:	b085      	sub	sp, #20
    3460:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
    3462:	4b2e      	ldr	r3, [pc, #184]	; (351c <tcp_fasttmr+0xc0>)
    3464:	681b      	ldr	r3, [r3, #0]
    3466:	60fb      	str	r3, [r7, #12]

  while(pcb != NULL) {
    3468:	e051      	b.n	350e <tcp_fasttmr+0xb2>
    struct tcp_pcb *next = pcb->next;
    346a:	68fb      	ldr	r3, [r7, #12]
    346c:	68db      	ldr	r3, [r3, #12]
    346e:	607b      	str	r3, [r7, #4]
    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
    3470:	68fb      	ldr	r3, [r7, #12]
    3472:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    3476:	2b00      	cmp	r3, #0
    3478:	d028      	beq.n	34cc <tcp_fasttmr+0x70>
      /* Notify again application with data previously received. */
      err_t err;
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_fasttmr: notify kept packet\n"));
      TCP_EVENT_RECV(pcb, pcb->refused_data, ERR_OK, err);
    347a:	68fb      	ldr	r3, [r7, #12]
    347c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    3480:	2b00      	cmp	r3, #0
    3482:	d00c      	beq.n	349e <tcp_fasttmr+0x42>
    3484:	68fb      	ldr	r3, [r7, #12]
    3486:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
    348a:	68fb      	ldr	r3, [r7, #12]
    348c:	6958      	ldr	r0, [r3, #20]
    348e:	68fb      	ldr	r3, [r7, #12]
    3490:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    3494:	2300      	movs	r3, #0
    3496:	68f9      	ldr	r1, [r7, #12]
    3498:	47a0      	blx	r4
    349a:	60b8      	str	r0, [r7, #8]
    349c:	e008      	b.n	34b0 <tcp_fasttmr+0x54>
    349e:	68fb      	ldr	r3, [r7, #12]
    34a0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    34a4:	2300      	movs	r3, #0
    34a6:	68f9      	ldr	r1, [r7, #12]
    34a8:	2000      	movs	r0, #0
    34aa:	f000 f88f 	bl	35cc <tcp_recv_null>
    34ae:	60b8      	str	r0, [r7, #8]
      if (err == ERR_OK) {
    34b0:	68bb      	ldr	r3, [r7, #8]
    34b2:	2b00      	cmp	r3, #0
    34b4:	d104      	bne.n	34c0 <tcp_fasttmr+0x64>
        pcb->refused_data = NULL;
    34b6:	68fb      	ldr	r3, [r7, #12]
    34b8:	2200      	movs	r2, #0
    34ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    34be:	e005      	b.n	34cc <tcp_fasttmr+0x70>
      } else if (err == ERR_ABRT) {
    34c0:	68bb      	ldr	r3, [r7, #8]
    34c2:	f113 0f0a 	cmn.w	r3, #10
    34c6:	d101      	bne.n	34cc <tcp_fasttmr+0x70>
        /* if err == ERR_ABRT, 'pcb' is already deallocated */
        pcb = NULL;
    34c8:	2300      	movs	r3, #0
    34ca:	60fb      	str	r3, [r7, #12]
      }
    }

    /* send delayed ACKs */
    if (pcb && (pcb->flags & TF_ACK_DELAY)) {
    34cc:	68fb      	ldr	r3, [r7, #12]
    34ce:	2b00      	cmp	r3, #0
    34d0:	d01b      	beq.n	350a <tcp_fasttmr+0xae>
    34d2:	68fb      	ldr	r3, [r7, #12]
    34d4:	f893 3020 	ldrb.w	r3, [r3, #32]
    34d8:	f003 0301 	and.w	r3, r3, #1
    34dc:	2b00      	cmp	r3, #0
    34de:	d014      	beq.n	350a <tcp_fasttmr+0xae>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
      tcp_ack_now(pcb);
    34e0:	68fb      	ldr	r3, [r7, #12]
    34e2:	f893 3020 	ldrb.w	r3, [r3, #32]
    34e6:	f043 0302 	orr.w	r3, r3, #2
    34ea:	b2da      	uxtb	r2, r3
    34ec:	68fb      	ldr	r3, [r7, #12]
    34ee:	f883 2020 	strb.w	r2, [r3, #32]
      tcp_output(pcb);
    34f2:	68f8      	ldr	r0, [r7, #12]
    34f4:	f000 fd28 	bl	3f48 <tcp_output>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
    34f8:	68fb      	ldr	r3, [r7, #12]
    34fa:	f893 3020 	ldrb.w	r3, [r3, #32]
    34fe:	f023 0303 	bic.w	r3, r3, #3
    3502:	b2da      	uxtb	r2, r3
    3504:	68fb      	ldr	r3, [r7, #12]
    3506:	f883 2020 	strb.w	r2, [r3, #32]
    }

    pcb = next;
    350a:	687b      	ldr	r3, [r7, #4]
    350c:	60fb      	str	r3, [r7, #12]
void
tcp_fasttmr(void)
{
  struct tcp_pcb *pcb = tcp_active_pcbs;

  while(pcb != NULL) {
    350e:	68fb      	ldr	r3, [r7, #12]
    3510:	2b00      	cmp	r3, #0
    3512:	d1aa      	bne.n	346a <tcp_fasttmr+0xe>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
    }

    pcb = next;
  }
}
    3514:	bf00      	nop
    3516:	3714      	adds	r7, #20
    3518:	46bd      	mov	sp, r7
    351a:	bd90      	pop	{r4, r7, pc}
    351c:	10001960 	.word	0x10001960

00003520 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
    3520:	b580      	push	{r7, lr}
    3522:	b084      	sub	sp, #16
    3524:	af00      	add	r7, sp, #0
    3526:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
    3528:	e007      	b.n	353a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
    352a:	687b      	ldr	r3, [r7, #4]
    352c:	681b      	ldr	r3, [r3, #0]
    352e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
    3530:	6878      	ldr	r0, [r7, #4]
    3532:	f000 f809 	bl	3548 <tcp_seg_free>
    seg = next;
    3536:	68fb      	ldr	r3, [r7, #12]
    3538:	607b      	str	r3, [r7, #4]
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
  while (seg != NULL) {
    353a:	687b      	ldr	r3, [r7, #4]
    353c:	2b00      	cmp	r3, #0
    353e:	d1f4      	bne.n	352a <tcp_segs_free+0xa>
    struct tcp_seg *next = seg->next;
    tcp_seg_free(seg);
    seg = next;
  }
}
    3540:	bf00      	nop
    3542:	3710      	adds	r7, #16
    3544:	46bd      	mov	sp, r7
    3546:	bd80      	pop	{r7, pc}

00003548 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
    3548:	b580      	push	{r7, lr}
    354a:	b082      	sub	sp, #8
    354c:	af00      	add	r7, sp, #0
    354e:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
    3550:	687b      	ldr	r3, [r7, #4]
    3552:	2b00      	cmp	r3, #0
    3554:	d00c      	beq.n	3570 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
    3556:	687b      	ldr	r3, [r7, #4]
    3558:	685b      	ldr	r3, [r3, #4]
    355a:	2b00      	cmp	r3, #0
    355c:	d004      	beq.n	3568 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
    355e:	687b      	ldr	r3, [r7, #4]
    3560:	685b      	ldr	r3, [r3, #4]
    3562:	4618      	mov	r0, r3
    3564:	f003 fb6e 	bl	6c44 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
    3568:	6879      	ldr	r1, [r7, #4]
    356a:	2004      	movs	r0, #4
    356c:	f7ff f900 	bl	2770 <memp_free>
  }
}
    3570:	bf00      	nop
    3572:	3708      	adds	r7, #8
    3574:	46bd      	mov	sp, r7
    3576:	bd80      	pop	{r7, pc}

00003578 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
    3578:	b480      	push	{r7}
    357a:	b083      	sub	sp, #12
    357c:	af00      	add	r7, sp, #0
    357e:	6078      	str	r0, [r7, #4]
    3580:	460b      	mov	r3, r1
    3582:	70fb      	strb	r3, [r7, #3]
  pcb->prio = prio;
    3584:	687b      	ldr	r3, [r7, #4]
    3586:	78fa      	ldrb	r2, [r7, #3]
    3588:	745a      	strb	r2, [r3, #17]
}
    358a:	bf00      	nop
    358c:	370c      	adds	r7, #12
    358e:	46bd      	mov	sp, r7
    3590:	bc80      	pop	{r7}
    3592:	4770      	bx	lr

00003594 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */ 
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
    3594:	b580      	push	{r7, lr}
    3596:	b084      	sub	sp, #16
    3598:	af00      	add	r7, sp, #0
    359a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
    359c:	2004      	movs	r0, #4
    359e:	f7ff f873 	bl	2688 <memp_malloc>
    35a2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
    35a4:	68fb      	ldr	r3, [r7, #12]
    35a6:	2b00      	cmp	r3, #0
    35a8:	d101      	bne.n	35ae <tcp_seg_copy+0x1a>
    return NULL;
    35aa:	2300      	movs	r3, #0
    35ac:	e00a      	b.n	35c4 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg)); 
    35ae:	2210      	movs	r2, #16
    35b0:	6879      	ldr	r1, [r7, #4]
    35b2:	68f8      	ldr	r0, [r7, #12]
    35b4:	f006 f86a 	bl	968c <memcpy>
  pbuf_ref(cseg->p);
    35b8:	68fb      	ldr	r3, [r7, #12]
    35ba:	685b      	ldr	r3, [r3, #4]
    35bc:	4618      	mov	r0, r3
    35be:	f003 fbb3 	bl	6d28 <pbuf_ref>
  return cseg;
    35c2:	68fb      	ldr	r3, [r7, #12]
}
    35c4:	4618      	mov	r0, r3
    35c6:	3710      	adds	r7, #16
    35c8:	46bd      	mov	sp, r7
    35ca:	bd80      	pop	{r7, pc}

000035cc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
    35cc:	b580      	push	{r7, lr}
    35ce:	b084      	sub	sp, #16
    35d0:	af00      	add	r7, sp, #0
    35d2:	60f8      	str	r0, [r7, #12]
    35d4:	60b9      	str	r1, [r7, #8]
    35d6:	607a      	str	r2, [r7, #4]
    35d8:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
    35da:	687b      	ldr	r3, [r7, #4]
    35dc:	2b00      	cmp	r3, #0
    35de:	d009      	beq.n	35f4 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
    35e0:	687b      	ldr	r3, [r7, #4]
    35e2:	891b      	ldrh	r3, [r3, #8]
    35e4:	4619      	mov	r1, r3
    35e6:	68b8      	ldr	r0, [r7, #8]
    35e8:	f7ff fbfe 	bl	2de8 <tcp_recved>
    pbuf_free(p);
    35ec:	6878      	ldr	r0, [r7, #4]
    35ee:	f003 fb29 	bl	6c44 <pbuf_free>
    35f2:	e007      	b.n	3604 <tcp_recv_null+0x38>
  } else if (err == ERR_OK) {
    35f4:	683b      	ldr	r3, [r7, #0]
    35f6:	2b00      	cmp	r3, #0
    35f8:	d104      	bne.n	3604 <tcp_recv_null+0x38>
    return tcp_close(pcb);
    35fa:	68b8      	ldr	r0, [r7, #8]
    35fc:	f7ff fb20 	bl	2c40 <tcp_close>
    3600:	4603      	mov	r3, r0
    3602:	e000      	b.n	3606 <tcp_recv_null+0x3a>
  }
  return ERR_OK;
    3604:	2300      	movs	r3, #0
}
    3606:	4618      	mov	r0, r3
    3608:	3710      	adds	r7, #16
    360a:	46bd      	mov	sp, r7
    360c:	bd80      	pop	{r7, pc}
    360e:	bf00      	nop

00003610 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
    3610:	b580      	push	{r7, lr}
    3612:	b086      	sub	sp, #24
    3614:	af00      	add	r7, sp, #0
    3616:	4603      	mov	r3, r0
    3618:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;


  mprio = TCP_PRIO_MAX;
    361a:	237f      	movs	r3, #127	; 0x7f
    361c:	72fb      	strb	r3, [r7, #11]
  
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
    361e:	2300      	movs	r3, #0
    3620:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
    3622:	2300      	movs	r3, #0
    3624:	613b      	str	r3, [r7, #16]
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    3626:	4b18      	ldr	r3, [pc, #96]	; (3688 <tcp_kill_prio+0x78>)
    3628:	681b      	ldr	r3, [r3, #0]
    362a:	617b      	str	r3, [r7, #20]
    362c:	e01f      	b.n	366e <tcp_kill_prio+0x5e>
    if (pcb->prio <= prio &&
    362e:	697b      	ldr	r3, [r7, #20]
    3630:	7c5b      	ldrb	r3, [r3, #17]
    3632:	79fa      	ldrb	r2, [r7, #7]
    3634:	429a      	cmp	r2, r3
    3636:	d317      	bcc.n	3668 <tcp_kill_prio+0x58>
       pcb->prio <= mprio &&
    3638:	697b      	ldr	r3, [r7, #20]
    363a:	7c5b      	ldrb	r3, [r3, #17]
  
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    if (pcb->prio <= prio &&
    363c:	7afa      	ldrb	r2, [r7, #11]
    363e:	429a      	cmp	r2, r3
    3640:	d312      	bcc.n	3668 <tcp_kill_prio+0x58>
       pcb->prio <= mprio &&
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
    3642:	4b12      	ldr	r3, [pc, #72]	; (368c <tcp_kill_prio+0x7c>)
    3644:	681a      	ldr	r2, [r3, #0]
    3646:	697b      	ldr	r3, [r7, #20]
    3648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    364a:	1ad2      	subs	r2, r2, r3
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    if (pcb->prio <= prio &&
       pcb->prio <= mprio &&
    364c:	68fb      	ldr	r3, [r7, #12]
    364e:	429a      	cmp	r2, r3
    3650:	d30a      	bcc.n	3668 <tcp_kill_prio+0x58>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
      inactivity = tcp_ticks - pcb->tmr;
    3652:	4b0e      	ldr	r3, [pc, #56]	; (368c <tcp_kill_prio+0x7c>)
    3654:	681a      	ldr	r2, [r3, #0]
    3656:	697b      	ldr	r3, [r7, #20]
    3658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    365a:	1ad3      	subs	r3, r2, r3
    365c:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
    365e:	697b      	ldr	r3, [r7, #20]
    3660:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
    3662:	697b      	ldr	r3, [r7, #20]
    3664:	7c5b      	ldrb	r3, [r3, #17]
    3666:	72fb      	strb	r3, [r7, #11]
  mprio = TCP_PRIO_MAX;
  
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    3668:	697b      	ldr	r3, [r7, #20]
    366a:	68db      	ldr	r3, [r3, #12]
    366c:	617b      	str	r3, [r7, #20]
    366e:	697b      	ldr	r3, [r7, #20]
    3670:	2b00      	cmp	r3, #0
    3672:	d1dc      	bne.n	362e <tcp_kill_prio+0x1e>
      inactivity = tcp_ticks - pcb->tmr;
      inactive = pcb;
      mprio = pcb->prio;
    }
  }
  if (inactive != NULL) {
    3674:	693b      	ldr	r3, [r7, #16]
    3676:	2b00      	cmp	r3, #0
    3678:	d002      	beq.n	3680 <tcp_kill_prio+0x70>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
    367a:	6938      	ldr	r0, [r7, #16]
    367c:	f7ff fb68 	bl	2d50 <tcp_abort>
  }
}
    3680:	bf00      	nop
    3682:	3718      	adds	r7, #24
    3684:	46bd      	mov	sp, r7
    3686:	bd80      	pop	{r7, pc}
    3688:	10001960 	.word	0x10001960
    368c:	10001964 	.word	0x10001964

00003690 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
    3690:	b580      	push	{r7, lr}
    3692:	b084      	sub	sp, #16
    3694:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
    3696:	2300      	movs	r3, #0
    3698:	607b      	str	r3, [r7, #4]
  inactive = NULL;
    369a:	2300      	movs	r3, #0
    369c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
    369e:	4b12      	ldr	r3, [pc, #72]	; (36e8 <tcp_kill_timewait+0x58>)
    36a0:	681b      	ldr	r3, [r3, #0]
    36a2:	60fb      	str	r3, [r7, #12]
    36a4:	e012      	b.n	36cc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
    36a6:	4b11      	ldr	r3, [pc, #68]	; (36ec <tcp_kill_timewait+0x5c>)
    36a8:	681a      	ldr	r2, [r3, #0]
    36aa:	68fb      	ldr	r3, [r7, #12]
    36ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    36ae:	1ad2      	subs	r2, r2, r3
    36b0:	687b      	ldr	r3, [r7, #4]
    36b2:	429a      	cmp	r2, r3
    36b4:	d307      	bcc.n	36c6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
    36b6:	4b0d      	ldr	r3, [pc, #52]	; (36ec <tcp_kill_timewait+0x5c>)
    36b8:	681a      	ldr	r2, [r3, #0]
    36ba:	68fb      	ldr	r3, [r7, #12]
    36bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    36be:	1ad3      	subs	r3, r2, r3
    36c0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
    36c2:	68fb      	ldr	r3, [r7, #12]
    36c4:	60bb      	str	r3, [r7, #8]
  u32_t inactivity;

  inactivity = 0;
  inactive = NULL;
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
    36c6:	68fb      	ldr	r3, [r7, #12]
    36c8:	68db      	ldr	r3, [r3, #12]
    36ca:	60fb      	str	r3, [r7, #12]
    36cc:	68fb      	ldr	r3, [r7, #12]
    36ce:	2b00      	cmp	r3, #0
    36d0:	d1e9      	bne.n	36a6 <tcp_kill_timewait+0x16>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
      inactivity = tcp_ticks - pcb->tmr;
      inactive = pcb;
    }
  }
  if (inactive != NULL) {
    36d2:	68bb      	ldr	r3, [r7, #8]
    36d4:	2b00      	cmp	r3, #0
    36d6:	d002      	beq.n	36de <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
    36d8:	68b8      	ldr	r0, [r7, #8]
    36da:	f7ff fb39 	bl	2d50 <tcp_abort>
  }
}
    36de:	bf00      	nop
    36e0:	3710      	adds	r7, #16
    36e2:	46bd      	mov	sp, r7
    36e4:	bd80      	pop	{r7, pc}
    36e6:	bf00      	nop
    36e8:	10001974 	.word	0x10001974
    36ec:	10001964 	.word	0x10001964

000036f0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
    36f0:	b580      	push	{r7, lr}
    36f2:	b084      	sub	sp, #16
    36f4:	af00      	add	r7, sp, #0
    36f6:	4603      	mov	r3, r0
    36f8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  u32_t iss;
  
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
    36fa:	2002      	movs	r0, #2
    36fc:	f7fe ffc4 	bl	2688 <memp_malloc>
    3700:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
    3702:	68fb      	ldr	r3, [r7, #12]
    3704:	2b00      	cmp	r3, #0
    3706:	d126      	bne.n	3756 <tcp_alloc+0x66>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
    3708:	f7ff ffc2 	bl	3690 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
    370c:	2002      	movs	r0, #2
    370e:	f7fe ffbb 	bl	2688 <memp_malloc>
    3712:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
    3714:	68fb      	ldr	r3, [r7, #12]
    3716:	2b00      	cmp	r3, #0
    3718:	d112      	bne.n	3740 <tcp_alloc+0x50>
      /* Try killing active connections with lower priority than the new one. */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
      tcp_kill_prio(prio);
    371a:	79fb      	ldrb	r3, [r7, #7]
    371c:	4618      	mov	r0, r3
    371e:	f7ff ff77 	bl	3610 <tcp_kill_prio>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
    3722:	2002      	movs	r0, #2
    3724:	f7fe ffb0 	bl	2688 <memp_malloc>
    3728:	60f8      	str	r0, [r7, #12]
      if (pcb != NULL) {
    372a:	68fb      	ldr	r3, [r7, #12]
    372c:	2b00      	cmp	r3, #0
    372e:	d007      	beq.n	3740 <tcp_alloc+0x50>
        /* adjust err stats: memp_malloc failed twice before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    3730:	4b3a      	ldr	r3, [pc, #232]	; (381c <tcp_alloc+0x12c>)
    3732:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
    3736:	3b01      	subs	r3, #1
    3738:	b29a      	uxth	r2, r3
    373a:	4b38      	ldr	r3, [pc, #224]	; (381c <tcp_alloc+0x12c>)
    373c:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
      }
    }
    if (pcb != NULL) {
    3740:	68fb      	ldr	r3, [r7, #12]
    3742:	2b00      	cmp	r3, #0
    3744:	d007      	beq.n	3756 <tcp_alloc+0x66>
      /* adjust err stats: timewait PCB was freed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    3746:	4b35      	ldr	r3, [pc, #212]	; (381c <tcp_alloc+0x12c>)
    3748:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
    374c:	3b01      	subs	r3, #1
    374e:	b29a      	uxth	r2, r3
    3750:	4b32      	ldr	r3, [pc, #200]	; (381c <tcp_alloc+0x12c>)
    3752:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
    }
  }
  if (pcb != NULL) {
    3756:	68fb      	ldr	r3, [r7, #12]
    3758:	2b00      	cmp	r3, #0
    375a:	d059      	beq.n	3810 <tcp_alloc+0x120>
    memset(pcb, 0, sizeof(struct tcp_pcb));
    375c:	22a4      	movs	r2, #164	; 0xa4
    375e:	2100      	movs	r1, #0
    3760:	68f8      	ldr	r0, [r7, #12]
    3762:	f006 f809 	bl	9778 <memset>
    pcb->prio = prio;
    3766:	68fb      	ldr	r3, [r7, #12]
    3768:	79fa      	ldrb	r2, [r7, #7]
    376a:	745a      	strb	r2, [r3, #17]
    pcb->snd_buf = TCP_SND_BUF;
    376c:	68fb      	ldr	r3, [r7, #12]
    376e:	f44f 7201 	mov.w	r2, #516	; 0x204
    3772:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
    pcb->snd_queuelen = 0;
    3776:	68fb      	ldr	r3, [r7, #12]
    3778:	2200      	movs	r2, #0
    377a:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
    pcb->rcv_wnd = TCP_WND;
    377e:	68fb      	ldr	r3, [r7, #12]
    3780:	f44f 6206 	mov.w	r2, #2144	; 0x860
    3784:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->rcv_ann_wnd = TCP_WND;
    3786:	68fb      	ldr	r3, [r7, #12]
    3788:	f44f 6206 	mov.w	r2, #2144	; 0x860
    378c:	855a      	strh	r2, [r3, #42]	; 0x2a
    pcb->tos = 0;
    378e:	68fb      	ldr	r3, [r7, #12]
    3790:	2200      	movs	r2, #0
    3792:	725a      	strb	r2, [r3, #9]
    pcb->ttl = TCP_TTL;
    3794:	68fb      	ldr	r3, [r7, #12]
    3796:	22ff      	movs	r2, #255	; 0xff
    3798:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
    379a:	68fb      	ldr	r3, [r7, #12]
    379c:	f44f 7206 	mov.w	r2, #536	; 0x218
    37a0:	871a      	strh	r2, [r3, #56]	; 0x38
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
    37a2:	68fb      	ldr	r3, [r7, #12]
    37a4:	2206      	movs	r2, #6
    37a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->sa = 0;
    37aa:	68fb      	ldr	r3, [r7, #12]
    37ac:	2200      	movs	r2, #0
    37ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
    37b2:	68fb      	ldr	r3, [r7, #12]
    37b4:	2206      	movs	r2, #6
    37b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    pcb->rtime = -1;
    37ba:	68fb      	ldr	r3, [r7, #12]
    37bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
    37c0:	86da      	strh	r2, [r3, #54]	; 0x36
    pcb->cwnd = 1;
    37c2:	68fb      	ldr	r3, [r7, #12]
    37c4:	2201      	movs	r2, #1
    37c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    iss = tcp_next_iss();
    37ca:	f000 f91f 	bl	3a0c <tcp_next_iss>
    37ce:	60b8      	str	r0, [r7, #8]
    pcb->snd_wl2 = iss;
    37d0:	68fb      	ldr	r3, [r7, #12]
    37d2:	68ba      	ldr	r2, [r7, #8]
    37d4:	665a      	str	r2, [r3, #100]	; 0x64
    pcb->snd_nxt = iss;
    37d6:	68fb      	ldr	r3, [r7, #12]
    37d8:	68ba      	ldr	r2, [r7, #8]
    37da:	659a      	str	r2, [r3, #88]	; 0x58
    pcb->lastack = iss;
    37dc:	68fb      	ldr	r3, [r7, #12]
    37de:	68ba      	ldr	r2, [r7, #8]
    37e0:	64da      	str	r2, [r3, #76]	; 0x4c
    pcb->snd_lbb = iss;   
    37e2:	68fb      	ldr	r3, [r7, #12]
    37e4:	68ba      	ldr	r2, [r7, #8]
    37e6:	669a      	str	r2, [r3, #104]	; 0x68
    pcb->tmr = tcp_ticks;
    37e8:	4b0d      	ldr	r3, [pc, #52]	; (3820 <tcp_alloc+0x130>)
    37ea:	681a      	ldr	r2, [r3, #0]
    37ec:	68fb      	ldr	r3, [r7, #12]
    37ee:	631a      	str	r2, [r3, #48]	; 0x30

    pcb->polltmr = 0;
    37f0:	68fb      	ldr	r3, [r7, #12]
    37f2:	2200      	movs	r2, #0
    37f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
    37f8:	68fb      	ldr	r3, [r7, #12]
    37fa:	4a0a      	ldr	r2, [pc, #40]	; (3824 <tcp_alloc+0x134>)
    37fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* LWIP_CALLBACK_API */  
    
    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
    3800:	68fb      	ldr	r3, [r7, #12]
    3802:	4a09      	ldr	r2, [pc, #36]	; (3828 <tcp_alloc+0x138>)
    3804:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */

    pcb->keep_cnt_sent = 0;
    3808:	68fb      	ldr	r3, [r7, #12]
    380a:	2200      	movs	r2, #0
    380c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  }
  return pcb;
    3810:	68fb      	ldr	r3, [r7, #12]
}
    3812:	4618      	mov	r0, r3
    3814:	3710      	adds	r7, #16
    3816:	46bd      	mov	sp, r7
    3818:	bd80      	pop	{r7, pc}
    381a:	bf00      	nop
    381c:	10001978 	.word	0x10001978
    3820:	10001964 	.word	0x10001964
    3824:	000035cd 	.word	0x000035cd
    3828:	006ddd00 	.word	0x006ddd00

0000382c <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
    382c:	b580      	push	{r7, lr}
    382e:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
    3830:	2040      	movs	r0, #64	; 0x40
    3832:	f7ff ff5d 	bl	36f0 <tcp_alloc>
    3836:	4603      	mov	r3, r0
}
    3838:	4618      	mov	r0, r3
    383a:	bd80      	pop	{r7, pc}

0000383c <tcp_arg>:
 * @param arg void pointer argument to pass to callback functions
 */ 
//The ARG can be any argument which can be passed as a pointer.
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{  
    383c:	b480      	push	{r7}
    383e:	b083      	sub	sp, #12
    3840:	af00      	add	r7, sp, #0
    3842:	6078      	str	r0, [r7, #4]
    3844:	6039      	str	r1, [r7, #0]
  pcb->callback_arg = arg;
    3846:	687b      	ldr	r3, [r7, #4]
    3848:	683a      	ldr	r2, [r7, #0]
    384a:	615a      	str	r2, [r3, #20]
}
    384c:	bf00      	nop
    384e:	370c      	adds	r7, #12
    3850:	46bd      	mov	sp, r7
    3852:	bc80      	pop	{r7}
    3854:	4770      	bx	lr
    3856:	bf00      	nop

00003858 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */ 
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
    3858:	b480      	push	{r7}
    385a:	b083      	sub	sp, #12
    385c:	af00      	add	r7, sp, #0
    385e:	6078      	str	r0, [r7, #4]
    3860:	6039      	str	r1, [r7, #0]
  pcb->recv = recv;
    3862:	687b      	ldr	r3, [r7, #4]
    3864:	683a      	ldr	r2, [r7, #0]
    3866:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    386a:	bf00      	nop
    386c:	370c      	adds	r7, #12
    386e:	46bd      	mov	sp, r7
    3870:	bc80      	pop	{r7}
    3872:	4770      	bx	lr

00003874 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */ 
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
    3874:	b480      	push	{r7}
    3876:	b083      	sub	sp, #12
    3878:	af00      	add	r7, sp, #0
    387a:	6078      	str	r0, [r7, #4]
    387c:	6039      	str	r1, [r7, #0]
  pcb->sent = sent;
    387e:	687b      	ldr	r3, [r7, #4]
    3880:	683a      	ldr	r2, [r7, #0]
    3882:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    3886:	bf00      	nop
    3888:	370c      	adds	r7, #12
    388a:	46bd      	mov	sp, r7
    388c:	bc80      	pop	{r7}
    388e:	4770      	bx	lr

00003890 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occured on the connection
 */ 
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
    3890:	b480      	push	{r7}
    3892:	b083      	sub	sp, #12
    3894:	af00      	add	r7, sp, #0
    3896:	6078      	str	r0, [r7, #4]
    3898:	6039      	str	r1, [r7, #0]
  pcb->errf = err;
    389a:	687b      	ldr	r3, [r7, #4]
    389c:	683a      	ldr	r2, [r7, #0]
    389e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    38a2:	bf00      	nop
    38a4:	370c      	adds	r7, #12
    38a6:	46bd      	mov	sp, r7
    38a8:	bc80      	pop	{r7}
    38aa:	4770      	bx	lr

000038ac <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */ 
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
    38ac:	b480      	push	{r7}
    38ae:	b085      	sub	sp, #20
    38b0:	af00      	add	r7, sp, #0
    38b2:	60f8      	str	r0, [r7, #12]
    38b4:	60b9      	str	r1, [r7, #8]
    38b6:	4613      	mov	r3, r2
    38b8:	71fb      	strb	r3, [r7, #7]
#if LWIP_CALLBACK_API
  pcb->poll = poll;
    38ba:	68fb      	ldr	r3, [r7, #12]
    38bc:	68ba      	ldr	r2, [r7, #8]
    38be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#else /* LWIP_CALLBACK_API */  
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */  
  pcb->pollinterval = interval;
    38c2:	68fb      	ldr	r3, [r7, #12]
    38c4:	79fa      	ldrb	r2, [r7, #7]
    38c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
    38ca:	bf00      	nop
    38cc:	3714      	adds	r7, #20
    38ce:	46bd      	mov	sp, r7
    38d0:	bc80      	pop	{r7}
    38d2:	4770      	bx	lr

000038d4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
    38d4:	b580      	push	{r7, lr}
    38d6:	b082      	sub	sp, #8
    38d8:	af00      	add	r7, sp, #0
    38da:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
    38dc:	687b      	ldr	r3, [r7, #4]
    38de:	7c1b      	ldrb	r3, [r3, #16]
    38e0:	2b00      	cmp	r3, #0
    38e2:	d037      	beq.n	3954 <tcp_pcb_purge+0x80>
     pcb->state != TIME_WAIT &&
    38e4:	687b      	ldr	r3, [r7, #4]
    38e6:	7c1b      	ldrb	r3, [r3, #16]
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  if (pcb->state != CLOSED &&
    38e8:	2b0a      	cmp	r3, #10
    38ea:	d033      	beq.n	3954 <tcp_pcb_purge+0x80>
     pcb->state != TIME_WAIT &&
     pcb->state != LISTEN) {
    38ec:	687b      	ldr	r3, [r7, #4]
    38ee:	7c1b      	ldrb	r3, [r3, #16]
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  if (pcb->state != CLOSED &&
     pcb->state != TIME_WAIT &&
    38f0:	2b01      	cmp	r3, #1
    38f2:	d02f      	beq.n	3954 <tcp_pcb_purge+0x80>
      }
    }
#endif /* TCP_LISTEN_BACKLOG */


    if (pcb->refused_data != NULL) {
    38f4:	687b      	ldr	r3, [r7, #4]
    38f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    38fa:	2b00      	cmp	r3, #0
    38fc:	d009      	beq.n	3912 <tcp_pcb_purge+0x3e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
    38fe:	687b      	ldr	r3, [r7, #4]
    3900:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    3904:	4618      	mov	r0, r3
    3906:	f003 f99d 	bl	6c44 <pbuf_free>
      pcb->refused_data = NULL;
    390a:	687b      	ldr	r3, [r7, #4]
    390c:	2200      	movs	r2, #0
    390e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
    3912:	687b      	ldr	r3, [r7, #4]
    3914:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    3916:	4618      	mov	r0, r3
    3918:	f7ff fe02 	bl	3520 <tcp_segs_free>
    pcb->ooseq = NULL;
    391c:	687b      	ldr	r3, [r7, #4]
    391e:	2200      	movs	r2, #0
    3920:	67da      	str	r2, [r3, #124]	; 0x7c
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
    3922:	687b      	ldr	r3, [r7, #4]
    3924:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3928:	86da      	strh	r2, [r3, #54]	; 0x36

    tcp_segs_free(pcb->unsent);
    392a:	687b      	ldr	r3, [r7, #4]
    392c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    392e:	4618      	mov	r0, r3
    3930:	f7ff fdf6 	bl	3520 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
    3934:	687b      	ldr	r3, [r7, #4]
    3936:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    3938:	4618      	mov	r0, r3
    393a:	f7ff fdf1 	bl	3520 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
    393e:	687b      	ldr	r3, [r7, #4]
    3940:	2200      	movs	r2, #0
    3942:	675a      	str	r2, [r3, #116]	; 0x74
    3944:	687b      	ldr	r3, [r7, #4]
    3946:	6f5a      	ldr	r2, [r3, #116]	; 0x74
    3948:	687b      	ldr	r3, [r7, #4]
    394a:	679a      	str	r2, [r3, #120]	; 0x78
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
    394c:	687b      	ldr	r3, [r7, #4]
    394e:	2200      	movs	r2, #0
    3950:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
#endif /* TCP_OVERSIZE */
  }
}
    3954:	bf00      	nop
    3956:	3708      	adds	r7, #8
    3958:	46bd      	mov	sp, r7
    395a:	bd80      	pop	{r7, pc}

0000395c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
    395c:	b580      	push	{r7, lr}
    395e:	b082      	sub	sp, #8
    3960:	af00      	add	r7, sp, #0
    3962:	6078      	str	r0, [r7, #4]
    3964:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
    3966:	687b      	ldr	r3, [r7, #4]
    3968:	681a      	ldr	r2, [r3, #0]
    396a:	683b      	ldr	r3, [r7, #0]
    396c:	429a      	cmp	r2, r3
    396e:	d105      	bne.n	397c <tcp_pcb_remove+0x20>
    3970:	687b      	ldr	r3, [r7, #4]
    3972:	681b      	ldr	r3, [r3, #0]
    3974:	68da      	ldr	r2, [r3, #12]
    3976:	687b      	ldr	r3, [r7, #4]
    3978:	601a      	str	r2, [r3, #0]
    397a:	e019      	b.n	39b0 <tcp_pcb_remove+0x54>
    397c:	687b      	ldr	r3, [r7, #4]
    397e:	681b      	ldr	r3, [r3, #0]
    3980:	4a21      	ldr	r2, [pc, #132]	; (3a08 <tcp_pcb_remove+0xac>)
    3982:	6013      	str	r3, [r2, #0]
    3984:	e010      	b.n	39a8 <tcp_pcb_remove+0x4c>
    3986:	4b20      	ldr	r3, [pc, #128]	; (3a08 <tcp_pcb_remove+0xac>)
    3988:	681b      	ldr	r3, [r3, #0]
    398a:	68da      	ldr	r2, [r3, #12]
    398c:	683b      	ldr	r3, [r7, #0]
    398e:	429a      	cmp	r2, r3
    3990:	d105      	bne.n	399e <tcp_pcb_remove+0x42>
    3992:	4b1d      	ldr	r3, [pc, #116]	; (3a08 <tcp_pcb_remove+0xac>)
    3994:	681b      	ldr	r3, [r3, #0]
    3996:	683a      	ldr	r2, [r7, #0]
    3998:	68d2      	ldr	r2, [r2, #12]
    399a:	60da      	str	r2, [r3, #12]
    399c:	e008      	b.n	39b0 <tcp_pcb_remove+0x54>
    399e:	4b1a      	ldr	r3, [pc, #104]	; (3a08 <tcp_pcb_remove+0xac>)
    39a0:	681b      	ldr	r3, [r3, #0]
    39a2:	68db      	ldr	r3, [r3, #12]
    39a4:	4a18      	ldr	r2, [pc, #96]	; (3a08 <tcp_pcb_remove+0xac>)
    39a6:	6013      	str	r3, [r2, #0]
    39a8:	4b17      	ldr	r3, [pc, #92]	; (3a08 <tcp_pcb_remove+0xac>)
    39aa:	681b      	ldr	r3, [r3, #0]
    39ac:	2b00      	cmp	r3, #0
    39ae:	d1ea      	bne.n	3986 <tcp_pcb_remove+0x2a>
    39b0:	683b      	ldr	r3, [r7, #0]
    39b2:	2200      	movs	r2, #0
    39b4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
    39b6:	6838      	ldr	r0, [r7, #0]
    39b8:	f7ff ff8c 	bl	38d4 <tcp_pcb_purge>
  
  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
    39bc:	683b      	ldr	r3, [r7, #0]
    39be:	7c1b      	ldrb	r3, [r3, #16]
    39c0:	2b0a      	cmp	r3, #10
    39c2:	d016      	beq.n	39f2 <tcp_pcb_remove+0x96>
     pcb->state != LISTEN &&
    39c4:	683b      	ldr	r3, [r7, #0]
    39c6:	7c1b      	ldrb	r3, [r3, #16]
  TCP_RMV(pcblist, pcb);

  tcp_pcb_purge(pcb);
  
  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
    39c8:	2b01      	cmp	r3, #1
    39ca:	d012      	beq.n	39f2 <tcp_pcb_remove+0x96>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
    39cc:	683b      	ldr	r3, [r7, #0]
    39ce:	f893 3020 	ldrb.w	r3, [r3, #32]
    39d2:	f003 0301 	and.w	r3, r3, #1

  tcp_pcb_purge(pcb);
  
  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
     pcb->state != LISTEN &&
    39d6:	2b00      	cmp	r3, #0
    39d8:	d00b      	beq.n	39f2 <tcp_pcb_remove+0x96>
     pcb->flags & TF_ACK_DELAY) {
    pcb->flags |= TF_ACK_NOW;
    39da:	683b      	ldr	r3, [r7, #0]
    39dc:	f893 3020 	ldrb.w	r3, [r3, #32]
    39e0:	f043 0302 	orr.w	r3, r3, #2
    39e4:	b2da      	uxtb	r2, r3
    39e6:	683b      	ldr	r3, [r7, #0]
    39e8:	f883 2020 	strb.w	r2, [r3, #32]
    tcp_output(pcb);
    39ec:	6838      	ldr	r0, [r7, #0]
    39ee:	f000 faab 	bl	3f48 <tcp_output>
  }

  if (pcb->state != LISTEN) {
    39f2:	683b      	ldr	r3, [r7, #0]
    39f4:	7c1b      	ldrb	r3, [r3, #16]
    39f6:	2b01      	cmp	r3, #1
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
    39f8:	683b      	ldr	r3, [r7, #0]
    39fa:	2200      	movs	r2, #0
    39fc:	741a      	strb	r2, [r3, #16]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
    39fe:	bf00      	nop
    3a00:	3708      	adds	r7, #8
    3a02:	46bd      	mov	sp, r7
    3a04:	bd80      	pop	{r7, pc}
    3a06:	bf00      	nop
    3a08:	1000196c 	.word	0x1000196c

00003a0c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(void)
{
    3a0c:	b480      	push	{r7}
    3a0e:	af00      	add	r7, sp, #0
  static u32_t iss = 6510;
  
  iss += tcp_ticks;       /* XXX */
    3a10:	4b06      	ldr	r3, [pc, #24]	; (3a2c <tcp_next_iss+0x20>)
    3a12:	681a      	ldr	r2, [r3, #0]
    3a14:	4b06      	ldr	r3, [pc, #24]	; (3a30 <tcp_next_iss+0x24>)
    3a16:	681b      	ldr	r3, [r3, #0]
    3a18:	4413      	add	r3, r2
    3a1a:	4a04      	ldr	r2, [pc, #16]	; (3a2c <tcp_next_iss+0x20>)
    3a1c:	6013      	str	r3, [r2, #0]
  return iss;
    3a1e:	4b03      	ldr	r3, [pc, #12]	; (3a2c <tcp_next_iss+0x20>)
    3a20:	681b      	ldr	r3, [r3, #0]
}
    3a22:	4618      	mov	r0, r3
    3a24:	46bd      	mov	sp, r7
    3a26:	bc80      	pop	{r7}
    3a28:	4770      	bx	lr
    3a2a:	bf00      	nop
    3a2c:	1000000c 	.word	0x1000000c
    3a30:	10001964 	.word	0x10001964

00003a34 <tcp_eff_send_mss>:
 * by using ip_route to determin the netif used to send to the address and
 * calculating the minimum of TCP_MSS and that netif's mtu (if set).
 */
u16_t
tcp_eff_send_mss(u16_t sendmss, ip_addr_t *addr)
{
    3a34:	b580      	push	{r7, lr}
    3a36:	b084      	sub	sp, #16
    3a38:	af00      	add	r7, sp, #0
    3a3a:	4603      	mov	r3, r0
    3a3c:	6039      	str	r1, [r7, #0]
    3a3e:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;

  outif = ip_route(addr);
    3a40:	6838      	ldr	r0, [r7, #0]
    3a42:	f003 fd63 	bl	750c <ip_route>
    3a46:	60f8      	str	r0, [r7, #12]
  if ((outif != NULL) && (outif->mtu != 0)) {
    3a48:	68fb      	ldr	r3, [r7, #12]
    3a4a:	2b00      	cmp	r3, #0
    3a4c:	d00d      	beq.n	3a6a <tcp_eff_send_mss+0x36>
    3a4e:	68fb      	ldr	r3, [r7, #12]
    3a50:	8c1b      	ldrh	r3, [r3, #32]
    3a52:	2b00      	cmp	r3, #0
    3a54:	d009      	beq.n	3a6a <tcp_eff_send_mss+0x36>
    mss_s = outif->mtu - IP_HLEN - TCP_HLEN;
    3a56:	68fb      	ldr	r3, [r7, #12]
    3a58:	8c1b      	ldrh	r3, [r3, #32]
    3a5a:	3b28      	subs	r3, #40	; 0x28
    3a5c:	817b      	strh	r3, [r7, #10]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
    3a5e:	897a      	ldrh	r2, [r7, #10]
    3a60:	88fb      	ldrh	r3, [r7, #6]
    3a62:	4293      	cmp	r3, r2
    3a64:	bf28      	it	cs
    3a66:	4613      	movcs	r3, r2
    3a68:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
    3a6a:	88fb      	ldrh	r3, [r7, #6]
}
    3a6c:	4618      	mov	r0, r3
    3a6e:	3710      	adds	r7, #16
    3a70:	46bd      	mov	sp, r7
    3a72:	bd80      	pop	{r7, pc}

00003a74 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
    3a74:	b580      	push	{r7, lr}
    3a76:	b086      	sub	sp, #24
    3a78:	af00      	add	r7, sp, #0
    3a7a:	60f8      	str	r0, [r7, #12]
    3a7c:	607b      	str	r3, [r7, #4]
    3a7e:	460b      	mov	r3, r1
    3a80:	817b      	strh	r3, [r7, #10]
    3a82:	4613      	mov	r3, r2
    3a84:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
    3a86:	897a      	ldrh	r2, [r7, #10]
    3a88:	893b      	ldrh	r3, [r7, #8]
    3a8a:	4413      	add	r3, r2
    3a8c:	b29b      	uxth	r3, r3
    3a8e:	3314      	adds	r3, #20
    3a90:	b29b      	uxth	r3, r3
    3a92:	2200      	movs	r2, #0
    3a94:	4619      	mov	r1, r3
    3a96:	2001      	movs	r0, #1
    3a98:	f002 feae 	bl	67f8 <pbuf_alloc>
    3a9c:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
    3a9e:	697b      	ldr	r3, [r7, #20]
    3aa0:	2b00      	cmp	r3, #0
    3aa2:	d04a      	beq.n	3b3a <tcp_output_alloc_header+0xc6>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
    3aa4:	697b      	ldr	r3, [r7, #20]
    3aa6:	685b      	ldr	r3, [r3, #4]
    3aa8:	613b      	str	r3, [r7, #16]
    tcphdr->src = htons(pcb->local_port);
    3aaa:	68fb      	ldr	r3, [r7, #12]
    3aac:	8b9b      	ldrh	r3, [r3, #28]
    3aae:	4618      	mov	r0, r3
    3ab0:	f003 fb12 	bl	70d8 <lwip_htons>
    3ab4:	4603      	mov	r3, r0
    3ab6:	461a      	mov	r2, r3
    3ab8:	693b      	ldr	r3, [r7, #16]
    3aba:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = htons(pcb->remote_port);
    3abc:	68fb      	ldr	r3, [r7, #12]
    3abe:	8bdb      	ldrh	r3, [r3, #30]
    3ac0:	4618      	mov	r0, r3
    3ac2:	f003 fb09 	bl	70d8 <lwip_htons>
    3ac6:	4603      	mov	r3, r0
    3ac8:	461a      	mov	r2, r3
    3aca:	693b      	ldr	r3, [r7, #16]
    3acc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
    3ace:	693b      	ldr	r3, [r7, #16]
    3ad0:	687a      	ldr	r2, [r7, #4]
    3ad2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = htonl(pcb->rcv_nxt);
    3ad4:	68fb      	ldr	r3, [r7, #12]
    3ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3ad8:	4618      	mov	r0, r3
    3ada:	f003 fb1f 	bl	711c <lwip_htonl>
    3ade:	4602      	mov	r2, r0
    3ae0:	693b      	ldr	r3, [r7, #16]
    3ae2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
    3ae4:	897b      	ldrh	r3, [r7, #10]
    3ae6:	089b      	lsrs	r3, r3, #2
    3ae8:	b29b      	uxth	r3, r3
    3aea:	3305      	adds	r3, #5
    3aec:	b29b      	uxth	r3, r3
    3aee:	031b      	lsls	r3, r3, #12
    3af0:	b29b      	uxth	r3, r3
    3af2:	f043 0310 	orr.w	r3, r3, #16
    3af6:	b29b      	uxth	r3, r3
    3af8:	4618      	mov	r0, r3
    3afa:	f003 faed 	bl	70d8 <lwip_htons>
    3afe:	4603      	mov	r3, r0
    3b00:	461a      	mov	r2, r3
    3b02:	693b      	ldr	r3, [r7, #16]
    3b04:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = htons(pcb->rcv_ann_wnd);
    3b06:	68fb      	ldr	r3, [r7, #12]
    3b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    3b0a:	4618      	mov	r0, r3
    3b0c:	f003 fae4 	bl	70d8 <lwip_htons>
    3b10:	4603      	mov	r3, r0
    3b12:	461a      	mov	r2, r3
    3b14:	693b      	ldr	r3, [r7, #16]
    3b16:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
    3b18:	693b      	ldr	r3, [r7, #16]
    3b1a:	2200      	movs	r2, #0
    3b1c:	741a      	strb	r2, [r3, #16]
    3b1e:	2200      	movs	r2, #0
    3b20:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
    3b22:	693b      	ldr	r3, [r7, #16]
    3b24:	2200      	movs	r2, #0
    3b26:	749a      	strb	r2, [r3, #18]
    3b28:	2200      	movs	r2, #0
    3b2a:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
    3b2c:	68fb      	ldr	r3, [r7, #12]
    3b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3b30:	68fa      	ldr	r2, [r7, #12]
    3b32:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
    3b34:	441a      	add	r2, r3
    3b36:	68fb      	ldr	r3, [r7, #12]
    3b38:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
    3b3a:	697b      	ldr	r3, [r7, #20]
}
    3b3c:	4618      	mov	r0, r3
    3b3e:	3718      	adds	r7, #24
    3b40:	46bd      	mov	sp, r7
    3b42:	bd80      	pop	{r7, pc}

00003b44 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
    3b44:	b5b0      	push	{r4, r5, r7, lr}
    3b46:	b084      	sub	sp, #16
    3b48:	af00      	add	r7, sp, #0
    3b4a:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
    3b4c:	687b      	ldr	r3, [r7, #4]
    3b4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    3b50:	2b00      	cmp	r3, #0
    3b52:	d025      	beq.n	3ba0 <tcp_send_fin+0x5c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
    3b54:	687b      	ldr	r3, [r7, #4]
    3b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    3b58:	60fb      	str	r3, [r7, #12]
    3b5a:	e002      	b.n	3b62 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
    3b5c:	68fb      	ldr	r3, [r7, #12]
    3b5e:	681b      	ldr	r3, [r3, #0]
    3b60:	60fb      	str	r3, [r7, #12]
tcp_send_fin(struct tcp_pcb *pcb)
{
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
    3b62:	68fb      	ldr	r3, [r7, #12]
    3b64:	681b      	ldr	r3, [r3, #0]
    3b66:	2b00      	cmp	r3, #0
    3b68:	d1f8      	bne.n	3b5c <tcp_send_fin+0x18>
         last_unsent = last_unsent->next);

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
    3b6a:	68fb      	ldr	r3, [r7, #12]
    3b6c:	68db      	ldr	r3, [r3, #12]
    3b6e:	899b      	ldrh	r3, [r3, #12]
    3b70:	b29b      	uxth	r3, r3
    3b72:	4618      	mov	r0, r3
    3b74:	f003 fac4 	bl	7100 <lwip_ntohs>
    3b78:	4603      	mov	r3, r0
    3b7a:	f003 0307 	and.w	r3, r3, #7
    3b7e:	2b00      	cmp	r3, #0
    3b80:	d10e      	bne.n	3ba0 <tcp_send_fin+0x5c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
    3b82:	68fb      	ldr	r3, [r7, #12]
    3b84:	68dc      	ldr	r4, [r3, #12]
    3b86:	68fb      	ldr	r3, [r7, #12]
    3b88:	68db      	ldr	r3, [r3, #12]
    3b8a:	899b      	ldrh	r3, [r3, #12]
    3b8c:	b29d      	uxth	r5, r3
    3b8e:	2001      	movs	r0, #1
    3b90:	f003 faa2 	bl	70d8 <lwip_htons>
    3b94:	4603      	mov	r3, r0
    3b96:	432b      	orrs	r3, r5
    3b98:	b29b      	uxth	r3, r3
    3b9a:	81a3      	strh	r3, [r4, #12]
      return ERR_OK;
    3b9c:	2300      	movs	r3, #0
    3b9e:	e004      	b.n	3baa <tcp_send_fin+0x66>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
    3ba0:	2101      	movs	r1, #1
    3ba2:	6878      	ldr	r0, [r7, #4]
    3ba4:	f000 f892 	bl	3ccc <tcp_enqueue_flags>
    3ba8:	4603      	mov	r3, r0
}
    3baa:	4618      	mov	r0, r3
    3bac:	3710      	adds	r7, #16
    3bae:	46bd      	mov	sp, r7
    3bb0:	bdb0      	pop	{r4, r5, r7, pc}
    3bb2:	bf00      	nop

00003bb4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
    3bb4:	b590      	push	{r4, r7, lr}
    3bb6:	b087      	sub	sp, #28
    3bb8:	af00      	add	r7, sp, #0
    3bba:	60f8      	str	r0, [r7, #12]
    3bbc:	60b9      	str	r1, [r7, #8]
    3bbe:	603b      	str	r3, [r7, #0]
    3bc0:	4613      	mov	r3, r2
    3bc2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
    3bc4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    3bc8:	f003 0301 	and.w	r3, r3, #1
    3bcc:	2b00      	cmp	r3, #0
    3bce:	d001      	beq.n	3bd4 <tcp_create_segment+0x20>
    3bd0:	2204      	movs	r2, #4
    3bd2:	e000      	b.n	3bd6 <tcp_create_segment+0x22>
    3bd4:	2200      	movs	r2, #0
    3bd6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    3bda:	f003 0302 	and.w	r3, r3, #2
    3bde:	2b00      	cmp	r3, #0
    3be0:	d001      	beq.n	3be6 <tcp_create_segment+0x32>
    3be2:	230c      	movs	r3, #12
    3be4:	e000      	b.n	3be8 <tcp_create_segment+0x34>
    3be6:	2300      	movs	r3, #0
    3be8:	4413      	add	r3, r2
    3bea:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
    3bec:	2004      	movs	r0, #4
    3bee:	f7fe fd4b 	bl	2688 <memp_malloc>
    3bf2:	6138      	str	r0, [r7, #16]
    3bf4:	693b      	ldr	r3, [r7, #16]
    3bf6:	2b00      	cmp	r3, #0
    3bf8:	d104      	bne.n	3c04 <tcp_create_segment+0x50>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
    3bfa:	68b8      	ldr	r0, [r7, #8]
    3bfc:	f003 f822 	bl	6c44 <pbuf_free>
    return NULL;
    3c00:	2300      	movs	r3, #0
    3c02:	e05c      	b.n	3cbe <tcp_create_segment+0x10a>
  }
  seg->flags = optflags;
    3c04:	693b      	ldr	r3, [r7, #16]
    3c06:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
    3c0a:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
    3c0c:	693b      	ldr	r3, [r7, #16]
    3c0e:	2200      	movs	r2, #0
    3c10:	601a      	str	r2, [r3, #0]
  seg->p = p;
    3c12:	693b      	ldr	r3, [r7, #16]
    3c14:	68ba      	ldr	r2, [r7, #8]
    3c16:	605a      	str	r2, [r3, #4]
  seg->len = p->tot_len - optlen;
    3c18:	68bb      	ldr	r3, [r7, #8]
    3c1a:	891a      	ldrh	r2, [r3, #8]
    3c1c:	7dfb      	ldrb	r3, [r7, #23]
    3c1e:	b29b      	uxth	r3, r3
    3c20:	1ad3      	subs	r3, r2, r3
    3c22:	b29a      	uxth	r2, r3
    3c24:	693b      	ldr	r3, [r7, #16]
    3c26:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
    3c28:	2114      	movs	r1, #20
    3c2a:	68b8      	ldr	r0, [r7, #8]
    3c2c:	f002 ff9c 	bl	6b68 <pbuf_header>
    3c30:	4603      	mov	r3, r0
    3c32:	2b00      	cmp	r3, #0
    3c34:	d00c      	beq.n	3c50 <tcp_create_segment+0x9c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    3c36:	4b24      	ldr	r3, [pc, #144]	; (3cc8 <tcp_create_segment+0x114>)
    3c38:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
    3c3c:	3301      	adds	r3, #1
    3c3e:	b29a      	uxth	r2, r3
    3c40:	4b21      	ldr	r3, [pc, #132]	; (3cc8 <tcp_create_segment+0x114>)
    3c42:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
    tcp_seg_free(seg);
    3c46:	6938      	ldr	r0, [r7, #16]
    3c48:	f7ff fc7e 	bl	3548 <tcp_seg_free>
    return NULL;
    3c4c:	2300      	movs	r3, #0
    3c4e:	e036      	b.n	3cbe <tcp_create_segment+0x10a>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
    3c50:	693b      	ldr	r3, [r7, #16]
    3c52:	685b      	ldr	r3, [r3, #4]
    3c54:	685a      	ldr	r2, [r3, #4]
    3c56:	693b      	ldr	r3, [r7, #16]
    3c58:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = htons(pcb->local_port);
    3c5a:	693b      	ldr	r3, [r7, #16]
    3c5c:	68dc      	ldr	r4, [r3, #12]
    3c5e:	68fb      	ldr	r3, [r7, #12]
    3c60:	8b9b      	ldrh	r3, [r3, #28]
    3c62:	4618      	mov	r0, r3
    3c64:	f003 fa38 	bl	70d8 <lwip_htons>
    3c68:	4603      	mov	r3, r0
    3c6a:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = htons(pcb->remote_port);
    3c6c:	693b      	ldr	r3, [r7, #16]
    3c6e:	68dc      	ldr	r4, [r3, #12]
    3c70:	68fb      	ldr	r3, [r7, #12]
    3c72:	8bdb      	ldrh	r3, [r3, #30]
    3c74:	4618      	mov	r0, r3
    3c76:	f003 fa2f 	bl	70d8 <lwip_htons>
    3c7a:	4603      	mov	r3, r0
    3c7c:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = htonl(seqno);
    3c7e:	693b      	ldr	r3, [r7, #16]
    3c80:	68dc      	ldr	r4, [r3, #12]
    3c82:	6838      	ldr	r0, [r7, #0]
    3c84:	f003 fa4a 	bl	711c <lwip_htonl>
    3c88:	4603      	mov	r3, r0
    3c8a:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
    3c8c:	693b      	ldr	r3, [r7, #16]
    3c8e:	68dc      	ldr	r4, [r3, #12]
    3c90:	7dfb      	ldrb	r3, [r7, #23]
    3c92:	089b      	lsrs	r3, r3, #2
    3c94:	b2db      	uxtb	r3, r3
    3c96:	3305      	adds	r3, #5
    3c98:	031b      	lsls	r3, r3, #12
    3c9a:	b21a      	sxth	r2, r3
    3c9c:	79fb      	ldrb	r3, [r7, #7]
    3c9e:	b21b      	sxth	r3, r3
    3ca0:	4313      	orrs	r3, r2
    3ca2:	b21b      	sxth	r3, r3
    3ca4:	b29b      	uxth	r3, r3
    3ca6:	4618      	mov	r0, r3
    3ca8:	f003 fa16 	bl	70d8 <lwip_htons>
    3cac:	4603      	mov	r3, r0
    3cae:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
    3cb0:	693b      	ldr	r3, [r7, #16]
    3cb2:	68db      	ldr	r3, [r3, #12]
    3cb4:	2200      	movs	r2, #0
    3cb6:	749a      	strb	r2, [r3, #18]
    3cb8:	2200      	movs	r2, #0
    3cba:	74da      	strb	r2, [r3, #19]
  return seg;
    3cbc:	693b      	ldr	r3, [r7, #16]
} 
    3cbe:	4618      	mov	r0, r3
    3cc0:	371c      	adds	r7, #28
    3cc2:	46bd      	mov	sp, r7
    3cc4:	bd90      	pop	{r4, r7, pc}
    3cc6:	bf00      	nop
    3cc8:	10001978 	.word	0x10001978

00003ccc <tcp_enqueue_flags>:
 * @param optdata pointer to TCP options, or NULL.
 * @param optlen length of TCP options in bytes.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
    3ccc:	b580      	push	{r7, lr}
    3cce:	b08a      	sub	sp, #40	; 0x28
    3cd0:	af02      	add	r7, sp, #8
    3cd2:	6078      	str	r0, [r7, #4]
    3cd4:	460b      	mov	r3, r1
    3cd6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
    3cd8:	2300      	movs	r3, #0
    3cda:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
    3cdc:	2300      	movs	r3, #0
    3cde:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
    3ce0:	687b      	ldr	r3, [r7, #4]
    3ce2:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
    3ce6:	2b03      	cmp	r3, #3
    3ce8:	d806      	bhi.n	3cf8 <tcp_enqueue_flags+0x2c>
    3cea:	687b      	ldr	r3, [r7, #4]
    3cec:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
    3cf0:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    3cf4:	4293      	cmp	r3, r2
    3cf6:	d913      	bls.n	3d20 <tcp_enqueue_flags+0x54>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    3cf8:	4b6c      	ldr	r3, [pc, #432]	; (3eac <tcp_enqueue_flags+0x1e0>)
    3cfa:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
    3cfe:	3301      	adds	r3, #1
    3d00:	b29a      	uxth	r2, r3
    3d02:	4b6a      	ldr	r3, [pc, #424]	; (3eac <tcp_enqueue_flags+0x1e0>)
    3d04:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    pcb->flags |= TF_NAGLEMEMERR;
    3d08:	687b      	ldr	r3, [r7, #4]
    3d0a:	f893 3020 	ldrb.w	r3, [r3, #32]
    3d0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3d12:	b2da      	uxtb	r2, r3
    3d14:	687b      	ldr	r3, [r7, #4]
    3d16:	f883 2020 	strb.w	r2, [r3, #32]
    return ERR_MEM;
    3d1a:	f04f 33ff 	mov.w	r3, #4294967295
    3d1e:	e0c1      	b.n	3ea4 <tcp_enqueue_flags+0x1d8>
  }

  if (flags & TCP_SYN) {
    3d20:	78fb      	ldrb	r3, [r7, #3]
    3d22:	f003 0302 	and.w	r3, r3, #2
    3d26:	2b00      	cmp	r3, #0
    3d28:	d001      	beq.n	3d2e <tcp_enqueue_flags+0x62>
    optflags = TF_SEG_OPTS_MSS;
    3d2a:	2301      	movs	r3, #1
    3d2c:	77fb      	strb	r3, [r7, #31]
#if LWIP_TCP_TIMESTAMPS
  if ((pcb->flags & TF_TIMESTAMP)) {
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
    3d2e:	7ffb      	ldrb	r3, [r7, #31]
    3d30:	f003 0301 	and.w	r3, r3, #1
    3d34:	2b00      	cmp	r3, #0
    3d36:	d001      	beq.n	3d3c <tcp_enqueue_flags+0x70>
    3d38:	2204      	movs	r2, #4
    3d3a:	e000      	b.n	3d3e <tcp_enqueue_flags+0x72>
    3d3c:	2200      	movs	r2, #0
    3d3e:	7ffb      	ldrb	r3, [r7, #31]
    3d40:	f003 0302 	and.w	r3, r3, #2
    3d44:	2b00      	cmp	r3, #0
    3d46:	d001      	beq.n	3d4c <tcp_enqueue_flags+0x80>
    3d48:	230c      	movs	r3, #12
    3d4a:	e000      	b.n	3d4e <tcp_enqueue_flags+0x82>
    3d4c:	2300      	movs	r3, #0
    3d4e:	4413      	add	r3, r2
    3d50:	75fb      	strb	r3, [r7, #23]

  /* tcp_enqueue_flags is always called with either SYN or FIN in flags.
   * We need one available snd_buf byte to do that.
   * This means we can't send FIN while snd_buf==0. A better fix would be to
   * not include SYN and FIN sequence numbers in the snd_buf count. */
  if (pcb->snd_buf == 0) {
    3d52:	687b      	ldr	r3, [r7, #4]
    3d54:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
    3d58:	2b00      	cmp	r3, #0
    3d5a:	d10a      	bne.n	3d72 <tcp_enqueue_flags+0xa6>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_enqueue_flags: no send buffer available\n"));
    TCP_STATS_INC(tcp.memerr);
    3d5c:	4b53      	ldr	r3, [pc, #332]	; (3eac <tcp_enqueue_flags+0x1e0>)
    3d5e:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
    3d62:	3301      	adds	r3, #1
    3d64:	b29a      	uxth	r2, r3
    3d66:	4b51      	ldr	r3, [pc, #324]	; (3eac <tcp_enqueue_flags+0x1e0>)
    3d68:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    return ERR_MEM;
    3d6c:	f04f 33ff 	mov.w	r3, #4294967295
    3d70:	e098      	b.n	3ea4 <tcp_enqueue_flags+0x1d8>
  }

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
    3d72:	7dfb      	ldrb	r3, [r7, #23]
    3d74:	b29b      	uxth	r3, r3
    3d76:	2200      	movs	r2, #0
    3d78:	4619      	mov	r1, r3
    3d7a:	2000      	movs	r0, #0
    3d7c:	f002 fd3c 	bl	67f8 <pbuf_alloc>
    3d80:	6138      	str	r0, [r7, #16]
    3d82:	693b      	ldr	r3, [r7, #16]
    3d84:	2b00      	cmp	r3, #0
    3d86:	d113      	bne.n	3db0 <tcp_enqueue_flags+0xe4>
    pcb->flags |= TF_NAGLEMEMERR;
    3d88:	687b      	ldr	r3, [r7, #4]
    3d8a:	f893 3020 	ldrb.w	r3, [r3, #32]
    3d8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3d92:	b2da      	uxtb	r2, r3
    3d94:	687b      	ldr	r3, [r7, #4]
    3d96:	f883 2020 	strb.w	r2, [r3, #32]
    TCP_STATS_INC(tcp.memerr);
    3d9a:	4b44      	ldr	r3, [pc, #272]	; (3eac <tcp_enqueue_flags+0x1e0>)
    3d9c:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
    3da0:	3301      	adds	r3, #1
    3da2:	b29a      	uxth	r2, r3
    3da4:	4b41      	ldr	r3, [pc, #260]	; (3eac <tcp_enqueue_flags+0x1e0>)
    3da6:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    return ERR_MEM;
    3daa:	f04f 33ff 	mov.w	r3, #4294967295
    3dae:	e079      	b.n	3ea4 <tcp_enqueue_flags+0x1d8>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
    3db0:	687b      	ldr	r3, [r7, #4]
    3db2:	6e99      	ldr	r1, [r3, #104]	; 0x68
    3db4:	78fa      	ldrb	r2, [r7, #3]
    3db6:	7ffb      	ldrb	r3, [r7, #31]
    3db8:	9300      	str	r3, [sp, #0]
    3dba:	460b      	mov	r3, r1
    3dbc:	6939      	ldr	r1, [r7, #16]
    3dbe:	6878      	ldr	r0, [r7, #4]
    3dc0:	f7ff fef8 	bl	3bb4 <tcp_create_segment>
    3dc4:	60f8      	str	r0, [r7, #12]
    3dc6:	68fb      	ldr	r3, [r7, #12]
    3dc8:	2b00      	cmp	r3, #0
    3dca:	d113      	bne.n	3df4 <tcp_enqueue_flags+0x128>
    pcb->flags |= TF_NAGLEMEMERR;
    3dcc:	687b      	ldr	r3, [r7, #4]
    3dce:	f893 3020 	ldrb.w	r3, [r3, #32]
    3dd2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3dd6:	b2da      	uxtb	r2, r3
    3dd8:	687b      	ldr	r3, [r7, #4]
    3dda:	f883 2020 	strb.w	r2, [r3, #32]
    TCP_STATS_INC(tcp.memerr);
    3dde:	4b33      	ldr	r3, [pc, #204]	; (3eac <tcp_enqueue_flags+0x1e0>)
    3de0:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
    3de4:	3301      	adds	r3, #1
    3de6:	b29a      	uxth	r2, r3
    3de8:	4b30      	ldr	r3, [pc, #192]	; (3eac <tcp_enqueue_flags+0x1e0>)
    3dea:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    return ERR_MEM;
    3dee:	f04f 33ff 	mov.w	r3, #4294967295
    3df2:	e057      	b.n	3ea4 <tcp_enqueue_flags+0x1d8>
               ntohl(seg->tcphdr->seqno),
               ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
    3df4:	687b      	ldr	r3, [r7, #4]
    3df6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    3df8:	2b00      	cmp	r3, #0
    3dfa:	d103      	bne.n	3e04 <tcp_enqueue_flags+0x138>
    pcb->unsent = seg;
    3dfc:	687b      	ldr	r3, [r7, #4]
    3dfe:	68fa      	ldr	r2, [r7, #12]
    3e00:	675a      	str	r2, [r3, #116]	; 0x74
    3e02:	e00d      	b.n	3e20 <tcp_enqueue_flags+0x154>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
    3e04:	687b      	ldr	r3, [r7, #4]
    3e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    3e08:	61bb      	str	r3, [r7, #24]
    3e0a:	e002      	b.n	3e12 <tcp_enqueue_flags+0x146>
    3e0c:	69bb      	ldr	r3, [r7, #24]
    3e0e:	681b      	ldr	r3, [r3, #0]
    3e10:	61bb      	str	r3, [r7, #24]
    3e12:	69bb      	ldr	r3, [r7, #24]
    3e14:	681b      	ldr	r3, [r3, #0]
    3e16:	2b00      	cmp	r3, #0
    3e18:	d1f8      	bne.n	3e0c <tcp_enqueue_flags+0x140>
    useg->next = seg;
    3e1a:	69bb      	ldr	r3, [r7, #24]
    3e1c:	68fa      	ldr	r2, [r7, #12]
    3e1e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
    3e20:	687b      	ldr	r3, [r7, #4]
    3e22:	2200      	movs	r2, #0
    3e24:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
    3e28:	78fb      	ldrb	r3, [r7, #3]
    3e2a:	f003 0302 	and.w	r3, r3, #2
    3e2e:	2b00      	cmp	r3, #0
    3e30:	d104      	bne.n	3e3c <tcp_enqueue_flags+0x170>
    3e32:	78fb      	ldrb	r3, [r7, #3]
    3e34:	f003 0301 	and.w	r3, r3, #1
    3e38:	2b00      	cmp	r3, #0
    3e3a:	d00c      	beq.n	3e56 <tcp_enqueue_flags+0x18a>
    pcb->snd_lbb++;
    3e3c:	687b      	ldr	r3, [r7, #4]
    3e3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3e40:	1c5a      	adds	r2, r3, #1
    3e42:	687b      	ldr	r3, [r7, #4]
    3e44:	669a      	str	r2, [r3, #104]	; 0x68
    /* optlen does not influence snd_buf */
    pcb->snd_buf--;
    3e46:	687b      	ldr	r3, [r7, #4]
    3e48:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
    3e4c:	3b01      	subs	r3, #1
    3e4e:	b29a      	uxth	r2, r3
    3e50:	687b      	ldr	r3, [r7, #4]
    3e52:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
  }
  if (flags & TCP_FIN) {
    3e56:	78fb      	ldrb	r3, [r7, #3]
    3e58:	f003 0301 	and.w	r3, r3, #1
    3e5c:	2b00      	cmp	r3, #0
    3e5e:	d008      	beq.n	3e72 <tcp_enqueue_flags+0x1a6>
    pcb->flags |= TF_FIN;
    3e60:	687b      	ldr	r3, [r7, #4]
    3e62:	f893 3020 	ldrb.w	r3, [r3, #32]
    3e66:	f043 0320 	orr.w	r3, r3, #32
    3e6a:	b2da      	uxtb	r2, r3
    3e6c:	687b      	ldr	r3, [r7, #4]
    3e6e:	f883 2020 	strb.w	r2, [r3, #32]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
    3e72:	68fb      	ldr	r3, [r7, #12]
    3e74:	685b      	ldr	r3, [r3, #4]
    3e76:	4618      	mov	r0, r3
    3e78:	f002 ff40 	bl	6cfc <pbuf_clen>
    3e7c:	4603      	mov	r3, r0
    3e7e:	4619      	mov	r1, r3
    3e80:	687b      	ldr	r3, [r7, #4]
    3e82:	f8b3 2070 	ldrh.w	r2, [r3, #112]	; 0x70
    3e86:	b28b      	uxth	r3, r1
    3e88:	4413      	add	r3, r2
    3e8a:	b29a      	uxth	r2, r3
    3e8c:	687b      	ldr	r3, [r7, #4]
    3e8e:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
    3e92:	687b      	ldr	r3, [r7, #4]
    3e94:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
    3e98:	2b00      	cmp	r3, #0
    3e9a:	d002      	beq.n	3ea2 <tcp_enqueue_flags+0x1d6>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
    3e9c:	687b      	ldr	r3, [r7, #4]
    3e9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    3ea0:	2b00      	cmp	r3, #0
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
    3ea2:	2300      	movs	r3, #0
}
    3ea4:	4618      	mov	r0, r3
    3ea6:	3720      	adds	r7, #32
    3ea8:	46bd      	mov	sp, r7
    3eaa:	bd80      	pop	{r7, pc}
    3eac:	10001978 	.word	0x10001978

00003eb0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
    3eb0:	b590      	push	{r4, r7, lr}
    3eb2:	b089      	sub	sp, #36	; 0x24
    3eb4:	af02      	add	r7, sp, #8
    3eb6:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  u8_t optlen = 0;
    3eb8:	2300      	movs	r3, #0
    3eba:	75fb      	strb	r3, [r7, #23]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, htonl(pcb->snd_nxt));
    3ebc:	7dfb      	ldrb	r3, [r7, #23]
    3ebe:	b29c      	uxth	r4, r3
    3ec0:	687b      	ldr	r3, [r7, #4]
    3ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    3ec4:	4618      	mov	r0, r3
    3ec6:	f003 f929 	bl	711c <lwip_htonl>
    3eca:	4603      	mov	r3, r0
    3ecc:	2200      	movs	r2, #0
    3ece:	4621      	mov	r1, r4
    3ed0:	6878      	ldr	r0, [r7, #4]
    3ed2:	f7ff fdcf 	bl	3a74 <tcp_output_alloc_header>
    3ed6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
    3ed8:	693b      	ldr	r3, [r7, #16]
    3eda:	2b00      	cmp	r3, #0
    3edc:	d102      	bne.n	3ee4 <tcp_send_empty_ack+0x34>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
    3ede:	f06f 0301 	mvn.w	r3, #1
    3ee2:	e02c      	b.n	3f3e <tcp_send_empty_ack+0x8e>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
    3ee4:	693b      	ldr	r3, [r7, #16]
    3ee6:	685b      	ldr	r3, [r3, #4]
    3ee8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, 
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  /* remove ACK flags from the PCB, as we send an empty ACK now */
  pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
    3eea:	687b      	ldr	r3, [r7, #4]
    3eec:	f893 3020 	ldrb.w	r3, [r3, #32]
    3ef0:	f023 0303 	bic.w	r3, r3, #3
    3ef4:	b2da      	uxtb	r2, r3
    3ef6:	687b      	ldr	r3, [r7, #4]
    3ef8:	f883 2020 	strb.w	r2, [r3, #32]
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif 

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &(pcb->local_ip), &(pcb->remote_ip),
    3efc:	6879      	ldr	r1, [r7, #4]
    3efe:	687b      	ldr	r3, [r7, #4]
    3f00:	1d1a      	adds	r2, r3, #4
    3f02:	693b      	ldr	r3, [r7, #16]
    3f04:	891b      	ldrh	r3, [r3, #8]
    3f06:	9300      	str	r3, [sp, #0]
    3f08:	2306      	movs	r3, #6
    3f0a:	6938      	ldr	r0, [r7, #16]
    3f0c:	f003 fe30 	bl	7b70 <inet_chksum_pseudo>
    3f10:	4603      	mov	r3, r0
    3f12:	461a      	mov	r2, r3
    3f14:	68fb      	ldr	r3, [r7, #12]
    3f16:	821a      	strh	r2, [r3, #16]
#endif
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
    3f18:	6879      	ldr	r1, [r7, #4]
    3f1a:	687b      	ldr	r3, [r7, #4]
    3f1c:	1d18      	adds	r0, r3, #4
    3f1e:	687b      	ldr	r3, [r7, #4]
    3f20:	7a9c      	ldrb	r4, [r3, #10]
    3f22:	687b      	ldr	r3, [r7, #4]
    3f24:	7a5b      	ldrb	r3, [r3, #9]
    3f26:	2206      	movs	r2, #6
    3f28:	9201      	str	r2, [sp, #4]
    3f2a:	9300      	str	r3, [sp, #0]
    3f2c:	4623      	mov	r3, r4
    3f2e:	4602      	mov	r2, r0
    3f30:	6938      	ldr	r0, [r7, #16]
    3f32:	f003 fd91 	bl	7a58 <ip_output>
      IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/
  pbuf_free(p);
    3f36:	6938      	ldr	r0, [r7, #16]
    3f38:	f002 fe84 	bl	6c44 <pbuf_free>

  return ERR_OK;
    3f3c:	2300      	movs	r3, #0
}
    3f3e:	4618      	mov	r0, r3
    3f40:	371c      	adds	r7, #28
    3f42:	46bd      	mov	sp, r7
    3f44:	bd90      	pop	{r4, r7, pc}
    3f46:	bf00      	nop

00003f48 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
    3f48:	b5b0      	push	{r4, r5, r7, lr}
    3f4a:	b088      	sub	sp, #32
    3f4c:	af00      	add	r7, sp, #0
    3f4e:	6078      	str	r0, [r7, #4]

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
    3f50:	4b99      	ldr	r3, [pc, #612]	; (41b8 <tcp_output+0x270>)
    3f52:	681a      	ldr	r2, [r3, #0]
    3f54:	687b      	ldr	r3, [r7, #4]
    3f56:	429a      	cmp	r2, r3
    3f58:	d101      	bne.n	3f5e <tcp_output+0x16>
    return ERR_OK;
    3f5a:	2300      	movs	r3, #0
    3f5c:	e163      	b.n	4226 <tcp_output+0x2de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
    3f5e:	687b      	ldr	r3, [r7, #4]
    3f60:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
    3f64:	687b      	ldr	r3, [r7, #4]
    3f66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
    3f6a:	4293      	cmp	r3, r2
    3f6c:	bf28      	it	cs
    3f6e:	4613      	movcs	r3, r2
    3f70:	b29b      	uxth	r3, r3
    3f72:	613b      	str	r3, [r7, #16]

  seg = pcb->unsent;
    3f74:	687b      	ldr	r3, [r7, #4]
    3f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    3f78:	61fb      	str	r3, [r7, #28]
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
    3f7a:	687b      	ldr	r3, [r7, #4]
    3f7c:	f893 3020 	ldrb.w	r3, [r3, #32]
    3f80:	f003 0302 	and.w	r3, r3, #2
    3f84:	2b00      	cmp	r3, #0
    3f86:	d017      	beq.n	3fb8 <tcp_output+0x70>
    3f88:	69fb      	ldr	r3, [r7, #28]
    3f8a:	2b00      	cmp	r3, #0
    3f8c:	d00f      	beq.n	3fae <tcp_output+0x66>
     (seg == NULL ||
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
    3f8e:	69fb      	ldr	r3, [r7, #28]
    3f90:	68db      	ldr	r3, [r3, #12]
    3f92:	685b      	ldr	r3, [r3, #4]
    3f94:	4618      	mov	r0, r3
    3f96:	f003 f8d9 	bl	714c <lwip_ntohl>
    3f9a:	4602      	mov	r2, r0
    3f9c:	687b      	ldr	r3, [r7, #4]
    3f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    3fa0:	1ad3      	subs	r3, r2, r3
    3fa2:	69fa      	ldr	r2, [r7, #28]
    3fa4:	8912      	ldrh	r2, [r2, #8]
    3fa6:	441a      	add	r2, r3
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
     (seg == NULL ||
    3fa8:	693b      	ldr	r3, [r7, #16]
    3faa:	429a      	cmp	r2, r3
    3fac:	d904      	bls.n	3fb8 <tcp_output+0x70>
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
    3fae:	6878      	ldr	r0, [r7, #4]
    3fb0:	f7ff ff7e 	bl	3eb0 <tcp_send_empty_ack>
    3fb4:	4603      	mov	r3, r0
    3fb6:	e136      	b.n	4226 <tcp_output+0x2de>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
    3fb8:	687b      	ldr	r3, [r7, #4]
    3fba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    3fbc:	61bb      	str	r3, [r7, #24]
  if (useg != NULL) {
    3fbe:	69bb      	ldr	r3, [r7, #24]
    3fc0:	2b00      	cmp	r3, #0
    3fc2:	f000 80e4 	beq.w	418e <tcp_output+0x246>
    for (; useg->next != NULL; useg = useg->next);
    3fc6:	e002      	b.n	3fce <tcp_output+0x86>
    3fc8:	69bb      	ldr	r3, [r7, #24]
    3fca:	681b      	ldr	r3, [r3, #0]
    3fcc:	61bb      	str	r3, [r7, #24]
    3fce:	69bb      	ldr	r3, [r7, #24]
    3fd0:	681b      	ldr	r3, [r3, #0]
    3fd2:	2b00      	cmp	r3, #0
    3fd4:	d1f8      	bne.n	3fc8 <tcp_output+0x80>
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
    3fd6:	e0da      	b.n	418e <tcp_output+0x246>
         ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!", 
    3fd8:	69fb      	ldr	r3, [r7, #28]
    3fda:	68db      	ldr	r3, [r3, #12]
    3fdc:	899b      	ldrh	r3, [r3, #12]
    3fde:	b29b      	uxth	r3, r3
    3fe0:	4618      	mov	r0, r3
    3fe2:	f003 f88d 	bl	7100 <lwip_ntohs>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if((tcp_do_output_nagle(pcb) == 0) &&
    3fe6:	687b      	ldr	r3, [r7, #4]
    3fe8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    3fea:	2b00      	cmp	r3, #0
    3fec:	d016      	beq.n	401c <tcp_output+0xd4>
    3fee:	687b      	ldr	r3, [r7, #4]
    3ff0:	f893 3020 	ldrb.w	r3, [r3, #32]
    3ff4:	f003 0344 	and.w	r3, r3, #68	; 0x44
    3ff8:	2b00      	cmp	r3, #0
    3ffa:	d10f      	bne.n	401c <tcp_output+0xd4>
    3ffc:	687b      	ldr	r3, [r7, #4]
    3ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    4000:	2b00      	cmp	r3, #0
    4002:	d00d      	beq.n	4020 <tcp_output+0xd8>
    4004:	687b      	ldr	r3, [r7, #4]
    4006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    4008:	681b      	ldr	r3, [r3, #0]
    400a:	2b00      	cmp	r3, #0
    400c:	d106      	bne.n	401c <tcp_output+0xd4>
    400e:	687b      	ldr	r3, [r7, #4]
    4010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    4012:	891a      	ldrh	r2, [r3, #8]
    4014:	687b      	ldr	r3, [r7, #4]
    4016:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    4018:	429a      	cmp	r2, r3
    401a:	d301      	bcc.n	4020 <tcp_output+0xd8>
    401c:	2301      	movs	r3, #1
    401e:	e000      	b.n	4022 <tcp_output+0xda>
    4020:	2300      	movs	r3, #0
    4022:	2b00      	cmp	r3, #0
    4024:	d107      	bne.n	4036 <tcp_output+0xee>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)){
    4026:	687b      	ldr	r3, [r7, #4]
    4028:	f893 3020 	ldrb.w	r3, [r3, #32]
    402c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if((tcp_do_output_nagle(pcb) == 0) &&
    4030:	2b00      	cmp	r3, #0
    4032:	f000 80c3 	beq.w	41bc <tcp_output+0x274>
                            pcb->lastack,
                            ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    pcb->unsent = seg->next;
    4036:	69fb      	ldr	r3, [r7, #28]
    4038:	681a      	ldr	r2, [r3, #0]
    403a:	687b      	ldr	r3, [r7, #4]
    403c:	675a      	str	r2, [r3, #116]	; 0x74

    if (pcb->state != SYN_SENT) {
    403e:	687b      	ldr	r3, [r7, #4]
    4040:	7c1b      	ldrb	r3, [r3, #16]
    4042:	2b02      	cmp	r3, #2
    4044:	d015      	beq.n	4072 <tcp_output+0x12a>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
    4046:	69fb      	ldr	r3, [r7, #28]
    4048:	68dc      	ldr	r4, [r3, #12]
    404a:	69fb      	ldr	r3, [r7, #28]
    404c:	68db      	ldr	r3, [r3, #12]
    404e:	899b      	ldrh	r3, [r3, #12]
    4050:	b29d      	uxth	r5, r3
    4052:	2010      	movs	r0, #16
    4054:	f003 f840 	bl	70d8 <lwip_htons>
    4058:	4603      	mov	r3, r0
    405a:	432b      	orrs	r3, r5
    405c:	b29b      	uxth	r3, r3
    405e:	81a3      	strh	r3, [r4, #12]
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
    4060:	687b      	ldr	r3, [r7, #4]
    4062:	f893 3020 	ldrb.w	r3, [r3, #32]
    4066:	f023 0303 	bic.w	r3, r3, #3
    406a:	b2da      	uxtb	r2, r3
    406c:	687b      	ldr	r3, [r7, #4]
    406e:	f883 2020 	strb.w	r2, [r3, #32]
    }

    tcp_output_segment(seg, pcb);
    4072:	6879      	ldr	r1, [r7, #4]
    4074:	69f8      	ldr	r0, [r7, #28]
    4076:	f000 f8db 	bl	4230 <tcp_output_segment>
    snd_nxt = ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
    407a:	69fb      	ldr	r3, [r7, #28]
    407c:	68db      	ldr	r3, [r3, #12]
    407e:	685b      	ldr	r3, [r3, #4]
    4080:	4618      	mov	r0, r3
    4082:	f003 f863 	bl	714c <lwip_ntohl>
    4086:	4604      	mov	r4, r0
    4088:	69fb      	ldr	r3, [r7, #28]
    408a:	891b      	ldrh	r3, [r3, #8]
    408c:	461d      	mov	r5, r3
    408e:	69fb      	ldr	r3, [r7, #28]
    4090:	68db      	ldr	r3, [r3, #12]
    4092:	899b      	ldrh	r3, [r3, #12]
    4094:	b29b      	uxth	r3, r3
    4096:	4618      	mov	r0, r3
    4098:	f003 f832 	bl	7100 <lwip_ntohs>
    409c:	4603      	mov	r3, r0
    409e:	f003 0303 	and.w	r3, r3, #3
    40a2:	2b00      	cmp	r3, #0
    40a4:	bf14      	ite	ne
    40a6:	2301      	movne	r3, #1
    40a8:	2300      	moveq	r3, #0
    40aa:	b2db      	uxtb	r3, r3
    40ac:	442b      	add	r3, r5
    40ae:	4423      	add	r3, r4
    40b0:	60fb      	str	r3, [r7, #12]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
    40b2:	687b      	ldr	r3, [r7, #4]
    40b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    40b6:	68fb      	ldr	r3, [r7, #12]
    40b8:	1ad3      	subs	r3, r2, r3
    40ba:	2b00      	cmp	r3, #0
    40bc:	da02      	bge.n	40c4 <tcp_output+0x17c>
      pcb->snd_nxt = snd_nxt;
    40be:	687b      	ldr	r3, [r7, #4]
    40c0:	68fa      	ldr	r2, [r7, #12]
    40c2:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
    40c4:	69fb      	ldr	r3, [r7, #28]
    40c6:	891b      	ldrh	r3, [r3, #8]
    40c8:	461c      	mov	r4, r3
    40ca:	69fb      	ldr	r3, [r7, #28]
    40cc:	68db      	ldr	r3, [r3, #12]
    40ce:	899b      	ldrh	r3, [r3, #12]
    40d0:	b29b      	uxth	r3, r3
    40d2:	4618      	mov	r0, r3
    40d4:	f003 f814 	bl	7100 <lwip_ntohs>
    40d8:	4603      	mov	r3, r0
    40da:	f003 0303 	and.w	r3, r3, #3
    40de:	2b00      	cmp	r3, #0
    40e0:	bf14      	ite	ne
    40e2:	2301      	movne	r3, #1
    40e4:	2300      	moveq	r3, #0
    40e6:	b2db      	uxtb	r3, r3
    40e8:	4423      	add	r3, r4
    40ea:	2b00      	cmp	r3, #0
    40ec:	dd49      	ble.n	4182 <tcp_output+0x23a>
      seg->next = NULL;
    40ee:	69fb      	ldr	r3, [r7, #28]
    40f0:	2200      	movs	r2, #0
    40f2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
    40f4:	687b      	ldr	r3, [r7, #4]
    40f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    40f8:	2b00      	cmp	r3, #0
    40fa:	d105      	bne.n	4108 <tcp_output+0x1c0>
        pcb->unacked = seg;
    40fc:	687b      	ldr	r3, [r7, #4]
    40fe:	69fa      	ldr	r2, [r7, #28]
    4100:	679a      	str	r2, [r3, #120]	; 0x78
        useg = seg;
    4102:	69fb      	ldr	r3, [r7, #28]
    4104:	61bb      	str	r3, [r7, #24]
    4106:	e03f      	b.n	4188 <tcp_output+0x240>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
    4108:	69fb      	ldr	r3, [r7, #28]
    410a:	68db      	ldr	r3, [r3, #12]
    410c:	685b      	ldr	r3, [r3, #4]
    410e:	4618      	mov	r0, r3
    4110:	f003 f81c 	bl	714c <lwip_ntohl>
    4114:	4604      	mov	r4, r0
    4116:	69bb      	ldr	r3, [r7, #24]
    4118:	68db      	ldr	r3, [r3, #12]
    411a:	685b      	ldr	r3, [r3, #4]
    411c:	4618      	mov	r0, r3
    411e:	f003 f815 	bl	714c <lwip_ntohl>
    4122:	4603      	mov	r3, r0
    4124:	1ae3      	subs	r3, r4, r3
    4126:	2b00      	cmp	r3, #0
    4128:	da24      	bge.n	4174 <tcp_output+0x22c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
    412a:	687b      	ldr	r3, [r7, #4]
    412c:	3378      	adds	r3, #120	; 0x78
    412e:	617b      	str	r3, [r7, #20]
          while (*cur_seg &&
    4130:	e002      	b.n	4138 <tcp_output+0x1f0>
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
    4132:	697b      	ldr	r3, [r7, #20]
    4134:	681b      	ldr	r3, [r3, #0]
    4136:	617b      	str	r3, [r7, #20]
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
          while (*cur_seg &&
    4138:	697b      	ldr	r3, [r7, #20]
    413a:	681b      	ldr	r3, [r3, #0]
    413c:	2b00      	cmp	r3, #0
    413e:	d011      	beq.n	4164 <tcp_output+0x21c>
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
    4140:	697b      	ldr	r3, [r7, #20]
    4142:	681b      	ldr	r3, [r3, #0]
    4144:	68db      	ldr	r3, [r3, #12]
    4146:	685b      	ldr	r3, [r3, #4]
    4148:	4618      	mov	r0, r3
    414a:	f002 ffff 	bl	714c <lwip_ntohl>
    414e:	4604      	mov	r4, r0
    4150:	69fb      	ldr	r3, [r7, #28]
    4152:	68db      	ldr	r3, [r3, #12]
    4154:	685b      	ldr	r3, [r3, #4]
    4156:	4618      	mov	r0, r3
    4158:	f002 fff8 	bl	714c <lwip_ntohl>
    415c:	4603      	mov	r3, r0
    415e:	1ae3      	subs	r3, r4, r3
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
          while (*cur_seg &&
    4160:	2b00      	cmp	r3, #0
    4162:	dbe6      	blt.n	4132 <tcp_output+0x1ea>
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
          }
          seg->next = (*cur_seg);
    4164:	697b      	ldr	r3, [r7, #20]
    4166:	681a      	ldr	r2, [r3, #0]
    4168:	69fb      	ldr	r3, [r7, #28]
    416a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
    416c:	697b      	ldr	r3, [r7, #20]
    416e:	69fa      	ldr	r2, [r7, #28]
    4170:	601a      	str	r2, [r3, #0]
    4172:	e009      	b.n	4188 <tcp_output+0x240>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
    4174:	69bb      	ldr	r3, [r7, #24]
    4176:	69fa      	ldr	r2, [r7, #28]
    4178:	601a      	str	r2, [r3, #0]
          useg = useg->next;
    417a:	69bb      	ldr	r3, [r7, #24]
    417c:	681b      	ldr	r3, [r3, #0]
    417e:	61bb      	str	r3, [r7, #24]
    4180:	e002      	b.n	4188 <tcp_output+0x240>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
    4182:	69f8      	ldr	r0, [r7, #28]
    4184:	f7ff f9e0 	bl	3548 <tcp_seg_free>
    }
    seg = pcb->unsent;
    4188:	687b      	ldr	r3, [r7, #4]
    418a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    418c:	61fb      	str	r3, [r7, #28]
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
    418e:	69fb      	ldr	r3, [r7, #28]
    4190:	2b00      	cmp	r3, #0
    4192:	d014      	beq.n	41be <tcp_output+0x276>
         ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    4194:	69fb      	ldr	r3, [r7, #28]
    4196:	68db      	ldr	r3, [r3, #12]
    4198:	685b      	ldr	r3, [r3, #4]
    419a:	4618      	mov	r0, r3
    419c:	f002 ffd6 	bl	714c <lwip_ntohl>
    41a0:	4602      	mov	r2, r0
    41a2:	687b      	ldr	r3, [r7, #4]
    41a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    41a6:	1ad3      	subs	r3, r2, r3
    41a8:	69fa      	ldr	r2, [r7, #28]
    41aa:	8912      	ldrh	r2, [r2, #8]
    41ac:	441a      	add	r2, r3
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
    41ae:	693b      	ldr	r3, [r7, #16]
    41b0:	429a      	cmp	r2, r3
    41b2:	f67f af11 	bls.w	3fd8 <tcp_output+0x90>
    41b6:	e002      	b.n	41be <tcp_output+0x276>
    41b8:	10001a90 	.word	0x10001a90
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if((tcp_do_output_nagle(pcb) == 0) &&
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)){
      break;
    41bc:	bf00      	nop
      tcp_seg_free(seg);
    }
    seg = pcb->unsent;
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
    41be:	687b      	ldr	r3, [r7, #4]
    41c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    41c2:	2b00      	cmp	r3, #0
    41c4:	d103      	bne.n	41ce <tcp_output+0x286>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
    41c6:	687b      	ldr	r3, [r7, #4]
    41c8:	2200      	movs	r2, #0
    41ca:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  }
#endif /* TCP_OVERSIZE */

  if (seg != NULL && pcb->persist_backoff == 0 && 
    41ce:	69fb      	ldr	r3, [r7, #28]
    41d0:	2b00      	cmp	r3, #0
    41d2:	d01e      	beq.n	4212 <tcp_output+0x2ca>
    41d4:	687b      	ldr	r3, [r7, #4]
    41d6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    41da:	2b00      	cmp	r3, #0
    41dc:	d119      	bne.n	4212 <tcp_output+0x2ca>
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > pcb->snd_wnd) {
    41de:	69fb      	ldr	r3, [r7, #28]
    41e0:	68db      	ldr	r3, [r3, #12]
    41e2:	685b      	ldr	r3, [r3, #4]
    41e4:	4618      	mov	r0, r3
    41e6:	f002 ffb1 	bl	714c <lwip_ntohl>
    41ea:	4602      	mov	r2, r0
    41ec:	687b      	ldr	r3, [r7, #4]
    41ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    41f0:	1ad3      	subs	r3, r2, r3
    41f2:	69fa      	ldr	r2, [r7, #28]
    41f4:	8912      	ldrh	r2, [r2, #8]
    41f6:	4413      	add	r3, r2
    41f8:	687a      	ldr	r2, [r7, #4]
    41fa:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
  }
#endif /* TCP_OVERSIZE */

  if (seg != NULL && pcb->persist_backoff == 0 && 
    41fe:	4293      	cmp	r3, r2
    4200:	d907      	bls.n	4212 <tcp_output+0x2ca>
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > pcb->snd_wnd) {
    /* prepare for persist timer */
    pcb->persist_cnt = 0;
    4202:	687b      	ldr	r3, [r7, #4]
    4204:	2200      	movs	r2, #0
    4206:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    pcb->persist_backoff = 1;
    420a:	687b      	ldr	r3, [r7, #4]
    420c:	2201      	movs	r2, #1
    420e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  }

  pcb->flags &= ~TF_NAGLEMEMERR;
    4212:	687b      	ldr	r3, [r7, #4]
    4214:	f893 3020 	ldrb.w	r3, [r3, #32]
    4218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    421c:	b2da      	uxtb	r2, r3
    421e:	687b      	ldr	r3, [r7, #4]
    4220:	f883 2020 	strb.w	r2, [r3, #32]
  return ERR_OK;
    4224:	2300      	movs	r3, #0
}
    4226:	4618      	mov	r0, r3
    4228:	3720      	adds	r7, #32
    422a:	46bd      	mov	sp, r7
    422c:	bdb0      	pop	{r4, r5, r7, pc}
    422e:	bf00      	nop

00004230 <tcp_output_segment>:
 * @param seg the tcp_seg to send
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 */
static void
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb)
{
    4230:	b5b0      	push	{r4, r5, r7, lr}
    4232:	b088      	sub	sp, #32
    4234:	af02      	add	r7, sp, #8
    4236:	6078      	str	r0, [r7, #4]
    4238:	6039      	str	r1, [r7, #0]
  /** @bug Exclude retransmitted segments from this count. */
  snmp_inc_tcpoutsegs();

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = htonl(pcb->rcv_nxt);
    423a:	687b      	ldr	r3, [r7, #4]
    423c:	68dc      	ldr	r4, [r3, #12]
    423e:	683b      	ldr	r3, [r7, #0]
    4240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4242:	4618      	mov	r0, r3
    4244:	f002 ff6a 	bl	711c <lwip_htonl>
    4248:	4603      	mov	r3, r0
    424a:	60a3      	str	r3, [r4, #8]

  /* advertise our receive window size in this TCP segment */
  seg->tcphdr->wnd = htons(pcb->rcv_ann_wnd);
    424c:	687b      	ldr	r3, [r7, #4]
    424e:	68dc      	ldr	r4, [r3, #12]
    4250:	683b      	ldr	r3, [r7, #0]
    4252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    4254:	4618      	mov	r0, r3
    4256:	f002 ff3f 	bl	70d8 <lwip_htons>
    425a:	4603      	mov	r3, r0
    425c:	81e3      	strh	r3, [r4, #14]

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
    425e:	683b      	ldr	r3, [r7, #0]
    4260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4262:	683a      	ldr	r2, [r7, #0]
    4264:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
    4266:	441a      	add	r2, r3
    4268:	683b      	ldr	r3, [r7, #0]
    426a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % MEM_ALIGNMENT) == 0);
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
    426c:	687b      	ldr	r3, [r7, #4]
    426e:	68db      	ldr	r3, [r3, #12]
    4270:	3314      	adds	r3, #20
    4272:	617b      	str	r3, [r7, #20]
  if (seg->flags & TF_SEG_OPTS_MSS) {
    4274:	687b      	ldr	r3, [r7, #4]
    4276:	7a9b      	ldrb	r3, [r3, #10]
    4278:	f003 0301 	and.w	r3, r3, #1
    427c:	2b00      	cmp	r3, #0
    427e:	d005      	beq.n	428c <tcp_output_segment+0x5c>
    TCP_BUILD_MSS_OPTION(*opts);
    4280:	697b      	ldr	r3, [r7, #20]
    4282:	4a42      	ldr	r2, [pc, #264]	; (438c <tcp_output_segment+0x15c>)
    4284:	601a      	str	r2, [r3, #0]
    opts += 1;
    4286:	697b      	ldr	r3, [r7, #20]
    4288:	3304      	adds	r3, #4
    428a:	617b      	str	r3, [r7, #20]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled 
     This must be set before checking the route. */
  if (pcb->rtime == -1) {
    428c:	683b      	ldr	r3, [r7, #0]
    428e:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
    4292:	f1b3 3fff 	cmp.w	r3, #4294967295
    4296:	d102      	bne.n	429e <tcp_output_segment+0x6e>
    pcb->rtime = 0;
    4298:	683b      	ldr	r3, [r7, #0]
    429a:	2200      	movs	r2, #0
    429c:	86da      	strh	r2, [r3, #54]	; 0x36
  }

  /* If we don't have a local IP address, we get one by
     calling ip_route(). */
  if (ip_addr_isany(&(pcb->local_ip))) {
    429e:	683b      	ldr	r3, [r7, #0]
    42a0:	2b00      	cmp	r3, #0
    42a2:	d003      	beq.n	42ac <tcp_output_segment+0x7c>
    42a4:	683b      	ldr	r3, [r7, #0]
    42a6:	681b      	ldr	r3, [r3, #0]
    42a8:	2b00      	cmp	r3, #0
    42aa:	d10c      	bne.n	42c6 <tcp_output_segment+0x96>
    netif = ip_route(&(pcb->remote_ip));
    42ac:	683b      	ldr	r3, [r7, #0]
    42ae:	3304      	adds	r3, #4
    42b0:	4618      	mov	r0, r3
    42b2:	f003 f92b 	bl	750c <ip_route>
    42b6:	6138      	str	r0, [r7, #16]
    if (netif == NULL) {
    42b8:	693b      	ldr	r3, [r7, #16]
    42ba:	2b00      	cmp	r3, #0
    42bc:	d062      	beq.n	4384 <tcp_output_segment+0x154>
      return;
    }
    ip_addr_copy(pcb->local_ip, netif->ip_addr);
    42be:	693b      	ldr	r3, [r7, #16]
    42c0:	685a      	ldr	r2, [r3, #4]
    42c2:	683b      	ldr	r3, [r7, #0]
    42c4:	601a      	str	r2, [r3, #0]
  }

  if (pcb->rttest == 0) {
    42c6:	683b      	ldr	r3, [r7, #0]
    42c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    42ca:	2b00      	cmp	r3, #0
    42cc:	d10c      	bne.n	42e8 <tcp_output_segment+0xb8>
    pcb->rttest = tcp_ticks;
    42ce:	4b30      	ldr	r3, [pc, #192]	; (4390 <tcp_output_segment+0x160>)
    42d0:	681a      	ldr	r2, [r3, #0]
    42d2:	683b      	ldr	r3, [r7, #0]
    42d4:	63da      	str	r2, [r3, #60]	; 0x3c
    pcb->rtseq = ntohl(seg->tcphdr->seqno);
    42d6:	687b      	ldr	r3, [r7, #4]
    42d8:	68db      	ldr	r3, [r3, #12]
    42da:	685b      	ldr	r3, [r3, #4]
    42dc:	4618      	mov	r0, r3
    42de:	f002 ff35 	bl	714c <lwip_ntohl>
    42e2:	4602      	mov	r2, r0
    42e4:	683b      	ldr	r3, [r7, #0]
    42e6:	641a      	str	r2, [r3, #64]	; 0x40
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          htonl(seg->tcphdr->seqno), htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
    42e8:	687b      	ldr	r3, [r7, #4]
    42ea:	68db      	ldr	r3, [r3, #12]
    42ec:	461a      	mov	r2, r3
    42ee:	687b      	ldr	r3, [r7, #4]
    42f0:	685b      	ldr	r3, [r3, #4]
    42f2:	685b      	ldr	r3, [r3, #4]
    42f4:	1ad3      	subs	r3, r2, r3
    42f6:	81fb      	strh	r3, [r7, #14]

  seg->p->len -= len;
    42f8:	687b      	ldr	r3, [r7, #4]
    42fa:	685b      	ldr	r3, [r3, #4]
    42fc:	687a      	ldr	r2, [r7, #4]
    42fe:	6852      	ldr	r2, [r2, #4]
    4300:	8951      	ldrh	r1, [r2, #10]
    4302:	89fa      	ldrh	r2, [r7, #14]
    4304:	1a8a      	subs	r2, r1, r2
    4306:	b292      	uxth	r2, r2
    4308:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
    430a:	687b      	ldr	r3, [r7, #4]
    430c:	685b      	ldr	r3, [r3, #4]
    430e:	687a      	ldr	r2, [r7, #4]
    4310:	6852      	ldr	r2, [r2, #4]
    4312:	8911      	ldrh	r1, [r2, #8]
    4314:	89fa      	ldrh	r2, [r7, #14]
    4316:	1a8a      	subs	r2, r1, r2
    4318:	b292      	uxth	r2, r2
    431a:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
    431c:	687b      	ldr	r3, [r7, #4]
    431e:	685b      	ldr	r3, [r3, #4]
    4320:	687a      	ldr	r2, [r7, #4]
    4322:	68d2      	ldr	r2, [r2, #12]
    4324:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
    4326:	687b      	ldr	r3, [r7, #4]
    4328:	68db      	ldr	r3, [r3, #12]
    432a:	2200      	movs	r2, #0
    432c:	741a      	strb	r2, [r3, #16]
    432e:	2200      	movs	r2, #0
    4330:	745a      	strb	r2, [r3, #17]
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
  }
#else /* TCP_CHECKSUM_ON_COPY */
  seg->tcphdr->chksum = inet_chksum_pseudo(seg->p, &(pcb->local_ip),
    4332:	687b      	ldr	r3, [r7, #4]
    4334:	68dc      	ldr	r4, [r3, #12]
    4336:	687b      	ldr	r3, [r7, #4]
    4338:	6858      	ldr	r0, [r3, #4]
    433a:	6839      	ldr	r1, [r7, #0]
    433c:	683b      	ldr	r3, [r7, #0]
    433e:	1d1a      	adds	r2, r3, #4
         &(pcb->remote_ip),
         IP_PROTO_TCP, seg->p->tot_len);
    4340:	687b      	ldr	r3, [r7, #4]
    4342:	685b      	ldr	r3, [r3, #4]
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
  }
#else /* TCP_CHECKSUM_ON_COPY */
  seg->tcphdr->chksum = inet_chksum_pseudo(seg->p, &(pcb->local_ip),
    4344:	891b      	ldrh	r3, [r3, #8]
    4346:	9300      	str	r3, [sp, #0]
    4348:	2306      	movs	r3, #6
    434a:	f003 fc11 	bl	7b70 <inet_chksum_pseudo>
    434e:	4603      	mov	r3, r0
    4350:	8223      	strh	r3, [r4, #16]
         &(pcb->remote_ip),
         IP_PROTO_TCP, seg->p->tot_len);
#endif /* TCP_CHECKSUM_ON_COPY */
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
    4352:	4b10      	ldr	r3, [pc, #64]	; (4394 <tcp_output_segment+0x164>)
    4354:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
    4358:	3301      	adds	r3, #1
    435a:	b29a      	uxth	r2, r3
    435c:	4b0d      	ldr	r3, [pc, #52]	; (4394 <tcp_output_segment+0x164>)
    435e:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90

#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
    4362:	687b      	ldr	r3, [r7, #4]
    4364:	6858      	ldr	r0, [r3, #4]
    4366:	6839      	ldr	r1, [r7, #0]
    4368:	683b      	ldr	r3, [r7, #0]
    436a:	1d1c      	adds	r4, r3, #4
    436c:	683b      	ldr	r3, [r7, #0]
    436e:	7a9d      	ldrb	r5, [r3, #10]
    4370:	683b      	ldr	r3, [r7, #0]
    4372:	7a5b      	ldrb	r3, [r3, #9]
    4374:	2206      	movs	r2, #6
    4376:	9201      	str	r2, [sp, #4]
    4378:	9300      	str	r3, [sp, #0]
    437a:	462b      	mov	r3, r5
    437c:	4622      	mov	r2, r4
    437e:	f003 fb6b 	bl	7a58 <ip_output>
    4382:	e000      	b.n	4386 <tcp_output_segment+0x156>
  /* If we don't have a local IP address, we get one by
     calling ip_route(). */
  if (ip_addr_isany(&(pcb->local_ip))) {
    netif = ip_route(&(pcb->remote_ip));
    if (netif == NULL) {
      return;
    4384:	bf00      	nop
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/
}
    4386:	3718      	adds	r7, #24
    4388:	46bd      	mov	sp, r7
    438a:	bdb0      	pop	{r4, r5, r7, pc}
    438c:	18020402 	.word	0x18020402
    4390:	10001964 	.word	0x10001964
    4394:	10001978 	.word	0x10001978

00004398 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  ip_addr_t *local_ip, ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
    4398:	b580      	push	{r7, lr}
    439a:	b088      	sub	sp, #32
    439c:	af02      	add	r7, sp, #8
    439e:	60f8      	str	r0, [r7, #12]
    43a0:	60b9      	str	r1, [r7, #8]
    43a2:	607a      	str	r2, [r7, #4]
    43a4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
    43a6:	2200      	movs	r2, #0
    43a8:	2114      	movs	r1, #20
    43aa:	2001      	movs	r0, #1
    43ac:	f002 fa24 	bl	67f8 <pbuf_alloc>
    43b0:	6178      	str	r0, [r7, #20]
  if (p == NULL) {
    43b2:	697b      	ldr	r3, [r7, #20]
    43b4:	2b00      	cmp	r3, #0
    43b6:	d05c      	beq.n	4472 <tcp_rst+0xda>
      return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
    43b8:	697b      	ldr	r3, [r7, #20]
    43ba:	685b      	ldr	r3, [r3, #4]
    43bc:	613b      	str	r3, [r7, #16]
  tcphdr->src = htons(local_port);
    43be:	8c3b      	ldrh	r3, [r7, #32]
    43c0:	4618      	mov	r0, r3
    43c2:	f002 fe89 	bl	70d8 <lwip_htons>
    43c6:	4603      	mov	r3, r0
    43c8:	461a      	mov	r2, r3
    43ca:	693b      	ldr	r3, [r7, #16]
    43cc:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = htons(remote_port);
    43ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    43d0:	4618      	mov	r0, r3
    43d2:	f002 fe81 	bl	70d8 <lwip_htons>
    43d6:	4603      	mov	r3, r0
    43d8:	461a      	mov	r2, r3
    43da:	693b      	ldr	r3, [r7, #16]
    43dc:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = htonl(seqno);
    43de:	68f8      	ldr	r0, [r7, #12]
    43e0:	f002 fe9c 	bl	711c <lwip_htonl>
    43e4:	4602      	mov	r2, r0
    43e6:	693b      	ldr	r3, [r7, #16]
    43e8:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = htonl(ackno);
    43ea:	68b8      	ldr	r0, [r7, #8]
    43ec:	f002 fe96 	bl	711c <lwip_htonl>
    43f0:	4602      	mov	r2, r0
    43f2:	693b      	ldr	r3, [r7, #16]
    43f4:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
    43f6:	f245 0014 	movw	r0, #20500	; 0x5014
    43fa:	f002 fe6d 	bl	70d8 <lwip_htons>
    43fe:	4603      	mov	r3, r0
    4400:	461a      	mov	r2, r3
    4402:	693b      	ldr	r3, [r7, #16]
    4404:	819a      	strh	r2, [r3, #12]
  tcphdr->wnd = PP_HTONS(TCP_WND);
    4406:	693b      	ldr	r3, [r7, #16]
    4408:	2200      	movs	r2, #0
    440a:	f042 0208 	orr.w	r2, r2, #8
    440e:	739a      	strb	r2, [r3, #14]
    4410:	2200      	movs	r2, #0
    4412:	f042 0260 	orr.w	r2, r2, #96	; 0x60
    4416:	73da      	strb	r2, [r3, #15]
  tcphdr->chksum = 0;
    4418:	693b      	ldr	r3, [r7, #16]
    441a:	2200      	movs	r2, #0
    441c:	741a      	strb	r2, [r3, #16]
    441e:	2200      	movs	r2, #0
    4420:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
    4422:	693b      	ldr	r3, [r7, #16]
    4424:	2200      	movs	r2, #0
    4426:	749a      	strb	r2, [r3, #18]
    4428:	2200      	movs	r2, #0
    442a:	74da      	strb	r2, [r3, #19]

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, local_ip, remote_ip,
    442c:	697b      	ldr	r3, [r7, #20]
    442e:	891b      	ldrh	r3, [r3, #8]
    4430:	9300      	str	r3, [sp, #0]
    4432:	2306      	movs	r3, #6
    4434:	683a      	ldr	r2, [r7, #0]
    4436:	6879      	ldr	r1, [r7, #4]
    4438:	6978      	ldr	r0, [r7, #20]
    443a:	f003 fb99 	bl	7b70 <inet_chksum_pseudo>
    443e:	4603      	mov	r3, r0
    4440:	461a      	mov	r2, r3
    4442:	693b      	ldr	r3, [r7, #16]
    4444:	821a      	strh	r2, [r3, #16]
              IP_PROTO_TCP, p->tot_len);
#endif
  TCP_STATS_INC(tcp.xmit);
    4446:	4b0d      	ldr	r3, [pc, #52]	; (447c <tcp_rst+0xe4>)
    4448:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
    444c:	3301      	adds	r3, #1
    444e:	b29a      	uxth	r2, r3
    4450:	4b0a      	ldr	r3, [pc, #40]	; (447c <tcp_rst+0xe4>)
    4452:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
  snmp_inc_tcpoutrsts();
   /* Send output with hardcoded TTL since we have no access to the pcb */
  ip_output(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP);
    4456:	2306      	movs	r3, #6
    4458:	9301      	str	r3, [sp, #4]
    445a:	2300      	movs	r3, #0
    445c:	9300      	str	r3, [sp, #0]
    445e:	23ff      	movs	r3, #255	; 0xff
    4460:	683a      	ldr	r2, [r7, #0]
    4462:	6879      	ldr	r1, [r7, #4]
    4464:	6978      	ldr	r0, [r7, #20]
    4466:	f003 faf7 	bl	7a58 <ip_output>
  pbuf_free(p);
    446a:	6978      	ldr	r0, [r7, #20]
    446c:	f002 fbea 	bl	6c44 <pbuf_free>
    4470:	e000      	b.n	4474 <tcp_rst+0xdc>
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
  if (p == NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
      return;
    4472:	bf00      	nop
  snmp_inc_tcpoutrsts();
   /* Send output with hardcoded TTL since we have no access to the pcb */
  ip_output(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP);
  pbuf_free(p);
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
    4474:	3718      	adds	r7, #24
    4476:	46bd      	mov	sp, r7
    4478:	bd80      	pop	{r7, pc}
    447a:	bf00      	nop
    447c:	10001978 	.word	0x10001978

00004480 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
    4480:	b580      	push	{r7, lr}
    4482:	b084      	sub	sp, #16
    4484:	af00      	add	r7, sp, #0
    4486:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
    4488:	687b      	ldr	r3, [r7, #4]
    448a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    448c:	2b00      	cmp	r3, #0
    448e:	d024      	beq.n	44da <tcp_rexmit_rto+0x5a>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
    4490:	687b      	ldr	r3, [r7, #4]
    4492:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    4494:	60fb      	str	r3, [r7, #12]
    4496:	e002      	b.n	449e <tcp_rexmit_rto+0x1e>
    4498:	68fb      	ldr	r3, [r7, #12]
    449a:	681b      	ldr	r3, [r3, #0]
    449c:	60fb      	str	r3, [r7, #12]
    449e:	68fb      	ldr	r3, [r7, #12]
    44a0:	681b      	ldr	r3, [r3, #0]
    44a2:	2b00      	cmp	r3, #0
    44a4:	d1f8      	bne.n	4498 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
    44a6:	687b      	ldr	r3, [r7, #4]
    44a8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
    44aa:	68fb      	ldr	r3, [r7, #12]
    44ac:	601a      	str	r2, [r3, #0]
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
    44ae:	687b      	ldr	r3, [r7, #4]
    44b0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
    44b2:	687b      	ldr	r3, [r7, #4]
    44b4:	675a      	str	r2, [r3, #116]	; 0x74
  /* unacked queue is now empty */
  pcb->unacked = NULL;
    44b6:	687b      	ldr	r3, [r7, #4]
    44b8:	2200      	movs	r2, #0
    44ba:	679a      	str	r2, [r3, #120]	; 0x78

  /* increment number of retransmissions */
  ++pcb->nrtx;
    44bc:	687b      	ldr	r3, [r7, #4]
    44be:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
    44c2:	3301      	adds	r3, #1
    44c4:	b2da      	uxtb	r2, r3
    44c6:	687b      	ldr	r3, [r7, #4]
    44c8:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
    44cc:	687b      	ldr	r3, [r7, #4]
    44ce:	2200      	movs	r2, #0
    44d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Do the actual retransmission */
  tcp_output(pcb);
    44d2:	6878      	ldr	r0, [r7, #4]
    44d4:	f7ff fd38 	bl	3f48 <tcp_output>
    44d8:	e000      	b.n	44dc <tcp_rexmit_rto+0x5c>
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
    return;
    44da:	bf00      	nop
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;

  /* Do the actual retransmission */
  tcp_output(pcb);
}
    44dc:	3710      	adds	r7, #16
    44de:	46bd      	mov	sp, r7
    44e0:	bd80      	pop	{r7, pc}
    44e2:	bf00      	nop

000044e4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
    44e4:	b590      	push	{r4, r7, lr}
    44e6:	b085      	sub	sp, #20
    44e8:	af00      	add	r7, sp, #0
    44ea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
    44ec:	687b      	ldr	r3, [r7, #4]
    44ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    44f0:	2b00      	cmp	r3, #0
    44f2:	d036      	beq.n	4562 <tcp_rexmit+0x7e>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
    44f4:	687b      	ldr	r3, [r7, #4]
    44f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    44f8:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
    44fa:	68bb      	ldr	r3, [r7, #8]
    44fc:	681a      	ldr	r2, [r3, #0]
    44fe:	687b      	ldr	r3, [r7, #4]
    4500:	679a      	str	r2, [r3, #120]	; 0x78

  cur_seg = &(pcb->unsent);
    4502:	687b      	ldr	r3, [r7, #4]
    4504:	3374      	adds	r3, #116	; 0x74
    4506:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
    4508:	e002      	b.n	4510 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
    450a:	68fb      	ldr	r3, [r7, #12]
    450c:	681b      	ldr	r3, [r3, #0]
    450e:	60fb      	str	r3, [r7, #12]
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;

  cur_seg = &(pcb->unsent);
  while (*cur_seg &&
    4510:	68fb      	ldr	r3, [r7, #12]
    4512:	681b      	ldr	r3, [r3, #0]
    4514:	2b00      	cmp	r3, #0
    4516:	d011      	beq.n	453c <tcp_rexmit+0x58>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
    4518:	68fb      	ldr	r3, [r7, #12]
    451a:	681b      	ldr	r3, [r3, #0]
    451c:	68db      	ldr	r3, [r3, #12]
    451e:	685b      	ldr	r3, [r3, #4]
    4520:	4618      	mov	r0, r3
    4522:	f002 fe13 	bl	714c <lwip_ntohl>
    4526:	4604      	mov	r4, r0
    4528:	68bb      	ldr	r3, [r7, #8]
    452a:	68db      	ldr	r3, [r3, #12]
    452c:	685b      	ldr	r3, [r3, #4]
    452e:	4618      	mov	r0, r3
    4530:	f002 fe0c 	bl	714c <lwip_ntohl>
    4534:	4603      	mov	r3, r0
    4536:	1ae3      	subs	r3, r4, r3
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;

  cur_seg = &(pcb->unsent);
  while (*cur_seg &&
    4538:	2b00      	cmp	r3, #0
    453a:	dbe6      	blt.n	450a <tcp_rexmit+0x26>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
    453c:	68fb      	ldr	r3, [r7, #12]
    453e:	681a      	ldr	r2, [r3, #0]
    4540:	68bb      	ldr	r3, [r7, #8]
    4542:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
    4544:	68fb      	ldr	r3, [r7, #12]
    4546:	68ba      	ldr	r2, [r7, #8]
    4548:	601a      	str	r2, [r3, #0]

  ++pcb->nrtx;
    454a:	687b      	ldr	r3, [r7, #4]
    454c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
    4550:	3301      	adds	r3, #1
    4552:	b2da      	uxtb	r2, r3
    4554:	687b      	ldr	r3, [r7, #4]
    4556:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
    455a:	687b      	ldr	r3, [r7, #4]
    455c:	2200      	movs	r2, #0
    455e:	63da      	str	r2, [r3, #60]	; 0x3c
    4560:	e000      	b.n	4564 <tcp_rexmit+0x80>
{
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
    return;
    4562:	bf00      	nop

  /* Do the actual retransmission. */
  snmp_inc_tcpretranssegs();
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
    4564:	3714      	adds	r7, #20
    4566:	46bd      	mov	sp, r7
    4568:	bd90      	pop	{r4, r7, pc}
    456a:	bf00      	nop

0000456c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void 
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
    456c:	b580      	push	{r7, lr}
    456e:	b082      	sub	sp, #8
    4570:	af00      	add	r7, sp, #0
    4572:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
    4574:	687b      	ldr	r3, [r7, #4]
    4576:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    4578:	2b00      	cmp	r3, #0
    457a:	d049      	beq.n	4610 <tcp_rexmit_fast+0xa4>
    457c:	687b      	ldr	r3, [r7, #4]
    457e:	f893 3020 	ldrb.w	r3, [r3, #32]
    4582:	f003 0304 	and.w	r3, r3, #4
    4586:	2b00      	cmp	r3, #0
    4588:	d142      	bne.n	4610 <tcp_rexmit_fast+0xa4>
    LWIP_DEBUGF(TCP_FR_DEBUG, 
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
    458a:	6878      	ldr	r0, [r7, #4]
    458c:	f7ff ffaa 	bl	44e4 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    if (pcb->cwnd > pcb->snd_wnd) {
    4590:	687b      	ldr	r3, [r7, #4]
    4592:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
    4596:	687b      	ldr	r3, [r7, #4]
    4598:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
    459c:	429a      	cmp	r2, r3
    459e:	d908      	bls.n	45b2 <tcp_rexmit_fast+0x46>
      pcb->ssthresh = pcb->snd_wnd / 2;
    45a0:	687b      	ldr	r3, [r7, #4]
    45a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
    45a6:	085b      	lsrs	r3, r3, #1
    45a8:	b29a      	uxth	r2, r3
    45aa:	687b      	ldr	r3, [r7, #4]
    45ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    45b0:	e007      	b.n	45c2 <tcp_rexmit_fast+0x56>
    } else {
      pcb->ssthresh = pcb->cwnd / 2;
    45b2:	687b      	ldr	r3, [r7, #4]
    45b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
    45b8:	085b      	lsrs	r3, r3, #1
    45ba:	b29a      	uxth	r2, r3
    45bc:	687b      	ldr	r3, [r7, #4]
    45be:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    }
    
    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < 2*pcb->mss) {
    45c2:	687b      	ldr	r3, [r7, #4]
    45c4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
    45c8:	461a      	mov	r2, r3
    45ca:	687b      	ldr	r3, [r7, #4]
    45cc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    45ce:	005b      	lsls	r3, r3, #1
    45d0:	429a      	cmp	r2, r3
    45d2:	da06      	bge.n	45e2 <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG, 
                  ("tcp_receive: The minimum value for ssthresh %"U16_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, 2*pcb->mss));
      pcb->ssthresh = 2*pcb->mss;
    45d4:	687b      	ldr	r3, [r7, #4]
    45d6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    45d8:	005b      	lsls	r3, r3, #1
    45da:	b29a      	uxth	r2, r3
    45dc:	687b      	ldr	r3, [r7, #4]
    45de:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    }
    
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
    45e2:	687b      	ldr	r3, [r7, #4]
    45e4:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
    45e8:	687b      	ldr	r3, [r7, #4]
    45ea:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    45ec:	4619      	mov	r1, r3
    45ee:	0049      	lsls	r1, r1, #1
    45f0:	440b      	add	r3, r1
    45f2:	b29b      	uxth	r3, r3
    45f4:	4413      	add	r3, r2
    45f6:	b29a      	uxth	r2, r3
    45f8:	687b      	ldr	r3, [r7, #4]
    45fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    pcb->flags |= TF_INFR;
    45fe:	687b      	ldr	r3, [r7, #4]
    4600:	f893 3020 	ldrb.w	r3, [r3, #32]
    4604:	f043 0304 	orr.w	r3, r3, #4
    4608:	b2da      	uxtb	r2, r3
    460a:	687b      	ldr	r3, [r7, #4]
    460c:	f883 2020 	strb.w	r2, [r3, #32]
  } 
}
    4610:	bf00      	nop
    4612:	3708      	adds	r7, #8
    4614:	46bd      	mov	sp, r7
    4616:	bd80      	pop	{r7, pc}

00004618 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
void
tcp_keepalive(struct tcp_pcb *pcb)
{
    4618:	b580      	push	{r7, lr}
    461a:	b086      	sub	sp, #24
    461c:	af02      	add	r7, sp, #8
    461e:	6078      	str	r0, [r7, #4]
                          ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip)));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
                          tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));
   
  p = tcp_output_alloc_header(pcb, 0, 0, htonl(pcb->snd_nxt - 1));
    4620:	687b      	ldr	r3, [r7, #4]
    4622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    4624:	3b01      	subs	r3, #1
    4626:	4618      	mov	r0, r3
    4628:	f002 fd78 	bl	711c <lwip_htonl>
    462c:	4603      	mov	r3, r0
    462e:	2200      	movs	r2, #0
    4630:	2100      	movs	r1, #0
    4632:	6878      	ldr	r0, [r7, #4]
    4634:	f7ff fa1e 	bl	3a74 <tcp_output_alloc_header>
    4638:	60f8      	str	r0, [r7, #12]
  if(p == NULL) {
    463a:	68fb      	ldr	r3, [r7, #12]
    463c:	2b00      	cmp	r3, #0
    463e:	d029      	beq.n	4694 <tcp_keepalive+0x7c>
    LWIP_DEBUGF(TCP_DEBUG, 
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
    4640:	68fb      	ldr	r3, [r7, #12]
    4642:	685b      	ldr	r3, [r3, #4]
    4644:	60bb      	str	r3, [r7, #8]

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
    4646:	6879      	ldr	r1, [r7, #4]
    4648:	687b      	ldr	r3, [r7, #4]
    464a:	1d1a      	adds	r2, r3, #4
    464c:	68fb      	ldr	r3, [r7, #12]
    464e:	891b      	ldrh	r3, [r3, #8]
    4650:	9300      	str	r3, [sp, #0]
    4652:	2306      	movs	r3, #6
    4654:	68f8      	ldr	r0, [r7, #12]
    4656:	f003 fa8b 	bl	7b70 <inet_chksum_pseudo>
    465a:	4603      	mov	r3, r0
    465c:	461a      	mov	r2, r3
    465e:	68bb      	ldr	r3, [r7, #8]
    4660:	821a      	strh	r2, [r3, #16]
                                      IP_PROTO_TCP, p->tot_len);
#endif
  TCP_STATS_INC(tcp.xmit);
    4662:	4b0e      	ldr	r3, [pc, #56]	; (469c <tcp_keepalive+0x84>)
    4664:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
    4668:	3301      	adds	r3, #1
    466a:	b29a      	uxth	r2, r3
    466c:	4b0b      	ldr	r3, [pc, #44]	; (469c <tcp_keepalive+0x84>)
    466e:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
  /* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
    &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
    4672:	6879      	ldr	r1, [r7, #4]
    4674:	687b      	ldr	r3, [r7, #4]
    4676:	1d1a      	adds	r2, r3, #4
    4678:	687b      	ldr	r3, [r7, #4]
    467a:	7a98      	ldrb	r0, [r3, #10]
    467c:	2306      	movs	r3, #6
    467e:	9301      	str	r3, [sp, #4]
    4680:	2300      	movs	r3, #0
    4682:	9300      	str	r3, [sp, #0]
    4684:	4603      	mov	r3, r0
    4686:	68f8      	ldr	r0, [r7, #12]
    4688:	f003 f9e6 	bl	7a58 <ip_output>
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
    468c:	68f8      	ldr	r0, [r7, #12]
    468e:	f002 fad9 	bl	6c44 <pbuf_free>
    4692:	e000      	b.n	4696 <tcp_keepalive+0x7e>
   
  p = tcp_output_alloc_header(pcb, 0, 0, htonl(pcb->snd_nxt - 1));
  if(p == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, 
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return;
    4694:	bf00      	nop

  pbuf_free(p);

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F".\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
    4696:	3710      	adds	r7, #16
    4698:	46bd      	mov	sp, r7
    469a:	bd80      	pop	{r7, pc}
    469c:	10001978 	.word	0x10001978

000046a0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
void
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
    46a0:	b590      	push	{r4, r7, lr}
    46a2:	b08b      	sub	sp, #44	; 0x2c
    46a4:	af02      	add	r7, sp, #8
    46a6:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, 
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
               tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));

  seg = pcb->unacked;
    46a8:	687b      	ldr	r3, [r7, #4]
    46aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    46ac:	61fb      	str	r3, [r7, #28]

  if(seg == NULL) {
    46ae:	69fb      	ldr	r3, [r7, #28]
    46b0:	2b00      	cmp	r3, #0
    46b2:	d102      	bne.n	46ba <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
    46b4:	687b      	ldr	r3, [r7, #4]
    46b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    46b8:	61fb      	str	r3, [r7, #28]
  }
  if(seg == NULL) {
    46ba:	69fb      	ldr	r3, [r7, #28]
    46bc:	2b00      	cmp	r3, #0
    46be:	d07f      	beq.n	47c0 <tcp_zero_window_probe+0x120>
    return;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
    46c0:	69fb      	ldr	r3, [r7, #28]
    46c2:	68db      	ldr	r3, [r3, #12]
    46c4:	899b      	ldrh	r3, [r3, #12]
    46c6:	b29b      	uxth	r3, r3
    46c8:	4618      	mov	r0, r3
    46ca:	f002 fd19 	bl	7100 <lwip_ntohs>
    46ce:	4603      	mov	r3, r0
    46d0:	f003 0301 	and.w	r3, r3, #1
    46d4:	2b00      	cmp	r3, #0
    46d6:	d005      	beq.n	46e4 <tcp_zero_window_probe+0x44>
    46d8:	69fb      	ldr	r3, [r7, #28]
    46da:	891b      	ldrh	r3, [r3, #8]
    46dc:	2b00      	cmp	r3, #0
    46de:	d101      	bne.n	46e4 <tcp_zero_window_probe+0x44>
    46e0:	2301      	movs	r3, #1
    46e2:	e000      	b.n	46e6 <tcp_zero_window_probe+0x46>
    46e4:	2300      	movs	r3, #0
    46e6:	76fb      	strb	r3, [r7, #27]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
    46e8:	7efb      	ldrb	r3, [r7, #27]
    46ea:	2b00      	cmp	r3, #0
    46ec:	bf0c      	ite	eq
    46ee:	2301      	moveq	r3, #1
    46f0:	2300      	movne	r3, #0
    46f2:	b2db      	uxtb	r3, r3
    46f4:	833b      	strh	r3, [r7, #24]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
    46f6:	69fb      	ldr	r3, [r7, #28]
    46f8:	68db      	ldr	r3, [r3, #12]
    46fa:	685b      	ldr	r3, [r3, #4]
    46fc:	8b3a      	ldrh	r2, [r7, #24]
    46fe:	2100      	movs	r1, #0
    4700:	6878      	ldr	r0, [r7, #4]
    4702:	f7ff f9b7 	bl	3a74 <tcp_output_alloc_header>
    4706:	6178      	str	r0, [r7, #20]
  if(p == NULL) {
    4708:	697b      	ldr	r3, [r7, #20]
    470a:	2b00      	cmp	r3, #0
    470c:	d05a      	beq.n	47c4 <tcp_zero_window_probe+0x124>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
    470e:	697b      	ldr	r3, [r7, #20]
    4710:	685b      	ldr	r3, [r3, #4]
    4712:	613b      	str	r3, [r7, #16]

  if (is_fin) {
    4714:	7efb      	ldrb	r3, [r7, #27]
    4716:	2b00      	cmp	r3, #0
    4718:	d011      	beq.n	473e <tcp_zero_window_probe+0x9e>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
    471a:	693b      	ldr	r3, [r7, #16]
    471c:	899b      	ldrh	r3, [r3, #12]
    471e:	b29b      	uxth	r3, r3
    4720:	b21b      	sxth	r3, r3
    4722:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    4726:	b21c      	sxth	r4, r3
    4728:	2011      	movs	r0, #17
    472a:	f002 fcd5 	bl	70d8 <lwip_htons>
    472e:	4603      	mov	r3, r0
    4730:	b21b      	sxth	r3, r3
    4732:	4323      	orrs	r3, r4
    4734:	b21b      	sxth	r3, r3
    4736:	b29a      	uxth	r2, r3
    4738:	693b      	ldr	r3, [r7, #16]
    473a:	819a      	strh	r2, [r3, #12]
    473c:	e019      	b.n	4772 <tcp_zero_window_probe+0xd2>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    struct tcp_hdr *thdr = (struct tcp_hdr *)seg->p->payload;
    473e:	69fb      	ldr	r3, [r7, #28]
    4740:	685b      	ldr	r3, [r3, #4]
    4742:	685b      	ldr	r3, [r3, #4]
    4744:	60fb      	str	r3, [r7, #12]
    char *d = ((char *)p->payload + TCP_HLEN);
    4746:	697b      	ldr	r3, [r7, #20]
    4748:	685b      	ldr	r3, [r3, #4]
    474a:	3314      	adds	r3, #20
    474c:	60bb      	str	r3, [r7, #8]
    pbuf_copy_partial(seg->p, d, 1, TCPH_HDRLEN(thdr) * 4);
    474e:	69fb      	ldr	r3, [r7, #28]
    4750:	685c      	ldr	r4, [r3, #4]
    4752:	68fb      	ldr	r3, [r7, #12]
    4754:	899b      	ldrh	r3, [r3, #12]
    4756:	b29b      	uxth	r3, r3
    4758:	4618      	mov	r0, r3
    475a:	f002 fcd1 	bl	7100 <lwip_ntohs>
    475e:	4603      	mov	r3, r0
    4760:	0b1b      	lsrs	r3, r3, #12
    4762:	b29b      	uxth	r3, r3
    4764:	009b      	lsls	r3, r3, #2
    4766:	b29b      	uxth	r3, r3
    4768:	2201      	movs	r2, #1
    476a:	68b9      	ldr	r1, [r7, #8]
    476c:	4620      	mov	r0, r4
    476e:	f002 fb9b 	bl	6ea8 <pbuf_copy_partial>
  }

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
    4772:	6879      	ldr	r1, [r7, #4]
    4774:	687b      	ldr	r3, [r7, #4]
    4776:	1d1a      	adds	r2, r3, #4
    4778:	697b      	ldr	r3, [r7, #20]
    477a:	891b      	ldrh	r3, [r3, #8]
    477c:	9300      	str	r3, [sp, #0]
    477e:	2306      	movs	r3, #6
    4780:	6978      	ldr	r0, [r7, #20]
    4782:	f003 f9f5 	bl	7b70 <inet_chksum_pseudo>
    4786:	4603      	mov	r3, r0
    4788:	461a      	mov	r2, r3
    478a:	693b      	ldr	r3, [r7, #16]
    478c:	821a      	strh	r2, [r3, #16]
                                      IP_PROTO_TCP, p->tot_len);
#endif
  TCP_STATS_INC(tcp.xmit);
    478e:	4b0f      	ldr	r3, [pc, #60]	; (47cc <tcp_zero_window_probe+0x12c>)
    4790:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
    4794:	3301      	adds	r3, #1
    4796:	b29a      	uxth	r2, r3
    4798:	4b0c      	ldr	r3, [pc, #48]	; (47cc <tcp_zero_window_probe+0x12c>)
    479a:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
  /* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
    &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
    479e:	6879      	ldr	r1, [r7, #4]
    47a0:	687b      	ldr	r3, [r7, #4]
    47a2:	1d1a      	adds	r2, r3, #4
    47a4:	687b      	ldr	r3, [r7, #4]
    47a6:	7a98      	ldrb	r0, [r3, #10]
    47a8:	2306      	movs	r3, #6
    47aa:	9301      	str	r3, [sp, #4]
    47ac:	2300      	movs	r3, #0
    47ae:	9300      	str	r3, [sp, #0]
    47b0:	4603      	mov	r3, r0
    47b2:	6978      	ldr	r0, [r7, #20]
    47b4:	f003 f950 	bl	7a58 <ip_output>
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
    47b8:	6978      	ldr	r0, [r7, #20]
    47ba:	f002 fa43 	bl	6c44 <pbuf_free>
    47be:	e002      	b.n	47c6 <tcp_zero_window_probe+0x126>

  if(seg == NULL) {
    seg = pcb->unsent;
  }
  if(seg == NULL) {
    return;
    47c0:	bf00      	nop
    47c2:	e000      	b.n	47c6 <tcp_zero_window_probe+0x126>
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
  if(p == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return;
    47c4:	bf00      	nop
  pbuf_free(p);

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F".\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
    47c6:	3724      	adds	r7, #36	; 0x24
    47c8:	46bd      	mov	sp, r7
    47ca:	bd90      	pop	{r4, r7, pc}
    47cc:	10001978 	.word	0x10001978

000047d0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the IP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
    47d0:	b590      	push	{r4, r7, lr}
    47d2:	b08b      	sub	sp, #44	; 0x2c
    47d4:	af02      	add	r7, sp, #8
    47d6:	6078      	str	r0, [r7, #4]
    47d8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen;
  err_t err;

  PERF_START;

  TCP_STATS_INC(tcp.recv);
    47da:	4ba5      	ldr	r3, [pc, #660]	; (4a70 <tcp_input+0x2a0>)
    47dc:	f8b3 3092 	ldrh.w	r3, [r3, #146]	; 0x92
    47e0:	3301      	adds	r3, #1
    47e2:	b29a      	uxth	r2, r3
    47e4:	4ba2      	ldr	r3, [pc, #648]	; (4a70 <tcp_input+0x2a0>)
    47e6:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
  snmp_inc_tcpinsegs();

  iphdr = (struct ip_hdr *)p->payload;
    47ea:	687b      	ldr	r3, [r7, #4]
    47ec:	685b      	ldr	r3, [r3, #4]
    47ee:	4aa1      	ldr	r2, [pc, #644]	; (4a74 <tcp_input+0x2a4>)
    47f0:	6013      	str	r3, [r2, #0]
  tcphdr = (struct tcp_hdr *)((u8_t *)p->payload + IPH_HL(iphdr) * 4);
    47f2:	687b      	ldr	r3, [r7, #4]
    47f4:	685c      	ldr	r4, [r3, #4]
    47f6:	4b9f      	ldr	r3, [pc, #636]	; (4a74 <tcp_input+0x2a4>)
    47f8:	681b      	ldr	r3, [r3, #0]
    47fa:	881b      	ldrh	r3, [r3, #0]
    47fc:	b29b      	uxth	r3, r3
    47fe:	4618      	mov	r0, r3
    4800:	f002 fc7e 	bl	7100 <lwip_ntohs>
    4804:	4603      	mov	r3, r0
    4806:	0a1b      	lsrs	r3, r3, #8
    4808:	b29b      	uxth	r3, r3
    480a:	f003 030f 	and.w	r3, r3, #15
    480e:	009b      	lsls	r3, r3, #2
    4810:	4423      	add	r3, r4
    4812:	4a99      	ldr	r2, [pc, #612]	; (4a78 <tcp_input+0x2a8>)
    4814:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* remove header from payload */
  if (pbuf_header(p, -((s16_t)(IPH_HL(iphdr) * 4))) || (p->tot_len < sizeof(struct tcp_hdr))) {
    4816:	4b97      	ldr	r3, [pc, #604]	; (4a74 <tcp_input+0x2a4>)
    4818:	681b      	ldr	r3, [r3, #0]
    481a:	881b      	ldrh	r3, [r3, #0]
    481c:	b29b      	uxth	r3, r3
    481e:	4618      	mov	r0, r3
    4820:	f002 fc6e 	bl	7100 <lwip_ntohs>
    4824:	4603      	mov	r3, r0
    4826:	0a1b      	lsrs	r3, r3, #8
    4828:	b29b      	uxth	r3, r3
    482a:	f003 030f 	and.w	r3, r3, #15
    482e:	b29b      	uxth	r3, r3
    4830:	009b      	lsls	r3, r3, #2
    4832:	b29b      	uxth	r3, r3
    4834:	425b      	negs	r3, r3
    4836:	b29b      	uxth	r3, r3
    4838:	b21b      	sxth	r3, r3
    483a:	4619      	mov	r1, r3
    483c:	6878      	ldr	r0, [r7, #4]
    483e:	f002 f993 	bl	6b68 <pbuf_header>
    4842:	4603      	mov	r3, r0
    4844:	2b00      	cmp	r3, #0
    4846:	d103      	bne.n	4850 <tcp_input+0x80>
    4848:	687b      	ldr	r3, [r7, #4]
    484a:	891b      	ldrh	r3, [r3, #8]
    484c:	2b13      	cmp	r3, #19
    484e:	d813      	bhi.n	4878 <tcp_input+0xa8>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
    4850:	4b87      	ldr	r3, [pc, #540]	; (4a70 <tcp_input+0x2a0>)
    4852:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
    4856:	3301      	adds	r3, #1
    4858:	b29a      	uxth	r2, r3
    485a:	4b85      	ldr	r3, [pc, #532]	; (4a70 <tcp_input+0x2a0>)
    485c:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    TCP_STATS_INC(tcp.drop);
    4860:	4b83      	ldr	r3, [pc, #524]	; (4a70 <tcp_input+0x2a0>)
    4862:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
    4866:	3301      	adds	r3, #1
    4868:	b29a      	uxth	r2, r3
    486a:	4b81      	ldr	r3, [pc, #516]	; (4a70 <tcp_input+0x2a0>)
    486c:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
    snmp_inc_tcpinerrs();
    pbuf_free(p);
    4870:	6878      	ldr	r0, [r7, #4]
    4872:	f002 f9e7 	bl	6c44 <pbuf_free>
    return;
    4876:	e30a      	b.n	4e8e <tcp_input+0x6be>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(&current_iphdr_dest, inp) ||
    4878:	4b80      	ldr	r3, [pc, #512]	; (4a7c <tcp_input+0x2ac>)
    487a:	681b      	ldr	r3, [r3, #0]
    487c:	6839      	ldr	r1, [r7, #0]
    487e:	4618      	mov	r0, r3
    4880:	f003 fa58 	bl	7d34 <ip4_addr_isbroadcast>
    4884:	4603      	mov	r3, r0
    4886:	2b00      	cmp	r3, #0
    4888:	d105      	bne.n	4896 <tcp_input+0xc6>
      ip_addr_ismulticast(&current_iphdr_dest)) {
    488a:	4b7c      	ldr	r3, [pc, #496]	; (4a7c <tcp_input+0x2ac>)
    488c:	681b      	ldr	r3, [r3, #0]
    488e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    pbuf_free(p);
    return;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(&current_iphdr_dest, inp) ||
    4892:	2be0      	cmp	r3, #224	; 0xe0
    4894:	d113      	bne.n	48be <tcp_input+0xee>
      ip_addr_ismulticast(&current_iphdr_dest)) {
    TCP_STATS_INC(tcp.proterr);
    4896:	4b76      	ldr	r3, [pc, #472]	; (4a70 <tcp_input+0x2a0>)
    4898:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
    489c:	3301      	adds	r3, #1
    489e:	b29a      	uxth	r2, r3
    48a0:	4b73      	ldr	r3, [pc, #460]	; (4a70 <tcp_input+0x2a0>)
    48a2:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    TCP_STATS_INC(tcp.drop);
    48a6:	4b72      	ldr	r3, [pc, #456]	; (4a70 <tcp_input+0x2a0>)
    48a8:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
    48ac:	3301      	adds	r3, #1
    48ae:	b29a      	uxth	r2, r3
    48b0:	4b6f      	ldr	r3, [pc, #444]	; (4a70 <tcp_input+0x2a0>)
    48b2:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
    snmp_inc_tcpinerrs();
    pbuf_free(p);
    48b6:	6878      	ldr	r0, [r7, #4]
    48b8:	f002 f9c4 	bl	6c44 <pbuf_free>
    return;
    48bc:	e2e7      	b.n	4e8e <tcp_input+0x6be>
  }

#if CHECKSUM_CHECK_TCP
  /* Verify TCP checksum. */
  if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
    48be:	687b      	ldr	r3, [r7, #4]
    48c0:	891b      	ldrh	r3, [r3, #8]
    48c2:	9300      	str	r3, [sp, #0]
    48c4:	2306      	movs	r3, #6
    48c6:	4a6d      	ldr	r2, [pc, #436]	; (4a7c <tcp_input+0x2ac>)
    48c8:	496d      	ldr	r1, [pc, #436]	; (4a80 <tcp_input+0x2b0>)
    48ca:	6878      	ldr	r0, [r7, #4]
    48cc:	f003 f950 	bl	7b70 <inet_chksum_pseudo>
    48d0:	4603      	mov	r3, r0
    48d2:	2b00      	cmp	r3, #0
    48d4:	d013      	beq.n	48fe <tcp_input+0x12e>
        inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
      IP_PROTO_TCP, p->tot_len)));
#if TCP_DEBUG
    tcp_debug_print(tcphdr);
#endif /* TCP_DEBUG */
    TCP_STATS_INC(tcp.chkerr);
    48d6:	4b66      	ldr	r3, [pc, #408]	; (4a70 <tcp_input+0x2a0>)
    48d8:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
    48dc:	3301      	adds	r3, #1
    48de:	b29a      	uxth	r2, r3
    48e0:	4b63      	ldr	r3, [pc, #396]	; (4a70 <tcp_input+0x2a0>)
    48e2:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
    TCP_STATS_INC(tcp.drop);
    48e6:	4b62      	ldr	r3, [pc, #392]	; (4a70 <tcp_input+0x2a0>)
    48e8:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
    48ec:	3301      	adds	r3, #1
    48ee:	b29a      	uxth	r2, r3
    48f0:	4b5f      	ldr	r3, [pc, #380]	; (4a70 <tcp_input+0x2a0>)
    48f2:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
    snmp_inc_tcpinerrs();
    pbuf_free(p);
    48f6:	6878      	ldr	r0, [r7, #4]
    48f8:	f002 f9a4 	bl	6c44 <pbuf_free>
    return;
    48fc:	e2c7      	b.n	4e8e <tcp_input+0x6be>
  }
#endif

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  hdrlen = TCPH_HDRLEN(tcphdr);
    48fe:	4b5e      	ldr	r3, [pc, #376]	; (4a78 <tcp_input+0x2a8>)
    4900:	681b      	ldr	r3, [r3, #0]
    4902:	899b      	ldrh	r3, [r3, #12]
    4904:	b29b      	uxth	r3, r3
    4906:	4618      	mov	r0, r3
    4908:	f002 fbfa 	bl	7100 <lwip_ntohs>
    490c:	4603      	mov	r3, r0
    490e:	0b1b      	lsrs	r3, r3, #12
    4910:	b29b      	uxth	r3, r3
    4912:	73fb      	strb	r3, [r7, #15]
  if(pbuf_header(p, -(hdrlen * 4))){
    4914:	7bfb      	ldrb	r3, [r7, #15]
    4916:	b29b      	uxth	r3, r3
    4918:	461a      	mov	r2, r3
    491a:	0392      	lsls	r2, r2, #14
    491c:	1ad3      	subs	r3, r2, r3
    491e:	009b      	lsls	r3, r3, #2
    4920:	b29b      	uxth	r3, r3
    4922:	b21b      	sxth	r3, r3
    4924:	4619      	mov	r1, r3
    4926:	6878      	ldr	r0, [r7, #4]
    4928:	f002 f91e 	bl	6b68 <pbuf_header>
    492c:	4603      	mov	r3, r0
    492e:	2b00      	cmp	r3, #0
    4930:	d013      	beq.n	495a <tcp_input+0x18a>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet\n"));
    TCP_STATS_INC(tcp.lenerr);
    4932:	4b4f      	ldr	r3, [pc, #316]	; (4a70 <tcp_input+0x2a0>)
    4934:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
    4938:	3301      	adds	r3, #1
    493a:	b29a      	uxth	r2, r3
    493c:	4b4c      	ldr	r3, [pc, #304]	; (4a70 <tcp_input+0x2a0>)
    493e:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    TCP_STATS_INC(tcp.drop);
    4942:	4b4b      	ldr	r3, [pc, #300]	; (4a70 <tcp_input+0x2a0>)
    4944:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
    4948:	3301      	adds	r3, #1
    494a:	b29a      	uxth	r2, r3
    494c:	4b48      	ldr	r3, [pc, #288]	; (4a70 <tcp_input+0x2a0>)
    494e:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
    snmp_inc_tcpinerrs();
    pbuf_free(p);
    4952:	6878      	ldr	r0, [r7, #4]
    4954:	f002 f976 	bl	6c44 <pbuf_free>
    return;
    4958:	e299      	b.n	4e8e <tcp_input+0x6be>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = ntohs(tcphdr->src);
    495a:	4b47      	ldr	r3, [pc, #284]	; (4a78 <tcp_input+0x2a8>)
    495c:	681c      	ldr	r4, [r3, #0]
    495e:	4b46      	ldr	r3, [pc, #280]	; (4a78 <tcp_input+0x2a8>)
    4960:	681b      	ldr	r3, [r3, #0]
    4962:	881b      	ldrh	r3, [r3, #0]
    4964:	b29b      	uxth	r3, r3
    4966:	4618      	mov	r0, r3
    4968:	f002 fbca 	bl	7100 <lwip_ntohs>
    496c:	4603      	mov	r3, r0
    496e:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = ntohs(tcphdr->dest);
    4970:	4b41      	ldr	r3, [pc, #260]	; (4a78 <tcp_input+0x2a8>)
    4972:	681c      	ldr	r4, [r3, #0]
    4974:	4b40      	ldr	r3, [pc, #256]	; (4a78 <tcp_input+0x2a8>)
    4976:	681b      	ldr	r3, [r3, #0]
    4978:	885b      	ldrh	r3, [r3, #2]
    497a:	b29b      	uxth	r3, r3
    497c:	4618      	mov	r0, r3
    497e:	f002 fbbf 	bl	7100 <lwip_ntohs>
    4982:	4603      	mov	r3, r0
    4984:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
    4986:	4b3c      	ldr	r3, [pc, #240]	; (4a78 <tcp_input+0x2a8>)
    4988:	681c      	ldr	r4, [r3, #0]
    498a:	4b3b      	ldr	r3, [pc, #236]	; (4a78 <tcp_input+0x2a8>)
    498c:	681b      	ldr	r3, [r3, #0]
    498e:	685b      	ldr	r3, [r3, #4]
    4990:	4618      	mov	r0, r3
    4992:	f002 fbdb 	bl	714c <lwip_ntohl>
    4996:	4603      	mov	r3, r0
    4998:	6063      	str	r3, [r4, #4]
    499a:	6863      	ldr	r3, [r4, #4]
    499c:	4a39      	ldr	r2, [pc, #228]	; (4a84 <tcp_input+0x2b4>)
    499e:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
    49a0:	4b35      	ldr	r3, [pc, #212]	; (4a78 <tcp_input+0x2a8>)
    49a2:	681c      	ldr	r4, [r3, #0]
    49a4:	4b34      	ldr	r3, [pc, #208]	; (4a78 <tcp_input+0x2a8>)
    49a6:	681b      	ldr	r3, [r3, #0]
    49a8:	689b      	ldr	r3, [r3, #8]
    49aa:	4618      	mov	r0, r3
    49ac:	f002 fbce 	bl	714c <lwip_ntohl>
    49b0:	4603      	mov	r3, r0
    49b2:	60a3      	str	r3, [r4, #8]
    49b4:	68a3      	ldr	r3, [r4, #8]
    49b6:	4a34      	ldr	r2, [pc, #208]	; (4a88 <tcp_input+0x2b8>)
    49b8:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = ntohs(tcphdr->wnd);
    49ba:	4b2f      	ldr	r3, [pc, #188]	; (4a78 <tcp_input+0x2a8>)
    49bc:	681c      	ldr	r4, [r3, #0]
    49be:	4b2e      	ldr	r3, [pc, #184]	; (4a78 <tcp_input+0x2a8>)
    49c0:	681b      	ldr	r3, [r3, #0]
    49c2:	89db      	ldrh	r3, [r3, #14]
    49c4:	b29b      	uxth	r3, r3
    49c6:	4618      	mov	r0, r3
    49c8:	f002 fb9a 	bl	7100 <lwip_ntohs>
    49cc:	4603      	mov	r3, r0
    49ce:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
    49d0:	4b29      	ldr	r3, [pc, #164]	; (4a78 <tcp_input+0x2a8>)
    49d2:	681b      	ldr	r3, [r3, #0]
    49d4:	899b      	ldrh	r3, [r3, #12]
    49d6:	b29b      	uxth	r3, r3
    49d8:	4618      	mov	r0, r3
    49da:	f002 fb91 	bl	7100 <lwip_ntohs>
    49de:	4603      	mov	r3, r0
    49e0:	b2db      	uxtb	r3, r3
    49e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    49e6:	b2da      	uxtb	r2, r3
    49e8:	4b28      	ldr	r3, [pc, #160]	; (4a8c <tcp_input+0x2bc>)
    49ea:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
    49ec:	687b      	ldr	r3, [r7, #4]
    49ee:	891a      	ldrh	r2, [r3, #8]
    49f0:	4b26      	ldr	r3, [pc, #152]	; (4a8c <tcp_input+0x2bc>)
    49f2:	781b      	ldrb	r3, [r3, #0]
    49f4:	f003 0303 	and.w	r3, r3, #3
    49f8:	2b00      	cmp	r3, #0
    49fa:	bf14      	ite	ne
    49fc:	2301      	movne	r3, #1
    49fe:	2300      	moveq	r3, #0
    4a00:	b2db      	uxtb	r3, r3
    4a02:	b29b      	uxth	r3, r3
    4a04:	4413      	add	r3, r2
    4a06:	b29a      	uxth	r2, r3
    4a08:	4b21      	ldr	r3, [pc, #132]	; (4a90 <tcp_input+0x2c0>)
    4a0a:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
    4a0c:	2300      	movs	r3, #0
    4a0e:	61bb      	str	r3, [r7, #24]

  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    4a10:	4b20      	ldr	r3, [pc, #128]	; (4a94 <tcp_input+0x2c4>)
    4a12:	681b      	ldr	r3, [r3, #0]
    4a14:	61fb      	str	r3, [r7, #28]
    4a16:	e044      	b.n	4aa2 <tcp_input+0x2d2>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
    4a18:	69fb      	ldr	r3, [r7, #28]
    4a1a:	8bda      	ldrh	r2, [r3, #30]
    4a1c:	4b16      	ldr	r3, [pc, #88]	; (4a78 <tcp_input+0x2a8>)
    4a1e:	681b      	ldr	r3, [r3, #0]
    4a20:	881b      	ldrh	r3, [r3, #0]
    4a22:	b29b      	uxth	r3, r3
    4a24:	429a      	cmp	r2, r3
    4a26:	d137      	bne.n	4a98 <tcp_input+0x2c8>
       pcb->local_port == tcphdr->dest &&
    4a28:	69fb      	ldr	r3, [r7, #28]
    4a2a:	8b9a      	ldrh	r2, [r3, #28]
    4a2c:	4b12      	ldr	r3, [pc, #72]	; (4a78 <tcp_input+0x2a8>)
    4a2e:	681b      	ldr	r3, [r3, #0]
    4a30:	885b      	ldrh	r3, [r3, #2]
    4a32:	b29b      	uxth	r3, r3
  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
    4a34:	429a      	cmp	r2, r3
    4a36:	d12f      	bne.n	4a98 <tcp_input+0x2c8>
       pcb->local_port == tcphdr->dest &&
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
    4a38:	69fb      	ldr	r3, [r7, #28]
    4a3a:	685a      	ldr	r2, [r3, #4]
    4a3c:	4b10      	ldr	r3, [pc, #64]	; (4a80 <tcp_input+0x2b0>)
    4a3e:	681b      	ldr	r3, [r3, #0]
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
       pcb->local_port == tcphdr->dest &&
    4a40:	429a      	cmp	r2, r3
    4a42:	d129      	bne.n	4a98 <tcp_input+0x2c8>
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
       ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
    4a44:	69fb      	ldr	r3, [r7, #28]
    4a46:	681a      	ldr	r2, [r3, #0]
    4a48:	4b0c      	ldr	r3, [pc, #48]	; (4a7c <tcp_input+0x2ac>)
    4a4a:	681b      	ldr	r3, [r3, #0]
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
       pcb->local_port == tcphdr->dest &&
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
    4a4c:	429a      	cmp	r2, r3
    4a4e:	d123      	bne.n	4a98 <tcp_input+0x2c8>

      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
      if (prev != NULL) {
    4a50:	69bb      	ldr	r3, [r7, #24]
    4a52:	2b00      	cmp	r3, #0
    4a54:	d029      	beq.n	4aaa <tcp_input+0x2da>
        prev->next = pcb->next;
    4a56:	69fb      	ldr	r3, [r7, #28]
    4a58:	68da      	ldr	r2, [r3, #12]
    4a5a:	69bb      	ldr	r3, [r7, #24]
    4a5c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
    4a5e:	4b0d      	ldr	r3, [pc, #52]	; (4a94 <tcp_input+0x2c4>)
    4a60:	681a      	ldr	r2, [r3, #0]
    4a62:	69fb      	ldr	r3, [r7, #28]
    4a64:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
    4a66:	4a0b      	ldr	r2, [pc, #44]	; (4a94 <tcp_input+0x2c4>)
    4a68:	69fb      	ldr	r3, [r7, #28]
    4a6a:	6013      	str	r3, [r2, #0]
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
      break;
    4a6c:	e01d      	b.n	4aaa <tcp_input+0x2da>
    4a6e:	bf00      	nop
    4a70:	10001978 	.word	0x10001978
    4a74:	10001204 	.word	0x10001204
    4a78:	10001200 	.word	0x10001200
    4a7c:	10001aa0 	.word	0x10001aa0
    4a80:	10001a98 	.word	0x10001a98
    4a84:	10001208 	.word	0x10001208
    4a88:	1000120c 	.word	0x1000120c
    4a8c:	10001210 	.word	0x10001210
    4a90:	10001212 	.word	0x10001212
    4a94:	10001960 	.word	0x10001960
    }
    prev = pcb;
    4a98:	69fb      	ldr	r3, [r7, #28]
    4a9a:	61bb      	str	r3, [r7, #24]
  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;

  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    4a9c:	69fb      	ldr	r3, [r7, #28]
    4a9e:	68db      	ldr	r3, [r3, #12]
    4aa0:	61fb      	str	r3, [r7, #28]
    4aa2:	69fb      	ldr	r3, [r7, #28]
    4aa4:	2b00      	cmp	r3, #0
    4aa6:	d1b7      	bne.n	4a18 <tcp_input+0x248>
    4aa8:	e000      	b.n	4aac <tcp_input+0x2dc>
        prev->next = pcb->next;
        pcb->next = tcp_active_pcbs;
        tcp_active_pcbs = pcb;
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
      break;
    4aaa:	bf00      	nop
    }
    prev = pcb;
  }

  if (pcb == NULL) {
    4aac:	69fb      	ldr	r3, [r7, #28]
    4aae:	2b00      	cmp	r3, #0
    4ab0:	d167      	bne.n	4b82 <tcp_input+0x3b2>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
    4ab2:	4b93      	ldr	r3, [pc, #588]	; (4d00 <tcp_input+0x530>)
    4ab4:	681b      	ldr	r3, [r3, #0]
    4ab6:	61fb      	str	r3, [r7, #28]
    4ab8:	e025      	b.n	4b06 <tcp_input+0x336>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
    4aba:	69fb      	ldr	r3, [r7, #28]
    4abc:	8bda      	ldrh	r2, [r3, #30]
    4abe:	4b91      	ldr	r3, [pc, #580]	; (4d04 <tcp_input+0x534>)
    4ac0:	681b      	ldr	r3, [r3, #0]
    4ac2:	881b      	ldrh	r3, [r3, #0]
    4ac4:	b29b      	uxth	r3, r3
    4ac6:	429a      	cmp	r2, r3
    4ac8:	d11a      	bne.n	4b00 <tcp_input+0x330>
         pcb->local_port == tcphdr->dest &&
    4aca:	69fb      	ldr	r3, [r7, #28]
    4acc:	8b9a      	ldrh	r2, [r3, #28]
    4ace:	4b8d      	ldr	r3, [pc, #564]	; (4d04 <tcp_input+0x534>)
    4ad0:	681b      	ldr	r3, [r3, #0]
    4ad2:	885b      	ldrh	r3, [r3, #2]
    4ad4:	b29b      	uxth	r3, r3
  if (pcb == NULL) {
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
    4ad6:	429a      	cmp	r2, r3
    4ad8:	d112      	bne.n	4b00 <tcp_input+0x330>
         pcb->local_port == tcphdr->dest &&
         ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
    4ada:	69fb      	ldr	r3, [r7, #28]
    4adc:	685a      	ldr	r2, [r3, #4]
    4ade:	4b8a      	ldr	r3, [pc, #552]	; (4d08 <tcp_input+0x538>)
    4ae0:	681b      	ldr	r3, [r3, #0]
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
         pcb->local_port == tcphdr->dest &&
    4ae2:	429a      	cmp	r2, r3
    4ae4:	d10c      	bne.n	4b00 <tcp_input+0x330>
         ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
         ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
    4ae6:	69fb      	ldr	r3, [r7, #28]
    4ae8:	681a      	ldr	r2, [r3, #0]
    4aea:	4b88      	ldr	r3, [pc, #544]	; (4d0c <tcp_input+0x53c>)
    4aec:	681b      	ldr	r3, [r3, #0]
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
         pcb->local_port == tcphdr->dest &&
         ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
    4aee:	429a      	cmp	r2, r3
    4af0:	d106      	bne.n	4b00 <tcp_input+0x330>
         ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
    4af2:	69f8      	ldr	r0, [r7, #28]
    4af4:	f000 faa4 	bl	5040 <tcp_timewait_input>
        pbuf_free(p);
    4af8:	6878      	ldr	r0, [r7, #4]
    4afa:	f002 f8a3 	bl	6c44 <pbuf_free>
        return;
    4afe:	e1c6      	b.n	4e8e <tcp_input+0x6be>
  }

  if (pcb == NULL) {
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
    4b00:	69fb      	ldr	r3, [r7, #28]
    4b02:	68db      	ldr	r3, [r3, #12]
    4b04:	61fb      	str	r3, [r7, #28]
    4b06:	69fb      	ldr	r3, [r7, #28]
    4b08:	2b00      	cmp	r3, #0
    4b0a:	d1d6      	bne.n	4aba <tcp_input+0x2ea>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
    4b0c:	2300      	movs	r3, #0
    4b0e:	61bb      	str	r3, [r7, #24]
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
    4b10:	4b7f      	ldr	r3, [pc, #508]	; (4d10 <tcp_input+0x540>)
    4b12:	681b      	ldr	r3, [r3, #0]
    4b14:	617b      	str	r3, [r7, #20]
    4b16:	e019      	b.n	4b4c <tcp_input+0x37c>
      if (lpcb->local_port == tcphdr->dest) {
    4b18:	697b      	ldr	r3, [r7, #20]
    4b1a:	8b9a      	ldrh	r2, [r3, #28]
    4b1c:	4b79      	ldr	r3, [pc, #484]	; (4d04 <tcp_input+0x534>)
    4b1e:	681b      	ldr	r3, [r3, #0]
    4b20:	885b      	ldrh	r3, [r3, #2]
    4b22:	b29b      	uxth	r3, r3
    4b24:	429a      	cmp	r2, r3
    4b26:	d10c      	bne.n	4b42 <tcp_input+0x372>
          /* found an ANY-match */
          lpcb_any = lpcb;
          lpcb_prev = prev;
        }
#else /* SO_REUSE */
        if (ip_addr_cmp(&(lpcb->local_ip), &current_iphdr_dest) ||
    4b28:	697b      	ldr	r3, [r7, #20]
    4b2a:	681a      	ldr	r2, [r3, #0]
    4b2c:	4b77      	ldr	r3, [pc, #476]	; (4d0c <tcp_input+0x53c>)
    4b2e:	681b      	ldr	r3, [r3, #0]
    4b30:	429a      	cmp	r2, r3
    4b32:	d00e      	beq.n	4b52 <tcp_input+0x382>
            ip_addr_isany(&(lpcb->local_ip))) {
    4b34:	697b      	ldr	r3, [r7, #20]
          /* found an ANY-match */
          lpcb_any = lpcb;
          lpcb_prev = prev;
        }
#else /* SO_REUSE */
        if (ip_addr_cmp(&(lpcb->local_ip), &current_iphdr_dest) ||
    4b36:	2b00      	cmp	r3, #0
    4b38:	d00b      	beq.n	4b52 <tcp_input+0x382>
            ip_addr_isany(&(lpcb->local_ip))) {
    4b3a:	697b      	ldr	r3, [r7, #20]
    4b3c:	681b      	ldr	r3, [r3, #0]
    4b3e:	2b00      	cmp	r3, #0
    4b40:	d007      	beq.n	4b52 <tcp_input+0x382>
          /* found a match */
          break;
        }
#endif /* SO_REUSE */
      }
      prev = (struct tcp_pcb *)lpcb;
    4b42:	697b      	ldr	r3, [r7, #20]
    4b44:	61bb      	str	r3, [r7, #24]
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
    4b46:	697b      	ldr	r3, [r7, #20]
    4b48:	68db      	ldr	r3, [r3, #12]
    4b4a:	617b      	str	r3, [r7, #20]
    4b4c:	697b      	ldr	r3, [r7, #20]
    4b4e:	2b00      	cmp	r3, #0
    4b50:	d1e2      	bne.n	4b18 <tcp_input+0x348>
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
    4b52:	697b      	ldr	r3, [r7, #20]
    4b54:	2b00      	cmp	r3, #0
    4b56:	d014      	beq.n	4b82 <tcp_input+0x3b2>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
    4b58:	69bb      	ldr	r3, [r7, #24]
    4b5a:	2b00      	cmp	r3, #0
    4b5c:	d00a      	beq.n	4b74 <tcp_input+0x3a4>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
    4b5e:	697b      	ldr	r3, [r7, #20]
    4b60:	68da      	ldr	r2, [r3, #12]
    4b62:	69bb      	ldr	r3, [r7, #24]
    4b64:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
    4b66:	4b6a      	ldr	r3, [pc, #424]	; (4d10 <tcp_input+0x540>)
    4b68:	681a      	ldr	r2, [r3, #0]
    4b6a:	697b      	ldr	r3, [r7, #20]
    4b6c:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
    4b6e:	4a68      	ldr	r2, [pc, #416]	; (4d10 <tcp_input+0x540>)
    4b70:	697b      	ldr	r3, [r7, #20]
    4b72:	6013      	str	r3, [r2, #0]
      }
    
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
    4b74:	6978      	ldr	r0, [r7, #20]
    4b76:	f000 f9a5 	bl	4ec4 <tcp_listen_input>
      pbuf_free(p);
    4b7a:	6878      	ldr	r0, [r7, #4]
    4b7c:	f002 f862 	bl	6c44 <pbuf_free>
      return;
    4b80:	e185      	b.n	4e8e <tcp_input+0x6be>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
    4b82:	69fb      	ldr	r3, [r7, #28]
    4b84:	2b00      	cmp	r3, #0
    4b86:	f000 814d 	beq.w	4e24 <tcp_input+0x654>
    tcp_debug_print_state(pcb->state);
#endif /* TCP_DEBUG */
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
    4b8a:	4b62      	ldr	r3, [pc, #392]	; (4d14 <tcp_input+0x544>)
    4b8c:	2200      	movs	r2, #0
    4b8e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
    4b90:	687b      	ldr	r3, [r7, #4]
    4b92:	891a      	ldrh	r2, [r3, #8]
    4b94:	4b5f      	ldr	r3, [pc, #380]	; (4d14 <tcp_input+0x544>)
    4b96:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
    4b98:	4a5e      	ldr	r2, [pc, #376]	; (4d14 <tcp_input+0x544>)
    4b9a:	687b      	ldr	r3, [r7, #4]
    4b9c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
    4b9e:	4b59      	ldr	r3, [pc, #356]	; (4d04 <tcp_input+0x534>)
    4ba0:	681b      	ldr	r3, [r3, #0]
    4ba2:	4a5c      	ldr	r2, [pc, #368]	; (4d14 <tcp_input+0x544>)
    4ba4:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
    4ba6:	4b5c      	ldr	r3, [pc, #368]	; (4d18 <tcp_input+0x548>)
    4ba8:	2200      	movs	r2, #0
    4baa:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
    4bac:	4b5b      	ldr	r3, [pc, #364]	; (4d1c <tcp_input+0x54c>)
    4bae:	2200      	movs	r2, #0
    4bb0:	701a      	strb	r2, [r3, #0]

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
    4bb2:	69fb      	ldr	r3, [r7, #28]
    4bb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    4bb8:	2b00      	cmp	r3, #0
    4bba:	d036      	beq.n	4c2a <tcp_input+0x45a>
      /* Notify again application with data previously received. */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
      TCP_EVENT_RECV(pcb, pcb->refused_data, ERR_OK, err);
    4bbc:	69fb      	ldr	r3, [r7, #28]
    4bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    4bc2:	2b00      	cmp	r3, #0
    4bc4:	d00c      	beq.n	4be0 <tcp_input+0x410>
    4bc6:	69fb      	ldr	r3, [r7, #28]
    4bc8:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
    4bcc:	69fb      	ldr	r3, [r7, #28]
    4bce:	6958      	ldr	r0, [r3, #20]
    4bd0:	69fb      	ldr	r3, [r7, #28]
    4bd2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    4bd6:	2300      	movs	r3, #0
    4bd8:	69f9      	ldr	r1, [r7, #28]
    4bda:	47a0      	blx	r4
    4bdc:	6138      	str	r0, [r7, #16]
    4bde:	e008      	b.n	4bf2 <tcp_input+0x422>
    4be0:	69fb      	ldr	r3, [r7, #28]
    4be2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    4be6:	2300      	movs	r3, #0
    4be8:	69f9      	ldr	r1, [r7, #28]
    4bea:	2000      	movs	r0, #0
    4bec:	f7fe fcee 	bl	35cc <tcp_recv_null>
    4bf0:	6138      	str	r0, [r7, #16]
      if (err == ERR_OK) {
    4bf2:	693b      	ldr	r3, [r7, #16]
    4bf4:	2b00      	cmp	r3, #0
    4bf6:	d104      	bne.n	4c02 <tcp_input+0x432>
        pcb->refused_data = NULL;
    4bf8:	69fb      	ldr	r3, [r7, #28]
    4bfa:	2200      	movs	r2, #0
    4bfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    4c00:	e013      	b.n	4c2a <tcp_input+0x45a>
      } else if ((err == ERR_ABRT) || (tcplen > 0)) {
    4c02:	693b      	ldr	r3, [r7, #16]
    4c04:	f113 0f0a 	cmn.w	r3, #10
    4c08:	d003      	beq.n	4c12 <tcp_input+0x442>
    4c0a:	4b45      	ldr	r3, [pc, #276]	; (4d20 <tcp_input+0x550>)
    4c0c:	881b      	ldrh	r3, [r3, #0]
    4c0e:	2b00      	cmp	r3, #0
    4c10:	d00b      	beq.n	4c2a <tcp_input+0x45a>
        /* if err == ERR_ABRT, 'pcb' is already deallocated */
        /* Drop incoming packets because pcb is "full" (only if the incoming
           segment contains data). */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
        TCP_STATS_INC(tcp.drop);
    4c12:	4b44      	ldr	r3, [pc, #272]	; (4d24 <tcp_input+0x554>)
    4c14:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
    4c18:	3301      	adds	r3, #1
    4c1a:	b29a      	uxth	r2, r3
    4c1c:	4b41      	ldr	r3, [pc, #260]	; (4d24 <tcp_input+0x554>)
    4c1e:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
        snmp_inc_tcpinerrs();
        pbuf_free(p);
    4c22:	6878      	ldr	r0, [r7, #4]
    4c24:	f002 f80e 	bl	6c44 <pbuf_free>
        return;
    4c28:	e131      	b.n	4e8e <tcp_input+0x6be>
      }
    }
    tcp_input_pcb = pcb;
    4c2a:	4a3f      	ldr	r2, [pc, #252]	; (4d28 <tcp_input+0x558>)
    4c2c:	69fb      	ldr	r3, [r7, #28]
    4c2e:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
    4c30:	69f8      	ldr	r0, [r7, #28]
    4c32:	f000 fa71 	bl	5118 <tcp_process>
    4c36:	6138      	str	r0, [r7, #16]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
    4c38:	693b      	ldr	r3, [r7, #16]
    4c3a:	f113 0f0a 	cmn.w	r3, #10
    4c3e:	f000 80de 	beq.w	4dfe <tcp_input+0x62e>
      if (recv_flags & TF_RESET) {
    4c42:	4b36      	ldr	r3, [pc, #216]	; (4d1c <tcp_input+0x54c>)
    4c44:	781b      	ldrb	r3, [r3, #0]
    4c46:	f003 0308 	and.w	r3, r3, #8
    4c4a:	2b00      	cmp	r3, #0
    4c4c:	d016      	beq.n	4c7c <tcp_input+0x4ac>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_RST);
    4c4e:	69fb      	ldr	r3, [r7, #28]
    4c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    4c54:	2b00      	cmp	r3, #0
    4c56:	d008      	beq.n	4c6a <tcp_input+0x49a>
    4c58:	69fb      	ldr	r3, [r7, #28]
    4c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    4c5e:	69fa      	ldr	r2, [r7, #28]
    4c60:	6952      	ldr	r2, [r2, #20]
    4c62:	f06f 010a 	mvn.w	r1, #10
    4c66:	4610      	mov	r0, r2
    4c68:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
    4c6a:	69f9      	ldr	r1, [r7, #28]
    4c6c:	482f      	ldr	r0, [pc, #188]	; (4d2c <tcp_input+0x55c>)
    4c6e:	f7fe fe75 	bl	395c <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
    4c72:	69f9      	ldr	r1, [r7, #28]
    4c74:	2002      	movs	r0, #2
    4c76:	f7fd fd7b 	bl	2770 <memp_free>
    4c7a:	e0c0      	b.n	4dfe <tcp_input+0x62e>
      } else if (recv_flags & TF_CLOSED) {
    4c7c:	4b27      	ldr	r3, [pc, #156]	; (4d1c <tcp_input+0x54c>)
    4c7e:	781b      	ldrb	r3, [r3, #0]
    4c80:	f003 0310 	and.w	r3, r3, #16
    4c84:	2b00      	cmp	r3, #0
    4c86:	d008      	beq.n	4c9a <tcp_input+0x4ca>
        /* The connection has been closed and we will deallocate the
           PCB. */
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
    4c88:	69f9      	ldr	r1, [r7, #28]
    4c8a:	4828      	ldr	r0, [pc, #160]	; (4d2c <tcp_input+0x55c>)
    4c8c:	f7fe fe66 	bl	395c <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
    4c90:	69f9      	ldr	r1, [r7, #28]
    4c92:	2002      	movs	r0, #2
    4c94:	f7fd fd6c 	bl	2770 <memp_free>
    4c98:	e0b1      	b.n	4dfe <tcp_input+0x62e>
      } else {
        err = ERR_OK;
    4c9a:	2300      	movs	r3, #0
    4c9c:	613b      	str	r3, [r7, #16]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (pcb->acked > 0) {
    4c9e:	69fb      	ldr	r3, [r7, #28]
    4ca0:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
    4ca4:	2b00      	cmp	r3, #0
    4ca6:	d017      	beq.n	4cd8 <tcp_input+0x508>
          TCP_EVENT_SENT(pcb, pcb->acked, err);
    4ca8:	69fb      	ldr	r3, [r7, #28]
    4caa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    4cae:	2b00      	cmp	r3, #0
    4cb0:	d00b      	beq.n	4cca <tcp_input+0x4fa>
    4cb2:	69fb      	ldr	r3, [r7, #28]
    4cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    4cb8:	69fa      	ldr	r2, [r7, #28]
    4cba:	6950      	ldr	r0, [r2, #20]
    4cbc:	69fa      	ldr	r2, [r7, #28]
    4cbe:	f8b2 206c 	ldrh.w	r2, [r2, #108]	; 0x6c
    4cc2:	69f9      	ldr	r1, [r7, #28]
    4cc4:	4798      	blx	r3
    4cc6:	6138      	str	r0, [r7, #16]
    4cc8:	e001      	b.n	4cce <tcp_input+0x4fe>
    4cca:	2300      	movs	r3, #0
    4ccc:	613b      	str	r3, [r7, #16]
          if (err == ERR_ABRT) {
    4cce:	693b      	ldr	r3, [r7, #16]
    4cd0:	f113 0f0a 	cmn.w	r3, #10
    4cd4:	f000 808e 	beq.w	4df4 <tcp_input+0x624>
            goto aborted;
          }
        }

        if (recv_data != NULL) {
    4cd8:	4b0f      	ldr	r3, [pc, #60]	; (4d18 <tcp_input+0x548>)
    4cda:	681b      	ldr	r3, [r3, #0]
    4cdc:	2b00      	cmp	r3, #0
    4cde:	d05b      	beq.n	4d98 <tcp_input+0x5c8>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
          if (pcb->flags & TF_RXCLOSED) {
    4ce0:	69fb      	ldr	r3, [r7, #28]
    4ce2:	f893 3020 	ldrb.w	r3, [r3, #32]
    4ce6:	f003 0310 	and.w	r3, r3, #16
    4cea:	2b00      	cmp	r3, #0
    4cec:	d020      	beq.n	4d30 <tcp_input+0x560>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
    4cee:	4b0a      	ldr	r3, [pc, #40]	; (4d18 <tcp_input+0x548>)
    4cf0:	681b      	ldr	r3, [r3, #0]
    4cf2:	4618      	mov	r0, r3
    4cf4:	f001 ffa6 	bl	6c44 <pbuf_free>
            tcp_abort(pcb);
    4cf8:	69f8      	ldr	r0, [r7, #28]
    4cfa:	f7fe f829 	bl	2d50 <tcp_abort>
            goto aborted;
    4cfe:	e07e      	b.n	4dfe <tcp_input+0x62e>
    4d00:	10001974 	.word	0x10001974
    4d04:	10001200 	.word	0x10001200
    4d08:	10001a98 	.word	0x10001a98
    4d0c:	10001aa0 	.word	0x10001aa0
    4d10:	10001968 	.word	0x10001968
    4d14:	100011f0 	.word	0x100011f0
    4d18:	10001218 	.word	0x10001218
    4d1c:	10001214 	.word	0x10001214
    4d20:	10001212 	.word	0x10001212
    4d24:	10001978 	.word	0x10001978
    4d28:	10001a90 	.word	0x10001a90
    4d2c:	10001960 	.word	0x10001960
          }
          if (flags & TCP_PSH) {
    4d30:	4b58      	ldr	r3, [pc, #352]	; (4e94 <tcp_input+0x6c4>)
    4d32:	781b      	ldrb	r3, [r3, #0]
    4d34:	f003 0308 	and.w	r3, r3, #8
    4d38:	2b00      	cmp	r3, #0
    4d3a:	d008      	beq.n	4d4e <tcp_input+0x57e>
            recv_data->flags |= PBUF_FLAG_PUSH;
    4d3c:	4b56      	ldr	r3, [pc, #344]	; (4e98 <tcp_input+0x6c8>)
    4d3e:	681b      	ldr	r3, [r3, #0]
    4d40:	4a55      	ldr	r2, [pc, #340]	; (4e98 <tcp_input+0x6c8>)
    4d42:	6812      	ldr	r2, [r2, #0]
    4d44:	7b52      	ldrb	r2, [r2, #13]
    4d46:	f042 0201 	orr.w	r2, r2, #1
    4d4a:	b2d2      	uxtb	r2, r2
    4d4c:	735a      	strb	r2, [r3, #13]
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
    4d4e:	69fb      	ldr	r3, [r7, #28]
    4d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    4d54:	2b00      	cmp	r3, #0
    4d56:	d00b      	beq.n	4d70 <tcp_input+0x5a0>
    4d58:	69fb      	ldr	r3, [r7, #28]
    4d5a:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
    4d5e:	69fb      	ldr	r3, [r7, #28]
    4d60:	6958      	ldr	r0, [r3, #20]
    4d62:	4b4d      	ldr	r3, [pc, #308]	; (4e98 <tcp_input+0x6c8>)
    4d64:	681a      	ldr	r2, [r3, #0]
    4d66:	2300      	movs	r3, #0
    4d68:	69f9      	ldr	r1, [r7, #28]
    4d6a:	47a0      	blx	r4
    4d6c:	6138      	str	r0, [r7, #16]
    4d6e:	e007      	b.n	4d80 <tcp_input+0x5b0>
    4d70:	4b49      	ldr	r3, [pc, #292]	; (4e98 <tcp_input+0x6c8>)
    4d72:	681a      	ldr	r2, [r3, #0]
    4d74:	2300      	movs	r3, #0
    4d76:	69f9      	ldr	r1, [r7, #28]
    4d78:	2000      	movs	r0, #0
    4d7a:	f7fe fc27 	bl	35cc <tcp_recv_null>
    4d7e:	6138      	str	r0, [r7, #16]
          if (err == ERR_ABRT) {
    4d80:	693b      	ldr	r3, [r7, #16]
    4d82:	f113 0f0a 	cmn.w	r3, #10
    4d86:	d037      	beq.n	4df8 <tcp_input+0x628>
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
    4d88:	693b      	ldr	r3, [r7, #16]
    4d8a:	2b00      	cmp	r3, #0
    4d8c:	d004      	beq.n	4d98 <tcp_input+0x5c8>
            pcb->refused_data = recv_data;
    4d8e:	4b42      	ldr	r3, [pc, #264]	; (4e98 <tcp_input+0x6c8>)
    4d90:	681a      	ldr	r2, [r3, #0]
    4d92:	69fb      	ldr	r3, [r7, #28]
    4d94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
    4d98:	4b40      	ldr	r3, [pc, #256]	; (4e9c <tcp_input+0x6cc>)
    4d9a:	781b      	ldrb	r3, [r3, #0]
    4d9c:	f003 0320 	and.w	r3, r3, #32
    4da0:	2b00      	cmp	r3, #0
    4da2:	d020      	beq.n	4de6 <tcp_input+0x616>
          /* correct rcv_wnd as the application won't call tcp_recved()
             for the FIN's seqno */
          if (pcb->rcv_wnd != TCP_WND) {
    4da4:	69fb      	ldr	r3, [r7, #28]
    4da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4da8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
    4dac:	d005      	beq.n	4dba <tcp_input+0x5ea>
            pcb->rcv_wnd++;
    4dae:	69fb      	ldr	r3, [r7, #28]
    4db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4db2:	3301      	adds	r3, #1
    4db4:	b29a      	uxth	r2, r3
    4db6:	69fb      	ldr	r3, [r7, #28]
    4db8:	851a      	strh	r2, [r3, #40]	; 0x28
          }
          TCP_EVENT_CLOSED(pcb, err);
    4dba:	69fb      	ldr	r3, [r7, #28]
    4dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    4dc0:	2b00      	cmp	r3, #0
    4dc2:	d00a      	beq.n	4dda <tcp_input+0x60a>
    4dc4:	69fb      	ldr	r3, [r7, #28]
    4dc6:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
    4dca:	69fb      	ldr	r3, [r7, #28]
    4dcc:	6958      	ldr	r0, [r3, #20]
    4dce:	2300      	movs	r3, #0
    4dd0:	2200      	movs	r2, #0
    4dd2:	69f9      	ldr	r1, [r7, #28]
    4dd4:	47a0      	blx	r4
    4dd6:	6138      	str	r0, [r7, #16]
    4dd8:	e001      	b.n	4dde <tcp_input+0x60e>
    4dda:	2300      	movs	r3, #0
    4ddc:	613b      	str	r3, [r7, #16]
          if (err == ERR_ABRT) {
    4dde:	693b      	ldr	r3, [r7, #16]
    4de0:	f113 0f0a 	cmn.w	r3, #10
    4de4:	d00a      	beq.n	4dfc <tcp_input+0x62c>
            goto aborted;
          }
        }

        tcp_input_pcb = NULL;
    4de6:	4b2e      	ldr	r3, [pc, #184]	; (4ea0 <tcp_input+0x6d0>)
    4de8:	2200      	movs	r2, #0
    4dea:	601a      	str	r2, [r3, #0]
        tcp_output(pcb);//here!
    4dec:	69f8      	ldr	r0, [r7, #28]
    4dee:	f7ff f8ab 	bl	3f48 <tcp_output>
    4df2:	e004      	b.n	4dfe <tcp_input+0x62e>
           called when new send buffer space is available, we call it
           now. */
        if (pcb->acked > 0) {
          TCP_EVENT_SENT(pcb, pcb->acked, err);
          if (err == ERR_ABRT) {
            goto aborted;
    4df4:	bf00      	nop
    4df6:	e002      	b.n	4dfe <tcp_input+0x62e>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
          if (err == ERR_ABRT) {
            goto aborted;
    4df8:	bf00      	nop
    4dfa:	e000      	b.n	4dfe <tcp_input+0x62e>
          if (pcb->rcv_wnd != TCP_WND) {
            pcb->rcv_wnd++;
          }
          TCP_EVENT_CLOSED(pcb, err);
          if (err == ERR_ABRT) {
            goto aborted;
    4dfc:	bf00      	nop
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
  	tcp_input_pcb = NULL;
    4dfe:	4b28      	ldr	r3, [pc, #160]	; (4ea0 <tcp_input+0x6d0>)
    4e00:	2200      	movs	r2, #0
    4e02:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
    4e04:	4b24      	ldr	r3, [pc, #144]	; (4e98 <tcp_input+0x6c8>)
    4e06:	2200      	movs	r2, #0
    4e08:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
    4e0a:	4b26      	ldr	r3, [pc, #152]	; (4ea4 <tcp_input+0x6d4>)
    4e0c:	685b      	ldr	r3, [r3, #4]
    4e0e:	2b00      	cmp	r3, #0
    4e10:	d03d      	beq.n	4e8e <tcp_input+0x6be>
    {
      pbuf_free(inseg.p);
    4e12:	4b24      	ldr	r3, [pc, #144]	; (4ea4 <tcp_input+0x6d4>)
    4e14:	685b      	ldr	r3, [r3, #4]
    4e16:	4618      	mov	r0, r3
    4e18:	f001 ff14 	bl	6c44 <pbuf_free>
      inseg.p = NULL;
    4e1c:	4b21      	ldr	r3, [pc, #132]	; (4ea4 <tcp_input+0x6d4>)
    4e1e:	2200      	movs	r2, #0
    4e20:	605a      	str	r2, [r3, #4]
    4e22:	e034      	b.n	4e8e <tcp_input+0x6be>
  } else {

    /* If no matching PCB was found, send a TCP RST (reset) to the
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
    4e24:	4b20      	ldr	r3, [pc, #128]	; (4ea8 <tcp_input+0x6d8>)
    4e26:	681b      	ldr	r3, [r3, #0]
    4e28:	899b      	ldrh	r3, [r3, #12]
    4e2a:	b29b      	uxth	r3, r3
    4e2c:	4618      	mov	r0, r3
    4e2e:	f002 f967 	bl	7100 <lwip_ntohs>
    4e32:	4603      	mov	r3, r0
    4e34:	f003 0304 	and.w	r3, r3, #4
    4e38:	2b00      	cmp	r3, #0
    4e3a:	d125      	bne.n	4e88 <tcp_input+0x6b8>
      TCP_STATS_INC(tcp.proterr);
    4e3c:	4b1b      	ldr	r3, [pc, #108]	; (4eac <tcp_input+0x6dc>)
    4e3e:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
    4e42:	3301      	adds	r3, #1
    4e44:	b29a      	uxth	r2, r3
    4e46:	4b19      	ldr	r3, [pc, #100]	; (4eac <tcp_input+0x6dc>)
    4e48:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
      TCP_STATS_INC(tcp.drop);
    4e4c:	4b17      	ldr	r3, [pc, #92]	; (4eac <tcp_input+0x6dc>)
    4e4e:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
    4e52:	3301      	adds	r3, #1
    4e54:	b29a      	uxth	r2, r3
    4e56:	4b15      	ldr	r3, [pc, #84]	; (4eac <tcp_input+0x6dc>)
    4e58:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
      tcp_rst(ackno, seqno + tcplen,
    4e5c:	4b14      	ldr	r3, [pc, #80]	; (4eb0 <tcp_input+0x6e0>)
    4e5e:	6818      	ldr	r0, [r3, #0]
    4e60:	4b14      	ldr	r3, [pc, #80]	; (4eb4 <tcp_input+0x6e4>)
    4e62:	881b      	ldrh	r3, [r3, #0]
    4e64:	461a      	mov	r2, r3
    4e66:	4b14      	ldr	r3, [pc, #80]	; (4eb8 <tcp_input+0x6e8>)
    4e68:	681b      	ldr	r3, [r3, #0]
    4e6a:	18d1      	adds	r1, r2, r3
        ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
    4e6c:	4b0e      	ldr	r3, [pc, #56]	; (4ea8 <tcp_input+0x6d8>)
    4e6e:	681b      	ldr	r3, [r3, #0]
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(ackno, seqno + tcplen,
    4e70:	885b      	ldrh	r3, [r3, #2]
    4e72:	b29b      	uxth	r3, r3
        ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
    4e74:	4a0c      	ldr	r2, [pc, #48]	; (4ea8 <tcp_input+0x6d8>)
    4e76:	6812      	ldr	r2, [r2, #0]
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(ackno, seqno + tcplen,
    4e78:	8812      	ldrh	r2, [r2, #0]
    4e7a:	b292      	uxth	r2, r2
    4e7c:	9201      	str	r2, [sp, #4]
    4e7e:	9300      	str	r3, [sp, #0]
    4e80:	4b0e      	ldr	r3, [pc, #56]	; (4ebc <tcp_input+0x6ec>)
    4e82:	4a0f      	ldr	r2, [pc, #60]	; (4ec0 <tcp_input+0x6f0>)
    4e84:	f7ff fa88 	bl	4398 <tcp_rst>
        ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
    }
    pbuf_free(p);
    4e88:	6878      	ldr	r0, [r7, #4]
    4e8a:	f001 fedb 	bl	6c44 <pbuf_free>
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
}
    4e8e:	3724      	adds	r7, #36	; 0x24
    4e90:	46bd      	mov	sp, r7
    4e92:	bd90      	pop	{r4, r7, pc}
    4e94:	10001210 	.word	0x10001210
    4e98:	10001218 	.word	0x10001218
    4e9c:	10001214 	.word	0x10001214
    4ea0:	10001a90 	.word	0x10001a90
    4ea4:	100011f0 	.word	0x100011f0
    4ea8:	10001200 	.word	0x10001200
    4eac:	10001978 	.word	0x10001978
    4eb0:	1000120c 	.word	0x1000120c
    4eb4:	10001212 	.word	0x10001212
    4eb8:	10001208 	.word	0x10001208
    4ebc:	10001a98 	.word	0x10001a98
    4ec0:	10001aa0 	.word	0x10001aa0

00004ec4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
    4ec4:	b580      	push	{r7, lr}
    4ec6:	b086      	sub	sp, #24
    4ec8:	af02      	add	r7, sp, #8
    4eca:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  err_t rc;

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
    4ecc:	4b53      	ldr	r3, [pc, #332]	; (501c <tcp_listen_input+0x158>)
    4ece:	781b      	ldrb	r3, [r3, #0]
    4ed0:	f003 0310 	and.w	r3, r3, #16
    4ed4:	2b00      	cmp	r3, #0
    4ed6:	d017      	beq.n	4f08 <tcp_listen_input+0x44>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno + 1, seqno + tcplen,
    4ed8:	4b51      	ldr	r3, [pc, #324]	; (5020 <tcp_listen_input+0x15c>)
    4eda:	681b      	ldr	r3, [r3, #0]
    4edc:	1c58      	adds	r0, r3, #1
    4ede:	4b51      	ldr	r3, [pc, #324]	; (5024 <tcp_listen_input+0x160>)
    4ee0:	881b      	ldrh	r3, [r3, #0]
    4ee2:	461a      	mov	r2, r3
    4ee4:	4b50      	ldr	r3, [pc, #320]	; (5028 <tcp_listen_input+0x164>)
    4ee6:	681b      	ldr	r3, [r3, #0]
    4ee8:	18d1      	adds	r1, r2, r3
      ip_current_dest_addr(), ip_current_src_addr(),
      tcphdr->dest, tcphdr->src);
    4eea:	4b50      	ldr	r3, [pc, #320]	; (502c <tcp_listen_input+0x168>)
    4eec:	681b      	ldr	r3, [r3, #0]
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno + 1, seqno + tcplen,
    4eee:	885b      	ldrh	r3, [r3, #2]
    4ef0:	b29b      	uxth	r3, r3
      ip_current_dest_addr(), ip_current_src_addr(),
      tcphdr->dest, tcphdr->src);
    4ef2:	4a4e      	ldr	r2, [pc, #312]	; (502c <tcp_listen_input+0x168>)
    4ef4:	6812      	ldr	r2, [r2, #0]
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno + 1, seqno + tcplen,
    4ef6:	8812      	ldrh	r2, [r2, #0]
    4ef8:	b292      	uxth	r2, r2
    4efa:	9201      	str	r2, [sp, #4]
    4efc:	9300      	str	r3, [sp, #0]
    4efe:	4b4c      	ldr	r3, [pc, #304]	; (5030 <tcp_listen_input+0x16c>)
    4f00:	4a4c      	ldr	r2, [pc, #304]	; (5034 <tcp_listen_input+0x170>)
    4f02:	f7ff fa49 	bl	4398 <tcp_rst>
    4f06:	e083      	b.n	5010 <tcp_listen_input+0x14c>
      ip_current_dest_addr(), ip_current_src_addr(),
      tcphdr->dest, tcphdr->src);
  } else if (flags & TCP_SYN) {
    4f08:	4b44      	ldr	r3, [pc, #272]	; (501c <tcp_listen_input+0x158>)
    4f0a:	781b      	ldrb	r3, [r3, #0]
    4f0c:	f003 0302 	and.w	r3, r3, #2
    4f10:	2b00      	cmp	r3, #0
    4f12:	d07d      	beq.n	5010 <tcp_listen_input+0x14c>
    if (pcb->accepts_pending >= pcb->backlog) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: listen backlog exceeded for port %"U16_F"\n", tcphdr->dest));
      return ERR_ABRT;
    }
#endif /* TCP_LISTEN_BACKLOG */
    npcb = tcp_alloc(pcb->prio);
    4f14:	687b      	ldr	r3, [r7, #4]
    4f16:	7c5b      	ldrb	r3, [r3, #17]
    4f18:	4618      	mov	r0, r3
    4f1a:	f7fe fbe9 	bl	36f0 <tcp_alloc>
    4f1e:	60f8      	str	r0, [r7, #12]
    /* If a new PCB could not be created (probably due to lack of memory),
       we don't do anything, but rely on the sender will retransmit the
       SYN at a time when we have more memory available. */
    if (npcb == NULL) {
    4f20:	68fb      	ldr	r3, [r7, #12]
    4f22:	2b00      	cmp	r3, #0
    4f24:	d10a      	bne.n	4f3c <tcp_listen_input+0x78>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: could not allocate PCB\n"));
      TCP_STATS_INC(tcp.memerr);
    4f26:	4b44      	ldr	r3, [pc, #272]	; (5038 <tcp_listen_input+0x174>)
    4f28:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
    4f2c:	3301      	adds	r3, #1
    4f2e:	b29a      	uxth	r2, r3
    4f30:	4b41      	ldr	r3, [pc, #260]	; (5038 <tcp_listen_input+0x174>)
    4f32:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
      return ERR_MEM;
    4f36:	f04f 33ff 	mov.w	r3, #4294967295
    4f3a:	e06a      	b.n	5012 <tcp_listen_input+0x14e>
    }
#if TCP_LISTEN_BACKLOG
    pcb->accepts_pending++;
#endif /* TCP_LISTEN_BACKLOG */
    /* Set up the new PCB. */
    ip_addr_copy(npcb->local_ip, current_iphdr_dest);
    4f3c:	4b3d      	ldr	r3, [pc, #244]	; (5034 <tcp_listen_input+0x170>)
    4f3e:	681a      	ldr	r2, [r3, #0]
    4f40:	68fb      	ldr	r3, [r7, #12]
    4f42:	601a      	str	r2, [r3, #0]
    npcb->local_port = pcb->local_port;
    4f44:	687b      	ldr	r3, [r7, #4]
    4f46:	8b9a      	ldrh	r2, [r3, #28]
    4f48:	68fb      	ldr	r3, [r7, #12]
    4f4a:	839a      	strh	r2, [r3, #28]
    ip_addr_copy(npcb->remote_ip, current_iphdr_src);
    4f4c:	4b38      	ldr	r3, [pc, #224]	; (5030 <tcp_listen_input+0x16c>)
    4f4e:	681a      	ldr	r2, [r3, #0]
    4f50:	68fb      	ldr	r3, [r7, #12]
    4f52:	605a      	str	r2, [r3, #4]
    npcb->remote_port = tcphdr->src;
    4f54:	4b35      	ldr	r3, [pc, #212]	; (502c <tcp_listen_input+0x168>)
    4f56:	681b      	ldr	r3, [r3, #0]
    4f58:	881b      	ldrh	r3, [r3, #0]
    4f5a:	b29a      	uxth	r2, r3
    4f5c:	68fb      	ldr	r3, [r7, #12]
    4f5e:	83da      	strh	r2, [r3, #30]
    npcb->state = SYN_RCVD;
    4f60:	68fb      	ldr	r3, [r7, #12]
    4f62:	2203      	movs	r2, #3
    4f64:	741a      	strb	r2, [r3, #16]
    npcb->rcv_nxt = seqno + 1;
    4f66:	4b30      	ldr	r3, [pc, #192]	; (5028 <tcp_listen_input+0x164>)
    4f68:	681b      	ldr	r3, [r3, #0]
    4f6a:	1c5a      	adds	r2, r3, #1
    4f6c:	68fb      	ldr	r3, [r7, #12]
    4f6e:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
    4f70:	68fb      	ldr	r3, [r7, #12]
    4f72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4f74:	68fb      	ldr	r3, [r7, #12]
    4f76:	62da      	str	r2, [r3, #44]	; 0x2c
    npcb->snd_wnd = tcphdr->wnd;
    4f78:	4b2c      	ldr	r3, [pc, #176]	; (502c <tcp_listen_input+0x168>)
    4f7a:	681b      	ldr	r3, [r3, #0]
    4f7c:	89db      	ldrh	r3, [r3, #14]
    4f7e:	b29a      	uxth	r2, r3
    4f80:	68fb      	ldr	r3, [r7, #12]
    4f82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->ssthresh = npcb->snd_wnd;
    4f86:	68fb      	ldr	r3, [r7, #12]
    4f88:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
    4f8c:	68fb      	ldr	r3, [r7, #12]
    4f8e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
    4f92:	4b25      	ldr	r3, [pc, #148]	; (5028 <tcp_listen_input+0x164>)
    4f94:	681b      	ldr	r3, [r3, #0]
    4f96:	1e5a      	subs	r2, r3, #1
    4f98:	68fb      	ldr	r3, [r7, #12]
    4f9a:	661a      	str	r2, [r3, #96]	; 0x60
    npcb->callback_arg = pcb->callback_arg;
    4f9c:	687b      	ldr	r3, [r7, #4]
    4f9e:	695a      	ldr	r2, [r3, #20]
    4fa0:	68fb      	ldr	r3, [r7, #12]
    4fa2:	615a      	str	r2, [r3, #20]
#if LWIP_CALLBACK_API
    npcb->accept = pcb->accept;
    4fa4:	687b      	ldr	r3, [r7, #4]
    4fa6:	699a      	ldr	r2, [r3, #24]
    4fa8:	68fb      	ldr	r3, [r7, #12]
    4faa:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
    /* inherit socket options */
    npcb->so_options = pcb->so_options & SOF_INHERITED;
    4fac:	687b      	ldr	r3, [r7, #4]
    4fae:	7a1b      	ldrb	r3, [r3, #8]
    4fb0:	f023 0373 	bic.w	r3, r3, #115	; 0x73
    4fb4:	b2da      	uxtb	r2, r3
    4fb6:	68fb      	ldr	r3, [r7, #12]
    4fb8:	721a      	strb	r2, [r3, #8]
    /* Register the new PCB so that we can begin receiving segments
       for it. */
    TCP_REG(&tcp_active_pcbs, npcb);
    4fba:	4b20      	ldr	r3, [pc, #128]	; (503c <tcp_listen_input+0x178>)
    4fbc:	681a      	ldr	r2, [r3, #0]
    4fbe:	68fb      	ldr	r3, [r7, #12]
    4fc0:	60da      	str	r2, [r3, #12]
    4fc2:	4a1e      	ldr	r2, [pc, #120]	; (503c <tcp_listen_input+0x178>)
    4fc4:	68fb      	ldr	r3, [r7, #12]
    4fc6:	6013      	str	r3, [r2, #0]
    4fc8:	f001 fff6 	bl	6fb8 <tcp_timer_needed>

    /* Parse any options in the SYN. */
    tcp_parseopt(npcb);
    4fcc:	68f8      	ldr	r0, [r7, #12]
    4fce:	f001 fb91 	bl	66f4 <tcp_parseopt>
#if TCP_CALCULATE_EFF_SEND_MSS
    npcb->mss = tcp_eff_send_mss(npcb->mss, &(npcb->remote_ip));
    4fd2:	68fb      	ldr	r3, [r7, #12]
    4fd4:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    4fd6:	68fb      	ldr	r3, [r7, #12]
    4fd8:	3304      	adds	r3, #4
    4fda:	4619      	mov	r1, r3
    4fdc:	4610      	mov	r0, r2
    4fde:	f7fe fd29 	bl	3a34 <tcp_eff_send_mss>
    4fe2:	4603      	mov	r3, r0
    4fe4:	461a      	mov	r2, r3
    4fe6:	68fb      	ldr	r3, [r7, #12]
    4fe8:	871a      	strh	r2, [r3, #56]	; 0x38
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

    snmp_inc_tcppassiveopens();

    /* Send a SYN|ACK together with the MSS option. */
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
    4fea:	2112      	movs	r1, #18
    4fec:	68f8      	ldr	r0, [r7, #12]
    4fee:	f7fe fe6d 	bl	3ccc <tcp_enqueue_flags>
    4ff2:	60b8      	str	r0, [r7, #8]
    if (rc != ERR_OK) {
    4ff4:	68bb      	ldr	r3, [r7, #8]
    4ff6:	2b00      	cmp	r3, #0
    4ff8:	d005      	beq.n	5006 <tcp_listen_input+0x142>
      tcp_abandon(npcb, 0);
    4ffa:	2100      	movs	r1, #0
    4ffc:	68f8      	ldr	r0, [r7, #12]
    4ffe:	f7fd fe39 	bl	2c74 <tcp_abandon>
      return rc;
    5002:	68bb      	ldr	r3, [r7, #8]
    5004:	e005      	b.n	5012 <tcp_listen_input+0x14e>
    }
    return tcp_output(npcb);
    5006:	68f8      	ldr	r0, [r7, #12]
    5008:	f7fe ff9e 	bl	3f48 <tcp_output>
    500c:	4603      	mov	r3, r0
    500e:	e000      	b.n	5012 <tcp_listen_input+0x14e>
  }
  return ERR_OK;
    5010:	2300      	movs	r3, #0
}
    5012:	4618      	mov	r0, r3
    5014:	3710      	adds	r7, #16
    5016:	46bd      	mov	sp, r7
    5018:	bd80      	pop	{r7, pc}
    501a:	bf00      	nop
    501c:	10001210 	.word	0x10001210
    5020:	1000120c 	.word	0x1000120c
    5024:	10001212 	.word	0x10001212
    5028:	10001208 	.word	0x10001208
    502c:	10001200 	.word	0x10001200
    5030:	10001a98 	.word	0x10001a98
    5034:	10001aa0 	.word	0x10001aa0
    5038:	10001978 	.word	0x10001978
    503c:	10001960 	.word	0x10001960

00005040 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_timewait_input(struct tcp_pcb *pcb)
{
    5040:	b580      	push	{r7, lr}
    5042:	b084      	sub	sp, #16
    5044:	af02      	add	r7, sp, #8
    5046:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST)  {
    5048:	4b2b      	ldr	r3, [pc, #172]	; (50f8 <tcp_timewait_input+0xb8>)
    504a:	781b      	ldrb	r3, [r3, #0]
    504c:	f003 0304 	and.w	r3, r3, #4
    5050:	2b00      	cmp	r3, #0
    5052:	d001      	beq.n	5058 <tcp_timewait_input+0x18>
    return ERR_OK;
    5054:	2300      	movs	r3, #0
    5056:	e04b      	b.n	50f0 <tcp_timewait_input+0xb0>
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
    5058:	4b27      	ldr	r3, [pc, #156]	; (50f8 <tcp_timewait_input+0xb8>)
    505a:	781b      	ldrb	r3, [r3, #0]
    505c:	f003 0302 	and.w	r3, r3, #2
    5060:	2b00      	cmp	r3, #0
    5062:	d028      	beq.n	50b6 <tcp_timewait_input+0x76>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt+pcb->rcv_wnd)) {
    5064:	4b25      	ldr	r3, [pc, #148]	; (50fc <tcp_timewait_input+0xbc>)
    5066:	681a      	ldr	r2, [r3, #0]
    5068:	687b      	ldr	r3, [r7, #4]
    506a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    506c:	1ad3      	subs	r3, r2, r3
    506e:	2b00      	cmp	r3, #0
    5070:	db2b      	blt.n	50ca <tcp_timewait_input+0x8a>
    5072:	4b22      	ldr	r3, [pc, #136]	; (50fc <tcp_timewait_input+0xbc>)
    5074:	681a      	ldr	r2, [r3, #0]
    5076:	687b      	ldr	r3, [r7, #4]
    5078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    507a:	6879      	ldr	r1, [r7, #4]
    507c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
    507e:	440b      	add	r3, r1
    5080:	1ad3      	subs	r3, r2, r3
    5082:	2b00      	cmp	r3, #0
    5084:	dc21      	bgt.n	50ca <tcp_timewait_input+0x8a>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
    5086:	4b1e      	ldr	r3, [pc, #120]	; (5100 <tcp_timewait_input+0xc0>)
    5088:	6818      	ldr	r0, [r3, #0]
    508a:	4b1e      	ldr	r3, [pc, #120]	; (5104 <tcp_timewait_input+0xc4>)
    508c:	881b      	ldrh	r3, [r3, #0]
    508e:	461a      	mov	r2, r3
    5090:	4b1a      	ldr	r3, [pc, #104]	; (50fc <tcp_timewait_input+0xbc>)
    5092:	681b      	ldr	r3, [r3, #0]
    5094:	18d1      	adds	r1, r2, r3
        tcphdr->dest, tcphdr->src);
    5096:	4b1c      	ldr	r3, [pc, #112]	; (5108 <tcp_timewait_input+0xc8>)
    5098:	681b      	ldr	r3, [r3, #0]
  if (flags & TCP_SYN) {
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt+pcb->rcv_wnd)) {
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
    509a:	885b      	ldrh	r3, [r3, #2]
    509c:	b29b      	uxth	r3, r3
        tcphdr->dest, tcphdr->src);
    509e:	4a1a      	ldr	r2, [pc, #104]	; (5108 <tcp_timewait_input+0xc8>)
    50a0:	6812      	ldr	r2, [r2, #0]
  if (flags & TCP_SYN) {
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt+pcb->rcv_wnd)) {
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
    50a2:	8812      	ldrh	r2, [r2, #0]
    50a4:	b292      	uxth	r2, r2
    50a6:	9201      	str	r2, [sp, #4]
    50a8:	9300      	str	r3, [sp, #0]
    50aa:	4b18      	ldr	r3, [pc, #96]	; (510c <tcp_timewait_input+0xcc>)
    50ac:	4a18      	ldr	r2, [pc, #96]	; (5110 <tcp_timewait_input+0xd0>)
    50ae:	f7ff f973 	bl	4398 <tcp_rst>
        tcphdr->dest, tcphdr->src);
      return ERR_OK;
    50b2:	2300      	movs	r3, #0
    50b4:	e01c      	b.n	50f0 <tcp_timewait_input+0xb0>
    }
  } else if (flags & TCP_FIN) {
    50b6:	4b10      	ldr	r3, [pc, #64]	; (50f8 <tcp_timewait_input+0xb8>)
    50b8:	781b      	ldrb	r3, [r3, #0]
    50ba:	f003 0301 	and.w	r3, r3, #1
    50be:	2b00      	cmp	r3, #0
    50c0:	d003      	beq.n	50ca <tcp_timewait_input+0x8a>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
    50c2:	4b14      	ldr	r3, [pc, #80]	; (5114 <tcp_timewait_input+0xd4>)
    50c4:	681a      	ldr	r2, [r3, #0]
    50c6:	687b      	ldr	r3, [r7, #4]
    50c8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  if ((tcplen > 0))  {
    50ca:	4b0e      	ldr	r3, [pc, #56]	; (5104 <tcp_timewait_input+0xc4>)
    50cc:	881b      	ldrh	r3, [r3, #0]
    50ce:	2b00      	cmp	r3, #0
    50d0:	d00d      	beq.n	50ee <tcp_timewait_input+0xae>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
    50d2:	687b      	ldr	r3, [r7, #4]
    50d4:	f893 3020 	ldrb.w	r3, [r3, #32]
    50d8:	f043 0302 	orr.w	r3, r3, #2
    50dc:	b2da      	uxtb	r2, r3
    50de:	687b      	ldr	r3, [r7, #4]
    50e0:	f883 2020 	strb.w	r2, [r3, #32]
    return tcp_output(pcb);
    50e4:	6878      	ldr	r0, [r7, #4]
    50e6:	f7fe ff2f 	bl	3f48 <tcp_output>
    50ea:	4603      	mov	r3, r0
    50ec:	e000      	b.n	50f0 <tcp_timewait_input+0xb0>
  }
  return ERR_OK;
    50ee:	2300      	movs	r3, #0
}
    50f0:	4618      	mov	r0, r3
    50f2:	3708      	adds	r7, #8
    50f4:	46bd      	mov	sp, r7
    50f6:	bd80      	pop	{r7, pc}
    50f8:	10001210 	.word	0x10001210
    50fc:	10001208 	.word	0x10001208
    5100:	1000120c 	.word	0x1000120c
    5104:	10001212 	.word	0x10001212
    5108:	10001200 	.word	0x10001200
    510c:	10001a98 	.word	0x10001a98
    5110:	10001aa0 	.word	0x10001aa0
    5114:	10001964 	.word	0x10001964

00005118 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
    5118:	b580      	push	{r7, lr}
    511a:	b088      	sub	sp, #32
    511c:	af02      	add	r7, sp, #8
    511e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
    5120:	2300      	movs	r3, #0
    5122:	75fb      	strb	r3, [r7, #23]
  err_t err;

  err = ERR_OK;
    5124:	2300      	movs	r3, #0
    5126:	613b      	str	r3, [r7, #16]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
    5128:	4ba4      	ldr	r3, [pc, #656]	; (53bc <tcp_process+0x2a4>)
    512a:	781b      	ldrb	r3, [r3, #0]
    512c:	f003 0304 	and.w	r3, r3, #4
    5130:	2b00      	cmp	r3, #0
    5132:	d037      	beq.n	51a4 <tcp_process+0x8c>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
    5134:	687b      	ldr	r3, [r7, #4]
    5136:	7c1b      	ldrb	r3, [r3, #16]
    5138:	2b02      	cmp	r3, #2
    513a:	d108      	bne.n	514e <tcp_process+0x36>
      if (ackno == pcb->snd_nxt) {
    513c:	687b      	ldr	r3, [r7, #4]
    513e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    5140:	4b9f      	ldr	r3, [pc, #636]	; (53c0 <tcp_process+0x2a8>)
    5142:	681b      	ldr	r3, [r3, #0]
    5144:	429a      	cmp	r2, r3
    5146:	d115      	bne.n	5174 <tcp_process+0x5c>
        acceptable = 1;
    5148:	2301      	movs	r3, #1
    514a:	75fb      	strb	r3, [r7, #23]
    514c:	e012      	b.n	5174 <tcp_process+0x5c>
      }
    } else {
      if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
    514e:	4b9d      	ldr	r3, [pc, #628]	; (53c4 <tcp_process+0x2ac>)
    5150:	681a      	ldr	r2, [r3, #0]
    5152:	687b      	ldr	r3, [r7, #4]
    5154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5156:	1ad3      	subs	r3, r2, r3
    5158:	2b00      	cmp	r3, #0
    515a:	db0b      	blt.n	5174 <tcp_process+0x5c>
    515c:	4b99      	ldr	r3, [pc, #612]	; (53c4 <tcp_process+0x2ac>)
    515e:	681a      	ldr	r2, [r3, #0]
    5160:	687b      	ldr	r3, [r7, #4]
    5162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5164:	6879      	ldr	r1, [r7, #4]
    5166:	8d09      	ldrh	r1, [r1, #40]	; 0x28
    5168:	440b      	add	r3, r1
    516a:	1ad3      	subs	r3, r2, r3
    516c:	2b00      	cmp	r3, #0
    516e:	dc01      	bgt.n	5174 <tcp_process+0x5c>
                          pcb->rcv_nxt+pcb->rcv_wnd)) {
        acceptable = 1;
    5170:	2301      	movs	r3, #1
    5172:	75fb      	strb	r3, [r7, #23]
      }
    }

    if (acceptable) {
    5174:	7dfb      	ldrb	r3, [r7, #23]
    5176:	2b00      	cmp	r3, #0
    5178:	d012      	beq.n	51a0 <tcp_process+0x88>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
      recv_flags |= TF_RESET;
    517a:	4b93      	ldr	r3, [pc, #588]	; (53c8 <tcp_process+0x2b0>)
    517c:	781b      	ldrb	r3, [r3, #0]
    517e:	f043 0308 	orr.w	r3, r3, #8
    5182:	b2da      	uxtb	r2, r3
    5184:	4b90      	ldr	r3, [pc, #576]	; (53c8 <tcp_process+0x2b0>)
    5186:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
    5188:	687b      	ldr	r3, [r7, #4]
    518a:	f893 3020 	ldrb.w	r3, [r3, #32]
    518e:	f023 0301 	bic.w	r3, r3, #1
    5192:	b2da      	uxtb	r2, r3
    5194:	687b      	ldr	r3, [r7, #4]
    5196:	f883 2020 	strb.w	r2, [r3, #32]
      return ERR_RST;
    519a:	f06f 030a 	mvn.w	r3, #10
    519e:	e30f      	b.n	57c0 <tcp_process+0x6a8>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
    51a0:	2300      	movs	r3, #0
    51a2:	e30d      	b.n	57c0 <tcp_process+0x6a8>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) { 
    51a4:	4b85      	ldr	r3, [pc, #532]	; (53bc <tcp_process+0x2a4>)
    51a6:	781b      	ldrb	r3, [r3, #0]
    51a8:	f003 0302 	and.w	r3, r3, #2
    51ac:	2b00      	cmp	r3, #0
    51ae:	d012      	beq.n	51d6 <tcp_process+0xbe>
    51b0:	687b      	ldr	r3, [r7, #4]
    51b2:	7c1b      	ldrb	r3, [r3, #16]
    51b4:	2b02      	cmp	r3, #2
    51b6:	d00e      	beq.n	51d6 <tcp_process+0xbe>
    51b8:	687b      	ldr	r3, [r7, #4]
    51ba:	7c1b      	ldrb	r3, [r3, #16]
    51bc:	2b03      	cmp	r3, #3
    51be:	d00a      	beq.n	51d6 <tcp_process+0xbe>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
    51c0:	687b      	ldr	r3, [r7, #4]
    51c2:	f893 3020 	ldrb.w	r3, [r3, #32]
    51c6:	f043 0302 	orr.w	r3, r3, #2
    51ca:	b2da      	uxtb	r2, r3
    51cc:	687b      	ldr	r3, [r7, #4]
    51ce:	f883 2020 	strb.w	r2, [r3, #32]
    return ERR_OK;
    51d2:	2300      	movs	r3, #0
    51d4:	e2f4      	b.n	57c0 <tcp_process+0x6a8>
  }
  
  if ((pcb->flags & TF_RXCLOSED) == 0) {
    51d6:	687b      	ldr	r3, [r7, #4]
    51d8:	f893 3020 	ldrb.w	r3, [r3, #32]
    51dc:	f003 0310 	and.w	r3, r3, #16
    51e0:	2b00      	cmp	r3, #0
    51e2:	d103      	bne.n	51ec <tcp_process+0xd4>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
    51e4:	4b79      	ldr	r3, [pc, #484]	; (53cc <tcp_process+0x2b4>)
    51e6:	681a      	ldr	r2, [r3, #0]
    51e8:	687b      	ldr	r3, [r7, #4]
    51ea:	631a      	str	r2, [r3, #48]	; 0x30
  }
  pcb->keep_cnt_sent = 0;
    51ec:	687b      	ldr	r3, [r7, #4]
    51ee:	2200      	movs	r2, #0
    51f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  tcp_parseopt(pcb);
    51f4:	6878      	ldr	r0, [r7, #4]
    51f6:	f001 fa7d 	bl	66f4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
    51fa:	687b      	ldr	r3, [r7, #4]
    51fc:	7c1b      	ldrb	r3, [r3, #16]
    51fe:	3b02      	subs	r3, #2
    5200:	2b07      	cmp	r3, #7
    5202:	f200 82cd 	bhi.w	57a0 <tcp_process+0x688>
    5206:	a201      	add	r2, pc, #4	; (adr r2, 520c <tcp_process+0xf4>)
    5208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    520c:	0000522d 	.word	0x0000522d
    5210:	000053e1 	.word	0x000053e1
    5214:	0000550b 	.word	0x0000550b
    5218:	00005539 	.word	0x00005539
    521c:	00005623 	.word	0x00005623
    5220:	0000550b 	.word	0x0000550b
    5224:	000056e5 	.word	0x000056e5
    5228:	00005773 	.word	0x00005773
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
    522c:	4b63      	ldr	r3, [pc, #396]	; (53bc <tcp_process+0x2a4>)
    522e:	781b      	ldrb	r3, [r3, #0]
    5230:	f003 0310 	and.w	r3, r3, #16
    5234:	2b00      	cmp	r3, #0
    5236:	f000 80a2 	beq.w	537e <tcp_process+0x266>
    523a:	4b60      	ldr	r3, [pc, #384]	; (53bc <tcp_process+0x2a4>)
    523c:	781b      	ldrb	r3, [r3, #0]
    523e:	f003 0302 	and.w	r3, r3, #2
    5242:	2b00      	cmp	r3, #0
    5244:	f000 809b 	beq.w	537e <tcp_process+0x266>
        && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
    5248:	687b      	ldr	r3, [r7, #4]
    524a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    524c:	68db      	ldr	r3, [r3, #12]
    524e:	685b      	ldr	r3, [r3, #4]
    5250:	4618      	mov	r0, r3
    5252:	f001 ff7b 	bl	714c <lwip_ntohl>
    5256:	4603      	mov	r3, r0
    5258:	1c5a      	adds	r2, r3, #1
    525a:	4b59      	ldr	r3, [pc, #356]	; (53c0 <tcp_process+0x2a8>)
    525c:	681b      	ldr	r3, [r3, #0]
    525e:	429a      	cmp	r2, r3
    5260:	f040 808d 	bne.w	537e <tcp_process+0x266>
      pcb->snd_buf++;
    5264:	687b      	ldr	r3, [r7, #4]
    5266:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
    526a:	3301      	adds	r3, #1
    526c:	b29a      	uxth	r2, r3
    526e:	687b      	ldr	r3, [r7, #4]
    5270:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
      pcb->rcv_nxt = seqno + 1;
    5274:	4b53      	ldr	r3, [pc, #332]	; (53c4 <tcp_process+0x2ac>)
    5276:	681b      	ldr	r3, [r3, #0]
    5278:	1c5a      	adds	r2, r3, #1
    527a:	687b      	ldr	r3, [r7, #4]
    527c:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
    527e:	687b      	ldr	r3, [r7, #4]
    5280:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5282:	687b      	ldr	r3, [r7, #4]
    5284:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
    5286:	4b4e      	ldr	r3, [pc, #312]	; (53c0 <tcp_process+0x2a8>)
    5288:	681a      	ldr	r2, [r3, #0]
    528a:	687b      	ldr	r3, [r7, #4]
    528c:	64da      	str	r2, [r3, #76]	; 0x4c
      pcb->snd_wnd = tcphdr->wnd;
    528e:	4b50      	ldr	r3, [pc, #320]	; (53d0 <tcp_process+0x2b8>)
    5290:	681b      	ldr	r3, [r3, #0]
    5292:	89db      	ldrh	r3, [r3, #14]
    5294:	b29a      	uxth	r2, r3
    5296:	687b      	ldr	r3, [r7, #4]
    5298:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
    529c:	4b49      	ldr	r3, [pc, #292]	; (53c4 <tcp_process+0x2ac>)
    529e:	681b      	ldr	r3, [r3, #0]
    52a0:	1e5a      	subs	r2, r3, #1
    52a2:	687b      	ldr	r3, [r7, #4]
    52a4:	661a      	str	r2, [r3, #96]	; 0x60
      pcb->state = ESTABLISHED;
    52a6:	687b      	ldr	r3, [r7, #4]
    52a8:	2204      	movs	r2, #4
    52aa:	741a      	strb	r2, [r3, #16]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &(pcb->remote_ip));
    52ac:	687b      	ldr	r3, [r7, #4]
    52ae:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    52b0:	687b      	ldr	r3, [r7, #4]
    52b2:	3304      	adds	r3, #4
    52b4:	4619      	mov	r1, r3
    52b6:	4610      	mov	r0, r2
    52b8:	f7fe fbbc 	bl	3a34 <tcp_eff_send_mss>
    52bc:	4603      	mov	r3, r0
    52be:	461a      	mov	r2, r3
    52c0:	687b      	ldr	r3, [r7, #4]
    52c2:	871a      	strh	r2, [r3, #56]	; 0x38
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      /* Set ssthresh again after changing pcb->mss (already set in tcp_connect
       * but for the default value of pcb->mss) */
      pcb->ssthresh = pcb->mss * 10;
    52c4:	687b      	ldr	r3, [r7, #4]
    52c6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    52c8:	461a      	mov	r2, r3
    52ca:	0092      	lsls	r2, r2, #2
    52cc:	4413      	add	r3, r2
    52ce:	005b      	lsls	r3, r3, #1
    52d0:	b29a      	uxth	r2, r3
    52d2:	687b      	ldr	r3, [r7, #4]
    52d4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

      pcb->cwnd = ((pcb->cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
    52d8:	687b      	ldr	r3, [r7, #4]
    52da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
    52de:	2b01      	cmp	r3, #1
    52e0:	d104      	bne.n	52ec <tcp_process+0x1d4>
    52e2:	687b      	ldr	r3, [r7, #4]
    52e4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    52e6:	005b      	lsls	r3, r3, #1
    52e8:	b29b      	uxth	r3, r3
    52ea:	e001      	b.n	52f0 <tcp_process+0x1d8>
    52ec:	687b      	ldr	r3, [r7, #4]
    52ee:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    52f0:	687a      	ldr	r2, [r7, #4]
    52f2:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
      --pcb->snd_queuelen;
    52f6:	687b      	ldr	r3, [r7, #4]
    52f8:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
    52fc:	3b01      	subs	r3, #1
    52fe:	b29a      	uxth	r2, r3
    5300:	687b      	ldr	r3, [r7, #4]
    5302:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"U16_F"\n", (u16_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
    5306:	687b      	ldr	r3, [r7, #4]
    5308:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    530a:	60fb      	str	r3, [r7, #12]
      pcb->unacked = rseg->next;
    530c:	68fb      	ldr	r3, [r7, #12]
    530e:	681a      	ldr	r2, [r3, #0]
    5310:	687b      	ldr	r3, [r7, #4]
    5312:	679a      	str	r2, [r3, #120]	; 0x78

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if(pcb->unacked == NULL)
    5314:	687b      	ldr	r3, [r7, #4]
    5316:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    5318:	2b00      	cmp	r3, #0
    531a:	d104      	bne.n	5326 <tcp_process+0x20e>
        pcb->rtime = -1;
    531c:	687b      	ldr	r3, [r7, #4]
    531e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    5322:	86da      	strh	r2, [r3, #54]	; 0x36
    5324:	e006      	b.n	5334 <tcp_process+0x21c>
      else {
        pcb->rtime = 0;
    5326:	687b      	ldr	r3, [r7, #4]
    5328:	2200      	movs	r2, #0
    532a:	86da      	strh	r2, [r3, #54]	; 0x36
        pcb->nrtx = 0;
    532c:	687b      	ldr	r3, [r7, #4]
    532e:	2200      	movs	r2, #0
    5330:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
      }

      tcp_seg_free(rseg);
    5334:	68f8      	ldr	r0, [r7, #12]
    5336:	f7fe f907 	bl	3548 <tcp_seg_free>

      /* Call the user specified function to call when sucessfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
    533a:	687b      	ldr	r3, [r7, #4]
    533c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    5340:	2b00      	cmp	r3, #0
    5342:	d009      	beq.n	5358 <tcp_process+0x240>
    5344:	687b      	ldr	r3, [r7, #4]
    5346:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    534a:	687a      	ldr	r2, [r7, #4]
    534c:	6950      	ldr	r0, [r2, #20]
    534e:	2200      	movs	r2, #0
    5350:	6879      	ldr	r1, [r7, #4]
    5352:	4798      	blx	r3
    5354:	6138      	str	r0, [r7, #16]
    5356:	e001      	b.n	535c <tcp_process+0x244>
    5358:	2300      	movs	r3, #0
    535a:	613b      	str	r3, [r7, #16]
      if (err == ERR_ABRT) {
    535c:	693b      	ldr	r3, [r7, #16]
    535e:	f113 0f0a 	cmn.w	r3, #10
    5362:	d102      	bne.n	536a <tcp_process+0x252>
        return ERR_ABRT;
    5364:	f06f 0309 	mvn.w	r3, #9
    5368:	e22a      	b.n	57c0 <tcp_process+0x6a8>
      }
      tcp_ack_now(pcb);
    536a:	687b      	ldr	r3, [r7, #4]
    536c:	f893 3020 	ldrb.w	r3, [r3, #32]
    5370:	f043 0302 	orr.w	r3, r3, #2
    5374:	b2da      	uxtb	r2, r3
    5376:	687b      	ldr	r3, [r7, #4]
    5378:	f883 2020 	strb.w	r2, [r3, #32]
    else if (flags & TCP_ACK) {
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
    }
    break;
    537c:	e212      	b.n	57a4 <tcp_process+0x68c>
        return ERR_ABRT;
      }
      tcp_ack_now(pcb);
    }
    /* received ACK? possibly a half-open connection */
    else if (flags & TCP_ACK) {
    537e:	4b0f      	ldr	r3, [pc, #60]	; (53bc <tcp_process+0x2a4>)
    5380:	781b      	ldrb	r3, [r3, #0]
    5382:	f003 0310 	and.w	r3, r3, #16
    5386:	2b00      	cmp	r3, #0
    5388:	f000 820c 	beq.w	57a4 <tcp_process+0x68c>
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
    538c:	4b0c      	ldr	r3, [pc, #48]	; (53c0 <tcp_process+0x2a8>)
    538e:	6818      	ldr	r0, [r3, #0]
    5390:	4b10      	ldr	r3, [pc, #64]	; (53d4 <tcp_process+0x2bc>)
    5392:	881b      	ldrh	r3, [r3, #0]
    5394:	461a      	mov	r2, r3
    5396:	4b0b      	ldr	r3, [pc, #44]	; (53c4 <tcp_process+0x2ac>)
    5398:	681b      	ldr	r3, [r3, #0]
    539a:	18d1      	adds	r1, r2, r3
        tcphdr->dest, tcphdr->src);
    539c:	4b0c      	ldr	r3, [pc, #48]	; (53d0 <tcp_process+0x2b8>)
    539e:	681b      	ldr	r3, [r3, #0]
      tcp_ack_now(pcb);
    }
    /* received ACK? possibly a half-open connection */
    else if (flags & TCP_ACK) {
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
    53a0:	885b      	ldrh	r3, [r3, #2]
    53a2:	b29b      	uxth	r3, r3
        tcphdr->dest, tcphdr->src);
    53a4:	4a0a      	ldr	r2, [pc, #40]	; (53d0 <tcp_process+0x2b8>)
    53a6:	6812      	ldr	r2, [r2, #0]
      tcp_ack_now(pcb);
    }
    /* received ACK? possibly a half-open connection */
    else if (flags & TCP_ACK) {
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
    53a8:	8812      	ldrh	r2, [r2, #0]
    53aa:	b292      	uxth	r2, r2
    53ac:	9201      	str	r2, [sp, #4]
    53ae:	9300      	str	r3, [sp, #0]
    53b0:	4b09      	ldr	r3, [pc, #36]	; (53d8 <tcp_process+0x2c0>)
    53b2:	4a0a      	ldr	r2, [pc, #40]	; (53dc <tcp_process+0x2c4>)
    53b4:	f7fe fff0 	bl	4398 <tcp_rst>
        tcphdr->dest, tcphdr->src);
    }
    break;
    53b8:	e1f4      	b.n	57a4 <tcp_process+0x68c>
    53ba:	bf00      	nop
    53bc:	10001210 	.word	0x10001210
    53c0:	1000120c 	.word	0x1000120c
    53c4:	10001208 	.word	0x10001208
    53c8:	10001214 	.word	0x10001214
    53cc:	10001964 	.word	0x10001964
    53d0:	10001200 	.word	0x10001200
    53d4:	10001212 	.word	0x10001212
    53d8:	10001a98 	.word	0x10001a98
    53dc:	10001aa0 	.word	0x10001aa0
  case SYN_RCVD:
    if (flags & TCP_ACK) {
    53e0:	4ba0      	ldr	r3, [pc, #640]	; (5664 <tcp_process+0x54c>)
    53e2:	781b      	ldrb	r3, [r3, #0]
    53e4:	f003 0310 	and.w	r3, r3, #16
    53e8:	2b00      	cmp	r3, #0
    53ea:	d079      	beq.n	54e0 <tcp_process+0x3c8>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
    53ec:	4b9e      	ldr	r3, [pc, #632]	; (5668 <tcp_process+0x550>)
    53ee:	681a      	ldr	r2, [r3, #0]
    53f0:	687b      	ldr	r3, [r7, #4]
    53f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    53f4:	1ad3      	subs	r3, r2, r3
    53f6:	3b01      	subs	r3, #1
    53f8:	2b00      	cmp	r3, #0
    53fa:	db5a      	blt.n	54b2 <tcp_process+0x39a>
    53fc:	4b9a      	ldr	r3, [pc, #616]	; (5668 <tcp_process+0x550>)
    53fe:	681a      	ldr	r2, [r3, #0]
    5400:	687b      	ldr	r3, [r7, #4]
    5402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    5404:	1ad3      	subs	r3, r2, r3
    5406:	2b00      	cmp	r3, #0
    5408:	dc53      	bgt.n	54b2 <tcp_process+0x39a>
        u16_t old_cwnd;
        pcb->state = ESTABLISHED;
    540a:	687b      	ldr	r3, [r7, #4]
    540c:	2204      	movs	r2, #4
    540e:	741a      	strb	r2, [r3, #16]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->accept != NULL", pcb->accept != NULL);
#endif
        /* Call the accept function. i.e acceptTCP()*/
        TCP_EVENT_ACCEPT(pcb, ERR_OK, err);
    5410:	687b      	ldr	r3, [r7, #4]
    5412:	699b      	ldr	r3, [r3, #24]
    5414:	2b00      	cmp	r3, #0
    5416:	d008      	beq.n	542a <tcp_process+0x312>
    5418:	687b      	ldr	r3, [r7, #4]
    541a:	699b      	ldr	r3, [r3, #24]
    541c:	687a      	ldr	r2, [r7, #4]
    541e:	6950      	ldr	r0, [r2, #20]
    5420:	2200      	movs	r2, #0
    5422:	6879      	ldr	r1, [r7, #4]
    5424:	4798      	blx	r3
    5426:	6138      	str	r0, [r7, #16]
    5428:	e002      	b.n	5430 <tcp_process+0x318>
    542a:	f06f 030d 	mvn.w	r3, #13
    542e:	613b      	str	r3, [r7, #16]
        if (err != ERR_OK) {
    5430:	693b      	ldr	r3, [r7, #16]
    5432:	2b00      	cmp	r3, #0
    5434:	d009      	beq.n	544a <tcp_process+0x332>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
    5436:	693b      	ldr	r3, [r7, #16]
    5438:	f113 0f0a 	cmn.w	r3, #10
    543c:	d002      	beq.n	5444 <tcp_process+0x32c>
            tcp_abort(pcb);
    543e:	6878      	ldr	r0, [r7, #4]
    5440:	f7fd fc86 	bl	2d50 <tcp_abort>
          }
          return ERR_ABRT;
    5444:	f06f 0309 	mvn.w	r3, #9
    5448:	e1ba      	b.n	57c0 <tcp_process+0x6a8>
        }
        old_cwnd = pcb->cwnd;
    544a:	687b      	ldr	r3, [r7, #4]
    544c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
    5450:	817b      	strh	r3, [r7, #10]
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
    5452:	6878      	ldr	r0, [r7, #4]
    5454:	f000 fa3a 	bl	58cc <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (pcb->acked != 0) {
    5458:	687b      	ldr	r3, [r7, #4]
    545a:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
    545e:	2b00      	cmp	r3, #0
    5460:	d007      	beq.n	5472 <tcp_process+0x35a>
          pcb->acked--;
    5462:	687b      	ldr	r3, [r7, #4]
    5464:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
    5468:	3b01      	subs	r3, #1
    546a:	b29a      	uxth	r2, r3
    546c:	687b      	ldr	r3, [r7, #4]
    546e:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
        }

        pcb->cwnd = ((old_cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
    5472:	897b      	ldrh	r3, [r7, #10]
    5474:	2b01      	cmp	r3, #1
    5476:	d104      	bne.n	5482 <tcp_process+0x36a>
    5478:	687b      	ldr	r3, [r7, #4]
    547a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    547c:	005b      	lsls	r3, r3, #1
    547e:	b29b      	uxth	r3, r3
    5480:	e001      	b.n	5486 <tcp_process+0x36e>
    5482:	687b      	ldr	r3, [r7, #4]
    5484:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    5486:	687a      	ldr	r2, [r7, #4]
    5488:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52

        if (recv_flags & TF_GOT_FIN) {
    548c:	4b77      	ldr	r3, [pc, #476]	; (566c <tcp_process+0x554>)
    548e:	781b      	ldrb	r3, [r3, #0]
    5490:	f003 0320 	and.w	r3, r3, #32
    5494:	2b00      	cmp	r3, #0
    5496:	d036      	beq.n	5506 <tcp_process+0x3ee>
          tcp_ack_now(pcb);
    5498:	687b      	ldr	r3, [r7, #4]
    549a:	f893 3020 	ldrb.w	r3, [r3, #32]
    549e:	f043 0302 	orr.w	r3, r3, #2
    54a2:	b2da      	uxtb	r2, r3
    54a4:	687b      	ldr	r3, [r7, #4]
    54a6:	f883 2020 	strb.w	r2, [r3, #32]
          pcb->state = CLOSE_WAIT;
    54aa:	687b      	ldr	r3, [r7, #4]
    54ac:	2207      	movs	r2, #7
    54ae:	741a      	strb	r2, [r3, #16]
    }
    break;
  case SYN_RCVD:
    if (flags & TCP_ACK) {
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
    54b0:	e029      	b.n	5506 <tcp_process+0x3ee>
          tcp_ack_now(pcb);
          pcb->state = CLOSE_WAIT;
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
    54b2:	4b6d      	ldr	r3, [pc, #436]	; (5668 <tcp_process+0x550>)
    54b4:	6818      	ldr	r0, [r3, #0]
    54b6:	4b6e      	ldr	r3, [pc, #440]	; (5670 <tcp_process+0x558>)
    54b8:	881b      	ldrh	r3, [r3, #0]
    54ba:	461a      	mov	r2, r3
    54bc:	4b6d      	ldr	r3, [pc, #436]	; (5674 <tcp_process+0x55c>)
    54be:	681b      	ldr	r3, [r3, #0]
    54c0:	18d1      	adds	r1, r2, r3
                tcphdr->dest, tcphdr->src);
    54c2:	4b6d      	ldr	r3, [pc, #436]	; (5678 <tcp_process+0x560>)
    54c4:	681b      	ldr	r3, [r3, #0]
          tcp_ack_now(pcb);
          pcb->state = CLOSE_WAIT;
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
    54c6:	885b      	ldrh	r3, [r3, #2]
    54c8:	b29b      	uxth	r3, r3
                tcphdr->dest, tcphdr->src);
    54ca:	4a6b      	ldr	r2, [pc, #428]	; (5678 <tcp_process+0x560>)
    54cc:	6812      	ldr	r2, [r2, #0]
          tcp_ack_now(pcb);
          pcb->state = CLOSE_WAIT;
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
    54ce:	8812      	ldrh	r2, [r2, #0]
    54d0:	b292      	uxth	r2, r2
    54d2:	9201      	str	r2, [sp, #4]
    54d4:	9300      	str	r3, [sp, #0]
    54d6:	4b69      	ldr	r3, [pc, #420]	; (567c <tcp_process+0x564>)
    54d8:	4a69      	ldr	r2, [pc, #420]	; (5680 <tcp_process+0x568>)
    54da:	f7fe ff5d 	bl	4398 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
    54de:	e163      	b.n	57a8 <tcp_process+0x690>
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
                tcphdr->dest, tcphdr->src);
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
    54e0:	4b60      	ldr	r3, [pc, #384]	; (5664 <tcp_process+0x54c>)
    54e2:	781b      	ldrb	r3, [r3, #0]
    54e4:	f003 0302 	and.w	r3, r3, #2
    54e8:	2b00      	cmp	r3, #0
    54ea:	f000 815d 	beq.w	57a8 <tcp_process+0x690>
    54ee:	687b      	ldr	r3, [r7, #4]
    54f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    54f2:	1e5a      	subs	r2, r3, #1
    54f4:	4b5f      	ldr	r3, [pc, #380]	; (5674 <tcp_process+0x55c>)
    54f6:	681b      	ldr	r3, [r3, #0]
    54f8:	429a      	cmp	r2, r3
    54fa:	f040 8155 	bne.w	57a8 <tcp_process+0x690>
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    54fe:	6878      	ldr	r0, [r7, #4]
    5500:	f7fe fff0 	bl	44e4 <tcp_rexmit>
    }
    break;
    5504:	e150      	b.n	57a8 <tcp_process+0x690>
    }
    break;
  case SYN_RCVD:
    if (flags & TCP_ACK) {
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
    5506:	bf00      	nop
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
    5508:	e14e      	b.n	57a8 <tcp_process+0x690>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
    550a:	6878      	ldr	r0, [r7, #4]
    550c:	f000 f9de 	bl	58cc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
    5510:	4b56      	ldr	r3, [pc, #344]	; (566c <tcp_process+0x554>)
    5512:	781b      	ldrb	r3, [r3, #0]
    5514:	f003 0320 	and.w	r3, r3, #32
    5518:	2b00      	cmp	r3, #0
    551a:	f000 8147 	beq.w	57ac <tcp_process+0x694>
      tcp_ack_now(pcb);
    551e:	687b      	ldr	r3, [r7, #4]
    5520:	f893 3020 	ldrb.w	r3, [r3, #32]
    5524:	f043 0302 	orr.w	r3, r3, #2
    5528:	b2da      	uxtb	r2, r3
    552a:	687b      	ldr	r3, [r7, #4]
    552c:	f883 2020 	strb.w	r2, [r3, #32]
      pcb->state = CLOSE_WAIT;
    5530:	687b      	ldr	r3, [r7, #4]
    5532:	2207      	movs	r2, #7
    5534:	741a      	strb	r2, [r3, #16]
    }
    break;
    5536:	e139      	b.n	57ac <tcp_process+0x694>
  case FIN_WAIT_1:
    tcp_receive(pcb);
    5538:	6878      	ldr	r0, [r7, #4]
    553a:	f000 f9c7 	bl	58cc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
    553e:	4b4b      	ldr	r3, [pc, #300]	; (566c <tcp_process+0x554>)
    5540:	781b      	ldrb	r3, [r3, #0]
    5542:	f003 0320 	and.w	r3, r3, #32
    5546:	2b00      	cmp	r3, #0
    5548:	d059      	beq.n	55fe <tcp_process+0x4e6>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
    554a:	4b46      	ldr	r3, [pc, #280]	; (5664 <tcp_process+0x54c>)
    554c:	781b      	ldrb	r3, [r3, #0]
    554e:	f003 0310 	and.w	r3, r3, #16
    5552:	2b00      	cmp	r3, #0
    5554:	d046      	beq.n	55e4 <tcp_process+0x4cc>
    5556:	687b      	ldr	r3, [r7, #4]
    5558:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    555a:	4b43      	ldr	r3, [pc, #268]	; (5668 <tcp_process+0x550>)
    555c:	681b      	ldr	r3, [r3, #0]
    555e:	429a      	cmp	r2, r3
    5560:	d140      	bne.n	55e4 <tcp_process+0x4cc>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
    5562:	687b      	ldr	r3, [r7, #4]
    5564:	f893 3020 	ldrb.w	r3, [r3, #32]
    5568:	f043 0302 	orr.w	r3, r3, #2
    556c:	b2da      	uxtb	r2, r3
    556e:	687b      	ldr	r3, [r7, #4]
    5570:	f883 2020 	strb.w	r2, [r3, #32]
        tcp_pcb_purge(pcb);
    5574:	6878      	ldr	r0, [r7, #4]
    5576:	f7fe f9ad 	bl	38d4 <tcp_pcb_purge>
        TCP_RMV(&tcp_active_pcbs, pcb);
    557a:	4b42      	ldr	r3, [pc, #264]	; (5684 <tcp_process+0x56c>)
    557c:	681a      	ldr	r2, [r3, #0]
    557e:	687b      	ldr	r3, [r7, #4]
    5580:	429a      	cmp	r2, r3
    5582:	d105      	bne.n	5590 <tcp_process+0x478>
    5584:	4b3f      	ldr	r3, [pc, #252]	; (5684 <tcp_process+0x56c>)
    5586:	681b      	ldr	r3, [r3, #0]
    5588:	68db      	ldr	r3, [r3, #12]
    558a:	4a3e      	ldr	r2, [pc, #248]	; (5684 <tcp_process+0x56c>)
    558c:	6013      	str	r3, [r2, #0]
    558e:	e019      	b.n	55c4 <tcp_process+0x4ac>
    5590:	4b3c      	ldr	r3, [pc, #240]	; (5684 <tcp_process+0x56c>)
    5592:	681b      	ldr	r3, [r3, #0]
    5594:	4a3c      	ldr	r2, [pc, #240]	; (5688 <tcp_process+0x570>)
    5596:	6013      	str	r3, [r2, #0]
    5598:	e010      	b.n	55bc <tcp_process+0x4a4>
    559a:	4b3b      	ldr	r3, [pc, #236]	; (5688 <tcp_process+0x570>)
    559c:	681b      	ldr	r3, [r3, #0]
    559e:	68da      	ldr	r2, [r3, #12]
    55a0:	687b      	ldr	r3, [r7, #4]
    55a2:	429a      	cmp	r2, r3
    55a4:	d105      	bne.n	55b2 <tcp_process+0x49a>
    55a6:	4b38      	ldr	r3, [pc, #224]	; (5688 <tcp_process+0x570>)
    55a8:	681b      	ldr	r3, [r3, #0]
    55aa:	687a      	ldr	r2, [r7, #4]
    55ac:	68d2      	ldr	r2, [r2, #12]
    55ae:	60da      	str	r2, [r3, #12]
    55b0:	e008      	b.n	55c4 <tcp_process+0x4ac>
    55b2:	4b35      	ldr	r3, [pc, #212]	; (5688 <tcp_process+0x570>)
    55b4:	681b      	ldr	r3, [r3, #0]
    55b6:	68db      	ldr	r3, [r3, #12]
    55b8:	4a33      	ldr	r2, [pc, #204]	; (5688 <tcp_process+0x570>)
    55ba:	6013      	str	r3, [r2, #0]
    55bc:	4b32      	ldr	r3, [pc, #200]	; (5688 <tcp_process+0x570>)
    55be:	681b      	ldr	r3, [r3, #0]
    55c0:	2b00      	cmp	r3, #0
    55c2:	d1ea      	bne.n	559a <tcp_process+0x482>
    55c4:	687b      	ldr	r3, [r7, #4]
    55c6:	2200      	movs	r2, #0
    55c8:	60da      	str	r2, [r3, #12]
        pcb->state = TIME_WAIT;
    55ca:	687b      	ldr	r3, [r7, #4]
    55cc:	220a      	movs	r2, #10
    55ce:	741a      	strb	r2, [r3, #16]
        TCP_REG(&tcp_tw_pcbs, pcb);
    55d0:	4b2e      	ldr	r3, [pc, #184]	; (568c <tcp_process+0x574>)
    55d2:	681a      	ldr	r2, [r3, #0]
    55d4:	687b      	ldr	r3, [r7, #4]
    55d6:	60da      	str	r2, [r3, #12]
    55d8:	4a2c      	ldr	r2, [pc, #176]	; (568c <tcp_process+0x574>)
    55da:	687b      	ldr	r3, [r7, #4]
    55dc:	6013      	str	r3, [r2, #0]
    55de:	f001 fceb 	bl	6fb8 <tcp_timer_needed>
        pcb->state = CLOSING;
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
      pcb->state = FIN_WAIT_2;
    }
    break;
    55e2:	e0e5      	b.n	57b0 <tcp_process+0x698>
        tcp_pcb_purge(pcb);
        TCP_RMV(&tcp_active_pcbs, pcb);
        pcb->state = TIME_WAIT;
        TCP_REG(&tcp_tw_pcbs, pcb);
      } else {
        tcp_ack_now(pcb);
    55e4:	687b      	ldr	r3, [r7, #4]
    55e6:	f893 3020 	ldrb.w	r3, [r3, #32]
    55ea:	f043 0302 	orr.w	r3, r3, #2
    55ee:	b2da      	uxtb	r2, r3
    55f0:	687b      	ldr	r3, [r7, #4]
    55f2:	f883 2020 	strb.w	r2, [r3, #32]
        pcb->state = CLOSING;
    55f6:	687b      	ldr	r3, [r7, #4]
    55f8:	2208      	movs	r2, #8
    55fa:	741a      	strb	r2, [r3, #16]
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
      pcb->state = FIN_WAIT_2;
    }
    break;
    55fc:	e0d8      	b.n	57b0 <tcp_process+0x698>
        TCP_REG(&tcp_tw_pcbs, pcb);
      } else {
        tcp_ack_now(pcb);
        pcb->state = CLOSING;
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
    55fe:	4b19      	ldr	r3, [pc, #100]	; (5664 <tcp_process+0x54c>)
    5600:	781b      	ldrb	r3, [r3, #0]
    5602:	f003 0310 	and.w	r3, r3, #16
    5606:	2b00      	cmp	r3, #0
    5608:	f000 80d2 	beq.w	57b0 <tcp_process+0x698>
    560c:	687b      	ldr	r3, [r7, #4]
    560e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    5610:	4b15      	ldr	r3, [pc, #84]	; (5668 <tcp_process+0x550>)
    5612:	681b      	ldr	r3, [r3, #0]
    5614:	429a      	cmp	r2, r3
    5616:	f040 80cb 	bne.w	57b0 <tcp_process+0x698>
      pcb->state = FIN_WAIT_2;
    561a:	687b      	ldr	r3, [r7, #4]
    561c:	2206      	movs	r2, #6
    561e:	741a      	strb	r2, [r3, #16]
    }
    break;
    5620:	e0c6      	b.n	57b0 <tcp_process+0x698>
  case FIN_WAIT_2:
    tcp_receive(pcb);
    5622:	6878      	ldr	r0, [r7, #4]
    5624:	f000 f952 	bl	58cc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
    5628:	4b10      	ldr	r3, [pc, #64]	; (566c <tcp_process+0x554>)
    562a:	781b      	ldrb	r3, [r3, #0]
    562c:	f003 0320 	and.w	r3, r3, #32
    5630:	2b00      	cmp	r3, #0
    5632:	f000 80bf 	beq.w	57b4 <tcp_process+0x69c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
    5636:	687b      	ldr	r3, [r7, #4]
    5638:	f893 3020 	ldrb.w	r3, [r3, #32]
    563c:	f043 0302 	orr.w	r3, r3, #2
    5640:	b2da      	uxtb	r2, r3
    5642:	687b      	ldr	r3, [r7, #4]
    5644:	f883 2020 	strb.w	r2, [r3, #32]
      tcp_pcb_purge(pcb);
    5648:	6878      	ldr	r0, [r7, #4]
    564a:	f7fe f943 	bl	38d4 <tcp_pcb_purge>
      TCP_RMV(&tcp_active_pcbs, pcb);
    564e:	4b0d      	ldr	r3, [pc, #52]	; (5684 <tcp_process+0x56c>)
    5650:	681a      	ldr	r2, [r3, #0]
    5652:	687b      	ldr	r3, [r7, #4]
    5654:	429a      	cmp	r2, r3
    5656:	d11b      	bne.n	5690 <tcp_process+0x578>
    5658:	4b0a      	ldr	r3, [pc, #40]	; (5684 <tcp_process+0x56c>)
    565a:	681b      	ldr	r3, [r3, #0]
    565c:	68db      	ldr	r3, [r3, #12]
    565e:	4a09      	ldr	r2, [pc, #36]	; (5684 <tcp_process+0x56c>)
    5660:	6013      	str	r3, [r2, #0]
    5662:	e02f      	b.n	56c4 <tcp_process+0x5ac>
    5664:	10001210 	.word	0x10001210
    5668:	1000120c 	.word	0x1000120c
    566c:	10001214 	.word	0x10001214
    5670:	10001212 	.word	0x10001212
    5674:	10001208 	.word	0x10001208
    5678:	10001200 	.word	0x10001200
    567c:	10001a98 	.word	0x10001a98
    5680:	10001aa0 	.word	0x10001aa0
    5684:	10001960 	.word	0x10001960
    5688:	1000196c 	.word	0x1000196c
    568c:	10001974 	.word	0x10001974
    5690:	4b4d      	ldr	r3, [pc, #308]	; (57c8 <tcp_process+0x6b0>)
    5692:	681b      	ldr	r3, [r3, #0]
    5694:	4a4d      	ldr	r2, [pc, #308]	; (57cc <tcp_process+0x6b4>)
    5696:	6013      	str	r3, [r2, #0]
    5698:	e010      	b.n	56bc <tcp_process+0x5a4>
    569a:	4b4c      	ldr	r3, [pc, #304]	; (57cc <tcp_process+0x6b4>)
    569c:	681b      	ldr	r3, [r3, #0]
    569e:	68da      	ldr	r2, [r3, #12]
    56a0:	687b      	ldr	r3, [r7, #4]
    56a2:	429a      	cmp	r2, r3
    56a4:	d105      	bne.n	56b2 <tcp_process+0x59a>
    56a6:	4b49      	ldr	r3, [pc, #292]	; (57cc <tcp_process+0x6b4>)
    56a8:	681b      	ldr	r3, [r3, #0]
    56aa:	687a      	ldr	r2, [r7, #4]
    56ac:	68d2      	ldr	r2, [r2, #12]
    56ae:	60da      	str	r2, [r3, #12]
    56b0:	e008      	b.n	56c4 <tcp_process+0x5ac>
    56b2:	4b46      	ldr	r3, [pc, #280]	; (57cc <tcp_process+0x6b4>)
    56b4:	681b      	ldr	r3, [r3, #0]
    56b6:	68db      	ldr	r3, [r3, #12]
    56b8:	4a44      	ldr	r2, [pc, #272]	; (57cc <tcp_process+0x6b4>)
    56ba:	6013      	str	r3, [r2, #0]
    56bc:	4b43      	ldr	r3, [pc, #268]	; (57cc <tcp_process+0x6b4>)
    56be:	681b      	ldr	r3, [r3, #0]
    56c0:	2b00      	cmp	r3, #0
    56c2:	d1ea      	bne.n	569a <tcp_process+0x582>
    56c4:	687b      	ldr	r3, [r7, #4]
    56c6:	2200      	movs	r2, #0
    56c8:	60da      	str	r2, [r3, #12]
      pcb->state = TIME_WAIT;
    56ca:	687b      	ldr	r3, [r7, #4]
    56cc:	220a      	movs	r2, #10
    56ce:	741a      	strb	r2, [r3, #16]
      TCP_REG(&tcp_tw_pcbs, pcb);
    56d0:	4b3f      	ldr	r3, [pc, #252]	; (57d0 <tcp_process+0x6b8>)
    56d2:	681a      	ldr	r2, [r3, #0]
    56d4:	687b      	ldr	r3, [r7, #4]
    56d6:	60da      	str	r2, [r3, #12]
    56d8:	4a3d      	ldr	r2, [pc, #244]	; (57d0 <tcp_process+0x6b8>)
    56da:	687b      	ldr	r3, [r7, #4]
    56dc:	6013      	str	r3, [r2, #0]
    56de:	f001 fc6b 	bl	6fb8 <tcp_timer_needed>
    }
    break;
    56e2:	e067      	b.n	57b4 <tcp_process+0x69c>
  case CLOSING:
    tcp_receive(pcb);
    56e4:	6878      	ldr	r0, [r7, #4]
    56e6:	f000 f8f1 	bl	58cc <tcp_receive>
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
    56ea:	4b3a      	ldr	r3, [pc, #232]	; (57d4 <tcp_process+0x6bc>)
    56ec:	781b      	ldrb	r3, [r3, #0]
    56ee:	f003 0310 	and.w	r3, r3, #16
    56f2:	2b00      	cmp	r3, #0
    56f4:	d060      	beq.n	57b8 <tcp_process+0x6a0>
    56f6:	687b      	ldr	r3, [r7, #4]
    56f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    56fa:	4b37      	ldr	r3, [pc, #220]	; (57d8 <tcp_process+0x6c0>)
    56fc:	681b      	ldr	r3, [r3, #0]
    56fe:	429a      	cmp	r2, r3
    5700:	d15a      	bne.n	57b8 <tcp_process+0x6a0>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
    5702:	6878      	ldr	r0, [r7, #4]
    5704:	f7fe f8e6 	bl	38d4 <tcp_pcb_purge>
      TCP_RMV(&tcp_active_pcbs, pcb);
    5708:	4b2f      	ldr	r3, [pc, #188]	; (57c8 <tcp_process+0x6b0>)
    570a:	681a      	ldr	r2, [r3, #0]
    570c:	687b      	ldr	r3, [r7, #4]
    570e:	429a      	cmp	r2, r3
    5710:	d105      	bne.n	571e <tcp_process+0x606>
    5712:	4b2d      	ldr	r3, [pc, #180]	; (57c8 <tcp_process+0x6b0>)
    5714:	681b      	ldr	r3, [r3, #0]
    5716:	68db      	ldr	r3, [r3, #12]
    5718:	4a2b      	ldr	r2, [pc, #172]	; (57c8 <tcp_process+0x6b0>)
    571a:	6013      	str	r3, [r2, #0]
    571c:	e019      	b.n	5752 <tcp_process+0x63a>
    571e:	4b2a      	ldr	r3, [pc, #168]	; (57c8 <tcp_process+0x6b0>)
    5720:	681b      	ldr	r3, [r3, #0]
    5722:	4a2a      	ldr	r2, [pc, #168]	; (57cc <tcp_process+0x6b4>)
    5724:	6013      	str	r3, [r2, #0]
    5726:	e010      	b.n	574a <tcp_process+0x632>
    5728:	4b28      	ldr	r3, [pc, #160]	; (57cc <tcp_process+0x6b4>)
    572a:	681b      	ldr	r3, [r3, #0]
    572c:	68da      	ldr	r2, [r3, #12]
    572e:	687b      	ldr	r3, [r7, #4]
    5730:	429a      	cmp	r2, r3
    5732:	d105      	bne.n	5740 <tcp_process+0x628>
    5734:	4b25      	ldr	r3, [pc, #148]	; (57cc <tcp_process+0x6b4>)
    5736:	681b      	ldr	r3, [r3, #0]
    5738:	687a      	ldr	r2, [r7, #4]
    573a:	68d2      	ldr	r2, [r2, #12]
    573c:	60da      	str	r2, [r3, #12]
    573e:	e008      	b.n	5752 <tcp_process+0x63a>
    5740:	4b22      	ldr	r3, [pc, #136]	; (57cc <tcp_process+0x6b4>)
    5742:	681b      	ldr	r3, [r3, #0]
    5744:	68db      	ldr	r3, [r3, #12]
    5746:	4a21      	ldr	r2, [pc, #132]	; (57cc <tcp_process+0x6b4>)
    5748:	6013      	str	r3, [r2, #0]
    574a:	4b20      	ldr	r3, [pc, #128]	; (57cc <tcp_process+0x6b4>)
    574c:	681b      	ldr	r3, [r3, #0]
    574e:	2b00      	cmp	r3, #0
    5750:	d1ea      	bne.n	5728 <tcp_process+0x610>
    5752:	687b      	ldr	r3, [r7, #4]
    5754:	2200      	movs	r2, #0
    5756:	60da      	str	r2, [r3, #12]
      pcb->state = TIME_WAIT;
    5758:	687b      	ldr	r3, [r7, #4]
    575a:	220a      	movs	r2, #10
    575c:	741a      	strb	r2, [r3, #16]
      TCP_REG(&tcp_tw_pcbs, pcb);
    575e:	4b1c      	ldr	r3, [pc, #112]	; (57d0 <tcp_process+0x6b8>)
    5760:	681a      	ldr	r2, [r3, #0]
    5762:	687b      	ldr	r3, [r7, #4]
    5764:	60da      	str	r2, [r3, #12]
    5766:	4a1a      	ldr	r2, [pc, #104]	; (57d0 <tcp_process+0x6b8>)
    5768:	687b      	ldr	r3, [r7, #4]
    576a:	6013      	str	r3, [r2, #0]
    576c:	f001 fc24 	bl	6fb8 <tcp_timer_needed>
    }
    break;
    5770:	e022      	b.n	57b8 <tcp_process+0x6a0>
  case LAST_ACK:
    tcp_receive(pcb);
    5772:	6878      	ldr	r0, [r7, #4]
    5774:	f000 f8aa 	bl	58cc <tcp_receive>
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
    5778:	4b16      	ldr	r3, [pc, #88]	; (57d4 <tcp_process+0x6bc>)
    577a:	781b      	ldrb	r3, [r3, #0]
    577c:	f003 0310 	and.w	r3, r3, #16
    5780:	2b00      	cmp	r3, #0
    5782:	d01b      	beq.n	57bc <tcp_process+0x6a4>
    5784:	687b      	ldr	r3, [r7, #4]
    5786:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    5788:	4b13      	ldr	r3, [pc, #76]	; (57d8 <tcp_process+0x6c0>)
    578a:	681b      	ldr	r3, [r3, #0]
    578c:	429a      	cmp	r2, r3
    578e:	d115      	bne.n	57bc <tcp_process+0x6a4>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
    5790:	4b12      	ldr	r3, [pc, #72]	; (57dc <tcp_process+0x6c4>)
    5792:	781b      	ldrb	r3, [r3, #0]
    5794:	f043 0310 	orr.w	r3, r3, #16
    5798:	b2da      	uxtb	r2, r3
    579a:	4b10      	ldr	r3, [pc, #64]	; (57dc <tcp_process+0x6c4>)
    579c:	701a      	strb	r2, [r3, #0]
    }
    break;
    579e:	e00d      	b.n	57bc <tcp_process+0x6a4>
  default:
    break;
    57a0:	bf00      	nop
    57a2:	e00c      	b.n	57be <tcp_process+0x6a6>
    else if (flags & TCP_ACK) {
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
    }
    break;
    57a4:	bf00      	nop
    57a6:	e00a      	b.n	57be <tcp_process+0x6a6>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
    57a8:	bf00      	nop
    57aa:	e008      	b.n	57be <tcp_process+0x6a6>
    tcp_receive(pcb);
    if (recv_flags & TF_GOT_FIN) { /* passive close */
      tcp_ack_now(pcb);
      pcb->state = CLOSE_WAIT;
    }
    break;
    57ac:	bf00      	nop
    57ae:	e006      	b.n	57be <tcp_process+0x6a6>
        pcb->state = CLOSING;
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
      pcb->state = FIN_WAIT_2;
    }
    break;
    57b0:	bf00      	nop
    57b2:	e004      	b.n	57be <tcp_process+0x6a6>
      tcp_pcb_purge(pcb);
      TCP_RMV(&tcp_active_pcbs, pcb);
      pcb->state = TIME_WAIT;
      TCP_REG(&tcp_tw_pcbs, pcb);
    }
    break;
    57b4:	bf00      	nop
    57b6:	e002      	b.n	57be <tcp_process+0x6a6>
      tcp_pcb_purge(pcb);
      TCP_RMV(&tcp_active_pcbs, pcb);
      pcb->state = TIME_WAIT;
      TCP_REG(&tcp_tw_pcbs, pcb);
    }
    break;
    57b8:	bf00      	nop
    57ba:	e000      	b.n	57be <tcp_process+0x6a6>
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
    }
    break;
    57bc:	bf00      	nop
  default:
    break;
  }
  return ERR_OK;
    57be:	2300      	movs	r3, #0
}
    57c0:	4618      	mov	r0, r3
    57c2:	3718      	adds	r7, #24
    57c4:	46bd      	mov	sp, r7
    57c6:	bd80      	pop	{r7, pc}
    57c8:	10001960 	.word	0x10001960
    57cc:	1000196c 	.word	0x1000196c
    57d0:	10001974 	.word	0x10001974
    57d4:	10001210 	.word	0x10001210
    57d8:	1000120c 	.word	0x1000120c
    57dc:	10001214 	.word	0x10001214

000057e0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
    57e0:	b5b0      	push	{r4, r5, r7, lr}
    57e2:	b084      	sub	sp, #16
    57e4:	af00      	add	r7, sp, #0
    57e6:	6078      	str	r0, [r7, #4]
    57e8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
    57ea:	687b      	ldr	r3, [r7, #4]
    57ec:	68db      	ldr	r3, [r3, #12]
    57ee:	899b      	ldrh	r3, [r3, #12]
    57f0:	b29b      	uxth	r3, r3
    57f2:	4618      	mov	r0, r3
    57f4:	f001 fc84 	bl	7100 <lwip_ntohs>
    57f8:	4603      	mov	r3, r0
    57fa:	f003 0301 	and.w	r3, r3, #1
    57fe:	2b00      	cmp	r3, #0
    5800:	d026      	beq.n	5850 <tcp_oos_insert_segment+0x70>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
    5802:	6838      	ldr	r0, [r7, #0]
    5804:	f7fd fe8c 	bl	3520 <tcp_segs_free>
    next = NULL;
    5808:	2300      	movs	r3, #0
    580a:	603b      	str	r3, [r7, #0]
    580c:	e054      	b.n	58b8 <tcp_oos_insert_segment+0xd8>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
    580e:	683b      	ldr	r3, [r7, #0]
    5810:	68db      	ldr	r3, [r3, #12]
    5812:	899b      	ldrh	r3, [r3, #12]
    5814:	b29b      	uxth	r3, r3
    5816:	4618      	mov	r0, r3
    5818:	f001 fc72 	bl	7100 <lwip_ntohs>
    581c:	4603      	mov	r3, r0
    581e:	f003 0301 	and.w	r3, r3, #1
    5822:	2b00      	cmp	r3, #0
    5824:	d00c      	beq.n	5840 <tcp_oos_insert_segment+0x60>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
    5826:	687b      	ldr	r3, [r7, #4]
    5828:	68dc      	ldr	r4, [r3, #12]
    582a:	687b      	ldr	r3, [r7, #4]
    582c:	68db      	ldr	r3, [r3, #12]
    582e:	899b      	ldrh	r3, [r3, #12]
    5830:	b29d      	uxth	r5, r3
    5832:	2001      	movs	r0, #1
    5834:	f001 fc50 	bl	70d8 <lwip_htons>
    5838:	4603      	mov	r3, r0
    583a:	432b      	orrs	r3, r5
    583c:	b29b      	uxth	r3, r3
    583e:	81a3      	strh	r3, [r4, #12]
      }
      old_seg = next;
    5840:	683b      	ldr	r3, [r7, #0]
    5842:	60fb      	str	r3, [r7, #12]
      next = next->next;
    5844:	683b      	ldr	r3, [r7, #0]
    5846:	681b      	ldr	r3, [r3, #0]
    5848:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
    584a:	68f8      	ldr	r0, [r7, #12]
    584c:	f7fd fe7c 	bl	3548 <tcp_seg_free>
    next = NULL;
  }
  else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
    5850:	683b      	ldr	r3, [r7, #0]
    5852:	2b00      	cmp	r3, #0
    5854:	d00e      	beq.n	5874 <tcp_oos_insert_segment+0x94>
           TCP_SEQ_GEQ((seqno + cseg->len),
    5856:	687b      	ldr	r3, [r7, #4]
    5858:	891b      	ldrh	r3, [r3, #8]
    585a:	461a      	mov	r2, r3
    585c:	4b1a      	ldr	r3, [pc, #104]	; (58c8 <tcp_oos_insert_segment+0xe8>)
    585e:	681b      	ldr	r3, [r3, #0]
    5860:	441a      	add	r2, r3
    5862:	683b      	ldr	r3, [r7, #0]
    5864:	68db      	ldr	r3, [r3, #12]
    5866:	685b      	ldr	r3, [r3, #4]
    5868:	6839      	ldr	r1, [r7, #0]
    586a:	8909      	ldrh	r1, [r1, #8]
    586c:	440b      	add	r3, r1
    586e:	1ad3      	subs	r3, r2, r3
    next = NULL;
  }
  else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
    5870:	2b00      	cmp	r3, #0
    5872:	dacc      	bge.n	580e <tcp_oos_insert_segment+0x2e>
      }
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
    5874:	683b      	ldr	r3, [r7, #0]
    5876:	2b00      	cmp	r3, #0
    5878:	d01e      	beq.n	58b8 <tcp_oos_insert_segment+0xd8>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
    587a:	687b      	ldr	r3, [r7, #4]
    587c:	891b      	ldrh	r3, [r3, #8]
    587e:	461a      	mov	r2, r3
    5880:	4b11      	ldr	r3, [pc, #68]	; (58c8 <tcp_oos_insert_segment+0xe8>)
    5882:	681b      	ldr	r3, [r3, #0]
    5884:	441a      	add	r2, r3
    5886:	683b      	ldr	r3, [r7, #0]
    5888:	68db      	ldr	r3, [r3, #12]
    588a:	685b      	ldr	r3, [r3, #4]
    588c:	1ad3      	subs	r3, r2, r3
      }
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
    588e:	2b00      	cmp	r3, #0
    5890:	dd12      	ble.n	58b8 <tcp_oos_insert_segment+0xd8>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
    5892:	683b      	ldr	r3, [r7, #0]
    5894:	68db      	ldr	r3, [r3, #12]
    5896:	685b      	ldr	r3, [r3, #4]
    5898:	b29a      	uxth	r2, r3
    589a:	4b0b      	ldr	r3, [pc, #44]	; (58c8 <tcp_oos_insert_segment+0xe8>)
    589c:	681b      	ldr	r3, [r3, #0]
    589e:	b29b      	uxth	r3, r3
    58a0:	1ad3      	subs	r3, r2, r3
    58a2:	b29a      	uxth	r2, r3
    58a4:	687b      	ldr	r3, [r7, #4]
    58a6:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
    58a8:	687b      	ldr	r3, [r7, #4]
    58aa:	685a      	ldr	r2, [r3, #4]
    58ac:	687b      	ldr	r3, [r7, #4]
    58ae:	891b      	ldrh	r3, [r3, #8]
    58b0:	4619      	mov	r1, r3
    58b2:	4610      	mov	r0, r2
    58b4:	f001 f8f4 	bl	6aa0 <pbuf_realloc>
    }
  }
  cseg->next = next;
    58b8:	687b      	ldr	r3, [r7, #4]
    58ba:	683a      	ldr	r2, [r7, #0]
    58bc:	601a      	str	r2, [r3, #0]
}
    58be:	bf00      	nop
    58c0:	3710      	adds	r7, #16
    58c2:	46bd      	mov	sp, r7
    58c4:	bdb0      	pop	{r4, r5, r7, pc}
    58c6:	bf00      	nop
    58c8:	10001208 	.word	0x10001208

000058cc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
    58cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    58ce:	b08d      	sub	sp, #52	; 0x34
    58d0:	af00      	add	r7, sp, #0
    58d2:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
    58d4:	2300      	movs	r3, #0
    58d6:	61bb      	str	r3, [r7, #24]

  if (flags & TCP_ACK) {
    58d8:	4ba5      	ldr	r3, [pc, #660]	; (5b70 <tcp_receive+0x2a4>)
    58da:	781b      	ldrb	r3, [r3, #0]
    58dc:	f003 0310 	and.w	r3, r3, #16
    58e0:	2b00      	cmp	r3, #0
    58e2:	f000 8295 	beq.w	5e10 <tcp_receive+0x544>
	  //If there is an ACK flag.
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
    58e6:	687b      	ldr	r3, [r7, #4]
    58e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
    58ec:	461a      	mov	r2, r3
    58ee:	687b      	ldr	r3, [r7, #4]
    58f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    58f2:	4413      	add	r3, r2
    58f4:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
    58f6:	687b      	ldr	r3, [r7, #4]
    58f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    58fa:	4b9e      	ldr	r3, [pc, #632]	; (5b74 <tcp_receive+0x2a8>)
    58fc:	681b      	ldr	r3, [r3, #0]
    58fe:	1ad3      	subs	r3, r2, r3
    5900:	2b00      	cmp	r3, #0
    5902:	db1b      	blt.n	593c <tcp_receive+0x70>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
    5904:	687b      	ldr	r3, [r7, #4]
    5906:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    5908:	4b9a      	ldr	r3, [pc, #616]	; (5b74 <tcp_receive+0x2a8>)
    590a:	681b      	ldr	r3, [r3, #0]
  if (flags & TCP_ACK) {
	  //If there is an ACK flag.
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
    590c:	429a      	cmp	r2, r3
    590e:	d106      	bne.n	591e <tcp_receive+0x52>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
    5910:	687b      	ldr	r3, [r7, #4]
    5912:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5914:	4b98      	ldr	r3, [pc, #608]	; (5b78 <tcp_receive+0x2ac>)
    5916:	681b      	ldr	r3, [r3, #0]
    5918:	1ad3      	subs	r3, r2, r3
    591a:	2b00      	cmp	r3, #0
    591c:	db0e      	blt.n	593c <tcp_receive+0x70>
       (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
    591e:	687b      	ldr	r3, [r7, #4]
    5920:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5922:	4b95      	ldr	r3, [pc, #596]	; (5b78 <tcp_receive+0x2ac>)
    5924:	681b      	ldr	r3, [r3, #0]
	  //If there is an ACK flag.
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
    5926:	429a      	cmp	r2, r3
    5928:	d125      	bne.n	5976 <tcp_receive+0xaa>
       (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
    592a:	4b94      	ldr	r3, [pc, #592]	; (5b7c <tcp_receive+0x2b0>)
    592c:	681b      	ldr	r3, [r3, #0]
    592e:	89db      	ldrh	r3, [r3, #14]
    5930:	b29a      	uxth	r2, r3
    5932:	687b      	ldr	r3, [r7, #4]
    5934:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
    5938:	429a      	cmp	r2, r3
    593a:	d91c      	bls.n	5976 <tcp_receive+0xaa>
      pcb->snd_wnd = tcphdr->wnd;
    593c:	4b8f      	ldr	r3, [pc, #572]	; (5b7c <tcp_receive+0x2b0>)
    593e:	681b      	ldr	r3, [r3, #0]
    5940:	89db      	ldrh	r3, [r3, #14]
    5942:	b29a      	uxth	r2, r3
    5944:	687b      	ldr	r3, [r7, #4]
    5946:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wl1 = seqno;
    594a:	4b8a      	ldr	r3, [pc, #552]	; (5b74 <tcp_receive+0x2a8>)
    594c:	681a      	ldr	r2, [r3, #0]
    594e:	687b      	ldr	r3, [r7, #4]
    5950:	661a      	str	r2, [r3, #96]	; 0x60
      pcb->snd_wl2 = ackno;
    5952:	4b89      	ldr	r3, [pc, #548]	; (5b78 <tcp_receive+0x2ac>)
    5954:	681a      	ldr	r2, [r3, #0]
    5956:	687b      	ldr	r3, [r7, #4]
    5958:	665a      	str	r2, [r3, #100]	; 0x64
      if (pcb->snd_wnd > 0 && pcb->persist_backoff > 0) {
    595a:	687b      	ldr	r3, [r7, #4]
    595c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
    5960:	2b00      	cmp	r3, #0
    5962:	d008      	beq.n	5976 <tcp_receive+0xaa>
    5964:	687b      	ldr	r3, [r7, #4]
    5966:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    596a:	2b00      	cmp	r3, #0
    596c:	d003      	beq.n	5976 <tcp_receive+0xaa>
          pcb->persist_backoff = 0;
    596e:	687b      	ldr	r3, [r7, #4]
    5970:	2200      	movs	r2, #0
    5972:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
    5976:	4b80      	ldr	r3, [pc, #512]	; (5b78 <tcp_receive+0x2ac>)
    5978:	681a      	ldr	r2, [r3, #0]
    597a:	687b      	ldr	r3, [r7, #4]
    597c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    597e:	1ad3      	subs	r3, r2, r3
    5980:	2b00      	cmp	r3, #0
    5982:	dc5b      	bgt.n	5a3c <tcp_receive+0x170>
      pcb->acked = 0;
    5984:	687b      	ldr	r3, [r7, #4]
    5986:	2200      	movs	r2, #0
    5988:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
      /* Clause 2 */
      if (tcplen == 0) {
    598c:	4b7c      	ldr	r3, [pc, #496]	; (5b80 <tcp_receive+0x2b4>)
    598e:	881b      	ldrh	r3, [r3, #0]
    5990:	2b00      	cmp	r3, #0
    5992:	d14a      	bne.n	5a2a <tcp_receive+0x15e>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge){
    5994:	687b      	ldr	r3, [r7, #4]
    5996:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    5998:	687a      	ldr	r2, [r7, #4]
    599a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
    599e:	441a      	add	r2, r3
    59a0:	697b      	ldr	r3, [r7, #20]
    59a2:	429a      	cmp	r2, r3
    59a4:	d141      	bne.n	5a2a <tcp_receive+0x15e>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
    59a6:	687b      	ldr	r3, [r7, #4]
    59a8:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
    59ac:	2b00      	cmp	r3, #0
    59ae:	db3c      	blt.n	5a2a <tcp_receive+0x15e>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
    59b0:	687b      	ldr	r3, [r7, #4]
    59b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    59b4:	4b70      	ldr	r3, [pc, #448]	; (5b78 <tcp_receive+0x2ac>)
    59b6:	681b      	ldr	r3, [r3, #0]
    59b8:	429a      	cmp	r2, r3
    59ba:	d136      	bne.n	5a2a <tcp_receive+0x15e>
              found_dupack = 1;
    59bc:	2301      	movs	r3, #1
    59be:	61bb      	str	r3, [r7, #24]
              if (pcb->dupacks + 1 > pcb->dupacks)
    59c0:	687b      	ldr	r3, [r7, #4]
    59c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    59c6:	3301      	adds	r3, #1
    59c8:	687a      	ldr	r2, [r7, #4]
    59ca:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
    59ce:	4293      	cmp	r3, r2
    59d0:	dd07      	ble.n	59e2 <tcp_receive+0x116>
                ++pcb->dupacks;
    59d2:	687b      	ldr	r3, [r7, #4]
    59d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    59d8:	3301      	adds	r3, #1
    59da:	b2da      	uxtb	r2, r3
    59dc:	687b      	ldr	r3, [r7, #4]
    59de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
              if (pcb->dupacks > 3) {
    59e2:	687b      	ldr	r3, [r7, #4]
    59e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    59e8:	2b03      	cmp	r3, #3
    59ea:	d916      	bls.n	5a1a <tcp_receive+0x14e>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
    59ec:	687b      	ldr	r3, [r7, #4]
    59ee:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
    59f2:	687b      	ldr	r3, [r7, #4]
    59f4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    59f6:	4413      	add	r3, r2
    59f8:	b29a      	uxth	r2, r3
    59fa:	687b      	ldr	r3, [r7, #4]
    59fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
    5a00:	429a      	cmp	r2, r3
    5a02:	d912      	bls.n	5a2a <tcp_receive+0x15e>
                  pcb->cwnd += pcb->mss;
    5a04:	687b      	ldr	r3, [r7, #4]
    5a06:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
    5a0a:	687b      	ldr	r3, [r7, #4]
    5a0c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    5a0e:	4413      	add	r3, r2
    5a10:	b29a      	uxth	r2, r3
    5a12:	687b      	ldr	r3, [r7, #4]
    5a14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    5a18:	e007      	b.n	5a2a <tcp_receive+0x15e>
                }
              } else if (pcb->dupacks == 3) {
    5a1a:	687b      	ldr	r3, [r7, #4]
    5a1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    5a20:	2b03      	cmp	r3, #3
    5a22:	d102      	bne.n	5a2a <tcp_receive+0x15e>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
    5a24:	6878      	ldr	r0, [r7, #4]
    5a26:	f7fe fda1 	bl	456c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
    5a2a:	69bb      	ldr	r3, [r7, #24]
    5a2c:	2b00      	cmp	r3, #0
    5a2e:	f040 8168 	bne.w	5d02 <tcp_receive+0x436>
        pcb->dupacks = 0;
    5a32:	687b      	ldr	r3, [r7, #4]
    5a34:	2200      	movs	r2, #0
    5a36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    5a3a:	e162      	b.n	5d02 <tcp_receive+0x436>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)){
    5a3c:	4b4e      	ldr	r3, [pc, #312]	; (5b78 <tcp_receive+0x2ac>)
    5a3e:	681a      	ldr	r2, [r3, #0]
    5a40:	687b      	ldr	r3, [r7, #4]
    5a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5a44:	1ad3      	subs	r3, r2, r3
    5a46:	3b01      	subs	r3, #1
    5a48:	2b00      	cmp	r3, #0
    5a4a:	f2c0 8114 	blt.w	5c76 <tcp_receive+0x3aa>
    5a4e:	4b4a      	ldr	r3, [pc, #296]	; (5b78 <tcp_receive+0x2ac>)
    5a50:	681a      	ldr	r2, [r3, #0]
    5a52:	687b      	ldr	r3, [r7, #4]
    5a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    5a56:	1ad3      	subs	r3, r2, r3
    5a58:	2b00      	cmp	r3, #0
    5a5a:	f300 810c 	bgt.w	5c76 <tcp_receive+0x3aa>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
    5a5e:	687b      	ldr	r3, [r7, #4]
    5a60:	f893 3020 	ldrb.w	r3, [r3, #32]
    5a64:	f003 0304 	and.w	r3, r3, #4
    5a68:	2b00      	cmp	r3, #0
    5a6a:	d00e      	beq.n	5a8a <tcp_receive+0x1be>
        pcb->flags &= ~TF_INFR;
    5a6c:	687b      	ldr	r3, [r7, #4]
    5a6e:	f893 3020 	ldrb.w	r3, [r3, #32]
    5a72:	f023 0304 	bic.w	r3, r3, #4
    5a76:	b2da      	uxtb	r2, r3
    5a78:	687b      	ldr	r3, [r7, #4]
    5a7a:	f883 2020 	strb.w	r2, [r3, #32]
        pcb->cwnd = pcb->ssthresh;
    5a7e:	687b      	ldr	r3, [r7, #4]
    5a80:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
    5a84:	687b      	ldr	r3, [r7, #4]
    5a86:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
    5a8a:	687b      	ldr	r3, [r7, #4]
    5a8c:	2200      	movs	r2, #0
    5a8e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
    5a92:	687b      	ldr	r3, [r7, #4]
    5a94:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
    5a98:	10db      	asrs	r3, r3, #3
    5a9a:	b21b      	sxth	r3, r3
    5a9c:	b29a      	uxth	r2, r3
    5a9e:	687b      	ldr	r3, [r7, #4]
    5aa0:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
    5aa4:	b29b      	uxth	r3, r3
    5aa6:	4413      	add	r3, r2
    5aa8:	b29b      	uxth	r3, r3
    5aaa:	b21a      	sxth	r2, r3
    5aac:	687b      	ldr	r3, [r7, #4]
    5aae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

      /* Update the send buffer space. Diff between the two can never exceed 64K? */
      pcb->acked = (u16_t)(ackno - pcb->lastack);
    5ab2:	4b31      	ldr	r3, [pc, #196]	; (5b78 <tcp_receive+0x2ac>)
    5ab4:	681b      	ldr	r3, [r3, #0]
    5ab6:	b29a      	uxth	r2, r3
    5ab8:	687b      	ldr	r3, [r7, #4]
    5aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5abc:	b29b      	uxth	r3, r3
    5abe:	1ad3      	subs	r3, r2, r3
    5ac0:	b29a      	uxth	r2, r3
    5ac2:	687b      	ldr	r3, [r7, #4]
    5ac4:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

      pcb->snd_buf += pcb->acked;
    5ac8:	687b      	ldr	r3, [r7, #4]
    5aca:	f8b3 206e 	ldrh.w	r2, [r3, #110]	; 0x6e
    5ace:	687b      	ldr	r3, [r7, #4]
    5ad0:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
    5ad4:	4413      	add	r3, r2
    5ad6:	b29a      	uxth	r2, r3
    5ad8:	687b      	ldr	r3, [r7, #4]
    5ada:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
    5ade:	687b      	ldr	r3, [r7, #4]
    5ae0:	2200      	movs	r2, #0
    5ae2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      pcb->lastack = ackno;
    5ae6:	4b24      	ldr	r3, [pc, #144]	; (5b78 <tcp_receive+0x2ac>)
    5ae8:	681a      	ldr	r2, [r3, #0]
    5aea:	687b      	ldr	r3, [r7, #4]
    5aec:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
    5aee:	687b      	ldr	r3, [r7, #4]
    5af0:	7c1b      	ldrb	r3, [r3, #16]
    5af2:	2b03      	cmp	r3, #3
    5af4:	f240 8087 	bls.w	5c06 <tcp_receive+0x33a>
        if (pcb->cwnd < pcb->ssthresh) {
    5af8:	687b      	ldr	r3, [r7, #4]
    5afa:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
    5afe:	687b      	ldr	r3, [r7, #4]
    5b00:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
    5b04:	429a      	cmp	r2, r3
    5b06:	d216      	bcs.n	5b36 <tcp_receive+0x26a>
          if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
    5b08:	687b      	ldr	r3, [r7, #4]
    5b0a:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
    5b0e:	687b      	ldr	r3, [r7, #4]
    5b10:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    5b12:	4413      	add	r3, r2
    5b14:	b29a      	uxth	r2, r3
    5b16:	687b      	ldr	r3, [r7, #4]
    5b18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
    5b1c:	429a      	cmp	r2, r3
    5b1e:	d972      	bls.n	5c06 <tcp_receive+0x33a>
            pcb->cwnd += pcb->mss;
    5b20:	687b      	ldr	r3, [r7, #4]
    5b22:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
    5b26:	687b      	ldr	r3, [r7, #4]
    5b28:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    5b2a:	4413      	add	r3, r2
    5b2c:	b29a      	uxth	r2, r3
    5b2e:	687b      	ldr	r3, [r7, #4]
    5b30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    5b34:	e067      	b.n	5c06 <tcp_receive+0x33a>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"U16_F"\n", pcb->cwnd));
        } else {
          u16_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
    5b36:	687b      	ldr	r3, [r7, #4]
    5b38:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
    5b3c:	687b      	ldr	r3, [r7, #4]
    5b3e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    5b40:	4619      	mov	r1, r3
    5b42:	687b      	ldr	r3, [r7, #4]
    5b44:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    5b46:	fb03 f301 	mul.w	r3, r3, r1
    5b4a:	6879      	ldr	r1, [r7, #4]
    5b4c:	f8b1 1052 	ldrh.w	r1, [r1, #82]	; 0x52
    5b50:	fb93 f3f1 	sdiv	r3, r3, r1
    5b54:	b29b      	uxth	r3, r3
    5b56:	4413      	add	r3, r2
    5b58:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
    5b5a:	687b      	ldr	r3, [r7, #4]
    5b5c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
    5b60:	8a7a      	ldrh	r2, [r7, #18]
    5b62:	429a      	cmp	r2, r3
    5b64:	d94f      	bls.n	5c06 <tcp_receive+0x33a>
            pcb->cwnd = new_cwnd;
    5b66:	687b      	ldr	r3, [r7, #4]
    5b68:	8a7a      	ldrh	r2, [r7, #18]
    5b6a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
                                    pcb->unacked != NULL?
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowlegdes them. */
      while (pcb->unacked != NULL &&
    5b6e:	e04a      	b.n	5c06 <tcp_receive+0x33a>
    5b70:	10001210 	.word	0x10001210
    5b74:	10001208 	.word	0x10001208
    5b78:	1000120c 	.word	0x1000120c
    5b7c:	10001200 	.word	0x10001200
    5b80:	10001212 	.word	0x10001212
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      ntohl(pcb->unacked->tcphdr->seqno),
                                      ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
    5b84:	687b      	ldr	r3, [r7, #4]
    5b86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    5b88:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
    5b8a:	687b      	ldr	r3, [r7, #4]
    5b8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    5b8e:	681a      	ldr	r2, [r3, #0]
    5b90:	687b      	ldr	r3, [r7, #4]
    5b92:	679a      	str	r2, [r3, #120]	; 0x78

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"U16_F" ... ", (u16_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
    5b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5b96:	685b      	ldr	r3, [r3, #4]
    5b98:	4618      	mov	r0, r3
    5b9a:	f001 f8af 	bl	6cfc <pbuf_clen>
        /* Prevent ACK for FIN to generate a sent event */
        if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
    5b9e:	687b      	ldr	r3, [r7, #4]
    5ba0:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
    5ba4:	2b00      	cmp	r3, #0
    5ba6:	d013      	beq.n	5bd0 <tcp_receive+0x304>
    5ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5baa:	68db      	ldr	r3, [r3, #12]
    5bac:	899b      	ldrh	r3, [r3, #12]
    5bae:	b29b      	uxth	r3, r3
    5bb0:	4618      	mov	r0, r3
    5bb2:	f001 faa5 	bl	7100 <lwip_ntohs>
    5bb6:	4603      	mov	r3, r0
    5bb8:	f003 0301 	and.w	r3, r3, #1
    5bbc:	2b00      	cmp	r3, #0
    5bbe:	d007      	beq.n	5bd0 <tcp_receive+0x304>
          pcb->acked--;
    5bc0:	687b      	ldr	r3, [r7, #4]
    5bc2:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
    5bc6:	3b01      	subs	r3, #1
    5bc8:	b29a      	uxth	r2, r3
    5bca:	687b      	ldr	r3, [r7, #4]
    5bcc:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
        }

        pcb->snd_queuelen -= pbuf_clen(next->p);
    5bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5bd2:	685b      	ldr	r3, [r3, #4]
    5bd4:	4618      	mov	r0, r3
    5bd6:	f001 f891 	bl	6cfc <pbuf_clen>
    5bda:	4603      	mov	r3, r0
    5bdc:	4619      	mov	r1, r3
    5bde:	687b      	ldr	r3, [r7, #4]
    5be0:	f8b3 2070 	ldrh.w	r2, [r3, #112]	; 0x70
    5be4:	b28b      	uxth	r3, r1
    5be6:	1ad3      	subs	r3, r2, r3
    5be8:	b29a      	uxth	r2, r3
    5bea:	687b      	ldr	r3, [r7, #4]
    5bec:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
        tcp_seg_free(next);
    5bf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    5bf2:	f7fd fca9 	bl	3548 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"U16_F" (after freeing unacked)\n", (u16_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
    5bf6:	687b      	ldr	r3, [r7, #4]
    5bf8:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
    5bfc:	2b00      	cmp	r3, #0
    5bfe:	d002      	beq.n	5c06 <tcp_receive+0x33a>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
    5c00:	687b      	ldr	r3, [r7, #4]
    5c02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    5c04:	2b00      	cmp	r3, #0
                                    pcb->unacked != NULL?
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowlegdes them. */
      while (pcb->unacked != NULL &&
    5c06:	687b      	ldr	r3, [r7, #4]
    5c08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    5c0a:	2b00      	cmp	r3, #0
    5c0c:	d022      	beq.n	5c54 <tcp_receive+0x388>
             TCP_SEQ_LEQ(ntohl(pcb->unacked->tcphdr->seqno) +
    5c0e:	687b      	ldr	r3, [r7, #4]
    5c10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    5c12:	68db      	ldr	r3, [r3, #12]
    5c14:	685b      	ldr	r3, [r3, #4]
    5c16:	4618      	mov	r0, r3
    5c18:	f001 fa98 	bl	714c <lwip_ntohl>
    5c1c:	4604      	mov	r4, r0
    5c1e:	687b      	ldr	r3, [r7, #4]
    5c20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    5c22:	891b      	ldrh	r3, [r3, #8]
    5c24:	461d      	mov	r5, r3
    5c26:	687b      	ldr	r3, [r7, #4]
    5c28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    5c2a:	68db      	ldr	r3, [r3, #12]
    5c2c:	899b      	ldrh	r3, [r3, #12]
    5c2e:	b29b      	uxth	r3, r3
    5c30:	4618      	mov	r0, r3
    5c32:	f001 fa65 	bl	7100 <lwip_ntohs>
    5c36:	4603      	mov	r3, r0
    5c38:	f003 0303 	and.w	r3, r3, #3
    5c3c:	2b00      	cmp	r3, #0
    5c3e:	bf14      	ite	ne
    5c40:	2301      	movne	r3, #1
    5c42:	2300      	moveq	r3, #0
    5c44:	b2db      	uxtb	r3, r3
    5c46:	442b      	add	r3, r5
    5c48:	18e2      	adds	r2, r4, r3
    5c4a:	4b99      	ldr	r3, [pc, #612]	; (5eb0 <tcp_receive+0x5e4>)
    5c4c:	681b      	ldr	r3, [r3, #0]
    5c4e:	1ad3      	subs	r3, r2, r3
                                    pcb->unacked != NULL?
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowlegdes them. */
      while (pcb->unacked != NULL &&
    5c50:	2b00      	cmp	r3, #0
    5c52:	dd97      	ble.n	5b84 <tcp_receive+0x2b8>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if(pcb->unacked == NULL)
    5c54:	687b      	ldr	r3, [r7, #4]
    5c56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    5c58:	2b00      	cmp	r3, #0
    5c5a:	d104      	bne.n	5c66 <tcp_receive+0x39a>
        pcb->rtime = -1;
    5c5c:	687b      	ldr	r3, [r7, #4]
    5c5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    5c62:	86da      	strh	r2, [r3, #54]	; 0x36
    5c64:	e002      	b.n	5c6c <tcp_receive+0x3a0>
      else
        pcb->rtime = 0;
    5c66:	687b      	ldr	r3, [r7, #4]
    5c68:	2200      	movs	r2, #0
    5c6a:	86da      	strh	r2, [r3, #54]	; 0x36

      pcb->polltmr = 0;
    5c6c:	687b      	ldr	r3, [r7, #4]
    5c6e:	2200      	movs	r2, #0
    5c70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    5c74:	e003      	b.n	5c7e <tcp_receive+0x3b2>
    } else {
      /* Fix bug bug #21582: out of sequence ACK, didn't really ack anything */
      pcb->acked = 0;
    5c76:	687b      	ldr	r3, [r7, #4]
    5c78:	2200      	movs	r2, #0
    5c7a:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
    5c7e:	e040      	b.n	5d02 <tcp_receive+0x436>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    ntohl(pcb->unsent->tcphdr->seqno), ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
    5c80:	687b      	ldr	r3, [r7, #4]
    5c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    5c84:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
    5c86:	687b      	ldr	r3, [r7, #4]
    5c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    5c8a:	681a      	ldr	r2, [r3, #0]
    5c8c:	687b      	ldr	r3, [r7, #4]
    5c8e:	675a      	str	r2, [r3, #116]	; 0x74
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"U16_F" ... ", (u16_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
    5c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5c92:	685b      	ldr	r3, [r3, #4]
    5c94:	4618      	mov	r0, r3
    5c96:	f001 f831 	bl	6cfc <pbuf_clen>
      /* Prevent ACK for FIN to generate a sent event */
      if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
    5c9a:	687b      	ldr	r3, [r7, #4]
    5c9c:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
    5ca0:	2b00      	cmp	r3, #0
    5ca2:	d013      	beq.n	5ccc <tcp_receive+0x400>
    5ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5ca6:	68db      	ldr	r3, [r3, #12]
    5ca8:	899b      	ldrh	r3, [r3, #12]
    5caa:	b29b      	uxth	r3, r3
    5cac:	4618      	mov	r0, r3
    5cae:	f001 fa27 	bl	7100 <lwip_ntohs>
    5cb2:	4603      	mov	r3, r0
    5cb4:	f003 0301 	and.w	r3, r3, #1
    5cb8:	2b00      	cmp	r3, #0
    5cba:	d007      	beq.n	5ccc <tcp_receive+0x400>
        pcb->acked--;
    5cbc:	687b      	ldr	r3, [r7, #4]
    5cbe:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
    5cc2:	3b01      	subs	r3, #1
    5cc4:	b29a      	uxth	r2, r3
    5cc6:	687b      	ldr	r3, [r7, #4]
    5cc8:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
      }
      pcb->snd_queuelen -= pbuf_clen(next->p);
    5ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5cce:	685b      	ldr	r3, [r3, #4]
    5cd0:	4618      	mov	r0, r3
    5cd2:	f001 f813 	bl	6cfc <pbuf_clen>
    5cd6:	4603      	mov	r3, r0
    5cd8:	4619      	mov	r1, r3
    5cda:	687b      	ldr	r3, [r7, #4]
    5cdc:	f8b3 2070 	ldrh.w	r2, [r3, #112]	; 0x70
    5ce0:	b28b      	uxth	r3, r1
    5ce2:	1ad3      	subs	r3, r2, r3
    5ce4:	b29a      	uxth	r2, r3
    5ce6:	687b      	ldr	r3, [r7, #4]
    5ce8:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
      tcp_seg_free(next);
    5cec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    5cee:	f7fd fc2b 	bl	3548 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"U16_F" (after freeing unsent)\n", (u16_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
    5cf2:	687b      	ldr	r3, [r7, #4]
    5cf4:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
    5cf8:	2b00      	cmp	r3, #0
    5cfa:	d002      	beq.n	5d02 <tcp_receive+0x436>
        LWIP_ASSERT("tcp_receive: valid queue length",
    5cfc:	687b      	ldr	r3, [r7, #4]
    5cfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    5d00:	2b00      	cmp	r3, #0
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
    5d02:	687b      	ldr	r3, [r7, #4]
    5d04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    5d06:	2b00      	cmp	r3, #0
    5d08:	d029      	beq.n	5d5e <tcp_receive+0x492>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
    5d0a:	4b69      	ldr	r3, [pc, #420]	; (5eb0 <tcp_receive+0x5e4>)
    5d0c:	681c      	ldr	r4, [r3, #0]
    5d0e:	687b      	ldr	r3, [r7, #4]
    5d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    5d12:	68db      	ldr	r3, [r3, #12]
    5d14:	685b      	ldr	r3, [r3, #4]
    5d16:	4618      	mov	r0, r3
    5d18:	f001 fa18 	bl	714c <lwip_ntohl>
    5d1c:	4605      	mov	r5, r0
    5d1e:	687b      	ldr	r3, [r7, #4]
    5d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    5d22:	891b      	ldrh	r3, [r3, #8]
    5d24:	461e      	mov	r6, r3
    5d26:	687b      	ldr	r3, [r7, #4]
    5d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    5d2a:	68db      	ldr	r3, [r3, #12]
    5d2c:	899b      	ldrh	r3, [r3, #12]
    5d2e:	b29b      	uxth	r3, r3
    5d30:	4618      	mov	r0, r3
    5d32:	f001 f9e5 	bl	7100 <lwip_ntohs>
    5d36:	4603      	mov	r3, r0
    5d38:	f003 0303 	and.w	r3, r3, #3
    5d3c:	2b00      	cmp	r3, #0
    5d3e:	bf14      	ite	ne
    5d40:	2301      	movne	r3, #1
    5d42:	2300      	moveq	r3, #0
    5d44:	b2db      	uxtb	r3, r3
    5d46:	4433      	add	r3, r6
    5d48:	442b      	add	r3, r5
    5d4a:	1ae3      	subs	r3, r4, r3
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
    5d4c:	2b00      	cmp	r3, #0
    5d4e:	db06      	blt.n	5d5e <tcp_receive+0x492>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
    5d50:	4b57      	ldr	r3, [pc, #348]	; (5eb0 <tcp_receive+0x5e4>)
    5d52:	681a      	ldr	r2, [r3, #0]
    5d54:	687b      	ldr	r3, [r7, #4]
    5d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    5d58:	1ad3      	subs	r3, r2, r3
    5d5a:	2b00      	cmp	r3, #0
    5d5c:	dd90      	ble.n	5c80 <tcp_receive+0x3b4>
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
    5d5e:	687b      	ldr	r3, [r7, #4]
    5d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    5d62:	2b00      	cmp	r3, #0
    5d64:	d054      	beq.n	5e10 <tcp_receive+0x544>
    5d66:	687b      	ldr	r3, [r7, #4]
    5d68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    5d6a:	4b51      	ldr	r3, [pc, #324]	; (5eb0 <tcp_receive+0x5e4>)
    5d6c:	681b      	ldr	r3, [r3, #0]
    5d6e:	1ad3      	subs	r3, r2, r3
    5d70:	2b00      	cmp	r3, #0
    5d72:	da4d      	bge.n	5e10 <tcp_receive+0x544>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
    5d74:	4b4f      	ldr	r3, [pc, #316]	; (5eb4 <tcp_receive+0x5e8>)
    5d76:	681b      	ldr	r3, [r3, #0]
    5d78:	b29a      	uxth	r2, r3
    5d7a:	687b      	ldr	r3, [r7, #4]
    5d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    5d7e:	b29b      	uxth	r3, r3
    5d80:	1ad3      	subs	r3, r2, r3
    5d82:	b29b      	uxth	r3, r3
    5d84:	83fb      	strh	r3, [r7, #30]

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, m * TCP_SLOW_INTERVAL));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
    5d86:	8bfa      	ldrh	r2, [r7, #30]
    5d88:	687b      	ldr	r3, [r7, #4]
    5d8a:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
    5d8e:	10db      	asrs	r3, r3, #3
    5d90:	b21b      	sxth	r3, r3
    5d92:	b29b      	uxth	r3, r3
    5d94:	1ad3      	subs	r3, r2, r3
    5d96:	b29b      	uxth	r3, r3
    5d98:	83fb      	strh	r3, [r7, #30]
      pcb->sa += m;
    5d9a:	687b      	ldr	r3, [r7, #4]
    5d9c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
    5da0:	b29a      	uxth	r2, r3
    5da2:	8bfb      	ldrh	r3, [r7, #30]
    5da4:	4413      	add	r3, r2
    5da6:	b29b      	uxth	r3, r3
    5da8:	b21a      	sxth	r2, r3
    5daa:	687b      	ldr	r3, [r7, #4]
    5dac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
      if (m < 0) {
    5db0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
    5db4:	2b00      	cmp	r3, #0
    5db6:	da03      	bge.n	5dc0 <tcp_receive+0x4f4>
        m = -m;
    5db8:	8bfb      	ldrh	r3, [r7, #30]
    5dba:	425b      	negs	r3, r3
    5dbc:	b29b      	uxth	r3, r3
    5dbe:	83fb      	strh	r3, [r7, #30]
      }
      m = m - (pcb->sv >> 2);
    5dc0:	8bfa      	ldrh	r2, [r7, #30]
    5dc2:	687b      	ldr	r3, [r7, #4]
    5dc4:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
    5dc8:	109b      	asrs	r3, r3, #2
    5dca:	b21b      	sxth	r3, r3
    5dcc:	b29b      	uxth	r3, r3
    5dce:	1ad3      	subs	r3, r2, r3
    5dd0:	b29b      	uxth	r3, r3
    5dd2:	83fb      	strh	r3, [r7, #30]
      pcb->sv += m;
    5dd4:	687b      	ldr	r3, [r7, #4]
    5dd6:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
    5dda:	b29a      	uxth	r2, r3
    5ddc:	8bfb      	ldrh	r3, [r7, #30]
    5dde:	4413      	add	r3, r2
    5de0:	b29b      	uxth	r3, r3
    5de2:	b21a      	sxth	r2, r3
    5de4:	687b      	ldr	r3, [r7, #4]
    5de6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
    5dea:	687b      	ldr	r3, [r7, #4]
    5dec:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
    5df0:	10db      	asrs	r3, r3, #3
    5df2:	b21b      	sxth	r3, r3
    5df4:	b29a      	uxth	r2, r3
    5df6:	687b      	ldr	r3, [r7, #4]
    5df8:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
    5dfc:	b29b      	uxth	r3, r3
    5dfe:	4413      	add	r3, r2
    5e00:	b29b      	uxth	r3, r3
    5e02:	b21a      	sxth	r2, r3
    5e04:	687b      	ldr	r3, [r7, #4]
    5e06:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, pcb->rto * TCP_SLOW_INTERVAL));

      pcb->rttest = 0;
    5e0a:	687b      	ldr	r3, [r7, #4]
    5e0c:	2200      	movs	r2, #0
    5e0e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /* If the incoming segment contains data, we must process it
     further. */
  if (tcplen > 0) {
    5e10:	4b29      	ldr	r3, [pc, #164]	; (5eb8 <tcp_receive+0x5ec>)
    5e12:	881b      	ldrh	r3, [r3, #0]
    5e14:	2b00      	cmp	r3, #0
    5e16:	f000 8446 	beq.w	66a6 <tcp_receive+0xdda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)){
    5e1a:	687b      	ldr	r3, [r7, #4]
    5e1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5e1e:	4b27      	ldr	r3, [pc, #156]	; (5ebc <tcp_receive+0x5f0>)
    5e20:	681b      	ldr	r3, [r3, #0]
    5e22:	1ad3      	subs	r3, r2, r3
    5e24:	3b01      	subs	r3, #1
    5e26:	2b00      	cmp	r3, #0
    5e28:	db6f      	blt.n	5f0a <tcp_receive+0x63e>
    5e2a:	687b      	ldr	r3, [r7, #4]
    5e2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5e2e:	4b22      	ldr	r3, [pc, #136]	; (5eb8 <tcp_receive+0x5ec>)
    5e30:	881b      	ldrh	r3, [r3, #0]
    5e32:	4619      	mov	r1, r3
    5e34:	4b21      	ldr	r3, [pc, #132]	; (5ebc <tcp_receive+0x5f0>)
    5e36:	681b      	ldr	r3, [r3, #0]
    5e38:	440b      	add	r3, r1
    5e3a:	1ad3      	subs	r3, r2, r3
    5e3c:	3301      	adds	r3, #1
    5e3e:	2b00      	cmp	r3, #0
    5e40:	dc63      	bgt.n	5f0a <tcp_receive+0x63e>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      off = pcb->rcv_nxt - seqno;
    5e42:	687b      	ldr	r3, [r7, #4]
    5e44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5e46:	4b1d      	ldr	r3, [pc, #116]	; (5ebc <tcp_receive+0x5f0>)
    5e48:	681b      	ldr	r3, [r3, #0]
    5e4a:	1ad3      	subs	r3, r2, r3
    5e4c:	623b      	str	r3, [r7, #32]
      p = inseg.p;
    5e4e:	4b1c      	ldr	r3, [pc, #112]	; (5ec0 <tcp_receive+0x5f4>)
    5e50:	685b      	ldr	r3, [r3, #4]
    5e52:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
      if (inseg.p->len < off) {
    5e54:	4b1a      	ldr	r3, [pc, #104]	; (5ec0 <tcp_receive+0x5f4>)
    5e56:	685b      	ldr	r3, [r3, #4]
    5e58:	895b      	ldrh	r3, [r3, #10]
    5e5a:	461a      	mov	r2, r3
    5e5c:	6a3b      	ldr	r3, [r7, #32]
    5e5e:	429a      	cmp	r2, r3
    5e60:	da30      	bge.n	5ec4 <tcp_receive+0x5f8>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
    5e62:	4b17      	ldr	r3, [pc, #92]	; (5ec0 <tcp_receive+0x5f4>)
    5e64:	685b      	ldr	r3, [r3, #4]
    5e66:	891a      	ldrh	r2, [r3, #8]
    5e68:	6a3b      	ldr	r3, [r7, #32]
    5e6a:	b29b      	uxth	r3, r3
    5e6c:	1ad3      	subs	r3, r2, r3
    5e6e:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
    5e70:	e00e      	b.n	5e90 <tcp_receive+0x5c4>
          off -= p->len;
    5e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e74:	895b      	ldrh	r3, [r3, #10]
    5e76:	461a      	mov	r2, r3
    5e78:	6a3b      	ldr	r3, [r7, #32]
    5e7a:	1a9b      	subs	r3, r3, r2
    5e7c:	623b      	str	r3, [r7, #32]
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
    5e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e80:	8a3a      	ldrh	r2, [r7, #16]
    5e82:	811a      	strh	r2, [r3, #8]
          p->len = 0;
    5e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e86:	2200      	movs	r2, #0
    5e88:	815a      	strh	r2, [r3, #10]
          p = p->next;
    5e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e8c:	681b      	ldr	r3, [r3, #0]
    5e8e:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
      if (inseg.p->len < off) {
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
        while (p->len < off) {
    5e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e92:	895b      	ldrh	r3, [r3, #10]
    5e94:	461a      	mov	r2, r3
    5e96:	6a3b      	ldr	r3, [r7, #32]
    5e98:	429a      	cmp	r2, r3
    5e9a:	dbea      	blt.n	5e72 <tcp_receive+0x5a6>
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
          p = p->next;
        }
        if(pbuf_header(p, (s16_t)-off)) {
    5e9c:	6a3b      	ldr	r3, [r7, #32]
    5e9e:	b29b      	uxth	r3, r3
    5ea0:	425b      	negs	r3, r3
    5ea2:	b29b      	uxth	r3, r3
    5ea4:	b21b      	sxth	r3, r3
    5ea6:	4619      	mov	r1, r3
    5ea8:	6a78      	ldr	r0, [r7, #36]	; 0x24
    5eaa:	f000 fe5d 	bl	6b68 <pbuf_header>
    5eae:	e014      	b.n	5eda <tcp_receive+0x60e>
    5eb0:	1000120c 	.word	0x1000120c
    5eb4:	10001964 	.word	0x10001964
    5eb8:	10001212 	.word	0x10001212
    5ebc:	10001208 	.word	0x10001208
    5ec0:	100011f0 	.word	0x100011f0
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      } else {
        if(pbuf_header(inseg.p, (s16_t)-off)) {
    5ec4:	4b76      	ldr	r3, [pc, #472]	; (60a0 <tcp_receive+0x7d4>)
    5ec6:	685b      	ldr	r3, [r3, #4]
    5ec8:	6a3a      	ldr	r2, [r7, #32]
    5eca:	b292      	uxth	r2, r2
    5ecc:	4252      	negs	r2, r2
    5ece:	b292      	uxth	r2, r2
    5ed0:	b212      	sxth	r2, r2
    5ed2:	4611      	mov	r1, r2
    5ed4:	4618      	mov	r0, r3
    5ed6:	f000 fe47 	bl	6b68 <pbuf_header>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
    5eda:	4b71      	ldr	r3, [pc, #452]	; (60a0 <tcp_receive+0x7d4>)
    5edc:	891a      	ldrh	r2, [r3, #8]
    5ede:	4b71      	ldr	r3, [pc, #452]	; (60a4 <tcp_receive+0x7d8>)
    5ee0:	681b      	ldr	r3, [r3, #0]
    5ee2:	b299      	uxth	r1, r3
    5ee4:	687b      	ldr	r3, [r7, #4]
    5ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5ee8:	b29b      	uxth	r3, r3
    5eea:	1acb      	subs	r3, r1, r3
    5eec:	b29b      	uxth	r3, r3
    5eee:	4413      	add	r3, r2
    5ef0:	b29a      	uxth	r2, r3
    5ef2:	4b6b      	ldr	r3, [pc, #428]	; (60a0 <tcp_receive+0x7d4>)
    5ef4:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
    5ef6:	4b6a      	ldr	r3, [pc, #424]	; (60a0 <tcp_receive+0x7d4>)
    5ef8:	68db      	ldr	r3, [r3, #12]
    5efa:	687a      	ldr	r2, [r7, #4]
    5efc:	6a52      	ldr	r2, [r2, #36]	; 0x24
    5efe:	4969      	ldr	r1, [pc, #420]	; (60a4 <tcp_receive+0x7d8>)
    5f00:	600a      	str	r2, [r1, #0]
    5f02:	4a68      	ldr	r2, [pc, #416]	; (60a4 <tcp_receive+0x7d8>)
    5f04:	6812      	ldr	r2, [r2, #0]
    5f06:	605a      	str	r2, [r3, #4]
    5f08:	e00f      	b.n	5f2a <tcp_receive+0x65e>
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
    5f0a:	4b66      	ldr	r3, [pc, #408]	; (60a4 <tcp_receive+0x7d8>)
    5f0c:	681a      	ldr	r2, [r3, #0]
    5f0e:	687b      	ldr	r3, [r7, #4]
    5f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5f12:	1ad3      	subs	r3, r2, r3
    5f14:	2b00      	cmp	r3, #0
    5f16:	da08      	bge.n	5f2a <tcp_receive+0x65e>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
    5f18:	687b      	ldr	r3, [r7, #4]
    5f1a:	f893 3020 	ldrb.w	r3, [r3, #32]
    5f1e:	f043 0302 	orr.w	r3, r3, #2
    5f22:	b2da      	uxtb	r2, r3
    5f24:	687b      	ldr	r3, [r7, #4]
    5f26:	f883 2020 	strb.w	r2, [r3, #32]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
    5f2a:	4b5e      	ldr	r3, [pc, #376]	; (60a4 <tcp_receive+0x7d8>)
    5f2c:	681a      	ldr	r2, [r3, #0]
    5f2e:	687b      	ldr	r3, [r7, #4]
    5f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5f32:	1ad3      	subs	r3, r2, r3
    5f34:	2b00      	cmp	r3, #0
    5f36:	f2c0 83b2 	blt.w	669e <tcp_receive+0xdd2>
    5f3a:	4b5a      	ldr	r3, [pc, #360]	; (60a4 <tcp_receive+0x7d8>)
    5f3c:	681a      	ldr	r2, [r3, #0]
    5f3e:	687b      	ldr	r3, [r7, #4]
    5f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5f42:	6879      	ldr	r1, [r7, #4]
    5f44:	8d09      	ldrh	r1, [r1, #40]	; 0x28
    5f46:	440b      	add	r3, r1
    5f48:	1ad3      	subs	r3, r2, r3
    5f4a:	3301      	adds	r3, #1
    5f4c:	2b00      	cmp	r3, #0
    5f4e:	f300 83a6 	bgt.w	669e <tcp_receive+0xdd2>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
    5f52:	687b      	ldr	r3, [r7, #4]
    5f54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5f56:	4b53      	ldr	r3, [pc, #332]	; (60a4 <tcp_receive+0x7d8>)
    5f58:	681b      	ldr	r3, [r3, #0]
    5f5a:	429a      	cmp	r2, r3
    5f5c:	f040 823b 	bne.w	63d6 <tcp_receive+0xb0a>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
    5f60:	4b4f      	ldr	r3, [pc, #316]	; (60a0 <tcp_receive+0x7d4>)
    5f62:	891c      	ldrh	r4, [r3, #8]
    5f64:	4b4e      	ldr	r3, [pc, #312]	; (60a0 <tcp_receive+0x7d4>)
    5f66:	68db      	ldr	r3, [r3, #12]
    5f68:	899b      	ldrh	r3, [r3, #12]
    5f6a:	b29b      	uxth	r3, r3
    5f6c:	4618      	mov	r0, r3
    5f6e:	f001 f8c7 	bl	7100 <lwip_ntohs>
    5f72:	4603      	mov	r3, r0
    5f74:	f003 0303 	and.w	r3, r3, #3
    5f78:	2b00      	cmp	r3, #0
    5f7a:	bf14      	ite	ne
    5f7c:	2301      	movne	r3, #1
    5f7e:	2300      	moveq	r3, #0
    5f80:	b2db      	uxtb	r3, r3
    5f82:	b29b      	uxth	r3, r3
    5f84:	4423      	add	r3, r4
    5f86:	b29a      	uxth	r2, r3
    5f88:	4b47      	ldr	r3, [pc, #284]	; (60a8 <tcp_receive+0x7dc>)
    5f8a:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
    5f8c:	687b      	ldr	r3, [r7, #4]
    5f8e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    5f90:	4b45      	ldr	r3, [pc, #276]	; (60a8 <tcp_receive+0x7dc>)
    5f92:	881b      	ldrh	r3, [r3, #0]
    5f94:	429a      	cmp	r2, r3
    5f96:	d25d      	bcs.n	6054 <tcp_receive+0x788>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
    5f98:	4b41      	ldr	r3, [pc, #260]	; (60a0 <tcp_receive+0x7d4>)
    5f9a:	68db      	ldr	r3, [r3, #12]
    5f9c:	899b      	ldrh	r3, [r3, #12]
    5f9e:	b29b      	uxth	r3, r3
    5fa0:	4618      	mov	r0, r3
    5fa2:	f001 f8ad 	bl	7100 <lwip_ntohs>
    5fa6:	4603      	mov	r3, r0
    5fa8:	f003 0301 	and.w	r3, r3, #1
    5fac:	2b00      	cmp	r3, #0
    5fae:	d01d      	beq.n	5fec <tcp_receive+0x720>
            /* Must remove the FIN from the header as we're trimming 
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) &~ TCP_FIN);
    5fb0:	4b3b      	ldr	r3, [pc, #236]	; (60a0 <tcp_receive+0x7d4>)
    5fb2:	68dc      	ldr	r4, [r3, #12]
    5fb4:	4b3a      	ldr	r3, [pc, #232]	; (60a0 <tcp_receive+0x7d4>)
    5fb6:	68db      	ldr	r3, [r3, #12]
    5fb8:	899b      	ldrh	r3, [r3, #12]
    5fba:	b29b      	uxth	r3, r3
    5fbc:	b21b      	sxth	r3, r3
    5fbe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    5fc2:	b21d      	sxth	r5, r3
    5fc4:	4b36      	ldr	r3, [pc, #216]	; (60a0 <tcp_receive+0x7d4>)
    5fc6:	68db      	ldr	r3, [r3, #12]
    5fc8:	899b      	ldrh	r3, [r3, #12]
    5fca:	b29b      	uxth	r3, r3
    5fcc:	4618      	mov	r0, r3
    5fce:	f001 f897 	bl	7100 <lwip_ntohs>
    5fd2:	4603      	mov	r3, r0
    5fd4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
    5fd8:	b29b      	uxth	r3, r3
    5fda:	4618      	mov	r0, r3
    5fdc:	f001 f87c 	bl	70d8 <lwip_htons>
    5fe0:	4603      	mov	r3, r0
    5fe2:	b21b      	sxth	r3, r3
    5fe4:	432b      	orrs	r3, r5
    5fe6:	b21b      	sxth	r3, r3
    5fe8:	b29b      	uxth	r3, r3
    5fea:	81a3      	strh	r3, [r4, #12]
          }
          /* Adjust length of segment to fit in the window. */
          inseg.len = pcb->rcv_wnd;
    5fec:	687b      	ldr	r3, [r7, #4]
    5fee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    5ff0:	4b2b      	ldr	r3, [pc, #172]	; (60a0 <tcp_receive+0x7d4>)
    5ff2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
    5ff4:	4b2a      	ldr	r3, [pc, #168]	; (60a0 <tcp_receive+0x7d4>)
    5ff6:	68db      	ldr	r3, [r3, #12]
    5ff8:	899b      	ldrh	r3, [r3, #12]
    5ffa:	b29b      	uxth	r3, r3
    5ffc:	4618      	mov	r0, r3
    5ffe:	f001 f87f 	bl	7100 <lwip_ntohs>
    6002:	4603      	mov	r3, r0
    6004:	f003 0302 	and.w	r3, r3, #2
    6008:	2b00      	cmp	r3, #0
    600a:	d005      	beq.n	6018 <tcp_receive+0x74c>
            inseg.len -= 1;
    600c:	4b24      	ldr	r3, [pc, #144]	; (60a0 <tcp_receive+0x7d4>)
    600e:	891b      	ldrh	r3, [r3, #8]
    6010:	3b01      	subs	r3, #1
    6012:	b29a      	uxth	r2, r3
    6014:	4b22      	ldr	r3, [pc, #136]	; (60a0 <tcp_receive+0x7d4>)
    6016:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
    6018:	4b21      	ldr	r3, [pc, #132]	; (60a0 <tcp_receive+0x7d4>)
    601a:	685a      	ldr	r2, [r3, #4]
    601c:	4b20      	ldr	r3, [pc, #128]	; (60a0 <tcp_receive+0x7d4>)
    601e:	891b      	ldrh	r3, [r3, #8]
    6020:	4619      	mov	r1, r3
    6022:	4610      	mov	r0, r2
    6024:	f000 fd3c 	bl	6aa0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
    6028:	4b1d      	ldr	r3, [pc, #116]	; (60a0 <tcp_receive+0x7d4>)
    602a:	891c      	ldrh	r4, [r3, #8]
    602c:	4b1c      	ldr	r3, [pc, #112]	; (60a0 <tcp_receive+0x7d4>)
    602e:	68db      	ldr	r3, [r3, #12]
    6030:	899b      	ldrh	r3, [r3, #12]
    6032:	b29b      	uxth	r3, r3
    6034:	4618      	mov	r0, r3
    6036:	f001 f863 	bl	7100 <lwip_ntohs>
    603a:	4603      	mov	r3, r0
    603c:	f003 0303 	and.w	r3, r3, #3
    6040:	2b00      	cmp	r3, #0
    6042:	bf14      	ite	ne
    6044:	2301      	movne	r3, #1
    6046:	2300      	moveq	r3, #0
    6048:	b2db      	uxtb	r3, r3
    604a:	b29b      	uxth	r3, r3
    604c:	4423      	add	r3, r4
    604e:	b29a      	uxth	r2, r3
    6050:	4b15      	ldr	r3, [pc, #84]	; (60a8 <tcp_receive+0x7dc>)
    6052:	801a      	strh	r2, [r3, #0]
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
    6054:	687b      	ldr	r3, [r7, #4]
    6056:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    6058:	2b00      	cmp	r3, #0
    605a:	f000 80c9 	beq.w	61f0 <tcp_receive+0x924>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
    605e:	4b10      	ldr	r3, [pc, #64]	; (60a0 <tcp_receive+0x7d4>)
    6060:	68db      	ldr	r3, [r3, #12]
    6062:	899b      	ldrh	r3, [r3, #12]
    6064:	b29b      	uxth	r3, r3
    6066:	4618      	mov	r0, r3
    6068:	f001 f84a 	bl	7100 <lwip_ntohs>
    606c:	4603      	mov	r3, r0
    606e:	f003 0301 	and.w	r3, r3, #1
    6072:	2b00      	cmp	r3, #0
    6074:	d010      	beq.n	6098 <tcp_receive+0x7cc>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
    6076:	e00a      	b.n	608e <tcp_receive+0x7c2>
              struct tcp_seg *old_ooseq = pcb->ooseq;
    6078:	687b      	ldr	r3, [r7, #4]
    607a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    607c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
    607e:	687b      	ldr	r3, [r7, #4]
    6080:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    6082:	681a      	ldr	r2, [r3, #0]
    6084:	687b      	ldr	r3, [r7, #4]
    6086:	67da      	str	r2, [r3, #124]	; 0x7c
              tcp_seg_free(old_ooseq);
    6088:	68f8      	ldr	r0, [r7, #12]
    608a:	f7fd fa5d 	bl	3548 <tcp_seg_free>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
    608e:	687b      	ldr	r3, [r7, #4]
    6090:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    6092:	2b00      	cmp	r3, #0
    6094:	d1f0      	bne.n	6078 <tcp_receive+0x7ac>
    6096:	e0ab      	b.n	61f0 <tcp_receive+0x924>
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
            }
          }
          else {
            next = pcb->ooseq;
    6098:	687b      	ldr	r3, [r7, #4]
    609a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    609c:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
    609e:	e048      	b.n	6132 <tcp_receive+0x866>
    60a0:	100011f0 	.word	0x100011f0
    60a4:	10001208 	.word	0x10001208
    60a8:	10001212 	.word	0x10001212
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
    60ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    60ae:	68db      	ldr	r3, [r3, #12]
    60b0:	899b      	ldrh	r3, [r3, #12]
    60b2:	b29b      	uxth	r3, r3
    60b4:	4618      	mov	r0, r3
    60b6:	f001 f823 	bl	7100 <lwip_ntohs>
    60ba:	4603      	mov	r3, r0
    60bc:	f003 0301 	and.w	r3, r3, #1
    60c0:	2b00      	cmp	r3, #0
    60c2:	d02e      	beq.n	6122 <tcp_receive+0x856>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
    60c4:	4b92      	ldr	r3, [pc, #584]	; (6310 <tcp_receive+0xa44>)
    60c6:	68db      	ldr	r3, [r3, #12]
    60c8:	899b      	ldrh	r3, [r3, #12]
    60ca:	b29b      	uxth	r3, r3
    60cc:	4618      	mov	r0, r3
    60ce:	f001 f817 	bl	7100 <lwip_ntohs>
    60d2:	4603      	mov	r3, r0
    60d4:	f003 0302 	and.w	r3, r3, #2
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
    60d8:	2b00      	cmp	r3, #0
    60da:	d122      	bne.n	6122 <tcp_receive+0x856>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
    60dc:	4b8c      	ldr	r3, [pc, #560]	; (6310 <tcp_receive+0xa44>)
    60de:	68dc      	ldr	r4, [r3, #12]
    60e0:	4b8b      	ldr	r3, [pc, #556]	; (6310 <tcp_receive+0xa44>)
    60e2:	68db      	ldr	r3, [r3, #12]
    60e4:	899b      	ldrh	r3, [r3, #12]
    60e6:	b29d      	uxth	r5, r3
    60e8:	2001      	movs	r0, #1
    60ea:	f000 fff5 	bl	70d8 <lwip_htons>
    60ee:	4603      	mov	r3, r0
    60f0:	432b      	orrs	r3, r5
    60f2:	b29b      	uxth	r3, r3
    60f4:	81a3      	strh	r3, [r4, #12]
                tcplen = TCP_TCPLEN(&inseg);
    60f6:	4b86      	ldr	r3, [pc, #536]	; (6310 <tcp_receive+0xa44>)
    60f8:	891c      	ldrh	r4, [r3, #8]
    60fa:	4b85      	ldr	r3, [pc, #532]	; (6310 <tcp_receive+0xa44>)
    60fc:	68db      	ldr	r3, [r3, #12]
    60fe:	899b      	ldrh	r3, [r3, #12]
    6100:	b29b      	uxth	r3, r3
    6102:	4618      	mov	r0, r3
    6104:	f000 fffc 	bl	7100 <lwip_ntohs>
    6108:	4603      	mov	r3, r0
    610a:	f003 0303 	and.w	r3, r3, #3
    610e:	2b00      	cmp	r3, #0
    6110:	bf14      	ite	ne
    6112:	2301      	movne	r3, #1
    6114:	2300      	moveq	r3, #0
    6116:	b2db      	uxtb	r3, r3
    6118:	b29b      	uxth	r3, r3
    611a:	4423      	add	r3, r4
    611c:	b29a      	uxth	r2, r3
    611e:	4b7d      	ldr	r3, [pc, #500]	; (6314 <tcp_receive+0xa48>)
    6120:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
    6122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6124:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
    6126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6128:	681b      	ldr	r3, [r3, #0]
    612a:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
    612c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    612e:	f7fd fa0b 	bl	3548 <tcp_seg_free>
          }
          else {
            next = pcb->ooseq;
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
    6132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6134:	2b00      	cmp	r3, #0
    6136:	d00e      	beq.n	6156 <tcp_receive+0x88a>
                   TCP_SEQ_GEQ(seqno + tcplen,
    6138:	4b76      	ldr	r3, [pc, #472]	; (6314 <tcp_receive+0xa48>)
    613a:	881b      	ldrh	r3, [r3, #0]
    613c:	461a      	mov	r2, r3
    613e:	4b76      	ldr	r3, [pc, #472]	; (6318 <tcp_receive+0xa4c>)
    6140:	681b      	ldr	r3, [r3, #0]
    6142:	441a      	add	r2, r3
    6144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6146:	68db      	ldr	r3, [r3, #12]
    6148:	685b      	ldr	r3, [r3, #4]
    614a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    614c:	8909      	ldrh	r1, [r1, #8]
    614e:	440b      	add	r3, r1
    6150:	1ad3      	subs	r3, r2, r3
          }
          else {
            next = pcb->ooseq;
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
    6152:	2b00      	cmp	r3, #0
    6154:	daaa      	bge.n	60ac <tcp_receive+0x7e0>
              next = next->next;
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
    6156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6158:	2b00      	cmp	r3, #0
    615a:	d046      	beq.n	61ea <tcp_receive+0x91e>
                TCP_SEQ_GT(seqno + tcplen,
    615c:	4b6d      	ldr	r3, [pc, #436]	; (6314 <tcp_receive+0xa48>)
    615e:	881b      	ldrh	r3, [r3, #0]
    6160:	461a      	mov	r2, r3
    6162:	4b6d      	ldr	r3, [pc, #436]	; (6318 <tcp_receive+0xa4c>)
    6164:	681b      	ldr	r3, [r3, #0]
    6166:	441a      	add	r2, r3
    6168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    616a:	68db      	ldr	r3, [r3, #12]
    616c:	685b      	ldr	r3, [r3, #4]
    616e:	1ad3      	subs	r3, r2, r3
              next = next->next;
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
    6170:	2b00      	cmp	r3, #0
    6172:	dd3a      	ble.n	61ea <tcp_receive+0x91e>
                TCP_SEQ_GT(seqno + tcplen,
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
    6174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6176:	68db      	ldr	r3, [r3, #12]
    6178:	685b      	ldr	r3, [r3, #4]
    617a:	b29a      	uxth	r2, r3
    617c:	4b66      	ldr	r3, [pc, #408]	; (6318 <tcp_receive+0xa4c>)
    617e:	681b      	ldr	r3, [r3, #0]
    6180:	b29b      	uxth	r3, r3
    6182:	1ad3      	subs	r3, r2, r3
    6184:	b29a      	uxth	r2, r3
    6186:	4b62      	ldr	r3, [pc, #392]	; (6310 <tcp_receive+0xa44>)
    6188:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
    618a:	4b61      	ldr	r3, [pc, #388]	; (6310 <tcp_receive+0xa44>)
    618c:	68db      	ldr	r3, [r3, #12]
    618e:	899b      	ldrh	r3, [r3, #12]
    6190:	b29b      	uxth	r3, r3
    6192:	4618      	mov	r0, r3
    6194:	f000 ffb4 	bl	7100 <lwip_ntohs>
    6198:	4603      	mov	r3, r0
    619a:	f003 0302 	and.w	r3, r3, #2
    619e:	2b00      	cmp	r3, #0
    61a0:	d005      	beq.n	61ae <tcp_receive+0x8e2>
                inseg.len -= 1;
    61a2:	4b5b      	ldr	r3, [pc, #364]	; (6310 <tcp_receive+0xa44>)
    61a4:	891b      	ldrh	r3, [r3, #8]
    61a6:	3b01      	subs	r3, #1
    61a8:	b29a      	uxth	r2, r3
    61aa:	4b59      	ldr	r3, [pc, #356]	; (6310 <tcp_receive+0xa44>)
    61ac:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
    61ae:	4b58      	ldr	r3, [pc, #352]	; (6310 <tcp_receive+0xa44>)
    61b0:	685a      	ldr	r2, [r3, #4]
    61b2:	4b57      	ldr	r3, [pc, #348]	; (6310 <tcp_receive+0xa44>)
    61b4:	891b      	ldrh	r3, [r3, #8]
    61b6:	4619      	mov	r1, r3
    61b8:	4610      	mov	r0, r2
    61ba:	f000 fc71 	bl	6aa0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
    61be:	4b54      	ldr	r3, [pc, #336]	; (6310 <tcp_receive+0xa44>)
    61c0:	891c      	ldrh	r4, [r3, #8]
    61c2:	4b53      	ldr	r3, [pc, #332]	; (6310 <tcp_receive+0xa44>)
    61c4:	68db      	ldr	r3, [r3, #12]
    61c6:	899b      	ldrh	r3, [r3, #12]
    61c8:	b29b      	uxth	r3, r3
    61ca:	4618      	mov	r0, r3
    61cc:	f000 ff98 	bl	7100 <lwip_ntohs>
    61d0:	4603      	mov	r3, r0
    61d2:	f003 0303 	and.w	r3, r3, #3
    61d6:	2b00      	cmp	r3, #0
    61d8:	bf14      	ite	ne
    61da:	2301      	movne	r3, #1
    61dc:	2300      	moveq	r3, #0
    61de:	b2db      	uxtb	r3, r3
    61e0:	b29b      	uxth	r3, r3
    61e2:	4423      	add	r3, r4
    61e4:	b29a      	uxth	r2, r3
    61e6:	4b4b      	ldr	r3, [pc, #300]	; (6314 <tcp_receive+0xa48>)
    61e8:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
    61ea:	687b      	ldr	r3, [r7, #4]
    61ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    61ee:	67da      	str	r2, [r3, #124]	; 0x7c
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
    61f0:	4b48      	ldr	r3, [pc, #288]	; (6314 <tcp_receive+0xa48>)
    61f2:	881b      	ldrh	r3, [r3, #0]
    61f4:	461a      	mov	r2, r3
    61f6:	4b48      	ldr	r3, [pc, #288]	; (6318 <tcp_receive+0xa4c>)
    61f8:	681b      	ldr	r3, [r3, #0]
    61fa:	441a      	add	r2, r3
    61fc:	687b      	ldr	r3, [r7, #4]
    61fe:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
        pcb->rcv_wnd -= tcplen;
    6200:	687b      	ldr	r3, [r7, #4]
    6202:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    6204:	4b43      	ldr	r3, [pc, #268]	; (6314 <tcp_receive+0xa48>)
    6206:	881b      	ldrh	r3, [r3, #0]
    6208:	1ad3      	subs	r3, r2, r3
    620a:	b29a      	uxth	r2, r3
    620c:	687b      	ldr	r3, [r7, #4]
    620e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
    6210:	6878      	ldr	r0, [r7, #4]
    6212:	f7fc fda9 	bl	2d68 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
    6216:	4b3e      	ldr	r3, [pc, #248]	; (6310 <tcp_receive+0xa44>)
    6218:	685b      	ldr	r3, [r3, #4]
    621a:	891b      	ldrh	r3, [r3, #8]
    621c:	2b00      	cmp	r3, #0
    621e:	d006      	beq.n	622e <tcp_receive+0x962>
          recv_data = inseg.p;
    6220:	4b3b      	ldr	r3, [pc, #236]	; (6310 <tcp_receive+0xa44>)
    6222:	685b      	ldr	r3, [r3, #4]
    6224:	4a3d      	ldr	r2, [pc, #244]	; (631c <tcp_receive+0xa50>)
    6226:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
    6228:	4b39      	ldr	r3, [pc, #228]	; (6310 <tcp_receive+0xa44>)
    622a:	2200      	movs	r2, #0
    622c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
    622e:	4b38      	ldr	r3, [pc, #224]	; (6310 <tcp_receive+0xa44>)
    6230:	68db      	ldr	r3, [r3, #12]
    6232:	899b      	ldrh	r3, [r3, #12]
    6234:	b29b      	uxth	r3, r3
    6236:	4618      	mov	r0, r3
    6238:	f000 ff62 	bl	7100 <lwip_ntohs>
    623c:	4603      	mov	r3, r0
    623e:	f003 0301 	and.w	r3, r3, #1
    6242:	2b00      	cmp	r3, #0
    6244:	f000 8096 	beq.w	6374 <tcp_receive+0xaa8>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
    6248:	4b35      	ldr	r3, [pc, #212]	; (6320 <tcp_receive+0xa54>)
    624a:	781b      	ldrb	r3, [r3, #0]
    624c:	f043 0320 	orr.w	r3, r3, #32
    6250:	b2da      	uxtb	r2, r3
    6252:	4b33      	ldr	r3, [pc, #204]	; (6320 <tcp_receive+0xa54>)
    6254:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
    6256:	e08d      	b.n	6374 <tcp_receive+0xaa8>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
    6258:	687b      	ldr	r3, [r7, #4]
    625a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    625c:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
    625e:	687b      	ldr	r3, [r7, #4]
    6260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    6262:	68db      	ldr	r3, [r3, #12]
    6264:	685b      	ldr	r3, [r3, #4]
    6266:	4a2c      	ldr	r2, [pc, #176]	; (6318 <tcp_receive+0xa4c>)
    6268:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
    626a:	68bb      	ldr	r3, [r7, #8]
    626c:	891b      	ldrh	r3, [r3, #8]
    626e:	461c      	mov	r4, r3
    6270:	68bb      	ldr	r3, [r7, #8]
    6272:	68db      	ldr	r3, [r3, #12]
    6274:	899b      	ldrh	r3, [r3, #12]
    6276:	b29b      	uxth	r3, r3
    6278:	4618      	mov	r0, r3
    627a:	f000 ff41 	bl	7100 <lwip_ntohs>
    627e:	4603      	mov	r3, r0
    6280:	f003 0303 	and.w	r3, r3, #3
    6284:	2b00      	cmp	r3, #0
    6286:	bf14      	ite	ne
    6288:	2301      	movne	r3, #1
    628a:	2300      	moveq	r3, #0
    628c:	b2db      	uxtb	r3, r3
    628e:	18e2      	adds	r2, r4, r3
    6290:	687b      	ldr	r3, [r7, #4]
    6292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6294:	441a      	add	r2, r3
    6296:	687b      	ldr	r3, [r7, #4]
    6298:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
    629a:	68bb      	ldr	r3, [r7, #8]
    629c:	68db      	ldr	r3, [r3, #12]
    629e:	899b      	ldrh	r3, [r3, #12]
    62a0:	b29b      	uxth	r3, r3
    62a2:	4618      	mov	r0, r3
    62a4:	f000 ff2c 	bl	7100 <lwip_ntohs>
    62a8:	4603      	mov	r3, r0
    62aa:	f003 0303 	and.w	r3, r3, #3
    62ae:	2b00      	cmp	r3, #0
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
    62b0:	68bb      	ldr	r3, [r7, #8]
    62b2:	891b      	ldrh	r3, [r3, #8]
    62b4:	461c      	mov	r4, r3
    62b6:	68bb      	ldr	r3, [r7, #8]
    62b8:	68db      	ldr	r3, [r3, #12]
    62ba:	899b      	ldrh	r3, [r3, #12]
    62bc:	b29b      	uxth	r3, r3
    62be:	4618      	mov	r0, r3
    62c0:	f000 ff1e 	bl	7100 <lwip_ntohs>
    62c4:	4603      	mov	r3, r0
    62c6:	f003 0303 	and.w	r3, r3, #3
    62ca:	2b00      	cmp	r3, #0
    62cc:	bf14      	ite	ne
    62ce:	2301      	movne	r3, #1
    62d0:	2300      	moveq	r3, #0
    62d2:	b2db      	uxtb	r3, r3
    62d4:	18e1      	adds	r1, r4, r3
    62d6:	687b      	ldr	r3, [r7, #4]
    62d8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    62da:	b28b      	uxth	r3, r1
    62dc:	1ad3      	subs	r3, r2, r3
    62de:	b29a      	uxth	r2, r3
    62e0:	687b      	ldr	r3, [r7, #4]
    62e2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
    62e4:	6878      	ldr	r0, [r7, #4]
    62e6:	f7fc fd3f 	bl	2d68 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
    62ea:	68bb      	ldr	r3, [r7, #8]
    62ec:	685b      	ldr	r3, [r3, #4]
    62ee:	891b      	ldrh	r3, [r3, #8]
    62f0:	2b00      	cmp	r3, #0
    62f2:	d01e      	beq.n	6332 <tcp_receive+0xa66>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            if (recv_data) {
    62f4:	4b09      	ldr	r3, [pc, #36]	; (631c <tcp_receive+0xa50>)
    62f6:	681b      	ldr	r3, [r3, #0]
    62f8:	2b00      	cmp	r3, #0
    62fa:	d013      	beq.n	6324 <tcp_receive+0xa58>
              pbuf_cat(recv_data, cseg->p);
    62fc:	4b07      	ldr	r3, [pc, #28]	; (631c <tcp_receive+0xa50>)
    62fe:	681a      	ldr	r2, [r3, #0]
    6300:	68bb      	ldr	r3, [r7, #8]
    6302:	685b      	ldr	r3, [r3, #4]
    6304:	4619      	mov	r1, r3
    6306:	4610      	mov	r0, r2
    6308:	f000 fd20 	bl	6d4c <pbuf_cat>
    630c:	e00e      	b.n	632c <tcp_receive+0xa60>
    630e:	bf00      	nop
    6310:	100011f0 	.word	0x100011f0
    6314:	10001212 	.word	0x10001212
    6318:	10001208 	.word	0x10001208
    631c:	10001218 	.word	0x10001218
    6320:	10001214 	.word	0x10001214
            } else {
              recv_data = cseg->p;
    6324:	68bb      	ldr	r3, [r7, #8]
    6326:	685b      	ldr	r3, [r3, #4]
    6328:	4a75      	ldr	r2, [pc, #468]	; (6500 <tcp_receive+0xc34>)
    632a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
    632c:	68bb      	ldr	r3, [r7, #8]
    632e:	2200      	movs	r2, #0
    6330:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
    6332:	68bb      	ldr	r3, [r7, #8]
    6334:	68db      	ldr	r3, [r3, #12]
    6336:	899b      	ldrh	r3, [r3, #12]
    6338:	b29b      	uxth	r3, r3
    633a:	4618      	mov	r0, r3
    633c:	f000 fee0 	bl	7100 <lwip_ntohs>
    6340:	4603      	mov	r3, r0
    6342:	f003 0301 	and.w	r3, r3, #1
    6346:	2b00      	cmp	r3, #0
    6348:	d00d      	beq.n	6366 <tcp_receive+0xa9a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
    634a:	4b6e      	ldr	r3, [pc, #440]	; (6504 <tcp_receive+0xc38>)
    634c:	781b      	ldrb	r3, [r3, #0]
    634e:	f043 0320 	orr.w	r3, r3, #32
    6352:	b2da      	uxtb	r2, r3
    6354:	4b6b      	ldr	r3, [pc, #428]	; (6504 <tcp_receive+0xc38>)
    6356:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
    6358:	687b      	ldr	r3, [r7, #4]
    635a:	7c1b      	ldrb	r3, [r3, #16]
    635c:	2b04      	cmp	r3, #4
    635e:	d102      	bne.n	6366 <tcp_receive+0xa9a>
              pcb->state = CLOSE_WAIT;
    6360:	687b      	ldr	r3, [r7, #4]
    6362:	2207      	movs	r2, #7
    6364:	741a      	strb	r2, [r3, #16]
            } 
          }

          pcb->ooseq = cseg->next;
    6366:	68bb      	ldr	r3, [r7, #8]
    6368:	681a      	ldr	r2, [r3, #0]
    636a:	687b      	ldr	r3, [r7, #4]
    636c:	67da      	str	r2, [r3, #124]	; 0x7c
          tcp_seg_free(cseg);
    636e:	68b8      	ldr	r0, [r7, #8]
    6370:	f7fd f8ea 	bl	3548 <tcp_seg_free>
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
    6374:	687b      	ldr	r3, [r7, #4]
    6376:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    6378:	2b00      	cmp	r3, #0
    637a:	d008      	beq.n	638e <tcp_receive+0xac2>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
    637c:	687b      	ldr	r3, [r7, #4]
    637e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    6380:	68db      	ldr	r3, [r3, #12]
    6382:	685a      	ldr	r2, [r3, #4]
    6384:	687b      	ldr	r3, [r7, #4]
    6386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
    6388:	429a      	cmp	r2, r3
    638a:	f43f af65 	beq.w	6258 <tcp_receive+0x98c>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
    638e:	687b      	ldr	r3, [r7, #4]
    6390:	f893 3020 	ldrb.w	r3, [r3, #32]
    6394:	f003 0301 	and.w	r3, r3, #1
    6398:	2b00      	cmp	r3, #0
    639a:	d012      	beq.n	63c2 <tcp_receive+0xaf6>
    639c:	687b      	ldr	r3, [r7, #4]
    639e:	f893 3020 	ldrb.w	r3, [r3, #32]
    63a2:	f023 0301 	bic.w	r3, r3, #1
    63a6:	b2da      	uxtb	r2, r3
    63a8:	687b      	ldr	r3, [r7, #4]
    63aa:	f883 2020 	strb.w	r2, [r3, #32]
    63ae:	687b      	ldr	r3, [r7, #4]
    63b0:	f893 3020 	ldrb.w	r3, [r3, #32]
    63b4:	f043 0302 	orr.w	r3, r3, #2
    63b8:	b2da      	uxtb	r2, r3
    63ba:	687b      	ldr	r3, [r7, #4]
    63bc:	f883 2020 	strb.w	r2, [r3, #32]
    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
    63c0:	e18d      	b.n	66de <tcp_receive+0xe12>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
    63c2:	687b      	ldr	r3, [r7, #4]
    63c4:	f893 3020 	ldrb.w	r3, [r3, #32]
    63c8:	f043 0301 	orr.w	r3, r3, #1
    63cc:	b2da      	uxtb	r2, r3
    63ce:	687b      	ldr	r3, [r7, #4]
    63d0:	f883 2020 	strb.w	r2, [r3, #32]
    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
    63d4:	e183      	b.n	66de <tcp_receive+0xe12>
        /* Acknowledge the segment(s). */
        tcp_ack(pcb);

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
    63d6:	6878      	ldr	r0, [r7, #4]
    63d8:	f7fd fd6a 	bl	3eb0 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
    63dc:	687b      	ldr	r3, [r7, #4]
    63de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    63e0:	2b00      	cmp	r3, #0
    63e2:	d106      	bne.n	63f2 <tcp_receive+0xb26>
          pcb->ooseq = tcp_seg_copy(&inseg);
    63e4:	4848      	ldr	r0, [pc, #288]	; (6508 <tcp_receive+0xc3c>)
    63e6:	f7fd f8d5 	bl	3594 <tcp_seg_copy>
    63ea:	4602      	mov	r2, r0
    63ec:	687b      	ldr	r3, [r7, #4]
    63ee:	67da      	str	r2, [r3, #124]	; 0x7c
    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
    63f0:	e175      	b.n	66de <tcp_receive+0xe12>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
    63f2:	2300      	movs	r3, #0
    63f4:	62bb      	str	r3, [r7, #40]	; 0x28
          for(next = pcb->ooseq; next != NULL; next = next->next) {
    63f6:	687b      	ldr	r3, [r7, #4]
    63f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    63fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    63fc:	e13e      	b.n	667c <tcp_receive+0xdb0>
            if (seqno == next->tcphdr->seqno) {
    63fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6400:	68db      	ldr	r3, [r3, #12]
    6402:	685a      	ldr	r2, [r3, #4]
    6404:	4b41      	ldr	r3, [pc, #260]	; (650c <tcp_receive+0xc40>)
    6406:	681b      	ldr	r3, [r3, #0]
    6408:	429a      	cmp	r2, r3
    640a:	d11d      	bne.n	6448 <tcp_receive+0xb7c>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
    640c:	4b3e      	ldr	r3, [pc, #248]	; (6508 <tcp_receive+0xc3c>)
    640e:	891a      	ldrh	r2, [r3, #8]
    6410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6412:	891b      	ldrh	r3, [r3, #8]
    6414:	429a      	cmp	r2, r3
    6416:	f240 8136 	bls.w	6686 <tcp_receive+0xdba>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
    641a:	483b      	ldr	r0, [pc, #236]	; (6508 <tcp_receive+0xc3c>)
    641c:	f7fd f8ba 	bl	3594 <tcp_seg_copy>
    6420:	60b8      	str	r0, [r7, #8]
                if (cseg != NULL) {
    6422:	68bb      	ldr	r3, [r7, #8]
    6424:	2b00      	cmp	r3, #0
    6426:	f000 8130 	beq.w	668a <tcp_receive+0xdbe>
                  if (prev != NULL) {
    642a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    642c:	2b00      	cmp	r3, #0
    642e:	d003      	beq.n	6438 <tcp_receive+0xb6c>
                    prev->next = cseg;
    6430:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6432:	68ba      	ldr	r2, [r7, #8]
    6434:	601a      	str	r2, [r3, #0]
    6436:	e002      	b.n	643e <tcp_receive+0xb72>
                  } else {
                    pcb->ooseq = cseg;
    6438:	687b      	ldr	r3, [r7, #4]
    643a:	68ba      	ldr	r2, [r7, #8]
    643c:	67da      	str	r2, [r3, #124]	; 0x7c
                  }
                  tcp_oos_insert_segment(cseg, next);
    643e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    6440:	68b8      	ldr	r0, [r7, #8]
    6442:	f7ff f9cd 	bl	57e0 <tcp_oos_insert_segment>
                }
                break;
    6446:	e120      	b.n	668a <tcp_receive+0xdbe>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
    6448:	6abb      	ldr	r3, [r7, #40]	; 0x28
    644a:	2b00      	cmp	r3, #0
    644c:	d117      	bne.n	647e <tcp_receive+0xbb2>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
    644e:	4b2f      	ldr	r3, [pc, #188]	; (650c <tcp_receive+0xc40>)
    6450:	681a      	ldr	r2, [r3, #0]
    6452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6454:	68db      	ldr	r3, [r3, #12]
    6456:	685b      	ldr	r3, [r3, #4]
    6458:	1ad3      	subs	r3, r2, r3
    645a:	2b00      	cmp	r3, #0
    645c:	da58      	bge.n	6510 <tcp_receive+0xc44>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
    645e:	482a      	ldr	r0, [pc, #168]	; (6508 <tcp_receive+0xc3c>)
    6460:	f7fd f898 	bl	3594 <tcp_seg_copy>
    6464:	60b8      	str	r0, [r7, #8]
                  if (cseg != NULL) {
    6466:	68bb      	ldr	r3, [r7, #8]
    6468:	2b00      	cmp	r3, #0
    646a:	f000 8110 	beq.w	668e <tcp_receive+0xdc2>
                    pcb->ooseq = cseg;
    646e:	687b      	ldr	r3, [r7, #4]
    6470:	68ba      	ldr	r2, [r7, #8]
    6472:	67da      	str	r2, [r3, #124]	; 0x7c
                    tcp_oos_insert_segment(cseg, next);
    6474:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    6476:	68b8      	ldr	r0, [r7, #8]
    6478:	f7ff f9b2 	bl	57e0 <tcp_oos_insert_segment>
                  }
                  break;
    647c:	e107      	b.n	668e <tcp_receive+0xdc2>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
    647e:	4b23      	ldr	r3, [pc, #140]	; (650c <tcp_receive+0xc40>)
    6480:	681a      	ldr	r2, [r3, #0]
    6482:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6484:	68db      	ldr	r3, [r3, #12]
    6486:	685b      	ldr	r3, [r3, #4]
    6488:	1ad3      	subs	r3, r2, r3
    648a:	3b01      	subs	r3, #1
    648c:	2b00      	cmp	r3, #0
    648e:	db3f      	blt.n	6510 <tcp_receive+0xc44>
    6490:	4b1e      	ldr	r3, [pc, #120]	; (650c <tcp_receive+0xc40>)
    6492:	681a      	ldr	r2, [r3, #0]
    6494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6496:	68db      	ldr	r3, [r3, #12]
    6498:	685b      	ldr	r3, [r3, #4]
    649a:	1ad3      	subs	r3, r2, r3
    649c:	3301      	adds	r3, #1
    649e:	2b00      	cmp	r3, #0
    64a0:	dc36      	bgt.n	6510 <tcp_receive+0xc44>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
    64a2:	4819      	ldr	r0, [pc, #100]	; (6508 <tcp_receive+0xc3c>)
    64a4:	f7fd f876 	bl	3594 <tcp_seg_copy>
    64a8:	60b8      	str	r0, [r7, #8]
                  if (cseg != NULL) {
    64aa:	68bb      	ldr	r3, [r7, #8]
    64ac:	2b00      	cmp	r3, #0
    64ae:	f000 80f0 	beq.w	6692 <tcp_receive+0xdc6>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
    64b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    64b4:	68db      	ldr	r3, [r3, #12]
    64b6:	685b      	ldr	r3, [r3, #4]
    64b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    64ba:	8912      	ldrh	r2, [r2, #8]
    64bc:	441a      	add	r2, r3
    64be:	4b13      	ldr	r3, [pc, #76]	; (650c <tcp_receive+0xc40>)
    64c0:	681b      	ldr	r3, [r3, #0]
    64c2:	1ad3      	subs	r3, r2, r3
    64c4:	2b00      	cmp	r3, #0
    64c6:	dd12      	ble.n	64ee <tcp_receive+0xc22>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
    64c8:	4b10      	ldr	r3, [pc, #64]	; (650c <tcp_receive+0xc40>)
    64ca:	681b      	ldr	r3, [r3, #0]
    64cc:	b29a      	uxth	r2, r3
    64ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    64d0:	68db      	ldr	r3, [r3, #12]
    64d2:	685b      	ldr	r3, [r3, #4]
    64d4:	b29b      	uxth	r3, r3
    64d6:	1ad3      	subs	r3, r2, r3
    64d8:	b29a      	uxth	r2, r3
    64da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    64dc:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
    64de:	6abb      	ldr	r3, [r7, #40]	; 0x28
    64e0:	685a      	ldr	r2, [r3, #4]
    64e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    64e4:	891b      	ldrh	r3, [r3, #8]
    64e6:	4619      	mov	r1, r3
    64e8:	4610      	mov	r0, r2
    64ea:	f000 fad9 	bl	6aa0 <pbuf_realloc>
                    }
                    prev->next = cseg;
    64ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    64f0:	68ba      	ldr	r2, [r7, #8]
    64f2:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
    64f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    64f6:	68b8      	ldr	r0, [r7, #8]
    64f8:	f7ff f972 	bl	57e0 <tcp_oos_insert_segment>
                  }
                  break;
    64fc:	e0c9      	b.n	6692 <tcp_receive+0xdc6>
    64fe:	bf00      	nop
    6500:	10001218 	.word	0x10001218
    6504:	10001214 	.word	0x10001214
    6508:	100011f0 	.word	0x100011f0
    650c:	10001208 	.word	0x10001208
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
    6510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6512:	681b      	ldr	r3, [r3, #0]
    6514:	2b00      	cmp	r3, #0
    6516:	f040 80ac 	bne.w	6672 <tcp_receive+0xda6>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
    651a:	4b73      	ldr	r3, [pc, #460]	; (66e8 <tcp_receive+0xe1c>)
    651c:	681a      	ldr	r2, [r3, #0]
    651e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6520:	68db      	ldr	r3, [r3, #12]
    6522:	685b      	ldr	r3, [r3, #4]
    6524:	1ad3      	subs	r3, r2, r3
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
    6526:	2b00      	cmp	r3, #0
    6528:	f340 80a3 	ble.w	6672 <tcp_receive+0xda6>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
    652c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    652e:	68db      	ldr	r3, [r3, #12]
    6530:	899b      	ldrh	r3, [r3, #12]
    6532:	b29b      	uxth	r3, r3
    6534:	4618      	mov	r0, r3
    6536:	f000 fde3 	bl	7100 <lwip_ntohs>
    653a:	4603      	mov	r3, r0
    653c:	f003 0301 	and.w	r3, r3, #1
    6540:	2b00      	cmp	r3, #0
    6542:	f040 80a8 	bne.w	6696 <tcp_receive+0xdca>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
    6546:	4869      	ldr	r0, [pc, #420]	; (66ec <tcp_receive+0xe20>)
    6548:	f7fd f824 	bl	3594 <tcp_seg_copy>
    654c:	4602      	mov	r2, r0
    654e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6550:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
    6552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6554:	681b      	ldr	r3, [r3, #0]
    6556:	2b00      	cmp	r3, #0
    6558:	f000 809f 	beq.w	669a <tcp_receive+0xdce>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
    655c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    655e:	68db      	ldr	r3, [r3, #12]
    6560:	685b      	ldr	r3, [r3, #4]
    6562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    6564:	8912      	ldrh	r2, [r2, #8]
    6566:	441a      	add	r2, r3
    6568:	4b5f      	ldr	r3, [pc, #380]	; (66e8 <tcp_receive+0xe1c>)
    656a:	681b      	ldr	r3, [r3, #0]
    656c:	1ad3      	subs	r3, r2, r3
    656e:	2b00      	cmp	r3, #0
    6570:	dd12      	ble.n	6598 <tcp_receive+0xccc>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
    6572:	4b5d      	ldr	r3, [pc, #372]	; (66e8 <tcp_receive+0xe1c>)
    6574:	681b      	ldr	r3, [r3, #0]
    6576:	b29a      	uxth	r2, r3
    6578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    657a:	68db      	ldr	r3, [r3, #12]
    657c:	685b      	ldr	r3, [r3, #4]
    657e:	b29b      	uxth	r3, r3
    6580:	1ad3      	subs	r3, r2, r3
    6582:	b29a      	uxth	r2, r3
    6584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6586:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
    6588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    658a:	685a      	ldr	r2, [r3, #4]
    658c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    658e:	891b      	ldrh	r3, [r3, #8]
    6590:	4619      	mov	r1, r3
    6592:	4610      	mov	r0, r2
    6594:	f000 fa84 	bl	6aa0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if ((u32_t)tcplen + seqno > pcb->rcv_nxt + (u32_t)pcb->rcv_wnd) {
    6598:	4b55      	ldr	r3, [pc, #340]	; (66f0 <tcp_receive+0xe24>)
    659a:	881b      	ldrh	r3, [r3, #0]
    659c:	461a      	mov	r2, r3
    659e:	4b52      	ldr	r3, [pc, #328]	; (66e8 <tcp_receive+0xe1c>)
    65a0:	681b      	ldr	r3, [r3, #0]
    65a2:	441a      	add	r2, r3
    65a4:	687b      	ldr	r3, [r7, #4]
    65a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    65a8:	6879      	ldr	r1, [r7, #4]
    65aa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
    65ac:	440b      	add	r3, r1
    65ae:	429a      	cmp	r2, r3
    65b0:	d973      	bls.n	669a <tcp_receive+0xdce>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
    65b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    65b4:	681b      	ldr	r3, [r3, #0]
    65b6:	68db      	ldr	r3, [r3, #12]
    65b8:	899b      	ldrh	r3, [r3, #12]
    65ba:	b29b      	uxth	r3, r3
    65bc:	4618      	mov	r0, r3
    65be:	f000 fd9f 	bl	7100 <lwip_ntohs>
    65c2:	4603      	mov	r3, r0
    65c4:	f003 0301 	and.w	r3, r3, #1
    65c8:	2b00      	cmp	r3, #0
    65ca:	d020      	beq.n	660e <tcp_receive+0xd42>
                      /* Must remove the FIN from the header as we're trimming 
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) &~ TCP_FIN);
    65cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    65ce:	681b      	ldr	r3, [r3, #0]
    65d0:	68dc      	ldr	r4, [r3, #12]
    65d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    65d4:	681b      	ldr	r3, [r3, #0]
    65d6:	68db      	ldr	r3, [r3, #12]
    65d8:	899b      	ldrh	r3, [r3, #12]
    65da:	b29b      	uxth	r3, r3
    65dc:	b21b      	sxth	r3, r3
    65de:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    65e2:	b21d      	sxth	r5, r3
    65e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    65e6:	681b      	ldr	r3, [r3, #0]
    65e8:	68db      	ldr	r3, [r3, #12]
    65ea:	899b      	ldrh	r3, [r3, #12]
    65ec:	b29b      	uxth	r3, r3
    65ee:	4618      	mov	r0, r3
    65f0:	f000 fd86 	bl	7100 <lwip_ntohs>
    65f4:	4603      	mov	r3, r0
    65f6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
    65fa:	b29b      	uxth	r3, r3
    65fc:	4618      	mov	r0, r3
    65fe:	f000 fd6b 	bl	70d8 <lwip_htons>
    6602:	4603      	mov	r3, r0
    6604:	b21b      	sxth	r3, r3
    6606:	432b      	orrs	r3, r5
    6608:	b21b      	sxth	r3, r3
    660a:	b29b      	uxth	r3, r3
    660c:	81a3      	strh	r3, [r4, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = pcb->rcv_nxt + pcb->rcv_wnd - seqno;
    660e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6610:	681b      	ldr	r3, [r3, #0]
    6612:	687a      	ldr	r2, [r7, #4]
    6614:	6a52      	ldr	r2, [r2, #36]	; 0x24
    6616:	b291      	uxth	r1, r2
    6618:	687a      	ldr	r2, [r7, #4]
    661a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
    661c:	440a      	add	r2, r1
    661e:	b291      	uxth	r1, r2
    6620:	4a31      	ldr	r2, [pc, #196]	; (66e8 <tcp_receive+0xe1c>)
    6622:	6812      	ldr	r2, [r2, #0]
    6624:	b292      	uxth	r2, r2
    6626:	1a8a      	subs	r2, r1, r2
    6628:	b292      	uxth	r2, r2
    662a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
    662c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    662e:	681b      	ldr	r3, [r3, #0]
    6630:	685a      	ldr	r2, [r3, #4]
    6632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6634:	681b      	ldr	r3, [r3, #0]
    6636:	891b      	ldrh	r3, [r3, #8]
    6638:	4619      	mov	r1, r3
    663a:	4610      	mov	r0, r2
    663c:	f000 fa30 	bl	6aa0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
    6640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6642:	681b      	ldr	r3, [r3, #0]
    6644:	891c      	ldrh	r4, [r3, #8]
    6646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6648:	681b      	ldr	r3, [r3, #0]
    664a:	68db      	ldr	r3, [r3, #12]
    664c:	899b      	ldrh	r3, [r3, #12]
    664e:	b29b      	uxth	r3, r3
    6650:	4618      	mov	r0, r3
    6652:	f000 fd55 	bl	7100 <lwip_ntohs>
    6656:	4603      	mov	r3, r0
    6658:	f003 0303 	and.w	r3, r3, #3
    665c:	2b00      	cmp	r3, #0
    665e:	bf14      	ite	ne
    6660:	2301      	movne	r3, #1
    6662:	2300      	moveq	r3, #0
    6664:	b2db      	uxtb	r3, r3
    6666:	b29b      	uxth	r3, r3
    6668:	4423      	add	r3, r4
    666a:	b29a      	uxth	r2, r3
    666c:	4b20      	ldr	r3, [pc, #128]	; (66f0 <tcp_receive+0xe24>)
    666e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
    6670:	e013      	b.n	669a <tcp_receive+0xdce>
              }
            }
            prev = next;
    6672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6674:	62bb      	str	r3, [r7, #40]	; 0x28
             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
          for(next = pcb->ooseq; next != NULL; next = next->next) {
    6676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6678:	681b      	ldr	r3, [r3, #0]
    667a:	62fb      	str	r3, [r7, #44]	; 0x2c
    667c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    667e:	2b00      	cmp	r3, #0
    6680:	f47f aebd 	bne.w	63fe <tcp_receive+0xb32>
    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
    6684:	e02b      	b.n	66de <tcp_receive+0xe12>
                break;
              } else {
                /* Either the lenghts are the same or the incoming
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
    6686:	bf00      	nop
    6688:	e029      	b.n	66de <tcp_receive+0xe12>
                  } else {
                    pcb->ooseq = cseg;
                  }
                  tcp_oos_insert_segment(cseg, next);
                }
                break;
    668a:	bf00      	nop
    668c:	e027      	b.n	66de <tcp_receive+0xe12>
                  cseg = tcp_seg_copy(&inseg);
                  if (cseg != NULL) {
                    pcb->ooseq = cseg;
                    tcp_oos_insert_segment(cseg, next);
                  }
                  break;
    668e:	bf00      	nop
    6690:	e025      	b.n	66de <tcp_receive+0xe12>
                      pbuf_realloc(prev->p, prev->len);
                    }
                    prev->next = cseg;
                    tcp_oos_insert_segment(cseg, next);
                  }
                  break;
    6692:	bf00      	nop
    6694:	e023      	b.n	66de <tcp_receive+0xe12>
                 of the list. */
              if (next->next == NULL &&
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
                  /* segment "next" already contains all data */
                  break;
    6696:	bf00      	nop
    6698:	e021      	b.n	66de <tcp_receive+0xe12>
                    tcplen = TCP_TCPLEN(next->next);
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
    669a:	bf00      	nop
    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
    669c:	e01f      	b.n	66de <tcp_receive+0xe12>
#endif /* TCP_QUEUE_OOSEQ */

      }
    } else {
      /* The incoming segment is not withing the window. */
      tcp_send_empty_ack(pcb);
    669e:	6878      	ldr	r0, [r7, #4]
    66a0:	f7fd fc06 	bl	3eb0 <tcp_send_empty_ack>
      TCP_SEQ_GEQ(seqno, pcb->rcv_nxt + pcb->rcv_wnd)) {*/
    if(!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd-1)){
      tcp_ack_now(pcb);
    }
  }
}
    66a4:	e01b      	b.n	66de <tcp_receive+0xe12>
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    /*if (TCP_SEQ_GT(pcb->rcv_nxt, seqno) ||
      TCP_SEQ_GEQ(seqno, pcb->rcv_nxt + pcb->rcv_wnd)) {*/
    if(!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd-1)){
    66a6:	4b10      	ldr	r3, [pc, #64]	; (66e8 <tcp_receive+0xe1c>)
    66a8:	681a      	ldr	r2, [r3, #0]
    66aa:	687b      	ldr	r3, [r7, #4]
    66ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    66ae:	1ad3      	subs	r3, r2, r3
    66b0:	2b00      	cmp	r3, #0
    66b2:	db0a      	blt.n	66ca <tcp_receive+0xdfe>
    66b4:	4b0c      	ldr	r3, [pc, #48]	; (66e8 <tcp_receive+0xe1c>)
    66b6:	681a      	ldr	r2, [r3, #0]
    66b8:	687b      	ldr	r3, [r7, #4]
    66ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    66bc:	6879      	ldr	r1, [r7, #4]
    66be:	8d09      	ldrh	r1, [r1, #40]	; 0x28
    66c0:	440b      	add	r3, r1
    66c2:	1ad3      	subs	r3, r2, r3
    66c4:	3301      	adds	r3, #1
    66c6:	2b00      	cmp	r3, #0
    66c8:	dd09      	ble.n	66de <tcp_receive+0xe12>
      tcp_ack_now(pcb);
    66ca:	687b      	ldr	r3, [r7, #4]
    66cc:	f893 3020 	ldrb.w	r3, [r3, #32]
    66d0:	f043 0302 	orr.w	r3, r3, #2
    66d4:	b2da      	uxtb	r2, r3
    66d6:	687b      	ldr	r3, [r7, #4]
    66d8:	f883 2020 	strb.w	r2, [r3, #32]
    }
  }
}
    66dc:	e7ff      	b.n	66de <tcp_receive+0xe12>
    66de:	bf00      	nop
    66e0:	3734      	adds	r7, #52	; 0x34
    66e2:	46bd      	mov	sp, r7
    66e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    66e6:	bf00      	nop
    66e8:	10001208 	.word	0x10001208
    66ec:	100011f0 	.word	0x100011f0
    66f0:	10001212 	.word	0x10001212

000066f4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
    66f4:	b580      	push	{r7, lr}
    66f6:	b086      	sub	sp, #24
    66f8:	af00      	add	r7, sp, #0
    66fa:	6078      	str	r0, [r7, #4]
  u8_t *opts, opt;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  opts = (u8_t *)tcphdr + TCP_HLEN;
    66fc:	4b3d      	ldr	r3, [pc, #244]	; (67f4 <tcp_parseopt+0x100>)
    66fe:	681b      	ldr	r3, [r3, #0]
    6700:	3314      	adds	r3, #20
    6702:	613b      	str	r3, [r7, #16]

  /* Parse the TCP MSS option, if present. */
  if(TCPH_HDRLEN(tcphdr) > 0x5) {
    6704:	4b3b      	ldr	r3, [pc, #236]	; (67f4 <tcp_parseopt+0x100>)
    6706:	681b      	ldr	r3, [r3, #0]
    6708:	899b      	ldrh	r3, [r3, #12]
    670a:	b29b      	uxth	r3, r3
    670c:	4618      	mov	r0, r3
    670e:	f000 fcf7 	bl	7100 <lwip_ntohs>
    6712:	4603      	mov	r3, r0
    6714:	0b1b      	lsrs	r3, r3, #12
    6716:	b29b      	uxth	r3, r3
    6718:	2b05      	cmp	r3, #5
    671a:	d968      	bls.n	67ee <tcp_parseopt+0xfa>
    max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
    671c:	4b35      	ldr	r3, [pc, #212]	; (67f4 <tcp_parseopt+0x100>)
    671e:	681b      	ldr	r3, [r3, #0]
    6720:	899b      	ldrh	r3, [r3, #12]
    6722:	b29b      	uxth	r3, r3
    6724:	4618      	mov	r0, r3
    6726:	f000 fceb 	bl	7100 <lwip_ntohs>
    672a:	4603      	mov	r3, r0
    672c:	0b1b      	lsrs	r3, r3, #12
    672e:	b29b      	uxth	r3, r3
    6730:	3b05      	subs	r3, #5
    6732:	b29b      	uxth	r3, r3
    6734:	009b      	lsls	r3, r3, #2
    6736:	81fb      	strh	r3, [r7, #14]
    for (c = 0; c < max_c; ) {
    6738:	2300      	movs	r3, #0
    673a:	82fb      	strh	r3, [r7, #22]
    673c:	e04d      	b.n	67da <tcp_parseopt+0xe6>
      opt = opts[c];
    673e:	8afb      	ldrh	r3, [r7, #22]
    6740:	693a      	ldr	r2, [r7, #16]
    6742:	4413      	add	r3, r2
    6744:	781b      	ldrb	r3, [r3, #0]
    6746:	737b      	strb	r3, [r7, #13]
      switch (opt) {
    6748:	7b7b      	ldrb	r3, [r7, #13]
    674a:	2b01      	cmp	r3, #1
    674c:	d004      	beq.n	6758 <tcp_parseopt+0x64>
    674e:	2b02      	cmp	r3, #2
    6750:	d006      	beq.n	6760 <tcp_parseopt+0x6c>
    6752:	2b00      	cmp	r3, #0
    6754:	d046      	beq.n	67e4 <tcp_parseopt+0xf0>
    6756:	e030      	b.n	67ba <tcp_parseopt+0xc6>
        /* End of options. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
      case 0x01:
        /* NOP option. */
        ++c;
    6758:	8afb      	ldrh	r3, [r7, #22]
    675a:	3301      	adds	r3, #1
    675c:	82fb      	strh	r3, [r7, #22]
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
    675e:	e03c      	b.n	67da <tcp_parseopt+0xe6>
      case 0x02:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (opts[c + 1] != 0x04 || c + 0x04 > max_c) {
    6760:	8afb      	ldrh	r3, [r7, #22]
    6762:	3301      	adds	r3, #1
    6764:	693a      	ldr	r2, [r7, #16]
    6766:	4413      	add	r3, r2
    6768:	781b      	ldrb	r3, [r3, #0]
    676a:	2b04      	cmp	r3, #4
    676c:	d13c      	bne.n	67e8 <tcp_parseopt+0xf4>
    676e:	8afb      	ldrh	r3, [r7, #22]
    6770:	1d1a      	adds	r2, r3, #4
    6772:	89fb      	ldrh	r3, [r7, #14]
    6774:	429a      	cmp	r2, r3
    6776:	dc37      	bgt.n	67e8 <tcp_parseopt+0xf4>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (opts[c + 2] << 8) | opts[c + 3];
    6778:	8afb      	ldrh	r3, [r7, #22]
    677a:	3302      	adds	r3, #2
    677c:	693a      	ldr	r2, [r7, #16]
    677e:	4413      	add	r3, r2
    6780:	781b      	ldrb	r3, [r3, #0]
    6782:	021b      	lsls	r3, r3, #8
    6784:	b21a      	sxth	r2, r3
    6786:	8afb      	ldrh	r3, [r7, #22]
    6788:	3303      	adds	r3, #3
    678a:	6939      	ldr	r1, [r7, #16]
    678c:	440b      	add	r3, r1
    678e:	781b      	ldrb	r3, [r3, #0]
    6790:	b21b      	sxth	r3, r3
    6792:	4313      	orrs	r3, r2
    6794:	b21b      	sxth	r3, r3
    6796:	817b      	strh	r3, [r7, #10]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
    6798:	897b      	ldrh	r3, [r7, #10]
    679a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
    679e:	d804      	bhi.n	67aa <tcp_parseopt+0xb6>
    67a0:	897b      	ldrh	r3, [r7, #10]
    67a2:	2b00      	cmp	r3, #0
    67a4:	d001      	beq.n	67aa <tcp_parseopt+0xb6>
    67a6:	897a      	ldrh	r2, [r7, #10]
    67a8:	e001      	b.n	67ae <tcp_parseopt+0xba>
    67aa:	f44f 7206 	mov.w	r2, #536	; 0x218
    67ae:	687b      	ldr	r3, [r7, #4]
    67b0:	871a      	strh	r2, [r3, #56]	; 0x38
        /* Advance to next option */
        c += 0x04;
    67b2:	8afb      	ldrh	r3, [r7, #22]
    67b4:	3304      	adds	r3, #4
    67b6:	82fb      	strh	r3, [r7, #22]
        break;
    67b8:	e00f      	b.n	67da <tcp_parseopt+0xe6>
        c += 0x0A;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        if (opts[c + 1] == 0) {
    67ba:	8afb      	ldrh	r3, [r7, #22]
    67bc:	3301      	adds	r3, #1
    67be:	693a      	ldr	r2, [r7, #16]
    67c0:	4413      	add	r3, r2
    67c2:	781b      	ldrb	r3, [r3, #0]
    67c4:	2b00      	cmp	r3, #0
    67c6:	d011      	beq.n	67ec <tcp_parseopt+0xf8>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        c += opts[c + 1];
    67c8:	8afb      	ldrh	r3, [r7, #22]
    67ca:	3301      	adds	r3, #1
    67cc:	693a      	ldr	r2, [r7, #16]
    67ce:	4413      	add	r3, r2
    67d0:	781b      	ldrb	r3, [r3, #0]
    67d2:	b29a      	uxth	r2, r3
    67d4:	8afb      	ldrh	r3, [r7, #22]
    67d6:	4413      	add	r3, r2
    67d8:	82fb      	strh	r3, [r7, #22]
  opts = (u8_t *)tcphdr + TCP_HLEN;

  /* Parse the TCP MSS option, if present. */
  if(TCPH_HDRLEN(tcphdr) > 0x5) {
    max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
    for (c = 0; c < max_c; ) {
    67da:	8afa      	ldrh	r2, [r7, #22]
    67dc:	89fb      	ldrh	r3, [r7, #14]
    67de:	429a      	cmp	r2, r3
    67e0:	d3ad      	bcc.n	673e <tcp_parseopt+0x4a>
    67e2:	e004      	b.n	67ee <tcp_parseopt+0xfa>
      opt = opts[c];
      switch (opt) {
      case 0x00:
        /* End of options. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
    67e4:	bf00      	nop
    67e6:	e002      	b.n	67ee <tcp_parseopt+0xfa>
      case 0x02:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (opts[c + 1] != 0x04 || c + 0x04 > max_c) {
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
    67e8:	bf00      	nop
    67ea:	e000      	b.n	67ee <tcp_parseopt+0xfa>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        if (opts[c + 1] == 0) {
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          /* If the length field is zero, the options are malformed
             and we don't process them further. */
          return;
    67ec:	bf00      	nop
           can skip past them. */
        c += opts[c + 1];
      }
    }
  }
}
    67ee:	3718      	adds	r7, #24
    67f0:	46bd      	mov	sp, r7
    67f2:	bd80      	pop	{r7, pc}
    67f4:	10001200 	.word	0x10001200

000067f8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
    67f8:	b580      	push	{r7, lr}
    67fa:	b088      	sub	sp, #32
    67fc:	af00      	add	r7, sp, #0
    67fe:	4603      	mov	r3, r0
    6800:	71fb      	strb	r3, [r7, #7]
    6802:	460b      	mov	r3, r1
    6804:	80bb      	strh	r3, [r7, #4]
    6806:	4613      	mov	r3, r2
    6808:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  offset = 0;
    680a:	2300      	movs	r3, #0
    680c:	82fb      	strh	r3, [r7, #22]
  switch (layer) {
    680e:	79fb      	ldrb	r3, [r7, #7]
    6810:	2b03      	cmp	r3, #3
    6812:	d815      	bhi.n	6840 <pbuf_alloc+0x48>
    6814:	a201      	add	r2, pc, #4	; (adr r2, 681c <pbuf_alloc+0x24>)
    6816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    681a:	bf00      	nop
    681c:	0000682d 	.word	0x0000682d
    6820:	00006833 	.word	0x00006833
    6824:	00006839 	.word	0x00006839
    6828:	00006845 	.word	0x00006845
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset += PBUF_TRANSPORT_HLEN;
    682c:	8afb      	ldrh	r3, [r7, #22]
    682e:	3314      	adds	r3, #20
    6830:	82fb      	strh	r3, [r7, #22]
    /* FALLTHROUGH */
  case PBUF_IP:
    /* add room for IP layer header */
    offset += PBUF_IP_HLEN;
    6832:	8afb      	ldrh	r3, [r7, #22]
    6834:	3314      	adds	r3, #20
    6836:	82fb      	strh	r3, [r7, #22]
    /* FALLTHROUGH */
  case PBUF_LINK:
    /* add room for link layer header */
    offset += PBUF_LINK_HLEN;
    6838:	8afb      	ldrh	r3, [r7, #22]
    683a:	3310      	adds	r3, #16
    683c:	82fb      	strh	r3, [r7, #22]
    break;
    683e:	e002      	b.n	6846 <pbuf_alloc+0x4e>
  case PBUF_RAW:
    break;
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
    return NULL;
    6840:	2300      	movs	r3, #0
    6842:	e0cd      	b.n	69e0 <pbuf_alloc+0x1e8>
  case PBUF_LINK:
    /* add room for link layer header */
    offset += PBUF_LINK_HLEN;
    break;
  case PBUF_RAW:
    break;
    6844:	bf00      	nop
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
    return NULL;
  }

  switch (type) {
    6846:	79bb      	ldrb	r3, [r7, #6]
    6848:	2b03      	cmp	r3, #3
    684a:	f200 80c0 	bhi.w	69ce <pbuf_alloc+0x1d6>
    684e:	a201      	add	r2, pc, #4	; (adr r2, 6854 <pbuf_alloc+0x5c>)
    6850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6854:	0000693d 	.word	0x0000693d
    6858:	0000699b 	.word	0x0000699b
    685c:	0000699b 	.word	0x0000699b
    6860:	00006865 	.word	0x00006865
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
    6864:	2009      	movs	r0, #9
    6866:	f7fb ff0f 	bl	2688 <memp_malloc>
    686a:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
    686c:	69fb      	ldr	r3, [r7, #28]
    686e:	2b00      	cmp	r3, #0
    6870:	d101      	bne.n	6876 <pbuf_alloc+0x7e>
      PBUF_POOL_IS_EMPTY();
      return NULL;
    6872:	2300      	movs	r3, #0
    6874:	e0b4      	b.n	69e0 <pbuf_alloc+0x1e8>
    }
    p->type = type;
    6876:	69fb      	ldr	r3, [r7, #28]
    6878:	79ba      	ldrb	r2, [r7, #6]
    687a:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
    687c:	69fb      	ldr	r3, [r7, #28]
    687e:	2200      	movs	r2, #0
    6880:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
    6882:	8afb      	ldrh	r3, [r7, #22]
    6884:	3310      	adds	r3, #16
    6886:	69fa      	ldr	r2, [r7, #28]
    6888:	4413      	add	r3, r2
    688a:	3303      	adds	r3, #3
    688c:	f023 0303 	bic.w	r3, r3, #3
    6890:	461a      	mov	r2, r3
    6892:	69fb      	ldr	r3, [r7, #28]
    6894:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
    6896:	69fb      	ldr	r3, [r7, #28]
    6898:	88ba      	ldrh	r2, [r7, #4]
    689a:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
    689c:	8afb      	ldrh	r3, [r7, #22]
    689e:	3303      	adds	r3, #3
    68a0:	f023 0303 	bic.w	r3, r3, #3
    68a4:	f1c3 0248 	rsb	r2, r3, #72	; 0x48
    68a8:	88bb      	ldrh	r3, [r7, #4]
    68aa:	4293      	cmp	r3, r2
    68ac:	bfa8      	it	ge
    68ae:	4613      	movge	r3, r2
    68b0:	b29a      	uxth	r2, r3
    68b2:	69fb      	ldr	r3, [r7, #28]
    68b4:	815a      	strh	r2, [r3, #10]
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
    68b6:	69fb      	ldr	r3, [r7, #28]
    68b8:	2201      	movs	r2, #1
    68ba:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
    68bc:	69fb      	ldr	r3, [r7, #28]
    68be:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
    68c0:	88bb      	ldrh	r3, [r7, #4]
    68c2:	69fa      	ldr	r2, [r7, #28]
    68c4:	8952      	ldrh	r2, [r2, #10]
    68c6:	1a9b      	subs	r3, r3, r2
    68c8:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
    68ca:	e033      	b.n	6934 <pbuf_alloc+0x13c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
    68cc:	2009      	movs	r0, #9
    68ce:	f7fb fedb 	bl	2688 <memp_malloc>
    68d2:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
    68d4:	68fb      	ldr	r3, [r7, #12]
    68d6:	2b00      	cmp	r3, #0
    68d8:	d104      	bne.n	68e4 <pbuf_alloc+0xec>
        PBUF_POOL_IS_EMPTY();
        /* free chain so far allocated */
        pbuf_free(p);
    68da:	69f8      	ldr	r0, [r7, #28]
    68dc:	f000 f9b2 	bl	6c44 <pbuf_free>
        /* bail out unsuccesfully */
        return NULL;
    68e0:	2300      	movs	r3, #0
    68e2:	e07d      	b.n	69e0 <pbuf_alloc+0x1e8>
      }
      q->type = type;
    68e4:	68fb      	ldr	r3, [r7, #12]
    68e6:	79ba      	ldrb	r2, [r7, #6]
    68e8:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
    68ea:	68fb      	ldr	r3, [r7, #12]
    68ec:	2200      	movs	r2, #0
    68ee:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
    68f0:	68fb      	ldr	r3, [r7, #12]
    68f2:	2200      	movs	r2, #0
    68f4:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
    68f6:	69bb      	ldr	r3, [r7, #24]
    68f8:	68fa      	ldr	r2, [r7, #12]
    68fa:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
      q->tot_len = (u16_t)rem_len;
    68fc:	693b      	ldr	r3, [r7, #16]
    68fe:	b29a      	uxth	r2, r3
    6900:	68fb      	ldr	r3, [r7, #12]
    6902:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
    6904:	693b      	ldr	r3, [r7, #16]
    6906:	b29b      	uxth	r3, r3
    6908:	2b48      	cmp	r3, #72	; 0x48
    690a:	bfa8      	it	ge
    690c:	2348      	movge	r3, #72	; 0x48
    690e:	b29a      	uxth	r2, r3
    6910:	68fb      	ldr	r3, [r7, #12]
    6912:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
    6914:	68fb      	ldr	r3, [r7, #12]
    6916:	f103 0210 	add.w	r2, r3, #16
    691a:	68fb      	ldr	r3, [r7, #12]
    691c:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
    691e:	68fb      	ldr	r3, [r7, #12]
    6920:	2201      	movs	r2, #1
    6922:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
    6924:	68fb      	ldr	r3, [r7, #12]
    6926:	895b      	ldrh	r3, [r3, #10]
    6928:	461a      	mov	r2, r3
    692a:	693b      	ldr	r3, [r7, #16]
    692c:	1a9b      	subs	r3, r3, r2
    692e:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
    6930:	68fb      	ldr	r3, [r7, #12]
    6932:	61bb      	str	r3, [r7, #24]
    /* remember first pbuf for linkage in next iteration */
    r = p;
    /* remaining length to be allocated */
    rem_len = length - p->len;
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
    6934:	693b      	ldr	r3, [r7, #16]
    6936:	2b00      	cmp	r3, #0
    6938:	dcc8      	bgt.n	68cc <pbuf_alloc+0xd4>
      r = q;
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
    693a:	e04a      	b.n	69d2 <pbuf_alloc+0x1da>
  case PBUF_RAM:
    /* If pbuf is to be allocated in RAM, allocate memory for it. */
    p = (struct pbuf*)mem_malloc(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length));
    693c:	8afb      	ldrh	r3, [r7, #22]
    693e:	3313      	adds	r3, #19
    6940:	b29b      	uxth	r3, r3
    6942:	f023 0303 	bic.w	r3, r3, #3
    6946:	b29a      	uxth	r2, r3
    6948:	88bb      	ldrh	r3, [r7, #4]
    694a:	3303      	adds	r3, #3
    694c:	b29b      	uxth	r3, r3
    694e:	f023 0303 	bic.w	r3, r3, #3
    6952:	b29b      	uxth	r3, r3
    6954:	4413      	add	r3, r2
    6956:	b29b      	uxth	r3, r3
    6958:	4618      	mov	r0, r3
    695a:	f7fb fd31 	bl	23c0 <mem_malloc>
    695e:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
    6960:	69fb      	ldr	r3, [r7, #28]
    6962:	2b00      	cmp	r3, #0
    6964:	d101      	bne.n	696a <pbuf_alloc+0x172>
      return NULL;
    6966:	2300      	movs	r3, #0
    6968:	e03a      	b.n	69e0 <pbuf_alloc+0x1e8>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
    696a:	8afb      	ldrh	r3, [r7, #22]
    696c:	3310      	adds	r3, #16
    696e:	69fa      	ldr	r2, [r7, #28]
    6970:	4413      	add	r3, r2
    6972:	3303      	adds	r3, #3
    6974:	f023 0303 	bic.w	r3, r3, #3
    6978:	461a      	mov	r2, r3
    697a:	69fb      	ldr	r3, [r7, #28]
    697c:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
    697e:	69fb      	ldr	r3, [r7, #28]
    6980:	88ba      	ldrh	r2, [r7, #4]
    6982:	811a      	strh	r2, [r3, #8]
    6984:	69fb      	ldr	r3, [r7, #28]
    6986:	891a      	ldrh	r2, [r3, #8]
    6988:	69fb      	ldr	r3, [r7, #28]
    698a:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
    698c:	69fb      	ldr	r3, [r7, #28]
    698e:	2200      	movs	r2, #0
    6990:	601a      	str	r2, [r3, #0]
    p->type = type;
    6992:	69fb      	ldr	r3, [r7, #28]
    6994:	79ba      	ldrb	r2, [r7, #6]
    6996:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
    6998:	e01b      	b.n	69d2 <pbuf_alloc+0x1da>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
    699a:	2008      	movs	r0, #8
    699c:	f7fb fe74 	bl	2688 <memp_malloc>
    69a0:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
    69a2:	69fb      	ldr	r3, [r7, #28]
    69a4:	2b00      	cmp	r3, #0
    69a6:	d101      	bne.n	69ac <pbuf_alloc+0x1b4>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
    69a8:	2300      	movs	r3, #0
    69aa:	e019      	b.n	69e0 <pbuf_alloc+0x1e8>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
    69ac:	69fb      	ldr	r3, [r7, #28]
    69ae:	2200      	movs	r2, #0
    69b0:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
    69b2:	69fb      	ldr	r3, [r7, #28]
    69b4:	88ba      	ldrh	r2, [r7, #4]
    69b6:	811a      	strh	r2, [r3, #8]
    69b8:	69fb      	ldr	r3, [r7, #28]
    69ba:	891a      	ldrh	r2, [r3, #8]
    69bc:	69fb      	ldr	r3, [r7, #28]
    69be:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
    69c0:	69fb      	ldr	r3, [r7, #28]
    69c2:	2200      	movs	r2, #0
    69c4:	601a      	str	r2, [r3, #0]
    p->type = type;
    69c6:	69fb      	ldr	r3, [r7, #28]
    69c8:	79ba      	ldrb	r2, [r7, #6]
    69ca:	731a      	strb	r2, [r3, #12]
    break;
    69cc:	e001      	b.n	69d2 <pbuf_alloc+0x1da>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
    return NULL;
    69ce:	2300      	movs	r3, #0
    69d0:	e006      	b.n	69e0 <pbuf_alloc+0x1e8>
  }
  /* set reference count */
  p->ref = 1;
    69d2:	69fb      	ldr	r3, [r7, #28]
    69d4:	2201      	movs	r2, #1
    69d6:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
    69d8:	69fb      	ldr	r3, [r7, #28]
    69da:	2200      	movs	r2, #0
    69dc:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
    69de:	69fb      	ldr	r3, [r7, #28]
}
    69e0:	4618      	mov	r0, r3
    69e2:	3720      	adds	r7, #32
    69e4:	46bd      	mov	sp, r7
    69e6:	bd80      	pop	{r7, pc}

000069e8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
    69e8:	b480      	push	{r7}
    69ea:	b085      	sub	sp, #20
    69ec:	af00      	add	r7, sp, #0
    69ee:	603b      	str	r3, [r7, #0]
    69f0:	4603      	mov	r3, r0
    69f2:	71fb      	strb	r3, [r7, #7]
    69f4:	460b      	mov	r3, r1
    69f6:	80bb      	strh	r3, [r7, #4]
    69f8:	4613      	mov	r3, r2
    69fa:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  offset = 0;
    69fc:	2300      	movs	r3, #0
    69fe:	81fb      	strh	r3, [r7, #14]
  switch (l) {
    6a00:	79fb      	ldrb	r3, [r7, #7]
    6a02:	2b03      	cmp	r3, #3
    6a04:	d814      	bhi.n	6a30 <pbuf_alloced_custom+0x48>
    6a06:	a201      	add	r2, pc, #4	; (adr r2, 6a0c <pbuf_alloced_custom+0x24>)
    6a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6a0c:	00006a1d 	.word	0x00006a1d
    6a10:	00006a23 	.word	0x00006a23
    6a14:	00006a29 	.word	0x00006a29
    6a18:	00006a35 	.word	0x00006a35
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset += PBUF_TRANSPORT_HLEN;
    6a1c:	89fb      	ldrh	r3, [r7, #14]
    6a1e:	3314      	adds	r3, #20
    6a20:	81fb      	strh	r3, [r7, #14]
    /* FALLTHROUGH */
  case PBUF_IP:
    /* add room for IP layer header */
    offset += PBUF_IP_HLEN;
    6a22:	89fb      	ldrh	r3, [r7, #14]
    6a24:	3314      	adds	r3, #20
    6a26:	81fb      	strh	r3, [r7, #14]
    /* FALLTHROUGH */
  case PBUF_LINK:
    /* add room for link layer header */
    offset += PBUF_LINK_HLEN;
    6a28:	89fb      	ldrh	r3, [r7, #14]
    6a2a:	3310      	adds	r3, #16
    6a2c:	81fb      	strh	r3, [r7, #14]
    break;
    6a2e:	e002      	b.n	6a36 <pbuf_alloced_custom+0x4e>
  case PBUF_RAW:
    break;
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
    return NULL;
    6a30:	2300      	movs	r3, #0
    6a32:	e02f      	b.n	6a94 <pbuf_alloced_custom+0xac>
  case PBUF_LINK:
    /* add room for link layer header */
    offset += PBUF_LINK_HLEN;
    break;
  case PBUF_RAW:
    break;
    6a34:	bf00      	nop
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
    return NULL;
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length < payload_mem_len) {
    6a36:	89fb      	ldrh	r3, [r7, #14]
    6a38:	3303      	adds	r3, #3
    6a3a:	f023 0203 	bic.w	r2, r3, #3
    6a3e:	88bb      	ldrh	r3, [r7, #4]
    6a40:	441a      	add	r2, r3
    6a42:	8bbb      	ldrh	r3, [r7, #28]
    6a44:	429a      	cmp	r2, r3
    6a46:	da01      	bge.n	6a4c <pbuf_alloced_custom+0x64>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
    6a48:	2300      	movs	r3, #0
    6a4a:	e023      	b.n	6a94 <pbuf_alloced_custom+0xac>
  }

  p->pbuf.next = NULL;
    6a4c:	683b      	ldr	r3, [r7, #0]
    6a4e:	2200      	movs	r2, #0
    6a50:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
    6a52:	69bb      	ldr	r3, [r7, #24]
    6a54:	2b00      	cmp	r3, #0
    6a56:	d009      	beq.n	6a6c <pbuf_alloced_custom+0x84>
    p->pbuf.payload = LWIP_MEM_ALIGN((void *)((u8_t *)payload_mem + offset));
    6a58:	89fb      	ldrh	r3, [r7, #14]
    6a5a:	69ba      	ldr	r2, [r7, #24]
    6a5c:	4413      	add	r3, r2
    6a5e:	3303      	adds	r3, #3
    6a60:	f023 0303 	bic.w	r3, r3, #3
    6a64:	461a      	mov	r2, r3
    6a66:	683b      	ldr	r3, [r7, #0]
    6a68:	605a      	str	r2, [r3, #4]
    6a6a:	e002      	b.n	6a72 <pbuf_alloced_custom+0x8a>
  } else {
    p->pbuf.payload = NULL;
    6a6c:	683b      	ldr	r3, [r7, #0]
    6a6e:	2200      	movs	r2, #0
    6a70:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
    6a72:	683b      	ldr	r3, [r7, #0]
    6a74:	2202      	movs	r2, #2
    6a76:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
    6a78:	683b      	ldr	r3, [r7, #0]
    6a7a:	88ba      	ldrh	r2, [r7, #4]
    6a7c:	811a      	strh	r2, [r3, #8]
    6a7e:	683b      	ldr	r3, [r7, #0]
    6a80:	891a      	ldrh	r2, [r3, #8]
    6a82:	683b      	ldr	r3, [r7, #0]
    6a84:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
    6a86:	683b      	ldr	r3, [r7, #0]
    6a88:	79ba      	ldrb	r2, [r7, #6]
    6a8a:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
    6a8c:	683b      	ldr	r3, [r7, #0]
    6a8e:	2201      	movs	r2, #1
    6a90:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
    6a92:	683b      	ldr	r3, [r7, #0]
}
    6a94:	4618      	mov	r0, r3
    6a96:	3714      	adds	r7, #20
    6a98:	46bd      	mov	sp, r7
    6a9a:	bc80      	pop	{r7}
    6a9c:	4770      	bx	lr
    6a9e:	bf00      	nop

00006aa0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
    6aa0:	b580      	push	{r7, lr}
    6aa2:	b086      	sub	sp, #24
    6aa4:	af00      	add	r7, sp, #0
    6aa6:	6078      	str	r0, [r7, #4]
    6aa8:	460b      	mov	r3, r1
    6aaa:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
    6aac:	687b      	ldr	r3, [r7, #4]
    6aae:	7b1b      	ldrb	r3, [r3, #12]
    6ab0:	2b03      	cmp	r3, #3
    6ab2:	d006      	beq.n	6ac2 <pbuf_realloc+0x22>
    6ab4:	687b      	ldr	r3, [r7, #4]
    6ab6:	7b1b      	ldrb	r3, [r3, #12]
    6ab8:	2b01      	cmp	r3, #1
    6aba:	d002      	beq.n	6ac2 <pbuf_realloc+0x22>
    6abc:	687b      	ldr	r3, [r7, #4]
    6abe:	7b1b      	ldrb	r3, [r3, #12]
    6ac0:	2b00      	cmp	r3, #0
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
    6ac2:	687b      	ldr	r3, [r7, #4]
    6ac4:	891b      	ldrh	r3, [r3, #8]
    6ac6:	887a      	ldrh	r2, [r7, #2]
    6ac8:	429a      	cmp	r2, r3
    6aca:	d249      	bcs.n	6b60 <pbuf_realloc+0xc0>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
    6acc:	887b      	ldrh	r3, [r7, #2]
    6ace:	687a      	ldr	r2, [r7, #4]
    6ad0:	8912      	ldrh	r2, [r2, #8]
    6ad2:	1a9b      	subs	r3, r3, r2
    6ad4:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
    6ad6:	887b      	ldrh	r3, [r7, #2]
    6ad8:	827b      	strh	r3, [r7, #18]
  q = p;
    6ada:	687b      	ldr	r3, [r7, #4]
    6adc:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
    6ade:	e00f      	b.n	6b00 <pbuf_realloc+0x60>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
    6ae0:	697b      	ldr	r3, [r7, #20]
    6ae2:	895b      	ldrh	r3, [r3, #10]
    6ae4:	8a7a      	ldrh	r2, [r7, #18]
    6ae6:	1ad3      	subs	r3, r2, r3
    6ae8:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
    q->tot_len += (u16_t)grow;
    6aea:	697b      	ldr	r3, [r7, #20]
    6aec:	891a      	ldrh	r2, [r3, #8]
    6aee:	68fb      	ldr	r3, [r7, #12]
    6af0:	b29b      	uxth	r3, r3
    6af2:	4413      	add	r3, r2
    6af4:	b29a      	uxth	r2, r3
    6af6:	697b      	ldr	r3, [r7, #20]
    6af8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
    6afa:	697b      	ldr	r3, [r7, #20]
    6afc:	681b      	ldr	r3, [r3, #0]
    6afe:	617b      	str	r3, [r7, #20]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
  q = p;
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
    6b00:	697b      	ldr	r3, [r7, #20]
    6b02:	895b      	ldrh	r3, [r3, #10]
    6b04:	8a7a      	ldrh	r2, [r7, #18]
    6b06:	429a      	cmp	r2, r3
    6b08:	d8ea      	bhi.n	6ae0 <pbuf_realloc+0x40>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)) {
    6b0a:	697b      	ldr	r3, [r7, #20]
    6b0c:	7b1b      	ldrb	r3, [r3, #12]
    6b0e:	2b00      	cmp	r3, #0
    6b10:	d112      	bne.n	6b38 <pbuf_realloc+0x98>
    6b12:	697b      	ldr	r3, [r7, #20]
    6b14:	895b      	ldrh	r3, [r3, #10]
    6b16:	8a7a      	ldrh	r2, [r7, #18]
    6b18:	429a      	cmp	r2, r3
    6b1a:	d00d      	beq.n	6b38 <pbuf_realloc+0x98>
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
    6b1c:	697b      	ldr	r3, [r7, #20]
    6b1e:	685b      	ldr	r3, [r3, #4]
    6b20:	461a      	mov	r2, r3
    6b22:	697b      	ldr	r3, [r7, #20]
    6b24:	1ad3      	subs	r3, r2, r3
    6b26:	b29a      	uxth	r2, r3
    6b28:	8a7b      	ldrh	r3, [r7, #18]
    6b2a:	4413      	add	r3, r2
    6b2c:	b29b      	uxth	r3, r3
    6b2e:	4619      	mov	r1, r3
    6b30:	6978      	ldr	r0, [r7, #20]
    6b32:	f7fb fb67 	bl	2204 <mem_trim>
    6b36:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
    6b38:	697b      	ldr	r3, [r7, #20]
    6b3a:	8a7a      	ldrh	r2, [r7, #18]
    6b3c:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
    6b3e:	697b      	ldr	r3, [r7, #20]
    6b40:	895a      	ldrh	r2, [r3, #10]
    6b42:	697b      	ldr	r3, [r7, #20]
    6b44:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
    6b46:	697b      	ldr	r3, [r7, #20]
    6b48:	681b      	ldr	r3, [r3, #0]
    6b4a:	2b00      	cmp	r3, #0
    6b4c:	d004      	beq.n	6b58 <pbuf_realloc+0xb8>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
    6b4e:	697b      	ldr	r3, [r7, #20]
    6b50:	681b      	ldr	r3, [r3, #0]
    6b52:	4618      	mov	r0, r3
    6b54:	f000 f876 	bl	6c44 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
    6b58:	697b      	ldr	r3, [r7, #20]
    6b5a:	2200      	movs	r2, #0
    6b5c:	601a      	str	r2, [r3, #0]
    6b5e:	e000      	b.n	6b62 <pbuf_realloc+0xc2>
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
    /* enlarging not yet supported */
    return;
    6b60:	bf00      	nop
    pbuf_free(q->next);
  }
  /* q is last packet in chain */
  q->next = NULL;

}
    6b62:	3718      	adds	r7, #24
    6b64:	46bd      	mov	sp, r7
    6b66:	bd80      	pop	{r7, pc}

00006b68 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
    6b68:	b480      	push	{r7}
    6b6a:	b085      	sub	sp, #20
    6b6c:	af00      	add	r7, sp, #0
    6b6e:	6078      	str	r0, [r7, #4]
    6b70:	460b      	mov	r3, r1
    6b72:	807b      	strh	r3, [r7, #2]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL)) {
    6b74:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    6b78:	2b00      	cmp	r3, #0
    6b7a:	d002      	beq.n	6b82 <pbuf_header+0x1a>
    6b7c:	687b      	ldr	r3, [r7, #4]
    6b7e:	2b00      	cmp	r3, #0
    6b80:	d101      	bne.n	6b86 <pbuf_header+0x1e>
    return 0;
    6b82:	2300      	movs	r3, #0
    6b84:	e059      	b.n	6c3a <pbuf_header+0xd2>
  }
 
  if (header_size_increment < 0){
    6b86:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    6b8a:	2b00      	cmp	r3, #0
    6b8c:	da09      	bge.n	6ba2 <pbuf_header+0x3a>
    increment_magnitude = -header_size_increment;
    6b8e:	887b      	ldrh	r3, [r7, #2]
    6b90:	425b      	negs	r3, r3
    6b92:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
    6b94:	687b      	ldr	r3, [r7, #4]
    6b96:	895b      	ldrh	r3, [r3, #10]
    6b98:	89fa      	ldrh	r2, [r7, #14]
    6b9a:	429a      	cmp	r2, r3
    6b9c:	d903      	bls.n	6ba6 <pbuf_header+0x3e>
    6b9e:	2301      	movs	r3, #1
    6ba0:	e04b      	b.n	6c3a <pbuf_header+0xd2>
  } else {
    increment_magnitude = header_size_increment;
    6ba2:	887b      	ldrh	r3, [r7, #2]
    6ba4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
    6ba6:	687b      	ldr	r3, [r7, #4]
    6ba8:	7b1b      	ldrb	r3, [r3, #12]
    6baa:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
    6bac:	687b      	ldr	r3, [r7, #4]
    6bae:	685b      	ldr	r3, [r3, #4]
    6bb0:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
    6bb2:	89bb      	ldrh	r3, [r7, #12]
    6bb4:	2b00      	cmp	r3, #0
    6bb6:	d002      	beq.n	6bbe <pbuf_header+0x56>
    6bb8:	89bb      	ldrh	r3, [r7, #12]
    6bba:	2b03      	cmp	r3, #3
    6bbc:	d112      	bne.n	6be4 <pbuf_header+0x7c>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
    6bbe:	687b      	ldr	r3, [r7, #4]
    6bc0:	685a      	ldr	r2, [r3, #4]
    6bc2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    6bc6:	425b      	negs	r3, r3
    6bc8:	441a      	add	r2, r3
    6bca:	687b      	ldr	r3, [r7, #4]
    6bcc:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
    6bce:	687b      	ldr	r3, [r7, #4]
    6bd0:	685a      	ldr	r2, [r3, #4]
    6bd2:	687b      	ldr	r3, [r7, #4]
    6bd4:	3310      	adds	r3, #16
    6bd6:	429a      	cmp	r2, r3
    6bd8:	d220      	bcs.n	6c1c <pbuf_header+0xb4>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)(p + 1)));
      /* restore old payload pointer */
      p->payload = payload;
    6bda:	687b      	ldr	r3, [r7, #4]
    6bdc:	68ba      	ldr	r2, [r7, #8]
    6bde:	605a      	str	r2, [r3, #4]
      /* bail out unsuccesfully */
      return 1;
    6be0:	2301      	movs	r3, #1
    6be2:	e02a      	b.n	6c3a <pbuf_header+0xd2>
    }
  /* pbuf types refering to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
    6be4:	89bb      	ldrh	r3, [r7, #12]
    6be6:	2b02      	cmp	r3, #2
    6be8:	d002      	beq.n	6bf0 <pbuf_header+0x88>
    6bea:	89bb      	ldrh	r3, [r7, #12]
    6bec:	2b01      	cmp	r3, #1
    6bee:	d113      	bne.n	6c18 <pbuf_header+0xb0>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
    6bf0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    6bf4:	2b00      	cmp	r3, #0
    6bf6:	da0d      	bge.n	6c14 <pbuf_header+0xac>
    6bf8:	687b      	ldr	r3, [r7, #4]
    6bfa:	895b      	ldrh	r3, [r3, #10]
    6bfc:	89fa      	ldrh	r2, [r7, #14]
    6bfe:	429a      	cmp	r2, r3
    6c00:	d808      	bhi.n	6c14 <pbuf_header+0xac>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
    6c02:	687b      	ldr	r3, [r7, #4]
    6c04:	685a      	ldr	r2, [r3, #4]
    6c06:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    6c0a:	425b      	negs	r3, r3
    6c0c:	441a      	add	r2, r3
    6c0e:	687b      	ldr	r3, [r7, #4]
    6c10:	605a      	str	r2, [r3, #4]
      return 1;
    }
  /* pbuf types refering to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
    6c12:	e003      	b.n	6c1c <pbuf_header+0xb4>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccesfully */
      return 1;
    6c14:	2301      	movs	r3, #1
    6c16:	e010      	b.n	6c3a <pbuf_header+0xd2>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
    6c18:	2301      	movs	r3, #1
    6c1a:	e00e      	b.n	6c3a <pbuf_header+0xd2>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
    6c1c:	687b      	ldr	r3, [r7, #4]
    6c1e:	895a      	ldrh	r2, [r3, #10]
    6c20:	887b      	ldrh	r3, [r7, #2]
    6c22:	4413      	add	r3, r2
    6c24:	b29a      	uxth	r2, r3
    6c26:	687b      	ldr	r3, [r7, #4]
    6c28:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
    6c2a:	687b      	ldr	r3, [r7, #4]
    6c2c:	891a      	ldrh	r2, [r3, #8]
    6c2e:	887b      	ldrh	r3, [r7, #2]
    6c30:	4413      	add	r3, r2
    6c32:	b29a      	uxth	r2, r3
    6c34:	687b      	ldr	r3, [r7, #4]
    6c36:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
    6c38:	2300      	movs	r3, #0
}
    6c3a:	4618      	mov	r0, r3
    6c3c:	3714      	adds	r7, #20
    6c3e:	46bd      	mov	sp, r7
    6c40:	bc80      	pop	{r7}
    6c42:	4770      	bx	lr

00006c44 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
    6c44:	b580      	push	{r7, lr}
    6c46:	b086      	sub	sp, #24
    6c48:	af00      	add	r7, sp, #0
    6c4a:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
    6c4c:	687b      	ldr	r3, [r7, #4]
    6c4e:	2b00      	cmp	r3, #0
    6c50:	d101      	bne.n	6c56 <pbuf_free+0x12>
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
    6c52:	2300      	movs	r3, #0
    6c54:	e04e      	b.n	6cf4 <pbuf_free+0xb0>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
    6c56:	687b      	ldr	r3, [r7, #4]
    6c58:	7b1b      	ldrb	r3, [r3, #12]
    6c5a:	2b00      	cmp	r3, #0
    6c5c:	d006      	beq.n	6c6c <pbuf_free+0x28>
    6c5e:	687b      	ldr	r3, [r7, #4]
    6c60:	7b1b      	ldrb	r3, [r3, #12]
    6c62:	2b01      	cmp	r3, #1
    6c64:	d002      	beq.n	6c6c <pbuf_free+0x28>
    6c66:	687b      	ldr	r3, [r7, #4]
    6c68:	7b1b      	ldrb	r3, [r3, #12]
    6c6a:	2b02      	cmp	r3, #2
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
    6c6c:	2300      	movs	r3, #0
    6c6e:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
    6c70:	e03c      	b.n	6cec <pbuf_free+0xa8>
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
    6c72:	687b      	ldr	r3, [r7, #4]
    6c74:	89db      	ldrh	r3, [r3, #14]
    6c76:	3b01      	subs	r3, #1
    6c78:	b29a      	uxth	r2, r3
    6c7a:	687b      	ldr	r3, [r7, #4]
    6c7c:	81da      	strh	r2, [r3, #14]
    6c7e:	687b      	ldr	r3, [r7, #4]
    6c80:	89db      	ldrh	r3, [r3, #14]
    6c82:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
    6c84:	8abb      	ldrh	r3, [r7, #20]
    6c86:	2b00      	cmp	r3, #0
    6c88:	d12e      	bne.n	6ce8 <pbuf_free+0xa4>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
    6c8a:	687b      	ldr	r3, [r7, #4]
    6c8c:	681b      	ldr	r3, [r3, #0]
    6c8e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
    6c90:	687b      	ldr	r3, [r7, #4]
    6c92:	7b1b      	ldrb	r3, [r3, #12]
    6c94:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
    6c96:	687b      	ldr	r3, [r7, #4]
    6c98:	7b5b      	ldrb	r3, [r3, #13]
    6c9a:	f003 0302 	and.w	r3, r3, #2
    6c9e:	2b00      	cmp	r3, #0
    6ca0:	d006      	beq.n	6cb0 <pbuf_free+0x6c>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
    6ca2:	687b      	ldr	r3, [r7, #4]
    6ca4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
        pc->custom_free_function(p);
    6ca6:	68bb      	ldr	r3, [r7, #8]
    6ca8:	691b      	ldr	r3, [r3, #16]
    6caa:	6878      	ldr	r0, [r7, #4]
    6cac:	4798      	blx	r3
    6cae:	e015      	b.n	6cdc <pbuf_free+0x98>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
    6cb0:	89fb      	ldrh	r3, [r7, #14]
    6cb2:	2b03      	cmp	r3, #3
    6cb4:	d104      	bne.n	6cc0 <pbuf_free+0x7c>
          memp_free(MEMP_PBUF_POOL, p);
    6cb6:	6879      	ldr	r1, [r7, #4]
    6cb8:	2009      	movs	r0, #9
    6cba:	f7fb fd59 	bl	2770 <memp_free>
    6cbe:	e00d      	b.n	6cdc <pbuf_free+0x98>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
    6cc0:	89fb      	ldrh	r3, [r7, #14]
    6cc2:	2b01      	cmp	r3, #1
    6cc4:	d002      	beq.n	6ccc <pbuf_free+0x88>
    6cc6:	89fb      	ldrh	r3, [r7, #14]
    6cc8:	2b02      	cmp	r3, #2
    6cca:	d104      	bne.n	6cd6 <pbuf_free+0x92>
          memp_free(MEMP_PBUF, p);
    6ccc:	6879      	ldr	r1, [r7, #4]
    6cce:	2008      	movs	r0, #8
    6cd0:	f7fb fd4e 	bl	2770 <memp_free>
    6cd4:	e002      	b.n	6cdc <pbuf_free+0x98>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
    6cd6:	6878      	ldr	r0, [r7, #4]
    6cd8:	f7fb fa46 	bl	2168 <mem_free>
        }
      }
      count++;
    6cdc:	7dfb      	ldrb	r3, [r7, #23]
    6cde:	3301      	adds	r3, #1
    6ce0:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
    6ce2:	693b      	ldr	r3, [r7, #16]
    6ce4:	607b      	str	r3, [r7, #4]
    6ce6:	e001      	b.n	6cec <pbuf_free+0xa8>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
    6ce8:	2300      	movs	r3, #0
    6cea:	607b      	str	r3, [r7, #4]
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
    6cec:	687b      	ldr	r3, [r7, #4]
    6cee:	2b00      	cmp	r3, #0
    6cf0:	d1bf      	bne.n	6c72 <pbuf_free+0x2e>
      p = NULL;
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
    6cf2:	7dfb      	ldrb	r3, [r7, #23]
}
    6cf4:	4618      	mov	r0, r3
    6cf6:	3718      	adds	r7, #24
    6cf8:	46bd      	mov	sp, r7
    6cfa:	bd80      	pop	{r7, pc}

00006cfc <pbuf_clen>:
 * @return the number of pbufs in a chain
 */

u8_t
pbuf_clen(struct pbuf *p)
{
    6cfc:	b480      	push	{r7}
    6cfe:	b085      	sub	sp, #20
    6d00:	af00      	add	r7, sp, #0
    6d02:	6078      	str	r0, [r7, #4]
  u8_t len;

  len = 0;
    6d04:	2300      	movs	r3, #0
    6d06:	73fb      	strb	r3, [r7, #15]
  while (p != NULL) {
    6d08:	e005      	b.n	6d16 <pbuf_clen+0x1a>
    ++len;
    6d0a:	7bfb      	ldrb	r3, [r7, #15]
    6d0c:	3301      	adds	r3, #1
    6d0e:	73fb      	strb	r3, [r7, #15]
    p = p->next;
    6d10:	687b      	ldr	r3, [r7, #4]
    6d12:	681b      	ldr	r3, [r3, #0]
    6d14:	607b      	str	r3, [r7, #4]
pbuf_clen(struct pbuf *p)
{
  u8_t len;

  len = 0;
  while (p != NULL) {
    6d16:	687b      	ldr	r3, [r7, #4]
    6d18:	2b00      	cmp	r3, #0
    6d1a:	d1f6      	bne.n	6d0a <pbuf_clen+0xe>
    ++len;
    p = p->next;
  }
  return len;
    6d1c:	7bfb      	ldrb	r3, [r7, #15]
}
    6d1e:	4618      	mov	r0, r3
    6d20:	3714      	adds	r7, #20
    6d22:	46bd      	mov	sp, r7
    6d24:	bc80      	pop	{r7}
    6d26:	4770      	bx	lr

00006d28 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
    6d28:	b480      	push	{r7}
    6d2a:	b083      	sub	sp, #12
    6d2c:	af00      	add	r7, sp, #0
    6d2e:	6078      	str	r0, [r7, #4]
  SYS_ARCH_DECL_PROTECT(old_level);
  /* pbuf given? */
  if (p != NULL) {
    6d30:	687b      	ldr	r3, [r7, #4]
    6d32:	2b00      	cmp	r3, #0
    6d34:	d005      	beq.n	6d42 <pbuf_ref+0x1a>
    SYS_ARCH_PROTECT(old_level);
    ++(p->ref);
    6d36:	687b      	ldr	r3, [r7, #4]
    6d38:	89db      	ldrh	r3, [r3, #14]
    6d3a:	3301      	adds	r3, #1
    6d3c:	b29a      	uxth	r2, r3
    6d3e:	687b      	ldr	r3, [r7, #4]
    6d40:	81da      	strh	r2, [r3, #14]
    SYS_ARCH_UNPROTECT(old_level);
  }
}
    6d42:	bf00      	nop
    6d44:	370c      	adds	r7, #12
    6d46:	46bd      	mov	sp, r7
    6d48:	bc80      	pop	{r7}
    6d4a:	4770      	bx	lr

00006d4c <pbuf_cat>:
 * @see pbuf_chain()
 */

void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
    6d4c:	b480      	push	{r7}
    6d4e:	b085      	sub	sp, #20
    6d50:	af00      	add	r7, sp, #0
    6d52:	6078      	str	r0, [r7, #4]
    6d54:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
    6d56:	687b      	ldr	r3, [r7, #4]
    6d58:	2b00      	cmp	r3, #0
    6d5a:	d020      	beq.n	6d9e <pbuf_cat+0x52>
    6d5c:	683b      	ldr	r3, [r7, #0]
    6d5e:	2b00      	cmp	r3, #0
    6d60:	d01d      	beq.n	6d9e <pbuf_cat+0x52>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
    6d62:	687b      	ldr	r3, [r7, #4]
    6d64:	60fb      	str	r3, [r7, #12]
    6d66:	e00a      	b.n	6d7e <pbuf_cat+0x32>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
    6d68:	68fb      	ldr	r3, [r7, #12]
    6d6a:	891a      	ldrh	r2, [r3, #8]
    6d6c:	683b      	ldr	r3, [r7, #0]
    6d6e:	891b      	ldrh	r3, [r3, #8]
    6d70:	4413      	add	r3, r2
    6d72:	b29a      	uxth	r2, r3
    6d74:	68fb      	ldr	r3, [r7, #12]
    6d76:	811a      	strh	r2, [r3, #8]

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
    6d78:	68fb      	ldr	r3, [r7, #12]
    6d7a:	681b      	ldr	r3, [r3, #0]
    6d7c:	60fb      	str	r3, [r7, #12]
    6d7e:	68fb      	ldr	r3, [r7, #12]
    6d80:	681b      	ldr	r3, [r3, #0]
    6d82:	2b00      	cmp	r3, #0
    6d84:	d1f0      	bne.n	6d68 <pbuf_cat+0x1c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
    6d86:	68fb      	ldr	r3, [r7, #12]
    6d88:	891a      	ldrh	r2, [r3, #8]
    6d8a:	683b      	ldr	r3, [r7, #0]
    6d8c:	891b      	ldrh	r3, [r3, #8]
    6d8e:	4413      	add	r3, r2
    6d90:	b29a      	uxth	r2, r3
    6d92:	68fb      	ldr	r3, [r7, #12]
    6d94:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
    6d96:	68fb      	ldr	r3, [r7, #12]
    6d98:	683a      	ldr	r2, [r7, #0]
    6d9a:	601a      	str	r2, [r3, #0]
    6d9c:	e000      	b.n	6da0 <pbuf_cat+0x54>
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
    6d9e:	bf00      	nop
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
    6da0:	3714      	adds	r7, #20
    6da2:	46bd      	mov	sp, r7
    6da4:	bc80      	pop	{r7}
    6da6:	4770      	bx	lr

00006da8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, struct pbuf *p_from)
{
    6da8:	b580      	push	{r7, lr}
    6daa:	b084      	sub	sp, #16
    6dac:	af00      	add	r7, sp, #0
    6dae:	6078      	str	r0, [r7, #4]
    6db0:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
    6db2:	2300      	movs	r3, #0
    6db4:	81fb      	strh	r3, [r7, #14]
    6db6:	2300      	movs	r3, #0
    6db8:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (void*)p_to, (void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
    6dba:	687b      	ldr	r3, [r7, #4]
    6dbc:	2b00      	cmp	r3, #0
    6dbe:	d008      	beq.n	6dd2 <pbuf_copy+0x2a>
    6dc0:	683b      	ldr	r3, [r7, #0]
    6dc2:	2b00      	cmp	r3, #0
    6dc4:	d005      	beq.n	6dd2 <pbuf_copy+0x2a>
    6dc6:	687b      	ldr	r3, [r7, #4]
    6dc8:	891a      	ldrh	r2, [r3, #8]
    6dca:	683b      	ldr	r3, [r7, #0]
    6dcc:	891b      	ldrh	r3, [r3, #8]
    6dce:	429a      	cmp	r2, r3
    6dd0:	d202      	bcs.n	6dd8 <pbuf_copy+0x30>
    6dd2:	f06f 030d 	mvn.w	r3, #13
    6dd6:	e062      	b.n	6e9e <pbuf_copy+0xf6>
  /* iterate through pbuf chain */
  do
  {
    LWIP_ASSERT("p_to != NULL", p_to != NULL);
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
    6dd8:	687b      	ldr	r3, [r7, #4]
    6dda:	895b      	ldrh	r3, [r3, #10]
    6ddc:	461a      	mov	r2, r3
    6dde:	89fb      	ldrh	r3, [r7, #14]
    6de0:	1ad2      	subs	r2, r2, r3
    6de2:	683b      	ldr	r3, [r7, #0]
    6de4:	895b      	ldrh	r3, [r3, #10]
    6de6:	4619      	mov	r1, r3
    6de8:	89bb      	ldrh	r3, [r7, #12]
    6dea:	1acb      	subs	r3, r1, r3
    6dec:	429a      	cmp	r2, r3
    6dee:	db05      	blt.n	6dfc <pbuf_copy+0x54>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
    6df0:	683b      	ldr	r3, [r7, #0]
    6df2:	895a      	ldrh	r2, [r3, #10]
    6df4:	89bb      	ldrh	r3, [r7, #12]
    6df6:	1ad3      	subs	r3, r2, r3
    6df8:	817b      	strh	r3, [r7, #10]
    6dfa:	e004      	b.n	6e06 <pbuf_copy+0x5e>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
    6dfc:	687b      	ldr	r3, [r7, #4]
    6dfe:	895a      	ldrh	r2, [r3, #10]
    6e00:	89fb      	ldrh	r3, [r7, #14]
    6e02:	1ad3      	subs	r3, r2, r3
    6e04:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
    6e06:	687b      	ldr	r3, [r7, #4]
    6e08:	685a      	ldr	r2, [r3, #4]
    6e0a:	89fb      	ldrh	r3, [r7, #14]
    6e0c:	18d0      	adds	r0, r2, r3
    6e0e:	683b      	ldr	r3, [r7, #0]
    6e10:	685a      	ldr	r2, [r3, #4]
    6e12:	89bb      	ldrh	r3, [r7, #12]
    6e14:	4413      	add	r3, r2
    6e16:	897a      	ldrh	r2, [r7, #10]
    6e18:	4619      	mov	r1, r3
    6e1a:	f002 fc37 	bl	968c <memcpy>
    offset_to += len;
    6e1e:	89fa      	ldrh	r2, [r7, #14]
    6e20:	897b      	ldrh	r3, [r7, #10]
    6e22:	4413      	add	r3, r2
    6e24:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
    6e26:	89ba      	ldrh	r2, [r7, #12]
    6e28:	897b      	ldrh	r3, [r7, #10]
    6e2a:	4413      	add	r3, r2
    6e2c:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    if (offset_to == p_to->len) {
    6e2e:	687b      	ldr	r3, [r7, #4]
    6e30:	895b      	ldrh	r3, [r3, #10]
    6e32:	89fa      	ldrh	r2, [r7, #14]
    6e34:	429a      	cmp	r2, r3
    6e36:	d104      	bne.n	6e42 <pbuf_copy+0x9a>
      /* on to next p_to (if any) */
      offset_to = 0;
    6e38:	2300      	movs	r3, #0
    6e3a:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
    6e3c:	687b      	ldr	r3, [r7, #4]
    6e3e:	681b      	ldr	r3, [r3, #0]
    6e40:	607b      	str	r3, [r7, #4]
    }
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
    6e42:	683b      	ldr	r3, [r7, #0]
    6e44:	895b      	ldrh	r3, [r3, #10]
    6e46:	89ba      	ldrh	r2, [r7, #12]
    6e48:	429a      	cmp	r2, r3
    6e4a:	d304      	bcc.n	6e56 <pbuf_copy+0xae>
      /* on to next p_from (if any) */
      offset_from = 0;
    6e4c:	2300      	movs	r3, #0
    6e4e:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
    6e50:	683b      	ldr	r3, [r7, #0]
    6e52:	681b      	ldr	r3, [r3, #0]
    6e54:	603b      	str	r3, [r7, #0]
    }

    if((p_from != NULL) && (p_from->len == p_from->tot_len)) {
    6e56:	683b      	ldr	r3, [r7, #0]
    6e58:	2b00      	cmp	r3, #0
    6e5a:	d00c      	beq.n	6e76 <pbuf_copy+0xce>
    6e5c:	683b      	ldr	r3, [r7, #0]
    6e5e:	895a      	ldrh	r2, [r3, #10]
    6e60:	683b      	ldr	r3, [r7, #0]
    6e62:	891b      	ldrh	r3, [r3, #8]
    6e64:	429a      	cmp	r2, r3
    6e66:	d106      	bne.n	6e76 <pbuf_copy+0xce>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
    6e68:	683b      	ldr	r3, [r7, #0]
    6e6a:	681b      	ldr	r3, [r3, #0]
    6e6c:	2b00      	cmp	r3, #0
    6e6e:	d002      	beq.n	6e76 <pbuf_copy+0xce>
    6e70:	f06f 0305 	mvn.w	r3, #5
    6e74:	e013      	b.n	6e9e <pbuf_copy+0xf6>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if((p_to != NULL) && (p_to->len == p_to->tot_len)) {
    6e76:	687b      	ldr	r3, [r7, #4]
    6e78:	2b00      	cmp	r3, #0
    6e7a:	d00c      	beq.n	6e96 <pbuf_copy+0xee>
    6e7c:	687b      	ldr	r3, [r7, #4]
    6e7e:	895a      	ldrh	r2, [r3, #10]
    6e80:	687b      	ldr	r3, [r7, #4]
    6e82:	891b      	ldrh	r3, [r3, #8]
    6e84:	429a      	cmp	r2, r3
    6e86:	d106      	bne.n	6e96 <pbuf_copy+0xee>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
    6e88:	687b      	ldr	r3, [r7, #4]
    6e8a:	681b      	ldr	r3, [r3, #0]
    6e8c:	2b00      	cmp	r3, #0
    6e8e:	d002      	beq.n	6e96 <pbuf_copy+0xee>
    6e90:	f06f 0305 	mvn.w	r3, #5
    6e94:	e003      	b.n	6e9e <pbuf_copy+0xf6>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
    6e96:	683b      	ldr	r3, [r7, #0]
    6e98:	2b00      	cmp	r3, #0
    6e9a:	d19d      	bne.n	6dd8 <pbuf_copy+0x30>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
    6e9c:	2300      	movs	r3, #0
}
    6e9e:	4618      	mov	r0, r3
    6ea0:	3710      	adds	r7, #16
    6ea2:	46bd      	mov	sp, r7
    6ea4:	bd80      	pop	{r7, pc}
    6ea6:	bf00      	nop

00006ea8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
    6ea8:	b580      	push	{r7, lr}
    6eaa:	b088      	sub	sp, #32
    6eac:	af00      	add	r7, sp, #0
    6eae:	60f8      	str	r0, [r7, #12]
    6eb0:	60b9      	str	r1, [r7, #8]
    6eb2:	4611      	mov	r1, r2
    6eb4:	461a      	mov	r2, r3
    6eb6:	460b      	mov	r3, r1
    6eb8:	80fb      	strh	r3, [r7, #6]
    6eba:	4613      	mov	r3, r2
    6ebc:	80bb      	strh	r3, [r7, #4]
  struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
    6ebe:	2300      	movs	r3, #0
    6ec0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
    6ec2:	68fb      	ldr	r3, [r7, #12]
    6ec4:	2b00      	cmp	r3, #0
    6ec6:	d101      	bne.n	6ecc <pbuf_copy_partial+0x24>
    6ec8:	2300      	movs	r3, #0
    6eca:	e04d      	b.n	6f68 <pbuf_copy_partial+0xc0>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
    6ecc:	68bb      	ldr	r3, [r7, #8]
    6ece:	2b00      	cmp	r3, #0
    6ed0:	d101      	bne.n	6ed6 <pbuf_copy_partial+0x2e>
    6ed2:	2300      	movs	r3, #0
    6ed4:	e048      	b.n	6f68 <pbuf_copy_partial+0xc0>

  left = 0;
    6ed6:	2300      	movs	r3, #0
    6ed8:	837b      	strh	r3, [r7, #26]

  if((buf == NULL) || (dataptr == NULL)) {
    6eda:	68fb      	ldr	r3, [r7, #12]
    6edc:	2b00      	cmp	r3, #0
    6ede:	d002      	beq.n	6ee6 <pbuf_copy_partial+0x3e>
    6ee0:	68bb      	ldr	r3, [r7, #8]
    6ee2:	2b00      	cmp	r3, #0
    6ee4:	d101      	bne.n	6eea <pbuf_copy_partial+0x42>
    return 0;
    6ee6:	2300      	movs	r3, #0
    6ee8:	e03e      	b.n	6f68 <pbuf_copy_partial+0xc0>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; len != 0 && p != NULL; p = p->next) {
    6eea:	68fb      	ldr	r3, [r7, #12]
    6eec:	61fb      	str	r3, [r7, #28]
    6eee:	e034      	b.n	6f5a <pbuf_copy_partial+0xb2>
    if ((offset != 0) && (offset >= p->len)) {
    6ef0:	88bb      	ldrh	r3, [r7, #4]
    6ef2:	2b00      	cmp	r3, #0
    6ef4:	d00a      	beq.n	6f0c <pbuf_copy_partial+0x64>
    6ef6:	69fb      	ldr	r3, [r7, #28]
    6ef8:	895b      	ldrh	r3, [r3, #10]
    6efa:	88ba      	ldrh	r2, [r7, #4]
    6efc:	429a      	cmp	r2, r3
    6efe:	d305      	bcc.n	6f0c <pbuf_copy_partial+0x64>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
    6f00:	69fb      	ldr	r3, [r7, #28]
    6f02:	895b      	ldrh	r3, [r3, #10]
    6f04:	88ba      	ldrh	r2, [r7, #4]
    6f06:	1ad3      	subs	r3, r2, r3
    6f08:	80bb      	strh	r3, [r7, #4]
    6f0a:	e023      	b.n	6f54 <pbuf_copy_partial+0xac>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
    6f0c:	69fb      	ldr	r3, [r7, #28]
    6f0e:	895a      	ldrh	r2, [r3, #10]
    6f10:	88bb      	ldrh	r3, [r7, #4]
    6f12:	1ad3      	subs	r3, r2, r3
    6f14:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len)
    6f16:	8b3a      	ldrh	r2, [r7, #24]
    6f18:	88fb      	ldrh	r3, [r7, #6]
    6f1a:	429a      	cmp	r2, r3
    6f1c:	d901      	bls.n	6f22 <pbuf_copy_partial+0x7a>
          buf_copy_len = len;
    6f1e:	88fb      	ldrh	r3, [r7, #6]
    6f20:	833b      	strh	r3, [r7, #24]
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
    6f22:	8b7b      	ldrh	r3, [r7, #26]
    6f24:	68ba      	ldr	r2, [r7, #8]
    6f26:	18d0      	adds	r0, r2, r3
    6f28:	69fb      	ldr	r3, [r7, #28]
    6f2a:	685a      	ldr	r2, [r3, #4]
    6f2c:	88bb      	ldrh	r3, [r7, #4]
    6f2e:	4413      	add	r3, r2
    6f30:	8b3a      	ldrh	r2, [r7, #24]
    6f32:	4619      	mov	r1, r3
    6f34:	f002 fbaa 	bl	968c <memcpy>
      copied_total += buf_copy_len;
    6f38:	8afa      	ldrh	r2, [r7, #22]
    6f3a:	8b3b      	ldrh	r3, [r7, #24]
    6f3c:	4413      	add	r3, r2
    6f3e:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
    6f40:	8b7a      	ldrh	r2, [r7, #26]
    6f42:	8b3b      	ldrh	r3, [r7, #24]
    6f44:	4413      	add	r3, r2
    6f46:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
    6f48:	88fa      	ldrh	r2, [r7, #6]
    6f4a:	8b3b      	ldrh	r3, [r7, #24]
    6f4c:	1ad3      	subs	r3, r2, r3
    6f4e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
    6f50:	2300      	movs	r3, #0
    6f52:	80bb      	strh	r3, [r7, #4]
  if((buf == NULL) || (dataptr == NULL)) {
    return 0;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; len != 0 && p != NULL; p = p->next) {
    6f54:	69fb      	ldr	r3, [r7, #28]
    6f56:	681b      	ldr	r3, [r3, #0]
    6f58:	61fb      	str	r3, [r7, #28]
    6f5a:	88fb      	ldrh	r3, [r7, #6]
    6f5c:	2b00      	cmp	r3, #0
    6f5e:	d002      	beq.n	6f66 <pbuf_copy_partial+0xbe>
    6f60:	69fb      	ldr	r3, [r7, #28]
    6f62:	2b00      	cmp	r3, #0
    6f64:	d1c4      	bne.n	6ef0 <pbuf_copy_partial+0x48>
      left += buf_copy_len;
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
    6f66:	8afb      	ldrh	r3, [r7, #22]
}
    6f68:	4618      	mov	r0, r3
    6f6a:	3720      	adds	r7, #32
    6f6c:	46bd      	mov	sp, r7
    6f6e:	bd80      	pop	{r7, pc}

00006f70 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
    6f70:	b580      	push	{r7, lr}
    6f72:	b082      	sub	sp, #8
    6f74:	af00      	add	r7, sp, #0
    6f76:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
    6f78:	f7fb fd40 	bl	29fc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
    6f7c:	4b0a      	ldr	r3, [pc, #40]	; (6fa8 <tcpip_tcp_timer+0x38>)
    6f7e:	681b      	ldr	r3, [r3, #0]
    6f80:	2b00      	cmp	r3, #0
    6f82:	d103      	bne.n	6f8c <tcpip_tcp_timer+0x1c>
    6f84:	4b09      	ldr	r3, [pc, #36]	; (6fac <tcpip_tcp_timer+0x3c>)
    6f86:	681b      	ldr	r3, [r3, #0]
    6f88:	2b00      	cmp	r3, #0
    6f8a:	d005      	beq.n	6f98 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
    6f8c:	2200      	movs	r2, #0
    6f8e:	4908      	ldr	r1, [pc, #32]	; (6fb0 <tcpip_tcp_timer+0x40>)
    6f90:	20fa      	movs	r0, #250	; 0xfa
    6f92:	f000 f831 	bl	6ff8 <sys_timeout>
    6f96:	e002      	b.n	6f9e <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
    6f98:	4b06      	ldr	r3, [pc, #24]	; (6fb4 <tcpip_tcp_timer+0x44>)
    6f9a:	2200      	movs	r2, #0
    6f9c:	601a      	str	r2, [r3, #0]
  }
}
    6f9e:	bf00      	nop
    6fa0:	3708      	adds	r7, #8
    6fa2:	46bd      	mov	sp, r7
    6fa4:	bd80      	pop	{r7, pc}
    6fa6:	bf00      	nop
    6fa8:	10001960 	.word	0x10001960
    6fac:	10001974 	.word	0x10001974
    6fb0:	00006f71 	.word	0x00006f71
    6fb4:	10001220 	.word	0x10001220

00006fb8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
    6fb8:	b580      	push	{r7, lr}
    6fba:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
    6fbc:	4b0a      	ldr	r3, [pc, #40]	; (6fe8 <tcp_timer_needed+0x30>)
    6fbe:	681b      	ldr	r3, [r3, #0]
    6fc0:	2b00      	cmp	r3, #0
    6fc2:	d10f      	bne.n	6fe4 <tcp_timer_needed+0x2c>
    6fc4:	4b09      	ldr	r3, [pc, #36]	; (6fec <tcp_timer_needed+0x34>)
    6fc6:	681b      	ldr	r3, [r3, #0]
    6fc8:	2b00      	cmp	r3, #0
    6fca:	d103      	bne.n	6fd4 <tcp_timer_needed+0x1c>
    6fcc:	4b08      	ldr	r3, [pc, #32]	; (6ff0 <tcp_timer_needed+0x38>)
    6fce:	681b      	ldr	r3, [r3, #0]
    6fd0:	2b00      	cmp	r3, #0
    6fd2:	d007      	beq.n	6fe4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
    6fd4:	4b04      	ldr	r3, [pc, #16]	; (6fe8 <tcp_timer_needed+0x30>)
    6fd6:	2201      	movs	r2, #1
    6fd8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
    6fda:	2200      	movs	r2, #0
    6fdc:	4905      	ldr	r1, [pc, #20]	; (6ff4 <tcp_timer_needed+0x3c>)
    6fde:	20fa      	movs	r0, #250	; 0xfa
    6fe0:	f000 f80a 	bl	6ff8 <sys_timeout>
  }
}
    6fe4:	bf00      	nop
    6fe6:	bd80      	pop	{r7, pc}
    6fe8:	10001220 	.word	0x10001220
    6fec:	10001960 	.word	0x10001960
    6ff0:	10001974 	.word	0x10001974
    6ff4:	00006f71 	.word	0x00006f71

00006ff8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
    6ff8:	b580      	push	{r7, lr}
    6ffa:	b086      	sub	sp, #24
    6ffc:	af00      	add	r7, sp, #0
    6ffe:	60f8      	str	r0, [r7, #12]
    7000:	60b9      	str	r1, [r7, #8]
    7002:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
    7004:	2007      	movs	r0, #7
    7006:	f7fb fb3f 	bl	2688 <memp_malloc>
    700a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
    700c:	693b      	ldr	r3, [r7, #16]
    700e:	2b00      	cmp	r3, #0
    7010:	d05b      	beq.n	70ca <sys_timeout+0xd2>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }
  timeout->next = NULL;
    7012:	693b      	ldr	r3, [r7, #16]
    7014:	2200      	movs	r2, #0
    7016:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
    7018:	693b      	ldr	r3, [r7, #16]
    701a:	68ba      	ldr	r2, [r7, #8]
    701c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
    701e:	693b      	ldr	r3, [r7, #16]
    7020:	687a      	ldr	r2, [r7, #4]
    7022:	60da      	str	r2, [r3, #12]
  timeout->time = msecs;
    7024:	693b      	ldr	r3, [r7, #16]
    7026:	68fa      	ldr	r2, [r7, #12]
    7028:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
    702a:	4b2a      	ldr	r3, [pc, #168]	; (70d4 <sys_timeout+0xdc>)
    702c:	681b      	ldr	r3, [r3, #0]
    702e:	2b00      	cmp	r3, #0
    7030:	d103      	bne.n	703a <sys_timeout+0x42>
    next_timeout = timeout;
    7032:	4a28      	ldr	r2, [pc, #160]	; (70d4 <sys_timeout+0xdc>)
    7034:	693b      	ldr	r3, [r7, #16]
    7036:	6013      	str	r3, [r2, #0]
    return;
    7038:	e048      	b.n	70cc <sys_timeout+0xd4>
  }

  if (next_timeout->time > msecs) {
    703a:	4b26      	ldr	r3, [pc, #152]	; (70d4 <sys_timeout+0xdc>)
    703c:	681b      	ldr	r3, [r3, #0]
    703e:	685a      	ldr	r2, [r3, #4]
    7040:	68fb      	ldr	r3, [r7, #12]
    7042:	429a      	cmp	r2, r3
    7044:	d90f      	bls.n	7066 <sys_timeout+0x6e>
    next_timeout->time -= msecs;
    7046:	4b23      	ldr	r3, [pc, #140]	; (70d4 <sys_timeout+0xdc>)
    7048:	681b      	ldr	r3, [r3, #0]
    704a:	4a22      	ldr	r2, [pc, #136]	; (70d4 <sys_timeout+0xdc>)
    704c:	6812      	ldr	r2, [r2, #0]
    704e:	6851      	ldr	r1, [r2, #4]
    7050:	68fa      	ldr	r2, [r7, #12]
    7052:	1a8a      	subs	r2, r1, r2
    7054:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
    7056:	4b1f      	ldr	r3, [pc, #124]	; (70d4 <sys_timeout+0xdc>)
    7058:	681a      	ldr	r2, [r3, #0]
    705a:	693b      	ldr	r3, [r7, #16]
    705c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
    705e:	4a1d      	ldr	r2, [pc, #116]	; (70d4 <sys_timeout+0xdc>)
    7060:	693b      	ldr	r3, [r7, #16]
    7062:	6013      	str	r3, [r2, #0]
    7064:	e032      	b.n	70cc <sys_timeout+0xd4>
  } else {
    for(t = next_timeout; t != NULL; t = t->next) {
    7066:	4b1b      	ldr	r3, [pc, #108]	; (70d4 <sys_timeout+0xdc>)
    7068:	681b      	ldr	r3, [r3, #0]
    706a:	617b      	str	r3, [r7, #20]
    706c:	e029      	b.n	70c2 <sys_timeout+0xca>
      timeout->time -= t->time;
    706e:	693b      	ldr	r3, [r7, #16]
    7070:	685a      	ldr	r2, [r3, #4]
    7072:	697b      	ldr	r3, [r7, #20]
    7074:	685b      	ldr	r3, [r3, #4]
    7076:	1ad2      	subs	r2, r2, r3
    7078:	693b      	ldr	r3, [r7, #16]
    707a:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
    707c:	697b      	ldr	r3, [r7, #20]
    707e:	681b      	ldr	r3, [r3, #0]
    7080:	2b00      	cmp	r3, #0
    7082:	d006      	beq.n	7092 <sys_timeout+0x9a>
    7084:	697b      	ldr	r3, [r7, #20]
    7086:	681b      	ldr	r3, [r3, #0]
    7088:	685a      	ldr	r2, [r3, #4]
    708a:	693b      	ldr	r3, [r7, #16]
    708c:	685b      	ldr	r3, [r3, #4]
    708e:	429a      	cmp	r2, r3
    7090:	d914      	bls.n	70bc <sys_timeout+0xc4>
        if (t->next != NULL) {
    7092:	697b      	ldr	r3, [r7, #20]
    7094:	681b      	ldr	r3, [r3, #0]
    7096:	2b00      	cmp	r3, #0
    7098:	d008      	beq.n	70ac <sys_timeout+0xb4>
          t->next->time -= timeout->time;
    709a:	697b      	ldr	r3, [r7, #20]
    709c:	681b      	ldr	r3, [r3, #0]
    709e:	697a      	ldr	r2, [r7, #20]
    70a0:	6812      	ldr	r2, [r2, #0]
    70a2:	6851      	ldr	r1, [r2, #4]
    70a4:	693a      	ldr	r2, [r7, #16]
    70a6:	6852      	ldr	r2, [r2, #4]
    70a8:	1a8a      	subs	r2, r1, r2
    70aa:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
    70ac:	697b      	ldr	r3, [r7, #20]
    70ae:	681a      	ldr	r2, [r3, #0]
    70b0:	693b      	ldr	r3, [r7, #16]
    70b2:	601a      	str	r2, [r3, #0]
        t->next = timeout;
    70b4:	697b      	ldr	r3, [r7, #20]
    70b6:	693a      	ldr	r2, [r7, #16]
    70b8:	601a      	str	r2, [r3, #0]
        break;
    70ba:	e007      	b.n	70cc <sys_timeout+0xd4>
  if (next_timeout->time > msecs) {
    next_timeout->time -= msecs;
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for(t = next_timeout; t != NULL; t = t->next) {
    70bc:	697b      	ldr	r3, [r7, #20]
    70be:	681b      	ldr	r3, [r3, #0]
    70c0:	617b      	str	r3, [r7, #20]
    70c2:	697b      	ldr	r3, [r7, #20]
    70c4:	2b00      	cmp	r3, #0
    70c6:	d1d2      	bne.n	706e <sys_timeout+0x76>
    70c8:	e000      	b.n	70cc <sys_timeout+0xd4>
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
  if (timeout == NULL) {
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
    70ca:	bf00      	nop
        t->next = timeout;
        break;
      }
    }
  }
}
    70cc:	3718      	adds	r7, #24
    70ce:	46bd      	mov	sp, r7
    70d0:	bd80      	pop	{r7, pc}
    70d2:	bf00      	nop
    70d4:	1000121c 	.word	0x1000121c

000070d8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
    70d8:	b480      	push	{r7}
    70da:	b083      	sub	sp, #12
    70dc:	af00      	add	r7, sp, #0
    70de:	4603      	mov	r3, r0
    70e0:	80fb      	strh	r3, [r7, #6]
  return ((n & 0xff) << 8) | ((n & 0xff00) >> 8);
    70e2:	88fb      	ldrh	r3, [r7, #6]
    70e4:	021b      	lsls	r3, r3, #8
    70e6:	b21a      	sxth	r2, r3
    70e8:	88fb      	ldrh	r3, [r7, #6]
    70ea:	0a1b      	lsrs	r3, r3, #8
    70ec:	b29b      	uxth	r3, r3
    70ee:	b21b      	sxth	r3, r3
    70f0:	4313      	orrs	r3, r2
    70f2:	b21b      	sxth	r3, r3
    70f4:	b29b      	uxth	r3, r3
}
    70f6:	4618      	mov	r0, r3
    70f8:	370c      	adds	r7, #12
    70fa:	46bd      	mov	sp, r7
    70fc:	bc80      	pop	{r7}
    70fe:	4770      	bx	lr

00007100 <lwip_ntohs>:
 * @param n u16_t in network byte order
 * @return n in host byte order
 */
u16_t
lwip_ntohs(u16_t n)
{
    7100:	b580      	push	{r7, lr}
    7102:	b082      	sub	sp, #8
    7104:	af00      	add	r7, sp, #0
    7106:	4603      	mov	r3, r0
    7108:	80fb      	strh	r3, [r7, #6]
  return lwip_htons(n);
    710a:	88fb      	ldrh	r3, [r7, #6]
    710c:	4618      	mov	r0, r3
    710e:	f7ff ffe3 	bl	70d8 <lwip_htons>
    7112:	4603      	mov	r3, r0
}
    7114:	4618      	mov	r0, r3
    7116:	3708      	adds	r7, #8
    7118:	46bd      	mov	sp, r7
    711a:	bd80      	pop	{r7, pc}

0000711c <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
    711c:	b480      	push	{r7}
    711e:	b083      	sub	sp, #12
    7120:	af00      	add	r7, sp, #0
    7122:	6078      	str	r0, [r7, #4]
  return ((n & 0xff) << 24) |
    7124:	687b      	ldr	r3, [r7, #4]
    7126:	061a      	lsls	r2, r3, #24
    ((n & 0xff00) << 8) |
    7128:	687b      	ldr	r3, [r7, #4]
    712a:	021b      	lsls	r3, r3, #8
    712c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return ((n & 0xff) << 24) |
    7130:	431a      	orrs	r2, r3
    ((n & 0xff00) << 8) |
    ((n & 0xff0000UL) >> 8) |
    7132:	687b      	ldr	r3, [r7, #4]
    7134:	0a1b      	lsrs	r3, r3, #8
    7136:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 */
u32_t
lwip_htonl(u32_t n)
{
  return ((n & 0xff) << 24) |
    ((n & 0xff00) << 8) |
    713a:	431a      	orrs	r2, r3
    ((n & 0xff0000UL) >> 8) |
    ((n & 0xff000000UL) >> 24);
    713c:	687b      	ldr	r3, [r7, #4]
    713e:	0e1b      	lsrs	r3, r3, #24
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return ((n & 0xff) << 24) |
    7140:	4313      	orrs	r3, r2
    ((n & 0xff00) << 8) |
    ((n & 0xff0000UL) >> 8) |
    ((n & 0xff000000UL) >> 24);
}
    7142:	4618      	mov	r0, r3
    7144:	370c      	adds	r7, #12
    7146:	46bd      	mov	sp, r7
    7148:	bc80      	pop	{r7}
    714a:	4770      	bx	lr

0000714c <lwip_ntohl>:
 * @param n u32_t in network byte order
 * @return n in host byte order
 */
u32_t
lwip_ntohl(u32_t n)
{
    714c:	b580      	push	{r7, lr}
    714e:	b082      	sub	sp, #8
    7150:	af00      	add	r7, sp, #0
    7152:	6078      	str	r0, [r7, #4]
  return lwip_htonl(n);
    7154:	6878      	ldr	r0, [r7, #4]
    7156:	f7ff ffe1 	bl	711c <lwip_htonl>
    715a:	4603      	mov	r3, r0
}
    715c:	4618      	mov	r0, r3
    715e:	3708      	adds	r7, #8
    7160:	46bd      	mov	sp, r7
    7162:	bd80      	pop	{r7, pc}

00007164 <raw_input>:
 *           caller).
 *
 */
u8_t
raw_input(struct pbuf *p, struct netif *inp)
{
    7164:	b590      	push	{r4, r7, lr}
    7166:	b089      	sub	sp, #36	; 0x24
    7168:	af00      	add	r7, sp, #0
    716a:	6078      	str	r0, [r7, #4]
    716c:	6039      	str	r1, [r7, #0]
  struct raw_pcb *pcb, *prev;
  struct ip_hdr *iphdr;
  s16_t proto;
  u8_t eaten = 0;
    716e:	2300      	movs	r3, #0
    7170:	75fb      	strb	r3, [r7, #23]

  LWIP_UNUSED_ARG(inp);

  iphdr = (struct ip_hdr *)p->payload;
    7172:	687b      	ldr	r3, [r7, #4]
    7174:	685b      	ldr	r3, [r3, #4]
    7176:	613b      	str	r3, [r7, #16]
  proto = IPH_PROTO(iphdr);
    7178:	693b      	ldr	r3, [r7, #16]
    717a:	7a5b      	ldrb	r3, [r3, #9]
    717c:	81fb      	strh	r3, [r7, #14]

  prev = NULL;
    717e:	2300      	movs	r3, #0
    7180:	61bb      	str	r3, [r7, #24]
  pcb = raw_pcbs;
    7182:	4b24      	ldr	r3, [pc, #144]	; (7214 <raw_input+0xb0>)
    7184:	681b      	ldr	r3, [r3, #0]
    7186:	61fb      	str	r3, [r7, #28]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
    7188:	e039      	b.n	71fe <raw_input+0x9a>
    if ((pcb->protocol == proto) &&
    718a:	69fb      	ldr	r3, [r7, #28]
    718c:	7c1b      	ldrb	r3, [r3, #16]
    718e:	461a      	mov	r2, r3
    7190:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
    7194:	429a      	cmp	r2, r3
    7196:	d12d      	bne.n	71f4 <raw_input+0x90>
        (ip_addr_isany(&pcb->local_ip) ||
    7198:	69fb      	ldr	r3, [r7, #28]
  prev = NULL;
  pcb = raw_pcbs;
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
    if ((pcb->protocol == proto) &&
    719a:	2b00      	cmp	r3, #0
    719c:	d009      	beq.n	71b2 <raw_input+0x4e>
        (ip_addr_isany(&pcb->local_ip) ||
    719e:	69fb      	ldr	r3, [r7, #28]
    71a0:	681b      	ldr	r3, [r3, #0]
    71a2:	2b00      	cmp	r3, #0
    71a4:	d005      	beq.n	71b2 <raw_input+0x4e>
         ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest))) {
    71a6:	69fb      	ldr	r3, [r7, #28]
    71a8:	681a      	ldr	r2, [r3, #0]
    71aa:	4b1b      	ldr	r3, [pc, #108]	; (7218 <raw_input+0xb4>)
    71ac:	681b      	ldr	r3, [r3, #0]
  pcb = raw_pcbs;
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
    if ((pcb->protocol == proto) &&
        (ip_addr_isany(&pcb->local_ip) ||
    71ae:	429a      	cmp	r2, r3
    71b0:	d120      	bne.n	71f4 <raw_input+0x90>
      /* broadcast filter? */
      if ((pcb->so_options & SOF_BROADCAST) || !ip_addr_isbroadcast(&current_iphdr_dest, inp))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        /* receive callback function available? */
        if (pcb->recv != NULL) {
    71b2:	69fb      	ldr	r3, [r7, #28]
    71b4:	695b      	ldr	r3, [r3, #20]
    71b6:	2b00      	cmp	r3, #0
    71b8:	d01c      	beq.n	71f4 <raw_input+0x90>
          /* the receive callback function did not eat the packet? */
          if (pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr()) != 0) {
    71ba:	69fb      	ldr	r3, [r7, #28]
    71bc:	695c      	ldr	r4, [r3, #20]
    71be:	69fb      	ldr	r3, [r7, #28]
    71c0:	6998      	ldr	r0, [r3, #24]
    71c2:	4b16      	ldr	r3, [pc, #88]	; (721c <raw_input+0xb8>)
    71c4:	687a      	ldr	r2, [r7, #4]
    71c6:	69f9      	ldr	r1, [r7, #28]
    71c8:	47a0      	blx	r4
    71ca:	4603      	mov	r3, r0
    71cc:	2b00      	cmp	r3, #0
    71ce:	d011      	beq.n	71f4 <raw_input+0x90>
            /* receive function ate the packet */
            p = NULL;
    71d0:	2300      	movs	r3, #0
    71d2:	607b      	str	r3, [r7, #4]
            eaten = 1;
    71d4:	2301      	movs	r3, #1
    71d6:	75fb      	strb	r3, [r7, #23]
            if (prev != NULL) {
    71d8:	69bb      	ldr	r3, [r7, #24]
    71da:	2b00      	cmp	r3, #0
    71dc:	d00a      	beq.n	71f4 <raw_input+0x90>
            /* move the pcb to the front of raw_pcbs so that is
               found faster next time */
              prev->next = pcb->next;
    71de:	69fb      	ldr	r3, [r7, #28]
    71e0:	68da      	ldr	r2, [r3, #12]
    71e2:	69bb      	ldr	r3, [r7, #24]
    71e4:	60da      	str	r2, [r3, #12]
              pcb->next = raw_pcbs;
    71e6:	4b0b      	ldr	r3, [pc, #44]	; (7214 <raw_input+0xb0>)
    71e8:	681a      	ldr	r2, [r3, #0]
    71ea:	69fb      	ldr	r3, [r7, #28]
    71ec:	60da      	str	r2, [r3, #12]
              raw_pcbs = pcb;
    71ee:	4a09      	ldr	r2, [pc, #36]	; (7214 <raw_input+0xb0>)
    71f0:	69fb      	ldr	r3, [r7, #28]
    71f2:	6013      	str	r3, [r2, #0]
        }
        /* no receive callback function was set for this raw PCB */
      }
      /* drop the packet */
    }
    prev = pcb;
    71f4:	69fb      	ldr	r3, [r7, #28]
    71f6:	61bb      	str	r3, [r7, #24]
    pcb = pcb->next;
    71f8:	69fb      	ldr	r3, [r7, #28]
    71fa:	68db      	ldr	r3, [r3, #12]
    71fc:	61fb      	str	r3, [r7, #28]

  prev = NULL;
  pcb = raw_pcbs;
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
    71fe:	7dfb      	ldrb	r3, [r7, #23]
    7200:	2b00      	cmp	r3, #0
    7202:	d102      	bne.n	720a <raw_input+0xa6>
    7204:	69fb      	ldr	r3, [r7, #28]
    7206:	2b00      	cmp	r3, #0
    7208:	d1bf      	bne.n	718a <raw_input+0x26>
      /* drop the packet */
    }
    prev = pcb;
    pcb = pcb->next;
  }
  return eaten;
    720a:	7dfb      	ldrb	r3, [r7, #23]
}
    720c:	4618      	mov	r0, r3
    720e:	3724      	adds	r7, #36	; 0x24
    7210:	46bd      	mov	sp, r7
    7212:	bd90      	pop	{r4, r7, pc}
    7214:	10001224 	.word	0x10001224
    7218:	10001aa0 	.word	0x10001aa0
    721c:	10001a98 	.word	0x10001a98

00007220 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
    7220:	b590      	push	{r4, r7, lr}
    7222:	b08d      	sub	sp, #52	; 0x34
    7224:	af02      	add	r7, sp, #8
    7226:	6078      	str	r0, [r7, #4]
    7228:	6039      	str	r1, [r7, #0]
  u8_t local_match;
  u8_t broadcast;

  PERF_START;

  UDP_STATS_INC(udp.recv);
    722a:	4b94      	ldr	r3, [pc, #592]	; (747c <udp_input+0x25c>)
    722c:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
    7230:	3301      	adds	r3, #1
    7232:	b29a      	uxth	r2, r3
    7234:	4b91      	ldr	r3, [pc, #580]	; (747c <udp_input+0x25c>)
    7236:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

  iphdr = (struct ip_hdr *)p->payload;
    723a:	687b      	ldr	r3, [r7, #4]
    723c:	685b      	ldr	r3, [r3, #4]
    723e:	617b      	str	r3, [r7, #20]

  /* Check minimum length (IP header + UDP header)
   * and move payload pointer to UDP header */
  if (p->tot_len < (IPH_HL(iphdr) * 4 + UDP_HLEN) || pbuf_header(p, -(s16_t)(IPH_HL(iphdr) * 4))) {
    7240:	687b      	ldr	r3, [r7, #4]
    7242:	891b      	ldrh	r3, [r3, #8]
    7244:	461c      	mov	r4, r3
    7246:	697b      	ldr	r3, [r7, #20]
    7248:	881b      	ldrh	r3, [r3, #0]
    724a:	b29b      	uxth	r3, r3
    724c:	4618      	mov	r0, r3
    724e:	f7ff ff57 	bl	7100 <lwip_ntohs>
    7252:	4603      	mov	r3, r0
    7254:	0a1b      	lsrs	r3, r3, #8
    7256:	b29b      	uxth	r3, r3
    7258:	f003 030f 	and.w	r3, r3, #15
    725c:	3302      	adds	r3, #2
    725e:	009b      	lsls	r3, r3, #2
    7260:	429c      	cmp	r4, r3
    7262:	db17      	blt.n	7294 <udp_input+0x74>
    7264:	697b      	ldr	r3, [r7, #20]
    7266:	881b      	ldrh	r3, [r3, #0]
    7268:	b29b      	uxth	r3, r3
    726a:	4618      	mov	r0, r3
    726c:	f7ff ff48 	bl	7100 <lwip_ntohs>
    7270:	4603      	mov	r3, r0
    7272:	0a1b      	lsrs	r3, r3, #8
    7274:	b29b      	uxth	r3, r3
    7276:	f003 030f 	and.w	r3, r3, #15
    727a:	b29b      	uxth	r3, r3
    727c:	009b      	lsls	r3, r3, #2
    727e:	b29b      	uxth	r3, r3
    7280:	425b      	negs	r3, r3
    7282:	b29b      	uxth	r3, r3
    7284:	b21b      	sxth	r3, r3
    7286:	4619      	mov	r1, r3
    7288:	6878      	ldr	r0, [r7, #4]
    728a:	f7ff fc6d 	bl	6b68 <pbuf_header>
    728e:	4603      	mov	r3, r0
    7290:	2b00      	cmp	r3, #0
    7292:	d013      	beq.n	72bc <udp_input+0x9c>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    7294:	4b79      	ldr	r3, [pc, #484]	; (747c <udp_input+0x25c>)
    7296:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
    729a:	3301      	adds	r3, #1
    729c:	b29a      	uxth	r2, r3
    729e:	4b77      	ldr	r3, [pc, #476]	; (747c <udp_input+0x25c>)
    72a0:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    UDP_STATS_INC(udp.drop);
    72a4:	4b75      	ldr	r3, [pc, #468]	; (747c <udp_input+0x25c>)
    72a6:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
    72aa:	3301      	adds	r3, #1
    72ac:	b29a      	uxth	r2, r3
    72ae:	4b73      	ldr	r3, [pc, #460]	; (747c <udp_input+0x25c>)
    72b0:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    snmp_inc_udpinerrors();
    pbuf_free(p);
    72b4:	6878      	ldr	r0, [r7, #4]
    72b6:	f7ff fcc5 	bl	6c44 <pbuf_free>
    goto end;
    72ba:	e11f      	b.n	74fc <udp_input+0x2dc>
  }

  udphdr = (struct udp_hdr *)p->payload;
    72bc:	687b      	ldr	r3, [r7, #4]
    72be:	685b      	ldr	r3, [r3, #4]
    72c0:	613b      	str	r3, [r7, #16]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(&current_iphdr_dest, inp);
    72c2:	4b6f      	ldr	r3, [pc, #444]	; (7480 <udp_input+0x260>)
    72c4:	681b      	ldr	r3, [r3, #0]
    72c6:	6839      	ldr	r1, [r7, #0]
    72c8:	4618      	mov	r0, r3
    72ca:	f000 fd33 	bl	7d34 <ip4_addr_isbroadcast>
    72ce:	4603      	mov	r3, r0
    72d0:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = ntohs(udphdr->src);
    72d2:	693b      	ldr	r3, [r7, #16]
    72d4:	881b      	ldrh	r3, [r3, #0]
    72d6:	b29b      	uxth	r3, r3
    72d8:	4618      	mov	r0, r3
    72da:	f7ff ff11 	bl	7100 <lwip_ntohs>
    72de:	4603      	mov	r3, r0
    72e0:	81bb      	strh	r3, [r7, #12]
  dest = ntohs(udphdr->dest);
    72e2:	693b      	ldr	r3, [r7, #16]
    72e4:	885b      	ldrh	r3, [r3, #2]
    72e6:	b29b      	uxth	r3, r3
    72e8:	4618      	mov	r0, r3
    72ea:	f7ff ff09 	bl	7100 <lwip_ntohs>
    72ee:	4603      	mov	r3, r0
    72f0:	817b      	strh	r3, [r7, #10]
      }
    }
  } else
#endif /* LWIP_DHCP */
  {
    prev = NULL;
    72f2:	2300      	movs	r3, #0
    72f4:	623b      	str	r3, [r7, #32]
    local_match = 0;
    72f6:	2300      	movs	r3, #0
    72f8:	76fb      	strb	r3, [r7, #27]
    uncon_pcb = NULL;
    72fa:	2300      	movs	r3, #0
    72fc:	61fb      	str	r3, [r7, #28]
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
    72fe:	4b61      	ldr	r3, [pc, #388]	; (7484 <udp_input+0x264>)
    7300:	681b      	ldr	r3, [r3, #0]
    7302:	627b      	str	r3, [r7, #36]	; 0x24
    7304:	e059      	b.n	73ba <udp_input+0x19a>
      local_match = 0;
    7306:	2300      	movs	r3, #0
    7308:	76fb      	strb	r3, [r7, #27]
                   ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip), pcb->local_port,
                   ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
                   ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip), pcb->remote_port));

      /* compare PCB local addr+port to UDP destination addr+port */
      if ((pcb->local_port == dest) &&
    730a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    730c:	8a5b      	ldrh	r3, [r3, #18]
    730e:	897a      	ldrh	r2, [r7, #10]
    7310:	429a      	cmp	r2, r3
    7312:	d11f      	bne.n	7354 <udp_input+0x134>
    7314:	7bfb      	ldrb	r3, [r7, #15]
    7316:	2b00      	cmp	r3, #0
    7318:	d106      	bne.n	7328 <udp_input+0x108>
          ((!broadcast && ip_addr_isany(&pcb->local_ip)) ||
    731a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    731c:	2b00      	cmp	r3, #0
    731e:	d00c      	beq.n	733a <udp_input+0x11a>
    7320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7322:	681b      	ldr	r3, [r3, #0]
    7324:	2b00      	cmp	r3, #0
    7326:	d008      	beq.n	733a <udp_input+0x11a>
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
    7328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    732a:	681a      	ldr	r2, [r3, #0]
    732c:	4b54      	ldr	r3, [pc, #336]	; (7480 <udp_input+0x260>)
    732e:	681b      	ldr	r3, [r3, #0]
                   ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
                   ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip), pcb->remote_port));

      /* compare PCB local addr+port to UDP destination addr+port */
      if ((pcb->local_port == dest) &&
          ((!broadcast && ip_addr_isany(&pcb->local_ip)) ||
    7330:	429a      	cmp	r2, r3
    7332:	d002      	beq.n	733a <udp_input+0x11a>
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
    7334:	7bfb      	ldrb	r3, [r7, #15]
    7336:	2b00      	cmp	r3, #0
    7338:	d00c      	beq.n	7354 <udp_input+0x134>
#if IP_SOF_BROADCAST_RECV
           (broadcast && (pcb->so_options & SOF_BROADCAST)))) {
#else  /* IP_SOF_BROADCAST_RECV */
           (broadcast))) {
#endif /* IP_SOF_BROADCAST_RECV */
        local_match = 1;
    733a:	2301      	movs	r3, #1
    733c:	76fb      	strb	r3, [r7, #27]
        if ((uncon_pcb == NULL) && 
    733e:	69fb      	ldr	r3, [r7, #28]
    7340:	2b00      	cmp	r3, #0
    7342:	d107      	bne.n	7354 <udp_input+0x134>
            ((pcb->flags & UDP_FLAGS_CONNECTED) == 0)) {
    7344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7346:	7c1b      	ldrb	r3, [r3, #16]
    7348:	f003 0304 	and.w	r3, r3, #4
           (broadcast && (pcb->so_options & SOF_BROADCAST)))) {
#else  /* IP_SOF_BROADCAST_RECV */
           (broadcast))) {
#endif /* IP_SOF_BROADCAST_RECV */
        local_match = 1;
        if ((uncon_pcb == NULL) && 
    734c:	2b00      	cmp	r3, #0
    734e:	d101      	bne.n	7354 <udp_input+0x134>
            ((pcb->flags & UDP_FLAGS_CONNECTED) == 0)) {
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
    7350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7352:	61fb      	str	r3, [r7, #28]
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
    7354:	7efb      	ldrb	r3, [r7, #27]
    7356:	2b00      	cmp	r3, #0
    7358:	d02a      	beq.n	73b0 <udp_input+0x190>
          (pcb->remote_port == src) &&
    735a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    735c:	8a9b      	ldrh	r3, [r3, #20]
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
    735e:	89ba      	ldrh	r2, [r7, #12]
    7360:	429a      	cmp	r2, r3
    7362:	d125      	bne.n	73b0 <udp_input+0x190>
          (pcb->remote_port == src) &&
          (ip_addr_isany(&pcb->remote_ip) ||
    7364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7366:	3304      	adds	r3, #4
          uncon_pcb = pcb;
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
          (pcb->remote_port == src) &&
    7368:	2b00      	cmp	r3, #0
    736a:	d009      	beq.n	7380 <udp_input+0x160>
          (ip_addr_isany(&pcb->remote_ip) ||
    736c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    736e:	685b      	ldr	r3, [r3, #4]
    7370:	2b00      	cmp	r3, #0
    7372:	d005      	beq.n	7380 <udp_input+0x160>
           ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
    7374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7376:	685a      	ldr	r2, [r3, #4]
    7378:	4b43      	ldr	r3, [pc, #268]	; (7488 <udp_input+0x268>)
    737a:	681b      	ldr	r3, [r3, #0]
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
          (pcb->remote_port == src) &&
          (ip_addr_isany(&pcb->remote_ip) ||
    737c:	429a      	cmp	r2, r3
    737e:	d117      	bne.n	73b0 <udp_input+0x190>
           ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
    7380:	6a3b      	ldr	r3, [r7, #32]
    7382:	2b00      	cmp	r3, #0
    7384:	d00b      	beq.n	739e <udp_input+0x17e>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
    7386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7388:	68da      	ldr	r2, [r3, #12]
    738a:	6a3b      	ldr	r3, [r7, #32]
    738c:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
    738e:	4b3d      	ldr	r3, [pc, #244]	; (7484 <udp_input+0x264>)
    7390:	681a      	ldr	r2, [r3, #0]
    7392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7394:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
    7396:	4a3b      	ldr	r2, [pc, #236]	; (7484 <udp_input+0x264>)
    7398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    739a:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
    739c:	e010      	b.n	73c0 <udp_input+0x1a0>
             found faster next time */
          prev->next = pcb->next;
          pcb->next = udp_pcbs;
          udp_pcbs = pcb;
        } else {
          UDP_STATS_INC(udp.cachehit);
    739e:	4b37      	ldr	r3, [pc, #220]	; (747c <udp_input+0x25c>)
    73a0:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
    73a4:	3301      	adds	r3, #1
    73a6:	b29a      	uxth	r2, r3
    73a8:	4b34      	ldr	r3, [pc, #208]	; (747c <udp_input+0x25c>)
    73aa:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
        }
        break;
    73ae:	e007      	b.n	73c0 <udp_input+0x1a0>
      }
      prev = pcb;
    73b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    73b2:	623b      	str	r3, [r7, #32]
    uncon_pcb = NULL;
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
    73b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    73b6:	68db      	ldr	r3, [r3, #12]
    73b8:	627b      	str	r3, [r7, #36]	; 0x24
    73ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    73bc:	2b00      	cmp	r3, #0
    73be:	d1a2      	bne.n	7306 <udp_input+0xe6>
        break;
      }
      prev = pcb;
    }
    /* no fully matching pcb found? then look for an unconnected pcb */
    if (pcb == NULL) {
    73c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    73c2:	2b00      	cmp	r3, #0
    73c4:	d101      	bne.n	73ca <udp_input+0x1aa>
      pcb = uncon_pcb;
    73c6:	69fb      	ldr	r3, [r7, #28]
    73c8:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL || ip_addr_cmp(&inp->ip_addr, &current_iphdr_dest)) {
    73ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    73cc:	2b00      	cmp	r3, #0
    73ce:	d106      	bne.n	73de <udp_input+0x1be>
    73d0:	683b      	ldr	r3, [r7, #0]
    73d2:	685a      	ldr	r2, [r3, #4]
    73d4:	4b2a      	ldr	r3, [pc, #168]	; (7480 <udp_input+0x260>)
    73d6:	681b      	ldr	r3, [r3, #0]
    73d8:	429a      	cmp	r2, r3
    73da:	f040 808c 	bne.w	74f6 <udp_input+0x2d6>
#endif /* CHECKSUM_CHECK_UDP */
    } else
#endif /* LWIP_UDPLITE */
    {
#if CHECKSUM_CHECK_UDP
      if (udphdr->chksum != 0) {
    73de:	693b      	ldr	r3, [r7, #16]
    73e0:	88db      	ldrh	r3, [r3, #6]
    73e2:	b29b      	uxth	r3, r3
    73e4:	2b00      	cmp	r3, #0
    73e6:	d01f      	beq.n	7428 <udp_input+0x208>
        if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
    73e8:	687b      	ldr	r3, [r7, #4]
    73ea:	891b      	ldrh	r3, [r3, #8]
    73ec:	9300      	str	r3, [sp, #0]
    73ee:	2311      	movs	r3, #17
    73f0:	4a23      	ldr	r2, [pc, #140]	; (7480 <udp_input+0x260>)
    73f2:	4925      	ldr	r1, [pc, #148]	; (7488 <udp_input+0x268>)
    73f4:	6878      	ldr	r0, [r7, #4]
    73f6:	f000 fbbb 	bl	7b70 <inet_chksum_pseudo>
    73fa:	4603      	mov	r3, r0
    73fc:	2b00      	cmp	r3, #0
    73fe:	d013      	beq.n	7428 <udp_input+0x208>
                               IP_PROTO_UDP, p->tot_len) != 0) {
          LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                      ("udp_input: UDP datagram discarded due to failing checksum\n"));
          UDP_STATS_INC(udp.chkerr);
    7400:	4b1e      	ldr	r3, [pc, #120]	; (747c <udp_input+0x25c>)
    7402:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
    7406:	3301      	adds	r3, #1
    7408:	b29a      	uxth	r2, r3
    740a:	4b1c      	ldr	r3, [pc, #112]	; (747c <udp_input+0x25c>)
    740c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
          UDP_STATS_INC(udp.drop);
    7410:	4b1a      	ldr	r3, [pc, #104]	; (747c <udp_input+0x25c>)
    7412:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
    7416:	3301      	adds	r3, #1
    7418:	b29a      	uxth	r2, r3
    741a:	4b18      	ldr	r3, [pc, #96]	; (747c <udp_input+0x25c>)
    741c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
          snmp_inc_udpinerrors();
          pbuf_free(p);
    7420:	6878      	ldr	r0, [r7, #4]
    7422:	f7ff fc0f 	bl	6c44 <pbuf_free>
          goto end;
    7426:	e069      	b.n	74fc <udp_input+0x2dc>
        }
      }
#endif /* CHECKSUM_CHECK_UDP */
    }
    if(pbuf_header(p, -UDP_HLEN)) {
    7428:	f06f 0107 	mvn.w	r1, #7
    742c:	6878      	ldr	r0, [r7, #4]
    742e:	f7ff fb9b 	bl	6b68 <pbuf_header>
    7432:	4603      	mov	r3, r0
    7434:	2b00      	cmp	r3, #0
    7436:	d00b      	beq.n	7450 <udp_input+0x230>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
    7438:	4b10      	ldr	r3, [pc, #64]	; (747c <udp_input+0x25c>)
    743a:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
    743e:	3301      	adds	r3, #1
    7440:	b29a      	uxth	r2, r3
    7442:	4b0e      	ldr	r3, [pc, #56]	; (747c <udp_input+0x25c>)
    7444:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
      snmp_inc_udpinerrors();
      pbuf_free(p);
    7448:	6878      	ldr	r0, [r7, #4]
    744a:	f7ff fbfb 	bl	6c44 <pbuf_free>
      goto end;
    744e:	e055      	b.n	74fc <udp_input+0x2dc>
    }
    if (pcb != NULL) {
    7450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7452:	2b00      	cmp	r3, #0
    7454:	d01a      	beq.n	748c <udp_input+0x26c>
          pbuf_header(p, -(s16_t)((IPH_HL(iphdr) * 4) + UDP_HLEN));
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
    7456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7458:	699b      	ldr	r3, [r3, #24]
    745a:	2b00      	cmp	r3, #0
    745c:	d00a      	beq.n	7474 <udp_input+0x254>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
    745e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7460:	699c      	ldr	r4, [r3, #24]
    7462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7464:	69d8      	ldr	r0, [r3, #28]
    7466:	89bb      	ldrh	r3, [r7, #12]
    7468:	9300      	str	r3, [sp, #0]
    746a:	4b07      	ldr	r3, [pc, #28]	; (7488 <udp_input+0x268>)
    746c:	687a      	ldr	r2, [r7, #4]
    746e:	6a79      	ldr	r1, [r7, #36]	; 0x24
    7470:	47a0      	blx	r4
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpinerrors();
      pbuf_free(p);
      goto end;
    }
    if (pcb != NULL) {
    7472:	e043      	b.n	74fc <udp_input+0x2dc>
      if (pcb->recv != NULL) {
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
      } else {
        /* no recv function registered? then we have to free the pbuf! */
        pbuf_free(p);
    7474:	6878      	ldr	r0, [r7, #4]
    7476:	f7ff fbe5 	bl	6c44 <pbuf_free>
        goto end;
    747a:	e03f      	b.n	74fc <udp_input+0x2dc>
    747c:	10001978 	.word	0x10001978
    7480:	10001aa0 	.word	0x10001aa0
    7484:	10001a94 	.word	0x10001a94
    7488:	10001a98 	.word	0x10001a98
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));

#if LWIP_ICMP
      /* No match was found, send ICMP destination port unreachable unless
         destination address was broadcast/multicast. */
      if (!broadcast &&
    748c:	7bfb      	ldrb	r3, [r7, #15]
    748e:	2b00      	cmp	r3, #0
    7490:	d11d      	bne.n	74ce <udp_input+0x2ae>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
    7492:	4b1c      	ldr	r3, [pc, #112]	; (7504 <udp_input+0x2e4>)
    7494:	681b      	ldr	r3, [r3, #0]
    7496:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));

#if LWIP_ICMP
      /* No match was found, send ICMP destination port unreachable unless
         destination address was broadcast/multicast. */
      if (!broadcast &&
    749a:	2be0      	cmp	r3, #224	; 0xe0
    749c:	d017      	beq.n	74ce <udp_input+0x2ae>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
        /* move payload pointer back to ip header */
        pbuf_header(p, (IPH_HL(iphdr) * 4) + UDP_HLEN);
    749e:	697b      	ldr	r3, [r7, #20]
    74a0:	881b      	ldrh	r3, [r3, #0]
    74a2:	b29b      	uxth	r3, r3
    74a4:	4618      	mov	r0, r3
    74a6:	f7ff fe2b 	bl	7100 <lwip_ntohs>
    74aa:	4603      	mov	r3, r0
    74ac:	0a1b      	lsrs	r3, r3, #8
    74ae:	b29b      	uxth	r3, r3
    74b0:	f003 030f 	and.w	r3, r3, #15
    74b4:	3302      	adds	r3, #2
    74b6:	b29b      	uxth	r3, r3
    74b8:	009b      	lsls	r3, r3, #2
    74ba:	b29b      	uxth	r3, r3
    74bc:	b21b      	sxth	r3, r3
    74be:	4619      	mov	r1, r3
    74c0:	6878      	ldr	r0, [r7, #4]
    74c2:	f7ff fb51 	bl	6b68 <pbuf_header>
        LWIP_ASSERT("p->payload == iphdr", (p->payload == iphdr));
        icmp_dest_unreach(p, ICMP_DUR_PORT);
    74c6:	2103      	movs	r1, #3
    74c8:	6878      	ldr	r0, [r7, #4]
    74ca:	f001 fa5f 	bl	898c <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      UDP_STATS_INC(udp.proterr);
    74ce:	4b0e      	ldr	r3, [pc, #56]	; (7508 <udp_input+0x2e8>)
    74d0:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
    74d4:	3301      	adds	r3, #1
    74d6:	b29a      	uxth	r2, r3
    74d8:	4b0b      	ldr	r3, [pc, #44]	; (7508 <udp_input+0x2e8>)
    74da:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
      UDP_STATS_INC(udp.drop);
    74de:	4b0a      	ldr	r3, [pc, #40]	; (7508 <udp_input+0x2e8>)
    74e0:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
    74e4:	3301      	adds	r3, #1
    74e6:	b29a      	uxth	r2, r3
    74e8:	4b07      	ldr	r3, [pc, #28]	; (7508 <udp_input+0x2e8>)
    74ea:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
      snmp_inc_udpnoports();
      pbuf_free(p);
    74ee:	6878      	ldr	r0, [r7, #4]
    74f0:	f7ff fba8 	bl	6c44 <pbuf_free>
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpinerrors();
      pbuf_free(p);
      goto end;
    }
    if (pcb != NULL) {
    74f4:	e002      	b.n	74fc <udp_input+0x2dc>
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpnoports();
      pbuf_free(p);
    }
  } else {
    pbuf_free(p);
    74f6:	6878      	ldr	r0, [r7, #4]
    74f8:	f7ff fba4 	bl	6c44 <pbuf_free>
  }
end:
  PERF_STOP("udp_input");
}
    74fc:	bf00      	nop
    74fe:	372c      	adds	r7, #44	; 0x2c
    7500:	46bd      	mov	sp, r7
    7502:	bd90      	pop	{r4, r7, pc}
    7504:	10001aa0 	.word	0x10001aa0
    7508:	10001978 	.word	0x10001978

0000750c <ip_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip_route(ip_addr_t *dest)
{
    750c:	b480      	push	{r7}
    750e:	b085      	sub	sp, #20
    7510:	af00      	add	r7, sp, #0
    7512:	6078      	str	r0, [r7, #4]
  struct netif *netif;

  /* iterate through netifs */
  for(netif = netif_list; netif != NULL; netif = netif->next) {
    7514:	4b1c      	ldr	r3, [pc, #112]	; (7588 <ip_route+0x7c>)
    7516:	681b      	ldr	r3, [r3, #0]
    7518:	60fb      	str	r3, [r7, #12]
    751a:	e015      	b.n	7548 <ip_route+0x3c>
    /* network mask matches? */
    if (netif_is_up(netif)) {
    751c:	68fb      	ldr	r3, [r7, #12]
    751e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    7522:	f003 0301 	and.w	r3, r3, #1
    7526:	2b00      	cmp	r3, #0
    7528:	d00b      	beq.n	7542 <ip_route+0x36>
      if (ip_addr_netcmp(dest, &(netif->ip_addr), &(netif->netmask))) {
    752a:	687b      	ldr	r3, [r7, #4]
    752c:	681a      	ldr	r2, [r3, #0]
    752e:	68fb      	ldr	r3, [r7, #12]
    7530:	685b      	ldr	r3, [r3, #4]
    7532:	405a      	eors	r2, r3
    7534:	68fb      	ldr	r3, [r7, #12]
    7536:	689b      	ldr	r3, [r3, #8]
    7538:	4013      	ands	r3, r2
    753a:	2b00      	cmp	r3, #0
    753c:	d101      	bne.n	7542 <ip_route+0x36>
        /* return netif on which to forward IP packet */
        return netif;
    753e:	68fb      	ldr	r3, [r7, #12]
    7540:	e01d      	b.n	757e <ip_route+0x72>
ip_route(ip_addr_t *dest)
{
  struct netif *netif;

  /* iterate through netifs */
  for(netif = netif_list; netif != NULL; netif = netif->next) {
    7542:	68fb      	ldr	r3, [r7, #12]
    7544:	681b      	ldr	r3, [r3, #0]
    7546:	60fb      	str	r3, [r7, #12]
    7548:	68fb      	ldr	r3, [r7, #12]
    754a:	2b00      	cmp	r3, #0
    754c:	d1e6      	bne.n	751c <ip_route+0x10>
        /* return netif on which to forward IP packet */
        return netif;
      }
    }
  }
  if ((netif_default == NULL) || (!netif_is_up(netif_default))) {
    754e:	4b0f      	ldr	r3, [pc, #60]	; (758c <ip_route+0x80>)
    7550:	681b      	ldr	r3, [r3, #0]
    7552:	2b00      	cmp	r3, #0
    7554:	d007      	beq.n	7566 <ip_route+0x5a>
    7556:	4b0d      	ldr	r3, [pc, #52]	; (758c <ip_route+0x80>)
    7558:	681b      	ldr	r3, [r3, #0]
    755a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    755e:	f003 0301 	and.w	r3, r3, #1
    7562:	2b00      	cmp	r3, #0
    7564:	d109      	bne.n	757a <ip_route+0x6e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    7566:	4b0a      	ldr	r3, [pc, #40]	; (7590 <ip_route+0x84>)
    7568:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
    756c:	3301      	adds	r3, #1
    756e:	b29a      	uxth	r2, r3
    7570:	4b07      	ldr	r3, [pc, #28]	; (7590 <ip_route+0x84>)
    7572:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    snmp_inc_ipoutnoroutes();
    return NULL;
    7576:	2300      	movs	r3, #0
    7578:	e001      	b.n	757e <ip_route+0x72>
  }
  /* no matching netif found, use default netif */
  return netif_default;
    757a:	4b04      	ldr	r3, [pc, #16]	; (758c <ip_route+0x80>)
    757c:	681b      	ldr	r3, [r3, #0]
}
    757e:	4618      	mov	r0, r3
    7580:	3714      	adds	r7, #20
    7582:	46bd      	mov	sp, r7
    7584:	bc80      	pop	{r7}
    7586:	4770      	bx	lr
    7588:	10001958 	.word	0x10001958
    758c:	1000195c 	.word	0x1000195c
    7590:	10001978 	.word	0x10001978

00007594 <ip_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip_input(struct pbuf *p, struct netif *inp)
{
    7594:	b580      	push	{r7, lr}
    7596:	b086      	sub	sp, #24
    7598:	af00      	add	r7, sp, #0
    759a:	6078      	str	r0, [r7, #4]
    759c:	6039      	str	r1, [r7, #0]
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  int check_ip_src=1;
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  IP_STATS_INC(ip.recv);
    759e:	4b90      	ldr	r3, [pc, #576]	; (77e0 <ip_input+0x24c>)
    75a0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
    75a4:	3301      	adds	r3, #1
    75a6:	b29a      	uxth	r2, r3
    75a8:	4b8d      	ldr	r3, [pc, #564]	; (77e0 <ip_input+0x24c>)
    75aa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  snmp_inc_ipinreceives();

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
    75ae:	687b      	ldr	r3, [r7, #4]
    75b0:	685b      	ldr	r3, [r3, #4]
    75b2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
    75b4:	697b      	ldr	r3, [r7, #20]
    75b6:	881b      	ldrh	r3, [r3, #0]
    75b8:	b29b      	uxth	r3, r3
    75ba:	4618      	mov	r0, r3
    75bc:	f7ff fda0 	bl	7100 <lwip_ntohs>
    75c0:	4603      	mov	r3, r0
    75c2:	0b1b      	lsrs	r3, r3, #12
    75c4:	b29b      	uxth	r3, r3
    75c6:	2b04      	cmp	r3, #4
    75c8:	d014      	beq.n	75f4 <ip_input+0x60>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", IPH_V(iphdr)));
    ip_debug_print(p);
    pbuf_free(p);
    75ca:	6878      	ldr	r0, [r7, #4]
    75cc:	f7ff fb3a 	bl	6c44 <pbuf_free>
    IP_STATS_INC(ip.err);
    75d0:	4b83      	ldr	r3, [pc, #524]	; (77e0 <ip_input+0x24c>)
    75d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
    75d6:	3301      	adds	r3, #1
    75d8:	b29a      	uxth	r2, r3
    75da:	4b81      	ldr	r3, [pc, #516]	; (77e0 <ip_input+0x24c>)
    75dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
    75e0:	4b7f      	ldr	r3, [pc, #508]	; (77e0 <ip_input+0x24c>)
    75e2:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
    75e6:	3301      	adds	r3, #1
    75e8:	b29a      	uxth	r2, r3
    75ea:	4b7d      	ldr	r3, [pc, #500]	; (77e0 <ip_input+0x24c>)
    75ec:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    snmp_inc_ipinhdrerrors();
    return ERR_OK;
    75f0:	2300      	movs	r3, #0
    75f2:	e137      	b.n	7864 <ip_input+0x2d0>
  }

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
    75f4:	697b      	ldr	r3, [r7, #20]
    75f6:	881b      	ldrh	r3, [r3, #0]
    75f8:	b29b      	uxth	r3, r3
    75fa:	4618      	mov	r0, r3
    75fc:	f7ff fd80 	bl	7100 <lwip_ntohs>
    7600:	4603      	mov	r3, r0
    7602:	0a1b      	lsrs	r3, r3, #8
    7604:	b29b      	uxth	r3, r3
    7606:	f003 030f 	and.w	r3, r3, #15
    760a:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
    760c:	897b      	ldrh	r3, [r7, #10]
    760e:	009b      	lsls	r3, r3, #2
    7610:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = ntohs(IPH_LEN(iphdr));
    7612:	697b      	ldr	r3, [r7, #20]
    7614:	885b      	ldrh	r3, [r3, #2]
    7616:	b29b      	uxth	r3, r3
    7618:	4618      	mov	r0, r3
    761a:	f7ff fd71 	bl	7100 <lwip_ntohs>
    761e:	4603      	mov	r3, r0
    7620:	813b      	strh	r3, [r7, #8]

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len)) {
    7622:	687b      	ldr	r3, [r7, #4]
    7624:	895b      	ldrh	r3, [r3, #10]
    7626:	897a      	ldrh	r2, [r7, #10]
    7628:	429a      	cmp	r2, r3
    762a:	d804      	bhi.n	7636 <ip_input+0xa2>
    762c:	687b      	ldr	r3, [r7, #4]
    762e:	891b      	ldrh	r3, [r3, #8]
    7630:	893a      	ldrh	r2, [r7, #8]
    7632:	429a      	cmp	r2, r3
    7634:	d914      	bls.n	7660 <ip_input+0xcc>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
    7636:	6878      	ldr	r0, [r7, #4]
    7638:	f7ff fb04 	bl	6c44 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    763c:	4b68      	ldr	r3, [pc, #416]	; (77e0 <ip_input+0x24c>)
    763e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
    7642:	3301      	adds	r3, #1
    7644:	b29a      	uxth	r2, r3
    7646:	4b66      	ldr	r3, [pc, #408]	; (77e0 <ip_input+0x24c>)
    7648:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    IP_STATS_INC(ip.drop);
    764c:	4b64      	ldr	r3, [pc, #400]	; (77e0 <ip_input+0x24c>)
    764e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
    7652:	3301      	adds	r3, #1
    7654:	b29a      	uxth	r2, r3
    7656:	4b62      	ldr	r3, [pc, #392]	; (77e0 <ip_input+0x24c>)
    7658:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    snmp_inc_ipindiscards();
    return ERR_OK;
    765c:	2300      	movs	r3, #0
    765e:	e101      	b.n	7864 <ip_input+0x2d0>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  if (inet_chksum(iphdr, iphdr_hlen) != 0) {
    7660:	897b      	ldrh	r3, [r7, #10]
    7662:	4619      	mov	r1, r3
    7664:	6978      	ldr	r0, [r7, #20]
    7666:	f000 fb09 	bl	7c7c <inet_chksum>
    766a:	4603      	mov	r3, r0
    766c:	2b00      	cmp	r3, #0
    766e:	d014      	beq.n	769a <ip_input+0x106>

    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
    ip_debug_print(p);
    pbuf_free(p);
    7670:	6878      	ldr	r0, [r7, #4]
    7672:	f7ff fae7 	bl	6c44 <pbuf_free>
    IP_STATS_INC(ip.chkerr);
    7676:	4b5a      	ldr	r3, [pc, #360]	; (77e0 <ip_input+0x24c>)
    7678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
    767c:	3301      	adds	r3, #1
    767e:	b29a      	uxth	r2, r3
    7680:	4b57      	ldr	r3, [pc, #348]	; (77e0 <ip_input+0x24c>)
    7682:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    IP_STATS_INC(ip.drop);
    7686:	4b56      	ldr	r3, [pc, #344]	; (77e0 <ip_input+0x24c>)
    7688:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
    768c:	3301      	adds	r3, #1
    768e:	b29a      	uxth	r2, r3
    7690:	4b53      	ldr	r3, [pc, #332]	; (77e0 <ip_input+0x24c>)
    7692:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    snmp_inc_ipinhdrerrors();
    return ERR_OK;
    7696:	2300      	movs	r3, #0
    7698:	e0e4      	b.n	7864 <ip_input+0x2d0>
  }
#endif

  /* Trim pbuf. This should have been done at the netif layer,
   * but we'll do it anyway just to be sure that its done. */
  pbuf_realloc(p, iphdr_len);
    769a:	893b      	ldrh	r3, [r7, #8]
    769c:	4619      	mov	r1, r3
    769e:	6878      	ldr	r0, [r7, #4]
    76a0:	f7ff f9fe 	bl	6aa0 <pbuf_realloc>

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy(current_iphdr_dest, iphdr->dest);
    76a4:	697b      	ldr	r3, [r7, #20]
    76a6:	691b      	ldr	r3, [r3, #16]
    76a8:	4a4e      	ldr	r2, [pc, #312]	; (77e4 <ip_input+0x250>)
    76aa:	6013      	str	r3, [r2, #0]
  ip_addr_copy(current_iphdr_src, iphdr->src);
    76ac:	697b      	ldr	r3, [r7, #20]
    76ae:	68db      	ldr	r3, [r3, #12]
    76b0:	4a4d      	ldr	r2, [pc, #308]	; (77e8 <ip_input+0x254>)
    76b2:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IGMP */
  {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
    76b4:	2301      	movs	r3, #1
    76b6:	60fb      	str	r3, [r7, #12]
    netif = inp;
    76b8:	683b      	ldr	r3, [r7, #0]
    76ba:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(&netif->netmask),
          ip4_addr_get_u32(&netif->ip_addr) & ip4_addr_get_u32(&netif->netmask),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
    76bc:	693b      	ldr	r3, [r7, #16]
    76be:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    76c2:	f003 0301 	and.w	r3, r3, #1
    76c6:	2b00      	cmp	r3, #0
    76c8:	d016      	beq.n	76f8 <ip_input+0x164>
    76ca:	693b      	ldr	r3, [r7, #16]
    76cc:	3304      	adds	r3, #4
    76ce:	2b00      	cmp	r3, #0
    76d0:	d012      	beq.n	76f8 <ip_input+0x164>
    76d2:	693b      	ldr	r3, [r7, #16]
    76d4:	685b      	ldr	r3, [r3, #4]
    76d6:	2b00      	cmp	r3, #0
    76d8:	d00e      	beq.n	76f8 <ip_input+0x164>
        /* unicast to this interface address? */
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
    76da:	4b42      	ldr	r3, [pc, #264]	; (77e4 <ip_input+0x250>)
    76dc:	681a      	ldr	r2, [r3, #0]
    76de:	693b      	ldr	r3, [r7, #16]
    76e0:	685b      	ldr	r3, [r3, #4]
    76e2:	429a      	cmp	r2, r3
    76e4:	d01e      	beq.n	7724 <ip_input+0x190>
            /* or broadcast on this interface network address? */
            ip_addr_isbroadcast(&current_iphdr_dest, netif)) {
    76e6:	4b3f      	ldr	r3, [pc, #252]	; (77e4 <ip_input+0x250>)
    76e8:	681b      	ldr	r3, [r3, #0]
    76ea:	6939      	ldr	r1, [r7, #16]
    76ec:	4618      	mov	r0, r3
    76ee:	f000 fb21 	bl	7d34 <ip4_addr_isbroadcast>
    76f2:	4603      	mov	r3, r0
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
        /* unicast to this interface address? */
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
    76f4:	2b00      	cmp	r3, #0
    76f6:	d115      	bne.n	7724 <ip_input+0x190>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
    76f8:	68fb      	ldr	r3, [r7, #12]
    76fa:	2b00      	cmp	r3, #0
    76fc:	d005      	beq.n	770a <ip_input+0x176>
        first = 0;
    76fe:	2300      	movs	r3, #0
    7700:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
    7702:	4b3a      	ldr	r3, [pc, #232]	; (77ec <ip_input+0x258>)
    7704:	681b      	ldr	r3, [r3, #0]
    7706:	613b      	str	r3, [r7, #16]
    7708:	e002      	b.n	7710 <ip_input+0x17c>
      } else {
        netif = netif->next;
    770a:	693b      	ldr	r3, [r7, #16]
    770c:	681b      	ldr	r3, [r3, #0]
    770e:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
    7710:	693a      	ldr	r2, [r7, #16]
    7712:	683b      	ldr	r3, [r7, #0]
    7714:	429a      	cmp	r2, r3
    7716:	d102      	bne.n	771e <ip_input+0x18a>
        netif = netif->next;
    7718:	693b      	ldr	r3, [r7, #16]
    771a:	681b      	ldr	r3, [r3, #0]
    771c:	613b      	str	r3, [r7, #16]
      }
    } while(netif != NULL);
    771e:	693b      	ldr	r3, [r7, #16]
    7720:	2b00      	cmp	r3, #0
    7722:	d1cb      	bne.n	76bc <ip_input+0x128>
  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
  if (check_ip_src && !ip_addr_isany(&current_iphdr_src))
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
    7724:	4b30      	ldr	r3, [pc, #192]	; (77e8 <ip_input+0x254>)
    7726:	681b      	ldr	r3, [r3, #0]
    7728:	6839      	ldr	r1, [r7, #0]
    772a:	4618      	mov	r0, r3
    772c:	f000 fb02 	bl	7d34 <ip4_addr_isbroadcast>
    7730:	4603      	mov	r3, r0
    7732:	2b00      	cmp	r3, #0
    7734:	d105      	bne.n	7742 <ip_input+0x1ae>
         (ip_addr_ismulticast(&current_iphdr_src))) {
    7736:	4b2c      	ldr	r3, [pc, #176]	; (77e8 <ip_input+0x254>)
    7738:	681b      	ldr	r3, [r3, #0]
    773a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
  if (check_ip_src && !ip_addr_isany(&current_iphdr_src))
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
    773e:	2be0      	cmp	r3, #224	; 0xe0
    7740:	d10c      	bne.n	775c <ip_input+0x1c8>
         (ip_addr_ismulticast(&current_iphdr_src))) {
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
    7742:	6878      	ldr	r0, [r7, #4]
    7744:	f7ff fa7e 	bl	6c44 <pbuf_free>
      IP_STATS_INC(ip.drop);
    7748:	4b25      	ldr	r3, [pc, #148]	; (77e0 <ip_input+0x24c>)
    774a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
    774e:	3301      	adds	r3, #1
    7750:	b29a      	uxth	r2, r3
    7752:	4b23      	ldr	r3, [pc, #140]	; (77e0 <ip_input+0x24c>)
    7754:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      snmp_inc_ipinaddrerrors();
      snmp_inc_ipindiscards();
      return ERR_OK;
    7758:	2300      	movs	r3, #0
    775a:	e083      	b.n	7864 <ip_input+0x2d0>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
    775c:	693b      	ldr	r3, [r7, #16]
    775e:	2b00      	cmp	r3, #0
    7760:	d104      	bne.n	776c <ip_input+0x1d8>
#endif /* IP_FORWARD */
    {
      snmp_inc_ipinaddrerrors();
      snmp_inc_ipindiscards();
    }
    pbuf_free(p);
    7762:	6878      	ldr	r0, [r7, #4]
    7764:	f7ff fa6e 	bl	6c44 <pbuf_free>
    return ERR_OK;
    7768:	2300      	movs	r3, #0
    776a:	e07b      	b.n	7864 <ip_input+0x2d0>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
    776c:	697b      	ldr	r3, [r7, #20]
    776e:	88db      	ldrh	r3, [r3, #6]
    7770:	b29b      	uxth	r3, r3
    7772:	461a      	mov	r2, r3
    7774:	f64f 733f 	movw	r3, #65343	; 0xff3f
    7778:	4013      	ands	r3, r2
    777a:	2b00      	cmp	r3, #0
    777c:	d00b      	beq.n	7796 <ip_input+0x202>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip_reass()\n",
      ntohs(IPH_ID(iphdr)), p->tot_len, ntohs(IPH_LEN(iphdr)), !!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8));
    /* reassemble the packet*/
    p = ip_reass(p);
    777e:	6878      	ldr	r0, [r7, #4]
    7780:	f000 fd36 	bl	81f0 <ip_reass>
    7784:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
    7786:	687b      	ldr	r3, [r7, #4]
    7788:	2b00      	cmp	r3, #0
    778a:	d101      	bne.n	7790 <ip_input+0x1fc>
      return ERR_OK;
    778c:	2300      	movs	r3, #0
    778e:	e069      	b.n	7864 <ip_input+0x2d0>
    }
    iphdr = (struct ip_hdr *)p->payload;
    7790:	687b      	ldr	r3, [r7, #4]
    7792:	685b      	ldr	r3, [r3, #4]
    7794:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: \n"));
  ip_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  current_netif = inp;
    7796:	4a16      	ldr	r2, [pc, #88]	; (77f0 <ip_input+0x25c>)
    7798:	683b      	ldr	r3, [r7, #0]
    779a:	6013      	str	r3, [r2, #0]
  current_header = iphdr;
    779c:	4a15      	ldr	r2, [pc, #84]	; (77f4 <ip_input+0x260>)
    779e:	697b      	ldr	r3, [r7, #20]
    77a0:	6013      	str	r3, [r2, #0]

#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
    77a2:	6839      	ldr	r1, [r7, #0]
    77a4:	6878      	ldr	r0, [r7, #4]
    77a6:	f7ff fcdd 	bl	7164 <raw_input>
    77aa:	4603      	mov	r3, r0
    77ac:	2b00      	cmp	r3, #0
    77ae:	d14c      	bne.n	784a <ip_input+0x2b6>
#endif /* LWIP_RAW */
  {
    switch (IPH_PROTO(iphdr)) {
    77b0:	697b      	ldr	r3, [r7, #20]
    77b2:	7a5b      	ldrb	r3, [r3, #9]
    77b4:	2b06      	cmp	r3, #6
    77b6:	d009      	beq.n	77cc <ip_input+0x238>
    77b8:	2b11      	cmp	r3, #17
    77ba:	d002      	beq.n	77c2 <ip_input+0x22e>
    77bc:	2b01      	cmp	r3, #1
    77be:	d00a      	beq.n	77d6 <ip_input+0x242>
    77c0:	e01a      	b.n	77f8 <ip_input+0x264>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      snmp_inc_ipindelivers();
      udp_input(p, inp);
    77c2:	6839      	ldr	r1, [r7, #0]
    77c4:	6878      	ldr	r0, [r7, #4]
    77c6:	f7ff fd2b 	bl	7220 <udp_input>
      break;
    77ca:	e03e      	b.n	784a <ip_input+0x2b6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      snmp_inc_ipindelivers();
      tcp_input(p, inp);
    77cc:	6839      	ldr	r1, [r7, #0]
    77ce:	6878      	ldr	r0, [r7, #4]
    77d0:	f7fc fffe 	bl	47d0 <tcp_input>
      break;
    77d4:	e039      	b.n	784a <ip_input+0x2b6>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      snmp_inc_ipindelivers();
      icmp_input(p, inp);
    77d6:	6839      	ldr	r1, [r7, #0]
    77d8:	6878      	ldr	r0, [r7, #4]
    77da:	f000 ff89 	bl	86f0 <icmp_input>
      break;
    77de:	e034      	b.n	784a <ip_input+0x2b6>
    77e0:	10001978 	.word	0x10001978
    77e4:	10001aa0 	.word	0x10001aa0
    77e8:	10001a98 	.word	0x10001a98
    77ec:	10001958 	.word	0x10001958
    77f0:	10001a9c 	.word	0x10001a9c
    77f4:	10001aa4 	.word	0x10001aa4
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
    77f8:	4b1c      	ldr	r3, [pc, #112]	; (786c <ip_input+0x2d8>)
    77fa:	681b      	ldr	r3, [r3, #0]
    77fc:	6839      	ldr	r1, [r7, #0]
    77fe:	4618      	mov	r0, r3
    7800:	f000 fa98 	bl	7d34 <ip4_addr_isbroadcast>
    7804:	4603      	mov	r3, r0
    7806:	2b00      	cmp	r3, #0
    7808:	d10c      	bne.n	7824 <ip_input+0x290>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
    780a:	4b18      	ldr	r3, [pc, #96]	; (786c <ip_input+0x2d8>)
    780c:	681b      	ldr	r3, [r3, #0]
    780e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
    7812:	2be0      	cmp	r3, #224	; 0xe0
    7814:	d006      	beq.n	7824 <ip_input+0x290>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
        p->payload = iphdr;
    7816:	687b      	ldr	r3, [r7, #4]
    7818:	697a      	ldr	r2, [r7, #20]
    781a:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
    781c:	2102      	movs	r1, #2
    781e:	6878      	ldr	r0, [r7, #4]
    7820:	f001 f8b4 	bl	898c <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
    7824:	6878      	ldr	r0, [r7, #4]
    7826:	f7ff fa0d 	bl	6c44 <pbuf_free>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", IPH_PROTO(iphdr)));

      IP_STATS_INC(ip.proterr);
    782a:	4b11      	ldr	r3, [pc, #68]	; (7870 <ip_input+0x2dc>)
    782c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
    7830:	3301      	adds	r3, #1
    7832:	b29a      	uxth	r2, r3
    7834:	4b0e      	ldr	r3, [pc, #56]	; (7870 <ip_input+0x2dc>)
    7836:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
      IP_STATS_INC(ip.drop);
    783a:	4b0d      	ldr	r3, [pc, #52]	; (7870 <ip_input+0x2dc>)
    783c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
    7840:	3301      	adds	r3, #1
    7842:	b29a      	uxth	r2, r3
    7844:	4b0a      	ldr	r3, [pc, #40]	; (7870 <ip_input+0x2dc>)
    7846:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      snmp_inc_ipinunknownprotos();
    }
  }

  current_netif = NULL;
    784a:	4b0a      	ldr	r3, [pc, #40]	; (7874 <ip_input+0x2e0>)
    784c:	2200      	movs	r2, #0
    784e:	601a      	str	r2, [r3, #0]
  current_header = NULL;
    7850:	4b09      	ldr	r3, [pc, #36]	; (7878 <ip_input+0x2e4>)
    7852:	2200      	movs	r2, #0
    7854:	601a      	str	r2, [r3, #0]
  ip_addr_set_any(&current_iphdr_src);
    7856:	4b09      	ldr	r3, [pc, #36]	; (787c <ip_input+0x2e8>)
    7858:	2200      	movs	r2, #0
    785a:	601a      	str	r2, [r3, #0]
  ip_addr_set_any(&current_iphdr_dest);
    785c:	4b03      	ldr	r3, [pc, #12]	; (786c <ip_input+0x2d8>)
    785e:	2200      	movs	r2, #0
    7860:	601a      	str	r2, [r3, #0]

  return ERR_OK;
    7862:	2300      	movs	r3, #0
}
    7864:	4618      	mov	r0, r3
    7866:	3718      	adds	r7, #24
    7868:	46bd      	mov	sp, r7
    786a:	bd80      	pop	{r7, pc}
    786c:	10001aa0 	.word	0x10001aa0
    7870:	10001978 	.word	0x10001978
    7874:	10001a9c 	.word	0x10001a9c
    7878:	10001aa4 	.word	0x10001aa4
    787c:	10001a98 	.word	0x10001a98

00007880 <ip_output_if>:
 */
err_t
ip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
    7880:	b580      	push	{r7, lr}
    7882:	b088      	sub	sp, #32
    7884:	af00      	add	r7, sp, #0
    7886:	60f8      	str	r0, [r7, #12]
    7888:	60b9      	str	r1, [r7, #8]
    788a:	607a      	str	r2, [r7, #4]
    788c:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
    788e:	2300      	movs	r3, #0
    7890:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  snmp_inc_ipoutrequests();

  /* Should the IP header be generated or is it already included in p? */
  if (dest != IP_HDRINCL) {
    7892:	687b      	ldr	r3, [r7, #4]
    7894:	2b00      	cmp	r3, #0
    7896:	f000 80ad 	beq.w	79f4 <ip_output_if+0x174>
    u16_t ip_hlen = IP_HLEN;
    789a:	2314      	movs	r3, #20
    789c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
    789e:	2114      	movs	r1, #20
    78a0:	68f8      	ldr	r0, [r7, #12]
    78a2:	f7ff f961 	bl	6b68 <pbuf_header>
    78a6:	4603      	mov	r3, r0
    78a8:	2b00      	cmp	r3, #0
    78aa:	d00a      	beq.n	78c2 <ip_output_if+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
    78ac:	4b68      	ldr	r3, [pc, #416]	; (7a50 <ip_output_if+0x1d0>)
    78ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
    78b2:	3301      	adds	r3, #1
    78b4:	b29a      	uxth	r2, r3
    78b6:	4b66      	ldr	r3, [pc, #408]	; (7a50 <ip_output_if+0x1d0>)
    78b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      snmp_inc_ipoutdiscards();
      return ERR_BUF;
    78bc:	f06f 0301 	mvn.w	r3, #1
    78c0:	e0c1      	b.n	7a46 <ip_output_if+0x1c6>
    }

    iphdr = (struct ip_hdr *)p->payload;
    78c2:	68fb      	ldr	r3, [r7, #12]
    78c4:	685b      	ldr	r3, [r3, #4]
    78c6:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
    78c8:	697b      	ldr	r3, [r7, #20]
    78ca:	78fa      	ldrb	r2, [r7, #3]
    78cc:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
    78ce:	697b      	ldr	r3, [r7, #20]
    78d0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
    78d4:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(proto, ttl);
    78d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    78da:	021a      	lsls	r2, r3, #8
    78dc:	78fb      	ldrb	r3, [r7, #3]
    78de:	4313      	orrs	r3, r2
    78e0:	461a      	mov	r2, r3
    78e2:	69fb      	ldr	r3, [r7, #28]
    78e4:	4413      	add	r3, r2
    78e6:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip_addr_copy(iphdr->dest, *dest);
    78e8:	687b      	ldr	r3, [r7, #4]
    78ea:	681a      	ldr	r2, [r3, #0]
    78ec:	697b      	ldr	r3, [r7, #20]
    78ee:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    78f0:	697b      	ldr	r3, [r7, #20]
    78f2:	691b      	ldr	r3, [r3, #16]
    78f4:	b29b      	uxth	r3, r3
    78f6:	69fa      	ldr	r2, [r7, #28]
    78f8:	4413      	add	r3, r2
    78fa:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
    78fc:	697b      	ldr	r3, [r7, #20]
    78fe:	691b      	ldr	r3, [r3, #16]
    7900:	0c1b      	lsrs	r3, r3, #16
    7902:	69fa      	ldr	r2, [r7, #28]
    7904:	4413      	add	r3, r2
    7906:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHLTOS_SET(iphdr, 4, ip_hlen / 4, tos);
    7908:	8b7b      	ldrh	r3, [r7, #26]
    790a:	089b      	lsrs	r3, r3, #2
    790c:	b29b      	uxth	r3, r3
    790e:	021b      	lsls	r3, r3, #8
    7910:	b21b      	sxth	r3, r3
    7912:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    7916:	b21a      	sxth	r2, r3
    7918:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    791c:	b21b      	sxth	r3, r3
    791e:	4313      	orrs	r3, r2
    7920:	b21b      	sxth	r3, r3
    7922:	b29b      	uxth	r3, r3
    7924:	4618      	mov	r0, r3
    7926:	f7ff fbd7 	bl	70d8 <lwip_htons>
    792a:	4603      	mov	r3, r0
    792c:	461a      	mov	r2, r3
    792e:	697b      	ldr	r3, [r7, #20]
    7930:	801a      	strh	r2, [r3, #0]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_v_hl_tos;
    7932:	697b      	ldr	r3, [r7, #20]
    7934:	881b      	ldrh	r3, [r3, #0]
    7936:	b29b      	uxth	r3, r3
    7938:	461a      	mov	r2, r3
    793a:	69fb      	ldr	r3, [r7, #28]
    793c:	4413      	add	r3, r2
    793e:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, htons(p->tot_len));
    7940:	68fb      	ldr	r3, [r7, #12]
    7942:	891b      	ldrh	r3, [r3, #8]
    7944:	4618      	mov	r0, r3
    7946:	f7ff fbc7 	bl	70d8 <lwip_htons>
    794a:	4603      	mov	r3, r0
    794c:	461a      	mov	r2, r3
    794e:	697b      	ldr	r3, [r7, #20]
    7950:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
    7952:	697b      	ldr	r3, [r7, #20]
    7954:	885b      	ldrh	r3, [r3, #2]
    7956:	b29b      	uxth	r3, r3
    7958:	461a      	mov	r2, r3
    795a:	69fb      	ldr	r3, [r7, #28]
    795c:	4413      	add	r3, r2
    795e:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    7960:	697b      	ldr	r3, [r7, #20]
    7962:	2200      	movs	r2, #0
    7964:	719a      	strb	r2, [r3, #6]
    7966:	2200      	movs	r2, #0
    7968:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, htons(ip_id));
    796a:	4b3a      	ldr	r3, [pc, #232]	; (7a54 <ip_output_if+0x1d4>)
    796c:	881b      	ldrh	r3, [r3, #0]
    796e:	4618      	mov	r0, r3
    7970:	f7ff fbb2 	bl	70d8 <lwip_htons>
    7974:	4603      	mov	r3, r0
    7976:	461a      	mov	r2, r3
    7978:	697b      	ldr	r3, [r7, #20]
    797a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
    797c:	697b      	ldr	r3, [r7, #20]
    797e:	889b      	ldrh	r3, [r3, #4]
    7980:	b29b      	uxth	r3, r3
    7982:	461a      	mov	r2, r3
    7984:	69fb      	ldr	r3, [r7, #28]
    7986:	4413      	add	r3, r2
    7988:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
    798a:	4b32      	ldr	r3, [pc, #200]	; (7a54 <ip_output_if+0x1d4>)
    798c:	881b      	ldrh	r3, [r3, #0]
    798e:	3301      	adds	r3, #1
    7990:	b29a      	uxth	r2, r3
    7992:	4b30      	ldr	r3, [pc, #192]	; (7a54 <ip_output_if+0x1d4>)
    7994:	801a      	strh	r2, [r3, #0]

    if (ip_addr_isany(src)) {
    7996:	68bb      	ldr	r3, [r7, #8]
    7998:	2b00      	cmp	r3, #0
    799a:	d003      	beq.n	79a4 <ip_output_if+0x124>
    799c:	68bb      	ldr	r3, [r7, #8]
    799e:	681b      	ldr	r3, [r3, #0]
    79a0:	2b00      	cmp	r3, #0
    79a2:	d104      	bne.n	79ae <ip_output_if+0x12e>
      ip_addr_copy(iphdr->src, netif->ip_addr);
    79a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    79a6:	685a      	ldr	r2, [r3, #4]
    79a8:	697b      	ldr	r3, [r7, #20]
    79aa:	60da      	str	r2, [r3, #12]
    79ac:	e003      	b.n	79b6 <ip_output_if+0x136>
    } else {
      /* src cannot be NULL here */
      ip_addr_copy(iphdr->src, *src);
    79ae:	68bb      	ldr	r3, [r7, #8]
    79b0:	681a      	ldr	r2, [r3, #0]
    79b2:	697b      	ldr	r3, [r7, #20]
    79b4:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
    79b6:	697b      	ldr	r3, [r7, #20]
    79b8:	68db      	ldr	r3, [r3, #12]
    79ba:	b29b      	uxth	r3, r3
    79bc:	69fa      	ldr	r2, [r7, #28]
    79be:	4413      	add	r3, r2
    79c0:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
    79c2:	697b      	ldr	r3, [r7, #20]
    79c4:	68db      	ldr	r3, [r3, #12]
    79c6:	0c1b      	lsrs	r3, r3, #16
    79c8:	69fa      	ldr	r2, [r7, #28]
    79ca:	4413      	add	r3, r2
    79cc:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
    79ce:	69fb      	ldr	r3, [r7, #28]
    79d0:	0c1a      	lsrs	r2, r3, #16
    79d2:	69fb      	ldr	r3, [r7, #28]
    79d4:	b29b      	uxth	r3, r3
    79d6:	4413      	add	r3, r2
    79d8:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
    79da:	69fb      	ldr	r3, [r7, #28]
    79dc:	0c1b      	lsrs	r3, r3, #16
    79de:	69fa      	ldr	r2, [r7, #28]
    79e0:	4413      	add	r3, r2
    79e2:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
    79e4:	69fb      	ldr	r3, [r7, #28]
    79e6:	43db      	mvns	r3, r3
    79e8:	61fb      	str	r3, [r7, #28]
    iphdr->_chksum = chk_sum; /* network order */
    79ea:	69fb      	ldr	r3, [r7, #28]
    79ec:	b29a      	uxth	r2, r3
    79ee:	697b      	ldr	r3, [r7, #20]
    79f0:	815a      	strh	r2, [r3, #10]
    79f2:	e008      	b.n	7a06 <ip_output_if+0x186>
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, ip_hlen));
#endif
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
    79f4:	68fb      	ldr	r3, [r7, #12]
    79f6:	685b      	ldr	r3, [r3, #4]
    79f8:	617b      	str	r3, [r7, #20]
    ip_addr_copy(dest_addr, iphdr->dest);
    79fa:	697b      	ldr	r3, [r7, #20]
    79fc:	691b      	ldr	r3, [r3, #16]
    79fe:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
    7a00:	f107 0310 	add.w	r3, r7, #16
    7a04:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
    7a06:	4b12      	ldr	r3, [pc, #72]	; (7a50 <ip_output_if+0x1d0>)
    7a08:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
    7a0c:	3301      	adds	r3, #1
    7a0e:	b29a      	uxth	r2, r3
    7a10:	4b0f      	ldr	r3, [pc, #60]	; (7a50 <ip_output_if+0x1d0>)
    7a12:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  }
#endif /* LWIP_IGMP */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
    7a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7a18:	8c1b      	ldrh	r3, [r3, #32]
    7a1a:	2b00      	cmp	r3, #0
    7a1c:	d00c      	beq.n	7a38 <ip_output_if+0x1b8>
    7a1e:	68fb      	ldr	r3, [r7, #12]
    7a20:	891a      	ldrh	r2, [r3, #8]
    7a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7a24:	8c1b      	ldrh	r3, [r3, #32]
    7a26:	429a      	cmp	r2, r3
    7a28:	d906      	bls.n	7a38 <ip_output_if+0x1b8>
    return ip_frag(p, netif, dest);
    7a2a:	687a      	ldr	r2, [r7, #4]
    7a2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
    7a2e:	68f8      	ldr	r0, [r7, #12]
    7a30:	f000 fd58 	bl	84e4 <ip_frag>
    7a34:	4603      	mov	r3, r0
    7a36:	e006      	b.n	7a46 <ip_output_if+0x1c6>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("netif->output()"));
  return netif->output(netif, p, dest);
    7a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7a3a:	695b      	ldr	r3, [r3, #20]
    7a3c:	687a      	ldr	r2, [r7, #4]
    7a3e:	68f9      	ldr	r1, [r7, #12]
    7a40:	6b38      	ldr	r0, [r7, #48]	; 0x30
    7a42:	4798      	blx	r3
    7a44:	4603      	mov	r3, r0
}
    7a46:	4618      	mov	r0, r3
    7a48:	3720      	adds	r7, #32
    7a4a:	46bd      	mov	sp, r7
    7a4c:	bd80      	pop	{r7, pc}
    7a4e:	bf00      	nop
    7a50:	10001978 	.word	0x10001978
    7a54:	10001228 	.word	0x10001228

00007a58 <ip_output>:
 *         see ip_output_if() for more return values
 */
err_t
ip_output(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
          u8_t ttl, u8_t tos, u8_t proto)
{
    7a58:	b580      	push	{r7, lr}
    7a5a:	b08a      	sub	sp, #40	; 0x28
    7a5c:	af04      	add	r7, sp, #16
    7a5e:	60f8      	str	r0, [r7, #12]
    7a60:	60b9      	str	r1, [r7, #8]
    7a62:	607a      	str	r2, [r7, #4]
    7a64:	70fb      	strb	r3, [r7, #3]

  /* pbufs passed to IP must have a ref-count of 1 as their payload pointer
     gets altered as the packet is passed down the stack */
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  if ((netif = ip_route(dest)) == NULL) {
    7a66:	6878      	ldr	r0, [r7, #4]
    7a68:	f7ff fd50 	bl	750c <ip_route>
    7a6c:	6178      	str	r0, [r7, #20]
    7a6e:	697b      	ldr	r3, [r7, #20]
    7a70:	2b00      	cmp	r3, #0
    7a72:	d10a      	bne.n	7a8a <ip_output+0x32>
    LWIP_DEBUGF(IP_DEBUG, ("ip_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    7a74:	4b0f      	ldr	r3, [pc, #60]	; (7ab4 <ip_output+0x5c>)
    7a76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
    7a7a:	3301      	adds	r3, #1
    7a7c:	b29a      	uxth	r2, r3
    7a7e:	4b0d      	ldr	r3, [pc, #52]	; (7ab4 <ip_output+0x5c>)
    7a80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    return ERR_RTE;
    7a84:	f06f 0303 	mvn.w	r3, #3
    7a88:	e00f      	b.n	7aaa <ip_output+0x52>
  }

  return ip_output_if(p, src, dest, ttl, tos, proto, netif);
    7a8a:	78fa      	ldrb	r2, [r7, #3]
    7a8c:	697b      	ldr	r3, [r7, #20]
    7a8e:	9302      	str	r3, [sp, #8]
    7a90:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
    7a94:	9301      	str	r3, [sp, #4]
    7a96:	f897 3020 	ldrb.w	r3, [r7, #32]
    7a9a:	9300      	str	r3, [sp, #0]
    7a9c:	4613      	mov	r3, r2
    7a9e:	687a      	ldr	r2, [r7, #4]
    7aa0:	68b9      	ldr	r1, [r7, #8]
    7aa2:	68f8      	ldr	r0, [r7, #12]
    7aa4:	f7ff feec 	bl	7880 <ip_output_if>
    7aa8:	4603      	mov	r3, r0
}
    7aaa:	4618      	mov	r0, r3
    7aac:	3718      	adds	r7, #24
    7aae:	46bd      	mov	sp, r7
    7ab0:	bd80      	pop	{r7, pc}
    7ab2:	bf00      	nop
    7ab4:	10001978 	.word	0x10001978

00007ab8 <lwip_standard_chksum>:
 * @return host order (!) lwip checksum (non-inverted Internet sum) 
 */

static u16_t
lwip_standard_chksum(void *dataptr, int len)
{
    7ab8:	b480      	push	{r7}
    7aba:	b089      	sub	sp, #36	; 0x24
    7abc:	af00      	add	r7, sp, #0
    7abe:	6078      	str	r0, [r7, #4]
    7ac0:	6039      	str	r1, [r7, #0]
  u8_t *pb = (u8_t *)dataptr;
    7ac2:	687b      	ldr	r3, [r7, #4]
    7ac4:	61fb      	str	r3, [r7, #28]
  u16_t *ps, t = 0;
    7ac6:	2300      	movs	r3, #0
    7ac8:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
    7aca:	2300      	movs	r3, #0
    7acc:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
    7ace:	69fb      	ldr	r3, [r7, #28]
    7ad0:	f003 0301 	and.w	r3, r3, #1
    7ad4:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
    7ad6:	693b      	ldr	r3, [r7, #16]
    7ad8:	2b00      	cmp	r3, #0
    7ada:	d00d      	beq.n	7af8 <lwip_standard_chksum+0x40>
    7adc:	683b      	ldr	r3, [r7, #0]
    7ade:	2b00      	cmp	r3, #0
    7ae0:	dd0a      	ble.n	7af8 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
    7ae2:	f107 030e 	add.w	r3, r7, #14
    7ae6:	3301      	adds	r3, #1
    7ae8:	69fa      	ldr	r2, [r7, #28]
    7aea:	1c51      	adds	r1, r2, #1
    7aec:	61f9      	str	r1, [r7, #28]
    7aee:	7812      	ldrb	r2, [r2, #0]
    7af0:	701a      	strb	r2, [r3, #0]
    len--;
    7af2:	683b      	ldr	r3, [r7, #0]
    7af4:	3b01      	subs	r3, #1
    7af6:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (u16_t *)(void *)pb;
    7af8:	69fb      	ldr	r3, [r7, #28]
    7afa:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
    7afc:	e00a      	b.n	7b14 <lwip_standard_chksum+0x5c>
    sum += *ps++;
    7afe:	69bb      	ldr	r3, [r7, #24]
    7b00:	1c9a      	adds	r2, r3, #2
    7b02:	61ba      	str	r2, [r7, #24]
    7b04:	881b      	ldrh	r3, [r3, #0]
    7b06:	461a      	mov	r2, r3
    7b08:	697b      	ldr	r3, [r7, #20]
    7b0a:	4413      	add	r3, r2
    7b0c:	617b      	str	r3, [r7, #20]
    len -= 2;
    7b0e:	683b      	ldr	r3, [r7, #0]
    7b10:	3b02      	subs	r3, #2
    7b12:	603b      	str	r3, [r7, #0]
    len--;
  }

  /* Add the bulk of the data */
  ps = (u16_t *)(void *)pb;
  while (len > 1) {
    7b14:	683b      	ldr	r3, [r7, #0]
    7b16:	2b01      	cmp	r3, #1
    7b18:	dcf1      	bgt.n	7afe <lwip_standard_chksum+0x46>
    sum += *ps++;
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
    7b1a:	683b      	ldr	r3, [r7, #0]
    7b1c:	2b00      	cmp	r3, #0
    7b1e:	dd04      	ble.n	7b2a <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(u8_t *)ps;
    7b20:	f107 030e 	add.w	r3, r7, #14
    7b24:	69ba      	ldr	r2, [r7, #24]
    7b26:	7812      	ldrb	r2, [r2, #0]
    7b28:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
    7b2a:	89fb      	ldrh	r3, [r7, #14]
    7b2c:	461a      	mov	r2, r3
    7b2e:	697b      	ldr	r3, [r7, #20]
    7b30:	4413      	add	r3, r2
    7b32:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  sum = FOLD_U32T(sum);
    7b34:	697b      	ldr	r3, [r7, #20]
    7b36:	0c1a      	lsrs	r2, r3, #16
    7b38:	697b      	ldr	r3, [r7, #20]
    7b3a:	b29b      	uxth	r3, r3
    7b3c:	4413      	add	r3, r2
    7b3e:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
    7b40:	697b      	ldr	r3, [r7, #20]
    7b42:	0c1a      	lsrs	r2, r3, #16
    7b44:	697b      	ldr	r3, [r7, #20]
    7b46:	b29b      	uxth	r3, r3
    7b48:	4413      	add	r3, r2
    7b4a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
    7b4c:	693b      	ldr	r3, [r7, #16]
    7b4e:	2b00      	cmp	r3, #0
    7b50:	d007      	beq.n	7b62 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
    7b52:	697b      	ldr	r3, [r7, #20]
    7b54:	021b      	lsls	r3, r3, #8
    7b56:	b29a      	uxth	r2, r3
    7b58:	697b      	ldr	r3, [r7, #20]
    7b5a:	0a1b      	lsrs	r3, r3, #8
    7b5c:	b2db      	uxtb	r3, r3
    7b5e:	4313      	orrs	r3, r2
    7b60:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
    7b62:	697b      	ldr	r3, [r7, #20]
    7b64:	b29b      	uxth	r3, r3
}
    7b66:	4618      	mov	r0, r3
    7b68:	3724      	adds	r7, #36	; 0x24
    7b6a:	46bd      	mov	sp, r7
    7b6c:	bc80      	pop	{r7}
    7b6e:	4770      	bx	lr

00007b70 <inet_chksum_pseudo>:
 */
u16_t
inet_chksum_pseudo(struct pbuf *p,
       ip_addr_t *src, ip_addr_t *dest,
       u8_t proto, u16_t proto_len)
{
    7b70:	b580      	push	{r7, lr}
    7b72:	b088      	sub	sp, #32
    7b74:	af00      	add	r7, sp, #0
    7b76:	60f8      	str	r0, [r7, #12]
    7b78:	60b9      	str	r1, [r7, #8]
    7b7a:	607a      	str	r2, [r7, #4]
    7b7c:	70fb      	strb	r3, [r7, #3]
  u32_t acc;
  u32_t addr;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
    7b7e:	2300      	movs	r3, #0
    7b80:	61fb      	str	r3, [r7, #28]
  swapped = 0;
    7b82:	2300      	movs	r3, #0
    7b84:	75fb      	strb	r3, [r7, #23]
  /* iterate through all pbuf in chain */
  for(q = p; q != NULL; q = q->next) {
    7b86:	68fb      	ldr	r3, [r7, #12]
    7b88:	61bb      	str	r3, [r7, #24]
    7b8a:	e028      	b.n	7bde <inet_chksum_pseudo+0x6e>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
    7b8c:	69bb      	ldr	r3, [r7, #24]
    7b8e:	685a      	ldr	r2, [r3, #4]
    7b90:	69bb      	ldr	r3, [r7, #24]
    7b92:	895b      	ldrh	r3, [r3, #10]
    7b94:	4619      	mov	r1, r3
    7b96:	4610      	mov	r0, r2
    7b98:	f7ff ff8e 	bl	7ab8 <lwip_standard_chksum>
    7b9c:	4603      	mov	r3, r0
    7b9e:	461a      	mov	r2, r3
    7ba0:	69fb      	ldr	r3, [r7, #28]
    7ba2:	4413      	add	r3, r2
    7ba4:	61fb      	str	r3, [r7, #28]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
    7ba6:	69fb      	ldr	r3, [r7, #28]
    7ba8:	0c1a      	lsrs	r2, r3, #16
    7baa:	69fb      	ldr	r3, [r7, #28]
    7bac:	b29b      	uxth	r3, r3
    7bae:	4413      	add	r3, r2
    7bb0:	61fb      	str	r3, [r7, #28]
    if (q->len % 2 != 0) {
    7bb2:	69bb      	ldr	r3, [r7, #24]
    7bb4:	895b      	ldrh	r3, [r3, #10]
    7bb6:	f003 0301 	and.w	r3, r3, #1
    7bba:	b29b      	uxth	r3, r3
    7bbc:	2b00      	cmp	r3, #0
    7bbe:	d00b      	beq.n	7bd8 <inet_chksum_pseudo+0x68>
      swapped = 1 - swapped;
    7bc0:	7dfb      	ldrb	r3, [r7, #23]
    7bc2:	f1c3 0301 	rsb	r3, r3, #1
    7bc6:	75fb      	strb	r3, [r7, #23]
      acc = SWAP_BYTES_IN_WORD(acc);
    7bc8:	69fb      	ldr	r3, [r7, #28]
    7bca:	021b      	lsls	r3, r3, #8
    7bcc:	b29a      	uxth	r2, r3
    7bce:	69fb      	ldr	r3, [r7, #28]
    7bd0:	0a1b      	lsrs	r3, r3, #8
    7bd2:	b2db      	uxtb	r3, r3
    7bd4:	4313      	orrs	r3, r2
    7bd6:	61fb      	str	r3, [r7, #28]
  u8_t swapped;

  acc = 0;
  swapped = 0;
  /* iterate through all pbuf in chain */
  for(q = p; q != NULL; q = q->next) {
    7bd8:	69bb      	ldr	r3, [r7, #24]
    7bda:	681b      	ldr	r3, [r3, #0]
    7bdc:	61bb      	str	r3, [r7, #24]
    7bde:	69bb      	ldr	r3, [r7, #24]
    7be0:	2b00      	cmp	r3, #0
    7be2:	d1d3      	bne.n	7b8c <inet_chksum_pseudo+0x1c>
      acc = SWAP_BYTES_IN_WORD(acc);
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
    7be4:	7dfb      	ldrb	r3, [r7, #23]
    7be6:	2b00      	cmp	r3, #0
    7be8:	d007      	beq.n	7bfa <inet_chksum_pseudo+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
    7bea:	69fb      	ldr	r3, [r7, #28]
    7bec:	021b      	lsls	r3, r3, #8
    7bee:	b29a      	uxth	r2, r3
    7bf0:	69fb      	ldr	r3, [r7, #28]
    7bf2:	0a1b      	lsrs	r3, r3, #8
    7bf4:	b2db      	uxtb	r3, r3
    7bf6:	4313      	orrs	r3, r2
    7bf8:	61fb      	str	r3, [r7, #28]
  }
  addr = ip4_addr_get_u32(src);
    7bfa:	68bb      	ldr	r3, [r7, #8]
    7bfc:	681b      	ldr	r3, [r3, #0]
    7bfe:	613b      	str	r3, [r7, #16]
  acc += (addr & 0xffffUL);
    7c00:	693b      	ldr	r3, [r7, #16]
    7c02:	b29b      	uxth	r3, r3
    7c04:	69fa      	ldr	r2, [r7, #28]
    7c06:	4413      	add	r3, r2
    7c08:	61fb      	str	r3, [r7, #28]
  acc += ((addr >> 16) & 0xffffUL);
    7c0a:	693b      	ldr	r3, [r7, #16]
    7c0c:	0c1b      	lsrs	r3, r3, #16
    7c0e:	69fa      	ldr	r2, [r7, #28]
    7c10:	4413      	add	r3, r2
    7c12:	61fb      	str	r3, [r7, #28]
  addr = ip4_addr_get_u32(dest);
    7c14:	687b      	ldr	r3, [r7, #4]
    7c16:	681b      	ldr	r3, [r3, #0]
    7c18:	613b      	str	r3, [r7, #16]
  acc += (addr & 0xffffUL);
    7c1a:	693b      	ldr	r3, [r7, #16]
    7c1c:	b29b      	uxth	r3, r3
    7c1e:	69fa      	ldr	r2, [r7, #28]
    7c20:	4413      	add	r3, r2
    7c22:	61fb      	str	r3, [r7, #28]
  acc += ((addr >> 16) & 0xffffUL);
    7c24:	693b      	ldr	r3, [r7, #16]
    7c26:	0c1b      	lsrs	r3, r3, #16
    7c28:	69fa      	ldr	r2, [r7, #28]
    7c2a:	4413      	add	r3, r2
    7c2c:	61fb      	str	r3, [r7, #28]
  acc += (u32_t)htons((u16_t)proto);
    7c2e:	78fb      	ldrb	r3, [r7, #3]
    7c30:	b29b      	uxth	r3, r3
    7c32:	4618      	mov	r0, r3
    7c34:	f7ff fa50 	bl	70d8 <lwip_htons>
    7c38:	4603      	mov	r3, r0
    7c3a:	461a      	mov	r2, r3
    7c3c:	69fb      	ldr	r3, [r7, #28]
    7c3e:	4413      	add	r3, r2
    7c40:	61fb      	str	r3, [r7, #28]
  acc += (u32_t)htons(proto_len);
    7c42:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    7c44:	4618      	mov	r0, r3
    7c46:	f7ff fa47 	bl	70d8 <lwip_htons>
    7c4a:	4603      	mov	r3, r0
    7c4c:	461a      	mov	r2, r3
    7c4e:	69fb      	ldr	r3, [r7, #28]
    7c50:	4413      	add	r3, r2
    7c52:	61fb      	str	r3, [r7, #28]

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  acc = FOLD_U32T(acc);
    7c54:	69fb      	ldr	r3, [r7, #28]
    7c56:	0c1a      	lsrs	r2, r3, #16
    7c58:	69fb      	ldr	r3, [r7, #28]
    7c5a:	b29b      	uxth	r3, r3
    7c5c:	4413      	add	r3, r2
    7c5e:	61fb      	str	r3, [r7, #28]
  acc = FOLD_U32T(acc);
    7c60:	69fb      	ldr	r3, [r7, #28]
    7c62:	0c1a      	lsrs	r2, r3, #16
    7c64:	69fb      	ldr	r3, [r7, #28]
    7c66:	b29b      	uxth	r3, r3
    7c68:	4413      	add	r3, r2
    7c6a:	61fb      	str	r3, [r7, #28]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
    7c6c:	69fb      	ldr	r3, [r7, #28]
    7c6e:	b29b      	uxth	r3, r3
    7c70:	43db      	mvns	r3, r3
    7c72:	b29b      	uxth	r3, r3
}
    7c74:	4618      	mov	r0, r3
    7c76:	3720      	adds	r7, #32
    7c78:	46bd      	mov	sp, r7
    7c7a:	bd80      	pop	{r7, pc}

00007c7c <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(void *dataptr, u16_t len)
{
    7c7c:	b580      	push	{r7, lr}
    7c7e:	b082      	sub	sp, #8
    7c80:	af00      	add	r7, sp, #0
    7c82:	6078      	str	r0, [r7, #4]
    7c84:	460b      	mov	r3, r1
    7c86:	807b      	strh	r3, [r7, #2]
  return ~LWIP_CHKSUM(dataptr, len);
    7c88:	887b      	ldrh	r3, [r7, #2]
    7c8a:	4619      	mov	r1, r3
    7c8c:	6878      	ldr	r0, [r7, #4]
    7c8e:	f7ff ff13 	bl	7ab8 <lwip_standard_chksum>
    7c92:	4603      	mov	r3, r0
    7c94:	43db      	mvns	r3, r3
    7c96:	b29b      	uxth	r3, r3
}
    7c98:	4618      	mov	r0, r3
    7c9a:	3708      	adds	r7, #8
    7c9c:	46bd      	mov	sp, r7
    7c9e:	bd80      	pop	{r7, pc}

00007ca0 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
    7ca0:	b580      	push	{r7, lr}
    7ca2:	b086      	sub	sp, #24
    7ca4:	af00      	add	r7, sp, #0
    7ca6:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
    7ca8:	2300      	movs	r3, #0
    7caa:	617b      	str	r3, [r7, #20]
  swapped = 0;
    7cac:	2300      	movs	r3, #0
    7cae:	73fb      	strb	r3, [r7, #15]
  for(q = p; q != NULL; q = q->next) {
    7cb0:	687b      	ldr	r3, [r7, #4]
    7cb2:	613b      	str	r3, [r7, #16]
    7cb4:	e028      	b.n	7d08 <inet_chksum_pbuf+0x68>
    acc += LWIP_CHKSUM(q->payload, q->len);
    7cb6:	693b      	ldr	r3, [r7, #16]
    7cb8:	685a      	ldr	r2, [r3, #4]
    7cba:	693b      	ldr	r3, [r7, #16]
    7cbc:	895b      	ldrh	r3, [r3, #10]
    7cbe:	4619      	mov	r1, r3
    7cc0:	4610      	mov	r0, r2
    7cc2:	f7ff fef9 	bl	7ab8 <lwip_standard_chksum>
    7cc6:	4603      	mov	r3, r0
    7cc8:	461a      	mov	r2, r3
    7cca:	697b      	ldr	r3, [r7, #20]
    7ccc:	4413      	add	r3, r2
    7cce:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
    7cd0:	697b      	ldr	r3, [r7, #20]
    7cd2:	0c1a      	lsrs	r2, r3, #16
    7cd4:	697b      	ldr	r3, [r7, #20]
    7cd6:	b29b      	uxth	r3, r3
    7cd8:	4413      	add	r3, r2
    7cda:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
    7cdc:	693b      	ldr	r3, [r7, #16]
    7cde:	895b      	ldrh	r3, [r3, #10]
    7ce0:	f003 0301 	and.w	r3, r3, #1
    7ce4:	b29b      	uxth	r3, r3
    7ce6:	2b00      	cmp	r3, #0
    7ce8:	d00b      	beq.n	7d02 <inet_chksum_pbuf+0x62>
      swapped = 1 - swapped;
    7cea:	7bfb      	ldrb	r3, [r7, #15]
    7cec:	f1c3 0301 	rsb	r3, r3, #1
    7cf0:	73fb      	strb	r3, [r7, #15]
      acc = SWAP_BYTES_IN_WORD(acc);
    7cf2:	697b      	ldr	r3, [r7, #20]
    7cf4:	021b      	lsls	r3, r3, #8
    7cf6:	b29a      	uxth	r2, r3
    7cf8:	697b      	ldr	r3, [r7, #20]
    7cfa:	0a1b      	lsrs	r3, r3, #8
    7cfc:	b2db      	uxtb	r3, r3
    7cfe:	4313      	orrs	r3, r2
    7d00:	617b      	str	r3, [r7, #20]
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  swapped = 0;
  for(q = p; q != NULL; q = q->next) {
    7d02:	693b      	ldr	r3, [r7, #16]
    7d04:	681b      	ldr	r3, [r3, #0]
    7d06:	613b      	str	r3, [r7, #16]
    7d08:	693b      	ldr	r3, [r7, #16]
    7d0a:	2b00      	cmp	r3, #0
    7d0c:	d1d3      	bne.n	7cb6 <inet_chksum_pbuf+0x16>
      swapped = 1 - swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
    }
  }

  if (swapped) {
    7d0e:	7bfb      	ldrb	r3, [r7, #15]
    7d10:	2b00      	cmp	r3, #0
    7d12:	d007      	beq.n	7d24 <inet_chksum_pbuf+0x84>
    acc = SWAP_BYTES_IN_WORD(acc);
    7d14:	697b      	ldr	r3, [r7, #20]
    7d16:	021b      	lsls	r3, r3, #8
    7d18:	b29a      	uxth	r2, r3
    7d1a:	697b      	ldr	r3, [r7, #20]
    7d1c:	0a1b      	lsrs	r3, r3, #8
    7d1e:	b2db      	uxtb	r3, r3
    7d20:	4313      	orrs	r3, r2
    7d22:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
    7d24:	697b      	ldr	r3, [r7, #20]
    7d26:	b29b      	uxth	r3, r3
    7d28:	43db      	mvns	r3, r3
    7d2a:	b29b      	uxth	r3, r3
}
    7d2c:	4618      	mov	r0, r3
    7d2e:	3718      	adds	r7, #24
    7d30:	46bd      	mov	sp, r7
    7d32:	bd80      	pop	{r7, pc}

00007d34 <ip4_addr_isbroadcast>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast(u32_t addr, const struct netif *netif)
{
    7d34:	b480      	push	{r7}
    7d36:	b085      	sub	sp, #20
    7d38:	af00      	add	r7, sp, #0
    7d3a:	6078      	str	r0, [r7, #4]
    7d3c:	6039      	str	r1, [r7, #0]
  ip_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
    7d3e:	687b      	ldr	r3, [r7, #4]
    7d40:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
    7d42:	687b      	ldr	r3, [r7, #4]
    7d44:	f1b3 3fff 	cmp.w	r3, #4294967295
    7d48:	d002      	beq.n	7d50 <ip4_addr_isbroadcast+0x1c>
    7d4a:	687b      	ldr	r3, [r7, #4]
    7d4c:	2b00      	cmp	r3, #0
    7d4e:	d101      	bne.n	7d54 <ip4_addr_isbroadcast+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
    7d50:	2301      	movs	r3, #1
    7d52:	e025      	b.n	7da0 <ip4_addr_isbroadcast+0x6c>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
    7d54:	683b      	ldr	r3, [r7, #0]
    7d56:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    7d5a:	f003 0302 	and.w	r3, r3, #2
    7d5e:	2b00      	cmp	r3, #0
    7d60:	d101      	bne.n	7d66 <ip4_addr_isbroadcast+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    7d62:	2300      	movs	r3, #0
    7d64:	e01c      	b.n	7da0 <ip4_addr_isbroadcast+0x6c>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(&netif->ip_addr)) {
    7d66:	683b      	ldr	r3, [r7, #0]
    7d68:	685a      	ldr	r2, [r3, #4]
    7d6a:	687b      	ldr	r3, [r7, #4]
    7d6c:	429a      	cmp	r2, r3
    7d6e:	d101      	bne.n	7d74 <ip4_addr_isbroadcast+0x40>
    return 0;
    7d70:	2300      	movs	r3, #0
    7d72:	e015      	b.n	7da0 <ip4_addr_isbroadcast+0x6c>
  /*  on the same (sub) network... */
  } else if (ip_addr_netcmp(&ipaddr, &(netif->ip_addr), &(netif->netmask))
    7d74:	68fa      	ldr	r2, [r7, #12]
    7d76:	683b      	ldr	r3, [r7, #0]
    7d78:	685b      	ldr	r3, [r3, #4]
    7d7a:	405a      	eors	r2, r3
    7d7c:	683b      	ldr	r3, [r7, #0]
    7d7e:	689b      	ldr	r3, [r3, #8]
    7d80:	4013      	ands	r3, r2
    7d82:	2b00      	cmp	r3, #0
    7d84:	d10b      	bne.n	7d9e <ip4_addr_isbroadcast+0x6a>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
    7d86:	683b      	ldr	r3, [r7, #0]
    7d88:	689b      	ldr	r3, [r3, #8]
    7d8a:	43da      	mvns	r2, r3
    7d8c:	687b      	ldr	r3, [r7, #4]
    7d8e:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(&netif->netmask)))) {
    7d90:	683b      	ldr	r3, [r7, #0]
    7d92:	689b      	ldr	r3, [r3, #8]
    7d94:	43db      	mvns	r3, r3
  } else if (addr == ip4_addr_get_u32(&netif->ip_addr)) {
    return 0;
  /*  on the same (sub) network... */
  } else if (ip_addr_netcmp(&ipaddr, &(netif->ip_addr), &(netif->netmask))
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
    7d96:	429a      	cmp	r2, r3
    7d98:	d101      	bne.n	7d9e <ip4_addr_isbroadcast+0x6a>
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(&netif->netmask)))) {
    /* => network broadcast address */
    return 1;
    7d9a:	2301      	movs	r3, #1
    7d9c:	e000      	b.n	7da0 <ip4_addr_isbroadcast+0x6c>
  } else {
    return 0;
    7d9e:	2300      	movs	r3, #0
  }
}
    7da0:	4618      	mov	r0, r3
    7da2:	3714      	adds	r7, #20
    7da4:	46bd      	mov	sp, r7
    7da6:	bc80      	pop	{r7}
    7da8:	4770      	bx	lr
    7daa:	bf00      	nop

00007dac <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
    7dac:	b580      	push	{r7, lr}
    7dae:	b088      	sub	sp, #32
    7db0:	af00      	add	r7, sp, #0
    7db2:	6078      	str	r0, [r7, #4]
    7db4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
    7db6:	2300      	movs	r3, #0
    7db8:	83fb      	strh	r3, [r7, #30]
  u8_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
  if (prev != NULL) {
    7dba:	683b      	ldr	r3, [r7, #0]
    7dbc:	2b00      	cmp	r3, #0
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
  }

  snmp_inc_ipreasmfails();
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
    7dbe:	687b      	ldr	r3, [r7, #4]
    7dc0:	685b      	ldr	r3, [r3, #4]
    7dc2:	685b      	ldr	r3, [r3, #4]
    7dc4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
    7dc6:	697b      	ldr	r3, [r7, #20]
    7dc8:	889b      	ldrh	r3, [r3, #4]
    7dca:	b29b      	uxth	r3, r3
    7dcc:	2b00      	cmp	r3, #0
    7dce:	d11f      	bne.n	7e10 <ip_reass_free_complete_datagram+0x64>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
    7dd0:	687b      	ldr	r3, [r7, #4]
    7dd2:	685b      	ldr	r3, [r3, #4]
    7dd4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
    7dd6:	697b      	ldr	r3, [r7, #20]
    7dd8:	681a      	ldr	r2, [r3, #0]
    7dda:	687b      	ldr	r3, [r7, #4]
    7ddc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
    7dde:	69bb      	ldr	r3, [r7, #24]
    7de0:	6858      	ldr	r0, [r3, #4]
    7de2:	687b      	ldr	r3, [r7, #4]
    7de4:	3308      	adds	r3, #8
    7de6:	2214      	movs	r2, #20
    7de8:	4619      	mov	r1, r3
    7dea:	f001 fc4f 	bl	968c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
    7dee:	2101      	movs	r1, #1
    7df0:	69b8      	ldr	r0, [r7, #24]
    7df2:	f000 fddb 	bl	89ac <icmp_time_exceeded>
    clen = pbuf_clen(p);
    7df6:	69b8      	ldr	r0, [r7, #24]
    7df8:	f7fe ff80 	bl	6cfc <pbuf_clen>
    7dfc:	4603      	mov	r3, r0
    7dfe:	74fb      	strb	r3, [r7, #19]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed += clen;
    7e00:	7cfb      	ldrb	r3, [r7, #19]
    7e02:	b29a      	uxth	r2, r3
    7e04:	8bfb      	ldrh	r3, [r7, #30]
    7e06:	4413      	add	r3, r2
    7e08:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
    7e0a:	69b8      	ldr	r0, [r7, #24]
    7e0c:	f7fe ff1a 	bl	6c44 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released 
     separately as they have not yet been chained */
  p = ipr->p;
    7e10:	687b      	ldr	r3, [r7, #4]
    7e12:	685b      	ldr	r3, [r3, #4]
    7e14:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
    7e16:	e014      	b.n	7e42 <ip_reass_free_complete_datagram+0x96>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
    7e18:	69bb      	ldr	r3, [r7, #24]
    7e1a:	685b      	ldr	r3, [r3, #4]
    7e1c:	617b      	str	r3, [r7, #20]
    pcur = p;
    7e1e:	69bb      	ldr	r3, [r7, #24]
    7e20:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
    7e22:	697b      	ldr	r3, [r7, #20]
    7e24:	681b      	ldr	r3, [r3, #0]
    7e26:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
    7e28:	68f8      	ldr	r0, [r7, #12]
    7e2a:	f7fe ff67 	bl	6cfc <pbuf_clen>
    7e2e:	4603      	mov	r3, r0
    7e30:	74fb      	strb	r3, [r7, #19]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed += clen;
    7e32:	7cfb      	ldrb	r3, [r7, #19]
    7e34:	b29a      	uxth	r2, r3
    7e36:	8bfb      	ldrh	r3, [r7, #30]
    7e38:	4413      	add	r3, r2
    7e3a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
    7e3c:	68f8      	ldr	r0, [r7, #12]
    7e3e:	f7fe ff01 	bl	6c44 <pbuf_free>
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released 
     separately as they have not yet been chained */
  p = ipr->p;
  while (p != NULL) {
    7e42:	69bb      	ldr	r3, [r7, #24]
    7e44:	2b00      	cmp	r3, #0
    7e46:	d1e7      	bne.n	7e18 <ip_reass_free_complete_datagram+0x6c>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed += clen;
    pbuf_free(pcur);
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
    7e48:	6839      	ldr	r1, [r7, #0]
    7e4a:	6878      	ldr	r0, [r7, #4]
    7e4c:	f000 f8ac 	bl	7fa8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
  ip_reass_pbufcount -= pbufs_freed;
    7e50:	4b05      	ldr	r3, [pc, #20]	; (7e68 <ip_reass_free_complete_datagram+0xbc>)
    7e52:	881a      	ldrh	r2, [r3, #0]
    7e54:	8bfb      	ldrh	r3, [r7, #30]
    7e56:	1ad3      	subs	r3, r2, r3
    7e58:	b29a      	uxth	r2, r3
    7e5a:	4b03      	ldr	r3, [pc, #12]	; (7e68 <ip_reass_free_complete_datagram+0xbc>)
    7e5c:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
    7e5e:	8bfb      	ldrh	r3, [r7, #30]
}
    7e60:	4618      	mov	r0, r3
    7e62:	3720      	adds	r7, #32
    7e64:	46bd      	mov	sp, r7
    7e66:	bd80      	pop	{r7, pc}
    7e68:	10001230 	.word	0x10001230

00007e6c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
    7e6c:	b580      	push	{r7, lr}
    7e6e:	b088      	sub	sp, #32
    7e70:	af00      	add	r7, sp, #0
    7e72:	6078      	str	r0, [r7, #4]
    7e74:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev;
  int pbufs_freed = 0, pbufs_freed_current;
    7e76:	2300      	movs	r3, #0
    7e78:	613b      	str	r3, [r7, #16]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
    7e7a:	2300      	movs	r3, #0
    7e7c:	61bb      	str	r3, [r7, #24]
    prev = NULL;
    7e7e:	2300      	movs	r3, #0
    7e80:	617b      	str	r3, [r7, #20]
    other_datagrams = 0;
    7e82:	2300      	movs	r3, #0
    7e84:	60fb      	str	r3, [r7, #12]
    r = reassdatagrams;
    7e86:	4b26      	ldr	r3, [pc, #152]	; (7f20 <ip_reass_remove_oldest_datagram+0xb4>)
    7e88:	681b      	ldr	r3, [r3, #0]
    7e8a:	61fb      	str	r3, [r7, #28]
    while (r != NULL) {
    7e8c:	e02c      	b.n	7ee8 <ip_reass_remove_oldest_datagram+0x7c>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
    7e8e:	69fb      	ldr	r3, [r7, #28]
    7e90:	695a      	ldr	r2, [r3, #20]
    7e92:	687b      	ldr	r3, [r7, #4]
    7e94:	68db      	ldr	r3, [r3, #12]
    7e96:	429a      	cmp	r2, r3
    7e98:	d10c      	bne.n	7eb4 <ip_reass_remove_oldest_datagram+0x48>
    7e9a:	69fb      	ldr	r3, [r7, #28]
    7e9c:	699a      	ldr	r2, [r3, #24]
    7e9e:	687b      	ldr	r3, [r7, #4]
    7ea0:	691b      	ldr	r3, [r3, #16]
    7ea2:	429a      	cmp	r2, r3
    7ea4:	d106      	bne.n	7eb4 <ip_reass_remove_oldest_datagram+0x48>
    7ea6:	69fb      	ldr	r3, [r7, #28]
    7ea8:	899a      	ldrh	r2, [r3, #12]
    7eaa:	687b      	ldr	r3, [r7, #4]
    7eac:	889b      	ldrh	r3, [r3, #4]
    7eae:	b29b      	uxth	r3, r3
    7eb0:	429a      	cmp	r2, r3
    7eb2:	d010      	beq.n	7ed6 <ip_reass_remove_oldest_datagram+0x6a>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
    7eb4:	68fb      	ldr	r3, [r7, #12]
    7eb6:	3301      	adds	r3, #1
    7eb8:	60fb      	str	r3, [r7, #12]
        if (oldest == NULL) {
    7eba:	69bb      	ldr	r3, [r7, #24]
    7ebc:	2b00      	cmp	r3, #0
    7ebe:	d102      	bne.n	7ec6 <ip_reass_remove_oldest_datagram+0x5a>
          oldest = r;
    7ec0:	69fb      	ldr	r3, [r7, #28]
    7ec2:	61bb      	str	r3, [r7, #24]
    7ec4:	e007      	b.n	7ed6 <ip_reass_remove_oldest_datagram+0x6a>
        } else if (r->timer <= oldest->timer) {
    7ec6:	69fb      	ldr	r3, [r7, #28]
    7ec8:	7fda      	ldrb	r2, [r3, #31]
    7eca:	69bb      	ldr	r3, [r7, #24]
    7ecc:	7fdb      	ldrb	r3, [r3, #31]
    7ece:	429a      	cmp	r2, r3
    7ed0:	d801      	bhi.n	7ed6 <ip_reass_remove_oldest_datagram+0x6a>
          /* older than the previous oldest */
          oldest = r;
    7ed2:	69fb      	ldr	r3, [r7, #28]
    7ed4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
    7ed6:	69fb      	ldr	r3, [r7, #28]
    7ed8:	681b      	ldr	r3, [r3, #0]
    7eda:	2b00      	cmp	r3, #0
    7edc:	d001      	beq.n	7ee2 <ip_reass_remove_oldest_datagram+0x76>
        prev = r;
    7ede:	69fb      	ldr	r3, [r7, #28]
    7ee0:	617b      	str	r3, [r7, #20]
      }
      r = r->next;
    7ee2:	69fb      	ldr	r3, [r7, #28]
    7ee4:	681b      	ldr	r3, [r3, #0]
    7ee6:	61fb      	str	r3, [r7, #28]
  do {
    oldest = NULL;
    prev = NULL;
    other_datagrams = 0;
    r = reassdatagrams;
    while (r != NULL) {
    7ee8:	69fb      	ldr	r3, [r7, #28]
    7eea:	2b00      	cmp	r3, #0
    7eec:	d1cf      	bne.n	7e8e <ip_reass_remove_oldest_datagram+0x22>
      if (r->next != NULL) {
        prev = r;
      }
      r = r->next;
    }
    if (oldest != NULL) {
    7eee:	69bb      	ldr	r3, [r7, #24]
    7ef0:	2b00      	cmp	r3, #0
    7ef2:	d008      	beq.n	7f06 <ip_reass_remove_oldest_datagram+0x9a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, prev);
    7ef4:	6979      	ldr	r1, [r7, #20]
    7ef6:	69b8      	ldr	r0, [r7, #24]
    7ef8:	f7ff ff58 	bl	7dac <ip_reass_free_complete_datagram>
    7efc:	60b8      	str	r0, [r7, #8]
      pbufs_freed += pbufs_freed_current;
    7efe:	693a      	ldr	r2, [r7, #16]
    7f00:	68bb      	ldr	r3, [r7, #8]
    7f02:	4413      	add	r3, r2
    7f04:	613b      	str	r3, [r7, #16]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
    7f06:	693a      	ldr	r2, [r7, #16]
    7f08:	683b      	ldr	r3, [r7, #0]
    7f0a:	429a      	cmp	r2, r3
    7f0c:	da02      	bge.n	7f14 <ip_reass_remove_oldest_datagram+0xa8>
    7f0e:	68fb      	ldr	r3, [r7, #12]
    7f10:	2b01      	cmp	r3, #1
    7f12:	dcb2      	bgt.n	7e7a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
    7f14:	693b      	ldr	r3, [r7, #16]
}
    7f16:	4618      	mov	r0, r3
    7f18:	3720      	adds	r7, #32
    7f1a:	46bd      	mov	sp, r7
    7f1c:	bd80      	pop	{r7, pc}
    7f1e:	bf00      	nop
    7f20:	1000122c 	.word	0x1000122c

00007f24 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
    7f24:	b580      	push	{r7, lr}
    7f26:	b084      	sub	sp, #16
    7f28:	af00      	add	r7, sp, #0
    7f2a:	6078      	str	r0, [r7, #4]
    7f2c:	6039      	str	r1, [r7, #0]
  struct ip_reassdata* ipr;
  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
    7f2e:	2005      	movs	r0, #5
    7f30:	f7fa fbaa 	bl	2688 <memp_malloc>
    7f34:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
    7f36:	68fb      	ldr	r3, [r7, #12]
    7f38:	2b00      	cmp	r3, #0
    7f3a:	d116      	bne.n	7f6a <ip_reass_enqueue_new_datagram+0x46>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
    7f3c:	6839      	ldr	r1, [r7, #0]
    7f3e:	6878      	ldr	r0, [r7, #4]
    7f40:	f7ff ff94 	bl	7e6c <ip_reass_remove_oldest_datagram>
    7f44:	4602      	mov	r2, r0
    7f46:	683b      	ldr	r3, [r7, #0]
    7f48:	429a      	cmp	r2, r3
    7f4a:	db03      	blt.n	7f54 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
    7f4c:	2005      	movs	r0, #5
    7f4e:	f7fa fb9b 	bl	2688 <memp_malloc>
    7f52:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
    7f54:	68fb      	ldr	r3, [r7, #12]
    7f56:	2b00      	cmp	r3, #0
    7f58:	d107      	bne.n	7f6a <ip_reass_enqueue_new_datagram+0x46>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
    7f5a:	4b11      	ldr	r3, [pc, #68]	; (7fa0 <ip_reass_enqueue_new_datagram+0x7c>)
    7f5c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    7f5e:	3301      	adds	r3, #1
    7f60:	b29a      	uxth	r2, r3
    7f62:	4b0f      	ldr	r3, [pc, #60]	; (7fa0 <ip_reass_enqueue_new_datagram+0x7c>)
    7f64:	879a      	strh	r2, [r3, #60]	; 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
    7f66:	2300      	movs	r3, #0
    7f68:	e016      	b.n	7f98 <ip_reass_enqueue_new_datagram+0x74>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
    7f6a:	2220      	movs	r2, #32
    7f6c:	2100      	movs	r1, #0
    7f6e:	68f8      	ldr	r0, [r7, #12]
    7f70:	f001 fc02 	bl	9778 <memset>
  ipr->timer = IP_REASS_MAXAGE;
    7f74:	68fb      	ldr	r3, [r7, #12]
    7f76:	2203      	movs	r2, #3
    7f78:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
    7f7a:	4b0a      	ldr	r3, [pc, #40]	; (7fa4 <ip_reass_enqueue_new_datagram+0x80>)
    7f7c:	681a      	ldr	r2, [r3, #0]
    7f7e:	68fb      	ldr	r3, [r7, #12]
    7f80:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
    7f82:	4a08      	ldr	r2, [pc, #32]	; (7fa4 <ip_reass_enqueue_new_datagram+0x80>)
    7f84:	68fb      	ldr	r3, [r7, #12]
    7f86:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
    7f88:	68fb      	ldr	r3, [r7, #12]
    7f8a:	3308      	adds	r3, #8
    7f8c:	2214      	movs	r2, #20
    7f8e:	6879      	ldr	r1, [r7, #4]
    7f90:	4618      	mov	r0, r3
    7f92:	f001 fb7b 	bl	968c <memcpy>
  return ipr;
    7f96:	68fb      	ldr	r3, [r7, #12]
}
    7f98:	4618      	mov	r0, r3
    7f9a:	3710      	adds	r7, #16
    7f9c:	46bd      	mov	sp, r7
    7f9e:	bd80      	pop	{r7, pc}
    7fa0:	10001978 	.word	0x10001978
    7fa4:	1000122c 	.word	0x1000122c

00007fa8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
    7fa8:	b580      	push	{r7, lr}
    7faa:	b082      	sub	sp, #8
    7fac:	af00      	add	r7, sp, #0
    7fae:	6078      	str	r0, [r7, #4]
    7fb0:	6039      	str	r1, [r7, #0]
  
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
    7fb2:	4b0b      	ldr	r3, [pc, #44]	; (7fe0 <ip_reass_dequeue_datagram+0x38>)
    7fb4:	681a      	ldr	r2, [r3, #0]
    7fb6:	687b      	ldr	r3, [r7, #4]
    7fb8:	429a      	cmp	r2, r3
    7fba:	d104      	bne.n	7fc6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
    7fbc:	687b      	ldr	r3, [r7, #4]
    7fbe:	681b      	ldr	r3, [r3, #0]
    7fc0:	4a07      	ldr	r2, [pc, #28]	; (7fe0 <ip_reass_dequeue_datagram+0x38>)
    7fc2:	6013      	str	r3, [r2, #0]
    7fc4:	e003      	b.n	7fce <ip_reass_dequeue_datagram+0x26>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
    7fc6:	687b      	ldr	r3, [r7, #4]
    7fc8:	681a      	ldr	r2, [r3, #0]
    7fca:	683b      	ldr	r3, [r7, #0]
    7fcc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reass struct */
  memp_free(MEMP_REASSDATA, ipr);
    7fce:	6879      	ldr	r1, [r7, #4]
    7fd0:	2005      	movs	r0, #5
    7fd2:	f7fa fbcd 	bl	2770 <memp_free>
}
    7fd6:	bf00      	nop
    7fd8:	3708      	adds	r7, #8
    7fda:	46bd      	mov	sp, r7
    7fdc:	bd80      	pop	{r7, pc}
    7fde:	bf00      	nop
    7fe0:	1000122c 	.word	0x1000122c

00007fe4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param new_p points to the pbuf for the current fragment
 * @return 0 if invalid, >0 otherwise
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p)
{
    7fe4:	b590      	push	{r4, r7, lr}
    7fe6:	b08b      	sub	sp, #44	; 0x2c
    7fe8:	af00      	add	r7, sp, #0
    7fea:	6078      	str	r0, [r7, #4]
    7fec:	6039      	str	r1, [r7, #0]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
    7fee:	2300      	movs	r3, #0
    7ff0:	623b      	str	r3, [r7, #32]
  struct pbuf *q;
  u16_t offset,len;
  struct ip_hdr *fraghdr;
  int valid = 1;
    7ff2:	2301      	movs	r3, #1
    7ff4:	61bb      	str	r3, [r7, #24]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload; 
    7ff6:	683b      	ldr	r3, [r7, #0]
    7ff8:	685b      	ldr	r3, [r3, #4]
    7ffa:	617b      	str	r3, [r7, #20]
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
    7ffc:	697b      	ldr	r3, [r7, #20]
    7ffe:	885b      	ldrh	r3, [r3, #2]
    8000:	b29b      	uxth	r3, r3
    8002:	4618      	mov	r0, r3
    8004:	f7ff f87c 	bl	7100 <lwip_ntohs>
    8008:	4603      	mov	r3, r0
    800a:	461c      	mov	r4, r3
    800c:	697b      	ldr	r3, [r7, #20]
    800e:	881b      	ldrh	r3, [r3, #0]
    8010:	b29b      	uxth	r3, r3
    8012:	4618      	mov	r0, r3
    8014:	f7ff f874 	bl	7100 <lwip_ntohs>
    8018:	4603      	mov	r3, r0
    801a:	0a1b      	lsrs	r3, r3, #8
    801c:	b29b      	uxth	r3, r3
    801e:	f003 030f 	and.w	r3, r3, #15
    8022:	b29b      	uxth	r3, r3
    8024:	009b      	lsls	r3, r3, #2
    8026:	b29b      	uxth	r3, r3
    8028:	1ae3      	subs	r3, r4, r3
    802a:	827b      	strh	r3, [r7, #18]
  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
    802c:	697b      	ldr	r3, [r7, #20]
    802e:	88db      	ldrh	r3, [r3, #6]
    8030:	b29b      	uxth	r3, r3
    8032:	4618      	mov	r0, r3
    8034:	f7ff f864 	bl	7100 <lwip_ntohs>
    8038:	4603      	mov	r3, r0
    803a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    803e:	b29b      	uxth	r3, r3
    8040:	00db      	lsls	r3, r3, #3
    8042:	823b      	strh	r3, [r7, #16]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
    8044:	683b      	ldr	r3, [r7, #0]
    8046:	685b      	ldr	r3, [r3, #4]
    8048:	627b      	str	r3, [r7, #36]	; 0x24
  iprh->next_pbuf = NULL;
    804a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    804c:	2200      	movs	r2, #0
    804e:	701a      	strb	r2, [r3, #0]
    8050:	2200      	movs	r2, #0
    8052:	705a      	strb	r2, [r3, #1]
    8054:	2200      	movs	r2, #0
    8056:	709a      	strb	r2, [r3, #2]
    8058:	2200      	movs	r2, #0
    805a:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
    805c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    805e:	8a3a      	ldrh	r2, [r7, #16]
    8060:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
    8062:	8a3a      	ldrh	r2, [r7, #16]
    8064:	8a7b      	ldrh	r3, [r7, #18]
    8066:	4413      	add	r3, r2
    8068:	b29a      	uxth	r2, r3
    806a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    806c:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find on with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
    806e:	687b      	ldr	r3, [r7, #4]
    8070:	685b      	ldr	r3, [r3, #4]
    8072:	61fb      	str	r3, [r7, #28]
    8074:	e04c      	b.n	8110 <__cs3_region_size_ram+0x110>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
    8076:	69fb      	ldr	r3, [r7, #28]
    8078:	685b      	ldr	r3, [r3, #4]
    807a:	60fb      	str	r3, [r7, #12]
    if (iprh->start < iprh_tmp->start) {
    807c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    807e:	889b      	ldrh	r3, [r3, #4]
    8080:	b29a      	uxth	r2, r3
    8082:	68fb      	ldr	r3, [r7, #12]
    8084:	889b      	ldrh	r3, [r3, #4]
    8086:	b29b      	uxth	r3, r3
    8088:	429a      	cmp	r2, r3
    808a:	d21f      	bcs.n	80cc <__cs3_region_size_ram+0xcc>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
    808c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    808e:	69fa      	ldr	r2, [r7, #28]
    8090:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
    8092:	6a3b      	ldr	r3, [r7, #32]
    8094:	2b00      	cmp	r3, #0
    8096:	d015      	beq.n	80c4 <__cs3_region_size_ram+0xc4>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
    8098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    809a:	889b      	ldrh	r3, [r3, #4]
    809c:	b29a      	uxth	r2, r3
    809e:	6a3b      	ldr	r3, [r7, #32]
    80a0:	88db      	ldrh	r3, [r3, #6]
    80a2:	b29b      	uxth	r3, r3
    80a4:	429a      	cmp	r2, r3
    80a6:	f0c0 808c 	bcc.w	81c2 <__cs3_region_size_ram+0x1c2>
    80aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    80ac:	88db      	ldrh	r3, [r3, #6]
    80ae:	b29a      	uxth	r2, r3
    80b0:	68fb      	ldr	r3, [r7, #12]
    80b2:	889b      	ldrh	r3, [r3, #4]
    80b4:	b29b      	uxth	r3, r3
    80b6:	429a      	cmp	r2, r3
    80b8:	f200 8083 	bhi.w	81c2 <__cs3_region_size_ram+0x1c2>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
    80bc:	6a3b      	ldr	r3, [r7, #32]
    80be:	683a      	ldr	r2, [r7, #0]
    80c0:	601a      	str	r2, [r3, #0]
      } else {
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
    80c2:	e028      	b.n	8116 <__cs3_region_size_ram+0x116>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
      } else {
        /* fragment with the lowest offset */
        ipr->p = new_p;
    80c4:	687b      	ldr	r3, [r7, #4]
    80c6:	683a      	ldr	r2, [r7, #0]
    80c8:	605a      	str	r2, [r3, #4]
      }
      break;
    80ca:	e024      	b.n	8116 <__cs3_region_size_ram+0x116>
    } else if(iprh->start == iprh_tmp->start) {
    80cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    80ce:	889b      	ldrh	r3, [r3, #4]
    80d0:	b29a      	uxth	r2, r3
    80d2:	68fb      	ldr	r3, [r7, #12]
    80d4:	889b      	ldrh	r3, [r3, #4]
    80d6:	b29b      	uxth	r3, r3
    80d8:	429a      	cmp	r2, r3
    80da:	d06f      	beq.n	81bc <__cs3_region_size_ram+0x1bc>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if(iprh->start < iprh_tmp->end) {
    80dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    80de:	889b      	ldrh	r3, [r3, #4]
    80e0:	b29a      	uxth	r2, r3
    80e2:	68fb      	ldr	r3, [r7, #12]
    80e4:	88db      	ldrh	r3, [r3, #6]
    80e6:	b29b      	uxth	r3, r3
    80e8:	429a      	cmp	r2, r3
    80ea:	d369      	bcc.n	81c0 <__cs3_region_size_ram+0x1c0>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no wholes. */
      if (iprh_prev != NULL) {
    80ec:	6a3b      	ldr	r3, [r7, #32]
    80ee:	2b00      	cmp	r3, #0
    80f0:	d009      	beq.n	8106 <__cs3_region_size_ram+0x106>
        if (iprh_prev->end != iprh_tmp->start) {
    80f2:	6a3b      	ldr	r3, [r7, #32]
    80f4:	88db      	ldrh	r3, [r3, #6]
    80f6:	b29a      	uxth	r2, r3
    80f8:	68fb      	ldr	r3, [r7, #12]
    80fa:	889b      	ldrh	r3, [r3, #4]
    80fc:	b29b      	uxth	r3, r3
    80fe:	429a      	cmp	r2, r3
    8100:	d001      	beq.n	8106 <__cs3_region_size_ram+0x106>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
    8102:	2300      	movs	r3, #0
    8104:	61bb      	str	r3, [r7, #24]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
    8106:	68fb      	ldr	r3, [r7, #12]
    8108:	681b      	ldr	r3, [r3, #0]
    810a:	61fb      	str	r3, [r7, #28]
    iprh_prev = iprh_tmp;
    810c:	68fb      	ldr	r3, [r7, #12]
    810e:	623b      	str	r3, [r7, #32]
  iprh->start = offset;
  iprh->end = offset + len;

  /* Iterate through until we either get to the end of the list (append),
   * or we find on with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
    8110:	69fb      	ldr	r3, [r7, #28]
    8112:	2b00      	cmp	r3, #0
    8114:	d1af      	bne.n	8076 <__cs3_region_size_ram+0x76>
    q = iprh_tmp->next_pbuf;
    iprh_prev = iprh_tmp;
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
    8116:	69fb      	ldr	r3, [r7, #28]
    8118:	2b00      	cmp	r3, #0
    811a:	d117      	bne.n	814c <__cs3_region_size_ram+0x14c>
    if (iprh_prev != NULL) {
    811c:	6a3b      	ldr	r3, [r7, #32]
    811e:	2b00      	cmp	r3, #0
    8120:	d011      	beq.n	8146 <__cs3_region_size_ram+0x146>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
    8122:	6a3b      	ldr	r3, [r7, #32]
    8124:	88db      	ldrh	r3, [r3, #6]
    8126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8128:	889b      	ldrh	r3, [r3, #4]
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
    812a:	6a3b      	ldr	r3, [r7, #32]
    812c:	683a      	ldr	r2, [r7, #0]
    812e:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
    8130:	6a3b      	ldr	r3, [r7, #32]
    8132:	88db      	ldrh	r3, [r3, #6]
    8134:	b29a      	uxth	r2, r3
    8136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8138:	889b      	ldrh	r3, [r3, #4]
    813a:	b29b      	uxth	r3, r3
    813c:	429a      	cmp	r2, r3
    813e:	d005      	beq.n	814c <__cs3_region_size_ram+0x14c>
        valid = 0;
    8140:	2300      	movs	r3, #0
    8142:	61bb      	str	r3, [r7, #24]
    8144:	e002      	b.n	814c <__cs3_region_size_ram+0x14c>
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
    8146:	687b      	ldr	r3, [r7, #4]
    8148:	683a      	ldr	r2, [r7, #0]
    814a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0) {
    814c:	687b      	ldr	r3, [r7, #4]
    814e:	7f9b      	ldrb	r3, [r3, #30]
    8150:	f003 0301 	and.w	r3, r3, #1
    8154:	2b00      	cmp	r3, #0
    8156:	d02f      	beq.n	81b8 <__cs3_region_size_ram+0x1b8>
    /* and had no wholes so far */
    if (valid) {
    8158:	69bb      	ldr	r3, [r7, #24]
    815a:	2b00      	cmp	r3, #0
    815c:	d02a      	beq.n	81b4 <__cs3_region_size_ram+0x1b4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if (((struct ip_reass_helper*)ipr->p->payload)->start != 0) {
    815e:	687b      	ldr	r3, [r7, #4]
    8160:	685b      	ldr	r3, [r3, #4]
    8162:	685b      	ldr	r3, [r3, #4]
    8164:	889b      	ldrh	r3, [r3, #4]
    8166:	b29b      	uxth	r3, r3
    8168:	2b00      	cmp	r3, #0
    816a:	d002      	beq.n	8172 <__cs3_region_size_ram+0x172>
        valid = 0;
    816c:	2300      	movs	r3, #0
    816e:	61bb      	str	r3, [r7, #24]
    8170:	e020      	b.n	81b4 <__cs3_region_size_ram+0x1b4>
      } else {
        /* and check that there are no wholes after this datagram */
        iprh_prev = iprh;
    8172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8174:	623b      	str	r3, [r7, #32]
        q = iprh->next_pbuf;
    8176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8178:	681b      	ldr	r3, [r3, #0]
    817a:	61fb      	str	r3, [r7, #28]
        while (q != NULL) {
    817c:	e012      	b.n	81a4 <__cs3_region_size_ram+0x1a4>
          iprh = (struct ip_reass_helper*)q->payload;
    817e:	69fb      	ldr	r3, [r7, #28]
    8180:	685b      	ldr	r3, [r3, #4]
    8182:	627b      	str	r3, [r7, #36]	; 0x24
          if (iprh_prev->end != iprh->start) {
    8184:	6a3b      	ldr	r3, [r7, #32]
    8186:	88db      	ldrh	r3, [r3, #6]
    8188:	b29a      	uxth	r2, r3
    818a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    818c:	889b      	ldrh	r3, [r3, #4]
    818e:	b29b      	uxth	r3, r3
    8190:	429a      	cmp	r2, r3
    8192:	d002      	beq.n	819a <__cs3_region_size_ram+0x19a>
            valid = 0;
    8194:	2300      	movs	r3, #0
    8196:	61bb      	str	r3, [r7, #24]
            break;
    8198:	e007      	b.n	81aa <__cs3_region_size_ram+0x1aa>
          }
          iprh_prev = iprh;
    819a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    819c:	623b      	str	r3, [r7, #32]
          q = iprh->next_pbuf;
    819e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    81a0:	681b      	ldr	r3, [r3, #0]
    81a2:	61fb      	str	r3, [r7, #28]
        valid = 0;
      } else {
        /* and check that there are no wholes after this datagram */
        iprh_prev = iprh;
        q = iprh->next_pbuf;
        while (q != NULL) {
    81a4:	69fb      	ldr	r3, [r7, #28]
    81a6:	2b00      	cmp	r3, #0
    81a8:	d1e9      	bne.n	817e <__cs3_region_size_ram+0x17e>
          iprh_prev = iprh;
          q = iprh->next_pbuf;
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
    81aa:	69bb      	ldr	r3, [r7, #24]
    81ac:	2b00      	cmp	r3, #0
    81ae:	d001      	beq.n	81b4 <__cs3_region_size_ram+0x1b4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
          LWIP_ASSERT("sanity check",
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
            iprh->next_pbuf == NULL);
          LWIP_ASSERT("validate_datagram:datagram end!=datagram len",
    81b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    81b2:	88db      	ldrh	r3, [r3, #6]
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid;
    81b4:	69bb      	ldr	r3, [r7, #24]
    81b6:	e014      	b.n	81e2 <__cs3_region_size_ram+0x1e2>
  }
  /* If we come here, not all fragments were received, yet! */
  return 0; /* not yet valid! */
    81b8:	2300      	movs	r3, #0
    81ba:	e012      	b.n	81e2 <__cs3_region_size_ram+0x1e2>
        ipr->p = new_p;
      }
      break;
    } else if(iprh->start == iprh_tmp->start) {
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
    81bc:	bf00      	nop
    81be:	e000      	b.n	81c2 <__cs3_region_size_ram+0x1c2>
#if IP_REASS_CHECK_OVERLAP
    } else if(iprh->start < iprh_tmp->end) {
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
    81c0:	bf00      	nop
  }
  /* If we come here, not all fragments were received, yet! */
  return 0; /* not yet valid! */
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
    81c2:	6838      	ldr	r0, [r7, #0]
    81c4:	f7fe fd9a 	bl	6cfc <pbuf_clen>
    81c8:	4603      	mov	r3, r0
    81ca:	4619      	mov	r1, r3
    81cc:	4b07      	ldr	r3, [pc, #28]	; (81ec <__cs3_region_size_ram+0x1ec>)
    81ce:	881a      	ldrh	r2, [r3, #0]
    81d0:	b28b      	uxth	r3, r1
    81d2:	1ad3      	subs	r3, r2, r3
    81d4:	b29a      	uxth	r2, r3
    81d6:	4b05      	ldr	r3, [pc, #20]	; (81ec <__cs3_region_size_ram+0x1ec>)
    81d8:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
    81da:	6838      	ldr	r0, [r7, #0]
    81dc:	f7fe fd32 	bl	6c44 <pbuf_free>
  return 0;
    81e0:	2300      	movs	r3, #0
#endif /* IP_REASS_CHECK_OVERLAP */
}
    81e2:	4618      	mov	r0, r3
    81e4:	372c      	adds	r7, #44	; 0x2c
    81e6:	46bd      	mov	sp, r7
    81e8:	bd90      	pop	{r4, r7, pc}
    81ea:	bf00      	nop
    81ec:	10001230 	.word	0x10001230

000081f0 <ip_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip_reass(struct pbuf *p)
{
    81f0:	b590      	push	{r4, r7, lr}
    81f2:	b08b      	sub	sp, #44	; 0x2c
    81f4:	af00      	add	r7, sp, #0
    81f6:	6078      	str	r0, [r7, #4]
  struct ip_hdr *fraghdr;
  struct ip_reassdata *ipr;
  struct ip_reass_helper *iprh;
  u16_t offset, len;
  u8_t clen;
  struct ip_reassdata *ipr_prev = NULL;
    81f8:	2300      	movs	r3, #0
    81fa:	61fb      	str	r3, [r7, #28]

  IPFRAG_STATS_INC(ip_frag.recv);
    81fc:	4ba1      	ldr	r3, [pc, #644]	; (8484 <ip_reass+0x294>)
    81fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    8200:	3301      	adds	r3, #1
    8202:	b29a      	uxth	r2, r3
    8204:	4b9f      	ldr	r3, [pc, #636]	; (8484 <ip_reass+0x294>)
    8206:	865a      	strh	r2, [r3, #50]	; 0x32
  snmp_inc_ipreasmreqds();

  fraghdr = (struct ip_hdr*)p->payload;
    8208:	687b      	ldr	r3, [r7, #4]
    820a:	685b      	ldr	r3, [r3, #4]
    820c:	61bb      	str	r3, [r7, #24]

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
    820e:	69bb      	ldr	r3, [r7, #24]
    8210:	881b      	ldrh	r3, [r3, #0]
    8212:	b29b      	uxth	r3, r3
    8214:	4618      	mov	r0, r3
    8216:	f7fe ff73 	bl	7100 <lwip_ntohs>
    821a:	4603      	mov	r3, r0
    821c:	0a1b      	lsrs	r3, r3, #8
    821e:	b29b      	uxth	r3, r3
    8220:	f003 030f 	and.w	r3, r3, #15
    8224:	009b      	lsls	r3, r3, #2
    8226:	2b14      	cmp	r3, #20
    8228:	d008      	beq.n	823c <ip_reass+0x4c>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    822a:	4b96      	ldr	r3, [pc, #600]	; (8484 <ip_reass+0x294>)
    822c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
    8230:	3301      	adds	r3, #1
    8232:	b29a      	uxth	r2, r3
    8234:	4b93      	ldr	r3, [pc, #588]	; (8484 <ip_reass+0x294>)
    8236:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    goto nullreturn;
    823a:	e114      	b.n	8466 <ip_reass+0x276>
  }

  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
    823c:	69bb      	ldr	r3, [r7, #24]
    823e:	88db      	ldrh	r3, [r3, #6]
    8240:	b29b      	uxth	r3, r3
    8242:	4618      	mov	r0, r3
    8244:	f7fe ff5c 	bl	7100 <lwip_ntohs>
    8248:	4603      	mov	r3, r0
    824a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    824e:	b29b      	uxth	r3, r3
    8250:	00db      	lsls	r3, r3, #3
    8252:	82fb      	strh	r3, [r7, #22]
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
    8254:	69bb      	ldr	r3, [r7, #24]
    8256:	885b      	ldrh	r3, [r3, #2]
    8258:	b29b      	uxth	r3, r3
    825a:	4618      	mov	r0, r3
    825c:	f7fe ff50 	bl	7100 <lwip_ntohs>
    8260:	4603      	mov	r3, r0
    8262:	461c      	mov	r4, r3
    8264:	69bb      	ldr	r3, [r7, #24]
    8266:	881b      	ldrh	r3, [r3, #0]
    8268:	b29b      	uxth	r3, r3
    826a:	4618      	mov	r0, r3
    826c:	f7fe ff48 	bl	7100 <lwip_ntohs>
    8270:	4603      	mov	r3, r0
    8272:	0a1b      	lsrs	r3, r3, #8
    8274:	b29b      	uxth	r3, r3
    8276:	f003 030f 	and.w	r3, r3, #15
    827a:	b29b      	uxth	r3, r3
    827c:	009b      	lsls	r3, r3, #2
    827e:	b29b      	uxth	r3, r3
    8280:	1ae3      	subs	r3, r4, r3
    8282:	82bb      	strh	r3, [r7, #20]

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
    8284:	6878      	ldr	r0, [r7, #4]
    8286:	f7fe fd39 	bl	6cfc <pbuf_clen>
    828a:	4603      	mov	r3, r0
    828c:	74fb      	strb	r3, [r7, #19]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
    828e:	4b7e      	ldr	r3, [pc, #504]	; (8488 <ip_reass+0x298>)
    8290:	881b      	ldrh	r3, [r3, #0]
    8292:	461a      	mov	r2, r3
    8294:	7cfb      	ldrb	r3, [r7, #19]
    8296:	4413      	add	r3, r2
    8298:	2b0a      	cmp	r3, #10
    829a:	dd15      	ble.n	82c8 <ip_reass+0xd8>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
    829c:	7cfb      	ldrb	r3, [r7, #19]
    829e:	4619      	mov	r1, r3
    82a0:	69b8      	ldr	r0, [r7, #24]
    82a2:	f7ff fde3 	bl	7e6c <ip_reass_remove_oldest_datagram>
    82a6:	4603      	mov	r3, r0
    82a8:	2b00      	cmp	r3, #0
    82aa:	d006      	beq.n	82ba <ip_reass+0xca>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
    82ac:	4b76      	ldr	r3, [pc, #472]	; (8488 <ip_reass+0x298>)
    82ae:	881b      	ldrh	r3, [r3, #0]
    82b0:	461a      	mov	r2, r3
    82b2:	7cfb      	ldrb	r3, [r7, #19]
    82b4:	4413      	add	r3, r2

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
    82b6:	2b0a      	cmp	r3, #10
    82b8:	dd06      	ble.n	82c8 <ip_reass+0xd8>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
        ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
    82ba:	4b72      	ldr	r3, [pc, #456]	; (8484 <ip_reass+0x294>)
    82bc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    82be:	3301      	adds	r3, #1
    82c0:	b29a      	uxth	r2, r3
    82c2:	4b70      	ldr	r3, [pc, #448]	; (8484 <ip_reass+0x294>)
    82c4:	879a      	strh	r2, [r3, #60]	; 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
    82c6:	e0ce      	b.n	8466 <ip_reass+0x276>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
    82c8:	4b70      	ldr	r3, [pc, #448]	; (848c <ip_reass+0x29c>)
    82ca:	681b      	ldr	r3, [r3, #0]
    82cc:	623b      	str	r3, [r7, #32]
    82ce:	e020      	b.n	8312 <ip_reass+0x122>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
    82d0:	6a3b      	ldr	r3, [r7, #32]
    82d2:	695a      	ldr	r2, [r3, #20]
    82d4:	69bb      	ldr	r3, [r7, #24]
    82d6:	68db      	ldr	r3, [r3, #12]
    82d8:	429a      	cmp	r2, r3
    82da:	d115      	bne.n	8308 <ip_reass+0x118>
    82dc:	6a3b      	ldr	r3, [r7, #32]
    82de:	699a      	ldr	r2, [r3, #24]
    82e0:	69bb      	ldr	r3, [r7, #24]
    82e2:	691b      	ldr	r3, [r3, #16]
    82e4:	429a      	cmp	r2, r3
    82e6:	d10f      	bne.n	8308 <ip_reass+0x118>
    82e8:	6a3b      	ldr	r3, [r7, #32]
    82ea:	899a      	ldrh	r2, [r3, #12]
    82ec:	69bb      	ldr	r3, [r7, #24]
    82ee:	889b      	ldrh	r3, [r3, #4]
    82f0:	b29b      	uxth	r3, r3
    82f2:	429a      	cmp	r2, r3
    82f4:	d108      	bne.n	8308 <ip_reass+0x118>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass: matching previous fragment ID=%"X16_F"\n",
        ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
    82f6:	4b63      	ldr	r3, [pc, #396]	; (8484 <ip_reass+0x294>)
    82f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
    82fc:	3301      	adds	r3, #1
    82fe:	b29a      	uxth	r2, r3
    8300:	4b60      	ldr	r3, [pc, #384]	; (8484 <ip_reass+0x294>)
    8302:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      break;
    8306:	e007      	b.n	8318 <ip_reass+0x128>
    }
    ipr_prev = ipr;
    8308:	6a3b      	ldr	r3, [r7, #32]
    830a:	61fb      	str	r3, [r7, #28]
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
    830c:	6a3b      	ldr	r3, [r7, #32]
    830e:	681b      	ldr	r3, [r3, #0]
    8310:	623b      	str	r3, [r7, #32]
    8312:	6a3b      	ldr	r3, [r7, #32]
    8314:	2b00      	cmp	r3, #0
    8316:	d1db      	bne.n	82d0 <ip_reass+0xe0>
      break;
    }
    ipr_prev = ipr;
  }

  if (ipr == NULL) {
    8318:	6a3b      	ldr	r3, [r7, #32]
    831a:	2b00      	cmp	r3, #0
    831c:	d109      	bne.n	8332 <ip_reass+0x142>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
    831e:	7cfb      	ldrb	r3, [r7, #19]
    8320:	4619      	mov	r1, r3
    8322:	69b8      	ldr	r0, [r7, #24]
    8324:	f7ff fdfe 	bl	7f24 <ip_reass_enqueue_new_datagram>
    8328:	6238      	str	r0, [r7, #32]
    /* Bail if unable to enqueue */
    if(ipr == NULL) {
    832a:	6a3b      	ldr	r3, [r7, #32]
    832c:	2b00      	cmp	r3, #0
    832e:	d11c      	bne.n	836a <ip_reass+0x17a>
      goto nullreturn;
    8330:	e099      	b.n	8466 <ip_reass+0x276>
    }
  } else {
    if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
    8332:	69bb      	ldr	r3, [r7, #24]
    8334:	88db      	ldrh	r3, [r3, #6]
    8336:	b29b      	uxth	r3, r3
    8338:	4618      	mov	r0, r3
    833a:	f7fe fee1 	bl	7100 <lwip_ntohs>
    833e:	4603      	mov	r3, r0
    8340:	f3c3 030c 	ubfx	r3, r3, #0, #13
    8344:	2b00      	cmp	r3, #0
    8346:	d110      	bne.n	836a <ip_reass+0x17a>
      ((ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
    8348:	6a3b      	ldr	r3, [r7, #32]
    834a:	89db      	ldrh	r3, [r3, #14]
    834c:	4618      	mov	r0, r3
    834e:	f7fe fed7 	bl	7100 <lwip_ntohs>
    8352:	4603      	mov	r3, r0
    8354:	f3c3 030c 	ubfx	r3, r3, #0, #13
    /* Bail if unable to enqueue */
    if(ipr == NULL) {
      goto nullreturn;
    }
  } else {
    if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
    8358:	2b00      	cmp	r3, #0
    835a:	d006      	beq.n	836a <ip_reass+0x17a>
      ((ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
    835c:	6a3b      	ldr	r3, [r7, #32]
    835e:	3308      	adds	r3, #8
    8360:	2214      	movs	r2, #20
    8362:	69b9      	ldr	r1, [r7, #24]
    8364:	4618      	mov	r0, r3
    8366:	f001 f991 	bl	968c <memcpy>
    }
  }
  /* Track the current number of pbufs current 'in-flight', in order to limit 
  the number of fragments that may be enqueued at any one time */
  ip_reass_pbufcount += clen;
    836a:	7cfb      	ldrb	r3, [r7, #19]
    836c:	b29a      	uxth	r2, r3
    836e:	4b46      	ldr	r3, [pc, #280]	; (8488 <ip_reass+0x298>)
    8370:	881b      	ldrh	r3, [r3, #0]
    8372:	4413      	add	r3, r2
    8374:	b29a      	uxth	r2, r3
    8376:	4b44      	ldr	r3, [pc, #272]	; (8488 <ip_reass+0x298>)
    8378:	801a      	strh	r2, [r3, #0]

  /* At this point, we have either created a new entry or pointing 
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  if ((IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0) {
    837a:	69bb      	ldr	r3, [r7, #24]
    837c:	88db      	ldrh	r3, [r3, #6]
    837e:	b29b      	uxth	r3, r3
    8380:	f003 0320 	and.w	r3, r3, #32
    8384:	2b00      	cmp	r3, #0
    8386:	d10c      	bne.n	83a2 <ip_reass+0x1b2>
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
    8388:	6a3b      	ldr	r3, [r7, #32]
    838a:	7f9b      	ldrb	r3, [r3, #30]
    838c:	f043 0301 	orr.w	r3, r3, #1
    8390:	b2da      	uxtb	r2, r3
    8392:	6a3b      	ldr	r3, [r7, #32]
    8394:	779a      	strb	r2, [r3, #30]
    ipr->datagram_len = offset + len;
    8396:	8afa      	ldrh	r2, [r7, #22]
    8398:	8abb      	ldrh	r3, [r7, #20]
    839a:	4413      	add	r3, r2
    839c:	b29a      	uxth	r2, r3
    839e:	6a3b      	ldr	r3, [r7, #32]
    83a0:	839a      	strh	r2, [r3, #28]
     ("ip_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  if (ip_reass_chain_frag_into_datagram_and_validate(ipr, p)) {
    83a2:	6879      	ldr	r1, [r7, #4]
    83a4:	6a38      	ldr	r0, [r7, #32]
    83a6:	f7ff fe1d 	bl	7fe4 <ip_reass_chain_frag_into_datagram_and_validate>
    83aa:	4603      	mov	r3, r0
    83ac:	2b00      	cmp	r3, #0
    83ae:	d058      	beq.n	8462 <ip_reass+0x272>
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
    83b0:	6a3b      	ldr	r3, [r7, #32]
    83b2:	8b9b      	ldrh	r3, [r3, #28]
    83b4:	3314      	adds	r3, #20
    83b6:	b29a      	uxth	r2, r3
    83b8:	6a3b      	ldr	r3, [r7, #32]
    83ba:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
    83bc:	6a3b      	ldr	r3, [r7, #32]
    83be:	685b      	ldr	r3, [r3, #4]
    83c0:	685b      	ldr	r3, [r3, #4]
    83c2:	681b      	ldr	r3, [r3, #0]
    83c4:	627b      	str	r3, [r7, #36]	; 0x24

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
    83c6:	6a3b      	ldr	r3, [r7, #32]
    83c8:	685b      	ldr	r3, [r3, #4]
    83ca:	685b      	ldr	r3, [r3, #4]
    83cc:	61bb      	str	r3, [r7, #24]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
    83ce:	6a3b      	ldr	r3, [r7, #32]
    83d0:	3308      	adds	r3, #8
    83d2:	2214      	movs	r2, #20
    83d4:	4619      	mov	r1, r3
    83d6:	69b8      	ldr	r0, [r7, #24]
    83d8:	f001 f958 	bl	968c <memcpy>
    IPH_LEN_SET(fraghdr, htons(ipr->datagram_len));
    83dc:	6a3b      	ldr	r3, [r7, #32]
    83de:	8b9b      	ldrh	r3, [r3, #28]
    83e0:	4618      	mov	r0, r3
    83e2:	f7fe fe79 	bl	70d8 <lwip_htons>
    83e6:	4603      	mov	r3, r0
    83e8:	461a      	mov	r2, r3
    83ea:	69bb      	ldr	r3, [r7, #24]
    83ec:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
    83ee:	69bb      	ldr	r3, [r7, #24]
    83f0:	2200      	movs	r2, #0
    83f2:	719a      	strb	r2, [r3, #6]
    83f4:	2200      	movs	r2, #0
    83f6:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
    83f8:	69bb      	ldr	r3, [r7, #24]
    83fa:	2200      	movs	r2, #0
    83fc:	729a      	strb	r2, [r3, #10]
    83fe:	2200      	movs	r2, #0
    8400:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set calculate the correct checksum? */
    IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    8402:	2114      	movs	r1, #20
    8404:	69b8      	ldr	r0, [r7, #24]
    8406:	f7ff fc39 	bl	7c7c <inet_chksum>
    840a:	4603      	mov	r3, r0
    840c:	461a      	mov	r2, r3
    840e:	69bb      	ldr	r3, [r7, #24]
    8410:	815a      	strh	r2, [r3, #10]

    p = ipr->p;
    8412:	6a3b      	ldr	r3, [r7, #32]
    8414:	685b      	ldr	r3, [r3, #4]
    8416:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while(r != NULL) {
    8418:	e00e      	b.n	8438 <ip_reass+0x248>
      iprh = (struct ip_reass_helper*)r->payload;
    841a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    841c:	685b      	ldr	r3, [r3, #4]
    841e:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeding fragment */
      pbuf_header(r, -IP_HLEN);
    8420:	f06f 0113 	mvn.w	r1, #19
    8424:	6a78      	ldr	r0, [r7, #36]	; 0x24
    8426:	f7fe fb9f 	bl	6b68 <pbuf_header>
      pbuf_cat(p, r);
    842a:	6a79      	ldr	r1, [r7, #36]	; 0x24
    842c:	6878      	ldr	r0, [r7, #4]
    842e:	f7fe fc8d 	bl	6d4c <pbuf_cat>
      r = iprh->next_pbuf;
    8432:	68fb      	ldr	r3, [r7, #12]
    8434:	681b      	ldr	r3, [r3, #0]
    8436:	627b      	str	r3, [r7, #36]	; 0x24
    IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));

    p = ipr->p;

    /* chain together the pbufs contained within the reass_data list. */
    while(r != NULL) {
    8438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    843a:	2b00      	cmp	r3, #0
    843c:	d1ed      	bne.n	841a <ip_reass+0x22a>
      pbuf_header(r, -IP_HLEN);
      pbuf_cat(p, r);
      r = iprh->next_pbuf;
    }
    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
    843e:	69f9      	ldr	r1, [r7, #28]
    8440:	6a38      	ldr	r0, [r7, #32]
    8442:	f7ff fdb1 	bl	7fa8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
    8446:	6878      	ldr	r0, [r7, #4]
    8448:	f7fe fc58 	bl	6cfc <pbuf_clen>
    844c:	4603      	mov	r3, r0
    844e:	4619      	mov	r1, r3
    8450:	4b0d      	ldr	r3, [pc, #52]	; (8488 <ip_reass+0x298>)
    8452:	881a      	ldrh	r2, [r3, #0]
    8454:	b28b      	uxth	r3, r1
    8456:	1ad3      	subs	r3, r2, r3
    8458:	b29a      	uxth	r2, r3
    845a:	4b0b      	ldr	r3, [pc, #44]	; (8488 <ip_reass+0x298>)
    845c:	801a      	strh	r2, [r3, #0]

    /* Return the pbuf chain */
    return p;
    845e:	687b      	ldr	r3, [r7, #4]
    8460:	e00b      	b.n	847a <ip_reass+0x28a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
    8462:	2300      	movs	r3, #0
    8464:	e009      	b.n	847a <ip_reass+0x28a>

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
    8466:	4b07      	ldr	r3, [pc, #28]	; (8484 <ip_reass+0x294>)
    8468:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    846a:	3301      	adds	r3, #1
    846c:	b29a      	uxth	r2, r3
    846e:	4b05      	ldr	r3, [pc, #20]	; (8484 <ip_reass+0x294>)
    8470:	86da      	strh	r2, [r3, #54]	; 0x36
  pbuf_free(p);
    8472:	6878      	ldr	r0, [r7, #4]
    8474:	f7fe fbe6 	bl	6c44 <pbuf_free>
  return NULL;
    8478:	2300      	movs	r3, #0
}
    847a:	4618      	mov	r0, r3
    847c:	372c      	adds	r7, #44	; 0x2c
    847e:	46bd      	mov	sp, r7
    8480:	bd90      	pop	{r4, r7, pc}
    8482:	bf00      	nop
    8484:	10001978 	.word	0x10001978
    8488:	10001230 	.word	0x10001230
    848c:	1000122c 	.word	0x1000122c

00008490 <ip_frag_alloc_pbuf_custom_ref>:

#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
    8490:	b580      	push	{r7, lr}
    8492:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
    8494:	2006      	movs	r0, #6
    8496:	f7fa f8f7 	bl	2688 <memp_malloc>
    849a:	4603      	mov	r3, r0
}
    849c:	4618      	mov	r0, r3
    849e:	bd80      	pop	{r7, pc}

000084a0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
    84a0:	b580      	push	{r7, lr}
    84a2:	b082      	sub	sp, #8
    84a4:	af00      	add	r7, sp, #0
    84a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
  memp_free(MEMP_FRAG_PBUF, p);
    84a8:	6879      	ldr	r1, [r7, #4]
    84aa:	2006      	movs	r0, #6
    84ac:	f7fa f960 	bl	2770 <memp_free>
}
    84b0:	bf00      	nop
    84b2:	3708      	adds	r7, #8
    84b4:	46bd      	mov	sp, r7
    84b6:	bd80      	pop	{r7, pc}

000084b8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
    84b8:	b580      	push	{r7, lr}
    84ba:	b084      	sub	sp, #16
    84bc:	af00      	add	r7, sp, #0
    84be:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
    84c0:	687b      	ldr	r3, [r7, #4]
    84c2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
    84c4:	68fb      	ldr	r3, [r7, #12]
    84c6:	695b      	ldr	r3, [r3, #20]
    84c8:	2b00      	cmp	r3, #0
    84ca:	d004      	beq.n	84d6 <ipfrag_free_pbuf_custom+0x1e>
    pbuf_free(pcr->original);
    84cc:	68fb      	ldr	r3, [r7, #12]
    84ce:	695b      	ldr	r3, [r3, #20]
    84d0:	4618      	mov	r0, r3
    84d2:	f7fe fbb7 	bl	6c44 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
    84d6:	68f8      	ldr	r0, [r7, #12]
    84d8:	f7ff ffe2 	bl	84a0 <ip_frag_free_pbuf_custom_ref>
}
    84dc:	bf00      	nop
    84de:	3710      	adds	r7, #16
    84e0:	46bd      	mov	sp, r7
    84e2:	bd80      	pop	{r7, pc}

000084e4 <ip_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t 
ip_frag(struct pbuf *p, struct netif *netif, ip_addr_t *dest)
{
    84e4:	b580      	push	{r7, lr}
    84e6:	b092      	sub	sp, #72	; 0x48
    84e8:	af02      	add	r7, sp, #8
    84ea:	60f8      	str	r0, [r7, #12]
    84ec:	60b9      	str	r1, [r7, #8]
    84ee:	607a      	str	r2, [r7, #4]
  struct ip_hdr *original_iphdr;
#endif
  struct ip_hdr *iphdr;
  u16_t nfb;
  u16_t left, cop;
  u16_t mtu = netif->mtu;
    84f0:	68bb      	ldr	r3, [r7, #8]
    84f2:	8c1b      	ldrh	r3, [r3, #32]
    84f4:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t ofo, omf;
  u16_t last;
  u16_t poff = IP_HLEN;
    84f6:	2314      	movs	r3, #20
    84f8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t tmp;
#if !IP_FRAG_USES_STATIC_BUF && !LWIP_NETIF_TX_SINGLE_PBUF
  u16_t newpbuflen = 0;
    84fa:	2300      	movs	r3, #0
    84fc:	86fb      	strh	r3, [r7, #54]	; 0x36

  /* Copy the IP header in it */
  iphdr = (struct ip_hdr *)rambuf->payload;
  SMEMCPY(iphdr, p->payload, IP_HLEN);
#else /* IP_FRAG_USES_STATIC_BUF */
  original_iphdr = (struct ip_hdr *)p->payload;
    84fe:	68fb      	ldr	r3, [r7, #12]
    8500:	685b      	ldr	r3, [r3, #4]
    8502:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
    8504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8506:	62bb      	str	r3, [r7, #40]	; 0x28
#endif /* IP_FRAG_USES_STATIC_BUF */

  /* Save original offset */
  tmp = ntohs(IPH_OFFSET(iphdr));
    8508:	6abb      	ldr	r3, [r7, #40]	; 0x28
    850a:	88db      	ldrh	r3, [r3, #6]
    850c:	b29b      	uxth	r3, r3
    850e:	4618      	mov	r0, r3
    8510:	f7fe fdf6 	bl	7100 <lwip_ntohs>
    8514:	4603      	mov	r3, r0
    8516:	873b      	strh	r3, [r7, #56]	; 0x38
  ofo = tmp & IP_OFFMASK;
    8518:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
    851a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    851e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  omf = tmp & IP_MF;
    8520:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
    8522:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    8526:	84fb      	strh	r3, [r7, #38]	; 0x26

  left = p->tot_len - IP_HLEN;
    8528:	68fb      	ldr	r3, [r7, #12]
    852a:	891b      	ldrh	r3, [r3, #8]
    852c:	3b14      	subs	r3, #20
    852e:	87fb      	strh	r3, [r7, #62]	; 0x3e

  nfb = (mtu - IP_HLEN) / 8;
    8530:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
    8532:	3b14      	subs	r3, #20
    8534:	2b00      	cmp	r3, #0
    8536:	da00      	bge.n	853a <ip_frag+0x56>
    8538:	3307      	adds	r3, #7
    853a:	10db      	asrs	r3, r3, #3
    853c:	84bb      	strh	r3, [r7, #36]	; 0x24

  while (left) {
    853e:	e0ca      	b.n	86d6 <ip_frag+0x1f2>
    last = (left <= mtu - IP_HLEN);
    8540:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
    8542:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
    8544:	3b14      	subs	r3, #20
    8546:	429a      	cmp	r2, r3
    8548:	bfd4      	ite	le
    854a:	2301      	movle	r3, #1
    854c:	2300      	movgt	r3, #0
    854e:	b2db      	uxtb	r3, r3
    8550:	847b      	strh	r3, [r7, #34]	; 0x22

    /* Set new offset and MF flag */
    tmp = omf | (IP_OFFMASK & (ofo));
    8552:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
    8554:	f3c3 030c 	ubfx	r3, r3, #0, #13
    8558:	b29a      	uxth	r2, r3
    855a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    855c:	4313      	orrs	r3, r2
    855e:	873b      	strh	r3, [r7, #56]	; 0x38
    if (!last) {
    8560:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    8562:	2b00      	cmp	r3, #0
    8564:	d103      	bne.n	856e <ip_frag+0x8a>
      tmp = tmp | IP_MF;
    8566:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
    8568:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    856c:	873b      	strh	r3, [r7, #56]	; 0x38
    }

    /* Fill this fragment */
    cop = last ? left : nfb * 8;
    856e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    8570:	2b00      	cmp	r3, #0
    8572:	d103      	bne.n	857c <ip_frag+0x98>
    8574:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    8576:	00db      	lsls	r3, r3, #3
    8578:	b29b      	uxth	r3, r3
    857a:	e000      	b.n	857e <ip_frag+0x9a>
    857c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    857e:	843b      	strh	r3, [r7, #32]
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    8580:	2200      	movs	r2, #0
    8582:	2114      	movs	r1, #20
    8584:	2002      	movs	r0, #2
    8586:	f7fe f937 	bl	67f8 <pbuf_alloc>
    858a:	61f8      	str	r0, [r7, #28]
    if (rambuf == NULL) {
    858c:	69fb      	ldr	r3, [r7, #28]
    858e:	2b00      	cmp	r3, #0
    8590:	d102      	bne.n	8598 <ip_frag+0xb4>
      return ERR_MEM;
    8592:	f04f 33ff 	mov.w	r3, #4294967295
    8596:	e0a3      	b.n	86e0 <ip_frag+0x1fc>
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
    8598:	69fb      	ldr	r3, [r7, #28]
    859a:	685b      	ldr	r3, [r3, #4]
    859c:	2214      	movs	r2, #20
    859e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    85a0:	4618      	mov	r0, r3
    85a2:	f001 f873 	bl	968c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
    85a6:	69fb      	ldr	r3, [r7, #28]
    85a8:	685b      	ldr	r3, [r3, #4]
    85aa:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Can just adjust p directly for needed offset. */
    p->payload = (u8_t *)p->payload + poff;
    85ac:	68fb      	ldr	r3, [r7, #12]
    85ae:	685a      	ldr	r2, [r3, #4]
    85b0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    85b2:	441a      	add	r2, r3
    85b4:	68fb      	ldr	r3, [r7, #12]
    85b6:	605a      	str	r2, [r3, #4]
    p->len -= poff;
    85b8:	68fb      	ldr	r3, [r7, #12]
    85ba:	895a      	ldrh	r2, [r3, #10]
    85bc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    85be:	1ad3      	subs	r3, r2, r3
    85c0:	b29a      	uxth	r2, r3
    85c2:	68fb      	ldr	r3, [r7, #12]
    85c4:	815a      	strh	r2, [r3, #10]

    left_to_copy = cop;
    85c6:	8c3b      	ldrh	r3, [r7, #32]
    85c8:	86bb      	strh	r3, [r7, #52]	; 0x34
    while (left_to_copy) {
    85ca:	e049      	b.n	8660 <ip_frag+0x17c>
      struct pbuf_custom_ref *pcr;
      newpbuflen = (left_to_copy < p->len) ? left_to_copy : p->len;
    85cc:	68fb      	ldr	r3, [r7, #12]
    85ce:	895a      	ldrh	r2, [r3, #10]
    85d0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
    85d2:	4293      	cmp	r3, r2
    85d4:	bf28      	it	cs
    85d6:	4613      	movcs	r3, r2
    85d8:	86fb      	strh	r3, [r7, #54]	; 0x36
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
    85da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
    85dc:	2b00      	cmp	r3, #0
    85de:	d103      	bne.n	85e8 <ip_frag+0x104>
        p = p->next;
    85e0:	68fb      	ldr	r3, [r7, #12]
    85e2:	681b      	ldr	r3, [r3, #0]
    85e4:	60fb      	str	r3, [r7, #12]
        continue;
    85e6:	e03b      	b.n	8660 <ip_frag+0x17c>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
    85e8:	f7ff ff52 	bl	8490 <ip_frag_alloc_pbuf_custom_ref>
    85ec:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
    85ee:	69bb      	ldr	r3, [r7, #24]
    85f0:	2b00      	cmp	r3, #0
    85f2:	d105      	bne.n	8600 <ip_frag+0x11c>
        pbuf_free(rambuf);
    85f4:	69f8      	ldr	r0, [r7, #28]
    85f6:	f7fe fb25 	bl	6c44 <pbuf_free>
        return ERR_MEM;
    85fa:	f04f 33ff 	mov.w	r3, #4294967295
    85fe:	e06f      	b.n	86e0 <ip_frag+0x1fc>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc, p->payload, newpbuflen);
    8600:	69b8      	ldr	r0, [r7, #24]
    8602:	68fb      	ldr	r3, [r7, #12]
    8604:	685b      	ldr	r3, [r3, #4]
    8606:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
    8608:	8efa      	ldrh	r2, [r7, #54]	; 0x36
    860a:	9201      	str	r2, [sp, #4]
    860c:	9300      	str	r3, [sp, #0]
    860e:	4603      	mov	r3, r0
    8610:	2202      	movs	r2, #2
    8612:	2003      	movs	r0, #3
    8614:	f7fe f9e8 	bl	69e8 <pbuf_alloced_custom>
    8618:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
    861a:	697b      	ldr	r3, [r7, #20]
    861c:	2b00      	cmp	r3, #0
    861e:	d108      	bne.n	8632 <ip_frag+0x14e>
        ip_frag_free_pbuf_custom_ref(pcr);
    8620:	69b8      	ldr	r0, [r7, #24]
    8622:	f7ff ff3d 	bl	84a0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
    8626:	69f8      	ldr	r0, [r7, #28]
    8628:	f7fe fb0c 	bl	6c44 <pbuf_free>
        return ERR_MEM;
    862c:	f04f 33ff 	mov.w	r3, #4294967295
    8630:	e056      	b.n	86e0 <ip_frag+0x1fc>
      }
      pbuf_ref(p);
    8632:	68f8      	ldr	r0, [r7, #12]
    8634:	f7fe fb78 	bl	6d28 <pbuf_ref>
      pcr->original = p;
    8638:	69bb      	ldr	r3, [r7, #24]
    863a:	68fa      	ldr	r2, [r7, #12]
    863c:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
    863e:	69bb      	ldr	r3, [r7, #24]
    8640:	4a29      	ldr	r2, [pc, #164]	; (86e8 <ip_frag+0x204>)
    8642:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
    8644:	6979      	ldr	r1, [r7, #20]
    8646:	69f8      	ldr	r0, [r7, #28]
    8648:	f7fe fb80 	bl	6d4c <pbuf_cat>
      left_to_copy -= newpbuflen;
    864c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
    864e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
    8650:	1ad3      	subs	r3, r2, r3
    8652:	86bb      	strh	r3, [r7, #52]	; 0x34
      if (left_to_copy) {
    8654:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
    8656:	2b00      	cmp	r3, #0
    8658:	d002      	beq.n	8660 <ip_frag+0x17c>
        p = p->next;
    865a:	68fb      	ldr	r3, [r7, #12]
    865c:	681b      	ldr	r3, [r3, #0]
    865e:	60fb      	str	r3, [r7, #12]
    /* Can just adjust p directly for needed offset. */
    p->payload = (u8_t *)p->payload + poff;
    p->len -= poff;

    left_to_copy = cop;
    while (left_to_copy) {
    8660:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
    8662:	2b00      	cmp	r3, #0
    8664:	d1b2      	bne.n	85cc <ip_frag+0xe8>
      left_to_copy -= newpbuflen;
      if (left_to_copy) {
        p = p->next;
      }
    }
    poff = newpbuflen;
    8666:	8efb      	ldrh	r3, [r7, #54]	; 0x36
    8668:	877b      	strh	r3, [r7, #58]	; 0x3a
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
#endif /* IP_FRAG_USES_STATIC_BUF */

    /* Correct header */
    IPH_OFFSET_SET(iphdr, htons(tmp));
    866a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
    866c:	4618      	mov	r0, r3
    866e:	f7fe fd33 	bl	70d8 <lwip_htons>
    8672:	4603      	mov	r3, r0
    8674:	461a      	mov	r2, r3
    8676:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8678:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, htons(cop + IP_HLEN));
    867a:	8c3b      	ldrh	r3, [r7, #32]
    867c:	3314      	adds	r3, #20
    867e:	b29b      	uxth	r3, r3
    8680:	4618      	mov	r0, r3
    8682:	f7fe fd29 	bl	70d8 <lwip_htons>
    8686:	4603      	mov	r3, r0
    8688:	461a      	mov	r2, r3
    868a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    868c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
    868e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8690:	2200      	movs	r2, #0
    8692:	729a      	strb	r2, [r3, #10]
    8694:	2200      	movs	r2, #0
    8696:	72da      	strb	r2, [r3, #11]
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
    8698:	2114      	movs	r1, #20
    869a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    869c:	f7ff faee 	bl	7c7c <inet_chksum>
    86a0:	4603      	mov	r3, r0
    86a2:	461a      	mov	r2, r3
    86a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    86a6:	815a      	strh	r2, [r3, #10]
    }
#else /* IP_FRAG_USES_STATIC_BUF */
    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
    86a8:	68bb      	ldr	r3, [r7, #8]
    86aa:	695b      	ldr	r3, [r3, #20]
    86ac:	687a      	ldr	r2, [r7, #4]
    86ae:	69f9      	ldr	r1, [r7, #28]
    86b0:	68b8      	ldr	r0, [r7, #8]
    86b2:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
    86b4:	4b0d      	ldr	r3, [pc, #52]	; (86ec <ip_frag+0x208>)
    86b6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    86b8:	3301      	adds	r3, #1
    86ba:	b29a      	uxth	r2, r3
    86bc:	4b0b      	ldr	r3, [pc, #44]	; (86ec <ip_frag+0x208>)
    86be:	861a      	strh	r2, [r3, #48]	; 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */
    
    pbuf_free(rambuf);
    86c0:	69f8      	ldr	r0, [r7, #28]
    86c2:	f7fe fabf 	bl	6c44 <pbuf_free>
#endif /* IP_FRAG_USES_STATIC_BUF */
    left -= cop;
    86c6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
    86c8:	8c3b      	ldrh	r3, [r7, #32]
    86ca:	1ad3      	subs	r3, r2, r3
    86cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
    ofo += nfb;
    86ce:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
    86d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    86d2:	4413      	add	r3, r2
    86d4:	87bb      	strh	r3, [r7, #60]	; 0x3c

  left = p->tot_len - IP_HLEN;

  nfb = (mtu - IP_HLEN) / 8;

  while (left) {
    86d6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    86d8:	2b00      	cmp	r3, #0
    86da:	f47f af31 	bne.w	8540 <ip_frag+0x5c>
  }
#if IP_FRAG_USES_STATIC_BUF
  pbuf_free(rambuf);
#endif /* IP_FRAG_USES_STATIC_BUF */
  snmp_inc_ipfragoks();
  return ERR_OK;
    86de:	2300      	movs	r3, #0
}
    86e0:	4618      	mov	r0, r3
    86e2:	3740      	adds	r7, #64	; 0x40
    86e4:	46bd      	mov	sp, r7
    86e6:	bd80      	pop	{r7, pc}
    86e8:	000084b9 	.word	0x000084b9
    86ec:	10001978 	.word	0x10001978

000086f0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the ip header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
    86f0:	b580      	push	{r7, lr}
    86f2:	b08c      	sub	sp, #48	; 0x30
    86f4:	af04      	add	r7, sp, #16
    86f6:	6078      	str	r0, [r7, #4]
    86f8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_DEBUG */
  struct icmp_echo_hdr *iecho;
  struct ip_hdr *iphdr;
  s16_t hlen;

  ICMP_STATS_INC(icmp.recv);
    86fa:	4ba1      	ldr	r3, [pc, #644]	; (8980 <icmp_input+0x290>)
    86fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    8700:	3301      	adds	r3, #1
    8702:	b29a      	uxth	r2, r3
    8704:	4b9e      	ldr	r3, [pc, #632]	; (8980 <icmp_input+0x290>)
    8706:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  snmp_inc_icmpinmsgs();


  iphdr = (struct ip_hdr *)p->payload;
    870a:	687b      	ldr	r3, [r7, #4]
    870c:	685b      	ldr	r3, [r3, #4]
    870e:	61fb      	str	r3, [r7, #28]
  hlen = IPH_HL(iphdr) * 4;
    8710:	69fb      	ldr	r3, [r7, #28]
    8712:	881b      	ldrh	r3, [r3, #0]
    8714:	b29b      	uxth	r3, r3
    8716:	4618      	mov	r0, r3
    8718:	f7fe fcf2 	bl	7100 <lwip_ntohs>
    871c:	4603      	mov	r3, r0
    871e:	0a1b      	lsrs	r3, r3, #8
    8720:	b29b      	uxth	r3, r3
    8722:	f003 030f 	and.w	r3, r3, #15
    8726:	b29b      	uxth	r3, r3
    8728:	009b      	lsls	r3, r3, #2
    872a:	b29b      	uxth	r3, r3
    872c:	82fb      	strh	r3, [r7, #22]
  if (pbuf_header(p, -hlen) || (p->tot_len < sizeof(u16_t)*2)) {
    872e:	8afb      	ldrh	r3, [r7, #22]
    8730:	425b      	negs	r3, r3
    8732:	b29b      	uxth	r3, r3
    8734:	b21b      	sxth	r3, r3
    8736:	4619      	mov	r1, r3
    8738:	6878      	ldr	r0, [r7, #4]
    873a:	f7fe fa15 	bl	6b68 <pbuf_header>
    873e:	4603      	mov	r3, r0
    8740:	2b00      	cmp	r3, #0
    8742:	f040 80f9 	bne.w	8938 <icmp_input+0x248>
    8746:	687b      	ldr	r3, [r7, #4]
    8748:	891b      	ldrh	r3, [r3, #8]
    874a:	2b03      	cmp	r3, #3
    874c:	f240 80f4 	bls.w	8938 <icmp_input+0x248>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
    8750:	687b      	ldr	r3, [r7, #4]
    8752:	685b      	ldr	r3, [r3, #4]
    8754:	781b      	ldrb	r3, [r3, #0]
    8756:	757b      	strb	r3, [r7, #21]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
    8758:	7d7b      	ldrb	r3, [r7, #21]
    875a:	2b00      	cmp	r3, #0
    875c:	f000 80e4 	beq.w	8928 <icmp_input+0x238>
    8760:	2b08      	cmp	r3, #8
    8762:	f040 80d0 	bne.w	8906 <icmp_input+0x216>
       (as obviously, an echo request has been sent, too). */
    break; 
  case ICMP_ECHO:
#if !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
    {
      int accepted = 1;
    8766:	2301      	movs	r3, #1
    8768:	61bb      	str	r3, [r7, #24]
#if !LWIP_MULTICAST_PING
      /* multicast destination address? */
      if (ip_addr_ismulticast(&current_iphdr_dest)) {
    876a:	4b86      	ldr	r3, [pc, #536]	; (8984 <icmp_input+0x294>)
    876c:	681b      	ldr	r3, [r3, #0]
    876e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8772:	2be0      	cmp	r3, #224	; 0xe0
    8774:	d101      	bne.n	877a <icmp_input+0x8a>
        accepted = 0;
    8776:	2300      	movs	r3, #0
    8778:	61bb      	str	r3, [r7, #24]
      }
#endif /* LWIP_MULTICAST_PING */
#if !LWIP_BROADCAST_PING
      /* broadcast destination address? */
      if (ip_addr_isbroadcast(&current_iphdr_dest, inp)) {
    877a:	4b82      	ldr	r3, [pc, #520]	; (8984 <icmp_input+0x294>)
    877c:	681b      	ldr	r3, [r3, #0]
    877e:	6839      	ldr	r1, [r7, #0]
    8780:	4618      	mov	r0, r3
    8782:	f7ff fad7 	bl	7d34 <ip4_addr_isbroadcast>
    8786:	4603      	mov	r3, r0
    8788:	2b00      	cmp	r3, #0
    878a:	d001      	beq.n	8790 <icmp_input+0xa0>
        accepted = 0;
    878c:	2300      	movs	r3, #0
    878e:	61bb      	str	r3, [r7, #24]
      }
#endif /* LWIP_BROADCAST_PING */
      /* broadcast or multicast destination address not acceptd? */
      if (!accepted) {
    8790:	69bb      	ldr	r3, [r7, #24]
    8792:	2b00      	cmp	r3, #0
    8794:	d10b      	bne.n	87ae <icmp_input+0xbe>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast or broadcast pings\n"));
        ICMP_STATS_INC(icmp.err);
    8796:	4b7a      	ldr	r3, [pc, #488]	; (8980 <icmp_input+0x290>)
    8798:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
    879c:	3301      	adds	r3, #1
    879e:	b29a      	uxth	r2, r3
    87a0:	4b77      	ldr	r3, [pc, #476]	; (8980 <icmp_input+0x290>)
    87a2:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
        pbuf_free(p);
    87a6:	6878      	ldr	r0, [r7, #4]
    87a8:	f7fe fa4c 	bl	6c44 <pbuf_free>
        return;
    87ac:	e0e5      	b.n	897a <icmp_input+0x28a>
      }
    }
#endif /* !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
    87ae:	687b      	ldr	r3, [r7, #4]
    87b0:	891b      	ldrh	r3, [r3, #8]
    87b2:	2b07      	cmp	r3, #7
    87b4:	f240 80bf 	bls.w	8936 <icmp_input+0x246>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
    }
    if (inet_chksum_pbuf(p) != 0) {
    87b8:	6878      	ldr	r0, [r7, #4]
    87ba:	f7ff fa71 	bl	7ca0 <inet_chksum_pbuf>
    87be:	4603      	mov	r3, r0
    87c0:	2b00      	cmp	r3, #0
    87c2:	d00b      	beq.n	87dc <icmp_input+0xec>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
      pbuf_free(p);
    87c4:	6878      	ldr	r0, [r7, #4]
    87c6:	f7fe fa3d 	bl	6c44 <pbuf_free>
      ICMP_STATS_INC(icmp.chkerr);
    87ca:	4b6d      	ldr	r3, [pc, #436]	; (8980 <icmp_input+0x290>)
    87cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
    87d0:	3301      	adds	r3, #1
    87d2:	b29a      	uxth	r2, r3
    87d4:	4b6a      	ldr	r3, [pc, #424]	; (8980 <icmp_input+0x290>)
    87d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
      snmp_inc_icmpinerrors();
      return;
    87da:	e0ce      	b.n	897a <icmp_input+0x28a>
    }
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
    87dc:	2124      	movs	r1, #36	; 0x24
    87de:	6878      	ldr	r0, [r7, #4]
    87e0:	f7fe f9c2 	bl	6b68 <pbuf_header>
    87e4:	4603      	mov	r3, r0
    87e6:	2b00      	cmp	r3, #0
    87e8:	d032      	beq.n	8850 <icmp_input+0x160>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* switch p->payload to ip header */
      if (pbuf_header(p, hlen)) {
    87ea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
    87ee:	4619      	mov	r1, r3
    87f0:	6878      	ldr	r0, [r7, #4]
    87f2:	f7fe f9b9 	bl	6b68 <pbuf_header>
    87f6:	4603      	mov	r3, r0
    87f8:	2b00      	cmp	r3, #0
    87fa:	f040 80a9 	bne.w	8950 <icmp_input+0x260>
        LWIP_ASSERT("icmp_input: moving p->payload to ip header failed\n", 0);
        goto memerr;
      }
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
    87fe:	687b      	ldr	r3, [r7, #4]
    8800:	891b      	ldrh	r3, [r3, #8]
    8802:	2200      	movs	r2, #0
    8804:	4619      	mov	r1, r3
    8806:	2002      	movs	r0, #2
    8808:	f7fd fff6 	bl	67f8 <pbuf_alloc>
    880c:	6138      	str	r0, [r7, #16]
      if (r == NULL) {
    880e:	693b      	ldr	r3, [r7, #16]
    8810:	2b00      	cmp	r3, #0
    8812:	f000 809f 	beq.w	8954 <icmp_input+0x264>
        goto memerr;
      }
      LWIP_ASSERT("check that first pbuf can hold struct the ICMP header",
                  (r->len >= hlen + sizeof(struct icmp_echo_hdr)));
      /* copy the whole packet including ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
    8816:	6879      	ldr	r1, [r7, #4]
    8818:	6938      	ldr	r0, [r7, #16]
    881a:	f7fe fac5 	bl	6da8 <pbuf_copy>
    881e:	4603      	mov	r3, r0
    8820:	2b00      	cmp	r3, #0
    8822:	f040 8099 	bne.w	8958 <icmp_input+0x268>
        LWIP_ASSERT("icmp_input: copying to new pbuf failed\n", 0);
        goto memerr;
      }
      iphdr = (struct ip_hdr *)r->payload;
    8826:	693b      	ldr	r3, [r7, #16]
    8828:	685b      	ldr	r3, [r3, #4]
    882a:	61fb      	str	r3, [r7, #28]
      /* switch r->payload back to icmp header */
      if (pbuf_header(r, -hlen)) {
    882c:	8afb      	ldrh	r3, [r7, #22]
    882e:	425b      	negs	r3, r3
    8830:	b29b      	uxth	r3, r3
    8832:	b21b      	sxth	r3, r3
    8834:	4619      	mov	r1, r3
    8836:	6938      	ldr	r0, [r7, #16]
    8838:	f7fe f996 	bl	6b68 <pbuf_header>
    883c:	4603      	mov	r3, r0
    883e:	2b00      	cmp	r3, #0
    8840:	f040 808c 	bne.w	895c <icmp_input+0x26c>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
        goto memerr;
      }
      /* free the original p */
      pbuf_free(p);
    8844:	6878      	ldr	r0, [r7, #4]
    8846:	f7fe f9fd 	bl	6c44 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
    884a:	693b      	ldr	r3, [r7, #16]
    884c:	607b      	str	r3, [r7, #4]
    884e:	e007      	b.n	8860 <icmp_input+0x170>
    } else {
      /* restore p->payload to point to icmp header */
      if (pbuf_header(p, -(s16_t)(PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
    8850:	f06f 0123 	mvn.w	r1, #35	; 0x23
    8854:	6878      	ldr	r0, [r7, #4]
    8856:	f7fe f987 	bl	6b68 <pbuf_header>
    885a:	4603      	mov	r3, r0
    885c:	2b00      	cmp	r3, #0
    885e:	d17f      	bne.n	8960 <icmp_input+0x270>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
    8860:	687b      	ldr	r3, [r7, #4]
    8862:	685b      	ldr	r3, [r3, #4]
    8864:	60fb      	str	r3, [r7, #12]
    ip_addr_copy(iphdr->src, *ip_current_dest_addr());
    8866:	4b47      	ldr	r3, [pc, #284]	; (8984 <icmp_input+0x294>)
    8868:	681a      	ldr	r2, [r3, #0]
    886a:	69fb      	ldr	r3, [r7, #28]
    886c:	60da      	str	r2, [r3, #12]
    ip_addr_copy(iphdr->dest, *ip_current_src_addr());
    886e:	4b46      	ldr	r3, [pc, #280]	; (8988 <icmp_input+0x298>)
    8870:	681a      	ldr	r2, [r3, #0]
    8872:	69fb      	ldr	r3, [r7, #28]
    8874:	611a      	str	r2, [r3, #16]
    ICMPH_TYPE_SET(iecho, ICMP_ER);
    8876:	68fb      	ldr	r3, [r7, #12]
    8878:	2200      	movs	r2, #0
    887a:	701a      	strb	r2, [r3, #0]
    /* adjust the checksum */
    if (iecho->chksum >= PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
    887c:	68fb      	ldr	r3, [r7, #12]
    887e:	885b      	ldrh	r3, [r3, #2]
    8880:	b29b      	uxth	r3, r3
    8882:	f64f 72f6 	movw	r2, #65526	; 0xfff6
    8886:	4293      	cmp	r3, r2
    8888:	d907      	bls.n	889a <icmp_input+0x1aa>
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
    888a:	68fb      	ldr	r3, [r7, #12]
    888c:	885b      	ldrh	r3, [r3, #2]
    888e:	b29b      	uxth	r3, r3
    8890:	3309      	adds	r3, #9
    8892:	b29a      	uxth	r2, r3
    8894:	68fb      	ldr	r3, [r7, #12]
    8896:	805a      	strh	r2, [r3, #2]
    8898:	e006      	b.n	88a8 <icmp_input+0x1b8>
    } else {
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
    889a:	68fb      	ldr	r3, [r7, #12]
    889c:	885b      	ldrh	r3, [r3, #2]
    889e:	b29b      	uxth	r3, r3
    88a0:	3308      	adds	r3, #8
    88a2:	b29a      	uxth	r2, r3
    88a4:	68fb      	ldr	r3, [r7, #12]
    88a6:	805a      	strh	r2, [r3, #2]
    }

    /* Set the correct TTL and recalculate the header checksum. */
    IPH_TTL_SET(iphdr, ICMP_TTL);
    88a8:	69fb      	ldr	r3, [r7, #28]
    88aa:	22ff      	movs	r2, #255	; 0xff
    88ac:	721a      	strb	r2, [r3, #8]
    IPH_CHKSUM_SET(iphdr, 0);
    88ae:	69fb      	ldr	r3, [r7, #28]
    88b0:	2200      	movs	r2, #0
    88b2:	729a      	strb	r2, [r3, #10]
    88b4:	2200      	movs	r2, #0
    88b6:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
    88b8:	2114      	movs	r1, #20
    88ba:	69f8      	ldr	r0, [r7, #28]
    88bc:	f7ff f9de 	bl	7c7c <inet_chksum>
    88c0:	4603      	mov	r3, r0
    88c2:	461a      	mov	r2, r3
    88c4:	69fb      	ldr	r3, [r7, #28]
    88c6:	815a      	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    ICMP_STATS_INC(icmp.xmit);
    88c8:	4b2d      	ldr	r3, [pc, #180]	; (8980 <icmp_input+0x290>)
    88ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
    88ce:	3301      	adds	r3, #1
    88d0:	b29a      	uxth	r2, r3
    88d2:	4b2b      	ldr	r3, [pc, #172]	; (8980 <icmp_input+0x290>)
    88d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* increase number of messages attempted to send */
    snmp_inc_icmpoutmsgs();
    /* increase number of echo replies attempted to send */
    snmp_inc_icmpoutechoreps();

    if(pbuf_header(p, hlen)) {
    88d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
    88dc:	4619      	mov	r1, r3
    88de:	6878      	ldr	r0, [r7, #4]
    88e0:	f7fe f942 	bl	6b68 <pbuf_header>
    88e4:	4603      	mov	r3, r0
    88e6:	2b00      	cmp	r3, #0
    88e8:	d120      	bne.n	892c <icmp_input+0x23c>
      LWIP_ASSERT("Can't move over header in packet", 0);
    } else {
      err_t ret;
      /* send an ICMP packet, src addr is the dest addr of the curren packet */
      ret = ip_output_if(p, ip_current_dest_addr(), IP_HDRINCL,
    88ea:	683b      	ldr	r3, [r7, #0]
    88ec:	9302      	str	r3, [sp, #8]
    88ee:	2301      	movs	r3, #1
    88f0:	9301      	str	r3, [sp, #4]
    88f2:	2300      	movs	r3, #0
    88f4:	9300      	str	r3, [sp, #0]
    88f6:	23ff      	movs	r3, #255	; 0xff
    88f8:	2200      	movs	r2, #0
    88fa:	4922      	ldr	r1, [pc, #136]	; (8984 <icmp_input+0x294>)
    88fc:	6878      	ldr	r0, [r7, #4]
    88fe:	f7fe ffbf 	bl	7880 <ip_output_if>
    8902:	60b8      	str	r0, [r7, #8]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %c.\n", ret));
      }
    }
    break;
    8904:	e012      	b.n	892c <icmp_input+0x23c>
  default:
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n", 
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    8906:	4b1e      	ldr	r3, [pc, #120]	; (8980 <icmp_input+0x290>)
    8908:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
    890c:	3301      	adds	r3, #1
    890e:	b29a      	uxth	r2, r3
    8910:	4b1b      	ldr	r3, [pc, #108]	; (8980 <icmp_input+0x290>)
    8912:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
    ICMP_STATS_INC(icmp.drop);
    8916:	4b1a      	ldr	r3, [pc, #104]	; (8980 <icmp_input+0x290>)
    8918:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    891c:	3301      	adds	r3, #1
    891e:	b29a      	uxth	r2, r3
    8920:	4b17      	ldr	r3, [pc, #92]	; (8980 <icmp_input+0x290>)
    8922:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    8926:	e002      	b.n	892e <icmp_input+0x23e>
#endif /* LWIP_DEBUG */
  switch (type) {
  case ICMP_ER:
    /* This is OK, echo reply might have been parsed by a raw PCB
       (as obviously, an echo request has been sent, too). */
    break; 
    8928:	bf00      	nop
    892a:	e000      	b.n	892e <icmp_input+0x23e>
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %c.\n", ret));
      }
    }
    break;
    892c:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n", 
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
    892e:	6878      	ldr	r0, [r7, #4]
    8930:	f7fe f988 	bl	6c44 <pbuf_free>
  return;
    8934:	e021      	b.n	897a <icmp_input+0x28a>
    }
#endif /* !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
    8936:	bf00      	nop
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
  return;
lenerr:
  pbuf_free(p);
    8938:	6878      	ldr	r0, [r7, #4]
    893a:	f7fe f983 	bl	6c44 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
    893e:	4b10      	ldr	r3, [pc, #64]	; (8980 <icmp_input+0x290>)
    8940:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
    8944:	3301      	adds	r3, #1
    8946:	b29a      	uxth	r2, r3
    8948:	4b0d      	ldr	r3, [pc, #52]	; (8980 <icmp_input+0x290>)
    894a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  snmp_inc_icmpinerrors();
  return;
    894e:	e014      	b.n	897a <icmp_input+0x28a>
       */
      struct pbuf *r;
      /* switch p->payload to ip header */
      if (pbuf_header(p, hlen)) {
        LWIP_ASSERT("icmp_input: moving p->payload to ip header failed\n", 0);
        goto memerr;
    8950:	bf00      	nop
    8952:	e006      	b.n	8962 <icmp_input+0x272>
      }
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
      if (r == NULL) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto memerr;
    8954:	bf00      	nop
    8956:	e004      	b.n	8962 <icmp_input+0x272>
      LWIP_ASSERT("check that first pbuf can hold struct the ICMP header",
                  (r->len >= hlen + sizeof(struct icmp_echo_hdr)));
      /* copy the whole packet including ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
        LWIP_ASSERT("icmp_input: copying to new pbuf failed\n", 0);
        goto memerr;
    8958:	bf00      	nop
    895a:	e002      	b.n	8962 <icmp_input+0x272>
      }
      iphdr = (struct ip_hdr *)r->payload;
      /* switch r->payload back to icmp header */
      if (pbuf_header(r, -hlen)) {
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
        goto memerr;
    895c:	bf00      	nop
    895e:	e000      	b.n	8962 <icmp_input+0x272>
      p = r;
    } else {
      /* restore p->payload to point to icmp header */
      if (pbuf_header(p, -(s16_t)(PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
        goto memerr;
    8960:	bf00      	nop
  ICMP_STATS_INC(icmp.lenerr);
  snmp_inc_icmpinerrors();
  return;
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
memerr:
  pbuf_free(p);
    8962:	6878      	ldr	r0, [r7, #4]
    8964:	f7fe f96e 	bl	6c44 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
    8968:	4b05      	ldr	r3, [pc, #20]	; (8980 <icmp_input+0x290>)
    896a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
    896e:	3301      	adds	r3, #1
    8970:	b29a      	uxth	r2, r3
    8972:	4b03      	ldr	r3, [pc, #12]	; (8980 <icmp_input+0x290>)
    8974:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
  snmp_inc_icmpinerrors();
  return;
    8978:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
}
    897a:	3720      	adds	r7, #32
    897c:	46bd      	mov	sp, r7
    897e:	bd80      	pop	{r7, pc}
    8980:	10001978 	.word	0x10001978
    8984:	10001aa0 	.word	0x10001aa0
    8988:	10001a98 	.word	0x10001a98

0000898c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
    898c:	b580      	push	{r7, lr}
    898e:	b082      	sub	sp, #8
    8990:	af00      	add	r7, sp, #0
    8992:	6078      	str	r0, [r7, #4]
    8994:	460b      	mov	r3, r1
    8996:	70fb      	strb	r3, [r7, #3]
  icmp_send_response(p, ICMP_DUR, t);
    8998:	78fb      	ldrb	r3, [r7, #3]
    899a:	461a      	mov	r2, r3
    899c:	2103      	movs	r1, #3
    899e:	6878      	ldr	r0, [r7, #4]
    89a0:	f000 f814 	bl	89cc <icmp_send_response>
}
    89a4:	bf00      	nop
    89a6:	3708      	adds	r7, #8
    89a8:	46bd      	mov	sp, r7
    89aa:	bd80      	pop	{r7, pc}

000089ac <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
    89ac:	b580      	push	{r7, lr}
    89ae:	b082      	sub	sp, #8
    89b0:	af00      	add	r7, sp, #0
    89b2:	6078      	str	r0, [r7, #4]
    89b4:	460b      	mov	r3, r1
    89b6:	70fb      	strb	r3, [r7, #3]
  icmp_send_response(p, ICMP_TE, t);
    89b8:	78fb      	ldrb	r3, [r7, #3]
    89ba:	461a      	mov	r2, r3
    89bc:	210b      	movs	r1, #11
    89be:	6878      	ldr	r0, [r7, #4]
    89c0:	f000 f804 	bl	89cc <icmp_send_response>
}
    89c4:	bf00      	nop
    89c6:	3708      	adds	r7, #8
    89c8:	46bd      	mov	sp, r7
    89ca:	bd80      	pop	{r7, pc}

000089cc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
    89cc:	b580      	push	{r7, lr}
    89ce:	b088      	sub	sp, #32
    89d0:	af02      	add	r7, sp, #8
    89d2:	6078      	str	r0, [r7, #4]
    89d4:	460b      	mov	r3, r1
    89d6:	70fb      	strb	r3, [r7, #3]
    89d8:	4613      	mov	r3, r2
    89da:	70bb      	strb	r3, [r7, #2]
  /* we can use the echo header here */
  struct icmp_echo_hdr *icmphdr;
  ip_addr_t iphdr_src;

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
    89dc:	2200      	movs	r2, #0
    89de:	2124      	movs	r1, #36	; 0x24
    89e0:	2001      	movs	r0, #1
    89e2:	f7fd ff09 	bl	67f8 <pbuf_alloc>
    89e6:	6178      	str	r0, [r7, #20]
                 PBUF_RAM);
  if (q == NULL) {
    89e8:	697b      	ldr	r3, [r7, #20]
    89ea:	2b00      	cmp	r3, #0
    89ec:	d048      	beq.n	8a80 <icmp_send_response+0xb4>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
    89ee:	687b      	ldr	r3, [r7, #4]
    89f0:	685b      	ldr	r3, [r3, #4]
    89f2:	613b      	str	r3, [r7, #16]
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->src));
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->dest));
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
    89f4:	697b      	ldr	r3, [r7, #20]
    89f6:	685b      	ldr	r3, [r3, #4]
    89f8:	60fb      	str	r3, [r7, #12]
  icmphdr->type = type;
    89fa:	68fb      	ldr	r3, [r7, #12]
    89fc:	78fa      	ldrb	r2, [r7, #3]
    89fe:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
    8a00:	68fb      	ldr	r3, [r7, #12]
    8a02:	78ba      	ldrb	r2, [r7, #2]
    8a04:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
    8a06:	68fb      	ldr	r3, [r7, #12]
    8a08:	2200      	movs	r2, #0
    8a0a:	711a      	strb	r2, [r3, #4]
    8a0c:	2200      	movs	r2, #0
    8a0e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
    8a10:	68fb      	ldr	r3, [r7, #12]
    8a12:	2200      	movs	r2, #0
    8a14:	719a      	strb	r2, [r3, #6]
    8a16:	2200      	movs	r2, #0
    8a18:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
    8a1a:	697b      	ldr	r3, [r7, #20]
    8a1c:	685b      	ldr	r3, [r3, #4]
    8a1e:	f103 0008 	add.w	r0, r3, #8
    8a22:	687b      	ldr	r3, [r7, #4]
    8a24:	685b      	ldr	r3, [r3, #4]
    8a26:	221c      	movs	r2, #28
    8a28:	4619      	mov	r1, r3
    8a2a:	f000 fe2f 	bl	968c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  /* calculate checksum */
  icmphdr->chksum = 0;
    8a2e:	68fb      	ldr	r3, [r7, #12]
    8a30:	2200      	movs	r2, #0
    8a32:	709a      	strb	r2, [r3, #2]
    8a34:	2200      	movs	r2, #0
    8a36:	70da      	strb	r2, [r3, #3]
  icmphdr->chksum = inet_chksum(icmphdr, q->len);
    8a38:	697b      	ldr	r3, [r7, #20]
    8a3a:	895b      	ldrh	r3, [r3, #10]
    8a3c:	4619      	mov	r1, r3
    8a3e:	68f8      	ldr	r0, [r7, #12]
    8a40:	f7ff f91c 	bl	7c7c <inet_chksum>
    8a44:	4603      	mov	r3, r0
    8a46:	461a      	mov	r2, r3
    8a48:	68fb      	ldr	r3, [r7, #12]
    8a4a:	805a      	strh	r2, [r3, #2]
  ICMP_STATS_INC(icmp.xmit);
    8a4c:	4b0e      	ldr	r3, [pc, #56]	; (8a88 <icmp_send_response+0xbc>)
    8a4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
    8a52:	3301      	adds	r3, #1
    8a54:	b29a      	uxth	r2, r3
    8a56:	4b0c      	ldr	r3, [pc, #48]	; (8a88 <icmp_send_response+0xbc>)
    8a58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* increase number of messages attempted to send */
  snmp_inc_icmpoutmsgs();
  /* increase number of destination unreachable messages attempted to send */
  snmp_inc_icmpouttimeexcds();
  ip_addr_copy(iphdr_src, iphdr->src);
    8a5c:	693b      	ldr	r3, [r7, #16]
    8a5e:	68db      	ldr	r3, [r3, #12]
    8a60:	60bb      	str	r3, [r7, #8]
  ip_output(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP);
    8a62:	f107 0208 	add.w	r2, r7, #8
    8a66:	2301      	movs	r3, #1
    8a68:	9301      	str	r3, [sp, #4]
    8a6a:	2300      	movs	r3, #0
    8a6c:	9300      	str	r3, [sp, #0]
    8a6e:	23ff      	movs	r3, #255	; 0xff
    8a70:	2100      	movs	r1, #0
    8a72:	6978      	ldr	r0, [r7, #20]
    8a74:	f7fe fff0 	bl	7a58 <ip_output>
  pbuf_free(q);
    8a78:	6978      	ldr	r0, [r7, #20]
    8a7a:	f7fe f8e3 	bl	6c44 <pbuf_free>
    8a7e:	e000      	b.n	8a82 <icmp_send_response+0xb6>
  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
                 PBUF_RAM);
  if (q == NULL) {
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    return;
    8a80:	bf00      	nop
  /* increase number of destination unreachable messages attempted to send */
  snmp_inc_icmpouttimeexcds();
  ip_addr_copy(iphdr_src, iphdr->src);
  ip_output(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP);
  pbuf_free(q);
}
    8a82:	3718      	adds	r7, #24
    8a84:	46bd      	mov	sp, r7
    8a86:	bd80      	pop	{r7, pc}
    8a88:	10001978 	.word	0x10001978

00008a8c <low_level_init>:
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void
low_level_init(struct netif *netif)
{
    8a8c:	b580      	push	{r7, lr}
    8a8e:	b084      	sub	sp, #16
    8a90:	af00      	add	r7, sp, #0
    8a92:	6078      	str	r0, [r7, #4]
  struct ethernetif *ethernetif = netif->state;
    8a94:	687b      	ldr	r3, [r7, #4]
    8a96:	69db      	ldr	r3, [r3, #28]
    8a98:	60fb      	str	r3, [r7, #12]
  
  /* set MAC hardware address length */
  netif->hwaddr_len = ETHARP_HWADDR_LEN;
    8a9a:	687b      	ldr	r3, [r7, #4]
    8a9c:	2206      	movs	r2, #6
    8a9e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  /* set MAC hardware address */
  netif->hwaddr[0] = MYMAC_1;
    8aa2:	687b      	ldr	r3, [r7, #4]
    8aa4:	221e      	movs	r2, #30
    8aa6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  netif->hwaddr[1] = MYMAC_2;
    8aaa:	687b      	ldr	r3, [r7, #4]
    8aac:	2230      	movs	r2, #48	; 0x30
    8aae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->hwaddr[2] = MYMAC_3;
    8ab2:	687b      	ldr	r3, [r7, #4]
    8ab4:	226c      	movs	r2, #108	; 0x6c
    8ab6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[3] = MYMAC_4;
    8aba:	687b      	ldr	r3, [r7, #4]
    8abc:	22a2      	movs	r2, #162	; 0xa2
    8abe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[4] = MYMAC_5;
    8ac2:	687b      	ldr	r3, [r7, #4]
    8ac4:	2245      	movs	r2, #69	; 0x45
    8ac6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[5] = MYMAC_6;
    8aca:	687b      	ldr	r3, [r7, #4]
    8acc:	225e      	movs	r2, #94	; 0x5e
    8ace:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* maximum transfer unit */
  netif->mtu = 1500;
    8ad2:	687b      	ldr	r3, [r7, #4]
    8ad4:	f240 52dc 	movw	r2, #1500	; 0x5dc
    8ad8:	841a      	strh	r2, [r3, #32]
  
  /* device capabilities */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  netif->flags = NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP | NETIF_FLAG_LINK_UP;
    8ada:	687b      	ldr	r3, [r7, #4]
    8adc:	2232      	movs	r2, #50	; 0x32
    8ade:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 
  /* Do whatever else is needed to initialize interface. */  
  EMAC_Init();
    8ae2:	f7f8 ffc3 	bl	1a6c <EMAC_Init>
}
    8ae6:	bf00      	nop
    8ae8:	3710      	adds	r7, #16
    8aea:	46bd      	mov	sp, r7
    8aec:	bd80      	pop	{r7, pc}
    8aee:	bf00      	nop

00008af0 <low_level_output>:
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t
low_level_output(struct netif *netif, struct pbuf *p)
{
    8af0:	b580      	push	{r7, lr}
    8af2:	b088      	sub	sp, #32
    8af4:	af00      	add	r7, sp, #0
    8af6:	6078      	str	r0, [r7, #4]
    8af8:	6039      	str	r1, [r7, #0]
  struct ethernetif *ethernetif = netif->state;
    8afa:	687b      	ldr	r3, [r7, #4]
    8afc:	69db      	ldr	r3, [r3, #28]
    8afe:	60fb      	str	r3, [r7, #12]
  struct pbuf *q;
  unsigned char *tx_buffer;
  unsigned int error = 0;
    8b00:	2300      	movs	r3, #0
    8b02:	617b      	str	r3, [r7, #20]
  uint32_t len = 0;
    8b04:	2300      	movs	r3, #0
    8b06:	613b      	str	r3, [r7, #16]

  tx_buffer = (unsigned char *) TX_DESC_PACKET(LPC_EMAC->TxProduceIndex);
    8b08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8b0c:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
    8b10:	4b2a      	ldr	r3, [pc, #168]	; (8bbc <low_level_output+0xcc>)
    8b12:	4413      	add	r3, r2
    8b14:	00db      	lsls	r3, r3, #3
    8b16:	681b      	ldr	r3, [r3, #0]
    8b18:	61bb      	str	r3, [r7, #24]
  
#if ETH_PAD_SIZE
  pbuf_header(p, -ETH_PAD_SIZE); /* drop the padding word */
    8b1a:	f06f 0101 	mvn.w	r1, #1
    8b1e:	6838      	ldr	r0, [r7, #0]
    8b20:	f7fe f822 	bl	6b68 <pbuf_header>
#endif

  for(q = p; q != NULL; q = q->next) {
    8b24:	683b      	ldr	r3, [r7, #0]
    8b26:	61fb      	str	r3, [r7, #28]
    8b28:	e024      	b.n	8b74 <low_level_output+0x84>
    /* Send the data from the pbuf to the interface, one pbuf at a
       time. The size of the data in each pbuf is kept in the ->len
       variable. */
    //send data from(q->payload, q->len);
	  if (((unsigned int)len + q->len) >= (unsigned int) ETH_FRAG_SIZE) {
    8b2a:	69fb      	ldr	r3, [r7, #28]
    8b2c:	895b      	ldrh	r3, [r3, #10]
    8b2e:	461a      	mov	r2, r3
    8b30:	693b      	ldr	r3, [r7, #16]
    8b32:	4413      	add	r3, r2
    8b34:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    8b38:	d305      	bcc.n	8b46 <low_level_output+0x56>
		  xprintf("can't send data, much big!\n");
    8b3a:	4821      	ldr	r0, [pc, #132]	; (8bc0 <low_level_output+0xd0>)
    8b3c:	f7f7 fecc 	bl	8d8 <xprintf>
		  error = 1;
    8b40:	2301      	movs	r3, #1
    8b42:	617b      	str	r3, [r7, #20]
		  break;
    8b44:	e019      	b.n	8b7a <low_level_output+0x8a>
	  }
	  memcpy(tx_buffer, q->payload, q->len);
    8b46:	69fb      	ldr	r3, [r7, #28]
    8b48:	6859      	ldr	r1, [r3, #4]
    8b4a:	69fb      	ldr	r3, [r7, #28]
    8b4c:	895b      	ldrh	r3, [r3, #10]
    8b4e:	461a      	mov	r2, r3
    8b50:	69b8      	ldr	r0, [r7, #24]
    8b52:	f000 fd9b 	bl	968c <memcpy>
	  tx_buffer += q->len;
    8b56:	69fb      	ldr	r3, [r7, #28]
    8b58:	895b      	ldrh	r3, [r3, #10]
    8b5a:	461a      	mov	r2, r3
    8b5c:	69bb      	ldr	r3, [r7, #24]
    8b5e:	4413      	add	r3, r2
    8b60:	61bb      	str	r3, [r7, #24]
	  len += q->len;
    8b62:	69fb      	ldr	r3, [r7, #28]
    8b64:	895b      	ldrh	r3, [r3, #10]
    8b66:	461a      	mov	r2, r3
    8b68:	693b      	ldr	r3, [r7, #16]
    8b6a:	4413      	add	r3, r2
    8b6c:	613b      	str	r3, [r7, #16]
  
#if ETH_PAD_SIZE
  pbuf_header(p, -ETH_PAD_SIZE); /* drop the padding word */
#endif

  for(q = p; q != NULL; q = q->next) {
    8b6e:	69fb      	ldr	r3, [r7, #28]
    8b70:	681b      	ldr	r3, [r3, #0]
    8b72:	61fb      	str	r3, [r7, #28]
    8b74:	69fb      	ldr	r3, [r7, #28]
    8b76:	2b00      	cmp	r3, #0
    8b78:	d1d7      	bne.n	8b2a <low_level_output+0x3a>
	  tx_buffer += q->len;
	  len += q->len;
  }

  //signal that packet should be sent();
  if (!error) {
    8b7a:	697b      	ldr	r3, [r7, #20]
    8b7c:	2b00      	cmp	r3, #0
    8b7e:	d10b      	bne.n	8b98 <low_level_output+0xa8>
	  EMAC_SendPacket((unsigned char *) TX_DESC_PACKET(LPC_EMAC->TxProduceIndex), len);
    8b80:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8b84:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
    8b88:	4b0c      	ldr	r3, [pc, #48]	; (8bbc <low_level_output+0xcc>)
    8b8a:	4413      	add	r3, r2
    8b8c:	00db      	lsls	r3, r3, #3
    8b8e:	681b      	ldr	r3, [r3, #0]
    8b90:	6939      	ldr	r1, [r7, #16]
    8b92:	4618      	mov	r0, r3
    8b94:	f7f9 f936 	bl	1e04 <EMAC_SendPacket>
  }

#if ETH_PAD_SIZE
  pbuf_header(p, ETH_PAD_SIZE); /* reclaim the padding word */
    8b98:	2102      	movs	r1, #2
    8b9a:	6838      	ldr	r0, [r7, #0]
    8b9c:	f7fd ffe4 	bl	6b68 <pbuf_header>
#endif
  
  if (!error) {
    8ba0:	697b      	ldr	r3, [r7, #20]
    8ba2:	2b00      	cmp	r3, #0
    8ba4:	d105      	bne.n	8bb2 <low_level_output+0xc2>
	  LINK_STATS_INC(link.xmit);
    8ba6:	4b07      	ldr	r3, [pc, #28]	; (8bc4 <low_level_output+0xd4>)
    8ba8:	881b      	ldrh	r3, [r3, #0]
    8baa:	3301      	adds	r3, #1
    8bac:	b29a      	uxth	r2, r3
    8bae:	4b05      	ldr	r3, [pc, #20]	; (8bc4 <low_level_output+0xd4>)
    8bb0:	801a      	strh	r2, [r3, #0]
  }

  return ERR_OK;
    8bb2:	2300      	movs	r3, #0
}
    8bb4:	4618      	mov	r0, r3
    8bb6:	3720      	adds	r7, #32
    8bb8:	46bd      	mov	sp, r7
    8bba:	bd80      	pop	{r7, pc}
    8bbc:	04010008 	.word	0x04010008
    8bc0:	00009864 	.word	0x00009864
    8bc4:	10001978 	.word	0x10001978

00008bc8 <ethernetif_init>:
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t
ethernetif_init(struct netif *netif)
{
    8bc8:	b580      	push	{r7, lr}
    8bca:	b084      	sub	sp, #16
    8bcc:	af00      	add	r7, sp, #0
    8bce:	6078      	str	r0, [r7, #4]
  struct ethernetif *ethernetif;

  LWIP_ASSERT("netif != NULL", (netif != NULL));
    
  ethernetif = mem_malloc(sizeof(struct ethernetif));
    8bd0:	2004      	movs	r0, #4
    8bd2:	f7f9 fbf5 	bl	23c0 <mem_malloc>
    8bd6:	60f8      	str	r0, [r7, #12]
  if (ethernetif == NULL) {
    8bd8:	68fb      	ldr	r3, [r7, #12]
    8bda:	2b00      	cmp	r3, #0
    8bdc:	d102      	bne.n	8be4 <ethernetif_init+0x1c>
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_init: out of memory\n"));
    return ERR_MEM;
    8bde:	f04f 33ff 	mov.w	r3, #4294967295
    8be2:	e019      	b.n	8c18 <ethernetif_init+0x50>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  NETIF_INIT_SNMP(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->state = ethernetif;
    8be4:	687b      	ldr	r3, [r7, #4]
    8be6:	68fa      	ldr	r2, [r7, #12]
    8be8:	61da      	str	r2, [r3, #28]
  netif->name[0] = IFNAME0;
    8bea:	687b      	ldr	r3, [r7, #4]
    8bec:	2265      	movs	r2, #101	; 0x65
    8bee:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->name[1] = IFNAME1;
    8bf2:	687b      	ldr	r3, [r7, #4]
    8bf4:	226e      	movs	r2, #110	; 0x6e
    8bf6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  /* We directly use etharp_output() here to save a function call.
   * You can instead declare your own function an call etharp_output()
   * from it if you have to do some checks before sending (e.g. if link
   * is available...) */
  netif->output = etharp_output;
    8bfa:	687b      	ldr	r3, [r7, #4]
    8bfc:	4a08      	ldr	r2, [pc, #32]	; (8c20 <ethernetif_init+0x58>)
    8bfe:	615a      	str	r2, [r3, #20]
  netif->linkoutput = low_level_output;
    8c00:	687b      	ldr	r3, [r7, #4]
    8c02:	4a08      	ldr	r2, [pc, #32]	; (8c24 <ethernetif_init+0x5c>)
    8c04:	619a      	str	r2, [r3, #24]
  
  ethernetif->ethaddr = (struct eth_addr *)&(netif->hwaddr[0]);
    8c06:	687b      	ldr	r3, [r7, #4]
    8c08:	f103 0223 	add.w	r2, r3, #35	; 0x23
    8c0c:	68fb      	ldr	r3, [r7, #12]
    8c0e:	601a      	str	r2, [r3, #0]
  
  /* initialize the hardware */
  low_level_init(netif);
    8c10:	6878      	ldr	r0, [r7, #4]
    8c12:	f7ff ff3b 	bl	8a8c <low_level_init>

  return ERR_OK;
    8c16:	2300      	movs	r3, #0
}
    8c18:	4618      	mov	r0, r3
    8c1a:	3710      	adds	r7, #16
    8c1c:	46bd      	mov	sp, r7
    8c1e:	bd80      	pop	{r7, pc}
    8c20:	00009125 	.word	0x00009125
    8c24:	00008af1 	.word	0x00008af1

00008c28 <free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
free_entry(int i)
{
    8c28:	b580      	push	{r7, lr}
    8c2a:	b082      	sub	sp, #8
    8c2c:	af00      	add	r7, sp, #0
    8c2e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  snmp_delete_arpidx_tree(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
    8c30:	4a0f      	ldr	r2, [pc, #60]	; (8c70 <free_entry+0x48>)
    8c32:	687b      	ldr	r3, [r7, #4]
    8c34:	011b      	lsls	r3, r3, #4
    8c36:	4413      	add	r3, r2
    8c38:	681b      	ldr	r3, [r3, #0]
    8c3a:	2b00      	cmp	r3, #0
    8c3c:	d00d      	beq.n	8c5a <free_entry+0x32>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
    8c3e:	4a0c      	ldr	r2, [pc, #48]	; (8c70 <free_entry+0x48>)
    8c40:	687b      	ldr	r3, [r7, #4]
    8c42:	011b      	lsls	r3, r3, #4
    8c44:	4413      	add	r3, r2
    8c46:	681b      	ldr	r3, [r3, #0]
    8c48:	4618      	mov	r0, r3
    8c4a:	f7fd fffb 	bl	6c44 <pbuf_free>
    arp_table[i].q = NULL;
    8c4e:	4a08      	ldr	r2, [pc, #32]	; (8c70 <free_entry+0x48>)
    8c50:	687b      	ldr	r3, [r7, #4]
    8c52:	011b      	lsls	r3, r3, #4
    8c54:	4413      	add	r3, r2
    8c56:	2200      	movs	r2, #0
    8c58:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */      
  arp_table[i].state = ETHARP_STATE_EMPTY;
    8c5a:	4a05      	ldr	r2, [pc, #20]	; (8c70 <free_entry+0x48>)
    8c5c:	687b      	ldr	r3, [r7, #4]
    8c5e:	011b      	lsls	r3, r3, #4
    8c60:	4413      	add	r3, r2
    8c62:	330e      	adds	r3, #14
    8c64:	2200      	movs	r2, #0
    8c66:	701a      	strb	r2, [r3, #0]
  arp_table[i].netif = NULL;
#endif /* LWIP_SNMP */
  ip_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
    8c68:	bf00      	nop
    8c6a:	3708      	adds	r7, #8
    8c6c:	46bd      	mov	sp, r7
    8c6e:	bd80      	pop	{r7, pc}
    8c70:	10001234 	.word	0x10001234

00008c74 <find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
find_entry(ip_addr_t *ipaddr, u8_t flags)
{
    8c74:	b580      	push	{r7, lr}
    8c76:	b086      	sub	sp, #24
    8c78:	af00      	add	r7, sp, #0
    8c7a:	6078      	str	r0, [r7, #4]
    8c7c:	460b      	mov	r3, r1
    8c7e:	70fb      	strb	r3, [r7, #3]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
    8c80:	230a      	movs	r3, #10
    8c82:	75fb      	strb	r3, [r7, #23]
    8c84:	230a      	movs	r3, #10
    8c86:	75bb      	strb	r3, [r7, #22]
  s8_t empty = ARP_TABLE_SIZE;
    8c88:	230a      	movs	r3, #10
    8c8a:	757b      	strb	r3, [r7, #21]
  u8_t i = 0, age_pending = 0, age_stable = 0;
    8c8c:	2300      	movs	r3, #0
    8c8e:	753b      	strb	r3, [r7, #20]
    8c90:	2300      	movs	r3, #0
    8c92:	74fb      	strb	r3, [r7, #19]
    8c94:	2300      	movs	r3, #0
    8c96:	74bb      	strb	r3, [r7, #18]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
    8c98:	230a      	movs	r3, #10
    8c9a:	747b      	strb	r3, [r7, #17]
  /* its age */
  u8_t age_queue = 0;
    8c9c:	2300      	movs	r3, #0
    8c9e:	743b      	strb	r3, [r7, #16]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    8ca0:	2300      	movs	r3, #0
    8ca2:	753b      	strb	r3, [r7, #20]
    8ca4:	e06b      	b.n	8d7e <find_entry+0x10a>
    u8_t state = arp_table[i].state;
    8ca6:	7d3b      	ldrb	r3, [r7, #20]
    8ca8:	4a5c      	ldr	r2, [pc, #368]	; (8e1c <find_entry+0x1a8>)
    8caa:	011b      	lsls	r3, r3, #4
    8cac:	4413      	add	r3, r2
    8cae:	330e      	adds	r3, #14
    8cb0:	781b      	ldrb	r3, [r3, #0]
    8cb2:	73fb      	strb	r3, [r7, #15]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
    8cb4:	f997 3015 	ldrsb.w	r3, [r7, #21]
    8cb8:	2b0a      	cmp	r3, #10
    8cba:	d105      	bne.n	8cc8 <find_entry+0x54>
    8cbc:	7bfb      	ldrb	r3, [r7, #15]
    8cbe:	2b00      	cmp	r3, #0
    8cc0:	d102      	bne.n	8cc8 <find_entry+0x54>
      LWIP_DEBUGF(ETHARP_DEBUG, ("find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
    8cc2:	7d3b      	ldrb	r3, [r7, #20]
    8cc4:	757b      	strb	r3, [r7, #21]
    8cc6:	e057      	b.n	8d78 <find_entry+0x104>
    } else if (state != ETHARP_STATE_EMPTY) {
    8cc8:	7bfb      	ldrb	r3, [r7, #15]
    8cca:	2b00      	cmp	r3, #0
    8ccc:	d054      	beq.n	8d78 <find_entry+0x104>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state == ETHARP_STATE_STABLE",
        state == ETHARP_STATE_PENDING || state == ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip_addr_cmp(ipaddr, &arp_table[i].ipaddr)) {
    8cce:	687b      	ldr	r3, [r7, #4]
    8cd0:	2b00      	cmp	r3, #0
    8cd2:	d00c      	beq.n	8cee <find_entry+0x7a>
    8cd4:	687b      	ldr	r3, [r7, #4]
    8cd6:	681a      	ldr	r2, [r3, #0]
    8cd8:	7d3b      	ldrb	r3, [r7, #20]
    8cda:	4950      	ldr	r1, [pc, #320]	; (8e1c <find_entry+0x1a8>)
    8cdc:	011b      	lsls	r3, r3, #4
    8cde:	440b      	add	r3, r1
    8ce0:	3304      	adds	r3, #4
    8ce2:	681b      	ldr	r3, [r3, #0]
    8ce4:	429a      	cmp	r2, r3
    8ce6:	d102      	bne.n	8cee <find_entry+0x7a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
    8ce8:	f997 3014 	ldrsb.w	r3, [r7, #20]
    8cec:	e092      	b.n	8e14 <find_entry+0x1a0>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
    8cee:	7bfb      	ldrb	r3, [r7, #15]
    8cf0:	2b01      	cmp	r3, #1
    8cf2:	d12c      	bne.n	8d4e <find_entry+0xda>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
    8cf4:	7d3b      	ldrb	r3, [r7, #20]
    8cf6:	4a49      	ldr	r2, [pc, #292]	; (8e1c <find_entry+0x1a8>)
    8cf8:	011b      	lsls	r3, r3, #4
    8cfa:	4413      	add	r3, r2
    8cfc:	681b      	ldr	r3, [r3, #0]
    8cfe:	2b00      	cmp	r3, #0
    8d00:	d012      	beq.n	8d28 <find_entry+0xb4>
          if (arp_table[i].ctime >= age_queue) {
    8d02:	7d3b      	ldrb	r3, [r7, #20]
    8d04:	4a45      	ldr	r2, [pc, #276]	; (8e1c <find_entry+0x1a8>)
    8d06:	011b      	lsls	r3, r3, #4
    8d08:	4413      	add	r3, r2
    8d0a:	330f      	adds	r3, #15
    8d0c:	781b      	ldrb	r3, [r3, #0]
    8d0e:	7c3a      	ldrb	r2, [r7, #16]
    8d10:	429a      	cmp	r2, r3
    8d12:	d831      	bhi.n	8d78 <find_entry+0x104>
            old_queue = i;
    8d14:	7d3b      	ldrb	r3, [r7, #20]
    8d16:	747b      	strb	r3, [r7, #17]
            age_queue = arp_table[i].ctime;
    8d18:	7d3b      	ldrb	r3, [r7, #20]
    8d1a:	4a40      	ldr	r2, [pc, #256]	; (8e1c <find_entry+0x1a8>)
    8d1c:	011b      	lsls	r3, r3, #4
    8d1e:	4413      	add	r3, r2
    8d20:	330f      	adds	r3, #15
    8d22:	781b      	ldrb	r3, [r3, #0]
    8d24:	743b      	strb	r3, [r7, #16]
    8d26:	e027      	b.n	8d78 <find_entry+0x104>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
    8d28:	7d3b      	ldrb	r3, [r7, #20]
    8d2a:	4a3c      	ldr	r2, [pc, #240]	; (8e1c <find_entry+0x1a8>)
    8d2c:	011b      	lsls	r3, r3, #4
    8d2e:	4413      	add	r3, r2
    8d30:	330f      	adds	r3, #15
    8d32:	781b      	ldrb	r3, [r3, #0]
    8d34:	7cfa      	ldrb	r2, [r7, #19]
    8d36:	429a      	cmp	r2, r3
    8d38:	d81e      	bhi.n	8d78 <find_entry+0x104>
            old_pending = i;
    8d3a:	7d3b      	ldrb	r3, [r7, #20]
    8d3c:	75fb      	strb	r3, [r7, #23]
            age_pending = arp_table[i].ctime;
    8d3e:	7d3b      	ldrb	r3, [r7, #20]
    8d40:	4a36      	ldr	r2, [pc, #216]	; (8e1c <find_entry+0x1a8>)
    8d42:	011b      	lsls	r3, r3, #4
    8d44:	4413      	add	r3, r2
    8d46:	330f      	adds	r3, #15
    8d48:	781b      	ldrb	r3, [r3, #0]
    8d4a:	74fb      	strb	r3, [r7, #19]
    8d4c:	e014      	b.n	8d78 <find_entry+0x104>
          }
        }
      /* stable entry? */
      } else if (state == ETHARP_STATE_STABLE) {
    8d4e:	7bfb      	ldrb	r3, [r7, #15]
    8d50:	2b02      	cmp	r3, #2
    8d52:	d111      	bne.n	8d78 <find_entry+0x104>
        /* don't record old_stable for static entries since they never expire */
        if (arp_table[i].static_entry == 0)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
    8d54:	7d3b      	ldrb	r3, [r7, #20]
    8d56:	4a31      	ldr	r2, [pc, #196]	; (8e1c <find_entry+0x1a8>)
    8d58:	011b      	lsls	r3, r3, #4
    8d5a:	4413      	add	r3, r2
    8d5c:	330f      	adds	r3, #15
    8d5e:	781b      	ldrb	r3, [r3, #0]
    8d60:	7cba      	ldrb	r2, [r7, #18]
    8d62:	429a      	cmp	r2, r3
    8d64:	d808      	bhi.n	8d78 <find_entry+0x104>
            old_stable = i;
    8d66:	7d3b      	ldrb	r3, [r7, #20]
    8d68:	75bb      	strb	r3, [r7, #22]
            age_stable = arp_table[i].ctime;
    8d6a:	7d3b      	ldrb	r3, [r7, #20]
    8d6c:	4a2b      	ldr	r2, [pc, #172]	; (8e1c <find_entry+0x1a8>)
    8d6e:	011b      	lsls	r3, r3, #4
    8d70:	4413      	add	r3, r2
    8d72:	330f      	adds	r3, #15
    8d74:	781b      	ldrb	r3, [r3, #0]
    8d76:	74bb      	strb	r3, [r7, #18]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    8d78:	7d3b      	ldrb	r3, [r7, #20]
    8d7a:	3301      	adds	r3, #1
    8d7c:	753b      	strb	r3, [r7, #20]
    8d7e:	7d3b      	ldrb	r3, [r7, #20]
    8d80:	2b09      	cmp	r3, #9
    8d82:	d990      	bls.n	8ca6 <find_entry+0x32>
    }
  }
  /* { we have no match } => try to create a new entry */
   
  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
    8d84:	78fb      	ldrb	r3, [r7, #3]
    8d86:	f003 0302 	and.w	r3, r3, #2
    8d8a:	2b00      	cmp	r3, #0
    8d8c:	d108      	bne.n	8da0 <find_entry+0x12c>
    8d8e:	f997 3015 	ldrsb.w	r3, [r7, #21]
    8d92:	2b0a      	cmp	r3, #10
    8d94:	d107      	bne.n	8da6 <find_entry+0x132>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
    8d96:	78fb      	ldrb	r3, [r7, #3]
    8d98:	f003 0301 	and.w	r3, r3, #1
    8d9c:	2b00      	cmp	r3, #0
    8d9e:	d102      	bne.n	8da6 <find_entry+0x132>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
    8da0:	f04f 33ff 	mov.w	r3, #4294967295
    8da4:	e036      	b.n	8e14 <find_entry+0x1a0>
   * 
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */ 

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
    8da6:	f997 3015 	ldrsb.w	r3, [r7, #21]
    8daa:	2b09      	cmp	r3, #9
    8dac:	dc02      	bgt.n	8db4 <find_entry+0x140>
    i = empty;
    8dae:	7d7b      	ldrb	r3, [r7, #21]
    8db0:	753b      	strb	r3, [r7, #20]
    8db2:	e01b      	b.n	8dec <find_entry+0x178>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
    8db4:	f997 3016 	ldrsb.w	r3, [r7, #22]
    8db8:	2b09      	cmp	r3, #9
    8dba:	dc02      	bgt.n	8dc2 <find_entry+0x14e>
      /* recycle oldest stable*/
      i = old_stable;
    8dbc:	7dbb      	ldrb	r3, [r7, #22]
    8dbe:	753b      	strb	r3, [r7, #20]
    8dc0:	e010      	b.n	8de4 <find_entry+0x170>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
    8dc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    8dc6:	2b09      	cmp	r3, #9
    8dc8:	dc02      	bgt.n	8dd0 <find_entry+0x15c>
      /* recycle oldest pending */
      i = old_pending;
    8dca:	7dfb      	ldrb	r3, [r7, #23]
    8dcc:	753b      	strb	r3, [r7, #20]
    8dce:	e009      	b.n	8de4 <find_entry+0x170>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
    8dd0:	f997 3011 	ldrsb.w	r3, [r7, #17]
    8dd4:	2b09      	cmp	r3, #9
    8dd6:	dc02      	bgt.n	8dde <find_entry+0x16a>
      /* recycle oldest pending (queued packets are free in free_entry) */
      i = old_queue;
    8dd8:	7c7b      	ldrb	r3, [r7, #17]
    8dda:	753b      	strb	r3, [r7, #20]
    8ddc:	e002      	b.n	8de4 <find_entry+0x170>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
    8dde:	f04f 33ff 	mov.w	r3, #4294967295
    8de2:	e017      	b.n	8e14 <find_entry+0x1a0>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    free_entry(i);
    8de4:	7d3b      	ldrb	r3, [r7, #20]
    8de6:	4618      	mov	r0, r3
    8de8:	f7ff ff1e 	bl	8c28 <free_entry>
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
    8dec:	687b      	ldr	r3, [r7, #4]
    8dee:	2b00      	cmp	r3, #0
    8df0:	d007      	beq.n	8e02 <find_entry+0x18e>
    /* set IP address */
    ip_addr_copy(arp_table[i].ipaddr, *ipaddr);
    8df2:	7d3b      	ldrb	r3, [r7, #20]
    8df4:	687a      	ldr	r2, [r7, #4]
    8df6:	6812      	ldr	r2, [r2, #0]
    8df8:	4908      	ldr	r1, [pc, #32]	; (8e1c <find_entry+0x1a8>)
    8dfa:	011b      	lsls	r3, r3, #4
    8dfc:	440b      	add	r3, r1
    8dfe:	3304      	adds	r3, #4
    8e00:	601a      	str	r2, [r3, #0]
  }
  arp_table[i].ctime = 0;
    8e02:	7d3b      	ldrb	r3, [r7, #20]
    8e04:	4a05      	ldr	r2, [pc, #20]	; (8e1c <find_entry+0x1a8>)
    8e06:	011b      	lsls	r3, r3, #4
    8e08:	4413      	add	r3, r2
    8e0a:	330f      	adds	r3, #15
    8e0c:	2200      	movs	r2, #0
    8e0e:	701a      	strb	r2, [r3, #0]
#if ETHARP_SUPPORT_STATIC_ENTRIES
  arp_table[i].static_entry = 0;
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  return (err_t)i;
    8e10:	f997 3014 	ldrsb.w	r3, [r7, #20]
}
    8e14:	4618      	mov	r0, r3
    8e16:	3718      	adds	r7, #24
    8e18:	46bd      	mov	sp, r7
    8e1a:	bd80      	pop	{r7, pc}
    8e1c:	10001234 	.word	0x10001234

00008e20 <etharp_send_ip>:
 * @params dst the destination MAC address to be copied into the ethernet header
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
static err_t
etharp_send_ip(struct netif *netif, struct pbuf *p, struct eth_addr *src, struct eth_addr *dst)
{
    8e20:	b580      	push	{r7, lr}
    8e22:	b086      	sub	sp, #24
    8e24:	af00      	add	r7, sp, #0
    8e26:	60f8      	str	r0, [r7, #12]
    8e28:	60b9      	str	r1, [r7, #8]
    8e2a:	607a      	str	r2, [r7, #4]
    8e2c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr = (struct eth_hdr *)p->payload;
    8e2e:	68bb      	ldr	r3, [r7, #8]
    8e30:	685b      	ldr	r3, [r3, #4]
    8e32:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETHARP_HWADDR_LEN for etharp!",
              (netif->hwaddr_len == ETHARP_HWADDR_LEN));
  ETHADDR32_COPY(&ethhdr->dest, dst);
    8e34:	697b      	ldr	r3, [r7, #20]
    8e36:	3302      	adds	r3, #2
    8e38:	2206      	movs	r2, #6
    8e3a:	6839      	ldr	r1, [r7, #0]
    8e3c:	4618      	mov	r0, r3
    8e3e:	f000 fc25 	bl	968c <memcpy>
  ETHADDR16_COPY(&ethhdr->src, src);
    8e42:	697b      	ldr	r3, [r7, #20]
    8e44:	3308      	adds	r3, #8
    8e46:	2206      	movs	r2, #6
    8e48:	6879      	ldr	r1, [r7, #4]
    8e4a:	4618      	mov	r0, r3
    8e4c:	f000 fc1e 	bl	968c <memcpy>
  ethhdr->type = PP_HTONS(ETHTYPE_IP);
    8e50:	697b      	ldr	r3, [r7, #20]
    8e52:	2200      	movs	r2, #0
    8e54:	f042 0208 	orr.w	r2, r2, #8
    8e58:	739a      	strb	r2, [r3, #14]
    8e5a:	2200      	movs	r2, #0
    8e5c:	73da      	strb	r2, [r3, #15]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_send_ip: sending packet %p\n", (void *)p));
  /* send the packet */
  return netif->linkoutput(netif, p);
    8e5e:	68fb      	ldr	r3, [r7, #12]
    8e60:	699b      	ldr	r3, [r3, #24]
    8e62:	68b9      	ldr	r1, [r7, #8]
    8e64:	68f8      	ldr	r0, [r7, #12]
    8e66:	4798      	blx	r3
    8e68:	4603      	mov	r3, r0
}
    8e6a:	4618      	mov	r0, r3
    8e6c:	3718      	adds	r7, #24
    8e6e:	46bd      	mov	sp, r7
    8e70:	bd80      	pop	{r7, pc}
    8e72:	bf00      	nop

00008e74 <update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
update_arp_entry(struct netif *netif, ip_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
    8e74:	b580      	push	{r7, lr}
    8e76:	b086      	sub	sp, #24
    8e78:	af00      	add	r7, sp, #0
    8e7a:	60f8      	str	r0, [r7, #12]
    8e7c:	60b9      	str	r1, [r7, #8]
    8e7e:	607a      	str	r2, [r7, #4]
    8e80:	70fb      	strb	r3, [r7, #3]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
    8e82:	68bb      	ldr	r3, [r7, #8]
    8e84:	2b00      	cmp	r3, #0
    8e86:	d012      	beq.n	8eae <update_arp_entry+0x3a>
    8e88:	68bb      	ldr	r3, [r7, #8]
    8e8a:	681b      	ldr	r3, [r3, #0]
    8e8c:	2b00      	cmp	r3, #0
    8e8e:	d00e      	beq.n	8eae <update_arp_entry+0x3a>
      ip_addr_isbroadcast(ipaddr, netif) ||
    8e90:	68bb      	ldr	r3, [r7, #8]
    8e92:	681b      	ldr	r3, [r3, #0]
    8e94:	68f9      	ldr	r1, [r7, #12]
    8e96:	4618      	mov	r0, r3
    8e98:	f7fe ff4c 	bl	7d34 <ip4_addr_isbroadcast>
    8e9c:	4603      	mov	r3, r0
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
    8e9e:	2b00      	cmp	r3, #0
    8ea0:	d105      	bne.n	8eae <update_arp_entry+0x3a>
      ip_addr_isbroadcast(ipaddr, netif) ||
      ip_addr_ismulticast(ipaddr)) {
    8ea2:	68bb      	ldr	r3, [r7, #8]
    8ea4:	681b      	ldr	r3, [r3, #0]
    8ea6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
      ip_addr_isbroadcast(ipaddr, netif) ||
    8eaa:	2be0      	cmp	r3, #224	; 0xe0
    8eac:	d102      	bne.n	8eb4 <update_arp_entry+0x40>
      ip_addr_ismulticast(ipaddr)) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
    8eae:	f06f 030d 	mvn.w	r3, #13
    8eb2:	e04a      	b.n	8f4a <update_arp_entry+0xd6>
  }
  /* find or create ARP entry */
  i = find_entry(ipaddr, flags);
    8eb4:	78fb      	ldrb	r3, [r7, #3]
    8eb6:	4619      	mov	r1, r3
    8eb8:	68b8      	ldr	r0, [r7, #8]
    8eba:	f7ff fedb 	bl	8c74 <find_entry>
    8ebe:	4603      	mov	r3, r0
    8ec0:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
    8ec2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    8ec6:	2b00      	cmp	r3, #0
    8ec8:	da02      	bge.n	8ed0 <update_arp_entry+0x5c>
    return (err_t)i;
    8eca:	f997 3017 	ldrsb.w	r3, [r7, #23]
    8ece:	e03c      	b.n	8f4a <update_arp_entry+0xd6>
    arp_table[i].static_entry = 1;
  }
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */

  /* mark it stable */
  arp_table[i].state = ETHARP_STATE_STABLE;
    8ed0:	f997 3017 	ldrsb.w	r3, [r7, #23]
    8ed4:	4a1f      	ldr	r2, [pc, #124]	; (8f54 <update_arp_entry+0xe0>)
    8ed6:	011b      	lsls	r3, r3, #4
    8ed8:	4413      	add	r3, r2
    8eda:	330e      	adds	r3, #14
    8edc:	2202      	movs	r2, #2
    8ede:	701a      	strb	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  snmp_insert_arpidx_tree(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
    8ee0:	f997 3017 	ldrsb.w	r3, [r7, #23]
    8ee4:	011b      	lsls	r3, r3, #4
    8ee6:	3308      	adds	r3, #8
    8ee8:	4a1a      	ldr	r2, [pc, #104]	; (8f54 <update_arp_entry+0xe0>)
    8eea:	4413      	add	r3, r2
    8eec:	2206      	movs	r2, #6
    8eee:	6879      	ldr	r1, [r7, #4]
    8ef0:	4618      	mov	r0, r3
    8ef2:	f000 fbcb 	bl	968c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
    8ef6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    8efa:	4a16      	ldr	r2, [pc, #88]	; (8f54 <update_arp_entry+0xe0>)
    8efc:	011b      	lsls	r3, r3, #4
    8efe:	4413      	add	r3, r2
    8f00:	330f      	adds	r3, #15
    8f02:	2200      	movs	r2, #0
    8f04:	701a      	strb	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
    8f06:	f997 3017 	ldrsb.w	r3, [r7, #23]
    8f0a:	4a12      	ldr	r2, [pc, #72]	; (8f54 <update_arp_entry+0xe0>)
    8f0c:	011b      	lsls	r3, r3, #4
    8f0e:	4413      	add	r3, r2
    8f10:	681b      	ldr	r3, [r3, #0]
    8f12:	2b00      	cmp	r3, #0
    8f14:	d018      	beq.n	8f48 <update_arp_entry+0xd4>
    struct pbuf *p = arp_table[i].q;
    8f16:	f997 3017 	ldrsb.w	r3, [r7, #23]
    8f1a:	4a0e      	ldr	r2, [pc, #56]	; (8f54 <update_arp_entry+0xe0>)
    8f1c:	011b      	lsls	r3, r3, #4
    8f1e:	4413      	add	r3, r2
    8f20:	681b      	ldr	r3, [r3, #0]
    8f22:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
    8f24:	f997 3017 	ldrsb.w	r3, [r7, #23]
    8f28:	4a0a      	ldr	r2, [pc, #40]	; (8f54 <update_arp_entry+0xe0>)
    8f2a:	011b      	lsls	r3, r3, #4
    8f2c:	4413      	add	r3, r2
    8f2e:	2200      	movs	r2, #0
    8f30:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    etharp_send_ip(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr);
    8f32:	68fb      	ldr	r3, [r7, #12]
    8f34:	f103 0223 	add.w	r2, r3, #35	; 0x23
    8f38:	687b      	ldr	r3, [r7, #4]
    8f3a:	6939      	ldr	r1, [r7, #16]
    8f3c:	68f8      	ldr	r0, [r7, #12]
    8f3e:	f7ff ff6f 	bl	8e20 <etharp_send_ip>
    /* free the queued IP packet */
    pbuf_free(p);
    8f42:	6938      	ldr	r0, [r7, #16]
    8f44:	f7fd fe7e 	bl	6c44 <pbuf_free>
  }
  return ERR_OK;
    8f48:	2300      	movs	r3, #0
}
    8f4a:	4618      	mov	r0, r3
    8f4c:	3718      	adds	r7, #24
    8f4e:	46bd      	mov	sp, r7
    8f50:	bd80      	pop	{r7, pc}
    8f52:	bf00      	nop
    8f54:	10001234 	.word	0x10001234

00008f58 <etharp_arp_input>:
 *
 * @see pbuf_free()
 */
static void
etharp_arp_input(struct netif *netif, struct eth_addr *ethaddr, struct pbuf *p)
{
    8f58:	b580      	push	{r7, lr}
    8f5a:	b08a      	sub	sp, #40	; 0x28
    8f5c:	af00      	add	r7, sp, #0
    8f5e:	60f8      	str	r0, [r7, #12]
    8f60:	60b9      	str	r1, [r7, #8]
    8f62:	607a      	str	r2, [r7, #4]
  u8_t for_us;
#if LWIP_AUTOIP
  const u8_t * ethdst_hwaddr;
#endif /* LWIP_AUTOIP */

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
    8f64:	68fb      	ldr	r3, [r7, #12]
    8f66:	2b00      	cmp	r3, #0
    8f68:	f000 80d6 	beq.w	9118 <etharp_arp_input+0x1c0>

  /* drop short ARP packets: we have to check for p->len instead of p->tot_len here
     since a struct etharp_hdr is pointed to p->payload, so it musn't be chained! */
  if (p->len < SIZEOF_ETHARP_PACKET) {
    8f6c:	687b      	ldr	r3, [r7, #4]
    8f6e:	895b      	ldrh	r3, [r3, #10]
    8f70:	2b2b      	cmp	r3, #43	; 0x2b
    8f72:	d80f      	bhi.n	8f94 <etharp_arp_input+0x3c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_arp_input: packet dropped, too short (%"S16_F"/%"S16_F")\n", p->tot_len,
      (s16_t)SIZEOF_ETHARP_PACKET));
    ETHARP_STATS_INC(etharp.lenerr);
    8f74:	4b6a      	ldr	r3, [pc, #424]	; (9120 <etharp_arp_input+0x1c8>)
    8f76:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    8f78:	3301      	adds	r3, #1
    8f7a:	b29a      	uxth	r2, r3
    8f7c:	4b68      	ldr	r3, [pc, #416]	; (9120 <etharp_arp_input+0x1c8>)
    8f7e:	845a      	strh	r2, [r3, #34]	; 0x22
    ETHARP_STATS_INC(etharp.drop);
    8f80:	4b67      	ldr	r3, [pc, #412]	; (9120 <etharp_arp_input+0x1c8>)
    8f82:	8bdb      	ldrh	r3, [r3, #30]
    8f84:	3301      	adds	r3, #1
    8f86:	b29a      	uxth	r2, r3
    8f88:	4b65      	ldr	r3, [pc, #404]	; (9120 <etharp_arp_input+0x1c8>)
    8f8a:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
    8f8c:	6878      	ldr	r0, [r7, #4]
    8f8e:	f7fd fe59 	bl	6c44 <pbuf_free>
    return;
    8f92:	e0c2      	b.n	911a <etharp_arp_input+0x1c2>
  }

  ethhdr = (struct eth_hdr *)p->payload;
    8f94:	687b      	ldr	r3, [r7, #4]
    8f96:	685b      	ldr	r3, [r3, #4]
    8f98:	623b      	str	r3, [r7, #32]
  hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
    8f9a:	6a3b      	ldr	r3, [r7, #32]
    8f9c:	3310      	adds	r3, #16
    8f9e:	61fb      	str	r3, [r7, #28]
    hdr = (struct etharp_hdr *)(((u8_t*)ethhdr) + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
  }
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
    8fa0:	69fb      	ldr	r3, [r7, #28]
    8fa2:	881b      	ldrh	r3, [r3, #0]
    8fa4:	b29b      	uxth	r3, r3
    8fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8faa:	d10c      	bne.n	8fc6 <etharp_arp_input+0x6e>
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
    8fac:	69fb      	ldr	r3, [r7, #28]
    8fae:	791b      	ldrb	r3, [r3, #4]
    hdr = (struct etharp_hdr *)(((u8_t*)ethhdr) + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
  }
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
    8fb0:	2b06      	cmp	r3, #6
    8fb2:	d108      	bne.n	8fc6 <etharp_arp_input+0x6e>
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
      (hdr->protolen != sizeof(ip_addr_t)) ||
    8fb4:	69fb      	ldr	r3, [r7, #28]
    8fb6:	795b      	ldrb	r3, [r3, #5]
  }
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
    8fb8:	2b04      	cmp	r3, #4
    8fba:	d104      	bne.n	8fc6 <etharp_arp_input+0x6e>
      (hdr->protolen != sizeof(ip_addr_t)) ||
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
    8fbc:	69fb      	ldr	r3, [r7, #28]
    8fbe:	885b      	ldrh	r3, [r3, #2]
    8fc0:	b29b      	uxth	r3, r3
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
      (hdr->protolen != sizeof(ip_addr_t)) ||
    8fc2:	2b08      	cmp	r3, #8
    8fc4:	d00f      	beq.n	8fe6 <etharp_arp_input+0x8e>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_arp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, hdr->hwlen, hdr->proto, hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    8fc6:	4b56      	ldr	r3, [pc, #344]	; (9120 <etharp_arp_input+0x1c8>)
    8fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    8fca:	3301      	adds	r3, #1
    8fcc:	b29a      	uxth	r2, r3
    8fce:	4b54      	ldr	r3, [pc, #336]	; (9120 <etharp_arp_input+0x1c8>)
    8fd0:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
    8fd2:	4b53      	ldr	r3, [pc, #332]	; (9120 <etharp_arp_input+0x1c8>)
    8fd4:	8bdb      	ldrh	r3, [r3, #30]
    8fd6:	3301      	adds	r3, #1
    8fd8:	b29a      	uxth	r2, r3
    8fda:	4b51      	ldr	r3, [pc, #324]	; (9120 <etharp_arp_input+0x1c8>)
    8fdc:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
    8fde:	6878      	ldr	r0, [r7, #4]
    8fe0:	f7fd fe30 	bl	6c44 <pbuf_free>
    return;
    8fe4:	e099      	b.n	911a <etharp_arp_input+0x1c2>
  }
  ETHARP_STATS_INC(etharp.recv);
    8fe6:	4b4e      	ldr	r3, [pc, #312]	; (9120 <etharp_arp_input+0x1c8>)
    8fe8:	8b5b      	ldrh	r3, [r3, #26]
    8fea:	3301      	adds	r3, #1
    8fec:	b29a      	uxth	r2, r3
    8fee:	4b4c      	ldr	r3, [pc, #304]	; (9120 <etharp_arp_input+0x1c8>)
    8ff0:	835a      	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
    8ff2:	69fb      	ldr	r3, [r7, #28]
    8ff4:	f103 010e 	add.w	r1, r3, #14
    8ff8:	f107 0318 	add.w	r3, r7, #24
    8ffc:	2204      	movs	r2, #4
    8ffe:	4618      	mov	r0, r3
    9000:	f000 fb44 	bl	968c <memcpy>
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
    9004:	69fb      	ldr	r3, [r7, #28]
    9006:	f103 0118 	add.w	r1, r3, #24
    900a:	f107 0314 	add.w	r3, r7, #20
    900e:	2204      	movs	r2, #4
    9010:	4618      	mov	r0, r3
    9012:	f000 fb3b 	bl	968c <memcpy>

  /* this interface is not configured? */
  if (ip_addr_isany(&netif->ip_addr)) {
    9016:	68fb      	ldr	r3, [r7, #12]
    9018:	3304      	adds	r3, #4
    901a:	2b00      	cmp	r3, #0
    901c:	d003      	beq.n	9026 <etharp_arp_input+0xce>
    901e:	68fb      	ldr	r3, [r7, #12]
    9020:	685b      	ldr	r3, [r3, #4]
    9022:	2b00      	cmp	r3, #0
    9024:	d103      	bne.n	902e <etharp_arp_input+0xd6>
    for_us = 0;
    9026:	2300      	movs	r3, #0
    9028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    902c:	e009      	b.n	9042 <etharp_arp_input+0xea>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip_addr_cmp(&dipaddr, &(netif->ip_addr));
    902e:	697a      	ldr	r2, [r7, #20]
    9030:	68fb      	ldr	r3, [r7, #12]
    9032:	685b      	ldr	r3, [r3, #4]
    9034:	429a      	cmp	r2, r3
    9036:	bf0c      	ite	eq
    9038:	2301      	moveq	r3, #1
    903a:	2300      	movne	r3, #0
    903c:	b2db      	uxtb	r3, r3
    903e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
    9042:	69fb      	ldr	r3, [r7, #28]
    9044:	f103 0208 	add.w	r2, r3, #8
    9048:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    904c:	2b00      	cmp	r3, #0
    904e:	d001      	beq.n	9054 <etharp_arp_input+0xfc>
    9050:	2301      	movs	r3, #1
    9052:	e000      	b.n	9056 <etharp_arp_input+0xfe>
    9054:	2302      	movs	r3, #2
    9056:	f107 0118 	add.w	r1, r7, #24
    905a:	68f8      	ldr	r0, [r7, #12]
    905c:	f7ff ff0a 	bl	8e74 <update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
    9060:	69fb      	ldr	r3, [r7, #28]
    9062:	88db      	ldrh	r3, [r3, #6]
    9064:	b29b      	uxth	r3, r3
    9066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    906a:	d003      	beq.n	9074 <etharp_arp_input+0x11c>
    906c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9070:	d04d      	beq.n	910e <etharp_arp_input+0x1b6>
    9072:	e045      	b.n	9100 <etharp_arp_input+0x1a8>
     * reply. In any case, we time-stamp any existing ARP entry,
     * and possiby send out an IP packet that was queued on it. */

    LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: incoming ARP request\n"));
    /* ARP request for our address? */
    if (for_us) {
    9074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    9078:	2b00      	cmp	r3, #0
    907a:	d03d      	beq.n	90f8 <etharp_arp_input+0x1a0>

      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: replying to ARP request for our IP address\n"));
      /* Re-use pbuf to send ARP reply.
         Since we are re-using an existing pbuf, we can't call etharp_raw since
         that would allocate a new pbuf. */
      hdr->opcode = htons(ARP_REPLY);
    907c:	2002      	movs	r0, #2
    907e:	f7fe f82b 	bl	70d8 <lwip_htons>
    9082:	4603      	mov	r3, r0
    9084:	461a      	mov	r2, r3
    9086:	69fb      	ldr	r3, [r7, #28]
    9088:	80da      	strh	r2, [r3, #6]

      IPADDR2_COPY(&hdr->dipaddr, &hdr->sipaddr);
    908a:	69fb      	ldr	r3, [r7, #28]
    908c:	f103 0018 	add.w	r0, r3, #24
    9090:	69fb      	ldr	r3, [r7, #28]
    9092:	330e      	adds	r3, #14
    9094:	2204      	movs	r2, #4
    9096:	4619      	mov	r1, r3
    9098:	f000 faf8 	bl	968c <memcpy>
      IPADDR2_COPY(&hdr->sipaddr, &netif->ip_addr);
    909c:	69fb      	ldr	r3, [r7, #28]
    909e:	f103 000e 	add.w	r0, r3, #14
    90a2:	68fb      	ldr	r3, [r7, #12]
    90a4:	3304      	adds	r3, #4
    90a6:	2204      	movs	r2, #4
    90a8:	4619      	mov	r1, r3
    90aa:	f000 faef 	bl	968c <memcpy>
       * 'sender IP address' MUST be sent using link-layer broadcast instead of
       * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
      ethdst_hwaddr = ip_addr_islinklocal(&netif->ip_addr) ? (u8_t*)(ethbroadcast.addr) : hdr->shwaddr.addr;
#endif /* LWIP_AUTOIP */

      ETHADDR16_COPY(&hdr->dhwaddr, &hdr->shwaddr);
    90ae:	69fb      	ldr	r3, [r7, #28]
    90b0:	f103 0012 	add.w	r0, r3, #18
    90b4:	69fb      	ldr	r3, [r7, #28]
    90b6:	3308      	adds	r3, #8
    90b8:	2206      	movs	r2, #6
    90ba:	4619      	mov	r1, r3
    90bc:	f000 fae6 	bl	968c <memcpy>
#if LWIP_AUTOIP
      ETHADDR16_COPY(&ethhdr->dest, ethdst_hwaddr);
#else  /* LWIP_AUTOIP */
      ETHADDR16_COPY(&ethhdr->dest, &hdr->shwaddr);
    90c0:	6a3b      	ldr	r3, [r7, #32]
    90c2:	1c98      	adds	r0, r3, #2
    90c4:	69fb      	ldr	r3, [r7, #28]
    90c6:	3308      	adds	r3, #8
    90c8:	2206      	movs	r2, #6
    90ca:	4619      	mov	r1, r3
    90cc:	f000 fade 	bl	968c <memcpy>
#endif /* LWIP_AUTOIP */
      ETHADDR16_COPY(&hdr->shwaddr, ethaddr);
    90d0:	69fb      	ldr	r3, [r7, #28]
    90d2:	3308      	adds	r3, #8
    90d4:	2206      	movs	r2, #6
    90d6:	68b9      	ldr	r1, [r7, #8]
    90d8:	4618      	mov	r0, r3
    90da:	f000 fad7 	bl	968c <memcpy>
      ETHADDR16_COPY(&ethhdr->src, ethaddr);
    90de:	6a3b      	ldr	r3, [r7, #32]
    90e0:	3308      	adds	r3, #8
    90e2:	2206      	movs	r2, #6
    90e4:	68b9      	ldr	r1, [r7, #8]
    90e6:	4618      	mov	r0, r3
    90e8:	f000 fad0 	bl	968c <memcpy>

      /* hwtype, hwaddr_len, proto, protolen and the type in the ethernet header
         are already correct, we tested that before */

      /* return ARP reply */
      netif->linkoutput(netif, p);
    90ec:	68fb      	ldr	r3, [r7, #12]
    90ee:	699b      	ldr	r3, [r3, #24]
    90f0:	6879      	ldr	r1, [r7, #4]
    90f2:	68f8      	ldr	r0, [r7, #12]
    90f4:	4798      	blx	r3
    /* request was not directed to us */
    } else {
      /* { for_us == 0 and netif->ip_addr.addr != 0 } */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP request was not for us.\n"));
    }
    break;
    90f6:	e00b      	b.n	9110 <etharp_arp_input+0x1b8>
         are already correct, we tested that before */

      /* return ARP reply */
      netif->linkoutput(netif, p);
    /* we are not configured? */
    } else if (ip_addr_isany(&netif->ip_addr)) {
    90f8:	68fb      	ldr	r3, [r7, #12]
    90fa:	3304      	adds	r3, #4
    90fc:	2b00      	cmp	r3, #0
    /* request was not directed to us */
    } else {
      /* { for_us == 0 and netif->ip_addr.addr != 0 } */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP request was not for us.\n"));
    }
    break;
    90fe:	e007      	b.n	9110 <etharp_arp_input+0x1b8>
    dhcp_arp_reply(netif, &sipaddr);
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP unknown opcode type %"S16_F"\n", htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    9100:	4b07      	ldr	r3, [pc, #28]	; (9120 <etharp_arp_input+0x1c8>)
    9102:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    9104:	3301      	adds	r3, #1
    9106:	b29a      	uxth	r2, r3
    9108:	4b05      	ldr	r3, [pc, #20]	; (9120 <etharp_arp_input+0x1c8>)
    910a:	859a      	strh	r2, [r3, #44]	; 0x2c
    break;
    910c:	e000      	b.n	9110 <etharp_arp_input+0x1b8>
     * IP address also offered to us by the DHCP server. We do not
     * want to take a duplicate IP address on a single network.
     * @todo How should we handle redundant (fail-over) interfaces? */
    dhcp_arp_reply(netif, &sipaddr);
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
    910e:	bf00      	nop
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP unknown opcode type %"S16_F"\n", htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
  }
  /* free ARP packet */
  pbuf_free(p);
    9110:	6878      	ldr	r0, [r7, #4]
    9112:	f7fd fd97 	bl	6c44 <pbuf_free>
    9116:	e000      	b.n	911a <etharp_arp_input+0x1c2>
  u8_t for_us;
#if LWIP_AUTOIP
  const u8_t * ethdst_hwaddr;
#endif /* LWIP_AUTOIP */

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
    9118:	bf00      	nop
    ETHARP_STATS_INC(etharp.err);
    break;
  }
  /* free ARP packet */
  pbuf_free(p);
}
    911a:	3728      	adds	r7, #40	; 0x28
    911c:	46bd      	mov	sp, r7
    911e:	bd80      	pop	{r7, pc}
    9120:	10001978 	.word	0x10001978

00009124 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or etharp_send_ip().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, ip_addr_t *ipaddr)
{
    9124:	b580      	push	{r7, lr}
    9126:	b088      	sub	sp, #32
    9128:	af00      	add	r7, sp, #0
    912a:	60f8      	str	r0, [r7, #12]
    912c:	60b9      	str	r1, [r7, #8]
    912e:	607a      	str	r2, [r7, #4]
  struct eth_addr *dest, mcastaddr;

  /* make room for Ethernet header - should not fail */
  if (pbuf_header(q, sizeof(struct eth_hdr)) != 0) {
    9130:	2110      	movs	r1, #16
    9132:	68b8      	ldr	r0, [r7, #8]
    9134:	f7fd fd18 	bl	6b68 <pbuf_header>
    9138:	4603      	mov	r3, r0
    913a:	2b00      	cmp	r3, #0
    913c:	d008      	beq.n	9150 <etharp_output+0x2c>
    /* bail out */
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_output: could not allocate room for header.\n"));
    LINK_STATS_INC(link.lenerr);
    913e:	4b49      	ldr	r3, [pc, #292]	; (9264 <etharp_output+0x140>)
    9140:	895b      	ldrh	r3, [r3, #10]
    9142:	3301      	adds	r3, #1
    9144:	b29a      	uxth	r2, r3
    9146:	4b47      	ldr	r3, [pc, #284]	; (9264 <etharp_output+0x140>)
    9148:	815a      	strh	r2, [r3, #10]
    return ERR_BUF;
    914a:	f06f 0301 	mvn.w	r3, #1
    914e:	e084      	b.n	925a <etharp_output+0x136>
  }

  /* assume unresolved Ethernet address */
  dest = NULL;
    9150:	2300      	movs	r3, #0
    9152:	61fb      	str	r3, [r7, #28]
  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip_addr_isbroadcast(ipaddr, netif)) {
    9154:	687b      	ldr	r3, [r7, #4]
    9156:	681b      	ldr	r3, [r3, #0]
    9158:	68f9      	ldr	r1, [r7, #12]
    915a:	4618      	mov	r0, r3
    915c:	f7fe fdea 	bl	7d34 <ip4_addr_isbroadcast>
    9160:	4603      	mov	r3, r0
    9162:	2b00      	cmp	r3, #0
    9164:	d002      	beq.n	916c <etharp_output+0x48>
    /* broadcast on Ethernet also */
    dest = (struct eth_addr *)&ethbroadcast;
    9166:	4b40      	ldr	r3, [pc, #256]	; (9268 <etharp_output+0x144>)
    9168:	61fb      	str	r3, [r7, #28]
    916a:	e06d      	b.n	9248 <etharp_output+0x124>
  /* multicast destination IP address? */
  } else if (ip_addr_ismulticast(ipaddr)) {
    916c:	687b      	ldr	r3, [r7, #4]
    916e:	681b      	ldr	r3, [r3, #0]
    9170:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    9174:	2be0      	cmp	r3, #224	; 0xe0
    9176:	d116      	bne.n	91a6 <etharp_output+0x82>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = 0x01;
    9178:	2301      	movs	r3, #1
    917a:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[1] = 0x00;
    917c:	2300      	movs	r3, #0
    917e:	757b      	strb	r3, [r7, #21]
    mcastaddr.addr[2] = 0x5e;
    9180:	235e      	movs	r3, #94	; 0x5e
    9182:	75bb      	strb	r3, [r7, #22]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
    9184:	687b      	ldr	r3, [r7, #4]
    9186:	3301      	adds	r3, #1
    9188:	781b      	ldrb	r3, [r3, #0]
    918a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    918e:	b2db      	uxtb	r3, r3
    9190:	75fb      	strb	r3, [r7, #23]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
    9192:	687b      	ldr	r3, [r7, #4]
    9194:	789b      	ldrb	r3, [r3, #2]
    9196:	763b      	strb	r3, [r7, #24]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
    9198:	687b      	ldr	r3, [r7, #4]
    919a:	78db      	ldrb	r3, [r3, #3]
    919c:	767b      	strb	r3, [r7, #25]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
    919e:	f107 0314 	add.w	r3, r7, #20
    91a2:	61fb      	str	r3, [r7, #28]
    91a4:	e050      	b.n	9248 <etharp_output+0x124>
  /* unicast destination IP address? */
  } else {
    /* outside local network? */
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) &&
    91a6:	687b      	ldr	r3, [r7, #4]
    91a8:	681a      	ldr	r2, [r3, #0]
    91aa:	68fb      	ldr	r3, [r7, #12]
    91ac:	685b      	ldr	r3, [r3, #4]
    91ae:	405a      	eors	r2, r3
    91b0:	68fb      	ldr	r3, [r7, #12]
    91b2:	689b      	ldr	r3, [r3, #8]
    91b4:	4013      	ands	r3, r2
    91b6:	2b00      	cmp	r3, #0
    91b8:	d015      	beq.n	91e6 <etharp_output+0xc2>
        !ip_addr_islinklocal(ipaddr)) {
    91ba:	687b      	ldr	r3, [r7, #4]
    91bc:	681b      	ldr	r3, [r3, #0]
    91be:	b29b      	uxth	r3, r3
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
  /* unicast destination IP address? */
  } else {
    /* outside local network? */
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) &&
    91c0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
    91c4:	4293      	cmp	r3, r2
    91c6:	d00e      	beq.n	91e6 <etharp_output+0xc2>
         router for forwarding". */
      if (!ip_addr_islinklocal(&iphdr->src))
#endif /* LWIP_AUTOIP */
      {
        /* interface has default gateway? */
        if (!ip_addr_isany(&netif->gw)) {
    91c8:	68fb      	ldr	r3, [r7, #12]
    91ca:	330c      	adds	r3, #12
    91cc:	2b00      	cmp	r3, #0
    91ce:	d007      	beq.n	91e0 <etharp_output+0xbc>
    91d0:	68fb      	ldr	r3, [r7, #12]
    91d2:	68db      	ldr	r3, [r3, #12]
    91d4:	2b00      	cmp	r3, #0
    91d6:	d003      	beq.n	91e0 <etharp_output+0xbc>
          /* send to hardware address of default gateway IP address */
          ipaddr = &(netif->gw);
    91d8:	68fb      	ldr	r3, [r7, #12]
    91da:	330c      	adds	r3, #12
    91dc:	607b      	str	r3, [r7, #4]
    91de:	e002      	b.n	91e6 <etharp_output+0xc2>
        /* no default gateway available */
        } else {
          /* no route to destination error (default gateway missing) */
          return ERR_RTE;
    91e0:	f06f 0303 	mvn.w	r3, #3
    91e4:	e039      	b.n	925a <etharp_output+0x136>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state == ETHARP_STATE_STABLE) &&
    91e6:	4b21      	ldr	r3, [pc, #132]	; (926c <etharp_output+0x148>)
    91e8:	781b      	ldrb	r3, [r3, #0]
    91ea:	4a21      	ldr	r2, [pc, #132]	; (9270 <etharp_output+0x14c>)
    91ec:	011b      	lsls	r3, r3, #4
    91ee:	4413      	add	r3, r2
    91f0:	330e      	adds	r3, #14
    91f2:	781b      	ldrb	r3, [r3, #0]
    91f4:	2b02      	cmp	r3, #2
    91f6:	d120      	bne.n	923a <etharp_output+0x116>
            (ip_addr_cmp(ipaddr, &arp_table[etharp_cached_entry].ipaddr))) {
    91f8:	687b      	ldr	r3, [r7, #4]
    91fa:	681a      	ldr	r2, [r3, #0]
    91fc:	4b1b      	ldr	r3, [pc, #108]	; (926c <etharp_output+0x148>)
    91fe:	781b      	ldrb	r3, [r3, #0]
    9200:	491b      	ldr	r1, [pc, #108]	; (9270 <etharp_output+0x14c>)
    9202:	011b      	lsls	r3, r3, #4
    9204:	440b      	add	r3, r1
    9206:	3304      	adds	r3, #4
    9208:	681b      	ldr	r3, [r3, #0]
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state == ETHARP_STATE_STABLE) &&
    920a:	429a      	cmp	r2, r3
    920c:	d115      	bne.n	923a <etharp_output+0x116>
            (ip_addr_cmp(ipaddr, &arp_table[etharp_cached_entry].ipaddr))) {
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
    920e:	4b15      	ldr	r3, [pc, #84]	; (9264 <etharp_output+0x140>)
    9210:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    9212:	3301      	adds	r3, #1
    9214:	b29a      	uxth	r2, r3
    9216:	4b13      	ldr	r3, [pc, #76]	; (9264 <etharp_output+0x140>)
    9218:	85da      	strh	r2, [r3, #46]	; 0x2e
          return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
    921a:	68fb      	ldr	r3, [r7, #12]
    921c:	f103 0123 	add.w	r1, r3, #35	; 0x23
            &arp_table[etharp_cached_entry].ethaddr);
    9220:	4b12      	ldr	r3, [pc, #72]	; (926c <etharp_output+0x148>)
    9222:	781b      	ldrb	r3, [r3, #0]
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state == ETHARP_STATE_STABLE) &&
            (ip_addr_cmp(ipaddr, &arp_table[etharp_cached_entry].ipaddr))) {
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
    9224:	011b      	lsls	r3, r3, #4
    9226:	3308      	adds	r3, #8
    9228:	4a11      	ldr	r2, [pc, #68]	; (9270 <etharp_output+0x14c>)
    922a:	4413      	add	r3, r2
    922c:	460a      	mov	r2, r1
    922e:	68b9      	ldr	r1, [r7, #8]
    9230:	68f8      	ldr	r0, [r7, #12]
    9232:	f7ff fdf5 	bl	8e20 <etharp_send_ip>
    9236:	4603      	mov	r3, r0
    9238:	e00f      	b.n	925a <etharp_output+0x136>
#if LWIP_NETIF_HWADDRHINT
      }
    }
#endif /* LWIP_NETIF_HWADDRHINT */
    /* queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, ipaddr, q);
    923a:	68ba      	ldr	r2, [r7, #8]
    923c:	6879      	ldr	r1, [r7, #4]
    923e:	68f8      	ldr	r0, [r7, #12]
    9240:	f000 f818 	bl	9274 <etharp_query>
    9244:	4603      	mov	r3, r0
    9246:	e008      	b.n	925a <etharp_output+0x136>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr), dest);
    9248:	68fb      	ldr	r3, [r7, #12]
    924a:	f103 0223 	add.w	r2, r3, #35	; 0x23
    924e:	69fb      	ldr	r3, [r7, #28]
    9250:	68b9      	ldr	r1, [r7, #8]
    9252:	68f8      	ldr	r0, [r7, #12]
    9254:	f7ff fde4 	bl	8e20 <etharp_send_ip>
    9258:	4603      	mov	r3, r0
}
    925a:	4618      	mov	r0, r3
    925c:	3720      	adds	r7, #32
    925e:	46bd      	mov	sp, r7
    9260:	bd80      	pop	{r7, pc}
    9262:	bf00      	nop
    9264:	10001978 	.word	0x10001978
    9268:	00009890 	.word	0x00009890
    926c:	100012d4 	.word	0x100012d4
    9270:	10001234 	.word	0x10001234

00009274 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, ip_addr_t *ipaddr, struct pbuf *q)
{
    9274:	b580      	push	{r7, lr}
    9276:	b08a      	sub	sp, #40	; 0x28
    9278:	af00      	add	r7, sp, #0
    927a:	60f8      	str	r0, [r7, #12]
    927c:	60b9      	str	r1, [r7, #8]
    927e:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
    9280:	68fb      	ldr	r3, [r7, #12]
    9282:	3323      	adds	r3, #35	; 0x23
    9284:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_MEM;
    9286:	f04f 33ff 	mov.w	r3, #4294967295
    928a:	627b      	str	r3, [r7, #36]	; 0x24
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip_addr_isbroadcast(ipaddr, netif) ||
    928c:	68bb      	ldr	r3, [r7, #8]
    928e:	681b      	ldr	r3, [r3, #0]
    9290:	68f9      	ldr	r1, [r7, #12]
    9292:	4618      	mov	r0, r3
    9294:	f7fe fd4e 	bl	7d34 <ip4_addr_isbroadcast>
    9298:	4603      	mov	r3, r0
    929a:	2b00      	cmp	r3, #0
    929c:	d10c      	bne.n	92b8 <etharp_query+0x44>
      ip_addr_ismulticast(ipaddr) ||
    929e:	68bb      	ldr	r3, [r7, #8]
    92a0:	681b      	ldr	r3, [r3, #0]
    92a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
  err_t result = ERR_MEM;
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip_addr_isbroadcast(ipaddr, netif) ||
    92a6:	2be0      	cmp	r3, #224	; 0xe0
    92a8:	d006      	beq.n	92b8 <etharp_query+0x44>
      ip_addr_ismulticast(ipaddr) ||
    92aa:	68bb      	ldr	r3, [r7, #8]
    92ac:	2b00      	cmp	r3, #0
    92ae:	d003      	beq.n	92b8 <etharp_query+0x44>
      ip_addr_isany(ipaddr)) {
    92b0:	68bb      	ldr	r3, [r7, #8]
    92b2:	681b      	ldr	r3, [r3, #0]
    92b4:	2b00      	cmp	r3, #0
    92b6:	d102      	bne.n	92be <etharp_query+0x4a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
    92b8:	f06f 030d 	mvn.w	r3, #13
    92bc:	e0c5      	b.n	944a <etharp_query+0x1d6>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = find_entry(ipaddr, ETHARP_FLAG_TRY_HARD);
    92be:	2101      	movs	r1, #1
    92c0:	68b8      	ldr	r0, [r7, #8]
    92c2:	f7ff fcd7 	bl	8c74 <find_entry>
    92c6:	4603      	mov	r3, r0
    92c8:	75fb      	strb	r3, [r7, #23]

  /* could not find or create entry? */
  if (i < 0) {
    92ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
    92ce:	2b00      	cmp	r3, #0
    92d0:	da0b      	bge.n	92ea <etharp_query+0x76>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
    92d2:	687b      	ldr	r3, [r7, #4]
    92d4:	2b00      	cmp	r3, #0
    92d6:	d005      	beq.n	92e4 <etharp_query+0x70>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    92d8:	4b5e      	ldr	r3, [pc, #376]	; (9454 <etharp_query+0x1e0>)
    92da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    92dc:	3301      	adds	r3, #1
    92de:	b29a      	uxth	r2, r3
    92e0:	4b5c      	ldr	r3, [pc, #368]	; (9454 <etharp_query+0x1e0>)
    92e2:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    return (err_t)i;
    92e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
    92e8:	e0af      	b.n	944a <etharp_query+0x1d6>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
    92ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
    92ee:	4a5a      	ldr	r2, [pc, #360]	; (9458 <etharp_query+0x1e4>)
    92f0:	011b      	lsls	r3, r3, #4
    92f2:	4413      	add	r3, r2
    92f4:	330e      	adds	r3, #14
    92f6:	781b      	ldrb	r3, [r3, #0]
    92f8:	2b00      	cmp	r3, #0
    92fa:	d107      	bne.n	930c <etharp_query+0x98>
    arp_table[i].state = ETHARP_STATE_PENDING;
    92fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
    9300:	4a55      	ldr	r2, [pc, #340]	; (9458 <etharp_query+0x1e4>)
    9302:	011b      	lsls	r3, r3, #4
    9304:	4413      	add	r3, r2
    9306:	330e      	adds	r3, #14
    9308:	2201      	movs	r2, #1
    930a:	701a      	strb	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
    930c:	f997 3017 	ldrsb.w	r3, [r7, #23]
    9310:	4a51      	ldr	r2, [pc, #324]	; (9458 <etharp_query+0x1e4>)
    9312:	011b      	lsls	r3, r3, #4
    9314:	4413      	add	r3, r2
    9316:	330e      	adds	r3, #14
    9318:	781b      	ldrb	r3, [r3, #0]
    931a:	2b01      	cmp	r3, #1
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state == ETHARP_STATE_STABLE)));

  /* do we have a pending entry? or an implicit query request? */
  if ((arp_table[i].state == ETHARP_STATE_PENDING) || (q == NULL)) {
    931c:	f997 3017 	ldrsb.w	r3, [r7, #23]
    9320:	4a4d      	ldr	r2, [pc, #308]	; (9458 <etharp_query+0x1e4>)
    9322:	011b      	lsls	r3, r3, #4
    9324:	4413      	add	r3, r2
    9326:	330e      	adds	r3, #14
    9328:	781b      	ldrb	r3, [r3, #0]
    932a:	2b01      	cmp	r3, #1
    932c:	d002      	beq.n	9334 <etharp_query+0xc0>
    932e:	687b      	ldr	r3, [r7, #4]
    9330:	2b00      	cmp	r3, #0
    9332:	d109      	bne.n	9348 <etharp_query+0xd4>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
    9334:	68b9      	ldr	r1, [r7, #8]
    9336:	68f8      	ldr	r0, [r7, #12]
    9338:	f000 f91a 	bl	9570 <etharp_request>
    933c:	6278      	str	r0, [r7, #36]	; 0x24
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
    933e:	687b      	ldr	r3, [r7, #4]
    9340:	2b00      	cmp	r3, #0
    9342:	d101      	bne.n	9348 <etharp_query+0xd4>
      return result;
    9344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9346:	e080      	b.n	944a <etharp_query+0x1d6>
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
  /* stable entry? */
  if (arp_table[i].state == ETHARP_STATE_STABLE) {
    9348:	f997 3017 	ldrsb.w	r3, [r7, #23]
    934c:	4a42      	ldr	r2, [pc, #264]	; (9458 <etharp_query+0x1e4>)
    934e:	011b      	lsls	r3, r3, #4
    9350:	4413      	add	r3, r2
    9352:	330e      	adds	r3, #14
    9354:	781b      	ldrb	r3, [r3, #0]
    9356:	2b02      	cmp	r3, #2
    9358:	d10f      	bne.n	937a <etharp_query+0x106>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
    935a:	7dfa      	ldrb	r2, [r7, #23]
    935c:	4b3f      	ldr	r3, [pc, #252]	; (945c <etharp_query+0x1e8>)
    935e:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = etharp_send_ip(netif, q, srcaddr, &(arp_table[i].ethaddr));
    9360:	f997 3017 	ldrsb.w	r3, [r7, #23]
    9364:	011b      	lsls	r3, r3, #4
    9366:	3308      	adds	r3, #8
    9368:	4a3b      	ldr	r2, [pc, #236]	; (9458 <etharp_query+0x1e4>)
    936a:	4413      	add	r3, r2
    936c:	69ba      	ldr	r2, [r7, #24]
    936e:	6879      	ldr	r1, [r7, #4]
    9370:	68f8      	ldr	r0, [r7, #12]
    9372:	f7ff fd55 	bl	8e20 <etharp_send_ip>
    9376:	6278      	str	r0, [r7, #36]	; 0x24
    9378:	e066      	b.n	9448 <etharp_query+0x1d4>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
    937a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    937e:	4a36      	ldr	r2, [pc, #216]	; (9458 <etharp_query+0x1e4>)
    9380:	011b      	lsls	r3, r3, #4
    9382:	4413      	add	r3, r2
    9384:	330e      	adds	r3, #14
    9386:	781b      	ldrb	r3, [r3, #0]
    9388:	2b01      	cmp	r3, #1
    938a:	d15d      	bne.n	9448 <etharp_query+0x1d4>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
    938c:	2300      	movs	r3, #0
    938e:	61fb      	str	r3, [r7, #28]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400) 
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
    9390:	687b      	ldr	r3, [r7, #4]
    9392:	623b      	str	r3, [r7, #32]
    while (p) {
    9394:	e00e      	b.n	93b4 <etharp_query+0x140>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
    9396:	6a3b      	ldr	r3, [r7, #32]
    9398:	895a      	ldrh	r2, [r3, #10]
    939a:	6a3b      	ldr	r3, [r7, #32]
    939c:	891b      	ldrh	r3, [r3, #8]
    939e:	429a      	cmp	r2, r3
      if(p->type != PBUF_ROM) {
    93a0:	6a3b      	ldr	r3, [r7, #32]
    93a2:	7b1b      	ldrb	r3, [r3, #12]
    93a4:	2b01      	cmp	r3, #1
    93a6:	d002      	beq.n	93ae <etharp_query+0x13a>
        copy_needed = 1;
    93a8:	2301      	movs	r3, #1
    93aa:	61fb      	str	r3, [r7, #28]
        break;
    93ac:	e005      	b.n	93ba <etharp_query+0x146>
      }
      p = p->next;
    93ae:	6a3b      	ldr	r3, [r7, #32]
    93b0:	681b      	ldr	r3, [r3, #0]
    93b2:	623b      	str	r3, [r7, #32]
    int copy_needed = 0;
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400) 
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
    while (p) {
    93b4:	6a3b      	ldr	r3, [r7, #32]
    93b6:	2b00      	cmp	r3, #0
    93b8:	d1ed      	bne.n	9396 <etharp_query+0x122>
        copy_needed = 1;
        break;
      }
      p = p->next;
    }
    if(copy_needed) {
    93ba:	69fb      	ldr	r3, [r7, #28]
    93bc:	2b00      	cmp	r3, #0
    93be:	d017      	beq.n	93f0 <etharp_query+0x17c>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
    93c0:	6a3b      	ldr	r3, [r7, #32]
    93c2:	891b      	ldrh	r3, [r3, #8]
    93c4:	2200      	movs	r2, #0
    93c6:	4619      	mov	r1, r3
    93c8:	2003      	movs	r0, #3
    93ca:	f7fd fa15 	bl	67f8 <pbuf_alloc>
    93ce:	6238      	str	r0, [r7, #32]
      if(p != NULL) {
    93d0:	6a3b      	ldr	r3, [r7, #32]
    93d2:	2b00      	cmp	r3, #0
    93d4:	d011      	beq.n	93fa <etharp_query+0x186>
        if (pbuf_copy(p, q) != ERR_OK) {
    93d6:	6879      	ldr	r1, [r7, #4]
    93d8:	6a38      	ldr	r0, [r7, #32]
    93da:	f7fd fce5 	bl	6da8 <pbuf_copy>
    93de:	4603      	mov	r3, r0
    93e0:	2b00      	cmp	r3, #0
    93e2:	d00a      	beq.n	93fa <etharp_query+0x186>
          pbuf_free(p);
    93e4:	6a38      	ldr	r0, [r7, #32]
    93e6:	f7fd fc2d 	bl	6c44 <pbuf_free>
          p = NULL;
    93ea:	2300      	movs	r3, #0
    93ec:	623b      	str	r3, [r7, #32]
    93ee:	e004      	b.n	93fa <etharp_query+0x186>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
    93f0:	687b      	ldr	r3, [r7, #4]
    93f2:	623b      	str	r3, [r7, #32]
      pbuf_ref(p);
    93f4:	6a38      	ldr	r0, [r7, #32]
    93f6:	f7fd fc97 	bl	6d28 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
    93fa:	6a3b      	ldr	r3, [r7, #32]
    93fc:	2b00      	cmp	r3, #0
    93fe:	d01a      	beq.n	9436 <etharp_query+0x1c2>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
    9400:	f997 3017 	ldrsb.w	r3, [r7, #23]
    9404:	4a14      	ldr	r2, [pc, #80]	; (9458 <etharp_query+0x1e4>)
    9406:	011b      	lsls	r3, r3, #4
    9408:	4413      	add	r3, r2
    940a:	681b      	ldr	r3, [r3, #0]
    940c:	2b00      	cmp	r3, #0
    940e:	d008      	beq.n	9422 <etharp_query+0x1ae>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
    9410:	f997 3017 	ldrsb.w	r3, [r7, #23]
    9414:	4a10      	ldr	r2, [pc, #64]	; (9458 <etharp_query+0x1e4>)
    9416:	011b      	lsls	r3, r3, #4
    9418:	4413      	add	r3, r2
    941a:	681b      	ldr	r3, [r3, #0]
    941c:	4618      	mov	r0, r3
    941e:	f7fd fc11 	bl	6c44 <pbuf_free>
      }
      arp_table[i].q = p;
    9422:	f997 3017 	ldrsb.w	r3, [r7, #23]
    9426:	4a0c      	ldr	r2, [pc, #48]	; (9458 <etharp_query+0x1e4>)
    9428:	011b      	lsls	r3, r3, #4
    942a:	4413      	add	r3, r2
    942c:	6a3a      	ldr	r2, [r7, #32]
    942e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
    9430:	2300      	movs	r3, #0
    9432:	627b      	str	r3, [r7, #36]	; 0x24
    9434:	e008      	b.n	9448 <etharp_query+0x1d4>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
    9436:	4b07      	ldr	r3, [pc, #28]	; (9454 <etharp_query+0x1e0>)
    9438:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    943a:	3301      	adds	r3, #1
    943c:	b29a      	uxth	r2, r3
    943e:	4b05      	ldr	r3, [pc, #20]	; (9454 <etharp_query+0x1e0>)
    9440:	849a      	strh	r2, [r3, #36]	; 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
    9442:	f04f 33ff 	mov.w	r3, #4294967295
    9446:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  return result;
    9448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    944a:	4618      	mov	r0, r3
    944c:	3728      	adds	r7, #40	; 0x28
    944e:	46bd      	mov	sp, r7
    9450:	bd80      	pop	{r7, pc}
    9452:	bf00      	nop
    9454:	10001978 	.word	0x10001978
    9458:	10001234 	.word	0x10001234
    945c:	100012d4 	.word	0x100012d4

00009460 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip_addr_t *ipdst_addr,
           const u16_t opcode)
{
    9460:	b580      	push	{r7, lr}
    9462:	b088      	sub	sp, #32
    9464:	af00      	add	r7, sp, #0
    9466:	60f8      	str	r0, [r7, #12]
    9468:	60b9      	str	r1, [r7, #8]
    946a:	607a      	str	r2, [r7, #4]
    946c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
    946e:	2300      	movs	r3, #0
    9470:	61fb      	str	r3, [r7, #28]
#if LWIP_AUTOIP
  const u8_t * ethdst_hwaddr;
#endif /* LWIP_AUTOIP */

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_RAW, SIZEOF_ETHARP_PACKET, PBUF_RAM);
    9472:	2200      	movs	r2, #0
    9474:	212c      	movs	r1, #44	; 0x2c
    9476:	2003      	movs	r0, #3
    9478:	f7fd f9be 	bl	67f8 <pbuf_alloc>
    947c:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
    947e:	69bb      	ldr	r3, [r7, #24]
    9480:	2b00      	cmp	r3, #0
    9482:	d108      	bne.n	9496 <etharp_raw+0x36>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    9484:	4b39      	ldr	r3, [pc, #228]	; (956c <etharp_raw+0x10c>)
    9486:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    9488:	3301      	adds	r3, #1
    948a:	b29a      	uxth	r2, r3
    948c:	4b37      	ldr	r3, [pc, #220]	; (956c <etharp_raw+0x10c>)
    948e:	849a      	strh	r2, [r3, #36]	; 0x24
    return ERR_MEM;
    9490:	f04f 33ff 	mov.w	r3, #4294967295
    9494:	e066      	b.n	9564 <etharp_raw+0x104>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
              (p->len >= SIZEOF_ETHARP_PACKET));

  ethhdr = (struct eth_hdr *)p->payload;
    9496:	69bb      	ldr	r3, [r7, #24]
    9498:	685b      	ldr	r3, [r3, #4]
    949a:	617b      	str	r3, [r7, #20]
  hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
    949c:	697b      	ldr	r3, [r7, #20]
    949e:	3310      	adds	r3, #16
    94a0:	613b      	str	r3, [r7, #16]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = htons(opcode);
    94a2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
    94a4:	4618      	mov	r0, r3
    94a6:	f7fd fe17 	bl	70d8 <lwip_htons>
    94aa:	4603      	mov	r3, r0
    94ac:	461a      	mov	r2, r3
    94ae:	693b      	ldr	r3, [r7, #16]
    94b0:	80da      	strh	r2, [r3, #6]
   * 'sender IP address' MUST be sent using link-layer broadcast instead of
   * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
  ethdst_hwaddr = ip_addr_islinklocal(ipsrc_addr) ? (u8_t*)(ethbroadcast.addr) : ethdst_addr->addr;
#endif /* LWIP_AUTOIP */
  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
    94b2:	693b      	ldr	r3, [r7, #16]
    94b4:	3308      	adds	r3, #8
    94b6:	2206      	movs	r2, #6
    94b8:	6839      	ldr	r1, [r7, #0]
    94ba:	4618      	mov	r0, r3
    94bc:	f000 f8e6 	bl	968c <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
    94c0:	693b      	ldr	r3, [r7, #16]
    94c2:	3312      	adds	r3, #18
    94c4:	2206      	movs	r2, #6
    94c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    94c8:	4618      	mov	r0, r3
    94ca:	f000 f8df 	bl	968c <memcpy>
  /* Write the Ethernet MAC-Addresses */
#if LWIP_AUTOIP
  ETHADDR16_COPY(&ethhdr->dest, ethdst_hwaddr);
#else  /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->dest, ethdst_addr);
    94ce:	697b      	ldr	r3, [r7, #20]
    94d0:	3302      	adds	r3, #2
    94d2:	2206      	movs	r2, #6
    94d4:	6879      	ldr	r1, [r7, #4]
    94d6:	4618      	mov	r0, r3
    94d8:	f000 f8d8 	bl	968c <memcpy>
#endif /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->src, ethsrc_addr);
    94dc:	697b      	ldr	r3, [r7, #20]
    94de:	3308      	adds	r3, #8
    94e0:	2206      	movs	r2, #6
    94e2:	68b9      	ldr	r1, [r7, #8]
    94e4:	4618      	mov	r0, r3
    94e6:	f000 f8d1 	bl	968c <memcpy>
  /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
   * structure packing. */ 
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
    94ea:	693b      	ldr	r3, [r7, #16]
    94ec:	330e      	adds	r3, #14
    94ee:	2204      	movs	r2, #4
    94f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    94f2:	4618      	mov	r0, r3
    94f4:	f000 f8ca 	bl	968c <memcpy>
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
    94f8:	693b      	ldr	r3, [r7, #16]
    94fa:	3318      	adds	r3, #24
    94fc:	2204      	movs	r2, #4
    94fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
    9500:	4618      	mov	r0, r3
    9502:	f000 f8c3 	bl	968c <memcpy>

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
    9506:	693b      	ldr	r3, [r7, #16]
    9508:	2200      	movs	r2, #0
    950a:	701a      	strb	r2, [r3, #0]
    950c:	2200      	movs	r2, #0
    950e:	f042 0201 	orr.w	r2, r2, #1
    9512:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
    9514:	693b      	ldr	r3, [r7, #16]
    9516:	2200      	movs	r2, #0
    9518:	f042 0208 	orr.w	r2, r2, #8
    951c:	709a      	strb	r2, [r3, #2]
    951e:	2200      	movs	r2, #0
    9520:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETHARP_HWADDR_LEN;
    9522:	693b      	ldr	r3, [r7, #16]
    9524:	2206      	movs	r2, #6
    9526:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip_addr_t);
    9528:	693b      	ldr	r3, [r7, #16]
    952a:	2204      	movs	r2, #4
    952c:	715a      	strb	r2, [r3, #5]

  ethhdr->type = PP_HTONS(ETHTYPE_ARP);
    952e:	697b      	ldr	r3, [r7, #20]
    9530:	2200      	movs	r2, #0
    9532:	f042 0208 	orr.w	r2, r2, #8
    9536:	739a      	strb	r2, [r3, #14]
    9538:	2200      	movs	r2, #0
    953a:	f042 0206 	orr.w	r2, r2, #6
    953e:	73da      	strb	r2, [r3, #15]
  /* send ARP query */
  result = netif->linkoutput(netif, p);
    9540:	68fb      	ldr	r3, [r7, #12]
    9542:	699b      	ldr	r3, [r3, #24]
    9544:	69b9      	ldr	r1, [r7, #24]
    9546:	68f8      	ldr	r0, [r7, #12]
    9548:	4798      	blx	r3
    954a:	61f8      	str	r0, [r7, #28]
  ETHARP_STATS_INC(etharp.xmit);
    954c:	4b07      	ldr	r3, [pc, #28]	; (956c <etharp_raw+0x10c>)
    954e:	8b1b      	ldrh	r3, [r3, #24]
    9550:	3301      	adds	r3, #1
    9552:	b29a      	uxth	r2, r3
    9554:	4b05      	ldr	r3, [pc, #20]	; (956c <etharp_raw+0x10c>)
    9556:	831a      	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
    9558:	69b8      	ldr	r0, [r7, #24]
    955a:	f7fd fb73 	bl	6c44 <pbuf_free>
  p = NULL;
    955e:	2300      	movs	r3, #0
    9560:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
    9562:	69fb      	ldr	r3, [r7, #28]
}
    9564:	4618      	mov	r0, r3
    9566:	3720      	adds	r7, #32
    9568:	46bd      	mov	sp, r7
    956a:	bd80      	pop	{r7, pc}
    956c:	10001978 	.word	0x10001978

00009570 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, ip_addr_t *ipaddr)
{
    9570:	b580      	push	{r7, lr}
    9572:	b086      	sub	sp, #24
    9574:	af04      	add	r7, sp, #16
    9576:	6078      	str	r0, [r7, #4]
    9578:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
    957a:	687b      	ldr	r3, [r7, #4]
    957c:	f103 0123 	add.w	r1, r3, #35	; 0x23
                    (struct eth_addr *)netif->hwaddr, &netif->ip_addr, &ethzero,
    9580:	687b      	ldr	r3, [r7, #4]
    9582:	f103 0023 	add.w	r0, r3, #35	; 0x23
    9586:	687b      	ldr	r3, [r7, #4]
    9588:	3304      	adds	r3, #4
 */
err_t
etharp_request(struct netif *netif, ip_addr_t *ipaddr)
{
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
    958a:	2201      	movs	r2, #1
    958c:	9203      	str	r2, [sp, #12]
    958e:	683a      	ldr	r2, [r7, #0]
    9590:	9202      	str	r2, [sp, #8]
    9592:	4a06      	ldr	r2, [pc, #24]	; (95ac <etharp_request+0x3c>)
    9594:	9201      	str	r2, [sp, #4]
    9596:	9300      	str	r3, [sp, #0]
    9598:	4603      	mov	r3, r0
    959a:	4a05      	ldr	r2, [pc, #20]	; (95b0 <etharp_request+0x40>)
    959c:	6878      	ldr	r0, [r7, #4]
    959e:	f7ff ff5f 	bl	9460 <etharp_raw>
    95a2:	4603      	mov	r3, r0
                    (struct eth_addr *)netif->hwaddr, &netif->ip_addr, &ethzero,
                    ipaddr, ARP_REQUEST);
}
    95a4:	4618      	mov	r0, r3
    95a6:	3708      	adds	r7, #8
    95a8:	46bd      	mov	sp, r7
    95aa:	bd80      	pop	{r7, pc}
    95ac:	00009898 	.word	0x00009898
    95b0:	00009890 	.word	0x00009890

000095b4 <ethernet_input>:
 * @param p the recevied packet, p->payload pointing to the ethernet header
 * @param netif the network interface on which the packet was received
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
    95b4:	b580      	push	{r7, lr}
    95b6:	b086      	sub	sp, #24
    95b8:	af00      	add	r7, sp, #0
    95ba:	6078      	str	r0, [r7, #4]
    95bc:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
    95be:	2310      	movs	r3, #16
    95c0:	82fb      	strh	r3, [r7, #22]

  if (p->len <= SIZEOF_ETH_HDR) {
    95c2:	687b      	ldr	r3, [r7, #4]
    95c4:	895b      	ldrh	r3, [r3, #10]
    95c6:	2b10      	cmp	r3, #16
    95c8:	d80c      	bhi.n	95e4 <ethernet_input+0x30>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
    95ca:	4b2f      	ldr	r3, [pc, #188]	; (9688 <ethernet_input+0xd4>)
    95cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    95ce:	3301      	adds	r3, #1
    95d0:	b29a      	uxth	r2, r3
    95d2:	4b2d      	ldr	r3, [pc, #180]	; (9688 <ethernet_input+0xd4>)
    95d4:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
    95d6:	4b2c      	ldr	r3, [pc, #176]	; (9688 <ethernet_input+0xd4>)
    95d8:	8bdb      	ldrh	r3, [r3, #30]
    95da:	3301      	adds	r3, #1
    95dc:	b29a      	uxth	r2, r3
    95de:	4b2a      	ldr	r3, [pc, #168]	; (9688 <ethernet_input+0xd4>)
    95e0:	83da      	strh	r2, [r3, #30]
    goto free_and_return;
    95e2:	e049      	b.n	9678 <ethernet_input+0xc4>
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
    95e4:	687b      	ldr	r3, [r7, #4]
    95e6:	685b      	ldr	r3, [r3, #4]
    95e8:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0], (unsigned)ethhdr->src.addr[1], (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3], (unsigned)ethhdr->src.addr[4], (unsigned)ethhdr->src.addr[5],
     (unsigned)htons(ethhdr->type)));

  type = ethhdr->type;
    95ea:	693b      	ldr	r3, [r7, #16]
    95ec:	7b9a      	ldrb	r2, [r3, #14]
    95ee:	7bdb      	ldrb	r3, [r3, #15]
    95f0:	021b      	lsls	r3, r3, #8
    95f2:	4313      	orrs	r3, r2
    95f4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  switch (type) {
    95f6:	89fb      	ldrh	r3, [r7, #14]
    95f8:	2b08      	cmp	r3, #8
    95fa:	d003      	beq.n	9604 <ethernet_input+0x50>
    95fc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
    9600:	d017      	beq.n	9632 <ethernet_input+0x7e>
    9602:	e025      	b.n	9650 <ethernet_input+0x9c>
#if LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
    9604:	683b      	ldr	r3, [r7, #0]
    9606:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    960a:	f003 0320 	and.w	r3, r3, #32
    960e:	2b00      	cmp	r3, #0
    9610:	d02d      	beq.n	966e <ethernet_input+0xba>
#if ETHARP_TRUST_IP_MAC
      /* update ARP table */
      etharp_ip_input(netif, p);
#endif /* ETHARP_TRUST_IP_MAC */
      /* skip Ethernet header */
      if(pbuf_header(p, -ip_hdr_offset)) {
    9612:	8afb      	ldrh	r3, [r7, #22]
    9614:	425b      	negs	r3, r3
    9616:	b29b      	uxth	r3, r3
    9618:	b21b      	sxth	r3, r3
    961a:	4619      	mov	r1, r3
    961c:	6878      	ldr	r0, [r7, #4]
    961e:	f7fd faa3 	bl	6b68 <pbuf_header>
    9622:	4603      	mov	r3, r0
    9624:	2b00      	cmp	r3, #0
    9626:	d124      	bne.n	9672 <ethernet_input+0xbe>
        LWIP_ASSERT("Can't move over header in packet", 0);
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip_input(p, netif);
    9628:	6839      	ldr	r1, [r7, #0]
    962a:	6878      	ldr	r0, [r7, #4]
    962c:	f7fd ffb2 	bl	7594 <ip_input>
      }
      break;
    9630:	e01b      	b.n	966a <ethernet_input+0xb6>
      
    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
    9632:	683b      	ldr	r3, [r7, #0]
    9634:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    9638:	f003 0320 	and.w	r3, r3, #32
    963c:	2b00      	cmp	r3, #0
    963e:	d01a      	beq.n	9676 <ethernet_input+0xc2>
        goto free_and_return;
      }
      /* pass p to ARP module */
      etharp_arp_input(netif, (struct eth_addr*)(netif->hwaddr), p);
    9640:	683b      	ldr	r3, [r7, #0]
    9642:	3323      	adds	r3, #35	; 0x23
    9644:	687a      	ldr	r2, [r7, #4]
    9646:	4619      	mov	r1, r3
    9648:	6838      	ldr	r0, [r7, #0]
    964a:	f7ff fc85 	bl	8f58 <etharp_arp_input>
      break;
    964e:	e00c      	b.n	966a <ethernet_input+0xb6>
      pppoe_data_input(netif, p);
      break;
#endif /* PPPOE_SUPPORT */

    default:
      ETHARP_STATS_INC(etharp.proterr);
    9650:	4b0d      	ldr	r3, [pc, #52]	; (9688 <ethernet_input+0xd4>)
    9652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    9654:	3301      	adds	r3, #1
    9656:	b29a      	uxth	r2, r3
    9658:	4b0b      	ldr	r3, [pc, #44]	; (9688 <ethernet_input+0xd4>)
    965a:	851a      	strh	r2, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
    965c:	4b0a      	ldr	r3, [pc, #40]	; (9688 <ethernet_input+0xd4>)
    965e:	8bdb      	ldrh	r3, [r3, #30]
    9660:	3301      	adds	r3, #1
    9662:	b29a      	uxth	r2, r3
    9664:	4b08      	ldr	r3, [pc, #32]	; (9688 <ethernet_input+0xd4>)
    9666:	83da      	strh	r2, [r3, #30]
      goto free_and_return;
    9668:	e006      	b.n	9678 <ethernet_input+0xc4>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
    966a:	2300      	movs	r3, #0
    966c:	e008      	b.n	9680 <ethernet_input+0xcc>
  switch (type) {
#if LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
        goto free_and_return;
    966e:	bf00      	nop
    9670:	e002      	b.n	9678 <ethernet_input+0xc4>
      etharp_ip_input(netif, p);
#endif /* ETHARP_TRUST_IP_MAC */
      /* skip Ethernet header */
      if(pbuf_header(p, -ip_hdr_offset)) {
        LWIP_ASSERT("Can't move over header in packet", 0);
        goto free_and_return;
    9672:	bf00      	nop
    9674:	e000      	b.n	9678 <ethernet_input+0xc4>
      }
      break;
      
    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
        goto free_and_return;
    9676:	bf00      	nop
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
    9678:	6878      	ldr	r0, [r7, #4]
    967a:	f7fd fae3 	bl	6c44 <pbuf_free>
  return ERR_OK;
    967e:	2300      	movs	r3, #0
}
    9680:	4618      	mov	r0, r3
    9682:	3718      	adds	r7, #24
    9684:	46bd      	mov	sp, r7
    9686:	bd80      	pop	{r7, pc}
    9688:	10001978 	.word	0x10001978

0000968c <memcpy>:
    968c:	4684      	mov	ip, r0
    968e:	ea41 0300 	orr.w	r3, r1, r0
    9692:	f013 0303 	ands.w	r3, r3, #3
    9696:	d149      	bne.n	972c <memcpy+0xa0>
    9698:	3a40      	subs	r2, #64	; 0x40
    969a:	d323      	bcc.n	96e4 <memcpy+0x58>
    969c:	680b      	ldr	r3, [r1, #0]
    969e:	6003      	str	r3, [r0, #0]
    96a0:	684b      	ldr	r3, [r1, #4]
    96a2:	6043      	str	r3, [r0, #4]
    96a4:	688b      	ldr	r3, [r1, #8]
    96a6:	6083      	str	r3, [r0, #8]
    96a8:	68cb      	ldr	r3, [r1, #12]
    96aa:	60c3      	str	r3, [r0, #12]
    96ac:	690b      	ldr	r3, [r1, #16]
    96ae:	6103      	str	r3, [r0, #16]
    96b0:	694b      	ldr	r3, [r1, #20]
    96b2:	6143      	str	r3, [r0, #20]
    96b4:	698b      	ldr	r3, [r1, #24]
    96b6:	6183      	str	r3, [r0, #24]
    96b8:	69cb      	ldr	r3, [r1, #28]
    96ba:	61c3      	str	r3, [r0, #28]
    96bc:	6a0b      	ldr	r3, [r1, #32]
    96be:	6203      	str	r3, [r0, #32]
    96c0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    96c2:	6243      	str	r3, [r0, #36]	; 0x24
    96c4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    96c6:	6283      	str	r3, [r0, #40]	; 0x28
    96c8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    96ca:	62c3      	str	r3, [r0, #44]	; 0x2c
    96cc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    96ce:	6303      	str	r3, [r0, #48]	; 0x30
    96d0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    96d2:	6343      	str	r3, [r0, #52]	; 0x34
    96d4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    96d6:	6383      	str	r3, [r0, #56]	; 0x38
    96d8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    96da:	63c3      	str	r3, [r0, #60]	; 0x3c
    96dc:	3040      	adds	r0, #64	; 0x40
    96de:	3140      	adds	r1, #64	; 0x40
    96e0:	3a40      	subs	r2, #64	; 0x40
    96e2:	d2db      	bcs.n	969c <memcpy+0x10>
    96e4:	3230      	adds	r2, #48	; 0x30
    96e6:	d30b      	bcc.n	9700 <memcpy+0x74>
    96e8:	680b      	ldr	r3, [r1, #0]
    96ea:	6003      	str	r3, [r0, #0]
    96ec:	684b      	ldr	r3, [r1, #4]
    96ee:	6043      	str	r3, [r0, #4]
    96f0:	688b      	ldr	r3, [r1, #8]
    96f2:	6083      	str	r3, [r0, #8]
    96f4:	68cb      	ldr	r3, [r1, #12]
    96f6:	60c3      	str	r3, [r0, #12]
    96f8:	3010      	adds	r0, #16
    96fa:	3110      	adds	r1, #16
    96fc:	3a10      	subs	r2, #16
    96fe:	d2f3      	bcs.n	96e8 <memcpy+0x5c>
    9700:	320c      	adds	r2, #12
    9702:	d305      	bcc.n	9710 <memcpy+0x84>
    9704:	f851 3b04 	ldr.w	r3, [r1], #4
    9708:	f840 3b04 	str.w	r3, [r0], #4
    970c:	3a04      	subs	r2, #4
    970e:	d2f9      	bcs.n	9704 <memcpy+0x78>
    9710:	3204      	adds	r2, #4
    9712:	d008      	beq.n	9726 <memcpy+0x9a>
    9714:	07d2      	lsls	r2, r2, #31
    9716:	bf1c      	itt	ne
    9718:	f811 3b01 	ldrbne.w	r3, [r1], #1
    971c:	f800 3b01 	strbne.w	r3, [r0], #1
    9720:	d301      	bcc.n	9726 <memcpy+0x9a>
    9722:	880b      	ldrh	r3, [r1, #0]
    9724:	8003      	strh	r3, [r0, #0]
    9726:	4660      	mov	r0, ip
    9728:	4770      	bx	lr
    972a:	bf00      	nop
    972c:	2a08      	cmp	r2, #8
    972e:	d313      	bcc.n	9758 <memcpy+0xcc>
    9730:	078b      	lsls	r3, r1, #30
    9732:	d0b1      	beq.n	9698 <memcpy+0xc>
    9734:	f010 0303 	ands.w	r3, r0, #3
    9738:	d0ae      	beq.n	9698 <memcpy+0xc>
    973a:	f1c3 0304 	rsb	r3, r3, #4
    973e:	1ad2      	subs	r2, r2, r3
    9740:	07db      	lsls	r3, r3, #31
    9742:	bf1c      	itt	ne
    9744:	f811 3b01 	ldrbne.w	r3, [r1], #1
    9748:	f800 3b01 	strbne.w	r3, [r0], #1
    974c:	d3a4      	bcc.n	9698 <memcpy+0xc>
    974e:	f831 3b02 	ldrh.w	r3, [r1], #2
    9752:	f820 3b02 	strh.w	r3, [r0], #2
    9756:	e79f      	b.n	9698 <memcpy+0xc>
    9758:	3a04      	subs	r2, #4
    975a:	d3d9      	bcc.n	9710 <memcpy+0x84>
    975c:	3a01      	subs	r2, #1
    975e:	f811 3b01 	ldrb.w	r3, [r1], #1
    9762:	f800 3b01 	strb.w	r3, [r0], #1
    9766:	d2f9      	bcs.n	975c <memcpy+0xd0>
    9768:	780b      	ldrb	r3, [r1, #0]
    976a:	7003      	strb	r3, [r0, #0]
    976c:	784b      	ldrb	r3, [r1, #1]
    976e:	7043      	strb	r3, [r0, #1]
    9770:	788b      	ldrb	r3, [r1, #2]
    9772:	7083      	strb	r3, [r0, #2]
    9774:	4660      	mov	r0, ip
    9776:	4770      	bx	lr

00009778 <memset>:
    9778:	b470      	push	{r4, r5, r6}
    977a:	0784      	lsls	r4, r0, #30
    977c:	d046      	beq.n	980c <memset+0x94>
    977e:	1e54      	subs	r4, r2, #1
    9780:	2a00      	cmp	r2, #0
    9782:	d041      	beq.n	9808 <memset+0x90>
    9784:	b2cd      	uxtb	r5, r1
    9786:	4603      	mov	r3, r0
    9788:	e002      	b.n	9790 <memset+0x18>
    978a:	1e62      	subs	r2, r4, #1
    978c:	b3e4      	cbz	r4, 9808 <memset+0x90>
    978e:	4614      	mov	r4, r2
    9790:	f803 5b01 	strb.w	r5, [r3], #1
    9794:	079a      	lsls	r2, r3, #30
    9796:	d1f8      	bne.n	978a <memset+0x12>
    9798:	2c03      	cmp	r4, #3
    979a:	d92e      	bls.n	97fa <memset+0x82>
    979c:	b2cd      	uxtb	r5, r1
    979e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    97a2:	2c0f      	cmp	r4, #15
    97a4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    97a8:	d919      	bls.n	97de <memset+0x66>
    97aa:	4626      	mov	r6, r4
    97ac:	f103 0210 	add.w	r2, r3, #16
    97b0:	3e10      	subs	r6, #16
    97b2:	2e0f      	cmp	r6, #15
    97b4:	f842 5c10 	str.w	r5, [r2, #-16]
    97b8:	f842 5c0c 	str.w	r5, [r2, #-12]
    97bc:	f842 5c08 	str.w	r5, [r2, #-8]
    97c0:	f842 5c04 	str.w	r5, [r2, #-4]
    97c4:	f102 0210 	add.w	r2, r2, #16
    97c8:	d8f2      	bhi.n	97b0 <memset+0x38>
    97ca:	f1a4 0210 	sub.w	r2, r4, #16
    97ce:	f022 020f 	bic.w	r2, r2, #15
    97d2:	f004 040f 	and.w	r4, r4, #15
    97d6:	3210      	adds	r2, #16
    97d8:	2c03      	cmp	r4, #3
    97da:	4413      	add	r3, r2
    97dc:	d90d      	bls.n	97fa <memset+0x82>
    97de:	461e      	mov	r6, r3
    97e0:	4622      	mov	r2, r4
    97e2:	3a04      	subs	r2, #4
    97e4:	2a03      	cmp	r2, #3
    97e6:	f846 5b04 	str.w	r5, [r6], #4
    97ea:	d8fa      	bhi.n	97e2 <memset+0x6a>
    97ec:	1f22      	subs	r2, r4, #4
    97ee:	f022 0203 	bic.w	r2, r2, #3
    97f2:	3204      	adds	r2, #4
    97f4:	4413      	add	r3, r2
    97f6:	f004 0403 	and.w	r4, r4, #3
    97fa:	b12c      	cbz	r4, 9808 <memset+0x90>
    97fc:	b2c9      	uxtb	r1, r1
    97fe:	441c      	add	r4, r3
    9800:	f803 1b01 	strb.w	r1, [r3], #1
    9804:	42a3      	cmp	r3, r4
    9806:	d1fb      	bne.n	9800 <memset+0x88>
    9808:	bc70      	pop	{r4, r5, r6}
    980a:	4770      	bx	lr
    980c:	4614      	mov	r4, r2
    980e:	4603      	mov	r3, r0
    9810:	e7c2      	b.n	9798 <memset+0x20>
    9812:	bf00      	nop

00009814 <memp_sizes>:
    9814:	001c 0020 00a4 0020 0010 0020 0018 0010     .. ... ... .....
    9824:	0010 0058                                   ..X.

00009828 <memp_num>:
    9828:	0004 0004 0005 0008 0010 0005 000f 0006     ................
    9838:	0010 0010                                   ....

0000983c <tcp_backoff>:
    983c:	0201 0403 0605 0707 0707 0707 0007 0000     ................

0000984c <tcp_persist_backoff>:
    984c:	0603 180c 6030 0078                         ....0`x.

00009854 <tcp_pcb_lists>:
    9854:	1968 1000 1970 1000 1960 1000 1974 1000     h...p...`...t...
    9864:	6163 276e 2074 6573 646e 6420 7461 2c61     can't send data,
    9874:	6d20 6375 2068 6962 2167 000a 7264 706f      much big!..drop
    9884:	6570 2064 6170 6b63 7465 000a               ped packet..

00009890 <ethbroadcast>:
    9890:	ffff ffff ffff 0000                         ........

00009898 <ethzero>:
	...

000098a0 <__cs3_regions>:
    98a0:	00000000 	.word	0x00000000
    98a4:	000098c0 	.word	0x000098c0
    98a8:	10000000 	.word	0x10000000
    98ac:	00000010 	.word	0x00000010
    98b0:	00001a98 	.word	0x00001a98
